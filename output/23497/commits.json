[
  {
    "sha": "988cab03787444e79515b33dacdddf1784a4e1a0",
    "node_id": "C_kwDOABII59oAKDk4OGNhYjAzNzg3NDQ0ZTc5NTE1YjMzZGFjZGRkZjE3ODRhNGUxYTA",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-12T15:06:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add src/node/* code to node:: namespace",
      "tree": {
        "sha": "8dd52687c16def00660b066797686555f1ce4903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dd52687c16def00660b066797686555f1ce4903"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/988cab03787444e79515b33dacdddf1784a4e1a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988cab03787444e79515b33dacdddf1784a4e1a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/988cab03787444e79515b33dacdddf1784a4e1a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988cab03787444e79515b33dacdddf1784a4e1a0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/383d350bd5107bfe00e3b90a00cab9a3c1397c72"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 222,
      "deletions": 48
    },
    "files": [
      {
        "sha": "07be0b50fdcb673bc0319b45f8e3336be31ba67d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <set>\n \n+using node::NodeContext;\n+\n static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\n {\n     static int nextLockTime = 0;"
      },
      {
        "sha": "e82a44178b973cc29da36661418215d47575df8d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -30,6 +30,8 @@\n #include <functional>\n #include <optional>\n \n+using node::NodeContext;\n+\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = urlDecode;\n "
      },
      {
        "sha": "45fb57476a6f2b12b8fe46480fcaf0f93abf7cc6",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -21,7 +21,7 @@ class DummyWalletInit : public WalletInitInterface {\n     bool HasWalletSupport() const override {return false;}\n     void AddWalletOptions(ArgsManager& argsman) const override;\n     bool ParameterInteraction() const override {return true;}\n-    void Construct(NodeContext& node) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n+    void Construct(node::NodeContext& node) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n };\n \n void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const"
      },
      {
        "sha": "7e7138b13a1a272fe4a38724124f6d5c95a3edf9",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -14,6 +14,8 @@\n #include <validation.h> // For g_chainman\n #include <warnings.h>\n \n+using node::ReadBlockFromDisk;\n+\n constexpr uint8_t DB_BEST_BLOCK{'B'};\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds"
      },
      {
        "sha": "6814a37601e5b20dc2455b64868e707cff7004bd",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -9,6 +9,8 @@\n #include <node/blockstorage.h>\n #include <util/system.h>\n \n+using node::UndoReadFromDisk;\n+\n /* The index database stores three items for each block: the disk location of the encoded filter,\n  * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n  * height, and those belonging to blocks that have been reorganized out of the active chain are"
      },
      {
        "sha": "8d32a22ab5f60d55a7d641a2f3fe007b75340b28",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -12,6 +12,12 @@\n #include <undo.h>\n #include <validation.h>\n \n+using node::CCoinsStats;\n+using node::GetBogoSize;\n+using node::ReadBlockFromDisk;\n+using node::TxOutSer;\n+using node::UndoReadFromDisk;\n+\n static constexpr uint8_t DB_BLOCK_HASH{'s'};\n static constexpr uint8_t DB_BLOCK_HEIGHT{'t'};\n static constexpr uint8_t DB_MUHASH{'M'};"
      },
      {
        "sha": "d2a6c9c9646da5ca6e2685f9e8e9eaa8b3fc4dd1",
        "filename": "src/index/coinstatsindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -52,7 +52,7 @@ class CoinStatsIndex final : public BaseIndex\n     explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     // Look up stats for a specific block using CBlockIndex\n-    bool LookUpStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const;\n+    bool LookUpStats(const CBlockIndex* block_index, node::CCoinsStats& coins_stats) const;\n };\n \n /// The global UTXO set hash object."
      },
      {
        "sha": "935a2defb2e16e43b31ee66c76c048a23a86ad04",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -9,6 +9,8 @@\n #include <util/system.h>\n #include <validation.h>\n \n+using node::OpenBlockFile;\n+\n constexpr uint8_t DB_TXINDEX{'t'};\n \n std::unique_ptr<TxIndex> g_txindex;"
      },
      {
        "sha": "f4d2458df7824e05ca2961eeb14fd3dd2147bfe6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -93,6 +93,15 @@\n #include <zmq/zmqrpc.h>\n #endif\n \n+using node::CleanupBlockRevFiles;\n+using node::DEFAULT_STOPAFTERBLOCKIMPORT;\n+using node::NodeContext;\n+using node::ThreadImport;\n+using node::fHavePruned;\n+using node::fPruneMode;\n+using node::fReindex;\n+using node::nPruneTarget;\n+\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n "
      },
      {
        "sha": "eaebb71e6a0b06d64a732b217d278a45a708219b",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -16,14 +16,16 @@ static constexpr bool DEFAULT_DAEMON = false;\n static constexpr bool DEFAULT_DAEMONWAIT = false;\n \n class ArgsManager;\n-struct NodeContext;\n namespace interfaces {\n struct BlockAndHeaderTipInfo;\n }\n+namespace node {\n+struct NodeContext;\n+} // namespace node\n \n /** Interrupt threads */\n-void Interrupt(NodeContext& node);\n-void Shutdown(NodeContext& node);\n+void Interrupt(node::NodeContext& node);\n+void Shutdown(node::NodeContext& node);\n //!Initialize the logging infrastructure\n void InitLogging(const ArgsManager& args);\n //!Parameter interaction: change current parameters depending on various rules\n@@ -55,13 +57,13 @@ bool AppInitLockDataDirectory();\n /**\n  * Initialize node and wallet interface pointers. Has no prerequisites or side effects besides allocating memory.\n  */\n-bool AppInitInterfaces(NodeContext& node);\n+bool AppInitInterfaces(node::NodeContext& node);\n /**\n  * Bitcoin core main initialization.\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n+bool AppInitMain(node::NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n \n /**\n  * Register all arguments with the ArgsManager"
      },
      {
        "sha": "b1c97946f5e960a2d05749a7ccef0c8a2c4566b4",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -33,7 +33,7 @@ class BitcoinGuiInit : public interfaces::Init\n     }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext m_node;\n+    node::NodeContext m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "de0469ccdbcd85e15385347376771d4d2e814015",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -20,7 +20,7 @@ const char* EXE_NAME = \"bitcoin-node\";\n class BitcoinNodeInit : public interfaces::Init\n {\n public:\n-    BitcoinNodeInit(NodeContext& node, const char* arg0)\n+    BitcoinNodeInit(node::NodeContext& node, const char* arg0)\n         : m_node(node),\n           m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n     {\n@@ -35,14 +35,14 @@ class BitcoinNodeInit : public interfaces::Init\n     }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext& m_node;\n+    node::NodeContext& m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace\n } // namespace init\n \n namespace interfaces {\n-std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n+std::unique_ptr<Init> MakeNodeInit(node::NodeContext& node, int argc, char* argv[], int& exit_status)\n {\n     auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n     // Check if bitcoin-node is being invoked as an IPC server. If so, then"
      },
      {
        "sha": "e825009b88e640a0bfdb7daa71d5b5777b93e8af",
        "filename": "src/init/bitcoin-qt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-qt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoin-qt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-qt.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -29,7 +29,7 @@ class BitcoinQtInit : public interfaces::Init\n         return MakeWalletClient(chain, *Assert(m_node.args));\n     }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n-    NodeContext m_node;\n+    node::NodeContext m_node;\n };\n } // namespace\n } // namespace init"
      },
      {
        "sha": "fc34d8fcb004f5209aff80ae7683197a70171a3c",
        "filename": "src/init/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/init/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoind.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -12,6 +12,8 @@\n \n #include <memory>\n \n+using node::NodeContext;\n+\n namespace init {\n namespace {\n class BitcoindInit : public interfaces::Init"
      },
      {
        "sha": "aa007536274f45c82eacc8f2f2383a89d2654674",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -28,7 +28,9 @@ enum class RBFTransactionState;\n struct bilingual_str;\n struct CBlockLocator;\n struct FeeCalculation;\n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n namespace interfaces {\n \n@@ -319,7 +321,7 @@ class ChainClient\n };\n \n //! Return implementation of Chain interface.\n-std::unique_ptr<Chain> MakeChain(NodeContext& node);\n+std::unique_ptr<Chain> MakeChain(node::NodeContext& node);\n \n } // namespace interfaces\n "
      },
      {
        "sha": "14a046c1415bf312306935619dd70ab45db41696",
        "filename": "src/interfaces/init.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -7,7 +7,9 @@\n \n #include <memory>\n \n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n namespace interfaces {\n class Chain;\n@@ -40,7 +42,7 @@ class Init\n //! status code to exit with. If this returns non-null, the caller can start up\n //! normally and use the Init object to spawn and connect to other processes\n //! while it is running.\n-std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status);\n+std::unique_ptr<Init> MakeNodeInit(node::NodeContext& node, int argc, char* argv[], int& exit_status);\n \n //! Return implementation of Init interface for the wallet process.\n std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status);"
      },
      {
        "sha": "4590c5cafc79b1bb320d361b07281fd4106dd141",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -32,8 +32,10 @@ class proxyType;\n enum class SynchronizationState;\n enum class TransactionError;\n struct CNodeStateStats;\n-struct NodeContext;\n struct bilingual_str;\n+namespace node {\n+struct NodeContext;\n+} // namespace node\n \n namespace interfaces {\n class Handler;\n@@ -242,12 +244,12 @@ class Node\n \n     //! Get and set internal node context. Useful for testing, but not\n     //! accessible across processes.\n-    virtual NodeContext* context() { return nullptr; }\n-    virtual void setContext(NodeContext* context) { }\n+    virtual node::NodeContext* context() { return nullptr; }\n+    virtual void setContext(node::NodeContext* context) { }\n };\n \n //! Return implementation of Node interface.\n-std::unique_ptr<Node> MakeNode(NodeContext& context);\n+std::unique_ptr<Node> MakeNode(node::NodeContext& context);\n \n //! Block tip (could be a header or not, depends on the subscribed signal).\n struct BlockTip {"
      },
      {
        "sha": "21a751db6c6ae82cd61a3a4959c1e989f51d847e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -43,6 +43,12 @@\n #include <optional>\n #include <typeinfo>\n \n+using node::ReadBlockFromDisk;\n+using node::ReadRawBlockFromDisk;\n+using node::fImporting;\n+using node::fPruneMode;\n+using node::fReindex;\n+\n /** How long to cache transactions in mapRelay for normal relay */\n static constexpr auto RELAY_TX_CACHE_TIME = 15min;\n /** How long a transaction has to be in the mempool before it can unconditionally be relayed (even when not in mapRelay). */"
      },
      {
        "sha": "bb1488c0ae7d95298efceb23d62eec4a38a71d77",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/system.h>\n #include <validation.h>\n \n+namespace node {\n std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n bool fHavePruned = false;\n@@ -94,12 +95,14 @@ void CleanupBlockRevFiles()\n         remove(item.second);\n     }\n }\n+} // namespace node\n \n std::string CBlockFileInfo::ToString() const\n {\n     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, FormatISO8601Date(nTimeFirst), FormatISO8601Date(nTimeLast));\n }\n \n+namespace node {\n CBlockFileInfo* GetBlockFileInfo(size_t n)\n {\n     LOCK(cs_LastBlockFile);\n@@ -561,3 +564,4 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n     } // End scope of CImportingNow\n     chainman.ActiveChainstate().LoadMempool(args);\n }\n+} // namespace node"
      },
      {
        "sha": "a0834c2792a4437757cec9c9d5999965bb599604",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -26,6 +26,7 @@ namespace Consensus {\n struct Params;\n }\n \n+namespace node {\n static constexpr bool DEFAULT_STOPAFTERBLOCKIMPORT{false};\n \n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\n@@ -78,5 +79,6 @@ bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& st\n FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp);\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args);\n+} // namespace node\n \n #endif // BITCOIN_NODE_BLOCKSTORAGE_H"
      },
      {
        "sha": "74d92b4f900def09b63e27ec72143ccc6d7c98b3",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -8,6 +8,7 @@\n #include <txmempool.h>\n #include <validation.h>\n \n+namespace node {\n void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n     assert(node.mempool);\n@@ -22,3 +23,4 @@ void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n         }\n     }\n }\n+} // namespace node"
      },
      {
        "sha": "3d534463e88d6c7dfa8fb7e769c90e2d750e1e95",
        "filename": "src/node/coin.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -9,6 +9,8 @@\n \n class COutPoint;\n class Coin;\n+\n+namespace node {\n struct NodeContext;\n \n /**\n@@ -19,6 +21,7 @@ struct NodeContext;\n  * @param[in] node The node context to use for lookup\n  * @param[in,out] coins map to fill\n  */\n-void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins);\n+void FindCoins(const node::NodeContext& node, std::map<COutPoint, Coin>& coins);\n+} // namespace node\n \n #endif // BITCOIN_NODE_COIN_H"
      },
      {
        "sha": "c22f603ca8e70d77d8e20151738ca1350ba99846",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <map>\n \n+namespace node {\n // Database-independent metric indicating the UTXO set size\n uint64_t GetBogoSize(const CScript& script_pub_key)\n {\n@@ -180,3 +181,4 @@ static void FinalizeHash(MuHash3072& muhash, CCoinsStats& stats)\n     stats.hashSerialized = out;\n }\n static void FinalizeHash(std::nullptr_t, CCoinsStats& stats) {}\n+} // namespace node"
      },
      {
        "sha": "7512301c20cc571887051585ed8f90a34d8471e4",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -18,6 +18,7 @@\n class BlockManager;\n class CCoinsView;\n \n+namespace node {\n enum class CoinStatsHashType {\n     HASH_SERIALIZED,\n     MUHASH,\n@@ -74,5 +75,6 @@ bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats,\n uint64_t GetBogoSize(const CScript& script_pub_key);\n \n CDataStream TxOutSer(const COutPoint& outpoint, const Coin& coin);\n+} // namespace node\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "893c32f1bcfe3caf6d6e112e9cbfa13aa013671e",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -14,5 +14,7 @@\n #include <txmempool.h>\n #include <validation.h>\n \n+namespace node {\n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}\n+} // namespace node"
      },
      {
        "sha": "217b446a3772ea898914bf9bd501acb2297d2316",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -26,6 +26,7 @@ class Init;\n class WalletClient;\n } // namespace interfaces\n \n+namespace node {\n //! NodeContext struct containing references to chain state and connection\n //! state.\n //!\n@@ -62,5 +63,6 @@ struct NodeContext {\n     NodeContext();\n     ~NodeContext();\n };\n+} // namespace node\n \n #endif // BITCOIN_NODE_CONTEXT_H"
      },
      {
        "sha": "cfdeb3ebc5c728cd2bb4c22ef49a446eea9842a6",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -249,8 +249,8 @@ class NodeImpl : public Node\n     bool isInitialBlockDownload() override {\n         return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n-    bool getReindex() override { return ::fReindex; }\n-    bool getImporting() override { return ::fImporting; }\n+    bool getReindex() override { return node::fReindex; }\n+    bool getImporting() override { return node::fImporting; }\n     void setNetworkActive(bool active) override\n     {\n         if (m_context->connman) {\n@@ -649,9 +649,9 @@ class ChainImpl : public Chain\n     bool havePruned() override\n     {\n         LOCK(cs_main);\n-        return ::fHavePruned;\n+        return node::fHavePruned;\n     }\n-    bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n+    bool isReadyToBroadcast() override { return !node::fImporting && !node::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override {\n         return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n@@ -730,6 +730,6 @@ class ChainImpl : public Chain\n } // namespace node\n \n namespace interfaces {\n-std::unique_ptr<Node> MakeNode(NodeContext& context) { return std::make_unique<node::NodeImpl>(context); }\n-std::unique_ptr<Chain> MakeChain(NodeContext& context) { return std::make_unique<node::ChainImpl>(context); }\n+std::unique_ptr<Node> MakeNode(node::NodeContext& context) { return std::make_unique<node::NodeImpl>(context); }\n+std::unique_ptr<Chain> MakeChain(node::NodeContext& context) { return std::make_unique<node::ChainImpl>(context); }\n } // namespace interfaces"
      },
      {
        "sha": "dd3e90819d4bed21bbe201728f3f9c7c7fbd35bf",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <numeric>\n \n+namespace node {\n PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n {\n     // Go through each input and build status\n@@ -147,3 +148,4 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     return result;\n }\n+} // namespace node"
      },
      {
        "sha": "9851a7996cc0002906333891a06bb3d7e3a9e87b",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <optional>\n \n+namespace node {\n /**\n  * Holds an analysis of one input from a PSBT\n  */\n@@ -52,5 +53,6 @@ struct PSBTAnalysis {\n  * @return A PSBTAnalysis with information about the provided PSBT.\n  */\n PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx);\n+} // namespace node\n \n #endif // BITCOIN_NODE_PSBT_H"
      },
      {
        "sha": "dcdad5c3404abe31db2647d734990165a3f54505",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <future>\n \n+namespace node {\n static TransactionError HandleATMPError(const TxValidationState& state, std::string& err_string_out)\n {\n     err_string_out = state.ToString();\n@@ -153,3 +154,4 @@ CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMe\n     }\n     return nullptr;\n }\n+} // namespace node"
      },
      {
        "sha": "fd184114f4f7a23d8d5e2a1db7e8ade500bf66f7",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -12,11 +12,13 @@\n \n class CBlockIndex;\n class CTxMemPool;\n-struct NodeContext;\n namespace Consensus {\n struct Params;\n }\n \n+namespace node {\n+struct NodeContext;\n+\n /** Maximum fee rate for sendrawtransaction and testmempoolaccept RPC calls.\n  * Also used by the GUI when broadcasting a completed PSBT.\n  * By default, a transaction with a fee rate higher than this will be rejected\n@@ -57,5 +59,6 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @returns                    The tx if found, otherwise nullptr\n  */\n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock);\n+} // namespace node\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "d4396a564230161bd35e47f322bdf1490131b33d",
        "filename": "src/node/utxo_snapshot.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/utxo_snapshot.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/node/utxo_snapshot.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/utxo_snapshot.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -9,6 +9,7 @@\n #include <uint256.h>\n #include <serialize.h>\n \n+namespace node {\n //! Metadata describing a serialized version of a UTXO set from which an\n //! assumeutxo CChainState can be constructed.\n class SnapshotMetadata\n@@ -32,5 +33,6 @@ class SnapshotMetadata\n \n     SERIALIZE_METHODS(SnapshotMetadata, obj) { READWRITE(obj.m_base_blockhash, obj.m_coins_count); }\n };\n+} // namespace node\n \n #endif // BITCOIN_NODE_UTXO_SNAPSHOT_H"
      },
      {
        "sha": "5badd6f3b8ca1adfe85cf82505241acff764d63a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -74,6 +74,8 @@ Q_DECLARE_METATYPE(CAmount)\n Q_DECLARE_METATYPE(SynchronizationState)\n Q_DECLARE_METATYPE(uint256)\n \n+using node::NodeContext;\n+\n static void RegisterMetaTypes()\n {\n     // Register meta types used for QMetaObject::invokeMethod and Qt::QueuedConnection"
      },
      {
        "sha": "4754b64c9f5b8f2e42f10455554f32832cc67e18",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -17,6 +17,9 @@\n \n #include <iostream>\n \n+using node::AnalyzePSBT;\n+using node::DEFAULT_MAX_RAW_TX_FEE_RATE;\n+using node::PSBTAnalysis;\n \n PSBTOperationsDialog::PSBTOperationsDialog(\n     QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent, GUIUtil::dialog_flags),"
      },
      {
        "sha": "30d36a5f16f3475144d09481f594840214198735",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -37,6 +37,8 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n #endif\n #endif\n \n+using node::NodeContext;\n+\n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n // This is all you need to run all the tests"
      },
      {
        "sha": "611be31a04a8e1d30aa5f5de5b1af71a14b45d60",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -29,6 +29,11 @@\n \n #include <univalue.h>\n \n+using node::GetTransaction;\n+using node::IsBlockPruned;\n+using node::NodeContext;\n+using node::ReadBlockFromDisk;\n+\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum class RetFormat {"
      },
      {
        "sha": "1f479b66ac58d78f42d5edd17488983fad53f625",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -52,6 +52,16 @@\n #include <memory>\n #include <mutex>\n \n+using node::CCoinsStats;\n+using node::CalculateCurrentUsage;\n+using node::CoinStatsHashType;\n+using node::GetUTXOStats;\n+using node::IsBlockPruned;\n+using node::NodeContext;\n+using node::ReadBlockFromDisk;\n+using node::SnapshotMetadata;\n+using node::UndoReadFromDisk;\n+\n struct CUpdatedBlock\n {\n     uint256 hash;\n@@ -1055,7 +1065,7 @@ static RPCHelpMan pruneblockchain()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    if (!fPruneMode)\n+    if (!node::fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n@@ -1506,8 +1516,8 @@ RPCHelpMan getblockchaininfo()\n     obj.pushKV(\"initialblockdownload\",  active_chainstate.IsInitialBlockDownload());\n     obj.pushKV(\"chainwork\",             tip->nChainWork.GetHex());\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n-    obj.pushKV(\"pruned\",                fPruneMode);\n-    if (fPruneMode) {\n+    obj.pushKV(\"pruned\",                node::fPruneMode);\n+    if (node::fPruneMode) {\n         const CBlockIndex* block = tip;\n         CHECK_NONFATAL(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n@@ -1520,7 +1530,7 @@ RPCHelpMan getblockchaininfo()\n         bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n-            obj.pushKV(\"prune_target_size\",  nPruneTarget);\n+            obj.pushKV(\"prune_target_size\",  node::nPruneTarget);\n         }\n     }\n "
      },
      {
        "sha": "68c405b54b556efac52506e495e18fc9448f4a6b",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -23,7 +23,9 @@ class CChainState;\n class CTxMemPool;\n class ChainstateManager;\n class UniValue;\n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n \n@@ -53,18 +55,18 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n-NodeContext& EnsureAnyNodeContext(const std::any& context);\n-CTxMemPool& EnsureMemPool(const NodeContext& node);\n+node::NodeContext& EnsureAnyNodeContext(const std::any& context);\n+CTxMemPool& EnsureMemPool(const node::NodeContext& node);\n CTxMemPool& EnsureAnyMemPool(const std::any& context);\n-ChainstateManager& EnsureChainman(const NodeContext& node);\n+ChainstateManager& EnsureChainman(const node::NodeContext& node);\n ChainstateManager& EnsureAnyChainman(const std::any& context);\n-CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n+CBlockPolicyEstimator& EnsureFeeEstimator(const node::NodeContext& node);\n CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n \n /**\n  * Helper to create UTXO snapshots given a chainstate and a file handle.\n  * @return a UniValue map containing metadata about the snapshot.\n  */\n-UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n+UniValue CreateUTXOSnapshot(node::NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n \n #endif // BITCOIN_RPC_BLOCKCHAIN_H"
      },
      {
        "sha": "8e338b84f392d9395ea549e8b15a2ae378b74ba5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -41,6 +41,8 @@\n #include <memory>\n #include <stdint.h>\n \n+using node::NodeContext;\n+\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive."
      },
      {
        "sha": "12a0fafa89b3431ca632d1d001fc819cbfa26875",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -34,6 +34,8 @@\n \n #include <univalue.h>\n \n+using node::NodeContext;\n+\n static RPCHelpMan validateaddress()\n {\n     return RPCHelpMan{\"validateaddress\","
      },
      {
        "sha": "26cc561b8eae8c52728c288ee866959d167e53f1",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -32,6 +32,8 @@\n \n #include <univalue.h>\n \n+using node::NodeContext;\n+\n const std::vector<std::string> CONNECTION_TYPE_DOC{\n         \"outbound-full-relay (default automatic connections)\",\n         \"block-relay-only (does not relay transactions or addresses)\","
      },
      {
        "sha": "b50761dd77f53e9fead577fa6819e3ae11c7fffe",
        "filename": "src/rpc/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -7,9 +7,11 @@\n \n class CConnman;\n class PeerManager;\n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n-CConnman& EnsureConnman(const NodeContext& node);\n-PeerManager& EnsurePeerman(const NodeContext& node);\n+CConnman& EnsureConnman(const node::NodeContext& node);\n+PeerManager& EnsurePeerman(const node::NodeContext& node);\n \n #endif // BITCOIN_RPC_NET_H"
      },
      {
        "sha": "d8fa32821dbb750530a9f456b1a8372c5ec4b8d0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -43,6 +43,15 @@\n \n #include <univalue.h>\n \n+using node::AnalyzePSBT;\n+using node::BroadcastTransaction;\n+using node::DEFAULT_MAX_RAW_TX_FEE_RATE;\n+using node::FindCoins;\n+using node::GetTransaction;\n+using node::NodeContext;\n+using node::PSBTAnalysis;\n+using node::ReadBlockFromDisk;\n+\n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry, CChainState& active_chainstate)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex."
      },
      {
        "sha": "0e4e3bff24a0a2d9e6c66e31e0147ff4eca03a12",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <chrono>\n \n+using node::CCoinsStats;\n+using node::CoinStatsHashType;\n \n BOOST_AUTO_TEST_SUITE(coinstatsindex_tests)\n "
      },
      {
        "sha": "5b85ccff83178aea990abee809bab6f17e80cb58",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -26,6 +26,10 @@\n #include <string>\n #include <vector>\n \n+using node::CCoinsStats;\n+using node::CoinStatsHashType;\n+using node::GetUTXOStats;\n+\n namespace {\n const TestingSetup* g_setup;\n const Coin EMPTY_COIN{};"
      },
      {
        "sha": "297edf882de863bf0980a07e82bc7d01e1cae15b",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -33,6 +33,8 @@\n \n #include <test/fuzz/fuzz.h>\n \n+using node::SnapshotMetadata;\n+\n void initialize_deserialize()\n {\n     // Fuzzers using pubkey must hold an ECCVerifyHandle."
      },
      {
        "sha": "cb5c7d02a0a098111f9dffcc70b9a714aa8512bb",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -18,6 +18,10 @@\n #include <string>\n #include <vector>\n \n+using node::AnalyzePSBT;\n+using node::PSBTAnalysis;\n+using node::PSBTInputAnalysis;\n+\n void initialize_psbt()\n {\n     static const ECCVerifyHandle verify_handle;"
      },
      {
        "sha": "56c7a14023a07a8944ace241893c0e8872fdca18",
        "filename": "src/test/fuzz/utxo_snapshot.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/utxo_snapshot.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/fuzz/utxo_snapshot.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/utxo_snapshot.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -13,6 +13,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+using node::SnapshotMetadata;\n+\n namespace {\n \n const std::vector<std::shared_ptr<CBlock>>* g_chain;"
      },
      {
        "sha": "386757a4a6cc7062f6548aa6050deb2eecd50075",
        "filename": "src/test/util/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/blockfilter.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -8,6 +8,8 @@\n #include <node/blockstorage.h>\n #include <validation.h>\n \n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n \n bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index, BlockFilter& filter)\n {"
      },
      {
        "sha": "b908bf8310a711a4d2ba1bcdb5c4e42ae02150b2",
        "filename": "src/test/util/chainstate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/chainstate.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -16,15 +16,15 @@\n \n #include <boost/test/unit_test.hpp>\n \n-const auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+const auto NoMalleation = [](CAutoFile& file, node::SnapshotMetadata& meta){};\n \n /**\n  * Create and activate a UTXO snapshot, optionally providing a function to\n  * malleate the snapshot.\n  */\n template<typename F = decltype(NoMalleation)>\n static bool\n-CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+CreateAndActivateUTXOSnapshot(node::NodeContext& node, const fs::path root, F malleation = NoMalleation)\n {\n     // Write out a snapshot to the test's tempdir.\n     //\n@@ -42,7 +42,7 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleati\n     //\n     FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n     CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n-    SnapshotMetadata metadata;\n+    node::SnapshotMetadata metadata;\n     auto_infile >> metadata;\n \n     malleation(auto_infile, metadata);"
      },
      {
        "sha": "aac83ca91934857b39254b2867124381e7dd2444",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -16,6 +16,8 @@\n #include <validation.h>\n #include <versionbits.h>\n \n+using node::NodeContext;\n+\n CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n {\n     const auto dest = DecodeDestination(address);"
      },
      {
        "sha": "86043f497a87783836a3e324b08f50b7b5bedaa4",
        "filename": "src/test/util/mining.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -13,18 +13,20 @@ class CBlock;\n class CChainParams;\n class CScript;\n class CTxIn;\n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n /** Create a blockchain, starting from genesis */\n std::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const CChainParams& params);\n \n /** Returns the generated coin */\n-CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n+CTxIn MineBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);\n \n /** Prepare a block to be mined */\n-std::shared_ptr<CBlock> PrepareBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n+std::shared_ptr<CBlock> PrepareBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);\n \n /** RPC-like helper function, returns the generated coin */\n-CTxIn generatetoaddress(const NodeContext&, const std::string& address);\n+CTxIn generatetoaddress(const node::NodeContext&, const std::string& address);\n \n #endif // BITCOIN_TEST_UTIL_MINING_H"
      },
      {
        "sha": "78bea2e17aec09e5d20b66324a19dada925eeaa2",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -75,7 +75,7 @@ static constexpr CAmount CENT{1000000};\n  */\n struct BasicTestingSetup {\n     ECCVerifyHandle globalVerifyHandle;\n-    NodeContext m_node;\n+    node::NodeContext m_node;\n \n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();"
      },
      {
        "sha": "d90e01466ade943761d683bce74c0ba470d4e703",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -20,6 +20,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using node::SnapshotMetadata;\n+\n BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\n \n //! Basic tests for ChainstateManager."
      },
      {
        "sha": "e8487f893e6b29065d6aba5fb23f5f11515074d5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -61,6 +61,25 @@\n \n #include <boost/algorithm/string/replace.hpp>\n \n+using node::BLOCKFILE_CHUNK_SIZE;\n+using node::CCoinsStats;\n+using node::CalculateCurrentUsage;\n+using node::CoinStatsHashType;\n+using node::GetUTXOStats;\n+using node::OpenBlockFile;\n+using node::ReadBlockFromDisk;\n+using node::SaveBlockToDisk;\n+using node::SnapshotMetadata;\n+using node::UNDOFILE_CHUNK_SIZE;\n+using node::UndoReadFromDisk;\n+using node::UnlinkPrunedFiles;\n+using node::WriteUndoDataForBlock;\n+using node::fHavePruned;\n+using node::fImporting;\n+using node::fPruneMode;\n+using node::fReindex;\n+using node::nPruneTarget;\n+\n #define MICRO 0.000001\n #define MILLI 0.001\n \n@@ -138,13 +157,22 @@ namespace {\n } // namespace\n \n // Internal stuff from blockstorage ...\n+namespace node {\n extern RecursiveMutex cs_LastBlockFile;\n extern std::vector<CBlockFileInfo> vinfoBlockFile;\n extern int nLastBlockFile;\n extern bool fCheckForPruning;\n extern std::set<CBlockIndex*> setDirtyBlockIndex;\n extern std::set<int> setDirtyFileInfo;\n void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false);\n+} // namespace node\n+using node::cs_LastBlockFile;\n+using node::vinfoBlockFile;\n+using node::nLastBlockFile;\n+using node::fCheckForPruning;\n+using node::setDirtyBlockIndex;\n+using node::setDirtyFileInfo;\n+using node::FlushBlockFile;\n // ... TODO move fully to blockstorage\n \n CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash) const"
      },
      {
        "sha": "084f6ee0417e7c2c90a1f2a2a589431fb700d394",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -43,12 +43,14 @@ class CChainParams;\n struct CCheckpointData;\n class CTxMemPool;\n class ChainstateManager;\n-class SnapshotMetadata;\n struct ChainTxData;\n struct DisconnectedBlockTransactions;\n struct PrecomputedTransactionData;\n struct LockPoints;\n struct AssumeutxoData;\n+namespace node {\n+class SnapshotMetadata;\n+} // namespace node\n \n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n@@ -902,7 +904,7 @@ class ChainstateManager\n     [[nodiscard]] bool PopulateAndValidateSnapshot(\n         CChainState& snapshot_chainstate,\n         CAutoFile& coins_file,\n-        const SnapshotMetadata& metadata);\n+        const node::SnapshotMetadata& metadata);\n \n public:\n     std::thread m_load_block;\n@@ -947,7 +949,7 @@ class ChainstateManager\n     //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n     //!   ChainstateActive().\n     [[nodiscard]] bool ActivateSnapshot(\n-        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n+        CAutoFile& coins_file, const node::SnapshotMetadata& metadata, bool in_memory);\n \n     //! The most-work chain.\n     CChainState& ActiveChainstate() const;"
      },
      {
        "sha": "02eada12772a0c1fdf480b45437c592965031c96",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -23,6 +23,8 @@\n #include <wallet/wallet.h>\n #include <walletinitinterface.h>\n \n+using node::NodeContext;\n+\n class WalletInit : public WalletInitInterface\n {\n public:"
      },
      {
        "sha": "b6d16b7e8ddd441c3fb1d1226a559c3a4329e858",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -30,6 +30,10 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n+using node::GetBlockFileInfo;\n+using node::MAX_BLOCKFILE_SIZE;\n+using node::UnlinkPrunedFiles;\n+\n RPCHelpMan importmulti();\n RPCHelpMan dumpwallet();\n RPCHelpMan importwallet();"
      },
      {
        "sha": "7624c2b16de66ced045211cbc0af8c16e8d92cca",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -7,7 +7,9 @@\n \n class ArgsManager;\n \n+namespace node {\n struct NodeContext;\n+} // namespace node\n \n class WalletInitInterface {\n public:\n@@ -18,7 +20,7 @@ class WalletInitInterface {\n     /** Check wallet parameter interaction */\n     virtual bool ParameterInteraction() const = 0;\n     /** Add wallets that should be opened to list of chain clients. */\n-    virtual void Construct(NodeContext& node) const = 0;\n+    virtual void Construct(node::NodeContext& node) const = 0;\n \n     virtual ~WalletInitInterface() {}\n };"
      },
      {
        "sha": "f01f2fae7a2456351df0bc464fde90de1cf9691a",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cab03787444e79515b33dacdddf1784a4e1a0/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cab03787444e79515b33dacdddf1784a4e1a0/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=988cab03787444e79515b33dacdddf1784a4e1a0",
        "patch": "@@ -23,6 +23,8 @@\n #include <string>\n #include <utility>\n \n+using node::ReadBlockFromDisk;\n+\n static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n \n static const char *MSG_HASHBLOCK = \"hashblock\";"
      }
    ]
  },
  {
    "sha": "d72688f16dd1056e3253663769034b100341664c",
    "node_id": "C_kwDOABII59oAKGQ3MjY4OGYxNmRkMTA1NmUzMjUzNjYzNzY5MDM0YjEwMDM0MTY2NGM",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-12T16:13:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add src/wallet/* code to wallet:: namespace",
      "tree": {
        "sha": "810fe93d4e03eb67ee3f061286663a5f8aca1227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/810fe93d4e03eb67ee3f061286663a5f8aca1227"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d72688f16dd1056e3253663769034b100341664c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d72688f16dd1056e3253663769034b100341664c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d72688f16dd1056e3253663769034b100341664c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d72688f16dd1056e3253663769034b100341664c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988cab03787444e79515b33dacdddf1784a4e1a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988cab03787444e79515b33dacdddf1784a4e1a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988cab03787444e79515b33dacdddf1784a4e1a0"
      }
    ],
    "stats": {
      "total": 340,
      "additions": 275,
      "deletions": 65
    },
    "files": [
      {
        "sha": "1fd2b2eb95606652447268678f79e78e194c240e",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,6 +12,17 @@\n #include <set>\n \n using node::NodeContext;\n+using wallet::AttemptSelection;\n+using wallet::CInputCoin;\n+using wallet::COutput;\n+using wallet::CWallet;\n+using wallet::CWalletTx;\n+using wallet::CoinEligibilityFilter;\n+using wallet::CoinSelectionParams;\n+using wallet::CreateDummyWalletDatabase;\n+using wallet::OutputGroup;\n+using wallet::SelectCoinsBnB;\n+using wallet::TxStateInactive;\n \n static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\n {"
      },
      {
        "sha": "fbbcb6b805253984e6c68546e11c33512e6000e6",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -14,6 +14,12 @@\n \n #include <optional>\n \n+using wallet::CWallet;\n+using wallet::CreateMockWalletDatabase;\n+using wallet::DBErrors;\n+using wallet::GetBalance;\n+using wallet::WALLET_FLAG_DESCRIPTORS;\n+\n static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_mine)\n {\n     const auto test_setup = MakeNoLogFileContext<const TestingSetup>();"
      },
      {
        "sha": "32a2a8ae055736722920ab8dc563cafd7cd703e6",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -116,7 +116,7 @@ int main(int argc, char* argv[])\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(args, command->command)) {\n+    if (!wallet::WalletTool::ExecuteWalletToolFunc(args, command->command)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      },
      {
        "sha": "e7717662c6999972096c47a9c344d94085540994",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -22,7 +22,6 @@\n #include <vector>\n \n class BanMan;\n-class CCoinControl;\n class CFeeRate;\n class CNodeStats;\n class Coin;\n@@ -36,6 +35,9 @@ struct bilingual_str;\n namespace node {\n struct NodeContext;\n } // namespace node\n+namespace wallet {\n+class CCoinControl;\n+} // namespace wallet\n \n namespace interfaces {\n class Handler;"
      },
      {
        "sha": "2ac3909bd76fbf4c229685a06d9c3f4f4ba62cf1",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -23,19 +23,21 @@\n #include <utility>\n #include <vector>\n \n-class CCoinControl;\n class CFeeRate;\n class CKey;\n-class CWallet;\n enum class FeeReason;\n enum class OutputType;\n enum class TransactionError;\n+struct PartiallySignedTransaction;\n+struct bilingual_str;\n+namespace wallet {\n+class CCoinControl;\n+class CWallet;\n enum isminetype : unsigned int;\n struct CRecipient;\n-struct PartiallySignedTransaction;\n struct WalletContext;\n-struct bilingual_str;\n using isminefilter = std::underlying_type<isminetype>::type;\n+} // namespace wallet\n \n namespace interfaces {\n \n@@ -107,7 +109,7 @@ class Wallet\n     //! Look up address in wallet, return whether exists.\n     virtual bool getAddress(const CTxDestination& dest,\n         std::string* name,\n-        isminetype* is_mine,\n+        wallet::isminetype* is_mine,\n         std::string* purpose) = 0;\n \n     //! Get wallet address list.\n@@ -135,8 +137,8 @@ class Wallet\n     virtual void listLockedCoins(std::vector<COutPoint>& outputs) = 0;\n \n     //! Create transaction.\n-    virtual CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n-        const CCoinControl& coin_control,\n+    virtual CTransactionRef createTransaction(const std::vector<wallet::CRecipient>& recipients,\n+        const wallet::CCoinControl& coin_control,\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n@@ -158,7 +160,7 @@ class Wallet\n \n     //! Create bump transaction.\n     virtual bool createBumpTransaction(const uint256& txid,\n-        const CCoinControl& coin_control,\n+        const wallet::CCoinControl& coin_control,\n         std::vector<bilingual_str>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n@@ -213,19 +215,19 @@ class Wallet\n     virtual CAmount getBalance() = 0;\n \n     //! Get available balance.\n-    virtual CAmount getAvailableBalance(const CCoinControl& coin_control) = 0;\n+    virtual CAmount getAvailableBalance(const wallet::CCoinControl& coin_control) = 0;\n \n     //! Return whether transaction input belongs to wallet.\n-    virtual isminetype txinIsMine(const CTxIn& txin) = 0;\n+    virtual wallet::isminetype txinIsMine(const CTxIn& txin) = 0;\n \n     //! Return whether transaction output belongs to wallet.\n-    virtual isminetype txoutIsMine(const CTxOut& txout) = 0;\n+    virtual wallet::isminetype txoutIsMine(const CTxOut& txout) = 0;\n \n     //! Return debit amount if transaction input belongs to wallet.\n-    virtual CAmount getDebit(const CTxIn& txin, isminefilter filter) = 0;\n+    virtual CAmount getDebit(const CTxIn& txin, wallet::isminefilter filter) = 0;\n \n     //! Return credit amount if transaction input belongs to wallet.\n-    virtual CAmount getCredit(const CTxOut& txout, isminefilter filter) = 0;\n+    virtual CAmount getCredit(const CTxOut& txout, wallet::isminefilter filter) = 0;\n \n     //! Return AvailableCoins + LockedCoins grouped by wallet address.\n     //! (put change in one group with wallet address)\n@@ -240,7 +242,7 @@ class Wallet\n \n     //! Get minimum fee.\n     virtual CAmount getMinimumFee(unsigned int tx_bytes,\n-        const CCoinControl& coin_control,\n+        const wallet::CCoinControl& coin_control,\n         int* returned_target,\n         FeeReason* reason) = 0;\n \n@@ -304,7 +306,7 @@ class Wallet\n     virtual std::unique_ptr<Handler> handleCanGetAddressesChanged(CanGetAddressesChangedFn fn) = 0;\n \n     //! Return pointer to internal wallet class, useful for testing.\n-    virtual CWallet* wallet() { return nullptr; }\n+    virtual wallet::CWallet* wallet() { return nullptr; }\n };\n \n //! Wallet chain client that in addition to having chain client methods for\n@@ -335,18 +337,18 @@ class WalletClient : public ChainClient\n    virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n \n    //! Return pointer to internal context, useful for testing.\n-   virtual WalletContext* context() { return nullptr; }\n+   virtual wallet::WalletContext* context() { return nullptr; }\n };\n \n //! Information about one wallet address.\n struct WalletAddress\n {\n     CTxDestination dest;\n-    isminetype is_mine;\n+    wallet::isminetype is_mine;\n     std::string name;\n     std::string purpose;\n \n-    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n+    WalletAddress(CTxDestination dest, wallet::isminetype is_mine, std::string name, std::string purpose)\n         : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n     {\n     }\n@@ -376,10 +378,10 @@ struct WalletBalances\n struct WalletTx\n {\n     CTransactionRef tx;\n-    std::vector<isminetype> txin_is_mine;\n-    std::vector<isminetype> txout_is_mine;\n+    std::vector<wallet::isminetype> txin_is_mine;\n+    std::vector<wallet::isminetype> txout_is_mine;\n     std::vector<CTxDestination> txout_address;\n-    std::vector<isminetype> txout_address_is_mine;\n+    std::vector<wallet::isminetype> txout_address_is_mine;\n     CAmount credit;\n     CAmount debit;\n     CAmount change;\n@@ -414,7 +416,7 @@ struct WalletTxOut\n \n //! Return implementation of Wallet interface. This function is defined in\n //! dummywallet.cpp and throws if the wallet component is not compiled.\n-std::unique_ptr<Wallet> MakeWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet);\n+std::unique_ptr<Wallet> MakeWallet(wallet::WalletContext& context, const std::shared_ptr<wallet::CWallet>& wallet);\n \n //! Return implementation of ChainClient interface for a wallet client. This\n //! function will be undefined in builds where ENABLE_WALLET is false."
      },
      {
        "sha": "4defb135d324a5ac6cfb4f36d2f0e0cb051247ed",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -31,6 +31,9 @@\n #include <QSettings>\n #include <QTreeWidget>\n \n+using wallet::CCoinControl;\n+using wallet::MIN_CHANGE;\n+\n QList<CAmount> CoinControlDialog::payAmounts;\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n "
      },
      {
        "sha": "d603d58bb5f7b11101b849dd315e342243e7c22c",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -19,7 +19,9 @@\n class PlatformStyle;\n class WalletModel;\n \n+namespace wallet {\n class CCoinControl;\n+} // namespace wallet\n \n namespace Ui {\n     class CoinControlDialog;\n@@ -42,11 +44,11 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(CCoinControl& coin_control, WalletModel* model, const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n+    explicit CoinControlDialog(wallet::CCoinControl& coin_control, WalletModel* model, const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n     ~CoinControlDialog();\n \n     // static because also called from sendcoinsdialog\n-    static void updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*);\n+    static void updateLabels(wallet::CCoinControl& m_coin_control, WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n     static bool fSubtractFeeFromAmount;\n@@ -56,7 +58,7 @@ class CoinControlDialog : public QDialog\n \n private:\n     Ui::CoinControlDialog *ui;\n-    CCoinControl& m_coin_control;\n+    wallet::CCoinControl& m_coin_control;\n     WalletModel *model;\n     int sortColumn;\n     Qt::SortOrder sortOrder;"
      },
      {
        "sha": "179b966fa55bb488e8c78b6743c82ddf9d7d72cc",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -35,6 +35,9 @@\n #include <QSettings>\n #include <QTextDocument>\n \n+using wallet::CCoinControl;\n+using wallet::DEFAULT_PAY_TX_FEE;\n+\n static constexpr std::array confTargets{2, 4, 6, 12, 24, 48, 144, 504, 1008};\n int getConfTargetForIndex(int index) {\n     if (index+1 > static_cast<int>(confTargets.size())) {"
      },
      {
        "sha": "7ec6e21063aabaf4e182a2b66f0df18cafdbc098",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,12 +12,14 @@\n #include <QString>\n #include <QTimer>\n \n-class CCoinControl;\n class ClientModel;\n class PlatformStyle;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n enum class SynchronizationState;\n+namespace wallet {\n+class CCoinControl;\n+} // namespace wallet\n \n namespace Ui {\n     class SendCoinsDialog;\n@@ -62,7 +64,7 @@ public Q_SLOTS:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;\n     WalletModel *model;\n-    std::unique_ptr<CCoinControl> m_coin_control;\n+    std::unique_ptr<wallet::CCoinControl> m_coin_control;\n     std::unique_ptr<WalletModelTransaction> m_current_transaction;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;"
      },
      {
        "sha": "ff1955231f01a0889f4b1ab85bde427b33d0ca7b",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -24,6 +24,13 @@\n #include <QTimer>\n #include <QMessageBox>\n \n+using wallet::AddWallet;\n+using wallet::CWallet;\n+using wallet::CreateMockWalletDatabase;\n+using wallet::RemoveWallet;\n+using wallet::WALLET_FLAG_DESCRIPTORS;\n+using wallet::WalletContext;\n+\n namespace\n {\n "
      },
      {
        "sha": "32fa7d763e9b4eed3b1b5990425dd9ce4944bb05",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -39,6 +39,15 @@\n #include <QListView>\n #include <QDialogButtonBox>\n \n+using wallet::AddWallet;\n+using wallet::CWallet;\n+using wallet::CreateMockWalletDatabase;\n+using wallet::RemoveWallet;\n+using wallet::WALLET_FLAG_DESCRIPTORS;\n+using wallet::WalletContext;\n+using wallet::WalletDescriptor;\n+using wallet::WalletRescanReserver;\n+\n namespace\n {\n //! Press \"Yes\" or \"Cancel\" buttons in modal send confirmation dialog."
      },
      {
        "sha": "dc3fd106782a1fa56133d79f9cefce02d4097d99",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -28,6 +28,11 @@\n \n #include <QLatin1String>\n \n+using wallet::ISMINE_ALL;\n+using wallet::ISMINE_SPENDABLE;\n+using wallet::ISMINE_WATCH_ONLY;\n+using wallet::isminetype;\n+\n QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks)\n {\n     if (!status.is_final)"
      },
      {
        "sha": "7d8eaea8b956e2c37862ef97f7287423e07ef0fa",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <QDateTime>\n \n+using wallet::ISMINE_SPENDABLE;\n+using wallet::ISMINE_WATCH_ONLY;\n+using wallet::isminetype;\n+\n /* Return positive answer if transaction should be shown in list.\n  */\n bool TransactionRecord::showTransaction()"
      },
      {
        "sha": "c7846fc06785b32bfc0edb2e1112aecb3406d87b",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -28,6 +28,11 @@\n #include <QTimer>\n #include <QWindow>\n \n+using wallet::WALLET_FLAG_BLANK_WALLET;\n+using wallet::WALLET_FLAG_DESCRIPTORS;\n+using wallet::WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+using wallet::WALLET_FLAG_EXTERNAL_SIGNER;\n+\n WalletController::WalletController(ClientModel& client_model, const PlatformStyle* platform_style, QObject* parent)\n     : QObject(parent)\n     , m_activity_thread(new QThread(this))"
      },
      {
        "sha": "915394a227c9e8757c605c0988c79327747c7b40",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -36,6 +36,9 @@\n #include <QSet>\n #include <QTimer>\n \n+using wallet::CCoinControl;\n+using wallet::CRecipient;\n+using wallet::DEFAULT_DISABLE_WALLET;\n \n WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, ClientModel& client_model, const PlatformStyle *platformStyle, QObject *parent) :\n     QObject(parent),"
      },
      {
        "sha": "ecc2e11c222d8778e0ef39ff1a0b408b44ddb80a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -32,7 +32,6 @@ class SendCoinsRecipient;\n class TransactionTableModel;\n class WalletModelTransaction;\n \n-class CCoinControl;\n class CKeyID;\n class COutPoint;\n class COutput;\n@@ -42,6 +41,9 @@ class uint256;\n namespace interfaces {\n class Node;\n } // namespace interfaces\n+namespace wallet {\n+class CCoinControl;\n+} // namespace wallet\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -99,7 +101,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const wallet::CCoinControl& coinControl);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      },
      {
        "sha": "aac090f1289c694e94d36fc90ec90121090a0c52",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -25,11 +25,13 @@\n extern const std::function<void(const std::string&)> G_TEST_LOG_FUN;\n \n // Enable BOOST_CHECK_EQUAL for enum class types\n+namespace std {\n template <typename T>\n std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)\n {\n     return stream << static_cast<typename std::underlying_type<T>::type>(e);\n }\n+} // namespace std\n \n /**\n  * This global and the helpers that use it are not thread-safe."
      },
      {
        "sha": "ee759281b047143d4e280011c3762459ebc90a1f",
        "filename": "src/test/util/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,6 +12,8 @@\n #include <wallet/wallet.h>\n #endif\n \n+using wallet::CWallet;\n+\n const std::string ADDRESS_BCRT1_UNSPENDABLE = \"bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj\";\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "31281bf70e7ce421bf951ee4fceca26e1556f1c6",
        "filename": "src/test/util/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/test/util/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/test/util/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,7 +7,9 @@\n \n #include <string>\n \n+namespace wallet {\n class CWallet;\n+} // namespace wallet\n \n // Constants //\n \n@@ -16,9 +18,9 @@ extern const std::string ADDRESS_BCRT1_UNSPENDABLE;\n // RPC-like //\n \n /** Import the address to the wallet */\n-void importaddress(CWallet& wallet, const std::string& address);\n+void importaddress(wallet::CWallet& wallet, const std::string& address);\n /** Returns a new address from the wallet */\n-std::string getnewaddress(CWallet& w);\n+std::string getnewaddress(wallet::CWallet& w);\n \n \n #endif // BITCOIN_TEST_UTIL_WALLET_H"
      },
      {
        "sha": "70b0b4aee87781fb28afe9f0599dd42869383098",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -15,6 +15,7 @@\n #include <sys/stat.h>\n #endif\n \n+namespace wallet {\n namespace {\n \n //! Make sure database has a unique fileid within the environment. If it\n@@ -846,3 +847,4 @@ std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, con\n     status = DatabaseStatus::SUCCESS;\n     return db;\n }\n+} // namespace wallet"
      },
      {
        "sha": "411bf9d5114da397ead835b4fa3edbcf3eaea0db",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -31,6 +31,7 @@\n \n struct bilingual_str;\n \n+namespace wallet {\n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n@@ -229,5 +230,6 @@ bool BerkeleyDatabaseSanityCheck();\n \n //! Return object giving access to Berkeley database at specified path.\n std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_BDB_H"
      },
      {
        "sha": "54e4d7b952a233e2cdd87297558c523bacbe22bc",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -6,7 +6,9 @@\n \n #include <util/system.h>\n \n+namespace wallet {\n CCoinControl::CCoinControl()\n {\n     m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n }\n+} // namespace wallet"
      },
      {
        "sha": "4993c01219402cb52dfa2c6893726683c58c25a2",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -18,6 +18,7 @@\n #include <map>\n #include <set>\n \n+namespace wallet {\n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n@@ -118,5 +119,6 @@ class CCoinControl\n     std::set<COutPoint> setSelected;\n     std::map<COutPoint, CTxOut> m_external_txouts;\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      },
      {
        "sha": "11419d150c5b7e7d7f989e7dc17b193fd0cfc6aa",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,6 +13,7 @@\n #include <numeric>\n #include <optional>\n \n+namespace wallet {\n // Descending order comparator\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n@@ -395,3 +396,4 @@ CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cos\n \n     return waste;\n }\n+} // namespace wallet"
      },
      {
        "sha": "68cfd5f6f7c7cd12b51ec7537e3f579aafc06a57",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <optional>\n \n+namespace wallet {\n //! target minimum change amount\n static constexpr CAmount MIN_CHANGE{COIN / 100};\n //! final minimum change amount after paying for fees\n@@ -210,5 +211,6 @@ std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std\n \n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "800aa5bf9c46805c60e4864a8828353d2ee284c2",
        "filename": "src/wallet/context.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -4,5 +4,7 @@\n \n #include <wallet/context.h>\n \n+namespace wallet {\n WalletContext::WalletContext() {}\n WalletContext::~WalletContext() {}\n+} // namespace wallet"
      },
      {
        "sha": "7aed8dce61a4371bdc938ac516d1aaa29b54e23b",
        "filename": "src/wallet/context.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,12 +13,13 @@\n #include <vector>\n \n class ArgsManager;\n-class CWallet;\n namespace interfaces {\n class Chain;\n class Wallet;\n } // namespace interfaces\n \n+namespace wallet {\n+class CWallet;\n using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n \n //! WalletContext struct containing references to state shared between CWallet\n@@ -46,5 +47,6 @@ struct WalletContext {\n     WalletContext();\n     ~WalletContext();\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_CONTEXT_H"
      },
      {
        "sha": "bdd14e57771793e9dca64cc5072e2b4698b25d84",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <vector>\n \n+namespace wallet {\n int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n {\n     // This mimics the behavior of openssl's EVP_BytesToKey with an aes256cbc\n@@ -136,3 +137,4 @@ bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned ch\n     key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n     return key.VerifyPubKey(vchPubKey);\n }\n+} // namespace wallet"
      },
      {
        "sha": "4d325c7557092d5d3cfacd25c287f3f3b970ed03",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/signingprovider.h>\n \n \n+namespace wallet {\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n const unsigned int WALLET_CRYPTO_IV_SIZE = 16;\n@@ -105,5 +106,6 @@ friend class wallet_crypto_tests::TestCrypter; // for test access to chKey/chIV\n bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "44c229d730d17fdbd095f9c6fb1324a0c2eb9a05",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <string>\n \n+namespace wallet {\n std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n     std::vector<fs::path> paths;\n@@ -132,3 +133,4 @@ bool IsSQLiteFile(const fs::path& path)\n     // Check the application id matches our network magic\n     return memcmp(Params().MessageStart(), app_id, 4) == 0;\n }\n+} // namespace wallet"
      },
      {
        "sha": "87110a8e43285e40b24bc1794081b3b2277ce247",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -18,6 +18,7 @@\n \n struct bilingual_str;\n \n+namespace wallet {\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n \n /** RAII class that provides access to a WalletDatabase */\n@@ -231,5 +232,6 @@ fs::path BDBDataFile(const fs::path& path);\n fs::path SQLiteDataFile(const fs::path& path);\n bool IsBDBFile(const fs::path& path);\n bool IsSQLiteFile(const fs::path& path);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "e2303e489b19bc6a082508ada5f34aaca08a1a80",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,6 +7,7 @@\n #include <util/translation.h>\n #include <wallet/wallet.h>\n \n+namespace wallet {\n static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n uint32_t DUMP_VERSION = 1;\n \n@@ -279,3 +280,4 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n \n     return ret;\n }\n+} // namespace wallet"
      },
      {
        "sha": "4effab3bed0e50cced7e6041da8c6ef190308cb5",
        "filename": "src/wallet/dump.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/dump.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/dump.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,11 +7,12 @@\n \n #include <fs.h>\n \n-class CWallet;\n-\n struct bilingual_str;\n \n+namespace wallet {\n+class CWallet;\n bool DumpWallet(CWallet& wallet, bilingual_str& error);\n bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_DUMP_H"
      },
      {
        "sha": "18e4f541860a6accfe7138ad139ff14e6a31ffcb",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,6 +13,7 @@\n #include <utility>\n #include <vector>\n \n+namespace wallet {\n bool ExternalSignerScriptPubKeyMan::SetupDescriptor(std::unique_ptr<Descriptor> desc)\n {\n     LOCK(cs_desc_man);\n@@ -82,3 +83,4 @@ TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransact\n     if (finalize) FinalizePSBT(psbt); // This won't work in a multisig setup\n     return TransactionError::OK;\n }\n+} // namespace wallet"
      },
      {
        "sha": "7a8b675989c23c076f4abe8db603a35bd49c84e2",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <memory>\n \n+namespace wallet {\n class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n {\n   public:\n@@ -30,4 +31,5 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n \n   TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n };\n+} // namespace wallet\n #endif // BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "b661a84a55d9e12f57acc77861d39b7bc64baf94",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -16,6 +16,7 @@\n #include <wallet/spend.h>\n #include <wallet/wallet.h>\n \n+namespace wallet {\n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<bilingual_str>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n@@ -286,3 +287,4 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n }\n \n } // namespace feebumper\n+} // namespace wallet"
      },
      {
        "sha": "191878a137bdb67d8ccb4a1816d440a08cf54347",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,13 +7,15 @@\n \n #include <primitives/transaction.h>\n \n-class CWallet;\n-class CWalletTx;\n class uint256;\n-class CCoinControl;\n enum class FeeEstimateMode;\n struct bilingual_str;\n \n+namespace wallet {\n+class CCoinControl;\n+class CWallet;\n+class CWalletTx;\n+\n namespace feebumper {\n \n enum class Result\n@@ -54,5 +56,6 @@ Result CommitTransaction(CWallet& wallet,\n     uint256& bumped_txid);\n \n } // namespace feebumper\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "6f81fa30a1d5d02a03b5b828e97af8397a6e2973",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -9,6 +9,7 @@\n #include <wallet/wallet.h>\n \n \n+namespace wallet {\n CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n {\n     return GetRequiredFeeRate(wallet).GetFee(nTxBytes);\n@@ -90,3 +91,4 @@ CFeeRate GetDiscardRate(const CWallet& wallet)\n     discard_rate = std::max(discard_rate, wallet.chain().relayDustFee());\n     return discard_rate;\n }\n+} // namespace wallet"
      },
      {
        "sha": "9ffa277adbe836d10358c8e287b1035fb1ff5177",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -8,11 +8,13 @@\n \n #include <consensus/amount.h>\n \n-class CCoinControl;\n class CFeeRate;\n-class CWallet;\n struct FeeCalculation;\n \n+namespace wallet {\n+class CCoinControl;\n+class CWallet;\n+\n /**\n  * Return the minimum required absolute fee for this size\n  * based on the required fee rate\n@@ -41,5 +43,6 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n  * Return the maximum feerate for discarding change.\n  */\n CFeeRate GetDiscardRate(const CWallet& wallet);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "767d236ecbf65310031dc13d49144bd13316999b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -25,6 +25,7 @@\n \n using node::NodeContext;\n \n+namespace wallet {\n class WalletInit : public WalletInitInterface\n {\n public:\n@@ -41,8 +42,6 @@ class WalletInit : public WalletInitInterface\n     void Construct(NodeContext& node) const override;\n };\n \n-const WalletInitInterface& g_wallet_init_interface = WalletInit();\n-\n void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n     argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n@@ -136,3 +135,6 @@ void WalletInit::Construct(NodeContext& node) const\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }\n+} // namespace wallet\n+\n+const WalletInitInterface& g_wallet_init_interface = wallet::WalletInit();"
      },
      {
        "sha": "2ee08ce81bd8c92d946e38ce7b9380a5cf961906",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -587,7 +587,7 @@ class WalletClientImpl : public WalletClient\n } // namespace wallet\n \n namespace interfaces {\n-std::unique_ptr<Wallet> MakeWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet) { return wallet ? std::make_unique<wallet::WalletImpl>(context, wallet) : nullptr; }\n+std::unique_ptr<Wallet> MakeWallet(wallet::WalletContext& context, const std::shared_ptr<wallet::CWallet>& wallet) { return wallet ? std::make_unique<wallet::WalletImpl>(context, wallet) : nullptr; }\n \n std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n {"
      },
      {
        "sha": "f19bba53027819c8848c9f04f5b01b2fe87c5d2b",
        "filename": "src/wallet/ismine.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,9 +12,11 @@\n #include <cstdint>\n #include <type_traits>\n \n-class CWallet;\n class CScript;\n \n+namespace wallet {\n+class CWallet;\n+\n /**\n  * IsMine() return codes, which depend on ScriptPubKeyMan implementation.\n  * Not every ScriptPubKeyMan covers all types, please refer to\n@@ -66,5 +68,6 @@ struct CachableAmount\n         m_value[filter] = value;\n     }\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_ISMINE_H"
      },
      {
        "sha": "3ef1dcc9fe1d1806051e62d3cbfdeb99cc14c89c",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -19,6 +19,7 @@\n \n #include <univalue.h>\n \n+namespace wallet {\n bool VerifyWallets(WalletContext& context)\n {\n     interfaces::Chain& chain = *context.chain;\n@@ -169,3 +170,4 @@ void UnloadWallets(WalletContext& context)\n         UnloadWallet(std::move(wallet));\n     }\n }\n+} // namespace wallet"
      },
      {
        "sha": "5c2bbdabe4fe81f91e8993def6ab7706dcde5d98",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,12 +11,14 @@\n \n class ArgsManager;\n class CScheduler;\n-struct WalletContext;\n \n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+namespace wallet {\n+struct WalletContext;\n+\n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n bool VerifyWallets(WalletContext& context);\n \n@@ -34,5 +36,6 @@ void StopWallets(WalletContext& context);\n \n //! Close all wallets.\n void UnloadWallets(WalletContext& context);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_LOAD_H"
      },
      {
        "sha": "e598d6f979f5895924dd9e8eed9e1147480b4344",
        "filename": "src/wallet/receive.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/receive.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/receive.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/receive.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -8,6 +8,7 @@\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>\n \n+namespace wallet {\n isminetype InputIsMine(const CWallet& wallet, const CTxIn &txin)\n {\n     AssertLockHeld(wallet.cs_wallet);\n@@ -473,3 +474,4 @@ std::set< std::set<CTxDestination> > GetAddressGroupings(const CWallet& wallet)\n \n     return ret;\n }\n+} // namespace wallet"
      },
      {
        "sha": "d7705b526258007b32e3f7bff966ef9f7f496402",
        "filename": "src/wallet/receive.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/receive.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/receive.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/receive.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>\n \n+namespace wallet {\n isminetype InputIsMine(const CWallet& wallet, const CTxIn& txin) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n \n /** Returns whether all of the inputs match the filter */\n@@ -60,5 +61,6 @@ Balance GetBalance(const CWallet& wallet, int min_depth = 0, bool avoid_reuse =\n \n std::map<CTxDestination, CAmount> GetAddressBalances(const CWallet& wallet);\n std::set<std::set<CTxDestination>> GetAddressGroupings(const CWallet& wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_RECEIVE_H"
      },
      {
        "sha": "d5654ddcfc7f6cfc9699c5a4eed9de86cdb34871",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -31,6 +31,7 @@\n \n using interfaces::FoundBlock;\n \n+namespace wallet {\n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     for (const unsigned char c : str) {\n@@ -1832,3 +1833,4 @@ RPCHelpMan listdescriptors()\n },\n     };\n }\n+} // namespace wallet"
      },
      {
        "sha": "ef491b433632e27e30dd59c0d70e882ac0f0ece6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -47,6 +47,7 @@\n \n using interfaces::FoundBlock;\n \n+namespace wallet {\n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n static const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n \n@@ -4939,3 +4940,4 @@ static const CRPCCommand commands[] =\n // clang-format on\n     return MakeSpan(commands);\n }\n+} // namespace wallet"
      },
      {
        "sha": "6c9ebf7c17811b2f215396759ae489afd03f7cc7",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,12 +13,14 @@\n #include <vector>\n \n class CRPCCommand;\n-class CWallet;\n class JSONRPCRequest;\n-class LegacyScriptPubKeyMan;\n class UniValue;\n class CTransaction;\n struct PartiallySignedTransaction;\n+\n+namespace wallet {\n+class CWallet;\n+class LegacyScriptPubKeyMan;\n struct WalletContext;\n \n Span<const CRPCCommand> GetWalletRPCCommands();\n@@ -38,4 +40,5 @@ const LegacyScriptPubKeyMan& EnsureConstLegacyScriptPubKeyMan(const CWallet& wal\n \n RPCHelpMan getaddressinfo();\n RPCHelpMan signrawtransactionwithwallet();\n+} // namespace wallet\n #endif // BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "1432206cd0c7ff64133bd1f110c2a06e2e8b26ca",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,6 +11,7 @@\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n \n+namespace wallet {\n /* End of headers, beginning of key/value data */\n static const char *HEADER_END = \"HEADER=END\";\n /* End of key/value data */\n@@ -165,3 +166,4 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n \n     return fSuccess;\n }\n+} // namespace wallet"
      },
      {
        "sha": "332aceb262112034da5a92c3ae1be42b5be5a1d0",
        "filename": "src/wallet/salvage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,6 +11,8 @@\n \n struct bilingual_str;\n \n+namespace wallet {\n bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "a694b57affccd000df1847013c8348c6f8686988",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -17,6 +17,7 @@\n \n #include <optional>\n \n+namespace wallet {\n //! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details.\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n@@ -2333,3 +2334,4 @@ bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescript\n \n     return true;\n }\n+} // namespace wallet"
      },
      {
        "sha": "f7436a23149698c08c046443798b667a62a61d83",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -25,6 +25,7 @@\n enum class OutputType;\n struct bilingual_str;\n \n+namespace wallet {\n // Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n // It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n // wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n@@ -615,5 +616,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     void UpgradeDescriptorCache();\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "018b7cf697df494675969c69f02618d2d254ea0e",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -21,6 +21,7 @@\n \n using interfaces::FoundBlock;\n \n+namespace wallet {\n static constexpr size_t OUTPUT_GROUP_MAX_ENTRIES{100};\n \n int GetTxSpendSize(const CWallet& wallet, const CWalletTx& wtx, unsigned int out, bool use_max_sig)\n@@ -1037,3 +1038,4 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+} // namespace wallet"
      },
      {
        "sha": "83ddc74ed68717d69eb05635925ad1c90600c314",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>\n \n+namespace wallet {\n /** Get the marginal bytes if spending the specified output from this transaction */\n int GetTxSpendSize(const CWallet& wallet, const CWalletTx& wtx, unsigned int out, bool use_max_sig = false);\n \n@@ -137,5 +138,6 @@ bool CreateTransaction(CWallet& wallet, const std::vector<CRecipient>& vecSend,\n  * calling CreateTransaction();\n  */\n bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_SPEND_H"
      },
      {
        "sha": "a83c2300c89f844541b4e0e6ce93c0c99a329c04",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -20,6 +20,7 @@\n #include <utility>\n #include <vector>\n \n+namespace wallet {\n static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n \n static Mutex g_sqlite_mutex;\n@@ -578,3 +579,4 @@ std::string SQLiteDatabaseVersion()\n {\n     return std::string(sqlite3_libversion());\n }\n+} // namespace wallet"
      },
      {
        "sha": "3ed598d0d2b8722687acddb9405e4489bc7524dd",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,8 @@\n #include <sqlite3.h>\n \n struct bilingual_str;\n+\n+namespace wallet {\n class SQLiteDatabase;\n \n /** RAII class that provides access to a WalletDatabase */\n@@ -116,5 +118,6 @@ class SQLiteDatabase : public WalletDatabase\n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n std::string SQLiteDatabaseVersion();\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_SQLITE_H"
      },
      {
        "sha": "546827cd08bb1c610ba2f05b6f13d6260041fb6a",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -17,6 +17,7 @@\n #include <boost/test/unit_test.hpp>\n #include <random>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(coinselector_tests, WalletTestingSetup)\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n@@ -751,3 +752,4 @@ BOOST_AUTO_TEST_CASE(waste_test)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "346eb60779db5d3a171c6cbb5e0173ee75072c44",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,6 +11,7 @@\n #include <wallet/bdb.h>\n \n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n \n static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, std::string& database_filename)\n@@ -77,3 +78,4 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "1c16da25bdafe857d286fa1d6e827f9fb148b648",
        "filename": "src/wallet/test/fuzz/notifications.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/fuzz/notifications.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/fuzz/notifications.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/fuzz/notifications.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -18,6 +18,7 @@\n #include <string>\n #include <vector>\n \n+namespace wallet {\n namespace {\n const TestingSetup* g_setup;\n \n@@ -168,3 +169,4 @@ FUZZ_TARGET_INIT(wallet_notifications, initialize_setup)\n     }\n }\n } // namespace\n+} // namespace wallet"
      },
      {
        "sha": "f06e256fe16d2d20c4f182bb67c22fe6c652a6f3",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <wallet/test/init_test_fixture.h>\n \n+namespace wallet {\n InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n     m_wallet_client = MakeWalletClient(*m_node.chain, *Assert(m_node.args));\n@@ -48,3 +49,4 @@ void InitWalletDirTestingSetup::SetWalletDir(const fs::path& walletdir_path)\n {\n     gArgs.ForceSetArg(\"-walletdir\", fs::PathToString(walletdir_path));\n }\n+} // namespace wallet"
      },
      {
        "sha": "a765183c2a96a3c1d8d9a84d6dce1bcb0bc126fe",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,6 +11,7 @@\n #include <test/util/setup_common.h>\n \n \n+namespace wallet {\n struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     explicit InitWalletDirTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~InitWalletDirTestingSetup();\n@@ -23,3 +24,4 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n };\n \n #endif // BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H\n+} // namespace wallet"
      },
      {
        "sha": "462470e161a98f516162a80cebd5f4253690c395",
        "filename": "src/wallet/test/init_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/init_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n #include <util/system.h>\n #include <wallet/test/init_test_fixture.h>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(init_tests, InitWalletDirTestingSetup)\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n@@ -83,3 +84,4 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "365bf206278662a416818ab6b3d063716995cf24",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -13,6 +13,7 @@\n #include <boost/test/unit_test.hpp>\n \n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(ismine_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(ismine_standard)\n@@ -417,3 +418,4 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "7d8f34e5a6370aa7c4f8229c39d16de5ab11b982",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -11,6 +11,7 @@\n #include <test/util/setup_common.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n static void import_descriptor(CWallet& wallet, const std::string& descriptor)\n@@ -145,3 +146,4 @@ BOOST_AUTO_TEST_CASE(parse_hd_keypath)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "9436db507ca0df9b09d65cf09a20c93a42dc41fc",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(scriptpubkeyman_tests, BasicTestingSetup)\n \n // Test LegacyScriptPubKeyMan::CanProvide behavior, making sure it returns true\n@@ -39,3 +40,4 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "b2a0697c211a8fc3312c5a782d3ba47365a3f5b6",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(spend_tests, WalletTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n@@ -63,3 +64,4 @@ BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "aa3121511d85e8debc37177424d614e980d76c23",
        "filename": "src/wallet/test/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <memory>\n \n+namespace wallet {\n std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, ArgsManager& args, const CKey& key)\n {\n     auto wallet = std::make_unique<CWallet>(&chain, \"\", args, CreateMockWalletDatabase());\n@@ -44,3 +45,4 @@ std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cc\n     BOOST_CHECK(result.last_failed_block.IsNull());\n     return wallet;\n }\n+} // namespace wallet"
      },
      {
        "sha": "712d0251cd3688cbe30e74e412b0f1ad8400d02f",
        "filename": "src/wallet/test/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,11 +10,14 @@\n class ArgsManager;\n class CChain;\n class CKey;\n-class CWallet;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+namespace wallet {\n+class CWallet;\n+\n std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, ArgsManager& args, const CKey& key);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_TEST_UTIL_H"
      },
      {
        "sha": "166e27bab985c8cf5dc524b8b17993699487ae13",
        "filename": "src/wallet/test/wallet_crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_crypto_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(wallet_crypto_tests, BasicTestingSetup)\n \n class TestCrypter\n@@ -124,3 +125,4 @@ BOOST_AUTO_TEST_CASE(decrypt) {\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "31e8cb8b31d9d6f6bdd23a706a5623d65a578c15",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <scheduler.h>\n \n+namespace wallet {\n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n       m_wallet(m_node.chain.get(), \"\", m_args, CreateMockWalletDatabase())\n@@ -19,3 +20,4 @@ WalletTestingSetup::~WalletTestingSetup()\n {\n     if (m_node.scheduler) m_node.scheduler->stop();\n }\n+} // namespace wallet"
      },
      {
        "sha": "6b294df7c7b9c214789e9268ebcd8aa8af9a7cbc",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <memory>\n \n+namespace wallet {\n /** Testing setup and teardown for wallet.\n  */\n struct WalletTestingSetup : public TestingSetup {\n@@ -25,5 +26,6 @@ struct WalletTestingSetup : public TestingSetup {\n     CWallet m_wallet;\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H"
      },
      {
        "sha": "e9afe07dd4145b1f8da4fedec50386de7b1fd3b7",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -34,6 +34,7 @@ using node::GetBlockFileInfo;\n using node::MAX_BLOCKFILE_SIZE;\n using node::UnlinkPrunedFiles;\n \n+namespace wallet {\n RPCHelpMan importmulti();\n RPCHelpMan dumpwallet();\n RPCHelpMan importwallet();\n@@ -293,7 +294,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(backup_file);\n \n-        ::dumpwallet().HandleRequest(request);\n+        wallet::dumpwallet().HandleRequest(request);\n         RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     }\n \n@@ -312,7 +313,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n         AddWallet(context, wallet);\n         wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n-        ::importwallet().HandleRequest(request);\n+        wallet::importwallet().HandleRequest(request);\n         RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n@@ -850,3 +851,4 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "9f5624861497bd356f740ad5ce89eff059d618fa",
        "filename": "src/wallet/test/wallet_transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/wallet_transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_transaction_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n \n BOOST_AUTO_TEST_CASE(roundtrip)\n@@ -22,3 +23,4 @@ BOOST_AUTO_TEST_CASE(roundtrip)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "e251a3a0e46e2d3c6de20e60ce91324975f7a072",
        "filename": "src/wallet/test/walletdb_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/walletdb_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/test/walletdb_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/walletdb_tests.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(walletdb_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(walletdb_readkeyvalue)\n@@ -27,3 +28,4 @@ BOOST_AUTO_TEST_CASE(walletdb_readkeyvalue)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+} // namespace wallet"
      },
      {
        "sha": "a46846c1d4a315b99dc3185dcfd7827a322c29c3",
        "filename": "src/wallet/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/transaction.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <wallet/transaction.h>\n \n+namespace wallet {\n bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n {\n         CMutableTransaction tx1 {*this->tx};\n@@ -23,3 +24,4 @@ int64_t CWalletTx::GetTxTime() const\n     int64_t n = nTimeSmart;\n     return n ? n : nTimeReceived;\n }\n+} // namespace wallet"
      },
      {
        "sha": "00f9c9f15449e276e3dbcffde863580f2b1aa001",
        "filename": "src/wallet/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/transaction.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -19,6 +19,7 @@\n #include <variant>\n #include <vector>\n \n+namespace wallet {\n //! State of transaction confirmed in a block.\n struct TxStateConfirmed {\n     uint256 confirmed_block_hash;\n@@ -303,5 +304,6 @@ class CWalletTx\n     CWalletTx(CWalletTx const &) = delete;\n     void operator=(CWalletTx const &x) = delete;\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_TRANSACTION_H"
      },
      {
        "sha": "a650b637997054dbdc22c08fb0d88ebb3854d87d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -48,6 +48,7 @@\n \n using interfaces::FoundBlock;\n \n+namespace wallet {\n const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n     {WALLET_FLAG_AVOID_REUSE,\n         \"You need to rescan the blockchain in order to correctly mark used \"\n@@ -3340,3 +3341,4 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+} // namespace wallet"
      },
      {
        "sha": "b3e3feaa5719bb7973c12dc7dc09fb7cdeaec8eb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -40,12 +40,17 @@\n \n #include <boost/signals2/signal.hpp>\n \n-struct WalletContext;\n \n using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n \n+class CScript;\n+enum class FeeEstimateMode;\n+struct FeeCalculation;\n struct bilingual_str;\n \n+namespace wallet {\n+struct WalletContext;\n+\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet.\n@@ -106,10 +111,7 @@ static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n \n class CCoinControl;\n class COutput;\n-class CScript;\n class CWalletTx;\n-struct FeeCalculation;\n-enum class FeeEstimateMode;\n class ReserveDestination;\n \n //! Default for -addresstype\n@@ -933,5 +935,6 @@ bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n \n bool DummySignInput(const SigningProvider& provider, CTxIn &tx_in, const CTxOut &txout, bool use_max_sig);\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_WALLET_H"
      },
      {
        "sha": "2466520176b56d68916ce043f54874228f8ced23",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -26,6 +26,7 @@\n #include <optional>\n #include <string>\n \n+namespace wallet {\n namespace DBKeys {\n const std::string ACENTRY{\"acentry\"};\n const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n@@ -1194,3 +1195,4 @@ std::unique_ptr<WalletDatabase> CreateMockWalletDatabase()\n     return std::make_unique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n #endif\n }\n+} // namespace wallet"
      },
      {
        "sha": "0551dd1302fb5d3b3304c485f5a492af0ba09625",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -15,6 +15,18 @@\n #include <string>\n #include <vector>\n \n+class CScript;\n+class uint160;\n+class uint256;\n+struct CBlockLocator;\n+\n+namespace wallet {\n+class CKeyPool;\n+class CMasterKey;\n+class CWallet;\n+class CWalletTx;\n+struct WalletContext;\n+\n /**\n  * Overview of wallet database classes:\n  *\n@@ -29,16 +41,6 @@\n \n static const bool DEFAULT_FLUSHWALLET = true;\n \n-struct CBlockLocator;\n-struct WalletContext;\n-class CKeyPool;\n-class CMasterKey;\n-class CScript;\n-class CWallet;\n-class CWalletTx;\n-class uint160;\n-class uint256;\n-\n /** Error statuses for the wallet database */\n enum class DBErrors\n {\n@@ -297,5 +299,6 @@ std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase();\n \n /** Return object for accessing temporary in-memory database. */\n std::unique_ptr<WalletDatabase> CreateMockWalletDatabase();\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "d88e4a4c58cf0137ff8c29882f0a5e409f0ae6f8",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n \n+namespace wallet {\n namespace WalletTool {\n \n // The standard wallet deleter function blocks on the validation interface\n@@ -213,3 +214,4 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n     return true;\n }\n } // namespace WalletTool\n+} // namespace wallet"
      },
      {
        "sha": "39d5bef7ef3d2691de677ba9e20c4de701578862",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,11 +7,13 @@\n \n #include <wallet/wallet.h>\n \n+namespace wallet {\n namespace WalletTool {\n \n void WalletShowInfo(CWallet* wallet_instance);\n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command);\n \n } // namespace WalletTool\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_WALLETTOOL_H"
      },
      {
        "sha": "751ef6b2adf0f8c39d7201cb3b079e21109d1fab",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -7,6 +7,7 @@\n #include <logging.h>\n #include <util/system.h>\n \n+namespace wallet {\n fs::path GetWalletDir()\n {\n     fs::path path;\n@@ -42,3 +43,4 @@ WalletFeature GetClosestWalletFeature(int version)\n     }\n     return static_cast<WalletFeature>(0);\n }\n+} // namespace wallet"
      },
      {
        "sha": "3b66f18b0f9d818c7c1f46ae095e7af9a6aca6b5",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d72688f16dd1056e3253663769034b100341664c/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=d72688f16dd1056e3253663769034b100341664c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <vector>\n \n+namespace wallet {\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n@@ -103,5 +104,6 @@ class WalletDescriptor\n     WalletDescriptor() {}\n     WalletDescriptor(std::shared_ptr<Descriptor> descriptor, uint64_t creation_time, int32_t range_start, int32_t range_end, int32_t next_index) : descriptor(descriptor), creation_time(creation_time), range_start(range_start), range_end(range_end), next_index(next_index) {}\n };\n+} // namespace wallet\n \n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  }
]