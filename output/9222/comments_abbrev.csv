gmaxwell,2016-11-26T06:54:44Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263048115,263048115,
jonasschnelli,2016-11-26T08:29:04Z,"Nice. Concept ACK.\nNeeds test.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263051382,263051382,
dooglus,2016-11-26T08:45:41Z,"@jonasschnelli I tried finding the fundrawtransaction tests but couldn't. Where are they?\n\nsrc/test/rpc_tests.cpp seems like the natural place for them, but I see no 'fund' in there at all.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263051967,263051967,
jonasschnelli,2016-11-26T09:01:56Z,"@dooglus \nThere is one at `./qa/rpc-tests/fundrawtransaction.py`.\nThe tests should make sure that the `subtractFeeFromAmount` option work in conjunction with the custom feerate option (haven't look at your code so far).",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263052532,263052532,
dooglus,2016-11-27T09:21:35Z,"@jonasschnelli Thanks for pointing me at the `qa/` directory. I hadn't noticed it before.\n\nI have added tests for `subtractFeeFromAmount`, including checking that it works in combination with custom feerate.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263111374,263111374,
sipa,2016-11-28T07:23:40Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263200387,263200387,
jonasschnelli,2016-11-28T07:36:16Z,"Code Review ACK a979010c80d5875ab26c9cdd5401e2b2905dd572.\nSquash required.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263202152,263202152,
dooglus,2016-11-28T07:47:46Z,To 'squash' the commits do I just rewrite the same branch with a `push --force`? Or make a new branch and a new pull request?,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263203903,263203903,
jonasschnelli,2016-11-28T07:49:47Z,"@dooglus: Yes. I normally do a `git rebase -I head~<amount-of-commits>`, find the commit you'd like to squash to and mark all later commits with a `s`. Then `git push --force`.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263204233,263204233,
dooglus,2016-11-28T08:20:19Z,"@jonasschnelli Thanks. The 'i' is lowercase and the 'HEAD' is uppercase but it was close enough.\n\nI used `git rebase -i HEAD~3` and it appears to have worked.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263209117,263209117,
morcos,2016-11-28T20:41:39Z,utACK,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263387858,263387858,
dooglus,2016-11-29T21:51:07Z,"Addressed @mrbandrews' nits. Should I re-squash now, or leave the 'nit' commit separate for a while?",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263710894,263710894,
morcos,2016-11-29T22:48:55Z,"re-utACK 6a41954\n\n@dooglus good question, its not always clear.  I personally think that if the prior code is not broken , then its ok not to squash.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263725673,263725673,
jonasschnelli,2016-11-30T08:03:14Z,"utACK 6a41954895460a033afc352af5c137418591cc6b\n@dooglus IMO squashing is not required when the commits has a reason to be separated. If it's just a trivial change/overhaul of the previous commit(s) in the PR, it should probably be squashed.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-263808202,263808202,
dooglus,2016-12-06T08:06:05Z,"I've addressed all the review comments, rebased, squashed, and pushed the resulting commit.\n\nI'm wondering whether there's a potential issue with using integers to select which outputs to subtract the fee from, since the outputs are specified by a JSON dictionary, and dictionary keys are inherently unordered. Are we guaranteed when we `createrawtransaction '[]' '{""a0"":1,""a1"":1,""a2"":1}'` that `",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265086138,265086138,
instagibbs,2016-12-06T13:16:53Z,"@dooglus good point, I don't think so. Recently ran into this writing extended rpc tests for something.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265147087,265147087,
dooglus,2016-12-06T18:07:00Z,"@instagibbs me too:\n\n    $ python3\n    Python 3.4.2\n\n    >>> [k for k in {'a':1,'b':2,'c':3,'d':1,'e':1,'f':1}]\n    ['c', 'd', 'f', 'b', 'e', 'a']\n\nSince the input to `fundrawtransaction` is a raw transaction with its outputs already serialized this is less of an issue. But I tend to string my RPC calls together and expect the outputs to be serialized in the order I type them to `c",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265225116,265225116,
sipa,2016-12-06T18:10:45Z,I don't think objects in JSON are assumed to have a meaningful ordering.\n,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265226157,265226157,
MarcoFalke,2016-12-06T18:30:23Z,"@dooglus For python you'd have to `import OrderedDict` (see #7980) but I don't think there is an ordered dict for json, so we should not rely on the order.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265231553,265231553,
dooglus,2016-12-06T19:46:47Z,"So we are saying that it's OK to use a list of integer indexes into the list of outputs because:\n\n1. by the time we're running `fundrawtransaction` the output list already has its order fixed (it's a raw transaction already, not a JSON object)\n2. we have no other way to refer to general outputs, since they can be arbitrary hex strings and may not even have a base58 address\n3. Bitcoin Core'",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265252867,265252867,
sipa,2016-12-06T19:55:40Z,"I think reason (1) is enough to make position based indexing ok, and (2) strengthens it.\n\nI don't think (3) is a good reason or something we should ever rely on. The only reason this is brought up is because `createrawtransaction` accepts an object to list the outputs. If strict ordering is expected there, perhaps we should change that argument from `{""addr1"":val1, ""addr2"":val2}` to `[[""addr1""",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265255388,265255388,
dooglus,2016-12-07T05:57:33Z,"@sipa I'll look into making such a change in a separate PR. Using an object for the outputs not only means we cannot guarantee the order of the outputs but also having the addresses as dictionary keys means we can't have multiple outputs with the same address, which I sometimes like to do to ([example](https://blockchain.info/tx/48d6e58a8b60e69d121eab318712e27033cbe5a76953c9a428f57cf28fbc5f29)).\",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265362922,265362922,
morcos,2016-12-07T14:48:20Z,+1 on address reuse being a sometimes valuable tool,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-265465902,265465902,
dooglus,2016-12-13T18:49:00Z,What happens next? I addressed all the comments. Is there something else I need to do?,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-266826063,266826063,
dooglus,2016-12-13T21:41:14Z,"Addressed @ryanofsky nits, rebased, squashed.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-266870586,266870586,
ryanofsky,2016-12-13T22:18:38Z,Lightly tested ACK 453bda63dd90986501ee61426e4d768a400bd371,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-266880090,266880090,
dooglus,2017-01-02T21:37:37Z,Can this be merged now?,https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-270022937,270022937,
ryanofsky,2017-12-14T21:15:15Z,"> I'll look into making such a change in a separate PR. Using an object for the outputs not only means we cannot guarantee the order of the outputs but also having the addresses as dictionary keys means we can't have multiple outputs with the same address, which I sometimes like to do to ([example](https://blockchain.info/tx/48d6e58a8b60e69d121eab318712e27033cbe5a76953c9a428f57cf28fbc5f29)).\n\n",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-351837945,351837945,
MarcoFalke,2017-12-14T21:48:57Z,"Indeed. Though, note that the rpc currently rejects duplicate addresses, and that specific case is not changed in #11872.",https://github.com/bitcoin/bitcoin/pull/9222#issuecomment-351846253,351846253,
jonasschnelli,2016-11-28T07:32:02Z,This will thrown an exception if one of the elements in the array is numeric. But I think this is okay.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r89728445,89728445,src/wallet/rpcwallet.cpp
mrbandrews,2016-11-29T18:42:10Z,"nit: you can condense this to: \nassert(result[0]['fee']==result[1]['fee']== result[2]['fee']==result[3]['fee'])",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90076856,90076856,qa/rpc-tests/fundrawtransaction.py
mrbandrews,2016-11-29T18:42:47Z,same,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90077024,90077024,qa/rpc-tests/fundrawtransaction.py
mrbandrews,2016-11-29T20:01:57Z,"Should it throw an error if the given address is valid but is not among the outputs? (would have to check for this below, after retrieving the transaction).  It seems like in this case, the user is trying to pay the fee with one of the outputs but has made an error. ",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90100155,90100155,src/wallet/rpcwallet.cpp
dooglus,2016-11-29T21:32:57Z,Interesting. I didn't know Python did that. I will do as you suggest.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90118751,90118751,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-29T21:33:07Z,Yes. Addressed in 6a41954.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90118788,90118788,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-29T21:39:23Z,"I wanted it to behave the same as it does [in `sendmany`](https://github.com/bitcoin/bitcoin/blob/v0.13.1/src/wallet/rpcwallet.cpp#L931), where it doesn't complain if you include an address that isn't a recipient at all.\n\nThe user could have a list of addresses which should pay fees when sent to, and use that same list as their `subtractFeeFromAmount` parameter whichever addresses they are sen",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90120089,90120089,src/wallet/rpcwallet.cpp
dooglus,2016-11-29T21:49:37Z,Addressed in 6a41954.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90122153,90122153,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T19:46:17Z,"One difference between this and `sendmany` is that `sendmany` requires transaction outputs to be base58 addresses, and takes `amounts` and `subtractfeefromamount` arguments in base58 form, while `fundrawtransaction` allows outputs to be arbitrary scripts. This means with the PR in its current form, there may be no way for the new `subtractFeeFromAmount` argument to refer to certain outputs.\n\nI",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90312311,90312311,src/wallet/rpcwallet.cpp
ryanofsky,2016-11-30T19:57:01Z,Would suggest changing the new `set<string>` argument to `set<int>` to be consistent with the existing `nChangePosInOut` argument which refers to an output by integer index instead of base58 address string. This would give callers more flexibility in referring to outputs and also simplify handling of the new argument below.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90314573,90314573,src/wallet/wallet.cpp
ryanofsky,2016-11-30T20:08:34Z,Maybe `s/If no addresses are specified here/If no addresses specified here are outputs in the transaction`,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90316844,90316844,src/wallet/rpcwallet.cpp
ryanofsky,2016-11-30T20:09:51Z,"Maybe mention after `This will not modify existing inputs, and will add one change output to the outputs` above that no existing outputs will be modified either unless subtractFeeFromAmount is specified.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90317075,90317075,src/wallet/rpcwallet.cpp
ryanofsky,2016-11-30T20:14:19Z,Debug output will be a little better if you use `assert_equal` instead of assert here and below.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90317911,90317911,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T20:28:10Z,"Could use list comprehension:\n\n```\ndec_tx = [self.nodes[3].decoderawtransaction(tx['hex'] for tx in result]\n```",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90320482,90320482,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T20:34:56Z,"Could use dictionary comprehension:\n\n```\noutputs = {self.nodes[2].getnewaddress(): value for value in (1.0, 1.1, 1.2, 1.3)}\n```",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90321806,90321806,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T20:44:35Z,"Could use list comprehension:\n\n```\noutput = [[out[value] for i, out in enumerate(d['vout']) if i != r['changepos']]\n          for d, r in zip(dec_tx, result)]]\n```",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90323744,90323744,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T20:48:35Z,"Could use list comprehension (and similarly below): \n\n```\noutput = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n```",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90324465,90324465,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-30T21:14:39Z,It appears that `assert_equal` can only compare two things. For cases like `assert(A == B == C == D)` would you prefer 3 separate `assert_equal()` calls instead?,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90329419,90329419,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-30T21:14:50Z,"Good idea, thanks.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90329459,90329459,qa/rpc-tests/fundrawtransaction.py
MarcoFalke,2016-11-30T21:21:27Z,Makes sense. In case something fails we have the verbose output.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90330791,90330791,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-11-30T22:36:44Z,"I actually only meant to suggest using assert_equal for binary comparisons like the one on line 698. But if you wanted to use it more broadly, you could extend the function (in util.py) to accept more arguments:\n\n```\ndef assert_equal(thing1, thing2, *args):\n    if thing1 != thing2 or any(thing1 != arg for arg in args):\n        raise AssertionError(""!(%s)"" % "" == "".join(str(arg) for arg i",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90344929,90344929,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-30T23:03:22Z,"Would it be better to extend `assert_equal()` to take an arbitrary number of parameters and have it compare them pairwise? Something like this would work:\n\n    def assert_equal(thing1, thing2, *other_things, depth=0):\n        if thing1 != thing2:\n            if depth or other_things:\n                raise AssertionError(""%s != %s (positions %d and %d)""%(str(thing1),str(thing2), depth, de",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90349350,90349350,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-11-30T23:08:28Z,"I missed your last comment. Your solution is obviously much more elegant.\n\nIs it acceptable to include a change like that in this pull request or should it be separate?",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90350152,90350152,qa/rpc-tests/fundrawtransaction.py
MarcoFalke,2016-11-30T23:14:43Z,Fine to include it here.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90350993,90350993,qa/rpc-tests/fundrawtransaction.py
instagibbs,2016-12-01T16:21:48Z,"@ryanofsky I like the idea but am a bit worried about the interaction of `subtractFeeFromPositions` and `changePosition`. It might not be clear to the user if the position marking is done before or after change output is added, or discount the wrong output by adding a `changePosition` argument.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90481671,90481671,src/wallet/rpcwallet.cpp
dooglus,2016-12-01T17:29:20Z,"At the time of running `fundrawtransaction` there is no change output, and the user wouldn't know where the change will be inserted, so the position marking must be done before the change output is added.\n\nI think since it is possible to add arbitrary hex output scripts which may not even have a corresponding address we need to be able to address the outputs by number rather than by address. I",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90495987,90495987,src/wallet/rpcwallet.cpp
instagibbs,2016-12-01T17:33:43Z,"@dooglus the user will ""know"" where change is going if they attempt to set the change index they're setting in the option, which is my point. It's not plainly clear how this should interact, unless you spell it out.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90496821,90496821,src/wallet/rpcwallet.cpp
dooglus,2016-12-01T19:18:35Z,"Oh, I see. So I should spell it out...\n\nI think it makes sense to use the position indices before the change output is added.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r90516700,90516700,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-13T19:39:11Z,New argument looks like it could be const reference,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92249051,92249051,src/wallet/wallet.cpp
ryanofsky,2016-12-13T19:40:07Z,Little better to use size_t here instead of unsigned int.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92249276,92249276,src/wallet/wallet.cpp
ryanofsky,2016-12-13T19:45:47Z,"Little unusual to use %s for the main string instead of `strprintf(""Invalid parameter, duplicated position: %d"", pos)`",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92250462,92250462,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-13T19:47:53Z,"Maybe just say an array instead of a json array, since the whole data structure is json.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92250945,92250945,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-13T19:52:01Z,"Since it is python not c, maybe replace `!` with `not`",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92251733,92251733,qa/rpc-tests/test_framework/util.py
ryanofsky,2016-12-13T20:11:39Z,"Maybe add comment describing output, could be `# Nested list of non-change output amounts for each transaction`",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92255737,92255737,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-12-13T20:13:42Z,Maybe add comment like `# List of difference in output amounts between normal and subtractFee transactions.`,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92256125,92256125,qa/rpc-tests/fundrawtransaction.py
ryanofsky,2016-12-13T20:16:56Z,This and the 5 following comments are basically just describing the asserts without adding any information. Could maybe remove the comments and condense the asserts.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92256786,92256786,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-12-13T21:18:59Z,Indeed.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92268492,92268492,src/wallet/wallet.cpp
dooglus,2016-12-13T21:19:04Z,OK.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92268510,92268510,src/wallet/wallet.cpp
dooglus,2016-12-13T21:21:35Z,"Agree, but it appears that everywhere else we refer to 'json array' (see `sendmany`, `addmultisigaddress`, `lockunspent`, `listunspent`...). Nowhere (in rpcwallet.cpp at least) do we simply say 'an array'.\n\nWill leave as 'json array' for the sake of consistency.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92268989,92268989,src/wallet/rpcwallet.cpp
dooglus,2016-12-13T21:23:15Z,Absolutely.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92269319,92269319,src/wallet/rpcwallet.cpp
dooglus,2016-12-13T21:23:45Z,"I can't imagine who might have written that! ;)\n\nWill change `!` to `not`.",https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92269408,92269408,qa/rpc-tests/test_framework/util.py
dooglus,2016-12-13T21:25:30Z,Agree.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92269744,92269744,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-12-13T21:28:56Z,OK.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92270395,92270395,qa/rpc-tests/fundrawtransaction.py
dooglus,2016-12-13T21:29:01Z,OK.,https://github.com/bitcoin/bitcoin/pull/9222#discussion_r92270410,92270410,qa/rpc-tests/fundrawtransaction.py
