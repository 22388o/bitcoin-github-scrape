[
  {
    "sha": "453bda63dd90986501ee61426e4d768a400bd371",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTNiZGE2M2RkOTA5ODY1MDFlZTYxNDI2ZTRkNzY4YTQwMGJkMzcx",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2016-12-13T21:36:23Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2016-12-13T21:36:23Z"
      },
      "message": "Add 'subtractFeeFromOutputs' option to 'fundrawtransaction'.",
      "tree": {
        "sha": "0edbbef75f7072b1d3ee1389e0a5715bd93cd4b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0edbbef75f7072b1d3ee1389e0a5715bd93cd4b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/453bda63dd90986501ee61426e4d768a400bd371",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453bda63dd90986501ee61426e4d768a400bd371",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/453bda63dd90986501ee61426e4d768a400bd371",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453bda63dd90986501ee61426e4d768a400bd371/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26fe5c98ab6a0bcf253467d70ef0d910fedac518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fe5c98ab6a0bcf253467d70ef0d910fedac518",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26fe5c98ab6a0bcf253467d70ef0d910fedac518"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 117,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b97e9aecdf42247cb10aab72e4426a5b1aa6e110",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453bda63dd90986501ee61426e4d768a400bd371/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453bda63dd90986501ee61426e4d768a400bd371/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=453bda63dd90986501ee61426e4d768a400bd371",
        "patch": "@@ -660,5 +660,75 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+        ######################################\n+        # Test subtractFeeFromOutputs option #\n+        ######################################\n+\n+        # Make sure there is exactly one input so coin selection can't skew the result\n+        assert_equal(len(self.nodes[3].listunspent(1)), 1)\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress(): 1}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = [self.nodes[3].fundrawtransaction(rawtx), # uses min_relay_tx_fee (set by settxfee)\n+                  self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}), # empty subtraction list\n+                  self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0]}), # uses min_relay_tx_fee (set by settxfee)\n+                  self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee}),\n+                  self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]})]\n+\n+        dec_tx = [self.nodes[3].decoderawtransaction(tx['hex']) for tx in result]\n+        output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n+        change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n+\n+        assert_equal(result[0]['fee'], result[1]['fee'], result[2]['fee'])\n+        assert_equal(result[3]['fee'], result[4]['fee'])\n+        assert_equal(change[0], change[1])\n+        assert_equal(output[0], output[1])\n+        assert_equal(output[0], output[2] + result[2]['fee'])\n+        assert_equal(change[0] + result[0]['fee'], change[2])\n+        assert_equal(output[3], output[4] + result[4]['fee'])\n+        assert_equal(change[3] + result[3]['fee'], change[4])\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress(): value for value in (1.0, 1.1, 1.2, 1.3)}\n+        keys = list(outputs.keys())\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = [self.nodes[3].fundrawtransaction(rawtx),\n+                  # split the fee between outputs 0, 2, and 3, but not output 1\n+                  self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0, 2, 3]})]\n+\n+        dec_tx = [self.nodes[3].decoderawtransaction(result[0]['hex']),\n+                  self.nodes[3].decoderawtransaction(result[1]['hex'])]\n+\n+        # Nested list of non-change output amounts for each transaction\n+        output = [[out['value'] for i, out in enumerate(d['vout']) if i != r['changepos']]\n+                  for d, r in zip(dec_tx, result)]\n+\n+        # List of differences in output amounts between normal and subtractFee transactions\n+        share = [o0 - o1 for o0, o1 in zip(output[0], output[1])]\n+\n+        # output 1 is the same in both transactions\n+        assert_equal(share[1], 0)\n+\n+        # the other 3 outputs are smaller as a result of subtractFeeFromOutputs\n+        assert_greater_than(share[0], 0)\n+        assert_greater_than(share[2], 0)\n+        assert_greater_than(share[3], 0)\n+\n+        # outputs 2 and 3 take the same share of the fee\n+        assert_equal(share[2], share[3])\n+\n+        # output 0 takes at least as much share of the fee, and no more than 2 satoshis more, than outputs 2 and 3\n+        assert_greater_than_or_equal(share[0], share[2])\n+        assert_greater_than_or_equal(share[2] + Decimal(2e-8), share[0])\n+\n+        # the fee is the same in both transactions\n+        assert_equal(result[0]['fee'], result[1]['fee'])\n+\n+        # the total subtracted from the outputs is equal to the fee\n+        assert_equal(share[0] + share[2] + share[3], result[0]['fee'])\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "57f8218cf0432b26193ecdcd6c0f641b62264e7b",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453bda63dd90986501ee61426e4d768a400bd371/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453bda63dd90986501ee61426e4d768a400bd371/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=453bda63dd90986501ee61426e4d768a400bd371",
        "patch": "@@ -524,14 +524,18 @@ def assert_fee_amount(fee, tx_size, fee_per_kB):\n     if fee > (tx_size + 2) * fee_per_kB / 1000:\n         raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n \n-def assert_equal(thing1, thing2):\n-    if thing1 != thing2:\n-        raise AssertionError(\"%s != %s\"%(str(thing1),str(thing2)))\n+def assert_equal(thing1, thing2, *args):\n+    if thing1 != thing2 or any(thing1 != arg for arg in args):\n+        raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n \n def assert_greater_than(thing1, thing2):\n     if thing1 <= thing2:\n         raise AssertionError(\"%s <= %s\"%(str(thing1),str(thing2)))\n \n+def assert_greater_than_or_equal(thing1, thing2):\n+    if thing1 < thing2:\n+        raise AssertionError(\"%s < %s\"%(str(thing1),str(thing2)))\n+\n def assert_raises(exc, fun, *args, **kwds):\n     assert_raises_message(exc, None, fun, *args, **kwds)\n "
      },
      {
        "sha": "7d9d6ce4894cba74f179f86230cfa91c019f5c1e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 7,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=453bda63dd90986501ee61426e4d768a400bd371",
        "patch": "@@ -2464,7 +2464,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n-                            \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n+                            \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n+                            \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                             \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n                             \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n@@ -2476,11 +2477,17 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n                             \"2. options               (object, optional)\\n\"\n                             \"   {\\n\"\n-                            \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n-                            \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n-                            \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n-                            \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"           (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n+                            \"     \\\"changeAddress\\\"          (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n+                            \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n+                            \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n+                            \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n+                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n+                            \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n+                            \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                            \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\"\n+                            \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                            \"                              If no outputs are specified here, the sender pays the fee.\\n\"\n+                            \"                                  [vout_index,...]\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2509,6 +2516,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     bool lockUnspents = false;\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n+    UniValue subtractFeeFromOutputs;\n+    set<int> setSubtractFeeFromOutputs;\n \n     if (request.params.size() > 1) {\n       if (request.params[1].type() == UniValue::VBOOL) {\n@@ -2527,6 +2536,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n             },\n             true, true);\n \n@@ -2553,6 +2563,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             feeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             overrideEstimatedFeerate = true;\n         }\n+\n+        if (options.exists(\"subtractFeeFromOutputs\"))\n+            subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n       }\n     }\n \n@@ -2567,10 +2580,21 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     if (changePosition != -1 && (changePosition < 0 || (unsigned int)changePosition > tx.vout.size()))\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n \n+    for (unsigned int idx = 0; idx < subtractFeeFromOutputs.size(); idx++) {\n+        int pos = subtractFeeFromOutputs[idx].get_int();\n+        if (setSubtractFeeFromOutputs.count(pos))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, duplicated position: %d\", pos));\n+        if (pos < 0)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, negative position: %d\", pos));\n+        if (pos >= int(tx.vout.size()))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, position too large: %d\", pos));\n+        setSubtractFeeFromOutputs.insert(pos);\n+    }\n+\n     CAmount nFeeOut;\n     string strFailReason;\n \n-    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, changeAddress))\n+    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "b243ee19bf6b071280a2aa4e25e9eefa38db4963",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=453bda63dd90986501ee61426e4d768a400bd371",
        "patch": "@@ -2181,14 +2181,15 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n     // Turn the txout set into a CRecipient vector\n-    BOOST_FOREACH(const CTxOut& txOut, tx.vout)\n+    for (size_t idx = 0; idx < tx.vout.size(); idx++)\n     {\n-        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false};\n+        const CTxOut& txOut = tx.vout[idx];\n+        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, setSubtractFeeFromOutputs.count(idx) == 1};\n         vecSend.push_back(recipient);\n     }\n \n@@ -2210,6 +2211,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     if (nChangePosInOut != -1)\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n+    // Copy output sizes from new transaction; they may have had the fee subtracted from them\n+    for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n+        tx.vout[idx].nValue = wtx.tx->vout[idx].nValue;\n+\n     // Add new txins (keeping original txin scriptSig/order)\n     BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n     {"
      },
      {
        "sha": "3a809174f36a7d654a7dda0013d4ab5e1ea8b1f6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453bda63dd90986501ee61426e4d768a400bd371/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=453bda63dd90986501ee61426e4d768a400bd371",
        "patch": "@@ -772,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  }
]