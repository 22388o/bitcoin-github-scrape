[
  {
    "sha": "999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk1MTA5NzNiY2ZiYzI1M2I2YmMyNzZkNDNiYjJlN2Q2ZjFmNTBi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-24T07:03:02Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-26T04:40:53Z"
      },
      "message": "Don't effectively blacklist pruned nodes.\n\nIf upon connecting it's found that the node doesn't have the blocks we need, we can always disconenct then, but unless we give the node a chance to become a full-node, it will forever be forgotten about. Also, even pruned nodes provide much use for block propagation and it's only during IBD that we're needing historical blocks anyway. Perhaps in this situation it is reasonable to skip nodes that were once seen to be pruning (but may no longer be).",
      "tree": {
        "sha": "15dadbc057fd0f6ae08884e3c368b3cbde212926",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15dadbc057fd0f6ae08884e3c368b3cbde212926"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53f8f226bd1d627c4a6dec5862a1d4ea5a933e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53f8f226bd1d627c4a6dec5862a1d4ea5a933e45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53f8f226bd1d627c4a6dec5862a1d4ea5a933e45"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e9001486a7599cb5801a41a29ef22cd5b99780e1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
        "patch": "@@ -5116,9 +5116,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             boost::this_thread::interruption_point();\n \n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n-                continue;\n-\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);"
      },
      {
        "sha": "9f94f59e405071d1f1e3d911fa900a604b218ffa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
        "patch": "@@ -248,8 +248,6 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n-/** Check whether we are doing an initial block download (synchronizing from disk or network) */\n-bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core.\n  * strFor can have three values:\n  * - \"rpc\": get critical warnings, which should put the client in safe mode if non-empty"
      },
      {
        "sha": "03722cf469d0533ab0314e7af1c7e6641877818a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
        "patch": "@@ -1705,8 +1705,8 @@ void ThreadOpenConnections()\n             if (IsLimited(addr))\n                 continue;\n \n-            // only connect to full nodes\n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n+            // only connect to full nodes during IBD\n+            if ((addr.nServices & NODE_NETWORK) != NODE_NETWORK && IsInitialBlockDownload())\n                 continue;\n \n             // only consider very recently tried nodes after 30 failed attempts"
      },
      {
        "sha": "502bc1ad40d87e0590713839425d87f3396da1c0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999510973bcfbc253b6bc276d43bb2e7d6f1f50b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=999510973bcfbc253b6bc276d43bb2e7d6f1f50b",
        "patch": "@@ -74,8 +74,6 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n-static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n-\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n@@ -153,7 +151,8 @@ bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr &addr);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n-\n+/** Check whether we are doing an initial block download (synchronizing from disk or network) */\n+bool IsInitialBlockDownload();\n \n extern bool fDiscover;\n extern bool fListen;"
      }
    ]
  }
]