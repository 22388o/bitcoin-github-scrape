jtimon,2015-04-27T22:55:44Z,"Sorry for this little change, but...\n\n@thuni was concerned about introducing globals in policy.h\nfIsBareMultisigStd can be easily turned into an attribute later as shown in https://github.com/jtimon/bitcoin/compare/policy_new...jtimon:policy_moveonly (in fact it could be done more easily not moving AreInputsStandard at the same time as IsStandardTx)\nBut minRelayTxFee is in many more places, an",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-96843767,96843767,
dgenr8,2015-05-01T15:50:17Z,"Nodes can do random things, but why encourage them to adopt diverse relay policies, create custom policies, and define custom parameters for others to create more custom relay policies?  \n\nShouldn't there just be baked-in policy parameters that have predictable effects when deployed with different values, like resource constraints and settings that influence the strength of preference for higher",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98163070,98163070,
luke-jr,2015-05-01T17:06:01Z,"@dgenr8 Non-centralisation. Authority to decide policy lies with the node operators and miners, and it's not a responsibility/power developers should have. Too much policy monoculture also creates incentives to use bad practices (trusting unconfirmed transactions) and make trouble for the outliers. Also, since the current policy monoculture is mostly _reference_ policy, it also causes spam problem",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98178713,98178713,
sipa,2015-05-01T18:06:03Z,"I think there are different issues here.\n\nOne is that this is a step towards separating out policy code from consensus code. This PR is part of that. Eventually, we should end up with a situation where consensus is clearly separated in the source code (so we know when to be extremely careful in review and tests when someone wants to change it), and likewise have policy separated out (so people c",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98189841,98189841,
dgenr8,2015-05-02T16:09:28Z,"@luke-jr The blockchain is the world's most consistent distributed system.  It makes no sense to promote chaos right up to the assembly point.  If we have CokePolicy and PepsiPolicy, reorgs too become less safe.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98374106,98374106,
jtimon,2015-05-02T16:21:38Z,"dgenr8 differences in consensus code can cause reorgs, differences in policy code can't. That's the main reason why we want to separate them. There are people already maintaining alternative policies and there's nothing wrong about it. Let's just make their implementations safer and cleaner. We will safe A LOT of review work  by clearly separating policy proposals, which tend to be numerous, contr",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98374720,98374720,
sipa,2015-05-02T16:27:18Z,"@jtimon He means that when there are different mempool acceptance policies present, a reorg can reduce the (apparent) safety of transactions already in the blockchain.\n\nAnd that is true - but that's just a sign that you shouldn't be relying on having a consistent policy in the first place, and why you should use confirmations to gauge risk, not mere acceptance.\n\n@dgenr8 And the assembly point ",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98375784,98375784,
dgenr8,2015-05-02T17:28:55Z,"@jtimon Nothing against code separation, but this mixes in a _multi-relay-policy framework_.\n\n@sipa Use confirmations to gauge risk, but the system should try to reduce risk at all confirmation levels.  Nobody has shown that lower confirmation levels, including 0-conf, cannot be made safer with easily acceptable tradeoffs.  A multi-relay-policy framework is a step in the other direction.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98381574,98381574,
luke-jr,2015-05-02T17:33:10Z,"@dgenr8 ""Unconfirmed"" is _not_ a confirmation level at all. It is the absence of any confirmation. You cannot make it ""safe"" except through attempted centralisation and control over others.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98381767,98381767,
dgenr8,2015-05-02T17:45:05Z,"@luke-jr That's a claim, not a proof, and rather than trying to prove a negative, why not think about how to accomplish the positive?\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98382255,98382255,
jtimon,2015-05-07T11:15:15Z,"@dgenr8 feel free to spend your time on how to accomplish the positive.\nIn the meantime, policy diversity is what you get with a decentralized system. Multiple relay policies are already deployed and I don't think we can or should fight that.\nIn the meantime there's a lot of noise because we don't have support for different policies and because everybody wants their own favorite policy to be eve",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-99818340,99818340,
ghost,2015-05-10T17:48:21Z,"Built, confirmed `-policy` option exposed, and checked msig tests still pass - ACK\n\nNote: Had to pull in https://github.com/bitcoin/bitcoin/pull/6114/files, which should be OK as long as you're building with 1.58<\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-100674492,100674492,
jtimon,2015-05-13T22:49:26Z,Needed trivial rebase after policy/fees got into the makefile.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-101840610,101840610,
jtimon,2015-05-27T15:52:15Z,"Needed rebase.\nAlso, after #5669 minRelayTxFee will be the only dependency from main, so I feel more comfortable moving more code.\nAdded a couple of squashme commits and a last commit that removes the global @theuni was concerned about.\nIf it is ok to extend the scope of the PR (mostly with moveonly stuff), I will squash all the moveonly/rename commits into luke's commit (Luke-Jr was moving all",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-105970969,105970969,
jtimon,2015-06-02T11:36:50Z,"Needed rebase again.\nI didn't squased the fixup commits introduced in the last push though since I was hoping to get some approval on that, but I will do it in the next forced rebased if nobody complains.\nAlso if people want me to s/""main""/Policy::STANDARD or something similar I'm happy to do so, I should have done it from the beginning. If I get silence about this as well I may do it at any poi",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-107924068,107924068,
jtimon,2015-06-02T16:37:13Z,Fixed most nits and squashed.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108008729,108008729,
sipa,2015-06-02T17:51:28Z,"Passing a const reference to a string should be slightly more efficient.\nBut std::string implements reference counting I believe, so copying a\nstring does not require copying the entire data blob, only the (iirc) 24 or\n32 byte header structure. Passing a cost reference only needs 8 bytes\nthough.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108029848,108029848,
jtimon,2015-06-03T07:39:02Z,"Mhmm, I'm not able to reprduce https://travis-ci.org/bitcoin/bitcoin/jobs/65112154 (no wallet) locally...\n@laanwj do you know if that may e related to the travis cache issue or is it unrelated? \n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108232542,108232542,
theuni,2015-06-05T23:50:25Z,"Could you outline the plan for next steps after this goes in? Standard flags/values are still hard-coded in several places, so I'm not sure that exposing the ""-policy"" option makes sense until it's possible to actually run with a different policy.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109484717,109484717,
jtimon,2015-06-06T18:58:47Z,"> Could you outline the plan for next steps after this goes in?\n\nReopened #5180 as one of the things that I consider an important next step (although @luke-jr wasn't very happy with it the first time I proposed it). Other ""next steps"" (like #5114 ) are related to fees.\n\n> Standard flags/values are still hard-coded in several places, so I'm not sure that exposing the ""-policy"" option makes sens",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109637834,109637834,
jtimon,2015-06-08T03:22:50Z,"Updated code:\n\n> But I think the option is useful already. Advanced users (say, miners) can trivially ...\n\nThinking more about this...if we're assuming advanced users and they want to preserve the standard policy in their build and not simply replace it, they can also trivially add the new option themselves, so there's no reason to expose the new option until it has any use.\nSo I starded redu",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109849096,109849096,
jtimon,2015-06-18T09:30:28Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-113089677,113089677,
jtimon,2015-06-24T17:18:17Z,#6335 has been separated from this PR. Please let's focus on merging that first.\nAn updated version of this is coming soon...\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-114945949,114945949,
jtimon,2015-06-25T17:00:00Z,"The scope has been reduced again.\n@faizkhan00 I'm sorry, but now the -policy option is left for #5180.\nAlso, no globals are created since they're not needed (yet, although I would happily put them back if nobody opposes).\n@theuni to discuss a solution for the globals that could be reused for chainparams, there's a longer branch in https://github.com/jtimon/bitcoin/tree/policy-global-0.11.99 \n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-115323905,115323905,
jtimon,2015-06-26T16:06:28Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-115742404,115742404,
jtimon,2015-07-06T22:02:15Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119009282,119009282,
jtimon,2015-07-07T11:31:19Z,"Reduced the scope again to a single commit. This cannot get simpler, so hopefully both @luke-jr and @theuni will be satisfied with this version (we can discuss other things where it seems there's still disagreements better after this has been merged).\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119177190,119177190,
jtimon,2015-07-07T13:08:08Z,"Well, I added back the example attribute commit since it was mostly reviewed.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119198667,119198667,
jtimon,2015-07-07T21:00:06Z,"After a talk with @luke-jr on IRC, I think I understand his vision better. The ""having a class named CStandardPolicy is a bug, because there shouldn't be any standard policy"" part is not clear to me yet though. If we want to make it simple for coders to implement and maintain custom policies (why would we have an interface and an implementation class otherwise?), then we need a name for the class ",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119338762,119338762,
jtimon,2015-07-08T11:34:06Z,"Updated with several minor improvements and squashed ""fixup! RENAME: !fRequireStandard to fAcceptNonStdTxn (for ""-acceptnonstdtxn"")"". So now there's only one fixup commit ""waiting for approval"".\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119546510,119546510,
jtimon,2015-07-11T18:39:57Z,"Policy::AppendHelpMessages() and CPolicy::InitFromArgs(), the removal of fIsBareMultisigStd and fRequireStandard globals from main.o, the removal of the unnecessary restriction on -acceptnonstdtxn and CStandardPolicy are left for #6423.\nIt doesn't seem like anyone is interested in acking or discussing those things here anymore (or for now) so I'm really minimizing the scope of this PR to somethin",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-120651862,120651862,
jtimon,2015-07-22T23:23:44Z,"Even though I minimized the scope of this PR to make it easily-mergeable, trvially-reviewable/rebasable and nit-unfriendly, @theuni's sharp review found something that forced me to update this:\n\nIsStandard/CPolicy::ApproveScript only needs to expose the output parameter `txnouttype& whichType` internally for CPolicy::ApproveTx, so that can be a private/protected method. This improvement doesn't ",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-123903946,123903946,
theuni,2015-07-22T23:43:06Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-123908668,123908668,
gavinandresen,2015-07-23T14:44:36Z,Code review ACK; changes are trivial enough I trust the unit tests / Travis for testing correctness.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-124128912,124128912,
jtimon,2015-07-24T00:13:21Z,Updated with @gavinandresen 's improvements to the doc.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-124274205,124274205,
jtimon,2015-07-24T16:08:51Z,"I'm sorry about suggesting this after getting some ACKs, but @theuni 's nit made me realize that I went too far with the reduction of the scope. We don't need to wait for having attributes (#6423) to separate the interface CPolicy from the reference implementation CStandardPolicy (but I wanted to leave that out because @luke-jr seems to have a problem with using the term ""standard"" in the referenc",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-124569208,124569208,
theuni,2015-07-24T19:40:42Z,"@jtimon Grr, you already had ACKs and this was surely just a day or two from going in. This constant scope-changing is impossible to keep up with.\n\nI don't have a preference, with or without the new commit is fine. But please, pick one and leave it alone.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-124670787,124670787,
jtimon,2015-07-25T21:35:51Z,"> But please, pick one and leave it alone.\n\nI'll let @laanwj pick between squashing it or taking it out and leave it alone. But yes, sorry for the changes in scope.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-124899263,124899263,
jtimon,2015-07-28T21:03:23Z,Removed the fixup commit with @laanwj 's nack and squashed the rest.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-125753274,125753274,
jtimon,2015-08-21T02:09:37Z,Needed rebase.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-133246418,133246418,
jtimon,2015-09-06T16:25:42Z,Updated making CPolicy a pure abstract class instead of a regular class that always returns true.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-138097708,138097708,
dcousens,2015-09-07T13:15:27Z,concept and utACK.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-138295212,138295212,
morcos,2015-09-14T23:37:39Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-140233675,140233675,
jtimon,2015-09-14T23:49:48Z,@morcos pointed out that some documentation was left with the names of the old functions so I did a grep for each of them to make sure I wasn't leaving anything outdated.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-140235116,140235116,
jtimon,2015-09-22T12:46:17Z,ping @laanwj @theuni \n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-142277579,142277579,
jtimon,2015-10-01T16:40:51Z,Ping\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-144782394,144782394,
jtimon,2015-10-01T22:48:00Z,Needed rebase.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-144869295,144869295,
jaromil,2015-11-01T15:22:05Z,"ACK and well done with the switch to pure abstract class.\nCurrent merge conflicts seem trivial, hope @laanwj has time to look at this and merge it.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152834354,152834354,
dgenr8,2015-11-01T18:04:38Z,No objection from me since this is now just encapsulation.  Expire and TrimToSize are candidates for future inclusion too.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152849295,152849295,
luke-jr,2015-11-01T18:08:02Z,"This is not just encapsulation, is is the creation of an API. Until [this is resolved](https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167014), it creates practical problems for compatibility. A policy written for 0.12 shouldn't quietly do something different in 0.13, so either the method name should be changed to AcceptTx_WIP, the class names changed with _WIP, or not merged until the ",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152849427,152849427,
sipa,2015-11-01T18:28:04Z,"I don't think it's a reasonable expectation that policy can encapsulate\nthat much of the mempool/relay behaviour.\n\nIMHO policy ought to be the subset of configuration that is safe to change\nwithout hurting a node's operations. For example, I don't think that can\nencapsulate memory limiting, script verification, double spend prevention,\n... the mempool and the node's resources have specific i",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152850502,152850502,
luke-jr,2015-11-01T18:34:11Z,"@sipa Overall, I agree. The parts I was thinking were fee policies, replacement decisions, rate limiting of gratis txns, ancestor/descendent limits, etc. I'm okay with waiting until mempool code stabilises more, but I don't think mempool code should be placing any limitations on what policy code does, and would consider such limitations to be a bug...\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152850870,152850870,
sipa,2015-11-01T18:43:31Z,"For example, the current mempool code has a feerate index which the size limiting relies on for correctness. It doesn't require that the feerate exactly represents fee per byte, but it does represent an ordering that has to be respected. Policy can reasonably override what a transaction's ""fee"" means and what its ""size"" means, but can't bypass or change the need for such an index in the first plac",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152851304,152851304,
jtimon,2015-11-01T18:56:33Z,"It seems we have different ideas of what the policy class will do, and I'm afraid we can only decide that in incremental changes. If I understood @luke-jr correctly, he is not going to utACK unless I rename some of the methods, for example s/AcceptTxInputs/AcceptTxInputs_Incomplete. He agrees that we can AcceptTxInputsV2, AcceptTxInputsV3, etc when/if we change the method (for example, to include ",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152851918,152851918,
luke-jr,2015-11-01T19:17:14Z,"> We will have to move on without his utACK because I think it is too late for bike-shedding and he already got me to s/Validate/Accept in all methods.\n\nThis is nonsense. I had made this point originally in #5071 (2014 Oct) which you based your work on initially. Even on this thread, I left the comment to that effect Aug 28, two days after you submitted the PR. Also, understandable API interface",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152852945,152852945,
jtimon,2015-11-01T19:38:29Z,"You are right, it is never too late to change things. But I've tried my best to understand how renaming a method is not bike-shedding and how  AcceptTxInputs_Incomplete, AcceptTxInputs, AcceptTxInputsV2 is better than  AcceptTxInputs, AcceptTxInputsV2, AcceptTxInputsV3 without success. I've been reducing the scope of the policy PRs (and adapting them from yours and other people's feedback) since I",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152855953,152855953,
sipa,2015-11-01T19:48:20Z,I disagree with the goal of making Policy a (stable) API. It's a way to separate configurable behaviour from non-configurable. What is configurable will depend on what the code calling it is doing.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152856922,152856922,
luke-jr,2015-11-01T19:59:12Z,"@sipa Rather than a stable API, I just don't want the same policy to compile for both 0.15 and 0.16 without any changes and end up with wildly different behaviour because the meaning of the API changed without the method names reflecting it properly.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152858522,152858522,
jtimon,2015-11-01T20:23:09Z,"@luke-jr We can fix that by changing the names when appropriate (for example with V2, etc if no new name comes to mind).\n\n@sipa I agree the goal it's not a stable API (and if it was we're far away from it anyway and that goal cannot be the scope of this PR). But do you anticipate any mempool PR to change any of the code currently in policy/policy any time soon?\nI really believe this little chan",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-152860627,152860627,
jtimon,2015-11-03T13:57:29Z,"Since it doesn't seem like this will make it into 0.12, I'm closing it for now instead of rebasing it. Sigh.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-153361943,153361943,
dcousens,2015-11-04T02:21:10Z,re-ACK (was rebased since last ACK)\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-153550641,153550641,
jtimon,2015-12-01T02:37:13Z,closed forever\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-160829711,160829711,
dcousens,2015-12-01T02:43:19Z,@jtimon why?\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-160831055,160831055,
jtimon,2015-12-01T12:24:21Z,"For https://github.com/bitcoin/bitcoin/pull/6423 and more things on top of that.\nAnyway, Bitcoin Core has been consistently rejecting this change (look at the previous PRs) for longer than  a year, so I'll stop insisting. If you are interested more of this will be maintained in my own software fork, which will have 0.12 as its first release.\n",https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-160952898,160952898,
jaromil,2015-12-01T14:10:20Z,wooo. lets talk about that...\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-160979629,160979629,
dcousens,2015-12-02T01:53:45Z,@laanwj are we interested in this?  IMHO it makes the idea of node 'policy' clear and shows that `IsStandard` is simply just a default policy.\nThis definitely seems like something we should encourage.\n,https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-161154435,161154435,
Diapolo,2015-06-02T11:52:16Z,Nit: Should be a constant reference.\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514373,31514373,src/policy/policy.cpp
Diapolo,2015-06-02T11:53:10Z,Nit: I guess this also could be a constant reference.\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514423,31514423,src/policy/policy.cpp
Diapolo,2015-06-02T11:54:20Z,"Nit: I'm sure we use const here, too.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514491,31514491,src/policy/policy.cpp
Diapolo,2015-06-02T11:56:58Z,Nit: defaultPolicy could also be `const std::string&`.\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514629,31514629,src/policy/policy.cpp
Diapolo,2015-06-02T12:00:41Z,Nit: `catch(const std::exception& e)`\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514866,31514866,src/init.cpp
Diapolo,2015-06-02T12:02:01Z,"Suggestion: The string ""standard"" is used quite often, I guess it could be nice to have some DEFAULT_ constant for it.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514939,31514939,src/policy/policy.cpp
jtimon,2015-06-02T12:05:41Z,"Please, make it const and try to compile.\nI'm working on a solution (using a real factory and a container) to make it const, though. But I will propose that for chainparams first.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515138,31515138,src/policy/policy.cpp
Diapolo,2015-06-02T12:14:58Z,"This was just a read-only review of the code, what error is shown?\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515751,31515751,src/policy/policy.cpp
jtimon,2015-06-02T12:34:55Z,"Nobody is doing it with strings, I believe the compiler can be smart enough by itself in this case but I'm not 100% sure. @sipa ?\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517170,31517170,src/policy/policy.cpp
jtimon,2015-06-02T12:36:30Z,"This is mentioned in the thread, in the last post actually.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517307,31517307,src/policy/policy.cpp
Diapolo,2015-06-02T12:43:58Z,Take a look at our codebase or even at https://github.com/bitcoin/bitcoin/pull/6206. IMHO we shouldn't work with copies where not needed.\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517922,31517922,src/policy/policy.cpp
Diapolo,2015-06-02T12:45:29Z,"So you are asking for the way to got with this, do I get that right?\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31518046,31518046,src/policy/policy.cpp
gavinandresen,2015-07-23T14:40:34Z,"Bad comment. How about instead:\n\nNon-consensus-critical policy logic, like whether or not a transaction should be relayed and/or included in blocks created.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r35328102,35328102,src/policy/policy.h
jtimon,2015-07-24T00:04:50Z,"I really want to use the word ""interface"" (because the plan is to have a separated implementation class later and make this one a dumb interface that just always approves everything). But better documentation is always welcomed: I will certainly add your suggestion.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r35385390,35385390,src/policy/policy.h
jtimon,2015-07-24T00:34:54Z,"By the way, documentation for the public version of CPolicy::ApproveScript is also welcomed. Specially with this PR where it's a 100% merge-conflict-free to add it (nobody building on top of bitcoin/master will notice the difference).\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r35386910,35386910,src/policy/policy.h
luke-jr,2015-08-28T02:31:42Z,"IMO more of AcceptToMemoryPool should be included in ApproveTx. It doesn't have to be immediately, but at the very least, the policy.h docs should mention that the API is not final yet, and further changes are planned. Ideally, the function should get a name like ApproveTx_Partial so that when it is completed, it can be renamed to break the API explicitly.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167014,38167014,src/main.cpp
luke-jr,2015-08-28T02:32:24Z,Probably any default should call ApproveScript for at least the outputs... maybe easier to just not have defaults at CPolicy for now?\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167035,38167035,src/policy/interface.h
jtimon,2015-08-28T02:37:54Z,"Yes, this is a work in progress. I'm not sure what you have in mind for ApproveTx but I would certainly like to include more things in ApproveTxInputs. In any case, one step at a time.\n\nI don't think we need to mention that the API is not final because it may never be final. Other work in progress (for example, libconsensus) doesn't clarify ""the API is not final"". In any case, if more people thi",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167243,38167243,src/main.cpp
jtimon,2015-08-28T02:43:31Z,"Initially it was a pure abstract class but if I remember correctly somebody complained about it, and it's more useful for alternative policies that don't want to restrict certain things for the base class to always return true in all Approve_ methods.\nCPolicy is not the default policy, CStandardPolicy is. CPolicy is just the interface. It just happen to also implement the simplest policy possible",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167429,38167429,src/policy/interface.h
luke-jr,2015-08-28T02:52:42Z,Part of the point of libconsensus and policy abstraction is so that the API will some day be final and people can rely on their modifications working when they upgrade the main codebase...\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167723,38167723,src/main.cpp
luke-jr,2015-08-28T02:53:52Z,"But if a subclass overrides ApproveScript, it would be unexpected for ApproveTx to bypass that.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167758,38167758,src/policy/interface.h
jtimon,2015-08-28T02:56:30Z,I almost agree for libconsensus (soft/hardforks may require a change in the API though).\nFor policy changes are more likely to be expected (ie someone asks for a change in the API so that it's possible to support some new policy).\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38167850,38167850,src/main.cpp
jtimon,2015-08-28T03:01:26Z,"If they extend CPolicy directly, they shouldn't expect ApproveTx to call ApproveScript unless they explicitly do so themselves.\nThey can extend CStandardPolicy too tough (which I expect most alternative policies to do, unless they have radically different configurable options). In that case they can expect anything they don't override to act like it does in CStandardPolicy.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38168008,38168008,src/policy/interface.h
luke-jr,2015-09-03T23:49:41Z,"I don't agree. Either there should be no default behaviour at all, or it should be reasonably expected default behaviour.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38709797,38709797,src/policy/interface.h
luke-jr,2015-09-03T23:50:48Z,"Such changes should be backward-compatible with old policies whenever possible, or at the very least cause a compile failure.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38709872,38709872,src/main.cpp
jtimon,2015-09-03T23:56:55Z,"There is one default behavior: accept everything that follows the consensus rules.\nI can turn CPolicy back into a pure abstract class, though I'm afraid @sipa @laanwj @theuni or @gmaxwell may have issues with a pure abstract class because it may be worse for performance.\nI'm fine with either of the two options (not with implementing anything ""reasonable"" in CPolicy): either CPolicy accepts every",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38710242,38710242,src/policy/interface.h
sipa,2015-09-03T23:59:00Z,"I don't think performance matters for this. The cost of accepting a transaction is already in the order of almost a millisecond anyway, the extra indirection of a virtual method is nothing compared to that.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38710374,38710374,src/policy/interface.h
jtimon,2015-09-04T00:03:06Z,"I think encapsulating policy globals as CStandardPolicy attributes and being able to support 2 different policies with different configuration arguments (you didn't like testpolicy so I will go with randomPolicy) as soon as possible is much more of a priority for me than being backward-compatible with ""old policies"" (I think you really meant ""your branches"" there). Anything else can be rebase on t",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38710604,38710604,src/main.cpp
luke-jr,2015-09-04T00:18:15Z,"No, I don't mean my branches. I mean that policies written today should not break or behave differently in subtle ways tomorrow.\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38711378,38711378,src/main.cpp
jtimon,2015-09-04T15:43:54Z,"It won't break in subtle ways: they will break hard and require rebase or they won't.\nMore of AcceptToMemoryPool can be moved to policy later and changing the ""API"" will be unavoidable if we want to start with something simple like this.\nAnother possibility is keep on complaianing about minor details of a trivial PR and wait another full year to have a policy class.\nPlease, if you don't like th",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38764711,38764711,src/main.cpp
jtimon,2015-09-04T15:47:44Z,"Then I prefer the return true policy simply because it is more convenient when you create custom policies very different from CStandardPolicy (you save the effort to reimplement any method for which you were going to return true, for example, we could have a policy that requires a minimumfee but doesn't have any special requirement for scripts).\nAs said I can always go back to the pure abstract c",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38765080,38765080,src/policy/interface.h
jtimon,2015-09-06T03:20:33Z,"But to be perfectly clear, I'm happy with either one. @luke-jr do you prefer a pure abstract class or a CPolicy that simply approves everything?\n",https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38817178,38817178,src/policy/interface.h
luke-jr,2015-09-06T05:16:54Z,I prefer pure.\n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38817732,38817732,src/policy/interface.h
dcousens,2015-09-07T13:16:37Z,I think the pure abstract class is safer due to users who may inadvertently think the base class was standard.\nIt doesn't add any real value to default to true; as that behaviour can trivially be implemented by a user. \n,https://github.com/bitcoin/bitcoin/pull/6068#discussion_r38861124,38861124,src/policy/interface.h
