[
  {
    "sha": "2dde8a25eac573e2e3d773adf3f0420675b287da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGRlOGEyNWVhYzU3M2UyZTNkNzczYWRmM2YwNDIwNjc1YjI4N2Rh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-11T17:00:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-01T22:46:43Z"
      },
      "message": "Policy: RENAME: Introduce CPolicy interface and hidden CStandardPolicy class implementing it\n\nRename 3 functions into CPolicy methods:\n\n- IsStandard -> policy.ApproveScript\n- IsStandardTx -> policy.ApproveTx\n- AreInputsStandard -> policy.ApproveTxInputs",
      "tree": {
        "sha": "e6aab42e8913e3346772911a0729f84e2d2a98e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6aab42e8913e3346772911a0729f84e2d2a98e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dde8a25eac573e2e3d773adf3f0420675b287da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dde8a25eac573e2e3d773adf3f0420675b287da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dde8a25eac573e2e3d773adf3f0420675b287da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dde8a25eac573e2e3d773adf3f0420675b287da/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73"
      }
    ],
    "stats": {
      "total": 212,
      "additions": 137,
      "deletions": 75
    },
    "files": [
      {
        "sha": "a1f8260514ec33ccc335f1144286cda3fe00026a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -120,6 +120,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n+  policy/interface.h \\\n   policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\"
      },
      {
        "sha": "ea01131b36dafc0ad2eb5bd328fae87c4a5bfcee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -76,6 +76,7 @@ bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n+CStandardPolicy globalPolicy;\n \n CTxMemPool mempool(::minRelayTxFee);\n \n@@ -781,6 +782,7 @@ static std::string FormatStateMessage(const CValidationState &state)\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n+    const CPolicy& policy = globalPolicy;\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -794,7 +796,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (!policy.ApproveTx(tx, reason))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -861,7 +863,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n+        if (!policy.ApproveTxInputs(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check that the transaction doesn't have an excessive number of"
      },
      {
        "sha": "ddb0aaaee170e36e5f65e76abea3e535d61bc0ff",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -32,6 +32,7 @@ class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n+class CStandardPolicy;\n class CScriptCheck;\n class CTxMemPool;\n class CValidationInterface;\n@@ -106,6 +107,7 @@ extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n+extern CStandardPolicy globalPolicy;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      },
      {
        "sha": "22bac1077ec3a423968d7addd9470a2850331611",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -285,7 +285,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            // Note that flags: we don't want to set mempool/IsStandard()\n+            // Note that flags: we don't want to set mempool/CPolicy::ApproveScript()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n             CValidationState state;"
      },
      {
        "sha": "8c0d9ad348d08f568bce993f68e32f9c7a94dd99",
        "filename": "src/policy/interface.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/interface.h?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_INTERFACE_H\n+#define BITCOIN_POLICY_INTERFACE_H\n+\n+#include <string>\n+\n+class CCoinsViewCache;\n+class CScript;\n+class CTransaction;\n+\n+/**\n+ * \\class CPolicy\n+ * Interface class for non-consensus-critical policy logic, like whether or not\n+ * a transaction should be relayed and/or included in blocks created.\n+ */\n+class CPolicy\n+{\n+public:\n+    virtual ~CPolicy() {};\n+    virtual bool ApproveScript(const CScript& scriptPubKey) const = 0;\n+    /**\n+     * Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const = 0;\n+    /**\n+     * Check for standard transaction types\n+     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const = 0;\n+};\n+\n+#endif // BITCOIN_POLICY_INTERFACE_H"
      },
      {
        "sha": "f8a486b47aa9555eff7f803fc4366f7f2eb93d18",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 25,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -14,27 +14,9 @@\n \n #include <boost/foreach.hpp>\n \n-    /**\n-     * Check transaction inputs to mitigate two\n-     * potential denial-of-service attacks:\n-     * \n-     * 1. scriptSigs with extra data stuffed into them,\n-     *    not consumed by scriptPubKey (or P2SH script)\n-     * 2. P2SH scripts with a crazy number of expensive\n-     *    CHECKSIG/CHECKMULTISIG operations\n-     *\n-     * Check transaction inputs, and make sure any\n-     * pay-to-script-hash transactions are evaluating IsStandard scripts\n-     * \n-     * Why bother? To avoid denial-of-service attacks; an attacker\n-     * can submit a standard HASH... OP_EQUAL transaction,\n-     * which will get accepted into blocks. The redemption\n-     * script can be anything; an attacker could use a very\n-     * expensive-to-check-upon-redemption script like:\n-     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n-     */\n-\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+/** CStandardPolicy implementation */\n+\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -56,8 +38,17 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey) const\n {\n+    txnouttype whichType;\n+    return ApproveScript(scriptPubKey, whichType);\n+}\n+\n+bool CStandardPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n+{\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n@@ -95,7 +86,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!ApproveScript(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n@@ -120,8 +111,11 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n {\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n \n@@ -143,7 +137,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n+        // CPolicy::ApproveTx() will have already returned false\n         // and this method isn't called.\n         std::vector<std::vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))"
      },
      {
        "sha": "a4658e6304e38003f04705b850aefca42a5e5689",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 32,
        "deletions": 11,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_POLICY_H\n \n #include \"consensus/consensus.h\"\n+#include \"policy/interface.h\"\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n@@ -21,7 +22,7 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+/** Maximum number of signature check operations in an CPolicy::ApproveScript() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n@@ -42,17 +43,37 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n-    /**\n-     * Check for standard transaction types\n-     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n-     */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+/**\n+ * \\class CStandardPolicy\n+ * Standard implementation of CPolicy.\n+ */\n+class CStandardPolicy : public CPolicy\n+{\n+protected:\n+    bool ApproveScript(const CScript&, txnouttype&) const;\n+public:\n+    virtual bool ApproveScript(const CScript& scriptPubKey) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n     /**\n-     * Check for standard transaction types\n-     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n-     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating CPolicy::ApproveScript scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n \n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "b501d32d8abbbee7b7c985fd38432a4af0b59a93",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -587,7 +587,7 @@ class CScript : public std::vector<unsigned char>\n \n     bool IsPayToScriptHash() const;\n \n-    /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    /** Called by CPolicy::ApproveTx() and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly(const_iterator pc) const;\n     bool IsPushOnly() const;\n "
      },
      {
        "sha": "449ae23a71b2c54a97c570daf7ca34645f40a32f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -141,29 +141,28 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         }\n }\n \n-BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n+BOOST_AUTO_TEST_CASE(multisig__policy_ApproveScript)\n {\n+    const CStandardPolicy testPolicy;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n-    txnouttype whichType;\n-\n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_and_b));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_or_b));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(escrow));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!testPolicy.ApproveScript(one_of_four));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -174,7 +173,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!testPolicy.ApproveScript(malformed[i]));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      },
      {
        "sha": "817c746a9889d567835b4882aecd5563306f3caa",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -53,6 +53,7 @@ BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n@@ -91,7 +92,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -154,6 +155,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n BOOST_AUTO_TEST_CASE(set)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n@@ -187,7 +189,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -205,7 +207,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(testPolicy.ApproveTx(txTo[i], reason), strprintf(\"CPolicy::ApproveScript(txTo[%d])\", i));\n     }\n }\n \n@@ -260,8 +262,9 @@ BOOST_AUTO_TEST_CASE(switchover)\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EQUALVERIFY, ScriptErrorString(err));\n }\n \n-BOOST_AUTO_TEST_CASE(AreInputsStandard)\n+BOOST_AUTO_TEST_CASE(policy_ApproveTxInputs)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -342,7 +345,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -351,7 +354,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n+        BOOST_CHECK(!testPolicy.ApproveTxInputs(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -364,7 +367,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -376,7 +379,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "a3d6f03447a491fe9bb9226e6073c7e4a157c192",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dde8a25eac573e2e3d773adf3f0420675b287da/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2dde8a25eac573e2e3d773adf3f0420675b287da",
        "patch": "@@ -288,6 +288,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n+    const CStandardPolicy testPolicy;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -308,20 +309,21 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n }\n \n-BOOST_AUTO_TEST_CASE(test_IsStandard)\n+BOOST_AUTO_TEST_CASE(test_policy_ApproveScript)\n {\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n@@ -340,60 +342,60 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // MAX_OP_RETURN_RELAY-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // MAX_OP_RETURN_RELAY+1-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // Data payload can be encoded in any way...\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // ...so long as it only contains PUSHDATA's\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]