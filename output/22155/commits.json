[
  {
    "sha": "2565478c813fb7278153b113de4b9338fc186872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTY1NDc4YzgxM2ZiNzI3ODE1M2IxMTNkZTRiOTMzOGZjMTg2ODcy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-04T21:28:46Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-12T15:22:41Z"
      },
      "message": "wallet test refactor: add CreateSyncedWallet function\n\nNo change in behavior. This just moves some code from the ListCoins test\nsetup to a reusable util function, so it can be reused in a new test in\nthe next commit.",
      "tree": {
        "sha": "f9144b803204daef6d049c6959c2f4f119767ea5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9144b803204daef6d049c6959c2f4f119767ea5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2565478c813fb7278153b113de4b9338fc186872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2565478c813fb7278153b113de4b9338fc186872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2565478c813fb7278153b113de4b9338fc186872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2565478c813fb7278153b113de4b9338fc186872/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0e5fbf6fad854ad03ce092ff5f1582166e5b24e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e5fbf6fad854ad03ce092ff5f1582166e5b24e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e5fbf6fad854ad03ce092ff5f1582166e5b24e"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 62,
      "deletions": 14
    },
    "files": [
      {
        "sha": "bb1a780bfab12192ffb45c572fd60e36ca9db5d0",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2565478c813fb7278153b113de4b9338fc186872/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2565478c813fb7278153b113de4b9338fc186872/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=2565478c813fb7278153b113de4b9338fc186872",
        "patch": "@@ -16,6 +16,7 @@\n     <ClCompile Include=\"..\\..\\src\\test\\util\\*.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_fixture.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_tests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\wallet\\test\\util.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      },
      {
        "sha": "1374f3892ee0acf370ba829a2d3f37f92957f758",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2565478c813fb7278153b113de4b9338fc186872/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2565478c813fb7278153b113de4b9338fc186872/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2565478c813fb7278153b113de4b9338fc186872",
        "patch": "@@ -170,6 +170,8 @@ endif\n \n \n BITCOIN_TEST_SUITE += \\\n+  wallet/test/util.cpp \\\n+  wallet/test/util.h \\\n   wallet/test/wallet_test_fixture.cpp \\\n   wallet/test/wallet_test_fixture.h \\\n   wallet/test/init_test_fixture.cpp \\"
      },
      {
        "sha": "c3061b93c061ce6a97382cb1e89f533a8291ec34",
        "filename": "src/wallet/test/util.cpp",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.cpp?ref=2565478c813fb7278153b113de4b9338fc186872",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/test/util.h>\n+\n+#include <chain.h>\n+#include <key.h>\n+#include <test/util/setup_common.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <memory>\n+\n+std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, const CKey& key)\n+{\n+    auto wallet = std::make_unique<CWallet>(&chain, \"\", CreateMockWalletDatabase());\n+    {\n+        LOCK2(wallet->cs_wallet, ::cs_main);\n+        wallet->SetLastBlockProcessed(cchain.Height(), cchain.Tip()->GetBlockHash());\n+    }\n+    wallet->LoadWallet();\n+    {\n+        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n+        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n+        spk_man->AddKeyPubKey(key, key.GetPubKey());\n+    }\n+    WalletRescanReserver reserver(*wallet);\n+    reserver.reserve();\n+    CWallet::ScanResult result = wallet->ScanForWalletTransactions(cchain.Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n+    BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n+    BOOST_CHECK_EQUAL(result.last_scanned_block, cchain.Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(*result.last_scanned_height, cchain.Height());\n+    BOOST_CHECK(result.last_failed_block.IsNull());\n+    return wallet;\n+}"
      },
      {
        "sha": "288c111571c4df1891e3df895eae0162e2bc3694",
        "filename": "src/wallet/test/util.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.h?ref=2565478c813fb7278153b113de4b9338fc186872",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_TEST_UTIL_H\n+#define BITCOIN_WALLET_TEST_UTIL_H\n+\n+#include <memory>\n+\n+class CChain;\n+class CKey;\n+class CWallet;\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cchain, const CKey& key);\n+\n+#endif // BITCOIN_WALLET_TEST_UTIL_H"
      },
      {
        "sha": "75a08b6f74ca68ab8accd340f4fdc6a53b509d3e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2565478c813fb7278153b113de4b9338fc186872/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2565478c813fb7278153b113de4b9338fc186872",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -480,20 +481,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n-        {\n-            LOCK2(wallet->cs_wallet, ::cs_main);\n-            wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n-        }\n-        wallet->LoadWallet();\n-        AddKey(*wallet, coinbaseKey);\n-        WalletRescanReserver reserver(*wallet);\n-        reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(m_node.chainman->ActiveChain().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n-        BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n-        BOOST_CHECK_EQUAL(result.last_scanned_block, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n-        BOOST_CHECK_EQUAL(*result.last_scanned_height, m_node.chainman->ActiveChain().Height());\n-        BOOST_CHECK(result.last_failed_block.IsNull());\n+        wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), coinbaseKey);\n     }\n \n     ~ListCoinsTestingSetup()"
      }
    ]
  },
  {
    "sha": "fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTZkYzc2YjdjOWM1NDA1ZjM3NDY0YTNiMTlmY2Y4MmFhZjIyODYx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-04T22:38:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-12T15:22:41Z"
      },
      "message": "wallet test: Add test for subtract fee from recipient behavior\n\nBehavior might have recently changed in #17331 (it is not clear) but not\nnoticed because there is no test coverage.\n\nThis adds test coverage for current subtract from recipient behavior\nwithout changing it.\n\nCo-authored-by: Andrew Chow <achow101-github@achow101.com>",
      "tree": {
        "sha": "eeb1c74fed99435f8201a17e2a1e123ed1fa13d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeb1c74fed99435f8201a17e2a1e123ed1fa13d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2565478c813fb7278153b113de4b9338fc186872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2565478c813fb7278153b113de4b9338fc186872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2565478c813fb7278153b113de4b9338fc186872"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "344590fa136b7f9316facb7f052baa1416789721",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
        "patch": "@@ -151,6 +151,7 @@ BITCOIN_TESTS =\\\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/psbt_wallet_tests.cpp \\\n+  wallet/test/spend_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/walletdb_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\"
      },
      {
        "sha": "66e7de4273c9252a7e4dd89be0d2d1bb55aa73dd",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6dc76b7c9c5405f37464a3b19fcf82aaf22861/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=fe6dc76b7c9c5405f37464a3b19fcf82aaf22861",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <validation.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/test/util.h>\n+#include <wallet/test/wallet_test_fixture.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(spend_tests, WalletTestingSetup)\n+\n+BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n+{\n+    CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    auto wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), coinbaseKey);\n+\n+    // Check that a subtract-from-recipient transaction slightly less than the\n+    // coinbase input amount does not create a change output (because it would\n+    // be uneconomical to add and spend the output), and make sure it pays the\n+    // leftover input amount which would have been change to the recipient\n+    // instead of the miner.\n+    auto check_tx = [&wallet](CAmount leftover_input_amount) {\n+        CRecipient recipient{GetScriptForRawPubKey({}), 50 * COIN - leftover_input_amount, true /* subtract fee */};\n+        CTransactionRef tx;\n+        CAmount fee;\n+        int change_pos = -1;\n+        bilingual_str error;\n+        CCoinControl coin_control;\n+        coin_control.m_feerate.emplace(10000);\n+        coin_control.fOverrideFeeRate = true;\n+        FeeCalculation fee_calc;\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, fee, change_pos, error, coin_control, fee_calc));\n+        BOOST_CHECK_EQUAL(tx->vout.size(), 1);\n+        BOOST_CHECK_EQUAL(tx->vout[0].nValue, recipient.nAmount + leftover_input_amount - fee);\n+        BOOST_CHECK_GT(fee, 0);\n+        return fee;\n+    };\n+\n+    // Send full input amount to recipient, check that only nonzero fee is\n+    // subtracted (to_reduce == fee).\n+    const CAmount fee{check_tx(0)};\n+\n+    // Send slightly less than full input amount to recipient, check leftover\n+    // input amount is paid to recipient not the miner (to_reduce == fee - 123)\n+    BOOST_CHECK_EQUAL(fee, check_tx(123));\n+\n+    // Send full input minus fee amount to recipient, check leftover input\n+    // amount is paid to recipient not the miner (to_reduce == 0)\n+    BOOST_CHECK_EQUAL(fee, check_tx(fee));\n+\n+    // Send full input minus more than the fee amount to recipient, check\n+    // leftover input amount is paid to recipient not the miner (to_reduce ==\n+    // -123). This overpays the recipient instead of overpaying the miner more\n+    // than double the neccesary fee.\n+    BOOST_CHECK_EQUAL(fee, check_tx(fee + 123));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]