ryanofsky,2021-06-04 23:26:00,"I'm happy to drop the last commit if it's not wanted. Main goal of this PR is to add test coverage, which is what the first two commits do. The code cleanup in the third commit could be done in another PR or replaced with a different approach.\n\n---\n\nUPDATE: Final commit def672f8706e13f4153ff9aca3fb9e1becddae26 is dropped for now to make the PR smaller and test-only",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-855110475,855110475,
DrahtBot,2021-06-05 05:26:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22260 by Sjors\n* #22183 by kiminuo\n* #22100 by ryanofsky\n* #21206 by ryanofsky\n* #19101 by ryanofsky\n\nIf you consid",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-855186589,855186589,
achow101,2021-06-08 18:22:02,ACK 972e87c08268879576b9287b5998739bef1c4cc1,https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-856993434,856993434,
ryanofsky,2021-06-10 12:26:43,"Rebased 972e87c08268879576b9287b5998739bef1c4cc1 -> 8f6113f51de8b04ae39be897b2dedf98c3e8a54b ([`pr/subfee.3`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.3) -> [`pr/subfee.4`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/subfee.3-rebase..pr/subfee.4)) due to conflict with #22008\n",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-858577045,858577045,
jonatack,2021-06-10 12:50:45,"Concept ACK, good to see test coverage here.",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-858594253,858594253,
ryanofsky,2021-06-10 14:56:09,"Updated 8f6113f51de8b04ae39be897b2dedf98c3e8a54b -> 6a50482691964c782eecea573abeff0e2169dfcb ([`pr/subfee.4`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.4) -> [`pr/subfee.5`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/subfee.4..pr/subfee.5)) to fix appveyor link error https://ci.appveyor.com/project/DrahtBot/bitc",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-858694581,858694581,
achow101,2021-06-10 18:26:46,re-ACK 6a50482691964c782eecea573abeff0e2169dfcb,https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-858874553,858874553,
ryanofsky,2021-06-12 18:46:42,"Rebased 6a50482691964c782eecea573abeff0e2169dfcb -> 0cc10f8377495fb60156d116307848674e4be38e ([`pr/subfee.5`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.5) -> [`pr/subfee.6`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/subfee.5-rebase..pr/subfee.6)) due to conflict with #21866",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-860093503,860093503,
ryanofsky,2021-07-14 18:19:30,"Updated 0cc10f8377495fb60156d116307848674e4be38e -> def672f8706e13f4153ff9aca3fb9e1becddae26 ([`pr/subfee.6`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.6) -> [`pr/subfee.7`](https://github.com/ryanofsky/bitcoin/commits/pr/subfee.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/subfee.6..pr/subfee.7)) with minor updates suggested by jonatack (thanks!) and some tweaks (keep",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-880110218,880110218,
achow101,2021-07-21 19:02:14,ACK fe6dc76b7c9c5405f37464a3b19fcf82aaf22861,https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-884422497,884422497,
ryanofsky,2021-07-29 16:01:32,:scream: Apparently I missed a review club about this https://bitcoincore.reviews/22155. Sorry I missed but relieved it didn't find any terrible problems!,https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-889269873,889269873,
ryanofsky,2021-07-29 16:42:27,"Good suggestions for followup\n\n- S3RK switching wallet & spend test default fixtures to minimal basic setup https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673743964\n- glozow extending coverage for multiple recipients https://github.com/bitcoin/bitcoin/pull/22155#pullrequestreview-713724079\n- promag checking returned `changed_pos` https://github.com/bitcoin/bitcoin/pull/22155#dis",https://github.com/bitcoin/bitcoin/pull/22155#issuecomment-889299234,889299234,
achow101,2021-06-07 23:50:32,"In e459d013d7f2e92d51e52fdf3dd7ccdd3c57db68 ""wallet test: Add test for subtract fee from recipient behavior""\n\nSince fee estimation is not available in tests, the feerate that is used by this test is 0, which makes it not particularly meaningful. But we can set a feerate in the `CCoinControl` and force it to be used, e.g.\n\n```suggestion\n    CCoinControl coin_control;\n    coin_control.m_",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r647013596,647013596,src/wallet/test/spend_tests.cpp
ryanofsky,2021-06-08 03:24:19,"> Since fee estimation is not available in tests, the feerate that is used by this test is 0, which makes it not particularly meaningful. But we can set a feerate in the `CCoinControl` and force it to be used, e.g.\n\nThank you, great catch! I had assumed a nonzero minimum relay fee would be used. I think the tests still did cover relevant `to_reduce == 0` and `to_reduce < 0` cases, but having a",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r647082115,647082115,src/wallet/test/spend_tests.cpp
jonatack,2021-07-14 18:42:52,"def672f870 (feel free to ignore)\n```suggestion\n        const CAmount to_reduce{nFeeRet + change_amount - change_and_fee};\n```",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r669864128,669864128,src/wallet/spend.cpp
S3RK,2021-07-15 07:08:39,"Isn't it always just `50 * COIN - fee`\nI believe it'd be slightly easier to understand",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r670192976,670192976,src/wallet/test/spend_tests.cpp
S3RK,2021-07-15 07:20:43,"Any reasons to extract this from `ListCoinsTestingSetup` instead of using the fixture directly?\n\nIt looks like currently fixtures are preferred method of sharing setup/teardown between unit tests. `ListCoinsTestingSetup` already exists and does exactly what we need.",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r670200733,670200733,src/wallet/test/util.cpp
S3RK,2021-07-20 07:36:15,"Why not reuse `wallet/test/wallet_test_fixture.*`?\n\nIt already contains `WalletTestingSetup` that we use anyway.",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r672880212,672880212,src/Makefile.test.include
S3RK,2021-07-20 07:51:09,"No need to override fixture declared for test suite. You can do\n\n```\nBOOST_FIXTURE_TEST_SUITE(spend_tests, TestChain100Setup)\nBOOST_AUTO_TEST_CASE(SubtractFee)\n```\n\nor\n\n```\nBOOST_AUTO_TEST_SUITE(spend_tests)\nBOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n```",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r672890164,672890164,src/wallet/test/spend_tests.cpp
ryanofsky,2021-07-20 11:22:07,"re: https://github.com/bitcoin/bitcoin/pull/22155#discussion_r672880212\n\n> Why not reuse `wallet/test/wallet_test_fixture.*`?\n\nResponded in detail about the fixtures below.",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673033794,673033794,src/Makefile.test.include
ryanofsky,2021-07-20 11:28:02,"re: https://github.com/bitcoin/bitcoin/pull/22155#discussion_r672890164\n\n> No need to override fixture declared for test suite. You can do [...]\n\nI know you can do these things, but don't see what makes them better or meaningfully different. What I think is nice about the current approach is that it makes spend_tests setup consistent with wallet_tests setup, and more efficient by default b",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673037356,673037356,src/wallet/test/spend_tests.cpp
ryanofsky,2021-07-20 11:40:33,"re: https://github.com/bitcoin/bitcoin/pull/22155#discussion_r670192976\n\n> Isn't it always just `50 * COIN - fee`\n> I believe it'd be slightly easier to understand\n\nThis is surprising to me, and I'm not sure how the thinking goes. I think `recipient.nAmount + leftover_input_amount - fee` captures the idea that when the subtract-from-recipient option is used, the recipient will receive th",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673045063,673045063,src/wallet/test/spend_tests.cpp
ryanofsky,2021-07-20 11:51:13,"re: https://github.com/bitcoin/bitcoin/pull/22155#discussion_r670200733\n\n> Any reasons to extract this from `ListCoinsTestingSetup` instead of using the fixture directly?\n> \n> It looks like currently fixtures are preferred method of sharing setup/teardown between unit tests. `ListCoinsTestingSetup` already exists and does exactly what we need.\n\nFixtures are overused in general right no",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673051693,673051693,src/wallet/test/util.cpp
S3RK,2021-07-21 06:49:53,"The thinking is that the recipient always gets the whole UTXO - fee.\nOn the first look it seemed to me that the value received would be different since `leftover_input_amount` is different for different invocations. It took me some time to figure out that the `leftover_input_amount` variable  cancels out.\n\nI understand your thinking as well and I don't know which one is better.",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673705394,673705394,src/wallet/test/spend_tests.cpp
S3RK,2021-07-21 07:49:48,"> Fixtures are overused in general right now, causing tests to do unnecessary work, and they make setup code that could be reused in other contexts (benchmarks & fuzz tests, future test & simulation code) harder to understand and less reusable. \n\nIn this specific case the fixture doesn't cause unnecessary work.\n`CreateSyncedWallet` function is used in only two places now: 1) in `ListCoinsTes",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673741284,673741284,src/wallet/test/util.cpp
S3RK,2021-07-21 07:53:51,"It's better because it avoids unnecessary information. `WalletTestingSetup` is never used in the test suite.\n\nThere is no point in setting TEST_SUITE fixture to `WalletTestingSetup` when the only test case in the test suite overrides the fixture and uses `TestChain100Setup`.  It's just unused information in the test that could potentially confuse readers.\n\nSame goes for `wallet_tests`. Eve",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673743964,673743964,src/wallet/test/spend_tests.cpp
promag,2021-07-23 13:48:55,"fe6dc76b7c9c5405f37464a3b19fcf82aaf22861\n\nnit, also check `change_pos == -1`.",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r675579250,675579250,src/wallet/test/spend_tests.cpp
ryanofsky,2021-07-29 16:13:54,"I understand the motivation now and yes I agree. WalletTestingSetup can be overkill because even if you are testing wallet code, you are likely testing smaller functions and classes that don't need the full setup. It's nicer in general to use simpler fixtures for efficiency and easier comprehension, and would be good to see use of fixtures cleaned up and simplified in future PRs. Consistency betwe",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r679296345,679296345,src/wallet/test/spend_tests.cpp
ryanofsky,2021-07-29 16:36:27,"re: https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673741284\n\n> My suggestion is to not introduce a second mechanism to do test setups and just reuse existing fixture (probably renaming it to `SyncedWalletTestingSetup`) because it has exactly the right setup.\n\nYes, I see what you're saying here. If you can use fixtures to help with test setup, and you can also use normal functio",https://github.com/bitcoin/bitcoin/pull/22155#discussion_r679313586,679313586,src/wallet/test/util.cpp
