[
  {
    "sha": "307f7d48d4733da016bf73676f6ebff9144365c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDdmN2Q0OGQ0NzMzZGEwMTZiZjczNjc2ZjZlYmZmOTE0NDM2NWMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-29T15:01:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-02T21:05:03Z"
      },
      "message": "Report script evaluation failures in log and reject messages",
      "tree": {
        "sha": "bfab8c627703636f0b8f6d37147f8d2c0b0e427c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfab8c627703636f0b8f6d37147f8d2c0b0e427c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/307f7d48d4733da016bf73676f6ebff9144365c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/307f7d48d4733da016bf73676f6ebff9144365c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/307f7d48d4733da016bf73676f6ebff9144365c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/307f7d48d4733da016bf73676f6ebff9144365c1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0286fe5b3be20d0c27c6a71fa1a222166bccfd65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0286fe5b3be20d0c27c6a71fa1a222166bccfd65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0286fe5b3be20d0c27c6a71fa1a222166bccfd65"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d0a4db62bcee8d252af7c261f908cef16cc729f8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/307f7d48d4733da016bf73676f6ebff9144365c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/307f7d48d4733da016bf73676f6ebff9144365c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=307f7d48d4733da016bf73676f6ebff9144365c1",
        "patch": "@@ -1327,7 +1327,7 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason(), pindex->GetBlockHash()};\n+            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n                 Misbehaving(it->second, nDoS);\n@@ -1357,10 +1357,11 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n-bool CScriptCheck::operator()() const {\n+bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore)))\n-        return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+    }\n     return true;\n }\n \n@@ -1448,7 +1449,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         CScriptCheck check(*coins, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n                         if (check())\n-                            return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n+                            return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n                     // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n@@ -1457,7 +1458,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     // as to the correct behavior - we may want to continue\n                     // peering with non-upgraded nodes even after a soft-fork\n                     // super-majority vote has passed.\n-                    return state.DoS(100,false, REJECT_INVALID, \"mandatory-script-verify-flag-failed\");\n+                    return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n         }\n@@ -3975,7 +3976,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 pfrom->id, pfrom->cleanSubVer,\n                 state.GetRejectReason());\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n+                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n@@ -4049,7 +4050,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n+                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {\n                 LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -4256,7 +4257,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (fDebug) {\n             try {\n                 string strMsg; unsigned char ccode; string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, 111);\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n                 ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;"
      },
      {
        "sha": "b04692bb5471f082e60052c35dc09777e21d709d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/307f7d48d4733da016bf73676f6ebff9144365c1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/307f7d48d4733da016bf73676f6ebff9144365c1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=307f7d48d4733da016bf73676f6ebff9144365c1",
        "patch": "@@ -96,6 +96,8 @@ static const unsigned int MAX_HEADERS_RESULTS = 2000;\n static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n /** Time to wait (in seconds) between writing blockchain state to disk. */\n static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n+/** Maximum length of reject messages. */\n+static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n \n /** \"reject\" message codes **/\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -325,22 +327,26 @@ class CScriptCheck\n     unsigned int nIn;\n     unsigned int nFlags;\n     bool cacheStore;\n+    ScriptError error;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false) {}\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n     CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n \n-    bool operator()() const;\n+    bool operator()();\n \n     void swap(CScriptCheck &check) {\n         scriptPubKey.swap(check.scriptPubKey);\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);\n+        std::swap(error, check.error);\n     }\n+\n+    ScriptError GetScriptError() const { return error; }\n };\n \n /** Data structure that represents a partial merkle tree."
      }
    ]
  }
]