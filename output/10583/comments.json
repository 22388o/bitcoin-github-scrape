[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308444975",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-308444975",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 308444975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQ0NDk3NQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T14:16:03Z",
    "updated_at": "2017-06-14T14:16:03Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Makes a lot of sense to move the wallet-specific information to a separate RPC.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308444975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309147528",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-309147528",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 309147528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTE0NzUyOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T22:20:19Z",
    "updated_at": "2017-06-16T22:20:19Z",
    "author_association": "MEMBER",
    "body": "Currently this duplicates a singificant amount of code. Would it be possible to abstract out the 'info' part of `getaddressinfo`, and then call that from `validateaddress` as well (temporarily, until removed)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309147528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309602071",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-309602071",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 309602071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTYwMjA3MQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T23:33:20Z",
    "updated_at": "2017-06-19T23:33:20Z",
    "author_association": "MEMBER",
    "body": "@sipa Apparently, no, this is not possible. My attempt at doing so has resulted in a linker failure. Apparently there is some makefile problems with that. https://github.com/achow101/bitcoin/tree/getaddressinfo-broken is the branch with the duplication removed, but there is a linker error with `IsMine` calls. The full build error is here: https://gist.github.com/achow101/0f0e2d9e75d9d77132ab83a7605f2377",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309602071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309606565",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-309606565",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 309606565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTYwNjU2NQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T00:04:41Z",
    "updated_at": "2017-06-20T00:04:41Z",
    "author_association": "MEMBER",
    "body": "On second thought, I think I fixed the problem.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309606565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309878387",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-309878387",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 309878387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTg3ODM4Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T20:16:33Z",
    "updated_at": "2017-06-20T20:16:33Z",
    "author_association": "MEMBER",
    "body": "I believe you can do:\r\n\r\n```diff\r\n bitcoind_LDADD = \\\r\n   $(LIBBITCOIN_SERVER) \\\r\n+  $(LIBBITCOIN_WALLET) \\\r\n   $(LIBBITCOIN_COMMON) \\\r\n   $(LIBUNIVALUE) \\\r\n   $(LIBBITCOIN_UTIL) \\\r\n-  $(LIBBITCOIN_WALLET) \\\r\n   $(LIBBITCOIN_ZMQ) \\\r\n```\r\nin `Makefile.am`.\r\n\r\nThen the _ismine code can move from wallet to common (which I think belongs there, as signing code is already in common too).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309878387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309924928",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-309924928",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 309924928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkyNDkyOA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T00:01:48Z",
    "updated_at": "2017-06-21T00:01:48Z",
    "author_association": "MEMBER",
    "body": "@sipa I did that in my latest commit, but it seems that travis doesn't like it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309924928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310841433",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-310841433",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 310841433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg0MTQzMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T14:21:36Z",
    "updated_at": "2017-06-24T14:21:36Z",
    "author_association": "MEMBER",
    "body": "> Then the _ismine code can move from wallet to common (which I think belongs there, as signing code is already in common too).\r\n\r\nFrom what I remember it was already moved in the other direction at some point for the same reason.\r\nThe circular dependency between `_wallet` and `_server` remains a problem.\r\nWe'll need to solve #7965 to get rid of it.\r\nUnfortunately, this is part of that...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310841433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322486237",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-322486237",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 322486237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjQ4NjIzNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T14:35:48Z",
    "updated_at": "2017-08-15T14:35:48Z",
    "author_association": "MEMBER",
    "body": "needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322486237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322594812",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-322594812",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 322594812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjU5NDgxMg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T21:27:43Z",
    "updated_at": "2017-08-15T21:27:43Z",
    "author_association": "MEMBER",
    "body": "rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322594812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326620374",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-326620374",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 326620374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYyMDM3NA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T16:07:45Z",
    "updated_at": "2017-09-01T16:07:45Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. This PR is currently difficult to review because there are broken intermediate commits, commits which reverse previous commits, random style changes in unconnected commits, etc. Are you able to tidy this up to make it easier to review? If not, I'm happy to take this PR and tidy it up.\r\n\r\nMy high-level feedback is that we should hide the deprecated fields in `validateaddress` behind a command-line argument (similar to #11031). The `ismine` move to libbitcoin_common seems fine to me.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326620374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327250389",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-327250389",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 327250389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzI1MDM4OQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T17:39:16Z",
    "updated_at": "2017-09-05T17:39:16Z",
    "author_association": "MEMBER",
    "body": "Rebased and tidied up",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327250389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327293814",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-327293814",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 327293814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzI5MzgxNA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T20:29:22Z",
    "updated_at": "2017-09-05T20:29:22Z",
    "author_association": "MEMBER",
    "body": "Travis is failing on invalid scripted diff check.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327293814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330567261",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-330567261",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 330567261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDU2NzI2MQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T14:58:04Z",
    "updated_at": "2017-09-19T14:58:04Z",
    "author_association": "MEMBER",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330567261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330614398",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-330614398",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 330614398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDYxNDM5OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T17:34:13Z",
    "updated_at": "2017-09-19T17:34:13Z",
    "author_association": "MEMBER",
    "body": "extended test suite passes. Travis is failing the scripted diff check.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330614398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330628642",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-330628642",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 330628642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDYyODY0Mg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T18:25:55Z",
    "updated_at": "2017-09-19T18:25:55Z",
    "author_association": "MEMBER",
    "body": "Addressed most of @jnewbery's comments except for the deprecation thing",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330628642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330632633",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-330632633",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 330632633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDYzMjYzMw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T18:40:24Z",
    "updated_at": "2017-09-19T18:40:24Z",
    "author_association": "MEMBER",
    "body": "Thanks for addressing the nits.\r\n\r\nMy preference is that this doesn't get merged without some kind of phased deprecation. I'm happy to provide a commit to cherry pick if that would help.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330632633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330634127",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-330634127",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 330634127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDYzNDEyNw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T18:45:37Z",
    "updated_at": "2017-09-19T18:45:37Z",
    "author_association": "MEMBER",
    "body": "> My preference is that this doesn't get merged without some kind of phased deprecation. I'm happy to provide a commit to cherry pick if that would help.\r\n\r\nI'm planning on making a generic deprecation interface type thing that I will then rebase this and some other stuff on top of.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330634127/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332301401",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332301401",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332301401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjMwMTQwMQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T19:00:46Z",
    "updated_at": "2017-09-26T19:00:46Z",
    "author_association": "MEMBER",
    "body": "Rebased onto #11031 and moved the deprecated parts behind `IsDeprecatedRPCEnabled`. I wasn't sure what to do with the help text so I just left it as is (except for info about using `-deprecatedrpc`).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332301401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332329818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332329818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332329818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjMyOTgxOA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T20:44:06Z",
    "updated_at": "2017-09-26T20:44:06Z",
    "author_association": "MEMBER",
    "body": "@jnewbery I added a super basic test to check that `-deprecatedrpc=validateaddress` changes what is returned.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332329818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332351374",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332351374",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332351374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjM1MTM3NA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T22:12:03Z",
    "updated_at": "2017-09-26T22:12:03Z",
    "author_association": "MEMBER",
    "body": "> The changed commit broke the scripted-diff checker.\r\n\r\nI noticed. I believe that should be fixed now as I changed the script to exclude `deprecatedrpc.py`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332351374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332559385",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332559385",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332559385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjU1OTM4NQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T15:26:50Z",
    "updated_at": "2017-09-27T15:26:50Z",
    "author_association": "MEMBER",
    "body": "Rebased onto master",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332559385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332687166",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332687166",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332687166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY4NzE2Ng==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T23:48:43Z",
    "updated_at": "2017-09-27T23:48:43Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\r\n\r\n> throw a RPC_INVALID_ADDRESS_OR_KEY error\r\n\r\nI like this option.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332687166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332689397",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332689397",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332689397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY4OTM5Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T00:04:05Z",
    "updated_at": "2017-09-28T00:04:05Z",
    "author_association": "MEMBER",
    "body": "> throw a RPC_INVALID_ADDRESS_OR_KEY error\r\n\r\nDid that. I didn't realize that I hadn't added that error there.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332689397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332957004",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-332957004",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 332957004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjk1NzAwNA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T20:38:29Z",
    "updated_at": "2017-09-28T20:38:29Z",
    "author_association": "MEMBER",
    "body": "ACK ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332957004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333015844",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-333015844",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 333015844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzAxNTg0NA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T02:38:37Z",
    "updated_at": "2017-09-29T02:38:37Z",
    "author_association": "MEMBER",
    "body": "Addressed @TheBlueMatt's and @promag's comments. I also changed two of the `pushKV`s back to `push_back(Pair(...))` because they were not properly showing booleans (they were displayed as 0 and 1).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333015844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333143936",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-333143936",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 333143936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzE0MzkzNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T14:36:32Z",
    "updated_at": "2017-09-29T14:36:32Z",
    "author_association": "MEMBER",
    "body": "Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333143936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333154710",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-333154710",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 333154710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzE1NDcxMA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T15:15:20Z",
    "updated_at": "2017-09-29T15:15:20Z",
    "author_association": "MEMBER",
    "body": "Rebased onto master.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333154710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337790168",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-337790168",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 337790168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc5MDE2OA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T03:33:39Z",
    "updated_at": "2017-10-19T03:33:39Z",
    "author_association": "MEMBER",
    "body": "n'th rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337790168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348254424",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-348254424",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 348254424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODI1NDQyNA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T17:06:53Z",
    "updated_at": "2017-11-30T17:06:53Z",
    "author_association": "MEMBER",
    "body": "Rebased and addresses @MeshCollider's comments.\r\n\r\nThe P2SH nested witness info is being done in #11403.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348254424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349053378",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-349053378",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 349053378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTA1MzM3OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T18:16:13Z",
    "updated_at": "2017-12-04T18:16:13Z",
    "author_association": "MEMBER",
    "body": "Sorry for the late feedback after several rebases, but looking at this again I don't really like DescribeAddressVisitor moving into bitcoin-wallet, since there's functionality in there that's useful even when running with wallet disabled.\r\n\r\nCan you take a look at https://github.com/jnewbery/bitcoin/commits/pr10583.1 . It's almost the same as this, but I've moved the generic parts of DescribeAddressVisitor into rpc/util, so they can be accessed by bitcoin-server.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349053378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349088451",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-349088451",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 349088451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTA4ODQ1MQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T20:05:10Z",
    "updated_at": "2017-12-04T20:05:10Z",
    "author_association": "MEMBER",
    "body": "@jnewbery I'll take a look.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349088451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349191596",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-349191596",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 349191596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTE5MTU5Ng==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T04:25:28Z",
    "updated_at": "2017-12-05T04:25:28Z",
    "author_association": "MEMBER",
    "body": "I cherry-picked @jnewbery's commit for splitting and moving `DescribeAddressVisitor`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349191596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349341871",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-349341871",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 349341871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM0MTg3MQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T15:37:44Z",
    "updated_at": "2017-12-05T15:37:44Z",
    "author_association": "MEMBER",
    "body": "I think this is better, but obviously needs more review from others.\r\n\r\nIncidentally, I think that you've made this more difficult to review by squashing my commits down into a single commit (having a commit that splits a function into two *and* moves half of it to a new file is more difficult to review than one commit to split and a second commit that is move-only). You've also:\r\n\r\n- re-added the `DEPRECATED` notice to `iswitness`, `witness_version` and `witness_program` when they're not actually now deprecated\r\n- re-introduced the `script`/`redeemscript` error in the help text.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349341871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350072550",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-350072550",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 350072550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA3MjU1MA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T19:39:56Z",
    "updated_at": "2017-12-07T19:39:56Z",
    "author_association": "MEMBER",
    "body": "I cherry-picked the split and move commits from @jnewbery and I think I fixed the regressions\r\n\r\nThey actually weren't squashed earlier. Rather I had only cherry picked one commit due to merge conflict stuff. That is resolved by taking the commits before mine.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350072550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356720362",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-356720362",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 356720362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjcyMDM2Mg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T20:04:36Z",
    "updated_at": "2018-01-10T20:04:36Z",
    "author_association": "MEMBER",
    "body": "Rebased this but there's a linker error I can't quite figure out.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356720362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356878651",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-356878651",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 356878651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Njg3ODY1MQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T09:36:25Z",
    "updated_at": "2018-01-11T09:36:25Z",
    "author_association": "MEMBER",
    "body": "@achow101: I guess it might be because you're adding rpc/util.cpp to libbitcoin_server_a_SOURCES rather than libbitcoin_util_a_SOURCES in the Makefile.am\r\nAlso the scripted diff seems to have an issue",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356878651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357027219",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-357027219",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 357027219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzAyNzIxOQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T19:00:44Z",
    "updated_at": "2018-01-11T19:00:44Z",
    "author_association": "MEMBER",
    "body": "Rebased and fixed the linker error.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357027219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362409857",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-362409857",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 362409857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjQwOTg1Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T21:36:30Z",
    "updated_at": "2018-02-01T21:36:30Z",
    "author_association": "MEMBER",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362409857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363512973",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-363512973",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 363512973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzUxMjk3Mw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T18:09:51Z",
    "updated_at": "2018-02-06T18:09:51Z",
    "author_association": "MEMBER",
    "body": "Removed the unused variables.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363512973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363518910",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-363518910",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 363518910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzUxODkxMA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-06T18:29:49Z",
    "updated_at": "2018-02-06T18:29:49Z",
    "author_association": "MEMBER",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/10583/commits/8a82bf5dc6355486e1b5a86346812c33bc454a1d\r\n\r\nNice work (and a heroic amount of rebasing).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363518910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363924266",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-363924266",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 363924266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzkyNDI2Ng==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T21:56:30Z",
    "updated_at": "2018-02-07T21:56:30Z",
    "author_association": "MEMBER",
    "body": "Hopefully this can go in soon now 0.16 is branched off, looks like a painful one to keep rebasing. Will re-review as soon as I can",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363924266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364242122",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-364242122",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 364242122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDI0MjEyMg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T20:43:05Z",
    "updated_at": "2018-02-08T20:43:05Z",
    "author_association": "MEMBER",
    "body": "Rebased yet again.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364242122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364282133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-364282133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 364282133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDI4MjEzMw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T23:18:29Z",
    "updated_at": "2018-02-08T23:37:00Z",
    "author_association": "MEMBER",
    "body": "Looking very good, and the commits are easy to follow. A few comments:\r\n* The unused variables @instagibbs pointed out are removed after your move commit, but not before.\r\n* I think `addresses` and `pubkeys` also moved to `getaddressinfo`, but aren't listed as DEPRECATED in the help.\r\n* Can we remove `addresses` from `getaddressinfo` at the same time? It could remain in `validateaddress` when `-deprecatedrpc=validateaddress` is given, but this is the perfect opportunity to remove it in favor of `pubkeys` for new users.\r\n* Do we need to keep the full description of all deprecated fields in `validateaddress`? I think you could just say at the top \"DEPRECATION WARNING: The following fields have moved to getaddressinfo and are only included here when running with -deprecatedrpc=validateaddress: ismine, iswatchonly, script, sigsrequired, pubkey, pubkeys, embedded, iscompressed, timestamp, hdkeypath, hdmasterkeyid.\".\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364282133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364308435",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-364308435",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 364308435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDMwODQzNQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-09T01:40:07Z",
    "updated_at": "2018-02-09T01:40:07Z",
    "author_association": "MEMBER",
    "body": " - Removed the extra unused variables\r\n - Shortened `validateaddress` help\r\n - Set `addresses` to only be shown if `-deprecatedrpc=validateaddress` is set.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364308435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366252196",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366252196",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366252196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjI1MjE5Ng==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T14:36:58Z",
    "updated_at": "2018-02-16T14:36:58Z",
    "author_association": "MEMBER",
    "body": "@promag - personally, I'd generally discourage nits after a PR has been open for many months and been rebased/re-reviewed many times already. Adding additional churn and workload to the contributor and reviewers at this point seems borderline sadistic :slightly_smiling_face: \r\n\r\n(just my opinion though)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366252196/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366297705",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366297705",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366297705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjI5NzcwNQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T17:10:55Z",
    "updated_at": "2018-02-16T17:10:55Z",
    "author_association": "MEMBER",
    "body": "Addressed some of @promag's nits. I don't really feel like fixing the other ones. It's also getting really tedious to do fix nits at this point, so I probably won't do so in the future for this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366297705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366324637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366324637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366324637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjMyNDYzNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T18:48:59Z",
    "updated_at": "2018-02-16T18:48:59Z",
    "author_association": "MEMBER",
    "body": "Tested ACK b22cce014852b082d80f1cc35f902b375cba0318. Travis failure looks unrelated.\r\n\r\nLet's get this merged!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366324637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366331082",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366331082",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366331082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjMzMTA4Mg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T19:12:37Z",
    "updated_at": "2018-02-16T19:12:37Z",
    "author_association": "MEMBER",
    "body": "utACK b22cce014852b082d80f1cc35f902b375cba0318\r\n\r\nI have a few minor improvements, but I'll submit them as a separate PR after merge, nothing worth holding this up for.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366331082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366332984",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366332984",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366332984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjMzMjk4NA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T19:20:06Z",
    "updated_at": "2018-02-16T19:20:06Z",
    "author_association": "MEMBER",
    "body": "@jnewbery @achow101 sorry! didn't want to cause such pain :) I did report tested ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366332984/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366435070",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#issuecomment-366435070",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10583",
    "id": 366435070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQzNTA3MA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-17T11:27:13Z",
    "updated_at": "2018-02-17T11:27:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK b22cce014",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366435070/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137109820",
    "pull_request_review_id": 60735376,
    "id": 137109820,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEwOTgyMA==",
    "diff_hunk": "@@ -214,38 +166,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        CTxDestination dest = address.Get();\n-        std::string currentAddress = address.ToString();\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-\n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        CKeyID keyID;\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n+        try {\n+            ret.pushKVs(getaddressinfo(request));\n+        } catch (UniValue e) {",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand this. Why do we swallow the `RPC_METHOD_NOT_FOUND` error?\r\n\r\nCan you add a comment explaining this?",
    "created_at": "2017-09-05T20:48:32Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137109820",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137109820"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137109820"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137109820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 172,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123440",
    "pull_request_review_id": 60735376,
    "id": 137123440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEyMzQ0MA==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: braces for if block",
    "created_at": "2017-09-05T21:46:43Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137123440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137123440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3219,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123684",
    "pull_request_review_id": 60735376,
    "id": 137123684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEyMzY4NA==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Help text seems to be missing result fields, including at least `script`, `hex`, `addresses`, `sigsrequired`.",
    "created_at": "2017-09-05T21:48:05Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137123684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137123684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137123684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3242,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138946",
    "pull_request_review_id": 60767583,
    "id": 137138946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEzODk0Ng==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, `*` and `&` next to type. In this case also const: `const CWallet* wallet`.",
    "created_at": "2017-09-05T23:20:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137138946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137138946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3178,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138971",
    "pull_request_review_id": 60767610,
    "id": 137138971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEzODk3MQ==",
    "diff_hunk": "@@ -214,38 +166,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        CTxDestination dest = address.Get();\n-        std::string currentAddress = address.ToString();\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-\n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        CKeyID keyID;\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n+        try {\n+            ret.pushKVs(getaddressinfo(request));\n+        } catch (UniValue e) {",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That is swallowed in the event that `-disablewallet` is used; `getaddressinfo` will return `RPC_METHOD_NOT_FOUND` but `validateaddress` should still work and validate addresses.\r\n\r\nI will add a comment.",
    "created_at": "2017-09-05T23:21:01Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137138971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137138971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137138971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 172,
    "side": "RIGHT",
    "in_reply_to_id": 137109820
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139050",
    "pull_request_review_id": 60767583,
    "id": 137139050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEzOTA1MA==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, expand to multiline?",
    "created_at": "2017-09-05T23:21:39Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137139050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137139050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3569,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141965",
    "pull_request_review_id": 60771050,
    "id": 137141965,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0MTk2NQ==",
    "diff_hunk": "@@ -214,38 +166,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        CTxDestination dest = address.Get();\n-        std::string currentAddress = address.ToString();\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-\n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        CKeyID keyID;\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n+        try {\n+            ret.pushKVs(getaddressinfo(request));\n+        } catch (UniValue e) {",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In that case, I think it's preferable to test for wallet existence before calling `getaddressinfo`. The following should do it:\r\n\r\n```\r\n        if (!::vpwallets.empty()) {\r\n            ret.pushKVs(getaddressinfo(request));\r\n        }\r\n```",
    "created_at": "2017-09-05T23:45:18Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137141965",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141965"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137141965"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 172,
    "side": "RIGHT",
    "in_reply_to_id": 137109820
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137145931",
    "pull_request_review_id": 60775360,
    "id": 137145931,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0NTkzMQ==",
    "diff_hunk": "@@ -214,38 +166,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        CTxDestination dest = address.Get();\n-        std::string currentAddress = address.ToString();\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-\n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        CKeyID keyID;\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n+        try {\n+            ret.pushKVs(getaddressinfo(request));\n+        } catch (UniValue e) {",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-06T00:16:32Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137145931",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137145931"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r137145931"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137145931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 172,
    "side": "RIGHT",
    "in_reply_to_id": 137109820
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582688",
    "pull_request_review_id": 63534575,
    "id": 139582688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTU4MjY4OA==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Forgot to say that this was addressed.",
    "created_at": "2017-09-19T02:04:06Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3242,
    "side": "RIGHT",
    "in_reply_to_id": 137123684
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582851",
    "pull_request_review_id": 63534767,
    "id": 139582851,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTU4Mjg1MQ==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-19T02:06:06Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582851",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582851"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582851"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582851/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3178,
    "side": "RIGHT",
    "in_reply_to_id": 137138946
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582861",
    "pull_request_review_id": 63534780,
    "id": 139582861,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTU4Mjg2MQ==",
    "diff_hunk": "@@ -3169,6 +3170,114 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "7c3e7ac6cdc58b95f0d9f3a3b8b64e829fa7a5e7",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think that is necessary",
    "created_at": "2017-09-19T02:06:12Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582861",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582861"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139582861"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139582861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3569,
    "side": "RIGHT",
    "in_reply_to_id": 137139050
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721314",
    "pull_request_review_id": 63693713,
    "id": 139721314,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyMTMxNA==",
    "diff_hunk": "@@ -127,37 +78,21 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n+\n+#ifdef ENABLE_WALLET\n+        if (!::vpwallets.empty()) {\n+            ret.pushKVs(getaddressinfo(request));\n+        }\n+#endif\n+        if (ret[\"address\"].isNull()) {",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 118,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: indentation for this if block",
    "created_at": "2017-09-19T15:06:06Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139721314",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721314"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139721314"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721667",
    "pull_request_review_id": 63693713,
    "id": 139721667,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyMTY2Nw==",
    "diff_hunk": "@@ -3180,6 +3181,123 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: braces",
    "created_at": "2017-09-19T15:07:13Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139721667",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721667"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139721667"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139721667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3230,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139722759",
    "pull_request_review_id": 63693713,
    "id": 139722759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyMjc1OQ==",
    "diff_hunk": "@@ -3180,6 +3181,123 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.push_back(Pair(\"address\", currentAddress));\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));;\n+    \n+    ret.push_back(Pair(\"isscript\", scriptPubKey.IsPayToScriptHash()));",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 105,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "micronit: not in same ordering as help text (either for `getaddressinfo` or `validateaddress`. Suggest you move this line below `ret.push_back(Pair(\"iswatchonly\", ...`",
    "created_at": "2017-09-19T15:10:45Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139722759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139722759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139722759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139722759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3277,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725053",
    "pull_request_review_id": 63693713,
    "id": 139725053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTA1Mw==",
    "diff_hunk": "@@ -3180,6 +3181,123 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:16Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3239,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725072",
    "pull_request_review_id": 63693713,
    "id": 139725072,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTA3Mg==",
    "diff_hunk": "@@ -3180,6 +3181,123 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:19Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725072",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725072"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725072"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725072/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3242,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725126",
    "pull_request_review_id": 63693713,
    "id": 139725126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTEyNg==",
    "diff_hunk": "@@ -3180,6 +3181,123 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 85,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:29Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3257,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725166",
    "pull_request_review_id": 63693713,
    "id": 139725166,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTE2Ng==",
    "diff_hunk": "@@ -31,94 +31,45 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"Parts of this command have been deprecated and moved to getaddressinfo\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:36Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725166",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725166"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725166"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 143,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725188",
    "pull_request_review_id": 63693713,
    "id": 139725188,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTE4OA==",
    "diff_hunk": "@@ -31,94 +31,45 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"Parts of this command have been deprecated and moved to getaddressinfo\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:42Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725188",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725188"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725188"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725220",
    "pull_request_review_id": 63693713,
    "id": 139725220,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTcyNTIyMA==",
    "diff_hunk": "@@ -31,94 +31,45 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"Parts of this command have been deprecated and moved to getaddressinfo\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) DEPRECATED. The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) DEPRECATED. The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) DEPRECATED. Array of addresses associated with the known redeemscript\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) DEPRECATED. Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) DEPRECATED. The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) DEPRECATED. If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) DEPRECATED. The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 89,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "098cebb7098faf4017694d5b82dd5745a0df5e2b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: help text alignment",
    "created_at": "2017-09-19T15:18:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725220",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725220"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r139725220"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139725220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141159789",
    "pull_request_review_id": 65333969,
    "id": 141159789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE1OTc4OQ==",
    "diff_hunk": "@@ -31,94 +31,46 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"Parts of this command have been deprecated and moved to getaddressinfo. To have those deprecated\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "c288c958e96d9c2c856abcde901518f0de9fd3ce",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggestion only: Perhaps start this with `DEPRECATION WARNING:` to draw attention. It might be easy to miss this warning.",
    "created_at": "2017-09-26T19:30:34Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141159789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141159789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141159789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141159789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141178431",
    "pull_request_review_id": 65355128,
    "id": 141178431,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE3ODQzMQ==",
    "diff_hunk": "@@ -31,94 +31,46 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"Parts of this command have been deprecated and moved to getaddressinfo. To have those deprecated\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "c288c958e96d9c2c856abcde901518f0de9fd3ce",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-26T20:43:14Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141178431",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141178431"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141178431"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141178431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 141159789
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141183707",
    "pull_request_review_id": 65360494,
    "id": 141183707,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE4MzcwNw==",
    "diff_hunk": "@@ -127,37 +79,21 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.push_back(Pair(\"address\", currentAddress));",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 150,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Comply with #11386 here and below? ",
    "created_at": "2017-09-26T21:02:47Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141183707",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141183707"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141183707"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141183707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141190024",
    "pull_request_review_id": 65360494,
    "id": 141190024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MDAyNA==",
    "diff_hunk": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;",
    "path": "src/wallet/rpcwallet.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why?",
    "created_at": "2017-09-26T21:27:58Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141190024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141190024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141190024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141190024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 13,
    "original_line": 13,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191046",
    "pull_request_review_id": 65360494,
    "id": 141191046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MTA0Ng==",
    "diff_hunk": "@@ -3180,6 +3181,125 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.push_back(Pair(\"address\", currentAddress));\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));;\n+\n+    isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n+    ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 107,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`bool(mine & ISMINE_SPENDABLE)`? Same below.",
    "created_at": "2017-09-26T21:32:54Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3279,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191346",
    "pull_request_review_id": 65369698,
    "id": 141191346,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MTM0Ng==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")\n+        assert(\"ismine\" not in dep_validate_address)",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 24,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "assert is a statement, not a function:\r\n\r\n```python\r\nassert \"ismine\" not in dep_validate_address\r\n```\r\n\r\nsame for assert below.",
    "created_at": "2017-09-26T21:34:17Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191346",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191346"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191346"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191420",
    "pull_request_review_id": 65369698,
    "id": 141191420,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MTQyMA==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 22,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion: change this to a `self.log.info()`",
    "created_at": "2017-09-26T21:34:40Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191420",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191420"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191420"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191733",
    "pull_request_review_id": 65369698,
    "id": 141191733,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MTczMw==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 23,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps declare this address as a variable above (with comment) to avoid having magic strings in the RPC method call.",
    "created_at": "2017-09-26T21:36:04Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191733",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191733"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191733"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191736",
    "pull_request_review_id": 65360494,
    "id": 141191736,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5MTczNg==",
    "diff_hunk": "@@ -19,5 +19,11 @@ def run_test(self):\n         self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n         self.nodes[1].estimatefee(1)\n \n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")\n+        assert(\"ismine\" not in dep_validate_address)",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it enough to check `ismine` key? Maybe merge `nodes[0].validateaddress` with `nodes[0].getaddressinfo` and that should contain `nodes[1].validateaddress`?",
    "created_at": "2017-09-26T21:36:06Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191736",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191736"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141191736"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141191736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198491",
    "pull_request_review_id": 65377732,
    "id": 141198491,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODQ5MQ==",
    "diff_hunk": "@@ -19,5 +19,11 @@ def run_test(self):\n         self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n         self.nodes[1].estimatefee(1)\n \n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")\n+        assert(\"ismine\" not in dep_validate_address)",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's enough to determine that they are returning different things as one should have `ismine` and the other not.",
    "created_at": "2017-09-26T22:09:31Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198491",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198491"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198491"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 141191736
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198691",
    "pull_request_review_id": 65377960,
    "id": 141198691,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODY5MQ==",
    "diff_hunk": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;",
    "path": "src/wallet/rpcwallet.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`UniValue` is needed below for `UniValue getaddressinfo...`",
    "created_at": "2017-09-26T22:10:34Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198691",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198691"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198691"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198691/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 13,
    "original_line": 13,
    "side": "RIGHT",
    "in_reply_to_id": 141190024
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198897",
    "pull_request_review_id": 65378191,
    "id": 141198897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODg5Nw==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 22,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-26T22:11:42Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 141191420
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198914",
    "pull_request_review_id": 65378211,
    "id": 141198914,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODkxNA==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 23,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-26T22:11:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198914",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198914"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198914"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 141191733
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198923",
    "pull_request_review_id": 65378223,
    "id": 141198923,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODkyMw==",
    "diff_hunk": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test deprecation of RPC calls.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_jsonrpc\n+\n+class DeprecatedRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=validateaddress\"]]\n+\n+    def run_test(self):\n+        self.log.info(\"estimatefee: Shows deprecated message\")\n+        assert_raises_jsonrpc(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n+\n+        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n+        self.nodes[1].estimatefee(1)\n+\n+        # test validateaddress deprecation\n+        dep_validate_address = self.nodes[0].validateaddress(\"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\")\n+        assert(\"ismine\" not in dep_validate_address)",
    "path": "test/functional/deprecated_rpc.py",
    "position": null,
    "original_position": 24,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "df53fd1c4db7f6491621f300cc926a15f9be4807",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-26T22:11:52Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198923",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198923"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198923"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 141191346
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198934",
    "pull_request_review_id": 65378231,
    "id": 141198934,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTE5ODkzNA==",
    "diff_hunk": "@@ -127,37 +79,21 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n-        if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n-            }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.push_back(Pair(\"address\", currentAddress));",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 150,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "8d5d4cf4c3077e8f3269fab3b98da7413e100081",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-26T22:11:56Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198934",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198934"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141198934"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141198934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT",
    "in_reply_to_id": 141183707
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141459915",
    "pull_request_review_id": 65677636,
    "id": 141459915,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTQ1OTkxNQ==",
    "diff_hunk": "@@ -31,94 +31,46 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "fa4eea7385aa575a779d033dbeb97af01beddc44",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this warning should also say something like \"Clients must transition to using getaddressinfo to access this information before upgrading to v0.17\"",
    "created_at": "2017-09-27T20:33:16Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141459915",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141459915"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141459915"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141459915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141497692",
    "pull_request_review_id": 65721370,
    "id": 141497692,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTQ5NzY5Mg==",
    "diff_hunk": "@@ -31,94 +31,46 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "fa4eea7385aa575a779d033dbeb97af01beddc44",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-28T00:04:09Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141497692",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141497692"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141497692"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141497692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 141459915
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141732840",
    "pull_request_review_id": 65995711,
    "id": 141732840,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTczMjg0MA==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 174,
    "original_position": 103,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2017-09-28T20:51:25Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141732840",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141732840"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141732840"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141732840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3680,
    "original_line": 3680,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733003",
    "pull_request_review_id": 65995711,
    "id": 141733003,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTczMzAwMw==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 112,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`pwallet` is valid because of `EnsureWalletIsAvailable` above.",
    "created_at": "2017-09-28T20:52:14Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733003",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733003"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733003"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3284,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733153",
    "pull_request_review_id": 65995711,
    "id": 141733153,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTczMzE1Mw==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, fix indentation.",
    "created_at": "2017-09-28T20:52:50Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3231,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733225",
    "pull_request_review_id": 65995711,
    "id": 141733225,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTczMzIyNQ==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, add `{` or single line.",
    "created_at": "2017-09-28T20:53:10Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733225",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733225"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141733225"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3472,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141768902",
    "pull_request_review_id": 66035965,
    "id": 141768902,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc2ODkwMg==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Grammar here: \"To have those deprecated information shown\" -> \"To have those deprecated fields shown\"",
    "created_at": "2017-09-29T00:48:42Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141768902",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141768902"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141768902"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141768902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141769888",
    "pull_request_review_id": 66035965,
    "id": 141769888,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc2OTg4OA==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "While you're at it, can you clarify the docs on this? Its the redeemScript type, afaict, not the address type...Maybe even move the redeemScript-specific stuff to a separate object? like redeemScript: { script:, hex: addresses: []}...",
    "created_at": "2017-09-29T00:59:41Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141769888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141769888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141769888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141769888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3248,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770679",
    "pull_request_review_id": 66035965,
    "id": 141770679,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3MDY3OQ==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) DEPRECATED. The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) DEPRECATED. The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) DEPRECATED. Array of addresses associated with the known redeemscript\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) DEPRECATED. Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) DEPRECATED. The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) DEPRECATED. If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) DEPRECATED. The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) DEPRECATED. The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) DEPRECATED. The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n     LOCK(cs_main);",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 107,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I do not believe you need cs_main here anymore.",
    "created_at": "2017-09-29T01:08:20Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141770679",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770679"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141770679"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770695",
    "pull_request_review_id": 66035965,
    "id": 141770695,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3MDY5NQ==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe you only need cs_wallet here.",
    "created_at": "2017-09-29T01:08:33Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141770695",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770695"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141770695"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141770695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3268,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141771632",
    "pull_request_review_id": 66035965,
    "id": 141771632,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3MTYzMg==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why change the ordering here? UniValue returns things ordered in insertion-order (and hence bitcoin-cli and some JSON libraries will print it in that order) so might as well just leave it...having deprecation warnings interspersed is fine, they'll all go away soon enough :)",
    "created_at": "2017-09-29T01:19:19Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141771632",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141771632"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141771632"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141771632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141772004",
    "pull_request_review_id": 66035965,
    "id": 141772004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3MjAwNA==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) DEPRECATED. The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) DEPRECATED. The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) DEPRECATED. Array of addresses associated with the known redeemscript\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) DEPRECATED. Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) DEPRECATED. The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) DEPRECATED. If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 89,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You removed this from the output, but not the docs. For now I think we should leave the account display here, primarily just because we will want to keep it identical but just rename it label when we do accounts->label conversion.",
    "created_at": "2017-09-29T01:23:36Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141772004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141772004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141772004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141772004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141777940",
    "pull_request_review_id": 66045887,
    "id": 141777940,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3Nzk0MA==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The idea was to group the deprecated things together. The ordering is still correct though.",
    "created_at": "2017-09-29T02:10:07Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141777940",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141777940"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141777940"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141777940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 141771632
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779984",
    "pull_request_review_id": 66048160,
    "id": 141779984,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3OTk4NA==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-29T02:35:02Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141779984",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779984"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141779984"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3472,
    "side": "RIGHT",
    "in_reply_to_id": 141733225
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779993",
    "pull_request_review_id": 66048170,
    "id": 141779993,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc3OTk5Mw==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-29T02:35:05Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141779993",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779993"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141779993"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141779993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3231,
    "side": "RIGHT",
    "in_reply_to_id": 141733153
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780010",
    "pull_request_review_id": 66048195,
    "id": 141780010,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDAxMA==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 174,
    "original_position": 103,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a brief test for `getaddressinfo` in `wallet.py`",
    "created_at": "2017-09-29T02:35:22Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780010",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780010"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780010"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3680,
    "original_line": 3680,
    "side": "RIGHT",
    "in_reply_to_id": 141732840
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780023",
    "pull_request_review_id": 66048213,
    "id": 141780023,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDAyMw==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 112,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed the `pwallet` check.",
    "created_at": "2017-09-29T02:35:34Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780023",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780023"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780023"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3284,
    "side": "RIGHT",
    "in_reply_to_id": 141733003
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780033",
    "pull_request_review_id": 66048222,
    "id": 141780033,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDAzMw==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-09-29T02:35:38Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780033",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780033"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780033"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 141768902
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780047",
    "pull_request_review_id": 66048243,
    "id": 141780047,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDA0Nw==",
    "diff_hunk": "@@ -31,94 +31,47 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"information shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) DEPRECATED. The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) DEPRECATED. The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) DEPRECATED. Array of addresses associated with the known redeemscript\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) DEPRECATED. Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) DEPRECATED. The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) DEPRECATED. If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 89,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added the accounts field back to the output.",
    "created_at": "2017-09-29T02:35:49Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780047",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780047"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780047"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 141772004
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780087",
    "pull_request_review_id": 66048295,
    "id": 141780087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDA4Nw==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I changed that field to `redeemscript`. I didn't make it a separate object.",
    "created_at": "2017-09-29T02:36:21Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3248,
    "side": "RIGHT",
    "in_reply_to_id": 141769888
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780094",
    "pull_request_review_id": 66048301,
    "id": 141780094,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc4MDA5NA==",
    "diff_hunk": "@@ -3180,6 +3181,131 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    DescribeAddressVisitor(CWallet* const _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+            return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ea088845fb8dd903f681c4c08b6bfe412cecc536",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-29T02:36:26Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780094",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780094"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141780094"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141780094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3268,
    "side": "RIGHT",
    "in_reply_to_id": 141770695
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141884741",
    "pull_request_review_id": 66172076,
    "id": 141884741,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTg4NDc0MQ==",
    "diff_hunk": "@@ -426,6 +426,15 @@ def run_test(self):\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n+        ",
    "path": "test/functional/wallet.py",
    "position": null,
    "original_position": 13,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "205fdcdfc15cde6172a6ae8e0d797e7ee178a58d",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No trailing whitespace, please.",
    "created_at": "2017-09-29T14:37:57Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141884741",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141884741"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141884741"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141884741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 429,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141894025",
    "pull_request_review_id": 66183604,
    "id": 141894025,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTg5NDAyNQ==",
    "diff_hunk": "@@ -426,6 +426,15 @@ def run_test(self):\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n+        ",
    "path": "test/functional/wallet.py",
    "position": null,
    "original_position": 13,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "205fdcdfc15cde6172a6ae8e0d797e7ee178a58d",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed.",
    "created_at": "2017-09-29T15:15:15Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141894025",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141894025"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r141894025"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141894025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 429,
    "side": "RIGHT",
    "in_reply_to_id": 141884741
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151614788",
    "pull_request_review_id": 77352120,
    "id": 151614788,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTYxNDc4OA==",
    "diff_hunk": "@@ -32,176 +32,71 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"fields shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) DEPRECATED. If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) DEPRECATED. The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) DEPRECATED. The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this deprecated or not? `isscript` is on line 51 too which hasn't been deleted, and in the if-statement below `Pair(\"isscript\", scriptPubKey.IsPayToScriptHash())` is pushed on line 98. I think the deprecation is correct, so both those lines should be removed?",
    "created_at": "2017-11-17T07:03:18Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151614788",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151614788"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151614788"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151614788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151615579",
    "pull_request_review_id": 77352120,
    "id": 151615579,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTYxNTU3OQ==",
    "diff_hunk": "@@ -3287,6 +3288,179 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    explicit DescribeAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        if (pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"redeemscript\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"redeemscript\\\" : \\\"type\\\"       (string, optional) The type of the redeemscript. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 131,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be `optional`. Same as `pubkey` on line above.\r\nThen make same changes to the deprecated fields in `validateaddress` so they're consistent.",
    "created_at": "2017-11-17T07:09:37Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151615579",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151615579"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151615579"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151615579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3661,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151616678",
    "pull_request_review_id": 77352120,
    "id": 151616678,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTYxNjY3OA==",
    "diff_hunk": "@@ -32,176 +32,71 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"fields shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) DEPRECATED. If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) DEPRECATED. The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) DEPRECATED. The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"redeemscript\\\" : \\\"type\\\"       (string, optional) DEPRECATED. The type of the redeemscript. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 122,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If the deprecation switch is enabled, should `redeemscript` be named `script` for compatibility in the output of `validateaddress`? Otherwise its a breaking change anyway",
    "created_at": "2017-11-17T07:18:41Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151616678",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151616678"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r151616678"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151616678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139263",
    "pull_request_review_id": 80256957,
    "id": 154139263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDEzOTI2Mw==",
    "diff_hunk": "@@ -32,176 +32,71 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"fields shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) DEPRECATED. If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) DEPRECATED. The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) DEPRECATED. The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that `isscript` shouldn't be deprecated, so I fixed that",
    "created_at": "2017-11-30T17:04:20Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 151614788
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139275",
    "pull_request_review_id": 80256973,
    "id": 154139275,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDEzOTI3NQ==",
    "diff_hunk": "@@ -32,176 +32,71 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"\n+            \"fields shown, start bitcoind with -deprecatedrpc=validateaddress\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) DEPRECATED. If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) DEPRECATED. If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) DEPRECATED. If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) DEPRECATED. The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) DEPRECATED. The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) DEPRECATED. If the key is a script\\n\"\n+            \"  \\\"redeemscript\\\" : \\\"type\\\"       (string, optional) DEPRECATED. The type of the redeemscript. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 122,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2017-11-30T17:04:22Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139275",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139275"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139275"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 151616678
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139297",
    "pull_request_review_id": 80256994,
    "id": 154139297,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDEzOTI5Nw==",
    "diff_hunk": "@@ -3287,6 +3288,179 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet* const pwallet;\n+\n+    explicit DescribeAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        if (pwallet->GetCScript(scriptID, subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"redeemscript\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses) {\n+                a.push_back(EncodeDestination(addr));\n+            }\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n+};\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"redeemscript\\\" : \\\"type\\\"       (string, optional) The type of the redeemscript. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 131,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "d1539bd607911cdf522c1eb4806c1385e7b8a3fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-11-30T17:04:27Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139297",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139297"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154139297"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154139297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3661,
    "side": "RIGHT",
    "in_reply_to_id": 151615579
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154191357",
    "pull_request_review_id": 80318402,
    "id": 154191357,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDE5MTM1Nw==",
    "diff_hunk": "@@ -32,176 +32,70 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.17. To have those deprecated\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 99,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "4ecc207a486f0703374df727e8eb7e85cb5ed900",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please tell the reader what type of things are moving",
    "created_at": "2017-11-30T20:26:24Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154191357",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154191357"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r154191357"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154191357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112644",
    "pull_request_review_id": 94143302,
    "id": 166112644,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExMjY0NA==",
    "diff_hunk": "@@ -66,3 +66,55 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+UniValue DescribeAddressVisitor::operator()(const CNoDestination &dest) const {\n+    return UniValue(UniValue::VOBJ);\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CKeyID &keyID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey vchPubKey;",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nUnused variable?",
    "created_at": "2018-02-05T21:10:19Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112644",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112644"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112644"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112717",
    "pull_request_review_id": 94143302,
    "id": 166112717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExMjcxNw==",
    "diff_hunk": "@@ -66,3 +66,55 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+UniValue DescribeAddressVisitor::operator()(const CNoDestination &dest) const {\n+    return UniValue(UniValue::VOBJ);\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CKeyID &keyID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey vchPubKey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CScriptID &scriptID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nUnused?",
    "created_at": "2018-02-05T21:10:40Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112787",
    "pull_request_review_id": 94143302,
    "id": 166112787,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExMjc4Nw==",
    "diff_hunk": "@@ -66,3 +66,55 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+UniValue DescribeAddressVisitor::operator()(const CNoDestination &dest) const {\n+    return UniValue(UniValue::VOBJ);\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CKeyID &keyID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey vchPubKey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CScriptID &scriptID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;\n+    obj.push_back(Pair(\"isscript\", true));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessV0KeyHash& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey pubkey;",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nUnused?",
    "created_at": "2018-02-05T21:10:55Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112787",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112787"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112787"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 93,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112981",
    "pull_request_review_id": 94143302,
    "id": 166112981,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExMjk4MQ==",
    "diff_hunk": "@@ -66,3 +66,55 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+UniValue DescribeAddressVisitor::operator()(const CNoDestination &dest) const {\n+    return UniValue(UniValue::VOBJ);\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CKeyID &keyID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey vchPubKey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CScriptID &scriptID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;\n+    obj.push_back(Pair(\"isscript\", true));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessV0KeyHash& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey pubkey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", true));\n+    obj.push_back(Pair(\"witness_version\", 0));\n+    obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessV0ScriptHash& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nUnused?",
    "created_at": "2018-02-05T21:11:45Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112981",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112981"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166112981"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166112981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166113017",
    "pull_request_review_id": 94143302,
    "id": 166113017,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExMzAxNw==",
    "diff_hunk": "@@ -66,3 +66,55 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+UniValue DescribeAddressVisitor::operator()(const CNoDestination &dest) const {\n+    return UniValue(UniValue::VOBJ);\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CKeyID &keyID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey vchPubKey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const CScriptID &scriptID) const {\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;\n+    obj.push_back(Pair(\"isscript\", true));\n+    obj.push_back(Pair(\"iswitness\", false));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessV0KeyHash& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CPubKey pubkey;\n+    obj.push_back(Pair(\"isscript\", false));\n+    obj.push_back(Pair(\"iswitness\", true));\n+    obj.push_back(Pair(\"witness_version\", 0));\n+    obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessV0ScriptHash& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;\n+    obj.push_back(Pair(\"isscript\", true));\n+    obj.push_back(Pair(\"iswitness\", true));\n+    obj.push_back(Pair(\"witness_version\", 0));\n+    obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+    return obj;\n+}\n+\n+UniValue DescribeAddressVisitor::operator()(const WitnessUnknown& id) const\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    CScript subscript;",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 50,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nUnused?",
    "created_at": "2018-02-05T21:11:53Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166113017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166113017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166113017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166113017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166118579",
    "pull_request_review_id": 94143302,
    "id": 166118579,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjExODU3OQ==",
    "diff_hunk": "@@ -16,4 +23,17 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>",
    "path": "src/rpc/util.h",
    "position": null,
    "original_position": 18,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "1de28c236c593fc3af770e901ae5d2977370be3f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In https://github.com/bitcoin/bitcoin/pull/10583/commits/4dadd7c7ac0934447b8ca33942535cc8a22e78f5\r\n\r\nCurious: if we're looking to eventually get away from using Boost, should we reserve continued/new usage of it for cases when the feature at hand would be hard to replicate on our own? Seems like each use of\r\n```\r\nboost::apply_visitor(DescribeAddressVisitor(), foo);\r\n```\r\ncould be replaced with `DescribeAddressVisitor()(foo)`. \r\n\r\nI guess usages of `static_visitor` are relatively easy to unwind if we ever want to, and it may be worthwhile to remain consistent with our usage of it in the wallet code.\r\n\r\nFeel free to ignore; not proposing we hold this changeset up on the basis of Boost usage, just curious.",
    "created_at": "2018-02-05T21:33:14Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166118579",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166118579"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r166118579"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166118579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063182",
    "pull_request_review_id": 80318402,
    "id": 167063182,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzA2MzE4Mg==",
    "diff_hunk": "@@ -33,13 +33,67 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n \n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "9f61967fef9807a55479b450b1741fc1e366d529",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2018-02-08T20:50:39Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063182",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063182"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063182"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063377",
    "pull_request_review_id": 80318402,
    "id": 167063377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzA2MzM3Nw==",
    "diff_hunk": "@@ -33,13 +33,67 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "9f61967fef9807a55479b450b1741fc1e366d529",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2018-02-08T20:51:28Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063455",
    "pull_request_review_id": 80318402,
    "id": 167063455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzA2MzQ1NQ==",
    "diff_hunk": "@@ -33,13 +33,67 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "9f61967fef9807a55479b450b1741fc1e366d529",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2018-02-08T20:51:44Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063497",
    "pull_request_review_id": 80318402,
    "id": 167063497,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzA2MzQ5Nw==",
    "diff_hunk": "@@ -33,13 +33,67 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n \n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "9f61967fef9807a55479b450b1741fc1e366d529",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2018-02-08T20:51:53Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063550",
    "pull_request_review_id": 80318402,
    "id": 167063550,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzA2MzU1MA==",
    "diff_hunk": "@@ -33,13 +33,67 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n \n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 55,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "9f61967fef9807a55479b450b1741fc1e366d529",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2018-02-08T20:52:04Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063550",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063550"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167063550"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167063550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167124634",
    "pull_request_review_id": 95298585,
    "id": 167124634,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzEyNDYzNA==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There probably still needs to be a mention of `addresses`, as there is now no information about it anywhere anymore.",
    "created_at": "2018-02-09T02:14:39Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167124634",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167124634"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167124634"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167124634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167125986",
    "pull_request_review_id": 95298585,
    "id": 167125986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzEyNTk4Ng==",
    "diff_hunk": "@@ -3515,6 +3516,200 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (IsDeprecatedRPCEnabled(\"validateaddress\")) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (IsDeprecatedRPCEnabled(\"validateaddress\")) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (IsDeprecatedRPCEnabled(\"validateaddress\")) obj.pushKV(\"addresses\", std::move(a));",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This will include the `addresses` field when `-deprecatedrpc=validateaddress` is set, even for witness addresses (currently it will only include it for legacy addresses).",
    "created_at": "2018-02-09T02:27:05Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167125986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167125986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167125986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167125986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3565,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167126361",
    "pull_request_review_id": 95298585,
    "id": 167126361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzEyNjM2MQ==",
    "diff_hunk": "@@ -16,4 +23,17 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>",
    "path": "src/rpc/util.h",
    "position": null,
    "original_position": 18,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you can keep the `DescribeAddressVisitor` class entirely local to `rpc/util.cpp`, and only expose a `UniValue DescribeAddress(const CTxDestination& dest)` function.",
    "created_at": "2018-02-09T02:30:32Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167126361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167126361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167126361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167126361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286509",
    "pull_request_review_id": 95491125,
    "id": 167286509,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzI4NjUwOQ==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added mention of it back.",
    "created_at": "2018-02-09T17:00:47Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286509",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286509"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286509"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 167124634
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286687",
    "pull_request_review_id": 95491354,
    "id": 167286687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzI4NjY4Nw==",
    "diff_hunk": "@@ -3515,6 +3516,200 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (IsDeprecatedRPCEnabled(\"validateaddress\")) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (IsDeprecatedRPCEnabled(\"validateaddress\")) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (IsDeprecatedRPCEnabled(\"validateaddress\")) obj.pushKV(\"addresses\", std::move(a));",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I changed it back to the original one and used `IsDeprecatedRPC` in a different place to handle this issue.",
    "created_at": "2018-02-09T17:01:34Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3565,
    "side": "RIGHT",
    "in_reply_to_id": 167125986
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286789",
    "pull_request_review_id": 95491493,
    "id": 167286789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzI4Njc4OQ==",
    "diff_hunk": "@@ -16,4 +23,17 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>",
    "path": "src/rpc/util.h",
    "position": null,
    "original_position": 18,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "66ba1b84c72ee2fe20408e21bea3ef9f1056b6c3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed this and `DescribeWalletAddressVisitor` to helper functions which called the visitors.",
    "created_at": "2018-02-09T17:01:58Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r167286789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167286789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT",
    "in_reply_to_id": 167126361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628216",
    "pull_request_review_id": 97029934,
    "id": 168628216,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODIxNg==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(CTxDestination dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, add newline.",
    "created_at": "2018-02-15T22:28:21Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628216",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628216"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628216"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628312",
    "pull_request_review_id": 97029934,
    "id": 168628312,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODMxMg==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, `const CScriptID& scriptID`. `{` on new line.",
    "created_at": "2018-02-15T22:28:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628312",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628312"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628312"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 86,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628484",
    "pull_request_review_id": 97029934,
    "id": 168628484,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODQ4NA==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, `const CNoDestination& dest `. `{` on new line.",
    "created_at": "2018-02-15T22:29:33Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628484",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628484"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628484"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628680",
    "pull_request_review_id": 97029934,
    "id": 168628680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODY4MA==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 167,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fix alignment.",
    "created_at": "2018-02-15T22:30:20Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628742",
    "pull_request_review_id": 97029934,
    "id": 168628742,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODc0Mg==",
    "diff_hunk": "@@ -335,6 +334,7 @@ libbitcoin_common_a_SOURCES = \\\n   scheduler.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n+  script/ismine.cpp \\",
    "path": "src/Makefile.am",
    "position": null,
    "original_position": 12,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, sort.",
    "created_at": "2018-02-15T22:30:40Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628742",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628742"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628742"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 337,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628815",
    "pull_request_review_id": 97029934,
    "id": 168628815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyODgxNQ==",
    "diff_hunk": "@@ -389,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\",
    "path": "src/Makefile.am",
    "position": 32,
    "original_position": 20,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why this change? Does the order matter? \ud83d\ude44",
    "created_at": "2018-02-15T22:30:57Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168628815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168628815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 392,
    "original_line": 392,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629284",
    "pull_request_review_id": 97029934,
    "id": 168629284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyOTI4NA==",
    "diff_hunk": "@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(CTxDestination dest);",
    "path": "src/rpc/util.h",
    "position": null,
    "original_position": 18,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`const CTxDestination& dest`.",
    "created_at": "2018-02-15T22:33:08Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629367",
    "pull_request_review_id": 97029934,
    "id": 168629367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyOTM2Nw==",
    "diff_hunk": "@@ -27,6 +27,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/rpcwallet.h>",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, sort.",
    "created_at": "2018-02-15T22:33:26Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629565",
    "pull_request_review_id": 97029934,
    "id": 168629565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYyOTU2NQ==",
    "diff_hunk": "@@ -3515,6 +3516,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, m_wallet, why public?",
    "created_at": "2018-02-15T22:34:14Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168629565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168629565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3521,
    "original_line": 3521,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168630197",
    "pull_request_review_id": 97032313,
    "id": 168630197,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYzMDE5Nw==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, `const CKeyID& keyID`. `{` on new line.",
    "created_at": "2018-02-15T22:37:37Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168630197",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168630197"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168630197"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168630197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638053",
    "pull_request_review_id": 97041335,
    "id": 168638053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYzODA1Mw==",
    "diff_hunk": "@@ -389,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\",
    "path": "src/Makefile.am",
    "position": 32,
    "original_position": 20,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, the order matters",
    "created_at": "2018-02-15T23:17:00Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168638053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168638053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 392,
    "original_line": 392,
    "side": "RIGHT",
    "in_reply_to_id": 168628815
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638222",
    "pull_request_review_id": 97041505,
    "id": 168638222,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODYzODIyMg==",
    "diff_hunk": "@@ -3515,6 +3516,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why not?",
    "created_at": "2018-02-15T23:17:57Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168638222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168638222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168638222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3521,
    "original_line": 3521,
    "side": "RIGHT",
    "in_reply_to_id": 168629565
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640191",
    "pull_request_review_id": 97043692,
    "id": 168640191,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDE5MQ==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(CTxDestination dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:21Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640191",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640191"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640191"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 168628216
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640212",
    "pull_request_review_id": 97043711,
    "id": 168640212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDIxMg==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:26Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 86,
    "side": "RIGHT",
    "in_reply_to_id": 168628312
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640223",
    "pull_request_review_id": 97043729,
    "id": 168640223,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDIyMw==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:30Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 168628484
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640250",
    "pull_request_review_id": 97043754,
    "id": 168640250,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDI1MA==",
    "diff_hunk": "@@ -335,6 +334,7 @@ libbitcoin_common_a_SOURCES = \\\n   scheduler.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n+  script/ismine.cpp \\",
    "path": "src/Makefile.am",
    "position": null,
    "original_position": 12,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:36Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640250",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640250"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640250"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 337,
    "side": "RIGHT",
    "in_reply_to_id": 168628742
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640263",
    "pull_request_review_id": 97043764,
    "id": 168640263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDI2Mw==",
    "diff_hunk": "@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(CTxDestination dest);",
    "path": "src/rpc/util.h",
    "position": null,
    "original_position": 18,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:41Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT",
    "in_reply_to_id": 168629284
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640275",
    "pull_request_review_id": 97043777,
    "id": 168640275,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDI3NQ==",
    "diff_hunk": "@@ -66,3 +66,61 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const {",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:28:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640275",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640275"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640275"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT",
    "in_reply_to_id": 168630197
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640768",
    "pull_request_review_id": 97044338,
    "id": 168640768,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDc2OA==",
    "diff_hunk": "@@ -27,6 +27,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/rpcwallet.h>",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:31:46Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640768",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640768"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640768"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 168629367
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640910",
    "pull_request_review_id": 97044496,
    "id": 168640910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODY0MDkxMA==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 167,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2018-02-15T23:32:33Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168640910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168640910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT",
    "in_reply_to_id": 168628680
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168708875",
    "pull_request_review_id": 97121084,
    "id": 168708875,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcwODg3NQ==",
    "diff_hunk": "@@ -3515,6 +3516,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "ba2cc57065ab38cb6e35fcdfed833d554861ea78",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See `CAffectedKeysVisitor`, `DestinationEncoder` and `CScriptVisitor` with private members. On the other hand `Witnessifier` members are public (could be \"fixed\") .\r\n\r\nIMO all members, by default, should be private. When reading the code it's clear that a private member is not externally accessed/changed.",
    "created_at": "2018-02-16T09:34:40Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168708875",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168708875"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168708875"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168708875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3521,
    "original_line": 3521,
    "side": "RIGHT",
    "in_reply_to_id": 168629565
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709211",
    "pull_request_review_id": 97121458,
    "id": 168709211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcwOTIxMQ==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 65,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space and `{` new line.",
    "created_at": "2018-02-16T09:36:18Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168709211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168709211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3571,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709234",
    "pull_request_review_id": 97121458,
    "id": 168709234,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcwOTIzNA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 75,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space and `{` new line.",
    "created_at": "2018-02-16T09:36:27Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168709234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168709234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168709234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3581,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710297",
    "pull_request_review_id": 97121458,
    "id": 168710297,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxMDI5Nw==",
    "diff_hunk": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const ",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space.",
    "created_at": "2018-02-16T09:41:29Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168710297",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710297"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168710297"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710447",
    "pull_request_review_id": 97121458,
    "id": 168710447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxMDQ0Nw==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space.",
    "created_at": "2018-02-16T09:42:15Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168710447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168710447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168710447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3569,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168711433",
    "pull_request_review_id": 97121458,
    "id": 168711433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxMTQzMw==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"       (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = IsMine(*pwallet, dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    ret.pushKVs(detail);\n+    if (pwallet->mapAddressBook.count(dest)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 188,
    "original_position": 186,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Use find to avoid 2nd lookup below (unless you don't want to touch moved code).",
    "created_at": "2018-02-16T09:46:17Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168711433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168711433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168711433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168711433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3694,
    "original_line": 3694,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713258",
    "pull_request_review_id": 97121458,
    "id": 168713258,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxMzI1OA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fix alignment.",
    "created_at": "2018-02-16T09:53:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168713258",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713258"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168713258"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3648,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713284",
    "pull_request_review_id": 97121458,
    "id": 168713284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxMzI4NA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"       (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fix alignment.",
    "created_at": "2018-02-16T09:53:57Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168713284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168713284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168713284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3649,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714158",
    "pull_request_review_id": 97121458,
    "id": 168714158,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNDE1OA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"   (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"       (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 154,
    "original_position": 152,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Remove period? (my personal preference if to add period on all, currently it's a mix)",
    "created_at": "2018-02-16T09:58:05Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714158",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714158"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714158"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3660,
    "original_line": 3660,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714505",
    "pull_request_review_id": 97121458,
    "id": 168714505,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNDUwNQ==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`*` before space. ",
    "created_at": "2018-02-16T09:59:37Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714505",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714505"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714505"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3567,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714978",
    "pull_request_review_id": 97121458,
    "id": 168714978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNDk3OA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 114,
    "original_position": 112,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, could `AssertLockHeld(pwallet->cs_wallet)`.",
    "created_at": "2018-02-16T10:01:55Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168714978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168714978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3620,
    "original_line": 3620,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715201",
    "pull_request_review_id": 97121458,
    "id": 168715201,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNTIwMQ==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 78,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In this context `pwallet` is valid so:\r\n```cpp\r\nif (pwallet->GetCScript(scriptID, subscript)) {\r\n```",
    "created_at": "2018-02-16T10:02:59Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715201",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715201"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715201"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3586,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715377",
    "pull_request_review_id": 97121458,
    "id": 168715377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNTM3Nw==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In this context `pwallet` is valid so:\r\n```cpp\r\nif (pwallet->GetCScript(scriptID, subscript)) {\r\n```",
    "created_at": "2018-02-16T10:03:44Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3575,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715986",
    "pull_request_review_id": 97121458,
    "id": 168715986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNTk4Ng==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 102,
    "original_position": 100,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless you don't want to touch moved code, remove `hasher` and just do:\r\n```cpp\r\nCRIPEMD160().Write(id.begin(), 32).Finalize(hash.begin());\r\n```",
    "created_at": "2018-02-16T10:06:28Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168715986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168715986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3608,
    "original_line": 3608,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716224",
    "pull_request_review_id": 97121458,
    "id": 168716224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNjIyNA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 103,
    "original_position": 101,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In this context `pwallet` is valid so:\r\n```cpp\r\nif (pwallet->GetCScript(CScriptID(hash), subscript)) {\r\n```",
    "created_at": "2018-02-16T10:07:29Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3609,
    "original_line": 3609,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716665",
    "pull_request_review_id": 97121458,
    "id": 168716665,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNjY2NQ==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {",
    "path": "src/rpc/misc.cpp",
    "position": 226,
    "original_position": 226,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why `!::vpwallets.empty()`? There is alwasy one wallet right?",
    "created_at": "2018-02-16T10:09:48Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716665",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716665"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716665"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 72,
    "original_line": 72,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716770",
    "pull_request_review_id": 97121458,
    "id": 168716770,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNjc3MA==",
    "diff_hunk": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const \n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space.",
    "created_at": "2018-02-16T10:10:15Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716770",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716770"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716770"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 80,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716796",
    "pull_request_review_id": 97121458,
    "id": 168716796,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNjc5Ng==",
    "diff_hunk": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const \n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID &keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`&` before space.",
    "created_at": "2018-02-16T10:10:21Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716796",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716796"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716796"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 88,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716970",
    "pull_request_review_id": 97121458,
    "id": 168716970,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODcxNjk3MA==",
    "diff_hunk": "@@ -3514,6 +3515,207 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 90,
    "original_position": 88,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In this context `pwallet` is valid so:\r\n```cpp\r\nif (pwallet->GetPubKey(CKeyID(id), pubkey)) {\r\n```",
    "created_at": "2018-02-16T10:11:10Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716970",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716970"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168716970"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168716970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3596,
    "original_line": 3596,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168775437",
    "pull_request_review_id": 97200722,
    "id": 168775437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODc3NTQzNw==",
    "diff_hunk": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const ",
    "path": "src/rpc/util.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "travis linter is complaining about trailing whitespace.... I don't know protocol if it matters but just reporting where the complaint is coming from",
    "created_at": "2018-02-16T14:47:35Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168775437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168775437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168775437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168775437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 168710297
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168814990",
    "pull_request_review_id": 97249608,
    "id": 168814990,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODgxNDk5MA==",
    "diff_hunk": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {",
    "path": "src/rpc/misc.cpp",
    "position": 226,
    "original_position": 226,
    "commit_id": "b22cce014852b082d80f1cc35f902b375cba0318",
    "original_commit_id": "baef775c413bf36b327ca8a47362283220e01b3e",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, you can run with `-disablewallet` which will disable wallets and thus `vpwallets` will be empty.",
    "created_at": "2018-02-16T17:07:43Z",
    "updated_at": "2018-02-16T17:09:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168814990",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168814990"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10583#discussion_r168814990"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168814990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 72,
    "original_line": 72,
    "side": "RIGHT",
    "in_reply_to_id": 168716665
  }
]