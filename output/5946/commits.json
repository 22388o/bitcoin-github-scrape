[
  {
    "sha": "1397c71216d92c78355f65ea5a939dd23d186b95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzk3YzcxMjE2ZDkyYzc4MzU1ZjY1ZWE1YTkzOWRkMjNkMTg2Yjk1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:10:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T18:46:58Z"
      },
      "message": "Chainparams: Refactor: Decouple IsSuperMajority from Params()",
      "tree": {
        "sha": "4d5d5990610e31c391f897b27180e7e3859a814e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5d5990610e31c391f897b27180e7e3859a814e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1397c71216d92c78355f65ea5a939dd23d186b95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1397c71216d92c78355f65ea5a939dd23d186b95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1397c71216d92c78355f65ea5a939dd23d186b95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1397c71216d92c78355f65ea5a939dd23d186b95/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f955b9661224adc950e302b42d2f7bcb5e90bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f955b9661224adc950e302b42d2f7bcb5e90bef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f955b9661224adc950e302b42d2f7bcb5e90bef"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 13,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c3baf30389c5396850f727f422f6c0c0a0a135dd",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1397c71216d92c78355f65ea5a939dd23d186b95/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1397c71216d92c78355f65ea5a939dd23d186b95/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1397c71216d92c78355f65ea5a939dd23d186b95",
        "patch": "@@ -44,9 +44,6 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n     int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n-    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n-    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n-    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }"
      },
      {
        "sha": "84623d00cd52f7831f1e1eb1e56e6d058bf442d4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1397c71216d92c78355f65ea5a939dd23d186b95/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1397c71216d92c78355f65ea5a939dd23d186b95/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1397c71216d92c78355f65ea5a939dd23d186b95",
        "patch": "@@ -71,10 +71,9 @@ void EraseOrphansFor(NodeId peer);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n- * and going backwards.\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n  */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired);\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -1731,7 +1730,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n@@ -2552,7 +2551,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -2571,26 +2570,19 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n         return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n-    {\n-        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n-\n-    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n-    {\n-        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n+    for (int i = 2; i <= 3; i++)\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(error(\"%s: rejected nVersion=%d block\", __func__, i-1), \n+                                 REJECT_OBSOLETE, \"bad-version\");\n \n     return true;\n }\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2600,7 +2592,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2701,11 +2693,10 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n {\n-    unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;\n-    for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n     {\n         if (pstart->nVersion >= minVersion)\n             ++nFound;"
      }
    ]
  },
  {
    "sha": "77e1d152788ccf686f9648ca9a339bff88851dc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2UxZDE1Mjc4OGNjZjY4NmY5NjQ4Y2E5YTMzOWJmZjg4ODUxZGM4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-30T11:48:04Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:03:41Z"
      },
      "message": "Consensus: Separate CheckIndexAgainstCheckpoint() from ContextualCheckBlockHeader",
      "tree": {
        "sha": "d992d86f8384a1686596349eaf6ee2f99755f674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d992d86f8384a1686596349eaf6ee2f99755f674"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77e1d152788ccf686f9648ca9a339bff88851dc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e1d152788ccf686f9648ca9a339bff88851dc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77e1d152788ccf686f9648ca9a339bff88851dc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e1d152788ccf686f9648ca9a339bff88851dc8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1397c71216d92c78355f65ea5a939dd23d186b95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1397c71216d92c78355f65ea5a939dd23d186b95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1397c71216d92c78355f65ea5a939dd23d186b95"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 22,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b0cb2f856d30b3d99725a99674735d2ee42c6dce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e1d152788ccf686f9648ca9a339bff88851dc8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e1d152788ccf686f9648ca9a339bff88851dc8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=77e1d152788ccf686f9648ca9a339bff88851dc8",
        "patch": "@@ -2539,17 +2539,28 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const BlockMap& mapBlockIndex)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    uint256 hash = block.GetHash();\n-    if (hash == consensusParams.hashGenesisBlock)\n-        return true;\n-\n     assert(pindexPrev);\n+    if (*pindexPrev->phashBlock == chainparams.GetConsensus().hashGenesisBlock)\n+        return true;\n \n     int nHeight = pindexPrev->nHeight+1;\n+    // Check that the block chain matches the known block chain up to a checkpoint\n+    if (!Checkpoints::CheckBlock(nHeight, *pindexPrev->phashBlock))\n+        return state.DoS(100, false, REJECT_CHECKPOINT, strprintf(\"checkpoint mismatch (height %d)\", nHeight));\n+\n+    // Don't accept any forks from the main chain prior to last checkpoint\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+        return state.DoS(100, false, REJECT_INVALID, strprintf(\"forked-chain-older-checkpoint (height %d)\", nHeight));\n+\n+    return true;\n+}\n \n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n@@ -2560,16 +2571,6 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n-    // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n-\n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n         if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n@@ -2635,6 +2636,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n+        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n         return false;\n@@ -2737,8 +2740,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n \n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     assert(pindexPrev == chainActive.Tip());\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n+        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);"
      }
    ]
  },
  {
    "sha": "09e5ab555ec29fb311b689134855237ad41bb41e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWU1YWI1NTVlYzI5ZmIzMTFiNjg5MTM0ODU1MjM3YWQ0MWJiNDFl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:29:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:03:43Z"
      },
      "message": "Consensus: Create consensus/consensus.h with some constants",
      "tree": {
        "sha": "79c418dc61f95b0d8a1dc09cecb27f5ab6dd5b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79c418dc61f95b0d8a1dc09cecb27f5ab6dd5b4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09e5ab555ec29fb311b689134855237ad41bb41e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e5ab555ec29fb311b689134855237ad41bb41e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09e5ab555ec29fb311b689134855237ad41bb41e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e5ab555ec29fb311b689134855237ad41bb41e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77e1d152788ccf686f9648ca9a339bff88851dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e1d152788ccf686f9648ca9a339bff88851dc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77e1d152788ccf686f9648ca9a339bff88851dc8"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 34,
      "deletions": 17
    },
    "files": [
      {
        "sha": "72d79619b246da4df43a52c31849336f7c17bd04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "f1c1c0ff8bffea7af2a5f44f70d0faf1d8892d85",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -4,18 +4,18 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n-#include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n "
      },
      {
        "sha": "9c5b7d4ffb0ea7179ad0ff6a8c5b2b4688aef144",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+/** The maximum allowed size for a serialized block, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed number of signature check operations in a block (network rule) */\n+static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+static const int COINBASE_MATURITY = 100;\n+/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "a4c34c5345e00c0735206e5be32e35196c1b5944",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -14,9 +14,10 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -53,8 +54,6 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -67,10 +66,6 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */"
      },
      {
        "sha": "c48d8cd508db4bbe928c9ca68d5d0b99bf8e7bbc",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -6,7 +6,7 @@\n #include \"merkleblock.h\"\n \n #include \"hash.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n using namespace std;"
      },
      {
        "sha": "56a2c5828b9ea266657dcfcdfdb1f405c475c6af",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "59f46deb1c420d8aef28a85a0d144a06259d3a18",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -10,9 +10,6 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "721424943551880acc9c9764af65ed605b0e7535",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -10,12 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n-#include \"wallet/db.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7f1db58e5d815e77f517e2bb1399ac7061461a10",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "8398a33f75028ae82e0e85db8ba99f2a5f6f7296",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -5,11 +5,12 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\""
      },
      {
        "sha": "d05e3c6eecc7353f95405b7d4c4bb8d9c9ea9433",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "2d9d22d1d39cde6cc0050d0eec762ad558aa372e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e5ab555ec29fb311b689134855237ad41bb41e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e5ab555ec29fb311b689134855237ad41bb41e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=09e5ab555ec29fb311b689134855237ad41bb41e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      }
    ]
  },
  {
    "sha": "e9fedd95cb28860fbe72c68c26dd0e39f9476915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWZlZGQ5NWNiMjg4NjBmYmU3MmM2OGMyNmRkMGUzOWY5NDc2OTE1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T23:57:14Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:03:43Z"
      },
      "message": "Consensus: Refactor: Decouple CValidationState from main::AbortNode()",
      "tree": {
        "sha": "63ae94fc1d83f4852f503d1097268993676fb59d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63ae94fc1d83f4852f503d1097268993676fb59d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9fedd95cb28860fbe72c68c26dd0e39f9476915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9fedd95cb28860fbe72c68c26dd0e39f9476915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9fedd95cb28860fbe72c68c26dd0e39f9476915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9fedd95cb28860fbe72c68c26dd0e39f9476915/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09e5ab555ec29fb311b689134855237ad41bb41e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e5ab555ec29fb311b689134855237ad41bb41e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09e5ab555ec29fb311b689134855237ad41bb41e"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 27,
      "deletions": 32
    },
    "files": [
      {
        "sha": "af845ebc51213fd9ae83819506455e62ad0f012b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9fedd95cb28860fbe72c68c26dd0e39f9476915/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9fedd95cb28860fbe72c68c26dd0e39f9476915/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e9fedd95cb28860fbe72c68c26dd0e39f9476915",
        "patch": "@@ -1536,6 +1536,24 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     return true;\n }\n \n+/** Abort with a message */\n+bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    strMiscWarning = strMessage;\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+    return false;\n+}\n+\n+bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    AbortNode(strMessage, userMessage);\n+    return state.Error(strMessage);\n+}\n+\n } // anon namespace\n \n /**\n@@ -1815,7 +1833,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(\"Failed to write undo data\");\n+                return AbortNode(state, \"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1828,7 +1846,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(\"Failed to write transaction index\");\n+            return AbortNode(state, \"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -1889,20 +1907,20 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return state.Abort(\"Files to write to block index database\");\n+                return AbortNode(state, \"Files to write to block index database\");\n             }\n         }\n         // Finally flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n-            return state.Abort(\"Failed to write to coin database\");\n+            return AbortNode(state, \"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n             GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error while flushing: \") + e.what());\n+        return AbortNode(state, std::string(\"System error while flushing: \") + e.what());\n     }\n     return true;\n }\n@@ -1959,7 +1977,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(\"Failed to read block\");\n+        return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -2010,7 +2028,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(\"Failed to read block\");\n+            return AbortNode(state, \"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -2686,11 +2704,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(\"Failed to write block\");\n+                AbortNode(state, \"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error: \") + e.what());\n+        return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2765,23 +2783,6 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     return true;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n-    strMiscWarning = strMessage;\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n-        \"\", CClientUIInterface::MSG_ERROR);\n-    StartShutdown();\n-    return false;\n-}\n-\n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n     uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "a9e1dff76b36dc2c367adcc8a624aef82890146d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9fedd95cb28860fbe72c68c26dd0e39f9476915/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9fedd95cb28860fbe72c68c26dd0e39f9476915/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e9fedd95cb28860fbe72c68c26dd0e39f9476915",
        "patch": "@@ -183,8 +183,6 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Abort with a message */\n-bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n@@ -449,10 +447,6 @@ class CValidationState {\n         mode = MODE_ERROR;\n         return false;\n     }\n-    bool Abort(const std::string &msg) {\n-        AbortNode(msg);\n-        return Error(msg);\n-    }\n     bool IsValid() const {\n         return mode == MODE_VALID;\n     }"
      }
    ]
  },
  {
    "sha": "64df4c6d5635935c0a1e0220a972e87d088c3241",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGRmNGM2ZDU2MzU5MzVjMGExZTAyMjBhOTcyZTg3ZDA4OGMzMjQx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:57:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:03:43Z"
      },
      "message": "Consensus: MOVEONLY: Move CValidationState from main consensus/validation",
      "tree": {
        "sha": "a9a92a57fcd1edfd23029c1d73cddbd698c81a42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a92a57fcd1edfd23029c1d73cddbd698c81a42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64df4c6d5635935c0a1e0220a972e87d088c3241",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64df4c6d5635935c0a1e0220a972e87d088c3241",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64df4c6d5635935c0a1e0220a972e87d088c3241",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64df4c6d5635935c0a1e0220a972e87d088c3241/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9fedd95cb28860fbe72c68c26dd0e39f9476915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9fedd95cb28860fbe72c68c26dd0e39f9476915",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9fedd95cb28860fbe72c68c26dd0e39f9476915"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "580fc6549ac0f740fdb85e77182b974fd1602d1b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "c92bec4fae5a8db11e3a0fc3adbf406ad1ed061f",
        "filename": "src/consensus/validation.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VALIDATION_H\n+#define BITCOIN_CONSENSUS_VALIDATION_H\n+\n+#include <string>\n+\n+/** \"reject\" message codes */\n+static const unsigned char REJECT_MALFORMED = 0x01;\n+static const unsigned char REJECT_INVALID = 0x10;\n+static const unsigned char REJECT_OBSOLETE = 0x11;\n+static const unsigned char REJECT_DUPLICATE = 0x12;\n+static const unsigned char REJECT_NONSTANDARD = 0x40;\n+static const unsigned char REJECT_DUST = 0x41;\n+static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static const unsigned char REJECT_CHECKPOINT = 0x43;\n+\n+/** Capture information about block/transaction validation */\n+class CValidationState {\n+private:\n+    enum mode_state {\n+        MODE_VALID,   //! everything ok\n+        MODE_INVALID, //! network rule violation (DoS value may be set)\n+        MODE_ERROR,   //! run-time error\n+    } mode;\n+    int nDoS;\n+    std::string strRejectReason;\n+    unsigned char chRejectCode;\n+    bool corruptionPossible;\n+public:\n+    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n+    bool DoS(int level, bool ret = false,\n+             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool corruptionIn=false) {\n+        chRejectCode = chRejectCodeIn;\n+        strRejectReason = strRejectReasonIn;\n+        corruptionPossible = corruptionIn;\n+        if (mode == MODE_ERROR)\n+            return ret;\n+        nDoS += level;\n+        mode = MODE_INVALID;\n+        return ret;\n+    }\n+    bool Invalid(bool ret = false,\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+    }\n+    bool Error(std::string strRejectReasonIn=\"\") {\n+        if (mode == MODE_VALID)\n+            strRejectReason = strRejectReasonIn;\n+        mode = MODE_ERROR;\n+        return false;\n+    }\n+    bool IsValid() const {\n+        return mode == MODE_VALID;\n+    }\n+    bool IsInvalid() const {\n+        return mode == MODE_INVALID;\n+    }\n+    bool IsError() const {\n+        return mode == MODE_ERROR;\n+    }\n+    bool IsInvalid(int &nDoSOut) const {\n+        if (IsInvalid()) {\n+            nDoSOut = nDoS;\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool CorruptionPossible() const {\n+        return corruptionPossible;\n+    }\n+    unsigned char GetRejectCode() const { return chRejectCode; }\n+    std::string GetRejectReason() const { return strRejectReason; }\n+};\n+\n+#endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "59d6805e30fd5c2d030936b495649d4e5dfc3f09",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\""
      },
      {
        "sha": "7120474fe5867ab378558e07c08a2f584346d238",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -11,6 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "f2bc8959e0e56a11c51ee88c007343737879f2ae",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -87,16 +87,6 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n \n-/** \"reject\" message codes */\n-static const unsigned char REJECT_MALFORMED = 0x01;\n-static const unsigned char REJECT_INVALID = 0x10;\n-static const unsigned char REJECT_OBSOLETE = 0x11;\n-static const unsigned char REJECT_DUPLICATE = 0x12;\n-static const unsigned char REJECT_NONSTANDARD = 0x40;\n-static const unsigned char REJECT_DUST = 0x41;\n-static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n-static const unsigned char REJECT_CHECKPOINT = 0x43;\n-\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n@@ -411,65 +401,6 @@ class CBlockFileInfo\n      }\n };\n \n-/** Capture information about block/transaction validation */\n-class CValidationState {\n-private:\n-    enum mode_state {\n-        MODE_VALID,   //! everything ok\n-        MODE_INVALID, //! network rule violation (DoS value may be set)\n-        MODE_ERROR,   //! run-time error\n-    } mode;\n-    int nDoS;\n-    std::string strRejectReason;\n-    unsigned char chRejectCode;\n-    bool corruptionPossible;\n-public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n-        chRejectCode = chRejectCodeIn;\n-        strRejectReason = strRejectReasonIn;\n-        corruptionPossible = corruptionIn;\n-        if (mode == MODE_ERROR)\n-            return ret;\n-        nDoS += level;\n-        mode = MODE_INVALID;\n-        return ret;\n-    }\n-    bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n-    }\n-    bool Error(std::string strRejectReasonIn=\"\") {\n-        if (mode == MODE_VALID)\n-            strRejectReason = strRejectReasonIn;\n-        mode = MODE_ERROR;\n-        return false;\n-    }\n-    bool IsValid() const {\n-        return mode == MODE_VALID;\n-    }\n-    bool IsInvalid() const {\n-        return mode == MODE_INVALID;\n-    }\n-    bool IsError() const {\n-        return mode == MODE_ERROR;\n-    }\n-    bool IsInvalid(int &nDoSOut) const {\n-        if (IsInvalid()) {\n-            nDoSOut = nDoS;\n-            return true;\n-        }\n-        return false;\n-    }\n-    bool CorruptionPossible() const {\n-        return corruptionPossible;\n-    }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:"
      },
      {
        "sha": "1d24cf3a76b22ec20e5e6e9a80f5b90c80214539",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -8,6 +8,7 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "148409c1f65bcf1ac3adc8e6bb18fe36ed1263a7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n #include \"util.h\""
      },
      {
        "sha": "ae2198b57a6cde018d9030964a95db6daa608ce1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "378418f83f109c36e4a267a61eafb13d7ddcddaa",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -4,12 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "51530c4de5a02873c1df19cff4c35d927f76a9d4",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -2,16 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Unit tests for block.CheckBlock()\n-//\n-\n-\n-\n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n-#include \"utiltime.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n \n #include <cstdio>\n "
      },
      {
        "sha": "08993b58c0623c2f56b8fa720a2f5a9a25a1e617",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\""
      },
      {
        "sha": "87be2217c456fd2916724a5ab6a9636c985e37f4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -2,15 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"main.h\"\n #include \"random.h\"\n-#include \"serialize.h\"\n-#include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"util.h\"\n #include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n "
      },
      {
        "sha": "d12535e43854bbafa1342878689ee60e4f63247c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -7,12 +7,13 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"core_io.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "d7c555a8c197816d2bb1f62045f3231997dd85ca",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "2a1d663672abb21bc26fc5ee8e198b0eef2c0042",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -9,6 +9,7 @@\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "d16e7825d60b2796f2e0280b880a42e586d06f8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64df4c6d5635935c0a1e0220a972e87d088c3241/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64df4c6d5635935c0a1e0220a972e87d088c3241/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=64df4c6d5635935c0a1e0220a972e87d088c3241",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\""
      }
    ]
  },
  {
    "sha": "b9d53adfada171ef2fcfe3518d115b97240c2a57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWQ1M2FkZmFkYTE3MWVmMmZjZmUzNTE4ZDExNWI5NzI0MGMyYTU3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T10:36:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:03:43Z"
      },
      "message": "Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast into independent function",
      "tree": {
        "sha": "928b4e053654c2516cbbd6b08cea9a06f5bbbf20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/928b4e053654c2516cbbd6b08cea9a06f5bbbf20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9d53adfada171ef2fcfe3518d115b97240c2a57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d53adfada171ef2fcfe3518d115b97240c2a57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d53adfada171ef2fcfe3518d115b97240c2a57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d53adfada171ef2fcfe3518d115b97240c2a57/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64df4c6d5635935c0a1e0220a972e87d088c3241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64df4c6d5635935c0a1e0220a972e87d088c3241",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64df4c6d5635935c0a1e0220a972e87d088c3241"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "44fd584b8d2815e72d06fb1352958e66acebabde",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -176,6 +176,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/blockverify.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "56482920f32d2ff1cb27acf5bb8e5704e6789bc2",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -227,22 +227,6 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n-    enum { nMedianTimeSpan=11 };\n-\n-    int64_t GetMedianTimePast() const\n-    {\n-        int64_t pmedian[nMedianTimeSpan];\n-        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n-        int64_t* pend = &pmedian[nMedianTimeSpan];\n-\n-        const CBlockIndex* pindex = this;\n-        for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n-            *(--pbegin) = pindex->GetBlockTime();\n-\n-        std::sort(pbegin, pend);\n-        return pbegin[(pend - pbegin)/2];\n-    }\n-\n     std::string ToString() const\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\","
      },
      {
        "sha": "947411dd29f38450df8f8cc30a19cbf7c104762f",
        "filename": "src/consensus/blockverify.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"chain.h\"\n+\n+#include <algorithm>  \n+\n+static const unsigned int MEDIAN_TIME_SPAN = 11;\n+\n+int64_t GetMedianTimePast(const CBlockIndex* pindex)\n+{\n+    int64_t pmedian[MEDIAN_TIME_SPAN];\n+    int64_t* pbegin = &pmedian[MEDIAN_TIME_SPAN];\n+    int64_t* pend = &pmedian[MEDIAN_TIME_SPAN];\n+\n+    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = pindex->pprev)\n+        *(--pbegin) = (int64_t)pindex->nTime;\n+\n+    std::sort(pbegin, pend);\n+    return pbegin[(pend - pbegin)/2];\n+}"
      },
      {
        "sha": "dd4460e8d3e4b0f6c19230d07071bb97a55b86aa",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -6,6 +6,10 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdint.h>\n+\n+class CBlockIndex;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n@@ -15,4 +19,8 @@ static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n+/** Block header validation utility functions */\n+\n+int64_t GetMedianTimePast(const CBlockIndex* pindex);\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "3af19ed6cc4d8a2cd917f5479bafc0f4fa796aec",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -2586,7 +2586,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n "
      },
      {
        "sha": "87a40456e287104fc443b57aabc233a40dfaab8a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -83,7 +83,7 @@ class TxPriorityCompare\n \n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    pblock->nTime = std::max(GetMedianTimePast(pindexPrev)+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)"
      },
      {
        "sha": "a08c57fa7d9be59291c30f98c4e8bb9a06fe204b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -575,7 +575,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n+    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev)+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));"
      },
      {
        "sha": "981d3e623d98846ab7f5d74f8206eb9fb5faf024",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d53adfada171ef2fcfe3518d115b97240c2a57/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -72,7 +73,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nTime = GetMedianTimePast(chainActive.Tip())+1;\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -212,7 +213,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight = nHeight;\n \n     // non-final txs in mempool\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip())+1);\n \n     // height locked\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -234,7 +235,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout.resize(1);\n     tx2.vout[0].nValue = 4900000000LL;\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    tx2.nLockTime = GetMedianTimePast(chainActive.Tip())+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n@@ -247,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // However if we advance height and time by one, both will.\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip())+2);\n \n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));"
      }
    ]
  },
  {
    "sha": "f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTM3YzU2ZTg1YjJmNGMwMmQxMWFjMmZmNmFiYTc5NzMxYjI1Mzdm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T11:05:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: Consensus version of pow functions",
      "tree": {
        "sha": "930377e5f7e77c5c2d7b92b108ffccd2aa7abc0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/930377e5f7e77c5c2d7b92b108ffccd2aa7abc0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d53adfada171ef2fcfe3518d115b97240c2a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d53adfada171ef2fcfe3518d115b97240c2a57"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 50,
      "deletions": 50
    },
    "files": [
      {
        "sha": "dc18ac0d1d7c0011e81e1f981158e8ed516980e4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -6,8 +6,11 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"consensus/params.h\"\n+\n #include <stdint.h>\n \n+class CBlockHeader;\n class CBlockIndex;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n@@ -22,5 +25,9 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n /** Block header validation utility functions */\n \n int64_t GetMedianTimePast(const CBlockIndex* pindex);\n+unsigned int GetNextWorkRequired(const CBlockIndex*, const CBlockHeader*, const Consensus::Params&);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "ab4192d0aee2e91830e35c7e8d68b68a55098d47",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -87,11 +87,12 @@ void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams,\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+        pblock->nBits = GetNextWorkRequiredLog(pindexPrev, pblock, consensusParams);\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -100,7 +101,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -328,8 +329,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequiredLog(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "d2c11a2da34fd392a01a38aaada9cafdc08d15f5",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -7,11 +7,26 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/consensus.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+{\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, params);\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n+    arith_uint256 bnNew, bnOld;\n+    bnNew.SetCompact(nextChallenge);\n+    bnOld.SetCompact(pindexLast->nBits);    \n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", nextChallenge, bnNew.ToString());\n+    return nextChallenge;\n+}\n+\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n     unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n@@ -27,7 +42,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n+            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n@@ -42,19 +57,18 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n-    assert(nHeightFirst >= 0);\n-    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n+    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n         nActualTimespan = params.nPowTargetTimespan/4;\n     if (nActualTimespan > params.nPowTargetTimespan*4)\n@@ -72,12 +86,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     if (bnNew > bnPowLimit)\n         bnNew = bnPowLimit;\n \n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n     return bnNew.GetCompact();\n }\n \n@@ -91,11 +99,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+        return false; // nBits below minimum work\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n+        return false; // hash doesn't match nBits\n \n     return true;\n }"
      },
      {
        "sha": "ac3ec8d6c1f0a480b5321360afa9e4ccca4d25ab",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -12,14 +12,9 @@\n \n class CBlockHeader;\n class CBlockIndex;\n-class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+unsigned int GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "6abafc3357b2e3a78a3c2c7e2fc4a6705f4a7635",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -12,7 +12,6 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "032d2656160f06fddd1b843a00a26a386401aad0",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -7,11 +7,11 @@\n //\n \n \n-\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "271914c48d58ff0035effdc094d109f2f17cdf90",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n-#include \"pow.h\"\n-#include \"util.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -13,60 +13,50 @@ using namespace std;\n \n BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n+static const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c8259d5519a7d6062a02f7e8b4ffcdf245686afc",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f537c56e85b2f4c02d11ac2ff6aba79731b2537f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "patch": "@@ -5,10 +5,10 @@\n \n #include \"txdb.h\"\n \n+#include \"consensus/consensus.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "46cc312fc0941b37c9bb3682af620c703614069a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmNjMzEyZmMwOTQxYjM3YzliYjM2ODJhZjYyMGM3MDM2MTQwNjlh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T11:05:23Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: Refactor: Consensus version of CheckBlockHeader()",
      "tree": {
        "sha": "afd375505e8bcc6026fcc17a976c098fbbae3dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afd375505e8bcc6026fcc17a976c098fbbae3dbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46cc312fc0941b37c9bb3682af620c703614069a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cc312fc0941b37c9bb3682af620c703614069a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46cc312fc0941b37c9bb3682af620c703614069a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cc312fc0941b37c9bb3682af620c703614069a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f537c56e85b2f4c02d11ac2ff6aba79731b2537f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f537c56e85b2f4c02d11ac2ff6aba79731b2537f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 24,
      "deletions": 14
    },
    "files": [
      {
        "sha": "7103b82ba1ab361985bd3041c879572484a6b289",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cc312fc0941b37c9bb3682af620c703614069a/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cc312fc0941b37c9bb3682af620c703614069a/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=46cc312fc0941b37c9bb3682af620c703614069a",
        "patch": "@@ -12,6 +12,7 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CValidationState;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n@@ -22,6 +23,19 @@ static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/** Block header validation functions */\n+\n+bool CheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, bool fCheckPOW = true);\n+\n+} // namespace Consensus\n+\n /** Block header validation utility functions */\n \n int64_t GetMedianTimePast(const CBlockIndex* pindex);"
      },
      {
        "sha": "358330d42e311f025fe9759655a955449296380b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cc312fc0941b37c9bb3682af620c703614069a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cc312fc0941b37c9bb3682af620c703614069a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=46cc312fc0941b37c9bb3682af620c703614069a",
        "patch": "@@ -2483,29 +2483,26 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n-        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n-                         REJECT_INVALID, \"high-hash\");\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time-too-new\");\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n \n     return true;\n }\n \n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    // These are checks that are independent of context.\n-\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, state, consensusParams, GetAdjustedTime(), fCheckPOW))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n@@ -2642,8 +2639,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         return true;\n     }\n \n-    if (!CheckBlockHeader(block, state))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;"
      },
      {
        "sha": "1d0286c4ec0525ca2f7d078765c941bfc552b388",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cc312fc0941b37c9bb3682af620c703614069a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cc312fc0941b37c9bb3682af620c703614069a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=46cc312fc0941b37c9bb3682af620c703614069a",
        "patch": "@@ -331,7 +331,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */"
      }
    ]
  },
  {
    "sha": "0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGYzYmFmMjdkY2IzYTM2Y2U0MGQ5ZDVlNGM2ODUyNzI5M2EyMDcz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T10:44:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: Refactor: Consensus version of ContextualCheckBlockHeader()",
      "tree": {
        "sha": "26c3482acf3a08583c15c193227a6210a9e35450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26c3482acf3a08583c15c193227a6210a9e35450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46cc312fc0941b37c9bb3682af620c703614069a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cc312fc0941b37c9bb3682af620c703614069a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46cc312fc0941b37c9bb3682af620c703614069a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 9,
      "deletions": 13
    },
    "files": [
      {
        "sha": "bb155d08ddd61f842f5d93caf286287e4a2e6a67",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
        "patch": "@@ -33,6 +33,7 @@ namespace Consensus {\n /** Block header validation functions */\n \n bool CheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, bool fCheckPOW = true);\n+bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, const CBlockIndex*);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "d0fd7b9f0e9ee151eb1e9e94c25f8d9a60a34086",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
        "patch": "@@ -2574,24 +2574,20 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n-                         REJECT_INVALID, \"bad-diffbits\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n-        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n-                             REJECT_INVALID, \"time-too-old\");\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n         if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(error(\"%s: rejected nVersion=%d block\", __func__, i-1), \n-                                 REJECT_OBSOLETE, \"bad-version\");\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n \n     return true;\n }\n@@ -2655,8 +2651,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n         return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n@@ -2768,8 +2764,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return false;\n     if (!ContextualCheckBlock(block, state, pindexPrev))"
      },
      {
        "sha": "e55975d3d954b49392088a3208b43f5ac74c5fcf",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df3baf27dcb3a36ce40d9d5e4c68527293a2073/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
        "patch": "@@ -334,7 +334,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */"
      }
    ]
  },
  {
    "sha": "fa71dfc90aaa09be4decb201b94405c64c908e9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTcxZGZjOTBhYWEwOWJlNGRlY2IyMDFiOTQ0MDVjNjRjOTA4ZTll",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-31T22:45:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: MOVEONLY: Move to consensus.cpp:\n\nfrom main.cpp:\nCheckBlockHeader, IsSuperMajority, ContextualCheckBlockHeader\n\nfrom miner.cpp\nGetNextWorkRequired, CalculateNextWorkRequired, CheckProofOfWork",
      "tree": {
        "sha": "85615df891f29a1f673b31bcbab9993141f15123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85615df891f29a1f673b31bcbab9993141f15123"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa71dfc90aaa09be4decb201b94405c64c908e9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa71dfc90aaa09be4decb201b94405c64c908e9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa71dfc90aaa09be4decb201b94405c64c908e9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa71dfc90aaa09be4decb201b94405c64c908e9e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df3baf27dcb3a36ce40d9d5e4c68527293a2073",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df3baf27dcb3a36ce40d9d5e4c68527293a2073"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 134,
      "deletions": 131
    },
    "files": [
      {
        "sha": "54ea0c22c9d0e7f0052f1352d3f5086ae526cf57",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -5,12 +5,98 @@\n \n #include \"consensus/consensus.h\"\n \n+#include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/block.h\"\n+#include \"tinyformat.h\"\n \n #include <algorithm>  \n \n static const unsigned int MEDIAN_TIME_SPAN = 11;\n \n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+{\n+    uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n+\n+    // Genesis block\n+    if (pindexLast == NULL)\n+        return nProofOfWorkLimit;\n+\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    {\n+        if (params.fPowAllowMinDifficultyBlocks)\n+        {\n+            // Special difficulty rule for testnet:\n+            // If the new block's timestamp is more than 2* 10 minutes\n+            // then allow mining of a min-difficulty block.\n+            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n+                return nProofOfWorkLimit;\n+            else\n+            {\n+                // Return the last non-special-min-difficulty-rules-block\n+                const CBlockIndex* pindex = pindexLast;\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = pindex->pprev;\n+                return pindex->nBits;\n+            }\n+        }\n+        return pindexLast->nBits;\n+    }\n+\n+    // Go back by what we want to be 14 days worth of blocks\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n+    assert(pindexFirst);\n+\n+    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n+}\n+\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+{\n+    // Limit adjustment step\n+    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n+\n+    // Retarget\n+    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n+    arith_uint256 bnNew;\n+    arith_uint256 bnOld;\n+    bnNew.SetCompact(pindexLast->nBits);\n+    bnOld = bnNew;\n+    bnNew *= nActualTimespan;\n+    bnNew /= params.nPowTargetTimespan;\n+\n+    if (bnNew > bnPowLimit)\n+        bnNew = bnPowLimit;\n+\n+    return bnNew.GetCompact();\n+}\n+\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+{\n+    bool fNegative;\n+    bool fOverflow;\n+    arith_uint256 bnTarget;\n+\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+\n+    // Check range\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n+        return false; // nBits below minimum work\n+\n+    // Check proof of work matches claimed amount\n+    if (UintToArith256(hash) > bnTarget)\n+        return false; // hash doesn't match nBits\n+\n+    return true;\n+}\n+\n int64_t GetMedianTimePast(const CBlockIndex* pindex)\n {\n     int64_t pmedian[MEDIAN_TIME_SPAN];\n@@ -23,3 +109,46 @@ int64_t GetMedianTimePast(const CBlockIndex* pindex)\n     std::sort(pbegin, pend);\n     return pbegin[(pend - pbegin)/2];\n }\n+\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n+{\n+    // Check proof of work matches claimed amount\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n+\n+    // Check timestamp\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n+\n+    return true;\n+}\n+\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+{\n+    // Check proof of work\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n+\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n+    for (int i = 2; i <= 3; i++)\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n+\n+    return true;\n+}"
      },
      {
        "sha": "6ab3dbaf9a5d0d703aba166d65cea56b9ce8fe7b",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -44,5 +44,10 @@ unsigned int GetNextWorkRequired(const CBlockIndex*, const CBlockHeader*, const\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "7c9e87a9aa925bc84712697a95120001dfc4da58",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 49,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -70,11 +70,6 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2483,19 +2478,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n-{\n-    // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n-\n-    // Check timestamp\n-    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n-\n-    return true;\n-}\n-\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n@@ -2574,24 +2556,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n-{\n-    // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n-\n-    // Check timestamp against prev\n-    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n-    for (int i = 2; i <= 3; i++)\n-        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n-\n-    return true;\n-}\n-\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n@@ -2708,19 +2672,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks"
      },
      {
        "sha": "baf9e9fa70a1947ca50414764c4d85e32d1b7328",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 82,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -26,88 +26,6 @@ uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeade\n     return nextChallenge;\n }\n \n-uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n-{\n-    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n-\n-    // Genesis block\n-    if (pindexLast == NULL)\n-        return nProofOfWorkLimit;\n-\n-    // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n-    {\n-        if (params.fPowAllowMinDifficultyBlocks)\n-        {\n-            // Special difficulty rule for testnet:\n-            // If the new block's timestamp is more than 2* 10 minutes\n-            // then allow mining of a min-difficulty block.\n-            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n-                return nProofOfWorkLimit;\n-            else\n-            {\n-                // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n-                return pindex->nBits;\n-            }\n-        }\n-        return pindexLast->nBits;\n-    }\n-\n-    // Go back by what we want to be 14 days worth of blocks\n-    const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n-        pindexFirst = pindexFirst->pprev;\n-    assert(pindexFirst);\n-\n-    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n-}\n-\n-uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n-{\n-    // Limit adjustment step\n-    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n-    if (nActualTimespan < params.nPowTargetTimespan/4)\n-        nActualTimespan = params.nPowTargetTimespan/4;\n-    if (nActualTimespan > params.nPowTargetTimespan*4)\n-        nActualTimespan = params.nPowTargetTimespan*4;\n-\n-    // Retarget\n-    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n-    arith_uint256 bnNew;\n-    arith_uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n-    bnOld = bnNew;\n-    bnNew *= nActualTimespan;\n-    bnNew /= params.nPowTargetTimespan;\n-\n-    if (bnNew > bnPowLimit)\n-        bnNew = bnPowLimit;\n-\n-    return bnNew.GetCompact();\n-}\n-\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n-{\n-    bool fNegative;\n-    bool fOverflow;\n-    arith_uint256 bnTarget;\n-\n-    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\n-    // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return false; // nBits below minimum work\n-\n-    // Check proof of work matches claimed amount\n-    if (UintToArith256(hash) > bnTarget)\n-        return false; // hash doesn't match nBits\n-\n-    return true;\n-}\n-\n arith_uint256 GetBlockProof(const CBlockIndex& block)\n {\n     arith_uint256 bnTarget;"
      }
    ]
  },
  {
    "sha": "d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWE4YWI0ZGI3OWJjNTdiNTc4YzA2NDg5ZjNkM2ViZWFlMzJiNzJl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-06T14:27:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: Cleanup: Destroy pow.o and turn its remaining into static functions in main.cpp and miner.cpp",
      "tree": {
        "sha": "c0f197da3e148eb6e8873c55586c9ab6d6ff4da0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0f197da3e148eb6e8873c55586c9ab6d6ff4da0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa71dfc90aaa09be4decb201b94405c64c908e9e"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 29,
      "deletions": 67
    },
    "files": [
      {
        "sha": "a1c34da05fbea214e1dbcdb403dec61dc67c442a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "patch": "@@ -107,7 +107,6 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n-  pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   protocol.h \\\n@@ -184,7 +183,6 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n-  pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\"
      },
      {
        "sha": "04e7e0d1f162cdc16d20f9033130d26fa72ee7ee",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"arith_uint256.h\"\n #include \"primitives/block.h\"\n-#include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "e62ed489638a1b9d239d1b68836fbbf873adfd34",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "patch": "@@ -15,7 +15,6 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -1201,6 +1200,21 @@ bool IsInitialBlockDownload()\n     return state;\n }\n \n+static arith_uint256 GetBlockProof(const CBlockIndex& block)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    if (fNegative || fOverflow || bnTarget == 0)\n+        return 0;\n+    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+    // or ~bnTarget / (nTarget+1) + 1.\n+    return (~bnTarget / (bnTarget + 1)) + 1;\n+}\n+\n bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;"
      },
      {
        "sha": "c2cf79fae8c7063fccb2bc1807359e526a66ec3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "patch": "@@ -12,7 +12,6 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -81,6 +80,20 @@ class TxPriorityCompare\n     }\n };\n \n+uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& consensusParams)\n+{\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams);\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n+    arith_uint256 bnNew, bnOld;\n+    bnNew.SetCompact(nextChallenge);\n+    bnOld.SetCompact(pindexLast->nBits);    \n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", nextChallenge, bnNew.ToString());\n+    return nextChallenge;\n+}\n+\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     pblock->nTime = std::max(GetMedianTimePast(pindexPrev)+1, GetAdjustedTime());"
      },
      {
        "sha": "baf9e9fa70a1947ca50414764c4d85e32d1b7328",
        "filename": "src/pow.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -1,42 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"pow.h\"\n-\n-#include \"arith_uint256.h\"\n-#include \"chain.h\"\n-#include \"consensus/consensus.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-\n-uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n-{\n-    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, params);\n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n-    arith_uint256 bnNew, bnOld;\n-    bnNew.SetCompact(nextChallenge);\n-    bnOld.SetCompact(pindexLast->nBits);    \n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", nextChallenge, bnNew.ToString());\n-    return nextChallenge;\n-}\n-\n-arith_uint256 GetBlockProof(const CBlockIndex& block)\n-{\n-    arith_uint256 bnTarget;\n-    bool fNegative;\n-    bool fOverflow;\n-    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n-    if (fNegative || fOverflow || bnTarget == 0)\n-        return 0;\n-    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n-    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n-    return (~bnTarget / (bnTarget + 1)) + 1;\n-}"
      },
      {
        "sha": "ac3ec8d6c1f0a480b5321360afa9e4ccca4d25ab",
        "filename": "src/pow.h",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa71dfc90aaa09be4decb201b94405c64c908e9e/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=fa71dfc90aaa09be4decb201b94405c64c908e9e",
        "patch": "@@ -1,20 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_POW_H\n-#define BITCOIN_POW_H\n-\n-#include \"consensus/params.h\"\n-\n-#include <stdint.h>\n-\n-class CBlockHeader;\n-class CBlockIndex;\n-class arith_uint256;\n-\n-unsigned int GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-arith_uint256 GetBlockProof(const CBlockIndex& block);\n-\n-#endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "8c4c0d9293b1282a331e374dcf4780e150a89223",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzRjMGQ5MjkzYjEyODJhMzMxZTM3NGRjZjQ3ODBlMTUwYTg5MjIz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T12:53:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyBlockHeader()",
      "tree": {
        "sha": "405919020520fc45f15d39bbfc50b564a1c7d67c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/405919020520fc45f15d39bbfc50b564a1c7d67c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c4c0d9293b1282a331e374dcf4780e150a89223",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4c0d9293b1282a331e374dcf4780e150a89223",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4c0d9293b1282a331e374dcf4780e150a89223",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4c0d9293b1282a331e374dcf4780e150a89223/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a8ab4db79bc57b578c06489f3d3ebeae32b72e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "560721703aaccd38497b8ce388d63cbbbabdf6e8",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4c0d9293b1282a331e374dcf4780e150a89223/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4c0d9293b1282a331e374dcf4780e150a89223/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=8c4c0d9293b1282a331e374dcf4780e150a89223",
        "patch": "@@ -152,3 +152,12 @@ bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidatio\n \n     return true;\n }\n+\n+bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev)\n+{\n+    if (!Consensus::CheckBlockHeader(block, state, params, nTime, true))\n+        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev))\n+        return false;\n+    return true;\n+}"
      },
      {
        "sha": "085f14080a04aee69f2ffd6fe4ffbeb67e96a763",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4c0d9293b1282a331e374dcf4780e150a89223/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4c0d9293b1282a331e374dcf4780e150a89223/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=8c4c0d9293b1282a331e374dcf4780e150a89223",
        "patch": "@@ -32,6 +32,7 @@ namespace Consensus {\n \n /** Block header validation functions */\n \n+bool VerifyBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, CBlockIndex*);\n bool CheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, bool fCheckPOW = true);\n bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, const CBlockIndex*);\n "
      }
    ]
  },
  {
    "sha": "d850a6bc88dee8afb9fa751daaab62600adcb81c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODUwYTZiYzg4ZGVlOGFmYjlmYTc1MWRhYWFiNjI2MDBhZGNiODFj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-06T11:21:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: API proposal for Consensus::VerifyBlockHeader()",
      "tree": {
        "sha": "a0c110c786783ed4fe7e6f680cf9865fe7ae2a48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0c110c786783ed4fe7e6f680cf9865fe7ae2a48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d850a6bc88dee8afb9fa751daaab62600adcb81c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d850a6bc88dee8afb9fa751daaab62600adcb81c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d850a6bc88dee8afb9fa751daaab62600adcb81c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d850a6bc88dee8afb9fa751daaab62600adcb81c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c4c0d9293b1282a331e374dcf4780e150a89223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4c0d9293b1282a331e374dcf4780e150a89223",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4c0d9293b1282a331e374dcf4780e150a89223"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 79,
      "deletions": 52
    },
    "files": [
      {
        "sha": "b78cb2d3ad27be2f4cf1e57b8b49fc10d2ccc114",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/types.h \\\n   consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "a2eb985891a180bfc3789794749cca19c2cc0989",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -106,3 +106,8 @@ void CBlockIndex::BuildSkip()\n     if (pprev)\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n+\n+const CBlockIndexBase* GetPrevIndex(const CBlockIndexBase* pindex)\n+{\n+    return ((CBlockIndex*)pindex)->pprev;\n+}"
      },
      {
        "sha": "c06110cdc782a8572431aa598805659f21bd9bdb",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CHAIN_H\n \n #include \"arith_uint256.h\"\n+#include \"consensus/types.h\"\n #include \"primitives/block.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n@@ -93,12 +94,18 @@ enum BlockStatus {\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n };\n \n+/**\n+ * This getter is used by in bitcoin core when a PrevIndexGetter\n+ * function pointer is needed in consensus checks. \n+ */\n+const CBlockIndexBase* GetPrevIndex(const CBlockIndexBase* pindex);\n+\n /** The block chain is a tree shaped structure starting with the\n  * genesis block at the root, with each block potentially having multiple\n  * candidates to be the next block. A blockindex may have multiple pprev pointing\n  * to it, but at most one of them can be part of the currently active branch.\n  */\n-class CBlockIndex\n+class CBlockIndex : public CBlockIndexBase\n {\n public:\n     //! pointer to the hash of the block, if any. Memory is owned by this CBlockIndex\n@@ -110,9 +117,6 @@ class CBlockIndex\n     //! pointer to the index of some further predecessor of this block\n     CBlockIndex* pskip;\n \n-    //! height of the entry in the chain. The genesis block has height 0\n-    int nHeight;\n-\n     //! Which # file this block is stored in (blk?????.dat)\n     int nFile;\n \n@@ -137,13 +141,6 @@ class CBlockIndex\n     //! Verification status of this block. See enum BlockStatus\n     unsigned int nStatus;\n \n-    //! block header\n-    int nVersion;\n-    uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n-\n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     uint32_t nSequenceId;\n "
      },
      {
        "sha": "9db139c942461a7f239a3e6ae9c06f6c284bd078",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -6,7 +6,6 @@\n #include \"consensus/consensus.h\"\n \n #include \"arith_uint256.h\"\n-#include \"chain.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n #include \"tinyformat.h\"\n@@ -15,7 +14,7 @@\n \n static const unsigned int MEDIAN_TIME_SPAN = 11;\n \n-uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+uint32_t GetNextWorkRequired(const CBlockIndexBase* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params, PrevIndexGetter indexGetter)\n {\n     uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n@@ -36,25 +35,25 @@ uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n+                const CBlockIndexBase* pindex = pindexLast;\n+                while (indexGetter(pindex) && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = indexGetter(pindex);\n                 return pindex->nBits;\n             }\n         }\n         return pindexLast->nBits;\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    const CBlockIndex* pindexFirst = pindexLast;\n+    const CBlockIndexBase* pindexFirst = pindexLast;\n     for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n-        pindexFirst = pindexFirst->pprev;\n+        pindexFirst = indexGetter(pindexFirst);\n     assert(pindexFirst);\n \n     return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n }\n \n-uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+uint32_t CalculateNextWorkRequired(const CBlockIndexBase* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n     int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n@@ -97,27 +96,27 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     return true;\n }\n \n-int64_t GetMedianTimePast(const CBlockIndex* pindex)\n+int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter indexGetter)\n {\n     int64_t pmedian[MEDIAN_TIME_SPAN];\n     int64_t* pbegin = &pmedian[MEDIAN_TIME_SPAN];\n     int64_t* pend = &pmedian[MEDIAN_TIME_SPAN];\n \n-    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = pindex->pprev)\n+    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = indexGetter(pindex))\n         *(--pbegin) = (int64_t)pindex->nTime;\n \n     std::sort(pbegin, pend);\n     return pbegin[(pend - pbegin)/2];\n }\n \n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter indexGetter)\n {\n     unsigned int nFound = 0;\n     for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n     {\n         if (pstart->nVersion >= minVersion)\n             ++nFound;\n-        pstart = pstart->pprev;\n+        pstart = indexGetter(pstart);\n     }\n     return (nFound >= nRequired);\n }\n@@ -135,29 +134,29 @@ bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& st\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams, indexGetter))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n-    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev, indexGetter))\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n-        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams, indexGetter))\n             return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n \n     return true;\n }\n \n-bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev)\n+bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     if (!Consensus::CheckBlockHeader(block, state, params, nTime, true))\n         return false;\n-    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev, indexGetter))\n         return false;\n     return true;\n }"
      },
      {
        "sha": "0b120b5b474ff6b04a7f9f15c704395994c06d80",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -7,11 +7,11 @@\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n #include \"consensus/params.h\"\n+#include \"consensus/types.h\"\n \n #include <stdint.h>\n \n class CBlockHeader;\n-class CBlockIndex;\n class CValidationState;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n@@ -32,23 +32,23 @@ namespace Consensus {\n \n /** Block header validation functions */\n \n-bool VerifyBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, CBlockIndex*);\n+bool VerifyBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, CBlockIndexBase*, PrevIndexGetter);\n bool CheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, bool fCheckPOW = true);\n-bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, const CBlockIndex*);\n+bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, const CBlockIndexBase*, PrevIndexGetter);\n \n } // namespace Consensus\n \n /** Block header validation utility functions */\n \n-int64_t GetMedianTimePast(const CBlockIndex* pindex);\n-unsigned int GetNextWorkRequired(const CBlockIndex*, const CBlockHeader*, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter indexGetter);\n+unsigned int GetNextWorkRequired(const CBlockIndexBase*, const CBlockHeader*, const Consensus::Params&, PrevIndexGetter);\n+unsigned int CalculateNextWorkRequired(const CBlockIndexBase* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n  * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n  */\n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n+bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "f419219605030e65eee79316b2e3962d22dfce7d",
        "filename": "src/consensus/types.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/consensus/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/types.h?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_TYPES_H\n+#define BITCOIN_CONSENSUS_TYPES_H\n+\n+#include \"uint256.h\"\n+\n+struct CBlockIndexBase\n+{\n+    //! block header\n+    int32_t nVersion;\n+    uint256 hashMerkleRoot;\n+    uint32_t nTime;\n+    uint32_t nBits;\n+    uint32_t nNonce;\n+    //! height of the entry in the chain. The genesis block has height 0\n+    int nHeight;\n+};\n+\n+typedef const CBlockIndexBase* (*PrevIndexGetter)(const CBlockIndexBase*);\n+\n+#endif // BITCOIN_CONSENSUS_TYPES_H"
      },
      {
        "sha": "850aa97ea5d336d9febe79b6d95b0a8adaff437d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -1758,7 +1758,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus(), GetPrevIndex)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n@@ -2583,7 +2583,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, GetPrevIndex))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2629,7 +2629,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n         return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     if (pindex == NULL)\n@@ -2729,7 +2729,7 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return false;"
      },
      {
        "sha": "4a4bd215c6e88533576a726cb2ca1e7713b28bcc",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -82,7 +83,7 @@ class TxPriorityCompare\n \n uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& consensusParams)\n {\n-    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams);\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams, GetPrevIndex);\n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n     LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n@@ -96,7 +97,7 @@ uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeade\n \n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(GetMedianTimePast(pindexPrev)+1, GetAdjustedTime());\n+    pblock->nTime = std::max(GetMedianTimePast(pindexPrev, GetPrevIndex)+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)"
      },
      {
        "sha": "e9f5626a5e6ff1a7017d5c2a1ad647856210479c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -574,7 +574,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev)+1));\n+    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev, GetPrevIndex)+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));"
      },
      {
        "sha": "788e0e9e59c8a9e5d1971b5bffba8828062212a6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = GetMedianTimePast(chainActive.Tip())+1;\n+        pblock->nTime = GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1;\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight = nHeight;\n \n     // non-final txs in mempool\n-    SetMockTime(GetMedianTimePast(chainActive.Tip())+1);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1);\n \n     // height locked\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout.resize(1);\n     tx2.vout[0].nValue = 4900000000LL;\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = GetMedianTimePast(chainActive.Tip())+1;\n+    tx2.nLockTime = GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // However if we advance height and time by one, both will.\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(GetMedianTimePast(chainActive.Tip())+2);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+2);\n \n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));"
      },
      {
        "sha": "43e694256de81c65e37f585594ea3d2488b7557f",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d850a6bc88dee8afb9fa751daaab62600adcb81c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"test/test_bitcoin.h\"\n@@ -19,7 +18,7 @@ static const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN)\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n@@ -30,7 +29,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n@@ -41,7 +40,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n@@ -52,7 +51,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;"
      }
    ]
  },
  {
    "sha": "7e0cd1405bd29e3811f978c87b94abeca9fee23a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTBjZDE0MDViZDI5ZTM4MTFmOTc4Yzg3Yjk0YWJlY2E5ZmVlMjNh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-13T19:25:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:09Z"
      },
      "message": "Consensus: API: Expose bitcoinconsensus_verify_header() in libconsensus",
      "tree": {
        "sha": "867a8fb06dae73e7be7a0f7ed34527f4147c573f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/867a8fb06dae73e7be7a0f7ed34527f4147c573f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e0cd1405bd29e3811f978c87b94abeca9fee23a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0cd1405bd29e3811f978c87b94abeca9fee23a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0cd1405bd29e3811f978c87b94abeca9fee23a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0cd1405bd29e3811f978c87b94abeca9fee23a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d850a6bc88dee8afb9fa751daaab62600adcb81c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d850a6bc88dee8afb9fa751daaab62600adcb81c"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 37,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5b07cc1bc3d74aa198f047f6002197a1b7dc07c2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e0cd1405bd29e3811f978c87b94abeca9fee23a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e0cd1405bd29e3811f978c87b94abeca9fee23a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7e0cd1405bd29e3811f978c87b94abeca9fee23a",
        "patch": "@@ -362,6 +362,8 @@ bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n+  arith_uint256.cpp \\\n+  consensus/blockverify.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\\n@@ -370,6 +372,7 @@ libbitcoinconsensus_la_SOURCES = \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n   hash.cpp \\\n+  primitives/block.cpp \\\n   primitives/transaction.cpp \\\n   pubkey.cpp \\\n   script/bitcoinconsensus.cpp \\"
      },
      {
        "sha": "92cc7608595b9c0e6d4d85866946dad5bd8740e8",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e0cd1405bd29e3811f978c87b94abeca9fee23a/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e0cd1405bd29e3811f978c87b94abeca9fee23a/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=7e0cd1405bd29e3811f978c87b94abeca9fee23a",
        "patch": "@@ -5,24 +5,27 @@\n \n #include \"bitcoinconsensus.h\"\n \n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n #include \"version.h\"\n \n namespace {\n \n-/** A class that deserializes a single CTransaction one time. */\n-class TxInputStream\n+/** A class that deserializes a single object implementing ::Unserialize() one time. */\n+class ObjectInputStream\n {\n public:\n-    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :\n+    ObjectInputStream(int nTypeIn, int nVersionIn, const unsigned char *object, size_t objectLen) :\n     m_type(nTypeIn),\n     m_version(nVersionIn),\n-    m_data(txTo),\n-    m_remaining(txToLen)\n+    m_data(object),\n+    m_remaining(objectLen)\n     {}\n \n-    TxInputStream& read(char* pch, size_t nSize)\n+    ObjectInputStream& read(char* pch, size_t nSize)\n     {\n         if (nSize > m_remaining)\n             throw std::ios_base::failure(std::string(__func__) + \": end of data\");\n@@ -40,7 +43,7 @@ class TxInputStream\n     }\n \n     template<typename T>\n-    TxInputStream& operator>>(T& obj)\n+    ObjectInputStream& operator>>(T& obj)\n     {\n         ::Unserialize(*this, obj, m_type, m_version);\n         return *this;\n@@ -63,11 +66,11 @@ inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)\n } // anon namespace\n \n int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n-                                    const unsigned char *txTo        , unsigned int txToLen,\n-                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+                                   const unsigned char *txTo        , unsigned int txToLen,\n+                                   unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        ObjectInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n@@ -84,6 +87,27 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n     }\n }\n \n+int bitcoinconsensus_verify_header(const unsigned char* blockHeader, unsigned int blockHeaderLen,\n+                                   const Consensus::Params& params, int64_t nTime, CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter, \n+                                   bitcoinconsensus_error* err)\n+{\n+    try {\n+        ObjectInputStream stream(SER_NETWORK, PROTOCOL_VERSION, blockHeader, blockHeaderLen);\n+        CBlockHeader header;\n+        stream >> header;\n+        if (header.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != blockHeaderLen)\n+            return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n+\n+         // Regardless of the verification result, the tx did not error.\n+         set_error(err, bitcoinconsensus_ERR_OK);\n+\n+         CValidationState state;\n+         return Consensus::VerifyBlockHeader(header, state, params, nTime, pindexPrev, indexGetter);\n+    } catch (const std::exception&) {\n+        return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n+    }\n+}\n+\n unsigned int bitcoinconsensus_version()\n {\n     // Just use the API version for now"
      }
    ]
  },
  {
    "sha": "10a39eb84717a7e5415861bd03d8530a8514d5b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGEzOWViODQ3MTdhN2U1NDE1ODYxYmQwM2Q4NTMwYTg1MTRkNWIx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-15T18:48:47Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:56Z"
      },
      "message": "Consensus: Refactor: CheckTransaction() -> Consensus::CheckTx()\n\nDecouple it from util.h [bool error(char*)] and BOOST_FOREACH",
      "tree": {
        "sha": "194d85590a88cc061391704e034794531f13c4f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/194d85590a88cc061391704e034794531f13c4f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10a39eb84717a7e5415861bd03d8530a8514d5b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a39eb84717a7e5415861bd03d8530a8514d5b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10a39eb84717a7e5415861bd03d8530a8514d5b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a39eb84717a7e5415861bd03d8530a8514d5b1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e0cd1405bd29e3811f978c87b94abeca9fee23a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0cd1405bd29e3811f978c87b94abeca9fee23a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0cd1405bd29e3811f978c87b94abeca9fee23a"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 47,
      "deletions": 50
    },
    "files": [
      {
        "sha": "b87b33c831435a1e195f0ece7c32c92a756f5cd6",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -12,6 +12,7 @@\n #include <stdint.h>\n \n class CBlockHeader;\n+class CTransaction;\n class CValidationState;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n@@ -30,6 +31,10 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n  */\n namespace Consensus {\n \n+/** Transaction validation functions */\n+\n+bool CheckTx(const CTransaction&, CValidationState&);\n+\n /** Block header validation functions */\n \n bool VerifyBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, CBlockIndexBase*, PrevIndexGetter);\n@@ -51,4 +56,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n  */\n bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter);\n \n+} // namespace Consensus\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "4cc048f293f5deb8ee6cfaf11b47cdde38bf1f60",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 37,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -760,60 +760,48 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n-\n     return true;\n }\n \n@@ -854,14 +842,14 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n-\n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n         return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n                          REJECT_INVALID, \"coinbase\");\n \n+    if (!Consensus::CheckTx(tx, state))\n+        return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n+\n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n@@ -2536,8 +2524,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+        if (!Consensus::CheckTx(tx, state))\n+            return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)"
      },
      {
        "sha": "c67d66fbfc2571091fb69d3de5febb47f4d98569",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -268,9 +268,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n /** Check for standard transaction types\n  * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n  */"
      },
      {
        "sha": "d3330623b3196e368e8c4cea9c02901cbebb913f",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -23,7 +23,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"0100000000010000000000000000015100000000\", \"P2SH\"],"
      },
      {
        "sha": "101f0fd942df76e25ddf0ff4eb8838fe041274af",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -64,7 +64,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"MAX_MONEY output\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010040075af0750700015100000000\", \"P2SH\"],"
      },
      {
        "sha": "944e835607f3ce348d3e1116ca96b8c2333a9aaa",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -2,15 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n-#include \"main.h\"\n #include \"random.h\"\n+#include \"hash.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <iostream>\n@@ -200,7 +202,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);"
      },
      {
        "sha": "c8792beb86f2153a2d2b90443cd9afd9e205464f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -7,6 +7,7 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n@@ -134,7 +135,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+            BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -210,7 +211,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = CheckTransaction(tx, state) && state.IsValid();\n+            fValid = Consensus::CheckTx(tx, state) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -239,11 +240,11 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!Consensus::CheckTx(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //"
      },
      {
        "sha": "96011bc6983815dbc4332dfa5164298349b066c6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a39eb84717a7e5415861bd03d8530a8514d5b1/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "patch": "@@ -6,8 +6,8 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -371,8 +371,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx wtx;\n             ssValue >> wtx;\n             CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+            if (!(Consensus::CheckTx(wtx, state) && (wtx.GetHash() == hash) && state.IsValid())) {\n+                strErr = strprintf(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n                 return false;\n+            }\n \n             // Undo serialize changes in 31600\n             if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)"
      }
    ]
  },
  {
    "sha": "216974fe17670ecab734e87ea09645ce3c79170f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTY5NzRmZTE3NjcwZWNhYjczNGU4N2VhMDk2NDVjZTNjNzkxNzBm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-26T00:39:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:56Z"
      },
      "message": "Consensus: Refactor: Introduce GetSpendHeight()",
      "tree": {
        "sha": "b724adb218bcd6462f3ea80d8104a29f9a97503e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b724adb218bcd6462f3ea80d8104a29f9a97503e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/216974fe17670ecab734e87ea09645ce3c79170f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216974fe17670ecab734e87ea09645ce3c79170f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/216974fe17670ecab734e87ea09645ce3c79170f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216974fe17670ecab734e87ea09645ce3c79170f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a39eb84717a7e5415861bd03d8530a8514d5b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a39eb84717a7e5415861bd03d8530a8514d5b1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ea0d76fa0cd11534317606827e34ad2f32da8ac8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/216974fe17670ecab734e87ea09645ce3c79170f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/216974fe17670ecab734e87ea09645ce3c79170f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=216974fe17670ecab734e87ea09645ce3c79170f",
        "patch": "@@ -1376,22 +1376,26 @@ bool CScriptCheck::operator()() {\n     return true;\n }\n \n+int GetSpendHeight(const CCoinsViewCache& inputs)\n+{\n+    LOCK(cs_main);\n+    CBlockIndex* pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n+    return pindexPrev->nHeight + 1;\n+}\n+\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n+        int nSpendHeight = GetSpendHeight(inputs);\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n             return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n-        // While checking, GetBestBlock() refers to the parent block.\n-        // This is also true for mempool checks.\n-        CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n-        int nSpendHeight = pindexPrev->nHeight + 1;\n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)"
      },
      {
        "sha": "16a17c3d233a45e656bb077599282f37b45e99c8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/216974fe17670ecab734e87ea09645ce3c79170f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/216974fe17670ecab734e87ea09645ce3c79170f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=216974fe17670ecab734e87ea09645ce3c79170f",
        "patch": "@@ -422,4 +422,10 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n+/** \n+ * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n+ * This is also true for mempool checks.\n+ */\n+int GetSpendHeight(const CCoinsViewCache& inputs);\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTU5YjE4NmQ2ZWE3MmFkYzA3ZDE3ZTQ5NjMwZTBmYzFkZDJkZWEx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T22:35:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:56Z"
      },
      "message": "Consensus: Refactor: Separate Consensus::CheckTxInputs from CheckInputs",
      "tree": {
        "sha": "c3793490bd6ced069d58d852e8bb538257cf142b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3793490bd6ced069d58d852e8bb538257cf142b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "216974fe17670ecab734e87ea09645ce3c79170f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216974fe17670ecab734e87ea09645ce3c79170f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/216974fe17670ecab734e87ea09645ce3c79170f"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "7189fadb80cb647a6be3bbc5edbfee4dc61d4f0a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
        "patch": "@@ -34,6 +34,12 @@ namespace Consensus {\n /** Transaction validation functions */\n \n bool CheckTx(const CTransaction&, CValidationState&);\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n \n /** Block header validation functions */\n "
      },
      {
        "sha": "7f0cf7dd833875eb540efeb28fab05abb187f132",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
        "patch": "@@ -1383,18 +1383,12 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n-    if (!tx.IsCoinBase())\n-    {\n-        if (pvChecks)\n-            pvChecks->reserve(tx.vin.size());\n-\n-        int nSpendHeight = GetSpendHeight(inputs);\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n@@ -1405,35 +1399,40 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             assert(coins);\n \n             // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n+            if (coins->IsCoinBase())\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n-            }\n+                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n+    return true;\n+}\n+\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+{\n+    if (!tx.IsCoinBase())\n+    {\n+        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n+            return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n+\n+        if (pvChecks)\n+            pvChecks->reserve(tx.vin.size());\n \n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks."
      },
      {
        "sha": "0d4e7b214c5a08c5fce5ab30a5fa2c12ddec2800",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f959b186d6ea72adc07d17e49630e0fc1dd2dea1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
        "patch": "@@ -570,6 +570,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t checkTotal = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n+    int nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n@@ -600,21 +601,22 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&it->second);\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            assert(tx.IsCoinBase() || Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight));\n             UpdateCoins(tx, state, mempoolDuplicate, 1000000);\n         }\n     }\n     unsigned int stepsSinceLastRemove = 0;\n     while (!waitingOnDependants.empty()) {\n         const CTxMemPoolEntry* entry = waitingOnDependants.front();\n         waitingOnDependants.pop_front();\n+        const CTransaction& tx = entry->GetTx();\n         CValidationState state;\n-        if (!mempoolDuplicate.HaveInputs(entry->GetTx())) {\n+        if (!mempoolDuplicate.HaveInputs(tx)) {\n             waitingOnDependants.push_back(entry);\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            assert(tx.IsCoinBase() || Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight));\n             UpdateCoins(entry->GetTx(), state, mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQ1MDVhNGY2MjYwM2Q2YjJlZDA3ZTBmZWNiMjEzYjgxYzhmNzk1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-01T19:55:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "Consensus: Introduce Consensus::CheckTxInputsScripts() and use it separately from main::CheckInputs when possible",
      "tree": {
        "sha": "2ff610ace50ac42d35f2ce4fe5e2cacc762de51e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ff610ace50ac42d35f2ce4fe5e2cacc762de51e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f959b186d6ea72adc07d17e49630e0fc1dd2dea1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f959b186d6ea72adc07d17e49630e0fc1dd2dea1"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 52,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8ab2bba87339bead74a267a00c7659c5ddb95b98",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "patch": "@@ -177,6 +177,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/blockverify.cpp \\\n+  consensus/txverify.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "90daa5272babeac7d61b6b0101d1201d17833cb7",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "patch": "@@ -12,6 +12,7 @@\n #include <stdint.h>\n \n class CBlockHeader;\n+class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n \n@@ -40,6 +41,13 @@ bool CheckTx(const CTransaction&, CValidationState&);\n  * Preconditions: tx.IsCoinBase() is false.\n  */\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+/**\n+ * Preconditions: tx.IsCoinBase() is false.\n+ * Check whether all inputs of this transaction are valid (scripts and sigs)\n+ * This does not modify the UTXO set. This does not check double spends and amounts.\n+ * This is the more expensive consensus check for a transaction, do it last.\n+ */\n+bool CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, bool cacheStore, unsigned int flags);\n \n /** Block header validation functions */\n \n@@ -62,6 +70,4 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n  */\n bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter);\n \n-} // namespace Consensus\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "f84021da0658d17192f1f759c468cf4d5d22fcdf",
        "filename": "src/consensus/txverify.cpp",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"coins.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/sigcache.h\"\n+#include \"tinyformat.h\"\n+\n+bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, bool cacheStore, unsigned int flags)\n+{\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const COutPoint& prevout = tx.vin[i].prevout;\n+        const CCoins* coins = inputs.AccessCoins(prevout.hash);\n+        assert(coins);\n+\n+        const CScript& scriptPubKey = coins->vout[prevout.n].scriptPubKey;\n+        CachingTransactionSignatureChecker checker(&tx, i, cacheStore);\n+        ScriptError scriptError(SCRIPT_ERR_UNKNOWN_ERROR);\n+        if (!VerifyScript(scriptPubKey, tx.vin[i].scriptSig, flags, checker, &scriptError))\n+            return state.DoS(100, false, REJECT_INVALID, \n+                             strprintf(\"script-verify-failed (in input %d: %s)\", i, ScriptErrorString(scriptError)));\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "cb2664233a1b0f039fc104cf20785080eaba7f16",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "patch": "@@ -935,6 +935,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         view.SetBackend(dummy);\n         }\n \n+        // Check inputs (without checking the scripts)\n+        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view)))\n+            return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n@@ -1002,10 +1006,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+        if (!Consensus::CheckTxInputsScripts(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS))\n+            return error(\"%s: Consensus::CheckTxInputsScripts failed with STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -1016,10 +1018,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n-        }\n+        if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+            return error(\"%s: BUG! PLEASE REPORT THIS! Consensus::CheckTxInputsScripts failed against MANDATORY but not STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry);"
      },
      {
        "sha": "f3f3fea5b30357d14442e73cf470fa1de79e1522",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd505a4f62603d6b2ed07e0fecb213b81c8f795/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "patch": "@@ -153,6 +153,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache view(pcoinsTip);\n+        int nSpendHeight = GetSpendHeight(view);\n \n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n@@ -280,22 +281,22 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            if (!view.HaveInputs(tx))\n+            CValidationState state;\n+            if (!Consensus::CheckTxInputs(tx, state, view, nSpendHeight))\n                 continue;\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!Consensus::CheckTxInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n+            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+\n             UpdateCoins(tx, state, view, nHeight);\n \n             // Added"
      }
    ]
  },
  {
    "sha": "965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjU3OTJlMTRjMmE1YWE5ZWMxYjJjNGQyZDEyYWE2ZDc0ZGI3YWY1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T08:19:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "Consensus: Refactor: Separate CheckFinalTx() from main::IsFinalTx()",
      "tree": {
        "sha": "6ca8eb3e0c2ec34009d67c7549eb128db4016306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ca8eb3e0c2ec34009d67c7549eb128db4016306"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd505a4f62603d6b2ed07e0fecb213b81c8f795",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd505a4f62603d6b2ed07e0fecb213b81c8f795"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ce9ccb901f03f304a0850cfce6a158360cfd0cc9",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
        "patch": "@@ -57,6 +57,10 @@ bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Co\n \n } // namespace Consensus\n \n+/** Transaction validation utility functions */\n+\n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+\n /** Block header validation utility functions */\n \n int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter indexGetter);"
      },
      {
        "sha": "5e81a796c7ba056b00ab937d07a46251f7545221",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
        "patch": "@@ -648,10 +648,15 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         nBlockHeight = chainActive.Height();\n     if (nBlockTime == 0)\n         nBlockTime = GetAdjustedTime();\n+    return CheckFinalTx(tx, nBlockHeight, nBlockTime);\n+}\n+\n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n             return false;\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "c82754bf69e63361084fd3daf26e14dc6545a2db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODI3NTRiZjY5ZTYzMzYxMDg0ZmQzZGFmMjZlMTRkYzY1NDVhMmRi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-10T19:29:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "Consensus: Introduce Consensus::GetSigOpCount(CTransaction, CCoinsViewEfficient)",
      "tree": {
        "sha": "cbf3488d631bf0c9250376a28336d72f77beff81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbf3488d631bf0c9250376a28336d72f77beff81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c82754bf69e63361084fd3daf26e14dc6545a2db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82754bf69e63361084fd3daf26e14dc6545a2db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c82754bf69e63361084fd3daf26e14dc6545a2db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82754bf69e63361084fd3daf26e14dc6545a2db/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965792e14c2a5aa9ec1b2c4d2d12aa6d74db7af5"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 26,
      "deletions": 36
    },
    "files": [
      {
        "sha": "6cafb3ed452c068d385af36d4702f96839123024",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82754bf69e63361084fd3daf26e14dc6545a2db/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82754bf69e63361084fd3daf26e14dc6545a2db/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=c82754bf69e63361084fd3daf26e14dc6545a2db",
        "patch": "@@ -60,6 +60,24 @@ bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Co\n /** Transaction validation utility functions */\n \n bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+/**\n+ * Count ECDSA signature operations.\n+ * @see GetLegacySigOpCount and GetP2SHSigOpCount\n+ */\n+unsigned int GetSigOpCount(const CTransaction&, const CCoinsViewCache&);\n \n /** Block header validation utility functions */\n "
      },
      {
        "sha": "8b8de317826d649d3c8a39291710c89b95205f41",
        "filename": "src/consensus/txverify.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82754bf69e63361084fd3daf26e14dc6545a2db/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82754bf69e63361084fd3daf26e14dc6545a2db/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=c82754bf69e63361084fd3daf26e14dc6545a2db",
        "patch": "@@ -11,6 +11,11 @@\n #include \"script/sigcache.h\"\n #include \"tinyformat.h\"\n \n+unsigned int GetSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    return GetLegacySigOpCount(tx) + GetP2SHSigOpCount(tx, inputs);\n+}\n+\n bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, bool cacheStore, unsigned int flags)\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {"
      },
      {
        "sha": "d6e6c3d6c9f1bea42df547f9d95c0657260deb5f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82754bf69e63361084fd3daf26e14dc6545a2db/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82754bf69e63361084fd3daf26e14dc6545a2db/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c82754bf69e63361084fd3daf26e14dc6545a2db",
        "patch": "@@ -953,8 +953,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOps = GetSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n                              error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n@@ -1775,7 +1774,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += GetLegacySigOpCount(tx);\n+        nSigOps += GetSigOpCount(tx, view);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n@@ -1786,17 +1785,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n-\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;"
      },
      {
        "sha": "af848853f83cf89846a1ef4aaa6b974d96f3365b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82754bf69e63361084fd3daf26e14dc6545a2db/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82754bf69e63361084fd3daf26e14dc6545a2db/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c82754bf69e63361084fd3daf26e14dc6545a2db",
        "patch": "@@ -240,23 +240,6 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it"
      },
      {
        "sha": "0f539f8a1fd20738f800b1a1df55425b7796f579",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82754bf69e63361084fd3daf26e14dc6545a2db/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82754bf69e63361084fd3daf26e14dc6545a2db/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c82754bf69e63361084fd3daf26e14dc6545a2db",
        "patch": "@@ -258,10 +258,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (nBlockSize + nTxSize >= nBlockMaxSize)\n                 continue;\n \n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n \n             // Skip free transactions if we're past the minimum block size:\n             const uint256& hash = tx.GetHash();\n@@ -285,7 +281,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!Consensus::CheckTxInputs(tx, state, view, nSpendHeight))\n                 continue;\n \n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n+            unsigned int nTxSigOps = GetSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n "
      }
    ]
  },
  {
    "sha": "a6d1e6e60d1757fc850f5798266bb2a4c7145193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQxZTZlNjBkMTc1N2ZjODUwZjU3OTgyNjZiYjJhNGM3MTQ1MTkz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T13:10:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyTx()",
      "tree": {
        "sha": "cb21d61c120e3da554be2386a3807b6f6d7bfa04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb21d61c120e3da554be2386a3807b6f6d7bfa04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d1e6e60d1757fc850f5798266bb2a4c7145193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1e6e60d1757fc850f5798266bb2a4c7145193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1e6e60d1757fc850f5798266bb2a4c7145193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1e6e60d1757fc850f5798266bb2a4c7145193/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c82754bf69e63361084fd3daf26e14dc6545a2db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82754bf69e63361084fd3daf26e14dc6545a2db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c82754bf69e63361084fd3daf26e14dc6545a2db"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "434cf9a483fffefe3aaa5e52f72a0cababd6195c",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1e6e60d1757fc850f5798266bb2a4c7145193/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1e6e60d1757fc850f5798266bb2a4c7145193/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a6d1e6e60d1757fc850f5798266bb2a4c7145193",
        "patch": "@@ -34,6 +34,10 @@ namespace Consensus {\n \n /** Transaction validation functions */\n \n+/**\n+ * Fully verify a transaction.\n+ */\n+bool VerifyTx(const CTransaction& tx, CValidationState &state, int nBlockHeight, int64_t nBlockTime, const CCoinsViewCache& inputs, int nSpendHeight, bool cacheStore, unsigned int flags);\n bool CheckTx(const CTransaction&, CValidationState&);\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)"
      },
      {
        "sha": "79ea400821f33aab83e9d7727e845e0fef3553f4",
        "filename": "src/consensus/txverify.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1e6e60d1757fc850f5798266bb2a4c7145193/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1e6e60d1757fc850f5798266bb2a4c7145193/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=a6d1e6e60d1757fc850f5798266bb2a4c7145193",
        "patch": "@@ -32,3 +32,18 @@ bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& s\n     }\n     return true;\n }\n+\n+bool Consensus::VerifyTx(const CTransaction& tx, CValidationState &state, int nBlockHeight, int64_t nBlockTime, const CCoinsViewCache& inputs, int nSpendHeight, bool cacheStore, unsigned int flags)\n+{\n+    if (!CheckTx(tx, state))\n+        return false;\n+    if (!CheckFinalTx(tx, nBlockHeight, nBlockTime))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+    if (!CheckTxInputs(tx, state, inputs, nSpendHeight))\n+        return false;\n+    if (GetSigOpCount(tx, inputs) > MAX_BLOCK_SIGOPS)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+    if (!CheckTxInputsScripts(tx, state, inputs, cacheStore, flags))\n+        return false;        \n+    return true;\n+}"
      }
    ]
  },
  {
    "sha": "c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjllOTRiNDhlY2U5MTQ4YmE2NjI2YmI2Y2Q4OTcxYTI3YWU3ZjVi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-07T21:15:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "MOVEONLY: Consensus: Move to consensus/txverify.cpp:\n\nfrom main.cpp:\n-CheckFinalTx\n-Consensus::CheckTx\n-Consensus::CheckTxInputs\n-GetLegacySigOpCount\n-GetP2SHSigOpCount",
      "tree": {
        "sha": "942c328d60c337ec687b80eebf42e8d2492ee9d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/942c328d60c337ec687b80eebf42e8d2492ee9d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d1e6e60d1757fc850f5798266bb2a4c7145193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1e6e60d1757fc850f5798266bb2a4c7145193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1e6e60d1757fc850f5798266bb2a4c7145193"
      }
    ],
    "stats": {
      "total": 258,
      "additions": 127,
      "deletions": 131
    },
    "files": [
      {
        "sha": "f335b1b42415753023f902bb2168bc88e9273082",
        "filename": "src/consensus/txverify.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
        "patch": "@@ -10,12 +10,137 @@\n #include \"primitives/transaction.h\"\n #include \"script/sigcache.h\"\n #include \"tinyformat.h\"\n+#include \"utilmoneystr.h\"\n+#include \"version.h\"\n+\n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n+            return false;\n+    return true;\n+}\n+\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        nSigOps += tx.vin[i].scriptSig.GetSigOpCount(false);\n+\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+        nSigOps += tx.vout[i].scriptPubKey.GetSigOpCount(false);\n+\n+    return nSigOps;\n+}\n+\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n \n unsigned int GetSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n {\n     return GetLegacySigOpCount(tx) + GetP2SHSigOpCount(tx, inputs);\n }\n \n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+    return true;\n+}\n+\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n+        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+        // for an attacker to attempt to split the network.\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n+\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n+\n+            // If prev is coinbase, check that it's matured\n+            if (coins->IsCoinBase())\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n+\n+            // Check for negative or overflow input values\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+        }\n+\n+        if (nValueIn < tx.GetValueOut())\n+            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+\n+        // Tally transaction fees\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n+        if (nTxFee < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+\n+        nFees += nTxFee;\n+        if (!MoneyRange(nFees))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n+    return true;\n+}\n+\n bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, bool cacheStore, unsigned int flags)\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {"
      },
      {
        "sha": "8ba9b2a99085a9bb8bd475d75e9670d0c75434c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 131,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
        "patch": "@@ -651,16 +651,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return CheckFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        if (!tx.vin[i].IsFinal())\n-            return false;\n-    return true;\n-}\n-\n /**\n  * Check transaction inputs to mitigate two\n  * potential denial-of-service attacks:\n@@ -729,87 +719,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        if (tx.vout[i].nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (tx.vout[i].nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += tx.vout[i].nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    std::set<COutPoint> vInOutPoints;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        if (vInOutPoints.count(tx.vin[i].prevout))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(tx.vin[i].prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            if (tx.vin[i].prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-    return true;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n@@ -1387,46 +1296,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase())\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-        }\n-\n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-\n-    return true;\n-}\n \n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {"
      },
      {
        "sha": "1cb80bea55a608c258c770a3bbeca09e41b7b675",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\""
      }
    ]
  },
  {
    "sha": "fb85f35ea4698f9f36dd497f18ec8a88334016a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjg1ZjM1ZWE0Njk4ZjlmMzZkZDQ5N2YxOGVjOGE4ODMzNDAxNmEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-06T20:11:50Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:07:57Z"
      },
      "message": "Consensus: Introduce minimal UTXO interface with function pointers",
      "tree": {
        "sha": "bd2f108ecf10f4bc4b93a33164ee9bc55fe9b9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2f108ecf10f4bc4b93a33164ee9bc55fe9b9d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb85f35ea4698f9f36dd497f18ec8a88334016a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb85f35ea4698f9f36dd497f18ec8a88334016a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb85f35ea4698f9f36dd497f18ec8a88334016a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb85f35ea4698f9f36dd497f18ec8a88334016a1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c29e94b48ece9148ba6626bb6cd8971a27ae7f5b"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6dcb963c2e95fb35e615afaed9a4726bd74120f2",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=fb85f35ea4698f9f36dd497f18ec8a88334016a1",
        "patch": "@@ -8,6 +8,27 @@\n \n #include <assert.h>\n \n+static CCoinsViewCache* globalCoins;\n+\n+void SetGlobalCoins(CCoinsViewCache* globalCoinsIn)\n+{\n+    globalCoins = globalCoinsIn;\n+}\n+\n+unsigned int GetTxHeight(const uint256& txid)\n+{\n+    const CCoins* coins = globalCoins->AccessCoins(txid);\n+    return coins ? coins->nHeight : 0;\n+}\n+\n+\n+const CTxOut& GetTxOutput(const uint256& txid, uint32_t n)\n+{\n+    const CCoins* coins = globalCoins->AccessCoins(txid);\n+    assert(coins);\n+    return coins->vout[n];\n+}\n+\n /**\n  * calculate number of bytes for the bitmask, and its number of non-zero bytes\n  * each bit in the bitmask represents the availability of one output, but the"
      },
      {
        "sha": "b0692ed8df534ff67968a5f9bd94dda5c92d2356",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=fb85f35ea4698f9f36dd497f18ec8a88334016a1",
        "patch": "@@ -444,4 +444,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+void SetGlobalCoins(CCoinsViewCache* globalCoinsIn);\n+unsigned int GetTxHeight(const uint256& txid);\n+const CTxOut& GetTxOutput(const uint256& txid, uint32_t n);\n+\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "264a820e4be3d0a4ef3f3b5422bd9af21193d6af",
        "filename": "src/consensus/types.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/consensus/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb85f35ea4698f9f36dd497f18ec8a88334016a1/src/consensus/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/types.h?ref=fb85f35ea4698f9f36dd497f18ec8a88334016a1",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_TYPES_H\n #define BITCOIN_CONSENSUS_TYPES_H\n \n+#include \"primitives/transaction.h\"\n #include \"uint256.h\"\n \n struct CBlockIndexBase\n@@ -22,4 +23,7 @@ struct CBlockIndexBase\n \n typedef const CBlockIndexBase* (*PrevIndexGetter)(const CBlockIndexBase*);\n \n+typedef unsigned int (*TxHeightGetter)(const uint256& txid);\n+typedef const CTxOut& (*TxOutputGetter)(const uint256& txid, uint32_t n);\n+\n #endif // BITCOIN_CONSENSUS_TYPES_H"
      }
    ]
  },
  {
    "sha": "b15090850a81e6eebf6902dd993d086ca01f1210",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTUwOTA4NTBhODFlNmVlYmY2OTAyZGQ5OTNkMDg2Y2EwMWYxMjEw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-08T22:08:20Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:29Z"
      },
      "message": "Consensus: Refactor: Turn main::CheckBlock() into Consensus::CheckBlock()",
      "tree": {
        "sha": "e89ab0e34dee3cf037b72226e3ff068925ee38bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e89ab0e34dee3cf037b72226e3ff068925ee38bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b15090850a81e6eebf6902dd993d086ca01f1210",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b15090850a81e6eebf6902dd993d086ca01f1210",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b15090850a81e6eebf6902dd993d086ca01f1210",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b15090850a81e6eebf6902dd993d086ca01f1210/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb85f35ea4698f9f36dd497f18ec8a88334016a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb85f35ea4698f9f36dd497f18ec8a88334016a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb85f35ea4698f9f36dd497f18ec8a88334016a1"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 41,
      "deletions": 40
    },
    "files": [
      {
        "sha": "b99b8ddf51a5df7b4323f85b1b4b381a49d73351",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b15090850a81e6eebf6902dd993d086ca01f1210/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b15090850a81e6eebf6902dd993d086ca01f1210/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b15090850a81e6eebf6902dd993d086ca01f1210",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <stdint.h>\n \n+class CBlock;\n class CBlockHeader;\n class CCoinsViewCache;\n class CTransaction;\n@@ -59,6 +60,10 @@ bool VerifyBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::\n bool CheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, int64_t nTime, bool fCheckPOW = true);\n bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Consensus::Params&, const CBlockIndexBase*, PrevIndexGetter);\n \n+/** Block validation functions */\n+\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+\n } // namespace Consensus\n \n /** Transaction validation utility functions */"
      },
      {
        "sha": "001346e9c357aea7d6520c3ea923f2c438c6a550",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 35,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b15090850a81e6eebf6902dd993d086ca01f1210/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b15090850a81e6eebf6902dd993d086ca01f1210/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b15090850a81e6eebf6902dd993d086ca01f1210",
        "patch": "@@ -1574,8 +1574,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n-        return false;\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime(), !fJustCheck, !fJustCheck))\n+        return error(\"%s: Consensus::CheckBlock(): %s\", __func__, state.GetRejectReason().c_str());\n \n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n@@ -2345,28 +2345,25 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool Consensus::CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!Consensus::CheckBlockHeader(block, state, consensusParams, GetAdjustedTime(), fCheckPOW))\n-        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n+    if (!Consensus::CheckBlockHeader(block, state, consensusParams, nTime, fCheckPOW))\n+        return false;\n \n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n-                             REJECT_INVALID, \"bad-txnmrklroot\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n-                             REJECT_INVALID, \"bad-txns-duplicate\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n     // All potential-corruption validation must be done before we do any\n@@ -2375,31 +2372,26 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-blk-length\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n-                         REJECT_INVALID, \"bad-cb-missing\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n-                             REJECT_INVALID, \"bad-cb-multiple\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!Consensus::CheckTx(tx, state))\n-            return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        if (!Consensus::CheckTx(block.vtx[i], state))\n+            return false;\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-    {\n-        nSigOps += GetLegacySigOpCount(tx);\n-    }\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        nSigOps += GetLegacySigOpCount(block.vtx[i]);\n+\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n-                         REJECT_INVALID, \"bad-blk-sigops\", true);\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n }\n@@ -2496,6 +2488,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n \n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n@@ -2509,12 +2502,13 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) || \n+        !ContextualCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return false;\n+        return error(\"%s: Consensus::CheckBlock || ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -2541,15 +2535,15 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n+    const CChainParams& chainparams = Params();\n     // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state);\n+    bool checked = Consensus::CheckBlock(*pblock, state, chainparams.GetConsensus(), GetAdjustedTime());\n \n     {\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n-        if (!checked) {\n-            return error(\"%s: CheckBlock FAILED\", __func__);\n-        }\n+        if (!checked)\n+            return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n@@ -2584,8 +2578,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n-    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n-        return false;\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime(), fCheckPOW, fCheckMerkleRoot))\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     if (!ContextualCheckBlock(block, state, pindexPrev))\n         return false;\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n@@ -2776,6 +2770,7 @@ CVerifyDB::~CVerifyDB()\n \n bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n+    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -2803,8 +2798,8 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+        if (nCheckLevel >= 1 && !Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n+            return error(\"VerifyDB(): *** found bad block at %d, reason=%s, hash=%s\\n\", pindex->nHeight, state.GetRejectReason().c_str(), pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;"
      },
      {
        "sha": "36fc4694ed06999520ee85447783adcdfae8edea",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b15090850a81e6eebf6902dd993d086ca01f1210/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b15090850a81e6eebf6902dd993d086ca01f1210/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b15090850a81e6eebf6902dd993d086ca01f1210",
        "patch": "@@ -310,9 +310,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-independent validity checks */\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n-\n /** Context-dependent validity checks */\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n "
      },
      {
        "sha": "654554f546929f79dba8a2123a7a4dd116f2f9f5",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b15090850a81e6eebf6902dd993d086ca01f1210/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b15090850a81e6eebf6902dd993d086ca01f1210/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=b15090850a81e6eebf6902dd993d086ca01f1210",
        "patch": "@@ -2,10 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"timedata.h\"\n #include \"utiltime.h\"\n \n #include <cstdio>\n@@ -42,6 +45,7 @@ bool read_block(const std::string& filename, CBlock& block)\n \n BOOST_AUTO_TEST_CASE(May15)\n {\n+    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n     // Putting a 1MB binary file in the git repository is not a great\n     // idea, so this test is only run if you manually download\n     // test/data/Mar12Fork.dat from\n@@ -56,7 +60,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n+        BOOST_CHECK(Consensus::CheckBlock(forkingBlock, state, consensusParams, GetAdjustedTime(), false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  },
  {
    "sha": "3c3cedb5929a5283e4d701fa575636f514d30721",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzNjZWRiNTkyOWE1MjgzZTRkNzAxZmE1NzU2MzZmNTE0ZDMwNzIx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T09:05:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:31Z"
      },
      "message": "Consensus: Refactor: Consensus version of Consensus::ContextualCheckBlock()",
      "tree": {
        "sha": "0e4768cdaffadcbdac69d9464e59039e594d4246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e4768cdaffadcbdac69d9464e59039e594d4246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c3cedb5929a5283e4d701fa575636f514d30721",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3cedb5929a5283e4d701fa575636f514d30721",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c3cedb5929a5283e4d701fa575636f514d30721",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3cedb5929a5283e4d701fa575636f514d30721/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b15090850a81e6eebf6902dd993d086ca01f1210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b15090850a81e6eebf6902dd993d086ca01f1210",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b15090850a81e6eebf6902dd993d086ca01f1210"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 15,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6a35208c2da6f41d7dc44177cb21fdd756405dc8",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3cedb5929a5283e4d701fa575636f514d30721/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3cedb5929a5283e4d701fa575636f514d30721/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=3c3cedb5929a5283e4d701fa575636f514d30721",
        "patch": "@@ -63,6 +63,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Co\n /** Block validation functions */\n \n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool ContextualCheckBlock(const CBlock&, CValidationState&, const Consensus::Params&, const CBlockIndexBase*, PrevIndexGetter);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "89dc4083780839fdeefd0e4b629d51e36c204211",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3cedb5929a5283e4d701fa575636f514d30721/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3cedb5929a5283e4d701fa575636f514d30721/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3c3cedb5929a5283e4d701fa575636f514d30721",
        "patch": "@@ -2415,25 +2415,22 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n-    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-\n+    const int nHeight = pindexPrev->nHeight + 1;\n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (!CheckFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, GetPrevIndex))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, indexGetter))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2503,12 +2500,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     }\n \n     if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) || \n-        !ContextualCheckBlock(block, state, pindex->pprev)) {\n+        !Consensus::ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev, GetPrevIndex)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return error(\"%s: Consensus::CheckBlock || ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n+        return error(\"%s: Consensus::CheckBlock || Consensus::ContextualCheckBlock: \", __func__, state.GetRejectReason().c_str());\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -2580,8 +2577,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n+        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n         return false;\n     assert(state.IsValid());"
      },
      {
        "sha": "66c37e733952c66238221c631635844469f0d469",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3cedb5929a5283e4d701fa575636f514d30721/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3cedb5929a5283e4d701fa575636f514d30721/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3c3cedb5929a5283e4d701fa575636f514d30721",
        "patch": "@@ -122,7 +122,7 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n \n-/** \n+/**\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n@@ -233,7 +233,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n  */\n \n-/** \n+/**\n  * Check for standard transaction types\n  * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n  * @return True if all inputs (scriptSigs) use only standard transaction forms\n@@ -310,9 +310,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-dependent validity checks */\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n@@ -402,7 +399,7 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-/** \n+/**\n  * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n  * This is also true for mempool checks.\n  */"
      }
    ]
  },
  {
    "sha": "8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmE1NTk2OTNlYTEwMWQ3YTE0MjgxYzdmZGYxOWEyNGY0ZjliYjI3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:03:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:33Z"
      },
      "message": "Chainparams: Refactor: Decouple main::GetBlockValue() from Params() [renamed GetBlockSubsidy]\n\nRemove redundant getter CChainParams::SubsidyHalvingInterval()",
      "tree": {
        "sha": "806dbfd8be3df8479768ade0a8c4aa0e0032b783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806dbfd8be3df8479768ade0a8c4aa0e0032b783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c3cedb5929a5283e4d701fa575636f514d30721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3cedb5929a5283e4d701fa575636f514d30721",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c3cedb5929a5283e4d701fa575636f514d30721"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 46,
      "deletions": 15
    },
    "files": [
      {
        "sha": "67a473b4e0e312b6940cddfb14c31ccaf62b8880",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "patch": "@@ -43,7 +43,6 @@ class CChainParams\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }"
      },
      {
        "sha": "132722d6511980f74f286fd2e73e0690338f5fcf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "patch": "@@ -1071,19 +1071,17 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n {\n-    CAmount nSubsidy = 50 * COIN;\n-    int halvings = nHeight / Params().SubsidyHalvingInterval();\n-\n+    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n     // Force block reward to zero when right shift is undefined.\n     if (halvings >= 64)\n-        return nFees;\n+        return 0;\n \n+    CAmount nSubsidy = 50 * COIN;\n     // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n     nSubsidy >>= halvings;\n-\n-    return nSubsidy + nFees;\n+    return nSubsidy;\n }\n \n bool IsInitialBlockDownload()\n@@ -1674,10 +1672,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n \n-    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n+    if (block.vtx[0].GetValueOut() > blockReward)\n         return state.DoS(100,\n                          error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n+                               block.vtx[0].GetValueOut(), blockReward),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())"
      },
      {
        "sha": "01c9f8d64cfc29ac8073030a2292835ce1792c28",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "patch": "@@ -169,7 +169,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);"
      },
      {
        "sha": "95922f4be832de4f869a7f4391e4d62b03057a25",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "patch": "@@ -333,7 +333,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n \n         // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = GetBlockValue(nHeight, nFees);\n+        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;"
      },
      {
        "sha": "21ae46d6e971d467de24e265960b501060bdf41b",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba559693ea101d7a14281c7fdf19a24f4f9bb27/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "patch": "@@ -2,25 +2,58 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include \"chainparams.h\"\n #include \"main.h\"\n \n #include \"test/test_bitcoin.h\"\n \n+#include <boost/signals2/signal.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(main_tests, TestingSetup)\n \n+static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)\n+{\n+    int maxHalvings = 64;\n+    CAmount nInitialSubsidy = 50 * COIN;\n+\n+    CAmount nPreviousSubsidy = nInitialSubsidy * 2; // for height == 0\n+    BOOST_CHECK_EQUAL(nPreviousSubsidy, nInitialSubsidy * 2);\n+    for (int nHalvings = 0; nHalvings < maxHalvings; nHalvings++) {\n+        int nHeight = nHalvings * consensusParams.nSubsidyHalvingInterval;\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        BOOST_CHECK(nSubsidy <= nInitialSubsidy);\n+        BOOST_CHECK_EQUAL(nSubsidy, nPreviousSubsidy / 2);\n+        nPreviousSubsidy = nSubsidy;\n+    }\n+    BOOST_CHECK_EQUAL(GetBlockSubsidy(maxHalvings * consensusParams.nSubsidyHalvingInterval, consensusParams), 0);\n+}\n+\n+static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n+{\n+    Consensus::Params consensusParams;\n+    consensusParams.nSubsidyHalvingInterval = nSubsidyHalvingInterval;\n+    TestBlockSubsidyHalvings(consensusParams);\n+}\n+\n+BOOST_AUTO_TEST_CASE(block_subsidy_test)\n+{\n+    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    TestBlockSubsidyHalvings(150); // As in regtest\n+    TestBlockSubsidyHalvings(1000); // Just another interval\n+}\n+\n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n+    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));\n     }\n-    BOOST_CHECK(nSum == 2099999997690000ULL);\n+    BOOST_CHECK_EQUAL(nSum, 2099999997690000ULL);\n }\n \n bool ReturnFalse() { return false; }"
      }
    ]
  },
  {
    "sha": "9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmE3ZDA2NDEwMTlkN2Y2YzA4ZjdiMTVjZTNhMmJkMmU1ZThhNGFj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T05:57:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:33Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::GetFlags\n\nand use it instead of MANDATORY_SCRIPT_VERIFY_FLAGS in miner::CreateNewBlock()",
      "tree": {
        "sha": "052ff3bc76da2eae0a7affa03f6e009ac6359bfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052ff3bc76da2eae0a7affa03f6e009ac6359bfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba559693ea101d7a14281c7fdf19a24f4f9bb27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ba559693ea101d7a14281c7fdf19a24f4f9bb27"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 23,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e8f5c55f5e8d4f695522b8742e8d5a4ab3c539a5",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "patch": "@@ -8,6 +8,7 @@\n #include \"arith_uint256.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n+#include \"script/interpreter.h\"\n #include \"tinyformat.h\"\n \n #include <algorithm>  \n@@ -134,6 +135,17 @@ bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& st\n     return true;\n }\n \n+unsigned Consensus::GetFlags(const CBlock& block, const Consensus::Params& consensusParams, CBlockIndexBase* pindex, PrevIndexGetter indexGetter)\n+{\n+    int64_t nBIP16SwitchTime = 1333238400;\n+    bool fStrictPayToScriptHash = ((int64_t)pindex->nTime >= nBIP16SwitchTime);\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+\n+    if (block.nVersion >= 3 && IsSuperMajority(3, indexGetter(pindex), consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, indexGetter))\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    return flags;\n+}\n+\n bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     // Check proof of work"
      },
      {
        "sha": "8298cb7c049ccf9c3a0ebea57050bf0d9073361c",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "patch": "@@ -65,6 +65,14 @@ bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Co\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n bool ContextualCheckBlock(const CBlock&, CValidationState&, const Consensus::Params&, const CBlockIndexBase*, PrevIndexGetter);\n \n+/** Block validation utilities */\n+\n+/**\n+ * BIP16 didn't become active until Apr 1 2012\n+ * Starts enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded\n+ */\n+unsigned int GetFlags(const CBlock&, const Consensus::Params&, CBlockIndexBase*, PrevIndexGetter indexGetter);\n+\n } // namespace Consensus\n \n /** Transaction validation utility functions */"
      },
      {
        "sha": "6393b01cafc248b226ffba09de5583c1a9938204",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "patch": "@@ -1612,22 +1612,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n-\n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n-\n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n-\n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus(), GetPrevIndex)) {\n-        flags |= SCRIPT_VERIFY_DERSIG;\n-    }\n-\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    unsigned int flags = Consensus::GetFlags(block, chainparams.GetConsensus(), pindex, GetPrevIndex);\n     int64_t nTimeStart = GetTimeMicros();\n     CAmount nFees = 0;\n     int nInputs = 0;"
      },
      {
        "sha": "28b0070ed50ae32024e7a42bd7e15239d08c8b0f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "patch": "@@ -242,6 +242,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         TxPriorityCompare comparer(fSortedByFee);\n         std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+        unsigned int flags = Consensus::GetFlags(*pblock, chainparams.GetConsensus(), pindexPrev, GetPrevIndex);\n \n         while (!vecPriority.empty())\n         {\n@@ -288,7 +289,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            if (!Consensus::CheckTxInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!Consensus::CheckTxInputsScripts(tx, state, view, flags, true))\n                 continue;\n \n             CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();"
      }
    ]
  },
  {
    "sha": "753349f9d913060f2fb3b85ccd08489bd752ee6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTMzNDlmOWQ5MTMwNjBmMmZiM2I4NWNjZDA4NDg5YmQ3NTJlZTZh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T06:35:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:33Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::EnforceBIP30",
      "tree": {
        "sha": "5e3cdcf8460e70735dea01c71e2a7d313c37c355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e3cdcf8460e70735dea01c71e2a7d313c37c355"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/753349f9d913060f2fb3b85ccd08489bd752ee6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/753349f9d913060f2fb3b85ccd08489bd752ee6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/753349f9d913060f2fb3b85ccd08489bd752ee6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/753349f9d913060f2fb3b85ccd08489bd752ee6a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ba7d0641019d7f6c08f7b15ce3a2bd2e5e8a4ac"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "2db9f0bb15339c129b48e33bb15f9bcaeb85febb",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=753349f9d913060f2fb3b85ccd08489bd752ee6a",
        "patch": "@@ -6,6 +6,8 @@\n #include \"consensus/consensus.h\"\n \n #include \"arith_uint256.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n #include \"script/interpreter.h\"\n@@ -146,6 +148,18 @@ unsigned Consensus::GetFlags(const CBlock& block, const Consensus::Params& conse\n     return flags;\n }\n \n+bool Consensus::EnforceBIP30(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev, const CCoinsViewCache& inputs)\n+{\n+    if (!(pindexPrev->nHeight==91842 && pindexPrev->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+        (pindexPrev->nHeight==91880 && pindexPrev->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")))\n+        for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+            const CCoins* coins = inputs.AccessCoins(block.vtx[i].GetHash());\n+            if (coins && !coins->IsPruned())\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-BIP30\");\n+        }\n+    return true;\n+}\n+\n bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     // Check proof of work"
      },
      {
        "sha": "3f673d9bd9762ba56eb0b1864c6635d87620a95e",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=753349f9d913060f2fb3b85ccd08489bd752ee6a",
        "patch": "@@ -13,6 +13,7 @@\n \n class CBlock;\n class CBlockHeader;\n+class CBlockIndex;\n class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n@@ -72,6 +73,21 @@ bool ContextualCheckBlock(const CBlock&, CValidationState&, const Consensus::Par\n  * Starts enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded\n  */\n unsigned int GetFlags(const CBlock&, const Consensus::Params&, CBlockIndexBase*, PrevIndexGetter indexGetter);\n+/**\n+ * Do not allow blocks that contain transactions which 'overwrite' older transactions,\n+ * unless those are already completely spent.\n+ * If such overwrites are allowed, coinbases and transactions depending upon those\n+ * can be duplicated to remove the ability to spend the first instance -- even after\n+ * being sent to another address.\n+ * See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+ * This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n+ * already refuses previously-known transaction ids entirely.\n+ * This rule was originally applied all blocks whose timestamp was after March 15, 2012, 0:00 UTC.\n+ * Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n+ * two in the chain that violate it. This prevents exploiting the issue against nodes in their\n+ * initial block download.\n+ */\n+bool EnforceBIP30(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev, const CCoinsViewCache& inputs);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "7644f3cbd8933d20769cc63955154c9f4a4b8f2c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 26,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753349f9d913060f2fb3b85ccd08489bd752ee6a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=753349f9d913060f2fb3b85ccd08489bd752ee6a",
        "patch": "@@ -1586,34 +1586,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n     }\n+    if (!Consensus::EnforceBIP30(block, state, pindex, view))\n+        return error(\"ConnectBlock(): tried to overwrite transaction\");\n \n     bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate();\n-\n-    // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n-    // unless those are already completely spent.\n-    // If such overwrites are allowed, coinbases and transactions depending upon those\n-    // can be duplicated to remove the ability to spend the first instance -- even after\n-    // being sent to another address.\n-    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n-    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n-    // already refuses previously-known transaction ids entirely.\n-    // This rule was originally applied all blocks whose timestamp was after March 15, 2012, 0:00 UTC.\n-    // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n-    // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n-    // initial block download.\n-    bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n-    if (fEnforceBIP30) {\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-            const CCoins* coins = view.AccessCoins(tx.GetHash());\n-            if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n-                                 REJECT_INVALID, \"bad-txns-BIP30\");\n-        }\n-    }\n-    CBlockUndo blockundo;\n-\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     unsigned int flags = Consensus::GetFlags(block, chainparams.GetConsensus(), pindex, GetPrevIndex);\n@@ -1624,6 +1600,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n+    CBlockUndo blockundo;\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {"
      }
    ]
  },
  {
    "sha": "6e65cdc790572a6ce05124e79754a425cc3f41e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTY1Y2RjNzkwNTcyYTZjZTA1MTI0ZTc5NzU0YTQyNWNjM2Y0MWU1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-07T21:16:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:33Z"
      },
      "message": "MOVEONLY: Consensus: Make IsSuperMajority static and move to blockverify.cpp:\n\nfrom main:\n-CheckBlock\n-ContextualCheckBlock\n-GetBlockSubsidy",
      "tree": {
        "sha": "2dd0c09ae80be05b33cbd897b75c5cbae91c9e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dd0c09ae80be05b33cbd897b75c5cbae91c9e5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e65cdc790572a6ce05124e79754a425cc3f41e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e65cdc790572a6ce05124e79754a425cc3f41e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e65cdc790572a6ce05124e79754a425cc3f41e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e65cdc790572a6ce05124e79754a425cc3f41e5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "753349f9d913060f2fb3b85ccd08489bd752ee6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/753349f9d913060f2fb3b85ccd08489bd752ee6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/753349f9d913060f2fb3b85ccd08489bd752ee6a"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 92,
      "deletions": 92
    },
    "files": [
      {
        "sha": "840fcab635fe76179db08a6531b95b65cec5817d",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 1,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=6e65cdc790572a6ce05124e79754a425cc3f41e5",
        "patch": "@@ -12,6 +12,7 @@\n #include \"primitives/block.h\"\n #include \"script/interpreter.h\"\n #include \"tinyformat.h\"\n+#include \"version.h\"\n \n #include <algorithm>  \n \n@@ -112,7 +113,11 @@ int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter indexGe\n     return pbegin[(pend - pbegin)/2];\n }\n \n-bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter indexGetter)\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+static bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter indexGetter)\n {\n     unsigned int nFound = 0;\n     for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n@@ -186,3 +191,89 @@ bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& s\n         return false;\n     return true;\n }\n+\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n+{\n+    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n+    // Force block reward to zero when right shift is undefined.\n+    if (halvings >= 64)\n+        return 0;\n+\n+    CAmount nSubsidy = 50 * COIN;\n+    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n+    nSubsidy >>= halvings;\n+    return nSubsidy;\n+}\n+\n+bool Consensus::CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW, bool fCheckMerkleRoot)\n+{\n+    // Check that the header is valid (particularly PoW).  This is mostly\n+    // redundant with the call in AcceptBlockHeader.\n+    if (!Consensus::CheckBlockHeader(block, state, consensusParams, nTime, fCheckPOW))\n+        return false;\n+\n+    // Check the merkle root.\n+    if (fCheckMerkleRoot) {\n+        bool mutated;\n+        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+        if (block.hashMerkleRoot != hashMerkleRoot2)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n+\n+        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+        // of transactions in a block without affecting the merkle root of a block,\n+        // while still invalidating it.\n+        if (mutated)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n+    }\n+\n+    // All potential-corruption validation must be done before we do any\n+    // transaction validation, as otherwise we may mark the header as invalid\n+    // because we receive the wrong transactions for it.\n+\n+    // Size limits\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n+\n+    // First transaction must be coinbase, the rest must not be\n+    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (block.vtx[i].IsCoinBase())\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n+\n+    // Check transactions\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        if (!Consensus::CheckTx(block.vtx[i], state))\n+            return false;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        nSigOps += GetLegacySigOpCount(block.vtx[i]);\n+\n+    if (nSigOps > MAX_BLOCK_SIGOPS)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n+\n+    return true;\n+}\n+\n+bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n+{\n+    const int nHeight = pindexPrev->nHeight + 1;\n+    // Check that all transactions are finalized\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (!CheckFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, indexGetter))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n+        }\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "70d9496e41aea2063cf39d518e1a7e1aa914a810",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=6e65cdc790572a6ce05124e79754a425cc3f41e5",
        "patch": "@@ -120,10 +120,5 @@ unsigned int GetNextWorkRequired(const CBlockIndexBase*, const CBlockHeader*, co\n unsigned int CalculateNextWorkRequired(const CBlockIndexBase* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "8424fe08cc11f69b16014742e278333cd7677239",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e65cdc790572a6ce05124e79754a425cc3f41e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6e65cdc790572a6ce05124e79754a425cc3f41e5",
        "patch": "@@ -1071,19 +1071,6 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n-{\n-    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n-    // Force block reward to zero when right shift is undefined.\n-    if (halvings >= 64)\n-        return 0;\n-\n-    CAmount nSubsidy = 50 * COIN;\n-    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n-    nSubsidy >>= halvings;\n-    return nSubsidy;\n-}\n-\n bool IsInitialBlockDownload()\n {\n     LOCK(cs_main);\n@@ -2310,57 +2297,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool Consensus::CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW, bool fCheckMerkleRoot)\n-{\n-    // Check that the header is valid (particularly PoW).  This is mostly\n-    // redundant with the call in AcceptBlockHeader.\n-    if (!Consensus::CheckBlockHeader(block, state, consensusParams, nTime, fCheckPOW))\n-        return false;\n-\n-    // Check the merkle root.\n-    if (fCheckMerkleRoot) {\n-        bool mutated;\n-        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n-        if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n-\n-        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n-        // of transactions in a block without affecting the merkle root of a block,\n-        // while still invalidating it.\n-        if (mutated)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n-    }\n-\n-    // All potential-corruption validation must be done before we do any\n-    // transaction validation, as otherwise we may mark the header as invalid\n-    // because we receive the wrong transactions for it.\n-\n-    // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n-\n-    // First transaction must be coinbase, the rest must not be\n-    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n-    for (unsigned int i = 1; i < block.vtx.size(); i++)\n-        if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n-\n-    // Check transactions\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        if (!Consensus::CheckTx(block.vtx[i], state))\n-            return false;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        nSigOps += GetLegacySigOpCount(block.vtx[i]);\n-\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n-\n-    return true;\n-}\n-\n static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const BlockMap& mapBlockIndex)\n {\n     assert(pindexPrev);\n@@ -2380,28 +2316,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n-{\n-    const int nHeight = pindexPrev->nHeight + 1;\n-    // Check that all transactions are finalized\n-    for (unsigned int i = 1; i < block.vtx.size(); i++)\n-        if (!CheckFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n-            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, indexGetter))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n-        }\n-    }\n-\n-    return true;\n-}\n-\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n     const CChainParams& chainparams = Params();"
      }
    ]
  },
  {
    "sha": "40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGZkMTBhN2ZkMzM3MTFjMmQ2NWE3MDEzY2JiMmQyZGNkZmU1ODQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T13:17:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T23:17:34Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyBlock()",
      "tree": {
        "sha": "de42540e804adea92678e023dcd6fe88289324a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de42540e804adea92678e023dcd6fe88289324a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e65cdc790572a6ce05124e79754a425cc3f41e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e65cdc790572a6ce05124e79754a425cc3f41e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e65cdc790572a6ce05124e79754a425cc3f41e5"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eda040176952a14cf217158f93f4954a11c25cd0",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
        "patch": "@@ -277,3 +277,12 @@ bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& stat\n \n     return true;\n }\n+\n+bool Consensus::VerifyBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n+{\n+    if (!CheckBlock(block, state, params, nTime, true, true))\n+        return false;\n+    if (!ContextualCheckBlock(block, state, params, pindexPrev, indexGetter))\n+        return false;\n+    return true;    \n+}"
      },
      {
        "sha": "21d1a6fa1bc033bdc8003ce9f61bacefe9008c35",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=40fd10a7fd33711c2d65a7013cbb2d2dcdfe5847",
        "patch": "@@ -63,6 +63,10 @@ bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, const Co\n \n /** Block validation functions */\n \n+/**\n+ * Fully verify a block.\n+ */\n+bool VerifyBlock(const CBlock&, CValidationState&, const Consensus::Params&, int64_t nTime, const CBlockIndexBase*, PrevIndexGetter);\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n bool ContextualCheckBlock(const CBlock&, CValidationState&, const Consensus::Params&, const CBlockIndexBase*, PrevIndexGetter);\n "
      }
    ]
  }
]