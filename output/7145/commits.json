[
  {
    "sha": "e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmE5OTU3NWRmZjA2MzQ3MWQwMzNhMGMxOGUxZjhjMGFmMGI1M2Y5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T15:05:39Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:07:56Z"
      },
      "message": "Mempool: Decouple CBlockPolicyEstimator from CTxMemPool",
      "tree": {
        "sha": "b19fb17f5f7e4b2e2dc0a71213c51798a35af368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b19fb17f5f7e4b2e2dc0a71213c51798a35af368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c4969f7d8cb2284dc9027ae55d9b979b8bfe5001",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -505,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -522,7 +522,6 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -541,7 +540,7 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -550,7 +549,6 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n "
      },
      {
        "sha": "892b5c15348475e1e8f50128b897f7388268f57b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -247,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    CFeeRate estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -256,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    double estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "eac852945beda18f366c3b72b90dedeedf7af461",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -25,8 +25,6 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "5184de8467142eb3080852f0f65b15d482a9b6d6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -714,7 +714,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -724,7 +724,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n \n bool"
      },
      {
        "sha": "e7ca6bc8736c84913e1249a2d6f5157cf4cdb819",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -20,6 +20,9 @@\n \n class CAutoFile;\n \n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+\n inline double AllowFreeThreshold()\n {\n     return COIN * 144 / 250;"
      }
    ]
  },
  {
    "sha": "f4bc7a25ff7cef1071e950f1e38f3268919518c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGJjN2EyNWZmN2NlZjEwNzFlOTUwZjFlMzhmMzI2ODkxOTUxOGM5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T03:59:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:37:23Z"
      },
      "message": "Mempool: Make possible to call the estimator without knowing about the mempool",
      "tree": {
        "sha": "b4779301c409e8ba8a59bade64899ef8d6585098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4779301c409e8ba8a59bade64899ef8d6585098"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4bc7a25ff7cef1071e950f1e38f3268919518c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4bc7a25ff7cef1071e950f1e38f3268919518c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4bc7a25ff7cef1071e950f1e38f3268919518c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4bc7a25ff7cef1071e950f1e38f3268919518c9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "453c8a8569320dc95b3f48ebc96b2e3af51421f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -18,6 +18,7 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n@@ -77,8 +78,8 @@ bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying, mining and transaction creation) */\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n-\n-CTxMemPool mempool(::minRelayTxFee);\n+CBlockPolicyEstimator globalFeePolicy(::minRelayTxFee);\n+CTxMemPool mempool(globalFeePolicy, ::minRelayTxFee);\n \n struct COrphanTx {\n     CTransaction tx;"
      },
      {
        "sha": "e700c573227ee264b87d729a7f5c4c53f09852b9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -29,6 +29,7 @@\n #include <boost/unordered_map.hpp>\n \n class CBlockIndex;\n+class CBlockPolicyEstimator;\n class CBlockTreeDB;\n class CBloomFilter;\n class CChainParams;\n@@ -108,6 +109,7 @@ struct BlockHasher\n \n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n+extern CBlockPolicyEstimator globalFeePolicy;\n extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;"
      },
      {
        "sha": "74fa9c5b720160bea10a195dc2de8e1689f20817",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"policy/fees.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n \n@@ -52,8 +53,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         txGrandChild[i].vout[0].nValue = 11000LL;\n     }\n \n-\n-    CTxMemPool testPool(CFeeRate(0));\n+    CBlockPolicyEstimator testFeePolicy(CFeeRate(0));\n+    CTxMemPool testPool(testFeePolicy, CFeeRate(0));\n     std::list<CTransaction> removed;\n \n     // Nothing in pool, remove should do nothing:\n@@ -114,7 +115,8 @@ void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n \n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n-    CTxMemPool pool(CFeeRate(0));\n+    CBlockPolicyEstimator testFeePolicy(CFeeRate(0));\n+    CTxMemPool pool(testFeePolicy, CFeeRate(0));\n     TestMemPoolEntryHelper entry;\n     entry.hadNoDependencies = true;\n \n@@ -286,7 +288,8 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n-    CTxMemPool pool(CFeeRate(1000));\n+    CBlockPolicyEstimator testFeePolicy(CFeeRate(1000));\n+    CTxMemPool pool(testFeePolicy, CFeeRate(1000));\n     TestMemPoolEntryHelper entry;\n     entry.dPriority = 10.0;\n "
      },
      {
        "sha": "b36d290c96842452206720311cf0c2393bbc4825",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -15,7 +15,8 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n-    CTxMemPool mpool(CFeeRate(1000));\n+    CBlockPolicyEstimator testFeePolicy(CFeeRate(1000));\n+    CTxMemPool mpool(testFeePolicy, CFeeRate(1000));\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     double basepri = 1e6;"
      },
      {
        "sha": "420c1d3279e16965a7686a407ecc58a51339f722",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -312,7 +312,7 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n     }\n }\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n+CTxMemPool::CTxMemPool(CBlockPolicyEstimator& feePolicy, const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n     _clear(); //lock free clear\n@@ -322,13 +322,12 @@ CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     // of transactions in the pool\n     nCheckFrequency = 0;\n \n-    minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n+    minerPolicyEstimator = &feePolicy;\n     minReasonableRelayFee = _minReasonableRelayFee;\n }\n \n CTxMemPool::~CTxMemPool()\n {\n-    delete minerPolicyEstimator;\n }\n \n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)"
      },
      {
        "sha": "3f69d601d675e2cfc18d2abd8697b9fcdd76b402",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4bc7a25ff7cef1071e950f1e38f3268919518c9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "patch": "@@ -362,7 +362,7 @@ class CTxMemPool\n      *  around what it \"costs\" to relay a transaction around the network and\n      *  below which we would reasonably say a transaction has 0-effective-fee.\n      */\n-    CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n+    CTxMemPool(CBlockPolicyEstimator& feePolicy, const CFeeRate& _minReasonableRelayFee);\n     ~CTxMemPool();\n \n     /**"
      }
    ]
  },
  {
    "sha": "850b186135c0c43a1511318d3e41e0e2514b1a9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTBiMTg2MTM1YzBjNDNhMTUxMTMxOGQzZTQxZTBlMjUxNGIxYTlh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T04:16:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:37:50Z"
      },
      "message": "Locks: Mempool: does mempool need to wait for estimations?",
      "tree": {
        "sha": "4f4ced08587b7c06351bf6c670cbd7d5fe5a12c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f4ced08587b7c06351bf6c670cbd7d5fe5a12c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/850b186135c0c43a1511318d3e41e0e2514b1a9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850b186135c0c43a1511318d3e41e0e2514b1a9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/850b186135c0c43a1511318d3e41e0e2514b1a9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850b186135c0c43a1511318d3e41e0e2514b1a9a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4bc7a25ff7cef1071e950f1e38f3268919518c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4bc7a25ff7cef1071e950f1e38f3268919518c9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a7636e90e824bd5aaf5831b52a1c4c1c8b1d6fe",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/850b186135c0c43a1511318d3e41e0e2514b1a9a/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/850b186135c0c43a1511318d3e41e0e2514b1a9a/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=850b186135c0c43a1511318d3e41e0e2514b1a9a",
        "patch": "@@ -284,6 +284,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n \n void CBlockPolicyEstimator::removeTx(uint256 hash)\n {\n+    LOCK(cs);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos == mapMemPoolTxs.end()) {\n         LogPrint(\"estimatefee\", \"Blockpolicy error mempool tx %s not found for removeTx\\n\",\n@@ -302,6 +303,7 @@ void CBlockPolicyEstimator::removeTx(uint256 hash)\n CBlockPolicyEstimator::CBlockPolicyEstimator(const CFeeRate& _minRelayFee)\n     : nBestSeenHeight(0)\n {\n+    LOCK(cs);\n     minTrackedFee = _minRelayFee < CFeeRate(MIN_FEERATE) ? CFeeRate(MIN_FEERATE) : _minRelayFee;\n     std::vector<double> vfeelist;\n     for (double bucketBoundary = minTrackedFee.GetFeePerK(); bucketBoundary <= MAX_FEERATE; bucketBoundary *= FEE_SPACING) {\n@@ -326,6 +328,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator(const CFeeRate& _minRelayFee)\n \n bool CBlockPolicyEstimator::isFeeDataPoint(const CFeeRate &fee, double pri)\n {\n+    LOCK(cs);\n     if ((pri < minTrackedPriority && fee >= minTrackedFee) ||\n         (pri < priUnlikely && fee > feeLikely)) {\n         return true;\n@@ -335,6 +338,7 @@ bool CBlockPolicyEstimator::isFeeDataPoint(const CFeeRate &fee, double pri)\n \n bool CBlockPolicyEstimator::isPriDataPoint(const CFeeRate &fee, double pri)\n {\n+    LOCK(cs);\n     if ((fee < minTrackedFee && pri >= minTrackedPriority) ||\n         (fee < feeUnlikely && pri > priLikely)) {\n         return true;\n@@ -344,6 +348,7 @@ bool CBlockPolicyEstimator::isPriDataPoint(const CFeeRate &fee, double pri)\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool fCurrentEstimate)\n {\n+    LOCK(cs);\n     unsigned int txHeight = entry.GetHeight();\n     uint256 hash = entry.GetTx().GetHash();\n     if (mapMemPoolTxs[hash].stats != NULL) {\n@@ -398,6 +403,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)\n {\n+    LOCK(cs);\n     if (!entry.WasClearAtEntry()) {\n         // This transaction depended on other transactions in the mempool to\n         // be included in a block before it was able to be included, so\n@@ -436,6 +442,7 @@ void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n                                          std::vector<CTxMemPoolEntry>& entries, bool fCurrentEstimate)\n {\n+    LOCK(cs);\n     if (nBlockHeight <= nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random\n         // they don't affect the estimate.\n@@ -493,6 +500,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n {\n+    LOCK(cs);\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n         return CFeeRate(0);\n@@ -507,6 +515,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n \n CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n+    LOCK(cs);\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n     // Return failure if trying to analyze a target we're not tracking\n@@ -533,6 +542,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int* answerFoun\n \n double CBlockPolicyEstimator::estimatePriority(int confTarget)\n {\n+    LOCK(cs);\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > priStats.GetMaxConfirms())\n         return -1;\n@@ -565,13 +575,15 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int* answerF\n \n void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n {\n+    LOCK(cs);\n     fileout << nBestSeenHeight;\n     feeStats.Write(fileout);\n     priStats.Write(fileout);\n }\n \n void CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n+    LOCK(cs);\n     int nFileBestSeenHeight;\n     filein >> nFileBestSeenHeight;\n     feeStats.Read(filein);"
      },
      {
        "sha": "e4f9d8c5e22aca3d598e2af9c12e56d13c0b873e",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/850b186135c0c43a1511318d3e41e0e2514b1a9a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/850b186135c0c43a1511318d3e41e0e2514b1a9a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=850b186135c0c43a1511318d3e41e0e2514b1a9a",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_POLICYESTIMATOR_H\n \n #include \"amount.h\"\n+#include \"sync.h\"\n #include \"uint256.h\"\n \n #include <map>\n@@ -217,6 +218,7 @@ static const double PRI_SPACING = 2;\n  */\n class CBlockPolicyEstimator\n {\n+    mutable CCriticalSection cs;\n public:\n     /** Create new BlockPolicyEstimator and initialize stats tracking classes with default values */\n     CBlockPolicyEstimator(const CFeeRate& minRelayFee);"
      }
    ]
  },
  {
    "sha": "cfbe7029d17d302fbb60202e915b18c47a928ab3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmJlNzAyOWQxN2QzMDJmYmI2MDIwMmU5MTViMThjNDdhOTI4YWIz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T04:18:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:52:41Z"
      },
      "message": "Mempool: Improve mempool's concurrency\n\n...while starting to decouple CTxMemPool from CBlockPolicyEstimator",
      "tree": {
        "sha": "decdc31d77c071a128e5de9e3eb64438c7b7bc00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/decdc31d77c071a128e5de9e3eb64438c7b7bc00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfbe7029d17d302fbb60202e915b18c47a928ab3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfbe7029d17d302fbb60202e915b18c47a928ab3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfbe7029d17d302fbb60202e915b18c47a928ab3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfbe7029d17d302fbb60202e915b18c47a928ab3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "850b186135c0c43a1511318d3e41e0e2514b1a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850b186135c0c43a1511318d3e41e0e2514b1a9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/850b186135c0c43a1511318d3e41e0e2514b1a9a"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 70,
      "deletions": 103
    },
    "files": [
      {
        "sha": "fd8ab6ec3b096a9fe14beb9aae5da8de584593e7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -22,6 +22,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n@@ -203,7 +204,7 @@ void Shutdown()\n         boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n-            mempool.WriteFeeEstimates(est_fileout);\n+            globalFeePolicy.Write(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n         fFeeEstimatesInitialized = false;\n@@ -1390,7 +1391,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n-        mempool.ReadFeeEstimates(est_filein);\n+        globalFeePolicy.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet"
      },
      {
        "sha": "afc4c9a773f60b2565386f13b15281ac27d2c27a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -7,6 +7,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"streams.h\"\n #include \"txmempool.h\"\n@@ -173,7 +174,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     return median;\n }\n \n-void TxConfirmStats::Write(CAutoFile& fileout)\n+void TxConfirmStats::Write(CAutoFile& fileout) const\n {\n     fileout << decay;\n     fileout << buckets;\n@@ -573,20 +574,41 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int* answerF\n     return median;\n }\n \n-void CBlockPolicyEstimator::Write(CAutoFile& fileout)\n+bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n-    LOCK(cs);\n-    fileout << nBestSeenHeight;\n-    feeStats.Write(fileout);\n-    priStats.Write(fileout);\n+    try {\n+        LOCK(cs);\n+        fileout << 109900; // version required to read: 0.10.99 or later\n+        fileout << CLIENT_VERSION; // version that wrote the file\n+        fileout << nBestSeenHeight;\n+        feeStats.Write(fileout);\n+        priStats.Write(fileout);\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n+        return false;\n+    }\n+    return true;\n }\n \n-void CBlockPolicyEstimator::Read(CAutoFile& filein)\n+bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n-    LOCK(cs);\n-    int nFileBestSeenHeight;\n-    filein >> nFileBestSeenHeight;\n-    feeStats.Read(filein);\n-    priStats.Read(filein);\n-    nBestSeenHeight = nFileBestSeenHeight;\n+    try {\n+        int nVersionRequired, nVersionThatWrote;\n+        filein >> nVersionRequired >> nVersionThatWrote;\n+        if (nVersionRequired > CLIENT_VERSION)\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n+\n+        LOCK(cs);\n+        int nFileBestSeenHeight;\n+        filein >> nFileBestSeenHeight;\n+        feeStats.Read(filein);\n+        priStats.Read(filein);\n+        nBestSeenHeight = nFileBestSeenHeight;\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n+        return false;\n+    }\n+    return true;\n }"
      },
      {
        "sha": "78901bd7caa482b7e228fe72f82758ba8921b6c6",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -167,7 +167,7 @@ class TxConfirmStats\n     unsigned int GetMaxConfirms() { return confAvg.size(); }\n \n     /** Write state of estimation data to a file*/\n-    void Write(CAutoFile& fileout);\n+    void Write(CAutoFile& fileout) const;\n \n     /**\n      * Read saved state of estimation data from a file and replace all internal data structures and\n@@ -242,17 +242,17 @@ class CBlockPolicyEstimator\n     /** Is this transaction likely included in a block because of its priority?*/\n     bool isPriDataPoint(const CFeeRate &fee, double pri);\n \n-    /** Return a fee estimate */\n-    CFeeRate estimateFee(int confTarget);\n+    /** Estimate fee rate needed to get into the next nBlocks */\n+    CFeeRate estimateFee(int nBlocks);\n \n     /** Estimate fee rate needed to get be included in a block within\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n     CFeeRate estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n-    /** Return a priority estimate */\n-    double estimatePriority(int confTarget);\n+    /** @deprecated Estimate priority needed to get into the next nBlocks */\n+    double estimatePriority(int nBlocks);\n \n     /** Estimate priority needed to get be included in a block within\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n@@ -261,10 +261,10 @@ class CBlockPolicyEstimator\n     double estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Write estimation data to a file */\n-    void Write(CAutoFile& fileout);\n+    bool Write(CAutoFile& fileout) const;\n \n     /** Read estimation data from a file */\n-    void Read(CAutoFile& filein);\n+    bool Read(CAutoFile& filein);\n \n private:\n     CFeeRate minTrackedFee; //! Passed to constructor to avoid dependency on main"
      },
      {
        "sha": "c9a27210572df6439863d10e30a5a1db9dee8167",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -13,6 +13,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"txmempool.h\"\n@@ -693,7 +694,7 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n-    CFeeRate feeRate = mempool.estimateFee(nBlocks);\n+    CFeeRate feeRate = globalFeePolicy.estimateFee(nBlocks);\n     if (feeRate == CFeeRate(0))\n         return -1.0;\n \n@@ -724,7 +725,7 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n-    return mempool.estimatePriority(nBlocks);\n+    return globalFeePolicy.estimatePriority(nBlocks);\n }\n \n UniValue estimatesmartfee(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "7736e4fef8170caf465b991361c95746b75b65fb",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -87,16 +87,16 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             // At this point we should need to combine 5 buckets to get enough data points\n             // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n             // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n-            BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(2) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(3) == CFeeRate(0));\n-            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(mpool.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(testFeePolicy.estimateFee(1) == CFeeRate(0));\n+            BOOST_CHECK(testFeePolicy.estimateFee(2) == CFeeRate(0));\n+            BOOST_CHECK(testFeePolicy.estimateFee(3) == CFeeRate(0));\n+            BOOST_CHECK(testFeePolicy.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(testFeePolicy.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n             int answerFound;\n-            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == mpool.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == mpool.estimateFee(8) && answerFound == 8);\n+            BOOST_CHECK(mpool.estimateSmartFee(1, &answerFound) == testFeePolicy.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(3, &answerFound) == testFeePolicy.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(4, &answerFound) == testFeePolicy.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(mpool.estimateSmartFee(8, &answerFound) == testFeePolicy.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -109,8 +109,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Second highest feerate has 100% chance of being included by 2 blocks,\n     // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n-        origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n-        origPriEst.push_back(mpool.estimatePriority(i));\n+        origFeeEst.push_back(testFeePolicy.estimateFee(i).GetFeePerK());\n+        origPriEst.push_back(testFeePolicy.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n@@ -128,10 +128,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n \n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] + deltaPri);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(testFeePolicy.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n+        BOOST_CHECK(testFeePolicy.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(testFeePolicy.estimatePriority(i) < origPriEst[i-1] + deltaPri);\n+        BOOST_CHECK(testFeePolicy.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n \n@@ -151,9 +151,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n \n     int answerFound;\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i) == CFeeRate(0) || mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(testFeePolicy.estimateFee(i) == CFeeRate(0) || testFeePolicy.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimateSmartFee(i, &answerFound).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) == -1 || mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(testFeePolicy.estimatePriority(i) == -1 || testFeePolicy.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n         BOOST_CHECK(mpool.estimateSmartPriority(i, &answerFound) > origPriEst[answerFound-1] - deltaPri);\n     }\n \n@@ -170,8 +170,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.removeForBlock(block, 265, dummyConflicted);\n     block.clear();\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(testFeePolicy.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(testFeePolicy.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n     // Mine 200 more blocks where everything is mined every block\n@@ -191,8 +191,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n     }\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n+        BOOST_CHECK(testFeePolicy.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(testFeePolicy.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }\n \n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= testFeePolicy.estimateFee(i).GetFeePerK());\n         BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n         BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n     }"
      },
      {
        "sha": "d49437cddb8bd6ed3da1325a2847becb78e8f1aa",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 47,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -705,62 +705,15 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n-CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimateFee(nBlocks);\n-}\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n-    LOCK(cs);\n     return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n-double CTxMemPool::estimatePriority(int nBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimatePriority(nBlocks);\n-}\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n-    LOCK(cs);\n     return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n \n-bool\n-CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n-{\n-    try {\n-        LOCK(cs);\n-        fileout << 109900; // version required to read: 0.10.99 or later\n-        fileout << CLIENT_VERSION; // version that wrote the file\n-        minerPolicyEstimator->Write(fileout);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n-bool\n-CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n-{\n-    try {\n-        int nVersionRequired, nVersionThatWrote;\n-        filein >> nVersionRequired >> nVersionThatWrote;\n-        if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n-\n-        LOCK(cs);\n-        minerPolicyEstimator->Read(filein);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {"
      },
      {
        "sha": "2b90c23bdd7cf724ece8f0e316adf380e7460601",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfbe7029d17d302fbb60202e915b18c47a928ab3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cfbe7029d17d302fbb60202e915b18c47a928ab3",
        "patch": "@@ -477,22 +477,12 @@ class CTxMemPool\n      */\n     CFeeRate estimateSmartFee(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n \n-    /** Estimate fee rate needed to get into the next nBlocks */\n-    CFeeRate estimateFee(int nBlocks) const;\n-\n     /** Estimate priority needed to get into the next nBlocks\n      *  If no answer can be given at nBlocks, return an estimate\n      *  at the lowest number of blocks where one can be given\n      */\n     double estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks = NULL) const;\n \n-    /** Estimate priority needed to get into the next nBlocks */\n-    double estimatePriority(int nBlocks) const;\n-    \n-    /** Write/Read estimates to disk */\n-    bool WriteFeeEstimates(CAutoFile& fileout) const;\n-    bool ReadFeeEstimates(CAutoFile& filein);\n-\n     size_t DynamicMemoryUsage() const;\n \n private:"
      }
    ]
  }
]