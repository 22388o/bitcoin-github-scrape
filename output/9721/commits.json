[
  {
    "sha": "dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDY4YTQ1NjY1YmM3YzhkZTI2YTliY2FmMTM1ODZiOWI1NmYwYmM0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-18T03:23:51Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2017-02-08T06:44:37Z"
      },
      "message": "Headers announcement for nodes that can do headers.",
      "tree": {
        "sha": "d6a64879a41e192648c2c1825d7c3673a1170375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a64879a41e192648c2c1825d7c3673a1170375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYmr5WAAoJEJYWlWnKgEH5PX8P/2kqpa7oCqtcgFiNlqvv4Z8X\nYRux/dYXJJeIRB42E5QYtxc7VySBYaK26mf+vpffY8lFQypTu8f7U8q6yDHH4k2x\nlj+3dI8Papp0xP/6IpXgYrV9/QIQ5Rum+L0hS9gk9AgVMQXfO80lVj9hFnb42jtT\nguM6eaKzzte+B/3ek0i4UZU8Kx5ANduTG0RuT1M0u95mQRDQZO4MuwoaOT7B5FG3\nD6DTyk/Qxqtdo21oFb7TNvDztUqJr/lUrkpj885aQFDhz1riXoTBwI2vZ6ie/A4K\nGI18mmgs+8PlJQm72K8VqMiaUrMGP1pOCLnVumitWqdTWGlpLpB3c4WEaU7uwbrd\napaWUhsKUlrTrteDXCqOrazKMzQL3RjuBv3bABIU8edP7pFQVXe2VRPWRmVwcH5K\nm/opkL7E7Siup0/uYt7gLrn6v5zdfFH/8GOLS/0rJNnc0ddAO30feUrc3UJHv5ex\nzwSpPjMcokewl6M9SSnzcFGUIKiY4I9wnlwfFdL7cOdJWptJxUnStdpeGmyYmLRU\nDdDbl5KaJX7QI3GHY6M9KtAL9LSrECcI6zvwtGvGPZt/loswGst42bwk4xSda1gO\nMDfhG3Biny/cn9pWwnR3Jo0/YST9bF55KoAk+hEzCvN1xDHjZDNZi02cBPnnpk4G\nqdR9zzfyroaC+3Y7+LkM\n=heSs\n-----END PGP SIGNATURE-----",
        "payload": "tree d6a64879a41e192648c2c1825d7c3673a1170375\nparent 1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce\nauthor R E Broadley <rebroad+github@gmail.com> 1476761031 +0700\ncommitter R E Broadley <rebroad+github@gmail.com> 1486536277 +0800\n\nHeaders announcement for nodes that can do headers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f63c9c0a8c1f2bf1393f9fe3598fcc4e33e39002",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dd68a45665bc7c8de26a9bcaf13586b9b56f0bc4",
        "patch": "@@ -179,6 +179,8 @@ struct CNodeState {\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n     bool fPreferHeaders;\n+    //! Whether this peer can process headers for block announcements.\n+    bool fCanDoHeaders;\n     //! Whether this peer wants invs or cmpctblocks (when possible) for block announcements.\n     bool fPreferHeaderAndIDs;\n     /**\n@@ -213,6 +215,7 @@ struct CNodeState {\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n+        fCanDoHeaders = false;\n         fPreferHeaderAndIDs = false;\n         fProvidesHeaderAndIDs = false;\n         fHaveWitness = false;\n@@ -1432,6 +1435,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n+        State(pfrom->GetId())->fCanDoHeaders = true;\n     }\n \n     else if (strCommand == NetMsgType::SENDCMPCT)\n@@ -1660,6 +1664,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     else if (strCommand == NetMsgType::GETHEADERS)\n     {\n+        State(pfrom->GetId())->fCanDoHeaders = true;\n+\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2861,7 +2867,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // add all to the inv queue.\n             LOCK(pto->cs_inventory);\n             std::vector<CBlock> vHeaders;\n-            bool fRevertToInv = ((!state.fPreferHeaders &&\n+            bool fRevertToInv = ((!state.fCanDoHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n             const CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n@@ -2945,7 +2951,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                         connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                     }\n                     state.pindexBestHeaderSent = pBestIndex;\n-                } else if (state.fPreferHeaders) {\n+                } else if (state.fCanDoHeaders) {\n                     if (vHeaders.size() > 1) {\n                         LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n                                 vHeaders.size(),"
      }
    ]
  }
]