[
  {
    "sha": "7bd633c39a7fd03a095eb3190bcda3c6def542e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmQ2MzNjMzlhN2ZkMDNhMDk1ZWIzMTkwYmNkYTNjNmRlZjU0MmUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-03T20:43:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T14:59:39Z"
      },
      "message": "Introduce basic modularization\n\nAccording to #3440 it would make sense to decouple the wallet and the miner (and maybe other things) from the init-/shutdown-process, etc.\n\nThis is related to #5686, #5744, #5745",
      "tree": {
        "sha": "05766f7ca2cf60e40abf62800a2f9043c0d3b4c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05766f7ca2cf60e40abf62800a2f9043c0d3b4c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bd633c39a7fd03a095eb3190bcda3c6def542e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bd633c39a7fd03a095eb3190bcda3c6def542e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bd633c39a7fd03a095eb3190bcda3c6def542e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bd633c39a7fd03a095eb3190bcda3c6def542e3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 184,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c84d12b09c999bcfbf3dbc0af6cea17970faf899",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -102,6 +102,7 @@ BITCOIN_CORE_H = \\\n   main.h \\\n   merkleblock.h \\\n   miner.h \\\n+  module.h \\\n   mruset.h \\\n   netbase.h \\\n   net.h \\\n@@ -172,6 +173,7 @@ libbitcoin_server_a_SOURCES = \\\n   main.cpp \\\n   merkleblock.cpp \\\n   miner.cpp \\\n+  module.cpp \\\n   net.cpp \\\n   noui.cpp \\\n   pow.cpp \\"
      },
      {
        "sha": "0fc5c62f956b2053ee76e43c7a99a7bf14b613d0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -51,6 +51,7 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n+  test/module_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "1d9da6689d0cf3c87788661cbfdfe42d9c6ff586",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -7,6 +7,7 @@\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"module.h\"\n #include \"noui.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -65,7 +66,8 @@ bool AppInit(int argc, char* argv[])\n     //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     ParseParameters(argc, argv);\n-\n+    Module::Signals.ParameterParsed();\n+    \n     // Process help and version before taking care about datadir\n     if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n@@ -97,6 +99,7 @@ bool AppInit(int argc, char* argv[])\n         try\n         {\n             ReadConfigFile(mapArgs, mapMultiArgs);\n+            Module::Signals.ConfigRead();\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "d306712fe6bca8b16df5fbbd2ec877d09861d20c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 1,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -16,6 +16,7 @@\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"module.h\"\n #include \"net.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n@@ -42,6 +43,7 @@\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n+#include <boost/signals2/signal.hpp>\n \n using namespace std;\n \n@@ -149,6 +151,7 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n+    Module::Signals.Shutdown(Module::SignalStageStarted);\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         bitdb.Flush(false);\n@@ -182,6 +185,7 @@ void Shutdown()\n         delete pblocktree;\n         pblocktree = NULL;\n     }\n+    Module::Signals.Shutdown(Module::SignalStageStage0);\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         bitdb.Flush(true);\n@@ -190,6 +194,7 @@ void Shutdown()\n     boost::filesystem::remove(GetPidFile());\n #endif\n     UnregisterAllValidationInterfaces();\n+    Module::Signals.Shutdown(Module::SignalStageFinished);\n #ifdef ENABLE_WALLET\n     delete pwalletMain;\n     pwalletMain = NULL;\n@@ -316,6 +321,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n     strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n #endif\n+    \n+    Module::Signals.AppendHelpMessage(strUsage);\n \n     strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n@@ -617,6 +624,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n     }\n \n+    Module::Signals.ValidateArguments();\n     if (GetBoolArg(\"-salvagewallet\", false)) {\n         // Rewrite just private keys: rescan to find transactions\n         if (SoftSetBoolArg(\"-rescan\", true))\n@@ -703,6 +711,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n+    string errorString;\n+    string warningString;\n+    Module::Signals.ParseArguments(errorString, warningString);\n+    //push message in case of received error/warnings\n+    if(!warningString.empty())\n+        InitWarning(warningString); //warning; pass\n+    if(!errorString.empty())\n+        return InitError(errorString); //stop on errors\n+    \n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n@@ -777,6 +794,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n+    Module::Signals.DebugStartupInfo(Module::SignalStageStarted);\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n #endif\n@@ -808,6 +826,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n+    \n+    errorString = string();\n+    warningString = string();\n+    Module::Signals.ModuleInit(Module::SignalStageStarted,errorString, warningString);\n+    if(!warningString.empty())\n+        InitWarning(warningString); //warning; pass\n+    if(!errorString.empty())\n+        return InitError(errorString); //stop on errors\n+    \n #ifdef ENABLE_WALLET\n     if (!fDisableWallet) {\n         LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n@@ -1099,6 +1126,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n+    \n+    errorString = string();\n+    warningString = string();\n+    Module::Signals.ModuleInit(Module::SignalStageStage0,errorString, warningString);\n+    if(!warningString.empty())\n+        InitWarning(warningString); //warning; pass\n+    if(!errorString.empty())\n+        return InitError(errorString); //stop on errors\n+    \n #ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n         pwalletMain = NULL;\n@@ -1273,13 +1309,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n+    Module::Signals.DebugStartupInfo(Module::SignalStageFinished);\n #ifdef ENABLE_WALLET\n     LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n     LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n     StartNode(threadGroup);\n+    Module::Signals.NodeStarted();\n \n #ifdef ENABLE_WALLET\n     // Generate coins in the background\n@@ -1291,7 +1329,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n-\n+    \n+    errorString = string();\n+    warningString = string();\n+    Module::Signals.ModuleInit(Module::SignalStageFinished,errorString, warningString);\n+    if(!warningString.empty())\n+        InitWarning(warningString); //warning; pass\n+    if(!errorString.empty())\n+        return InitError(errorString); //stop on errors\n+    \n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         // Add wallet transactions that aren't already in a block to mapTransactions"
      },
      {
        "sha": "21e371e7f70b045410c4380f66892d618cad3f00",
        "filename": "src/module.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/module.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/module.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/module.cpp?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"module.h\"\n+\n+Module::ModuleSignals Module::Signals;\n+std::vector<CModuleInterface *> Module::vLoadedModules;\n+\n+void Module::AddModule(CModuleInterface *module)\n+{\n+    module->registerModule();\n+    vLoadedModules.push_back(module);\n+}\n+    \n+void Module::RemoveAllModules()\n+{\n+    BOOST_FOREACH(CModuleInterface* module, vLoadedModules)\n+    {\n+        module->unregisterModule();\n+    }\n+    \n+    vLoadedModules.clear();\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "2ae9aeabb5ca4aeed868f3980b290fa1576ba7ac",
        "filename": "src/module.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/module.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/module.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/module.h?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MODULE_H\n+#define BITCOIN_MODULE_H\n+\n+#include <vector>\n+\n+#include <boost/foreach.hpp>\n+#include <boost/signals2/signal.hpp>\n+\n+class CModuleInterface\n+{\n+public:\n+    virtual ~CModuleInterface() {} ;\n+    \n+    virtual void registerModule() {};\n+    virtual void unregisterModule() {};\n+};\n+\n+class Module {\n+public:\n+\n+    enum SignalStage\n+    {\n+        SignalStageStarted,\n+        SignalStageStage0,\n+        SignalStageFinished\n+    };\n+    \n+    struct ModuleSignals {\n+        boost::signals2::signal<void (std::string&)> AppendHelpMessage; //!append modules help to the global help string\n+        boost::signals2::signal<void ()> ParameterParsed; //!signal after the parameters have been parsed\n+        boost::signals2::signal<void ()> ConfigRead; //!signal after the config was read completely\n+        boost::signals2::signal<void ()> ValidateArguments; //!possibility to validate arguments\n+        \n+        //!signal for parse startup arguments and possibility to stop the excution by adding a string to the error string\n+        boost::signals2::signal<void (std::string&,std::string&)> ParseArguments;\n+        boost::signals2::signal<void (SignalStage)> DebugStartupInfo; //! signal for pushing debug intos to the log\n+        boost::signals2::signal<void ()> NodeStarted; //! signal after the node has started\n+        boost::signals2::signal<void (SignalStage,std::string&,std::string&)> ModuleInit; //! signal for the init process\n+        \n+        boost::signals2::signal<void (SignalStage)> Shutdown; //! signal for the shutdown process\n+    };\n+    \n+    static ModuleSignals Signals;\n+\n+    static std::vector<CModuleInterface *> vLoadedModules;\n+\n+    static void AddModule(CModuleInterface *module);\n+    static void RemoveAllModules();\n+};\n+#endif // BITCOIN_MODULE_H\n\\ No newline at end of file"
      },
      {
        "sha": "5174ae59b3037a9319b8e8420db7a92a103ee9f6",
        "filename": "src/test/module_tests.cpp",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/test/module_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd633c39a7fd03a095eb3190bcda3c6def542e3/src/test/module_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/module_tests.cpp?ref=7bd633c39a7fd03a095eb3190bcda3c6def542e3",
        "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"module.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+class AModule : public CModuleInterface\n+{\n+public:\n+    void appendTest(string& aString)\n+    {\n+        aString += \" test\";\n+    }\n+    \n+    void registerModule()\n+    {\n+        Module::Signals.AppendHelpMessage.connect(boost::bind(&AModule::appendTest, this, _1));\n+    }\n+    \n+    void unregisterModule()\n+    {\n+        Module::Signals.AppendHelpMessage.disconnect(boost::bind(&AModule::appendTest, this, _1));\n+    }\n+};\n+\n+BOOST_AUTO_TEST_SUITE(module_tests)\n+\n+BOOST_AUTO_TEST_CASE(module_basics)\n+{\n+    AModule *newModule = new AModule();\n+    Module::AddModule(newModule);\n+    \n+    string newStr(\"START\");\n+    Module::Signals.AppendHelpMessage(newStr);\n+    BOOST_CHECK(newStr == \"START test\");\n+    \n+    Module::RemoveAllModules();\n+    \n+    newStr = string(\"\");\n+    Module::Signals.AppendHelpMessage(newStr);\n+    BOOST_CHECK(newStr == \"\");\n+    \n+    delete newModule;\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]