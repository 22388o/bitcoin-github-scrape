gmaxwell,2017-02-06T02:55:23Z,@sipa might have a suggestion for a cleaner way to do this?,https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-277575863,277575863,
sipa,2017-02-06T03:57:45Z,Alternative (as this is not used for data read from the network): restrict CVarInt to unsigned types only (the only reason to suggest this is because I'm not sure if there may be a performance impact of this PR as is).,https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-277581568,277581568,
laanwj,2017-02-06T08:25:03Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-277612908,277612908,
pstratem,2017-02-08T06:20:32Z,"A micro benchmark of this change on my laptop did not show any significant change in runtime.\n\n(This is a pretty bad benchmark though).",https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278239772,278239772,
sipa,2017-02-09T00:05:25Z,"tACK 45f09618f22f0a59d872818f28fc2a938cc98311\n\nI ran a benchmark: comparing the wall-clock time of the gettxoutsetinfo command's inner loop after commenting out the chainstate hash computation, on a node with 0 connections synced to block 250065. The chainstate was on a tmpfs. Done on i7-6820HQ CPU with frequency pegged to 2.60GHz, with 32 GiB of RAM, and dbcache=8000. Measurements using GetTi",https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278504086,278504086,
TheBlueMatt,2017-02-09T15:58:40Z,utACK 45f09618f22f0a59d872818f28fc2a938cc98311,https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278684732,278684732,
ryanofsky,2017-02-09T16:52:00Z,"It doesn't seem like the varint code supports negative numbers. Should there be a \n```static_assert(std::is_unsigned<I>::value, ""no support for signed varints"");``` somewhere in here?",https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278701473,278701473,
gmaxwell,2017-02-10T08:21:20Z,"@ryanofsky would have been good when it was written, unfortunately it's wrong right now-- ccoins uses it on nVersion which is signed, and the result is corrupted data (this is a known issue) fortunately we don't use the nversion for anything. (We should make sure that fact doesn't mean these exceptions can trigger.)",https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278884520,278884520,
practicalswift,2017-02-11T12:45:51Z,"@gmaxwell Nice find! Do you have a `test_bitcoin_fuzzy` test case to share that triggers this issue?\n\nI'm doing some bitcoin fuzzing myself and I'm curious to roughly how many CPU months that went into finding this issue and more specifically how many total paths that had been reached before finding this (the number printed at `overall results/total paths` assuming `afl-fuzz`)?\n\nFrom my ex",https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-279141687,279141687,
jtimon,2017-04-17T11:37:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-294466144,294466144,
dcousens,2017-02-06T03:13:32Z,"Could this not be done before `chData` is read?\nIt reads currently as though `chData` being read impacts this in some way",https://github.com/bitcoin/bitcoin/pull/9693#discussion_r99512340,99512340,src/serialize.h
sipa,2017-02-08T22:18:32Z,"It won't hurt as this branch will never be taken in non-exceptional situation, and at best it may improve ILP.",https://github.com/bitcoin/bitcoin/pull/9693#discussion_r100185209,100185209,src/serialize.h
dcousens,2017-02-08T23:38:08Z,I meant for readability,https://github.com/bitcoin/bitcoin/pull/9693#discussion_r100199213,100199213,src/serialize.h
