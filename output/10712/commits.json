[
  {
    "sha": "253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTNjZDdlYzRmYzkzMjRkMmMyYzNiYzZmMzI3OTRkZWQyNDU1ZWI3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-30T16:53:29Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T16:17:56Z"
      },
      "message": "Only reserve key for scriptChange once in CreateTransaction\n\nThis does not affect behavior but allows us to have access to an output to\nscriptChange even if we currently do not have change in the transaction.",
      "tree": {
        "sha": "1f4ccc84e640a0406b36fa8e2aed282da425f32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f4ccc84e640a0406b36fa8e2aed282da425f32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "53f39cf8e3e399e244fd3a8973f8fd9ee7fd6ab6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "patch": "@@ -2569,6 +2569,38 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n+            // Create change script that will be used if we need change\n+            // TODO: pass in scriptChange instead of reservekey so\n+            // change transaction isn't always pay-to-bitcoin-address\n+            CScript scriptChange;\n+\n+            // coin control: send change to custom address\n+            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n+                scriptChange = GetScriptForDestination(coinControl->destChange);\n+\n+            // no coin control: send change to newly generated address\n+            else\n+            {\n+                // Note: We use a new key here to keep it from being obvious which side is the change.\n+                //  The drawback is that by not reusing a previous key, the change may be lost if a\n+                //  backup is restored, if the backup doesn't have the new private key for the change.\n+                //  If we reused the old key, it would be possible to add code to look for and\n+                //  rediscover unknown transactions that were written with keys of ours to recover\n+                //  post-backup change.\n+\n+                // Reserve a new key pair from key pool\n+                CPubKey vchPubKey;\n+                bool ret;\n+                ret = reservekey.GetReservedKey(vchPubKey, true);\n+                if (!ret)\n+                {\n+                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                    return false;\n+                }\n+\n+                scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+            }\n+\n             nFeeRet = 0;\n             // Start with no fee and loop until there is enough fee\n             while (true)\n@@ -2627,37 +2659,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n-                    // TODO: pass in scriptChange instead of reservekey so\n-                    // change transaction isn't always pay-to-bitcoin-address\n-                    CScript scriptChange;\n-\n-                    // coin control: send change to custom address\n-                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-                    // no coin control: send change to newly generated address\n-                    else\n-                    {\n-                        // Note: We use a new key here to keep it from being obvious which side is the change.\n-                        //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                        //  backup is restored, if the backup doesn't have the new private key for the change.\n-                        //  If we reused the old key, it would be possible to add code to look for and\n-                        //  rediscover unknown transactions that were written with keys of ours to recover\n-                        //  post-backup change.\n-\n-                        // Reserve a new key pair from key pool\n-                        CPubKey vchPubKey;\n-                        bool ret;\n-                        ret = reservekey.GetReservedKey(vchPubKey, true);\n-                        if (!ret)\n-                        {\n-                            strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                            return false;\n-                        }\n-\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n-                    }\n-\n                     CTxOut newTxOut(nChange, scriptChange);\n \n                     // Never create dust outputs; if we would, just\n@@ -2666,7 +2667,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n-                        reservekey.ReturnKey();\n                     }\n                     else\n                     {\n@@ -2685,7 +2685,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 } else {\n-                    reservekey.ReturnKey();\n                     nChangePosInOut = -1;\n                 }\n \n@@ -2777,6 +2776,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             }\n         }\n \n+        if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change\n+\n         if (sign)\n         {\n             CTransaction txNewConst(txNew);"
      }
    ]
  },
  {
    "sha": "0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjQwMmI5MjYzYjA1NzliMjlhYTBmODQxZmM2NGFkNThkM2VmYmE2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-30T17:16:53Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T16:20:41Z"
      },
      "message": "Fix rare edge case of paying too many fees when transaction has no change.\n\nDue to the iterative process of selecting new coins in each loop a new fee is\ncalculated that needs to be met each time.  In the typical case if the most\nrecent iteration of the loop produced a much smaller transaction and we have now\ngathered inputs with too many fees, we can just reduce the change.  However in\nthe case where there is no change output, it is possible to end up with a\ntransaction which drastically overpays fees.  This commit addresses that case,\nby creating a change output if the overpayment is large enough to support it,\nthis is accomplished by rerunning the transaction creation loop without\nselecting new coins.\n\nThanks to instagibbs for working on this as well",
      "tree": {
        "sha": "e81471d049bb641e3d4dd6700b028c48269225ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e81471d049bb641e3d4dd6700b028c48269225ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 40,
      "deletions": 13
    },
    "files": [
      {
        "sha": "5e9701c71cde87b3febb32685cedfd15722185bd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 13,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0f402b9263b0579b29aa0f841fc64ad58d3efba6",
        "patch": "@@ -2600,8 +2600,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 scriptChange = GetScriptForDestination(vchPubKey.GetID());\n             }\n+            CTxOut change_prototype_txout(0, scriptChange);\n+            size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n \n             nFeeRet = 0;\n+            bool pick_new_inputs = true;\n+            CAmount nValueIn = 0;\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -2647,15 +2651,18 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 // Choose coins to use\n-                CAmount nValueIn = 0;\n-                setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n-                {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                if (pick_new_inputs) {\n+                    nValueIn = 0;\n+                    setCoins.clear();\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n+\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n@@ -2739,16 +2746,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if we have change\n-                    // output to increase.  This prevents potential overpayment\n-                    // in fees if the coins selected to meet nFeeNeeded result\n-                    // in a transaction that requires less fee than the prior\n-                    // iteration.\n+                    // Reduce fee to only the needed amount if possible. This\n+                    // prevents potential overpayment in fees if the coins\n+                    // selected to meet nFeeNeeded result in a transaction that\n+                    // requires less fee than the prior iteration.\n+\n                     // TODO: The case where nSubtractFeeFromAmount > 0 remains\n                     // to be addressed because it requires returning the fee to\n                     // the payees and not the change output.\n-                    // TODO: The case where there is no change output remains\n-                    // to be addressed so we avoid creating too small an output.\n+\n+                    // If we have no change and a big enough excess fee, then\n+                    // try to construct transaction again only without picking\n+                    // new inputs. We now know we only need the smaller fee\n+                    // (because of reduced tx size) and so we should add a\n+                    // change output. Only try this once.\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n+                    CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n+                    if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n+                        pick_new_inputs = false;\n+                        nFeeRet = nFeeNeeded + fee_needed_for_change;\n+                        continue;\n+                    }\n+\n+                    // If we have change output already, just increase it\n                     if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n                         CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n                         std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n@@ -2757,6 +2778,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     }\n                     break; // Done, enough fee included.\n                 }\n+                else if (!pick_new_inputs) {\n+                    // This shouldn't happen, we should have had enough excess\n+                    // fee to pay for the new output and still meet nFeeNeeded\n+                    strFailReason = _(\"Transaction fee and change calculation failed\");\n+                    return false;\n+                }\n \n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {"
      }
    ]
  }
]