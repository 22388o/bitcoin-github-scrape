[
  {
    "sha": "fa4c8679ed94f215ce895938f7c3c169a2ce101e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjODY3OWVkOTRmMjE1Y2U4OTU5MzhmN2MzYzE2OWEyY2UxMDFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-06T21:13:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-06T21:56:58Z"
      },
      "message": "rpc: Avoid creating non-standard raw transactions",
      "tree": {
        "sha": "de168a66e9c942f47fa3b24c3ab2864f23eb5448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de168a66e9c942f47fa3b24c3ab2864f23eb5448"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4c8679ed94f215ce895938f7c3c169a2ce101e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcCZsqAAoJEM4rdWl+aaVISeUMALfdZ75VUkmyLNB0Xaw5ap70\nuARdzyzQRsZ7kYzoamI+fnEgf28VJm10nLNsnFgmy7Ic9Ofo/1pKBVCEV+xMosqt\nTcAOh0E7jbWEW0sPz6xNG60eG0qBlfDzgaeYwHOkFHzZbP8QHkDSzm7ZXGUoM2mt\n2Qcwv1NH5pEpPw0vUtePIJriEd763EpBNFOYFl3u76rwKhyaZR4+dOp+m+IxTZRN\nhGqz4UIgCd1Xebp1DFeSVzJX5mQ6biBf6xS5MiXmGiu2T6SFUBYAW7lhPqpHlnly\nPD0oIGweLGS2Vpk+TC8+C66wmgaC3OJzzvcJJEgJRJ/Hi/ggkSBVwxvyCz9tM9j1\n4CPexWDkNrhT0bue3vlm2794ayrGMnoa3NC9OWRQxoWjoDVNToZFKaBLW/otYD6z\nx7vRBYfiHaGo8086qa8vbksIAZrfEmSFfwlIL9MTON+g9ZFsrPGZYZkkHyXK+ylB\nVjrkHlU9K/8VjoGqjhOhuzX/EFB6DlInrjpjqiLyQg==\n=b0m6\n-----END PGP SIGNATURE-----",
        "payload": "tree de168a66e9c942f47fa3b24c3ab2864f23eb5448\nparent f8456256c8cb68562c6392c6f715b64fcdfa3fe7\nauthor MarcoFalke <falke.marco@gmail.com> 1544130833 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1544133418 -0500\n\nrpc: Avoid creating non-standard raw transactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c8679ed94f215ce895938f7c3c169a2ce101e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4c8679ed94f215ce895938f7c3c169a2ce101e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c8679ed94f215ce895938f7c3c169a2ce101e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8456256c8cb68562c6392c6f715b64fcdfa3fe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8456256c8cb68562c6392c6f715b64fcdfa3fe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8456256c8cb68562c6392c6f715b64fcdfa3fe7"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "472b65f975d73e79a6423404034429890990f15a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa4c8679ed94f215ce895938f7c3c169a2ce101e",
        "patch": "@@ -397,7 +397,6 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.vin.push_back(in);\n     }\n \n-    std::set<CTxDestination> destinations;\n     if (!outputs_is_obj) {\n         // Translate array of key-value pairs into dict\n         UniValue outputs_dict = UniValue(UniValue::VOBJ);\n@@ -413,8 +412,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n         outputs = std::move(outputs_dict);\n     }\n+\n+    // Duplicate checking\n+    std::set<CTxDestination> destinations;\n+    bool has_data{false};\n+\n     for (const std::string& name_ : outputs.getKeys()) {\n         if (name_ == \"data\") {\n+            if (has_data) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n+            }\n+            has_data = true;\n             std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n \n             CTxOut out(0, CScript() << OP_RETURN << data);\n@@ -466,7 +474,8 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n@@ -1608,7 +1617,8 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {"
      },
      {
        "sha": "ff4839892585bfaf831c07b810a0347ed9bdb561",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fa4c8679ed94f215ce895938f7c3c169a2ce101e",
        "patch": "@@ -129,9 +129,6 @@ BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n \n-    // Allow more than one data transaction output\n-    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n-\n     // Key not \"data\" (bad address)\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), std::runtime_error);\n "
      },
      {
        "sha": "7d4800660616a188003c8206fb46de3c14f1a0b3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c8679ed94f215ce895938f7c3c169a2ce101e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa4c8679ed94f215ce895938f7c3c169a2ce101e",
        "patch": "@@ -4023,7 +4023,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {"
      },
      {
        "sha": "fc012e6e3a352720531fae060a5c1b1da5ba62ec",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c8679ed94f215ce895938f7c3c169a2ce101e/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c8679ed94f215ce895938f7c3c169a2ce101e/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa4c8679ed94f215ce895938f7c3c169a2ce101e",
        "patch": "@@ -100,6 +100,8 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], [{address: 1}, {address: 1}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], [{\"data\": 'aa'}, {\"data\": \"bb\"}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], multidict([(\"data\", 'aa'), (\"data\", \"bb\")]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair must contain exactly one key\", self.nodes[0].createrawtransaction, [], [{'a': 1, 'b': 2}])\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair not an object as expected\", self.nodes[0].createrawtransaction, [], [['key-value pair1'], ['2']])\n \n@@ -127,19 +129,12 @@ def run_test(self):\n             bytes_to_hex_str(tx.serialize()),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n-        # Two data outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([('data', '99'), ('data', '99')])))))\n-        assert_equal(len(tx.vout), 2)\n-        assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{'data': '99'}, {'data': '99'}]),\n-        )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), ('data', '99'), ('data', '99')])))))\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {'data': '99'}, {'data': '99'}]),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}, {'data': '99'}]),\n         )\n \n         for type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:"
      }
    ]
  }
]