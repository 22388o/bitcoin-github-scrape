buuser,2017-03-25T09:04:14Z,"NACK\n\nThis is an unnecessary addition to the codebase and consensus protocol. ",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-289199314,289199314,
jonasschnelli,2017-03-25T11:15:03Z,@buuser: please add some technical arguments or observations. Simply saying no is not appropriate here.,https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-289205550,289205550,
sdaftuar,2017-03-30T16:05:10Z,"I think BIP 180 is an interesting observation, but I don't think that it makes sense to merge an implementation of it into Bitcoin Core.\n\nFor BIP 180 support to be useful, Bitcoin Core would need to go out of its way to download and store invalid blocks to be able to generate proofs for light clients.  Currently, we make no effort to do this (in fact, from a very quick glance at the code in th",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290459075,290459075,
NicolasDorier,2017-04-01T15:03:51Z,"I think that a better, less intrusive way to do it, is to make it works in a ""gossip"" manner.\nInstead of having the client asking fraud proof for all the blocks, it would be up to the node to broadcast fraud messages in an unsollicited manner to other peers.\n\nA way of doing that would be: If node detect a fraud which pass PoW, then store in RAM up to X proofs, then broadcast them unsollicite",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290925526,290925526,
jnewbery,2017-04-01T18:37:09Z,"It'd be great to see BIP180 as a separate application or a fork of bitcoind, but concept NACK merging this to core for the reasons @sdaftuar sets out above. Adding this kind of functionality and the architecture changes required to make it work place too much of a maintenance burden on bitcoin core.",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290938825,290938825,
jnewbery,2017-04-01T19:13:21Z,"Alternatively, you could offer this as a PR to https://github.com/BitcoinUnlimited/BitcoinUnlimited . They already have all the necessary functionality to propogate and store invalid blocks, but I hear they've been having stability issues of late.",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290940928,290940928,
gmaxwell,2017-04-01T22:51:22Z,"Is there any willingness to support such a thing in any existing lite-clients?\n\nI think suhas' concern could be addressed by constructing a proof at the time we reject the block and saving it--- but the matter is moot unless someone will use it.\n\nAs an aside, thanks for going and implementing. It's good to see a version of this that isn't just talk.\n\n",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290952359,290952359,
NicolasDorier,2017-04-02T05:47:25Z,pinging @voisine,https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-290966356,290966356,
luke-jr,2017-07-17T06:31:42Z,Closing due to lack of interest.,https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-315676742,315676742,
jtimon,2017-07-18T01:26:10Z,"I am very interested in this, but I thought you said there was a flaw/missing_piece in the design on the mailing list.",https://github.com/bitcoin/bitcoin/pull/10074#issuecomment-315931225,315931225,
NicolasDorier,2017-03-30T08:50:27Z,probably need to test `(pIndex->nStatus & BLOCK_HAVE_DATA)` in case of pruned node.,https://github.com/bitcoin/bitcoin/pull/10074#discussion_r108872335,108872335,src/net_processing.cpp
