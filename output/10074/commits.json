[
  {
    "sha": "26331e30514c0fc7a64839d2fad5bdeffe119e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMzMWUzMDUxNGMwZmM3YTY0ODM5ZDJmYWQ1YmRlZmZlMTE5ZTky",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-23T04:07:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:10Z"
      },
      "message": "CSHA256: Allow importing/exporting midstate",
      "tree": {
        "sha": "817d20c03d0626fc850591100686f30808816956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/817d20c03d0626fc850591100686f30808816956"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26331e30514c0fc7a64839d2fad5bdeffe119e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26331e30514c0fc7a64839d2fad5bdeffe119e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26331e30514c0fc7a64839d2fad5bdeffe119e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26331e30514c0fc7a64839d2fad5bdeffe119e92/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d64bd929c9663ba38e96721c6dbd89972d043d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d64bd929c9663ba38e96721c6dbd89972d043d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d64bd929c9663ba38e96721c6dbd89972d043d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 36,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3711c27eca26884233daf21dbacc4ee0b7352dde",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26331e30514c0fc7a64839d2fad5bdeffe119e92/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26331e30514c0fc7a64839d2fad5bdeffe119e92/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=26331e30514c0fc7a64839d2fad5bdeffe119e92",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"crypto/common.h\"\n \n+#include <assert.h>\n #include <string.h>\n \n // Internal implementation code.\n@@ -164,6 +165,35 @@ CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n     return *this;\n }\n \n+void CSHA256::GetMidstate(void * const outp) const\n+{\n+    unsigned char * const out = (unsigned char*)outp;\n+    WriteBE32(out, s[0]);\n+    WriteBE32(out + 4, s[1]);\n+    WriteBE32(out + 8, s[2]);\n+    WriteBE32(out + 12, s[3]);\n+    WriteBE32(out + 16, s[4]);\n+    WriteBE32(out + 20, s[5]);\n+    WriteBE32(out + 24, s[6]);\n+    WriteBE32(out + 28, s[7]);\n+}\n+\n+void CSHA256::SetMidstate(const void *midstatep, uint64_t _bytes)\n+{\n+    const unsigned char * const midstate = (const unsigned char*)midstatep;\n+    assert(_bytes % 64 == 0);\n+    assert(!bytes);\n+    bytes = _bytes;\n+    s[0] = ReadBE32(midstate);\n+    s[1] = ReadBE32(midstate + 4);\n+    s[2] = ReadBE32(midstate + 8);\n+    s[3] = ReadBE32(midstate + 12);\n+    s[4] = ReadBE32(midstate + 16);\n+    s[5] = ReadBE32(midstate + 20);\n+    s[6] = ReadBE32(midstate + 24);\n+    s[7] = ReadBE32(midstate + 28);\n+}\n+\n void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n {\n     static const unsigned char pad[64] = {0x80};"
      },
      {
        "sha": "922760a5860b5db5ce99463b70a6c14a0f72a1de",
        "filename": "src/crypto/sha256.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26331e30514c0fc7a64839d2fad5bdeffe119e92/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26331e30514c0fc7a64839d2fad5bdeffe119e92/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=26331e30514c0fc7a64839d2fad5bdeffe119e92",
        "patch": "@@ -11,8 +11,11 @@\n /** A hasher class for SHA-256. */\n class CSHA256\n {\n+public:\n+    static const size_t MIDSTATE_SIZE = 32;\n+\n private:\n-    uint32_t s[8];\n+    uint32_t s[MIDSTATE_SIZE / 4];\n     unsigned char buf[64];\n     uint64_t bytes;\n \n@@ -21,6 +24,8 @@ class CSHA256\n \n     CSHA256();\n     CSHA256& Write(const unsigned char* data, size_t len);\n+    void GetMidstate(void *out) const;\n+    void SetMidstate(const void *midstate, uint64_t bytes);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA256& Reset();\n };"
      }
    ]
  },
  {
    "sha": "e256cd935050a5bc269f838b027d2fbe9c457c40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjU2Y2Q5MzUwNTBhNWJjMjY5ZjgzOGIwMjdkMmZiZTljNDU3YzQw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-23T12:00:34Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:17Z"
      },
      "message": "proofs/size: Initial size fraud proof class and code",
      "tree": {
        "sha": "3cb738d2dde146e6f204e0df802d0a16a5fde09a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cb738d2dde146e6f204e0df802d0a16a5fde09a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e256cd935050a5bc269f838b027d2fbe9c457c40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e256cd935050a5bc269f838b027d2fbe9c457c40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e256cd935050a5bc269f838b027d2fbe9c457c40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e256cd935050a5bc269f838b027d2fbe9c457c40/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26331e30514c0fc7a64839d2fad5bdeffe119e92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26331e30514c0fc7a64839d2fad5bdeffe119e92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26331e30514c0fc7a64839d2fad5bdeffe119e92"
      }
    ],
    "stats": {
      "total": 416,
      "additions": 416,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bbda0d7adceaf0d349fc3ee5594801a212816383",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e256cd935050a5bc269f838b027d2fbe9c457c40/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e256cd935050a5bc269f838b027d2fbe9c457c40/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e256cd935050a5bc269f838b027d2fbe9c457c40",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n+  proofs/size.h \\\n   protocol.h \\\n   random.h \\\n   reverselock.h \\\n@@ -193,6 +194,7 @@ libbitcoin_server_a_SOURCES = \\\n   policy/fees.cpp \\\n   policy/policy.cpp \\\n   pow.cpp \\\n+  proofs/size.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n   rpc/mining.cpp \\"
      },
      {
        "sha": "0ffc21a5cc3749eb6920f484952058ed898c1b32",
        "filename": "src/proofs/size.cpp",
        "status": "added",
        "additions": 311,
        "deletions": 0,
        "changes": 311,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e256cd935050a5bc269f838b027d2fbe9c457c40/src/proofs/size.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e256cd935050a5bc269f838b027d2fbe9c457c40/src/proofs/size.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.cpp?ref=e256cd935050a5bc269f838b027d2fbe9c457c40",
        "patch": "@@ -0,0 +1,311 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"size.h\"\n+\n+#include \"crypto/sha256.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"streams.h\"\n+#include \"version.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <vector>\n+\n+size_t CBlockSizeProofComponent::CalculateDataInMidstate(size_t nFullLength)\n+{\n+    const size_t sizePaddedMin = nFullLength + 1 + 8;\n+    const size_t totalShaChunks = (sizePaddedMin + 63) / 64;  // ceil(sizePaddedMin / 64)\n+    const size_t dataInMidstate = (totalShaChunks - 1) * 64;\n+    return dataInMidstate;\n+}\n+\n+CBlockSizeProofComponent::CBlockSizeProofComponent(const CTransaction& tx, const int serialFlags) :\n+    nTxRepresentedLog2plus1(0)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serialFlags);\n+    ssTx << tx;\n+    nTxSize = ssTx.size();\n+    const size_t dataInMidstate = CalculateDataInMidstate(nTxSize);\n+\n+    {\n+        CSHA256 hasher;\n+        hasher.Write((unsigned char *)ssTx.data(), dataInMidstate);\n+        hasher.GetMidstate(u256.begin());\n+    }\n+\n+    const size_t sizeLastChunk = nTxSize - dataInMidstate;\n+    vchLastChunk.resize(sizeLastChunk);\n+    memcpy(&vchLastChunk[0], &ssTx[dataInMidstate], sizeLastChunk);\n+}\n+\n+CBlockSizeProofComponent::CBlockSizeProofComponent(size_t nTxRepresentedLog2, const uint256& merklelink) :\n+    nTxRepresentedLog2plus1(nTxRepresentedLog2 + 1),\n+    u256(merklelink)\n+{\n+}\n+\n+uint256 CBlockSizeProofComponent::GetTxHash() const\n+{\n+    if (!IsFullTxProof()) {\n+        return u256;\n+    }\n+    const size_t dataInMidstate = CalculateDataInMidstate(nTxSize);\n+    CSHA256 hasher;\n+    hasher.SetMidstate(u256.begin(), dataInMidstate);\n+    hasher.Write(vchLastChunk.data(), vchLastChunk.size());\n+    uint256 hash;\n+    hasher.Finalize(hash.begin());\n+    return hash;\n+}\n+\n+uint32_t CBlockSizeProof::ceil_log2(size_t n)\n+{\n+    // TODO: Is there a builtin/assembly for this?\n+    --n;\n+    uint32_t d = 0;\n+    while (n) {\n+        ++d;\n+        n >>= 1;\n+    }\n+    return d;\n+}\n+\n+CBlockSizeProof::CBlockSizeProof(const CBlock& block, size_t nProveWeight)\n+{\n+    const size_t nTxCount = block.vtx.size();\n+    nTxCountLog2 = ceil_log2(nTxCount);\n+\n+    std::vector<size_t> vFillStripped, vFillWitness;\n+    BuildFillLists(block, nProveWeight, vFillStripped, vFillWitness);\n+    FillComponents(componentsStripped, block, vFillStripped, SERIALIZE_TRANSACTION_NO_WITNESS);\n+    FillComponents(componentsFull, block, vFillWitness, 0);\n+\n+    assert(Verify(block.hashMerkleRoot));\n+}\n+\n+void CBlockSizeProof::BuildFillLists(const CBlock& block, size_t nProveWeight, std::vector<size_t>& vFillStripped, std::vector<size_t>& vFillWitness)\n+{\n+    struct TxPenalty {\n+        enum PenaltyType {\n+            PT_StrippedOnly = 1,\n+            PT_WitnessOnly = 2,\n+            PT_Full = 3,\n+        };\n+        TxPenalty(size_t _index) : index(_index) { }\n+        bool operator< (const TxPenalty& other) const {\n+            return this->penalty < other.penalty;\n+        }\n+        size_t index;\n+        PenaltyType type;\n+        size_t penalty;\n+        size_t weight_stripped;\n+        size_t weight_witness;\n+    };\n+    std::vector<TxPenalty> TxPenalties;\n+    const size_t nTxCount = block.vtx.size();\n+    TxPenalties.reserve(nTxCount);\n+    for (size_t i = 0; i < nTxCount; ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        TxPenalty penalty(i);\n+        // To prove the stripped size uses half the data\n+        const size_t nTxSizeStripped = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        penalty.type = TxPenalty::PT_StrippedOnly;\n+        penalty.penalty = nTxSizeStripped * 2;\n+        penalty.weight_stripped = nTxSizeStripped * WITNESS_SCALE_FACTOR;\n+        if (tx.HasWitness()) {\n+            const size_t weight = GetTransactionWeight(tx);\n+            penalty.weight_witness = weight - penalty.weight_stripped;\n+            if (weight > penalty.penalty) {\n+                penalty.type = TxPenalty::PT_Full;\n+                penalty.penalty = weight;\n+            }\n+        } else {\n+            penalty.weight_witness = 0;\n+        }\n+        TxPenalties.push_back(penalty);\n+    }\n+    std::make_heap(TxPenalties.begin(), TxPenalties.end());\n+\n+    const uint32_t nTxCountLog2 = ceil_log2(nTxCount);\n+    size_t nMinTxCount = CalculateMinTxCount(nTxCountLog2), nFilledTx = 0, nExplicitSum = 0;\n+    while (((nMinTxCount - nFilledTx) * ABSOLUTE_MINIMUM_TX_WEIGHT) + nExplicitSum + (::GetSerializeSize(VARINT(nMinTxCount), SER_NETWORK, PROTOCOL_VERSION) * WITNESS_SCALE_FACTOR) <= nProveWeight || !nFilledTx) {\n+        const TxPenalty& penalty = TxPenalties.front();\n+        const CTransaction& tx = *block.vtx[penalty.index];\n+        if (penalty.type & TxPenalty::PT_StrippedOnly) {\n+            vFillStripped.push_back(penalty.index);\n+            ++nFilledTx;\n+            nExplicitSum += penalty.weight_stripped;\n+\n+            // Check if this is enough\n+            if (((nMinTxCount - nFilledTx) * ABSOLUTE_MINIMUM_TX_WEIGHT) + nExplicitSum + (::GetSerializeSize(VARINT(nMinTxCount), SER_NETWORK, PROTOCOL_VERSION) * WITNESS_SCALE_FACTOR) > nProveWeight) {\n+                break;\n+            }\n+        }\n+        if (penalty.type & TxPenalty::PT_WitnessOnly) {\n+            vFillWitness.push_back(penalty.index);\n+            nExplicitSum += penalty.weight_witness;\n+        } else if (tx.HasWitness()) {\n+            // Add just the witness data back in in case we still need it\n+            TxPenalty new_penalty = penalty;\n+            new_penalty.type = TxPenalty::PT_WitnessOnly;\n+            new_penalty.penalty = penalty.weight_witness;\n+            TxPenalties.push_back(new_penalty);\n+            std::push_heap(TxPenalties.begin(), TxPenalties.end());\n+        }\n+\n+        if (penalty.index >= nMinTxCount) {\n+            nMinTxCount = penalty.index + 1;\n+        }\n+\n+        std::pop_heap(TxPenalties.begin(), TxPenalties.end());\n+        TxPenalties.pop_back();\n+    }\n+}\n+\n+void CBlockSizeProof::FillComponents(std::vector<CBlockSizeProofComponent>& components, const CBlock& block, std::vector<size_t>& vFillIndexes, const int serialFlags)\n+{\n+    size_t posNext = 0;\n+    vFillIndexes.push_back(block.vtx.size());\n+    std::make_heap(vFillIndexes.begin(), vFillIndexes.end());\n+    while (true) {\n+        const size_t index = vFillIndexes.front();\n+        std::pop_heap(vFillIndexes.begin(), vFillIndexes.end());\n+        vFillIndexes.pop_back();\n+\n+        // TODO: Collapse to merkle links\n+        for (size_t pos = posNext; pos < index; ++pos) {\n+            components.emplace_back(1, block.vtx[pos]->GetHash());\n+        }\n+\n+        if (vFillIndexes.empty()) {\n+            break;\n+        }\n+\n+        components.emplace_back(*block.vtx[index], serialFlags);\n+    }\n+}\n+\n+size_t CBlockSizeProof::CalculateMinTxCount(uint32_t TxCountLog2)\n+{\n+    if (TxCountLog2) {\n+        return (1 << (TxCountLog2 - 1)) + 1;\n+    } else {\n+        // Only occurs for blocks with 1 tx\n+        return 1;\n+    }\n+}\n+\n+void CBlockSizeProof::CollapseHashes(std::vector<uint256>& hashes)\n+{\n+    const uint256 rhs = hashes.back();\n+    hashes.pop_back();\n+    const uint256& lhs = hashes.back();\n+    CSHA256 hasher;\n+    hasher.Write(lhs.begin(), lhs.size()).Write(rhs.begin(), rhs.size());\n+    uint256& out = hashes.back();\n+    hasher.Finalize(out.begin());\n+}\n+\n+bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n+{\n+    bool fFoundFullTx = false;\n+    size_t index = 0;\n+    std::vector<uint256> hashes;\n+    for (auto& component : componentsStripped) {\n+        uint32_t skipcollapse;\n+        if (component.IsFullTxProof()) {\n+            fFoundFullTx = true;\n+            skipcollapse = 0;\n+        } else {\n+            skipcollapse = component.GetTxRepresentedLog2();\n+            const size_t txrepr = 1 << skipcollapse;\n+            if (index % txrepr != txrepr - 1) {\n+                return false;\n+            }\n+            index += txrepr - 1;\n+        }\n+\n+        hashes.push_back(component.GetTxHash());\n+        for (size_t i = index >> skipcollapse; i & 1; i >>= 1) {\n+            CollapseHashes(hashes);\n+        }\n+\n+        ++index;\n+    }\n+    if (!fFoundFullTx) {\n+        return false;\n+    }\n+    while (hashes.size() > 1) {\n+        uint32_t skipcollapse = 0;\n+        for (size_t i = index; i & 0; i >>= 1) {\n+            ++skipcollapse;\n+        }\n+        const size_t txrepr = 1 << skipcollapse;\n+        index += txrepr - 1;\n+\n+        hashes.push_back(hashes.back());\n+        for (size_t i = index >> skipcollapse; i & 1; i >>= 1) {\n+            CollapseHashes(hashes);\n+        }\n+        ++index;\n+    }\n+    // TODO: Check that if there are any duplicate merkle links, there are no full tx proofs on the right side of them.\n+    // TODO: Check witness root hash\n+    return (hashes.back() == merkleroot);\n+}\n+\n+void CBlockSizeProof::GetBlockLowerBounds(size_t &nMinStrippedSize, size_t &nMinFullSize, size_t &nMinWeight) const\n+{\n+    size_t index, IndexLastFullTxProof = 0;\n+    std::vector<std::pair<size_t, size_t>> vSizes;\n+    vSizes.reserve(1 << nTxCountLog2);\n+\n+    index = 0;\n+    for (auto& component : componentsStripped) {\n+        if (component.IsFullTxProof()) {\n+            vSizes[index].first = component.GetTxSize();\n+            IndexLastFullTxProof = index;\n+            ++index;\n+        } else {\n+            const uint32_t txrepr_log2 = component.GetTxRepresentedLog2();\n+            const size_t txrepr = 1 << txrepr_log2;\n+            index += txrepr;\n+        }\n+    }\n+\n+    index = 0;\n+    for (auto& component : componentsFull) {\n+        if (component.IsFullTxProof()) {\n+            vSizes[index].second += component.GetTxSize() - vSizes[index].first;\n+            if (IndexLastFullTxProof < index) {\n+                IndexLastFullTxProof = index;\n+            }\n+            ++index;\n+        } else {\n+            const uint32_t txrepr_log2 = component.GetTxRepresentedLog2();\n+            const size_t txrepr = 1 << txrepr_log2;\n+            index += txrepr;\n+        }\n+    }\n+\n+    size_t nMinTxCount = CalculateMinTxCount(nTxCountLog2);\n+    if (IndexLastFullTxProof >= nMinTxCount) {\n+        nMinTxCount = IndexLastFullTxProof + 1;\n+    }\n+\n+    nMinStrippedSize = BLOCKHEADER_SIZE + ::GetSerializeSize(VARINT(nMinTxCount), SER_NETWORK, PROTOCOL_VERSION);\n+    size_t nMinWitnessSize = 0;\n+    for (index = 0; index < nMinTxCount; ++index) {\n+        if (!vSizes[index].first) {\n+            vSizes[index].first = ABSOLUTE_MINIMUM_TX_SIZE;\n+        }\n+        nMinStrippedSize += vSizes[index].first + vSizes[index].second;\n+        nMinWitnessSize += vSizes[index].second;\n+    }\n+    nMinFullSize = nMinStrippedSize + nMinWitnessSize;\n+    nMinWeight = (nMinStrippedSize * WITNESS_SCALE_FACTOR) + nMinWitnessSize;\n+}"
      },
      {
        "sha": "1008c3cfe5788b0c94d79fe109bfcd216355fb47",
        "filename": "src/proofs/size.h",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e256cd935050a5bc269f838b027d2fbe9c457c40/src/proofs/size.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e256cd935050a5bc269f838b027d2fbe9c457c40/src/proofs/size.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.h?ref=e256cd935050a5bc269f838b027d2fbe9c457c40",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PROOFS_SIZE_H\n+#define BITCOIN_PROOFS_SIZE_H\n+\n+#include \"consensus/consensus.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+\n+class CBlock;\n+\n+class CBlockSizeProofComponent\n+{\n+private:\n+    size_t nTxRepresentedLog2plus1;\n+    uint256 u256;  // Either merkle-link hash, or SHA256 midstate\n+    size_t nTxSize;\n+    std::vector<unsigned char> vchLastChunk;\n+\n+public:\n+    CBlockSizeProofComponent() = delete;\n+    CBlockSizeProofComponent(const CTransaction&, int serialFlags);\n+    CBlockSizeProofComponent(size_t TxRepresentedLog2, const uint256&);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nTxRepresentedLog2plus1));\n+        READWRITE(u256);\n+        if (nTxRepresentedLog2plus1) {\n+            vchLastChunk.clear();\n+        } else {\n+            READWRITE(VARINT(nTxSize));\n+            READWRITE(vchLastChunk);\n+        }\n+    }\n+\n+    bool IsFullTxProof() const {\n+        return !nTxRepresentedLog2plus1;\n+    }\n+\n+    size_t GetTxRepresentedLog2() const {\n+        assert(nTxRepresentedLog2plus1);\n+        return nTxRepresentedLog2plus1 - 1;\n+    }\n+\n+    size_t GetTxRepresented() const {\n+        return 1 << GetTxRepresentedLog2();\n+    }\n+\n+    size_t GetTxSize() const {\n+        assert(!nTxRepresentedLog2plus1);\n+        return nTxSize;\n+    }\n+\n+    uint256 GetTxHash() const;\n+\n+private:\n+    static size_t CalculateDataInMidstate(size_t nFullLength);\n+};\n+\n+class CBlockSizeProof {\n+private:\n+    uint32_t nTxCountLog2;\n+    std::vector<CBlockSizeProofComponent> componentsStripped;\n+    std::vector<CBlockSizeProofComponent> componentsFull;\n+\n+public:\n+    static const size_t BLOCKHEADER_SIZE = 80;\n+    static const size_t ABSOLUTE_MINIMUM_TX_SIZE = 60;\n+    static const uint64_t ABSOLUTE_MINIMUM_TX_WEIGHT = ABSOLUTE_MINIMUM_TX_SIZE * WITNESS_SCALE_FACTOR;\n+\n+    CBlockSizeProof() : nTxCountLog2(0) { }\n+    CBlockSizeProof(const CBlock&, size_t nProveWeight = MAX_BLOCK_WEIGHT);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nTxCountLog2));\n+        READWRITE(componentsStripped);\n+        READWRITE(componentsFull);\n+    }\n+\n+    static size_t CalculateMinTxCount(uint32_t nTxCountLog2);\n+    bool Verify(const uint256& merkleroot) const;\n+    void GetBlockLowerBounds(size_t &nMinStrippedSize, size_t &nMinFullSize, size_t &nMinWeight) const;\n+\n+private:\n+    static uint32_t ceil_log2(size_t n);\n+    static void BuildFillLists(const CBlock&, size_t nProveWeight, std::vector<size_t>& vFillStripped, std::vector<size_t>& vFillWitness);\n+    void FillComponents(std::vector<CBlockSizeProofComponent>& components, const CBlock&, std::vector<size_t>& vFillIndexes, int serialFlags);\n+    static void CollapseHashes(std::vector<uint256>& hashes);\n+    static size_t GetBlockMinSizeForComponents(const std::vector<CBlockSizeProofComponent>&);\n+};\n+\n+#endif // BITCOIN_PROOFS_SIZE_H"
      }
    ]
  },
  {
    "sha": "4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZThjMjEzOGZjMzNkMWM4ZDI1ODIxZmUzMWRmYTYwYmFjYzk0ZTYz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T05:57:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:17Z"
      },
      "message": "proofs/size: Check full-size proof itself",
      "tree": {
        "sha": "4ce81884a880504cef4906602dec676ea5b426ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ce81884a880504cef4906602dec676ea5b426ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e256cd935050a5bc269f838b027d2fbe9c457c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e256cd935050a5bc269f838b027d2fbe9c457c40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e256cd935050a5bc269f838b027d2fbe9c457c40"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 26,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e5ff8a9b7bbe16e6fbc8230f0b2caff678835efa",
        "filename": "src/proofs/size.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63/src/proofs/size.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63/src/proofs/size.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.cpp?ref=4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
        "patch": "@@ -210,12 +210,11 @@ void CBlockSizeProof::CollapseHashes(std::vector<uint256>& hashes)\n     hasher.Finalize(out.begin());\n }\n \n-bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n+bool CBlockSizeProof::VerifyComponents(const std::vector<CBlockSizeProofComponent>& components, uint256& merkleroot, bool& fFoundFullTx, size_t& index)\n {\n-    bool fFoundFullTx = false;\n-    size_t index = 0;\n+    index = 0;\n     std::vector<uint256> hashes;\n-    for (auto& component : componentsStripped) {\n+    for (auto& component : components) {\n         uint32_t skipcollapse;\n         if (component.IsFullTxProof()) {\n             fFoundFullTx = true;\n@@ -236,9 +235,6 @@ bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n \n         ++index;\n     }\n-    if (!fFoundFullTx) {\n-        return false;\n-    }\n     while (hashes.size() > 1) {\n         uint32_t skipcollapse = 0;\n         for (size_t i = index; i & 0; i >>= 1) {\n@@ -254,8 +250,28 @@ bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n         ++index;\n     }\n     // TODO: Check that if there are any duplicate merkle links, there are no full tx proofs on the right side of them.\n-    // TODO: Check witness root hash\n-    return (hashes.back() == merkleroot);\n+    merkleroot = hashes.back();\n+    return true;\n+}\n+\n+bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n+{\n+    bool fFoundFullTx = false;\n+    size_t txcount_stripped, txcount;\n+    uint256 calculated_merkleroot;\n+    if ((!VerifyComponents(componentsStripped, calculated_merkleroot, fFoundFullTx, txcount_stripped)) || calculated_merkleroot != merkleroot) {\n+        return false;\n+    }\n+    if (!componentsFull.empty()) {\n+        if (!VerifyComponents(componentsFull, calculated_merkleroot, fFoundFullTx, txcount)) {\n+            return false;\n+        }\n+        // TODO: Check witness root hash\n+    }\n+    if (!fFoundFullTx) {\n+        return false;\n+    }\n+    return true;\n }\n \n void CBlockSizeProof::GetBlockLowerBounds(size_t &nMinStrippedSize, size_t &nMinFullSize, size_t &nMinWeight) const"
      },
      {
        "sha": "df3f15f53f41fc213532edd4a96c92113675f043",
        "filename": "src/proofs/size.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63/src/proofs/size.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63/src/proofs/size.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.h?ref=4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
        "patch": "@@ -96,6 +96,7 @@ class CBlockSizeProof {\n     static uint32_t ceil_log2(size_t n);\n     static void BuildFillLists(const CBlock&, size_t nProveWeight, std::vector<size_t>& vFillStripped, std::vector<size_t>& vFillWitness);\n     void FillComponents(std::vector<CBlockSizeProofComponent>& components, const CBlock&, std::vector<size_t>& vFillIndexes, int serialFlags);\n+    static bool VerifyComponents(const std::vector<CBlockSizeProofComponent>& components, uint256& out_merkleroot, bool& inout_fFoundFullTx, size_t& out_txcount);\n     static void CollapseHashes(std::vector<uint256>& hashes);\n     static size_t GetBlockMinSizeForComponents(const std::vector<CBlockSizeProofComponent>&);\n };"
      }
    ]
  },
  {
    "sha": "64a4dd54f2544ec9247d34a128172281c24bf4a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGE0ZGQ1NGYyNTQ0ZWM5MjQ3ZDM0YTEyODE3MjI4MWMyNGJmNGEz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T06:27:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:17Z"
      },
      "message": "Move GetWitnessCommitmentIndex onto CBlock (plus minor optimisation)",
      "tree": {
        "sha": "677b983ce0adee0e101ff5d75b91b75d4f850bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/677b983ce0adee0e101ff5d75b91b75d4f850bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64a4dd54f2544ec9247d34a128172281c24bf4a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a4dd54f2544ec9247d34a128172281c24bf4a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64a4dd54f2544ec9247d34a128172281c24bf4a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a4dd54f2544ec9247d34a128172281c24bf4a3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e8c2138fc33d1c8d25821fe31dfa60bacc94e63"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5119b70a35dea0f50e952f3e418ef7dd6a306fd8",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=64a4dd54f2544ec9247d34a128172281c24bf4a3",
        "patch": "@@ -15,6 +15,18 @@ uint256 CBlockHeader::GetHash() const\n     return SerializeHash(*this);\n }\n \n+int CBlock::GetWitnessCommitmentIndex() const\n+{\n+    int commitpos = -1;\n+    for (size_t o = vtx[0]->vout.size(); o-- > 0; ) {\n+        if (vtx[0]->vout[o].scriptPubKey.size() >= 38 && vtx[0]->vout[o].scriptPubKey[0] == OP_RETURN && vtx[0]->vout[o].scriptPubKey[1] == 0x24 && vtx[0]->vout[o].scriptPubKey[2] == 0xaa && vtx[0]->vout[o].scriptPubKey[3] == 0x21 && vtx[0]->vout[o].scriptPubKey[4] == 0xa9 && vtx[0]->vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+            break;\n+        }\n+    }\n+    return commitpos;\n+}\n+\n std::string CBlock::ToString() const\n {\n     std::stringstream s;"
      },
      {
        "sha": "eafcb851c528ffb96e194136bd7abf605e482eb9",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=64a4dd54f2544ec9247d34a128172281c24bf4a3",
        "patch": "@@ -116,6 +116,10 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n+    // Compute at which vout of the block's coinbase transaction the witness\n+    // commitment occurs, or -1 if not found.\n+    int GetWitnessCommitmentIndex() const;\n+\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "bbaa077101fe25cb0b298d8f89e727e9b5ef9d91",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a4dd54f2544ec9247d34a128172281c24bf4a3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=64a4dd54f2544ec9247d34a128172281c24bf4a3",
        "patch": "@@ -2895,22 +2895,9 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n }\n \n-// Compute at which vout of the block's coinbase transaction the witness\n-// commitment occurs, or -1 if not found.\n-static int GetWitnessCommitmentIndex(const CBlock& block)\n-{\n-    int commitpos = -1;\n-    for (size_t o = 0; o < block.vtx[0]->vout.size(); o++) {\n-        if (block.vtx[0]->vout[o].scriptPubKey.size() >= 38 && block.vtx[0]->vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0]->vout[o].scriptPubKey[1] == 0x24 && block.vtx[0]->vout[o].scriptPubKey[2] == 0xaa && block.vtx[0]->vout[o].scriptPubKey[3] == 0x21 && block.vtx[0]->vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0]->vout[o].scriptPubKey[5] == 0xed) {\n-            commitpos = o;\n-        }\n-    }\n-    return commitpos;\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n-    int commitpos = GetWitnessCommitmentIndex(block);\n+    int commitpos = block.GetWitnessCommitmentIndex();\n     static const std::vector<unsigned char> nonce(32, 0x00);\n     if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n@@ -2923,7 +2910,7 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     std::vector<unsigned char> commitment;\n-    int commitpos = GetWitnessCommitmentIndex(block);\n+    int commitpos = block.GetWitnessCommitmentIndex();\n     std::vector<unsigned char> ret(32, 0x00);\n     if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         if (commitpos == -1) {\n@@ -3017,7 +3004,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n+        int commitpos = block.GetWitnessCommitmentIndex();\n         if (commitpos != -1) {\n             bool malleated = false;\n             uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);"
      }
    ]
  },
  {
    "sha": "7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTI5YTcwODljZGY0ZTk3ZjAzZjVlOTYzZmQ5OThkMjJhOWZiY2Vh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T06:28:09Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:17Z"
      },
      "message": "proofs/size: Check witness hash",
      "tree": {
        "sha": "a04b257fb1124aac28df2b39bdc5bb6c325ed40f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a04b257fb1124aac28df2b39bdc5bb6c325ed40f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7529a7089cdf4e97f03f5e963fd998d22a9fbcea/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64a4dd54f2544ec9247d34a128172281c24bf4a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a4dd54f2544ec9247d34a128172281c24bf4a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64a4dd54f2544ec9247d34a128172281c24bf4a3"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 25,
      "deletions": 5
    },
    "files": [
      {
        "sha": "18d13308aaaab3b93a6990e59a419162072d6be4",
        "filename": "src/proofs/size.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7529a7089cdf4e97f03f5e963fd998d22a9fbcea/src/proofs/size.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7529a7089cdf4e97f03f5e963fd998d22a9fbcea/src/proofs/size.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.cpp?ref=7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
        "patch": "@@ -5,6 +5,7 @@\n #include \"size.h\"\n \n #include \"crypto/sha256.h\"\n+#include \"hash.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n@@ -76,15 +77,26 @@ uint32_t CBlockSizeProof::ceil_log2(size_t n)\n \n CBlockSizeProof::CBlockSizeProof(const CBlock& block, size_t nProveWeight)\n {\n+    int commitpos;\n+\n     const size_t nTxCount = block.vtx.size();\n     nTxCountLog2 = ceil_log2(nTxCount);\n \n     std::vector<size_t> vFillStripped, vFillWitness;\n     BuildFillLists(block, nProveWeight, vFillStripped, vFillWitness);\n     FillComponents(componentsStripped, block, vFillStripped, SERIALIZE_TRANSACTION_NO_WITNESS);\n-    FillComponents(componentsFull, block, vFillWitness, 0);\n+    if (vFillWitness.empty()) {\n+        assert(Verify(block.hashMerkleRoot, NULL, NULL));\n+    } else {\n+        FillComponents(componentsFull, block, vFillWitness, 0);\n \n-    assert(Verify(block.hashMerkleRoot));\n+        commitpos = block.GetWitnessCommitmentIndex();\n+        assert(commitpos != -1);\n+        uint256 witness_hash;\n+        memcpy(witness_hash.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32);\n+\n+        assert(Verify(block.hashMerkleRoot, &witness_hash, &block.vtx[0]->vin[0].scriptWitness.stack[0]));\n+    }\n }\n \n void CBlockSizeProof::BuildFillLists(const CBlock& block, size_t nProveWeight, std::vector<size_t>& vFillStripped, std::vector<size_t>& vFillWitness)\n@@ -254,7 +266,7 @@ bool CBlockSizeProof::VerifyComponents(const std::vector<CBlockSizeProofComponen\n     return true;\n }\n \n-bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n+bool CBlockSizeProof::Verify(const uint256& merkleroot, const uint256 * const witness_hash, const std::vector<unsigned char> * const witness_nonce) const\n {\n     bool fFoundFullTx = false;\n     size_t txcount_stripped, txcount;\n@@ -263,10 +275,18 @@ bool CBlockSizeProof::Verify(const uint256& merkleroot) const\n         return false;\n     }\n     if (!componentsFull.empty()) {\n+        if (!witness_hash) {\n+            // Non-segwit blocks can't have a weight proof\n+            return false;\n+        }\n         if (!VerifyComponents(componentsFull, calculated_merkleroot, fFoundFullTx, txcount)) {\n             return false;\n         }\n-        // TODO: Check witness root hash\n+        uint256 hashWitness;\n+        CHash256().Write(witness_hash->begin(), witness_hash->size()).Write(witness_nonce->data(), witness_nonce->size()).Finalize(hashWitness.begin());\n+        if (hashWitness != calculated_merkleroot) {\n+            return false;\n+        }\n     }\n     if (!fFoundFullTx) {\n         return false;"
      },
      {
        "sha": "fe215487605a78e845f82cf48e53a7224957f311",
        "filename": "src/proofs/size.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7529a7089cdf4e97f03f5e963fd998d22a9fbcea/src/proofs/size.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7529a7089cdf4e97f03f5e963fd998d22a9fbcea/src/proofs/size.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.h?ref=7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
        "patch": "@@ -89,7 +89,7 @@ class CBlockSizeProof {\n     }\n \n     static size_t CalculateMinTxCount(uint32_t nTxCountLog2);\n-    bool Verify(const uint256& merkleroot) const;\n+    bool Verify(const uint256& merkleroot, const uint256 *witness_hash, const std::vector<unsigned char> *witness_nonce) const;\n     void GetBlockLowerBounds(size_t &nMinStrippedSize, size_t &nMinFullSize, size_t &nMinWeight) const;\n \n private:"
      }
    ]
  },
  {
    "sha": "9bc68f15322e5783a12f4a554e15840c9abd0a76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmM2OGYxNTMyMmU1NzgzYTEyZjRhNTU0ZTE1ODQwYzlhYmQwYTc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T06:38:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:18Z"
      },
      "message": "proofs/size: Reject proofs with duplicate merkle hashes in proof-provided data",
      "tree": {
        "sha": "ff5343feea2aa08de6e1b8f745685a731e1961a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff5343feea2aa08de6e1b8f745685a731e1961a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bc68f15322e5783a12f4a554e15840c9abd0a76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc68f15322e5783a12f4a554e15840c9abd0a76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc68f15322e5783a12f4a554e15840c9abd0a76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc68f15322e5783a12f4a554e15840c9abd0a76/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7529a7089cdf4e97f03f5e963fd998d22a9fbcea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7529a7089cdf4e97f03f5e963fd998d22a9fbcea"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c2c3045a789ecec959cada30f0d13b084864a72",
        "filename": "src/proofs/size.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc68f15322e5783a12f4a554e15840c9abd0a76/src/proofs/size.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc68f15322e5783a12f4a554e15840c9abd0a76/src/proofs/size.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.cpp?ref=9bc68f15322e5783a12f4a554e15840c9abd0a76",
        "patch": "@@ -242,6 +242,9 @@ bool CBlockSizeProof::VerifyComponents(const std::vector<CBlockSizeProofComponen\n \n         hashes.push_back(component.GetTxHash());\n         for (size_t i = index >> skipcollapse; i & 1; i >>= 1) {\n+            if (hashes.back() == *(hashes.rbegin() + 1)) {\n+                return false;\n+            }\n             CollapseHashes(hashes);\n         }\n \n@@ -261,7 +264,6 @@ bool CBlockSizeProof::VerifyComponents(const std::vector<CBlockSizeProofComponen\n         }\n         ++index;\n     }\n-    // TODO: Check that if there are any duplicate merkle links, there are no full tx proofs on the right side of them.\n     merkleroot = hashes.back();\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "a71996590093433b4c6ab7b29bc6dbccde69f002",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzE5OTY1OTAwOTM0MzNiNGM2YWI3YjI5YmM2ZGJjY2RlNjlmMDAy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T07:58:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:18Z"
      },
      "message": "proofs/size: Fix serialization",
      "tree": {
        "sha": "9380572c149cc7ca9fe8b2435f43afd64c91ac0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9380572c149cc7ca9fe8b2435f43afd64c91ac0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71996590093433b4c6ab7b29bc6dbccde69f002",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71996590093433b4c6ab7b29bc6dbccde69f002",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a71996590093433b4c6ab7b29bc6dbccde69f002",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71996590093433b4c6ab7b29bc6dbccde69f002/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bc68f15322e5783a12f4a554e15840c9abd0a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc68f15322e5783a12f4a554e15840c9abd0a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc68f15322e5783a12f4a554e15840c9abd0a76"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "932539e888f794172b74c5ba621f21a259d1fadf",
        "filename": "src/proofs/size.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71996590093433b4c6ab7b29bc6dbccde69f002/src/proofs/size.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71996590093433b4c6ab7b29bc6dbccde69f002/src/proofs/size.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.cpp?ref=a71996590093433b4c6ab7b29bc6dbccde69f002",
        "patch": "@@ -228,6 +228,9 @@ bool CBlockSizeProof::VerifyComponents(const std::vector<CBlockSizeProofComponen\n     std::vector<uint256> hashes;\n     for (auto& component : components) {\n         uint32_t skipcollapse;\n+        if (!component.IsValid()) {\n+            return false;\n+        }\n         if (component.IsFullTxProof()) {\n             fFoundFullTx = true;\n             skipcollapse = 0;"
      },
      {
        "sha": "6a6e10c656eeff6b28a80552495769519b62022a",
        "filename": "src/proofs/size.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71996590093433b4c6ab7b29bc6dbccde69f002/src/proofs/size.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71996590093433b4c6ab7b29bc6dbccde69f002/src/proofs/size.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/proofs/size.h?ref=a71996590093433b4c6ab7b29bc6dbccde69f002",
        "patch": "@@ -23,7 +23,7 @@ class CBlockSizeProofComponent\n     std::vector<unsigned char> vchLastChunk;\n \n public:\n-    CBlockSizeProofComponent() = delete;\n+    CBlockSizeProofComponent() : nTxRepresentedLog2plus1(0), nTxSize(0) {}\n     CBlockSizeProofComponent(const CTransaction&, int serialFlags);\n     CBlockSizeProofComponent(size_t TxRepresentedLog2, const uint256&);\n \n@@ -41,6 +41,10 @@ class CBlockSizeProofComponent\n         }\n     }\n \n+    bool IsValid() const {\n+        return nTxRepresentedLog2plus1 || nTxSize;\n+    }\n+\n     bool IsFullTxProof() const {\n         return !nTxRepresentedLog2plus1;\n     }"
      }
    ]
  },
  {
    "sha": "8f625c4f5c9285696e13d014c7b5101caf25279e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjYyNWM0ZjVjOTI4NTY5NmUxM2QwMTRjN2I1MTAxY2FmMjUyNzll",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T07:59:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-03-25T08:02:18Z"
      },
      "message": "P2P: Support getfraud/fraud protocol",
      "tree": {
        "sha": "33d08facfbe41d86e414ff0c69550b8e6f1b7f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33d08facfbe41d86e414ff0c69550b8e6f1b7f23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f625c4f5c9285696e13d014c7b5101caf25279e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f625c4f5c9285696e13d014c7b5101caf25279e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f625c4f5c9285696e13d014c7b5101caf25279e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f625c4f5c9285696e13d014c7b5101caf25279e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a71996590093433b4c6ab7b29bc6dbccde69f002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71996590093433b4c6ab7b29bc6dbccde69f002",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a71996590093433b4c6ab7b29bc6dbccde69f002"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 60,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f2408877f07074dbe5f901f1a4349f2e0b05ab17",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f625c4f5c9285696e13d014c7b5101caf25279e/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f625c4f5c9285696e13d014c7b5101caf25279e/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=8f625c4f5c9285696e13d014c7b5101caf25279e",
        "patch": "@@ -33,3 +33,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068)).\n+* [`BIP 180`](https://github.com/bitcoin/bips/blob/master/bip-0180.mediawiki): Block size/weight fraud proofs are created for peers as of **v0.15.0** ([PR FIXME](https://github.com/bitcoin/bitcoin/pull/FIXME))."
      },
      {
        "sha": "bb5f171c07cbd2943da7ae3d5832f15194e6e369",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f625c4f5c9285696e13d014c7b5101caf25279e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f625c4f5c9285696e13d014c7b5101caf25279e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8f625c4f5c9285696e13d014c7b5101caf25279e",
        "patch": "@@ -21,6 +21,7 @@\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"proofs/size.h\"\n #include \"random.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n@@ -2591,6 +2592,50 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+\n+    else if (strCommand == NetMsgType::GETFRAUD)\n+    {\n+        CBlockLocator locator;\n+        vRecv >> locator;\n+        CBlockIndex *pindex = NULL;\n+        for (const uint256& hash : locator.vHave) {\n+            BlockMap::iterator mi = mapBlockIndex.find(hash);\n+            if (mi == mapBlockIndex.end()) {\n+                continue;\n+            }\n+            for (pindex = mi->second; pindex; pindex = pindex->pprev) {\n+                if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::FRAUD, pindex->GetBlockHash(), VARINT(0)));\n+                    break;\n+                }\n+                if (pindex->nStatus & BLOCK_FAILED_VALID) {\n+                    if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) {\n+                        // These are only reached when block size/weight are known to be good\n+                    } else {\n+                        CBlock block;\n+                        const bool ret = ReadBlockFromDisk(block, pindex, chainparams.GetConsensus());\n+                        assert(ret);\n+\n+                        if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+                            CBlockSizeProof fp(block);\n+                            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::FRAUD, pindex->GetBlockHash(), VARINT(2), fp));\n+                            break;\n+                        }\n+                    }\n+                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::FRAUD, pindex->GetBlockHash(), VARINT(1)));\n+                    break;\n+                }\n+            }\n+            if (pindex) {\n+                break;\n+            }\n+        }\n+        if (!pindex) {\n+            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::FRAUD));\n+        }\n+    }\n+\n+\n     else if (strCommand == NetMsgType::NOTFOUND) {\n         // We do not care about the NOTFOUND message, but logging an Unknown Command\n         // message would be undesirable as we transmit it ourselves."
      },
      {
        "sha": "0cdf40bd94de4e6bcca99ea6a753ad41fbe766c6",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f625c4f5c9285696e13d014c7b5101caf25279e/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f625c4f5c9285696e13d014c7b5101caf25279e/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=8f625c4f5c9285696e13d014c7b5101caf25279e",
        "patch": "@@ -39,6 +39,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETFRAUD=\"getfraud\";\n+const char *FRAUD=\"fraud\";\n };\n \n /** All known message types. Keep this in the same order as the list of\n@@ -71,6 +73,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETFRAUD,\n+    NetMsgType::FRAUD,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n "
      },
      {
        "sha": "3453f0def9383ffdf0714055887be10c45018251",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f625c4f5c9285696e13d014c7b5101caf25279e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f625c4f5c9285696e13d014c7b5101caf25279e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8f625c4f5c9285696e13d014c7b5101caf25279e",
        "patch": "@@ -240,6 +240,16 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * Contains a CBlockLocator.\n+ * @since BIP 180\n+ */\n+extern const char *GETFRAUD;\n+/**\n+ * Contains a block hash, varint, and optionally a fraud proof.\n+ * @since BIP 180\n+ */\n+extern const char *FRAUD;\n };\n \n /* Get a vector of all valid message types (see above) */"
      }
    ]
  }
]