BitcoinPullTester,2014-08-20T00:15:05Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4732_afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-52718364,52718364,
SergioDemianLerner,2014-08-20T00:26:18Z,"test/miner_tests.cpp(47) failed in BitcoinPullTester but does not fail in my own fork. \nCould it be that test cases are processed in a different order in two different test_bitcoin compilations?\nOr maybe other commits broke it..\n\nI would be good if the fPrintToConsole were set to true during the test case execution, so the pull tester test.log had more information regarding the problem.\n",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-52719506,52719506,
mikehearn,2014-08-23T20:15:02Z,"Is it really needed to change the definition of regtest mode? Bear in mind bitcoinj has the same constants in them. Mining two blocks is not a big deal, at least it was not for us (the tests are still plenty fast).\n",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53164171,53164171,
laanwj,2014-08-25T10:38:49Z,"ACK on the overall idea.\n\nI'd also prefer not change the definition of regtest network. At the very least the merits and disadvantages have to be considered separately from the rest of this pull. Regtest as it is now has become a de-facto standard, so some other tools and libraries would have to be changed as well.\n",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53249889,53249889,
SergioDemianLerner,2014-08-25T14:09:07Z,"@mikehearn With Timo Hanke we discussed this and we had the same impression. We suggest creating another regression testing network parameters, called MAIN_REGTEST that inherits from MAIN and it just changes the block difficulty.\nThen we won't need any modification on the previous test-cases, because all of them will use the same MAIN parameters as the MAIN_REGTEST.\n\nTo summarize this pull requ",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53268130,53268130,
mikehearn,2014-08-25T14:15:33Z,"Yes that's sort of what we do in bitcoinj too, except we call it the UNITTEST network instead of MAIN_REGTEST which is perhaps a confusing name. But having network parameters specific to unit testing is indeed quite useful.\n",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53268949,53268949,
laanwj,2014-08-25T14:17:29Z,"I'm not sure it is necessary to use one chain for all the testcases. Some testcases could run as MAIN, to verify parameters from main. Some, that need block generation, could run as REGTEST. Another test could use yet another parameter set.\n\nBesides that (4) sounds pretty elegant. It keeps all the changes restricted to CChainParams. At some point in the future that could be extended and testcase",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53269198,53269198,
SergioDemianLerner,2014-08-25T14:31:13Z,"@mikehearn Ok, let's call it UNITTEST.\n\n@laanwj I agree. But one must take into account that switching network parameters is only possible for test cases that do not call ProcessBlock(). All test cases that call ProcessBlock() must probably share the same parameters to prevent incompatibilities (which is not that bad) . If we'd really like complete free control of the block-chain for each unit t",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53271048,53271048,
SergioDemianLerner,2014-08-30T22:18:20Z,@laanwj Do we agree that if I create a new network parameters UNITTEST we'll merge this patch?\n,https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53972173,53972173,
jtimon,2014-08-31T14:49:53Z,"Maybe we should just regtest's behavior to be more like mainnet, should be easy to do in chainparams.\nWhat are the use cases that would be broken if we do that?\nMaybe we can even get rid of some of the flags in chainparams that are specific to regtest.\nI wouldn't oppose to the creation of a new mode that's a hybrid between mainnet and regtest though, and UNITEST sounds good to me. Again, this s",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-53990168,53990168,
jtimon,2014-08-31T21:07:42Z,"In other words, you should be able to write this PR on top of #4802.\nEDIT: sorry, I missed that you already said you were going to remove them later...\n",https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-54001329,54001329,
laanwj,2014-10-12T11:51:47Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4732#issuecomment-58793053,58793053,
laanwj,2014-08-25T10:40:31Z,"We just got rid of almost all the `Params().NetworkID()==CBaseChainParams::REGTEST`. The idea is to define a bit on the Params() object for each point of difference between chains, not compare the network identifier.\n",https://github.com/bitcoin/bitcoin/pull/4732#discussion_r16649751,16649751,src/pow.cpp
SergioDemianLerner,2014-08-25T13:56:43Z,"Yes, I was expecting you tell me this. I will remove this line later. I just let it there to make clear that there is a problem with the multiplication code that must be addressed if difficulty is going to be zero.\n",https://github.com/bitcoin/bitcoin/pull/4732#discussion_r16656129,16656129,src/pow.cpp
