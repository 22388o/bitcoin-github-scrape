[
  {
    "sha": "45cccb62a335303962763338d960ea25a73685c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWNjY2I2MmEzMzUzMDM5NjI3NjMzMzhkOTYwZWEyNWE3MzY4NWM1",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-08-19T23:09:41Z"
      },
      "committer": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-08-19T23:09:41Z"
      },
      "message": "Switch of the test framework from MAIN to REGTEST\nFor several reasons the current test framework does not allow to easily incorporate new unit tests that append specially crafted blocks to the blockchain using ProcessBlock().\nIn the pull request https://github.com/bitcoin/bitcoin/pull/4688 we described the reasons and proposed a solution.\nWhile we think that is the optimum solution, @gmaxwell and @laanwj suggested not implementing the changes because many files not directly related to the testing framework were modified by the patch.\nIn this pull request we implement @gmaxwell suggestion that the test framework should run under the RegTest network parameters and not under the main network parameters. Allthough this seems to be a small change, it was not. First, the RegTest block solving probability was 1/2 which still requires \"mining\" during the test case validation in order to dynamically create a block, which adds unnecessary complications to simple testing code.\nTo overcome this problem, the RegTest difficulty was changed from 0x207fffff to 0x2100FFFF (in compact notation), which gives an approximate 1/2^32 probability not to solve a block. Happily there was no lucky test case.\nBecause themaximum possible target (0xff ... 0xff) cannot be multiplied by 4 without overflow, ComputeMinWork() had to be modified to always return ProofOfWorkLimit() for the RegTest.\n\nAlso we found that several test cases make explicit use of properties of the MainNet. Such test cases are:\n\nalert_tests.cpp\nrpc_wallet_tests.cpp\nmain_tests.cpp\nkey_tests.cpp\nDoS_tests.cpp\nCheckpoints_tests.cpp\nbase58_tests.cpp\nbloom_tests.cpp\nrpc_tests.cpp\nminer_tests.cpp\n\nAll these test cases were added a temporary switch from the RegTest network to the Main network in order to leave them working. Re-writting all of them for the RegTest probably requires more than 40 hours of work.\n\nThe alert_tests.cpp test case is special, because it requires the alert private key to generate inputs to the test cases. We suggest to switch this test case to the RegNet and replace the current RegTest alert private key with a published key-pair, so everyone can generate more test cases and there is no opaque data.\n\nAs the 4688  pull request, we've:\n\na. fixed the bug in miner_tests.cpp which leaves in the memory pool invalid transactions (mempool.clear() missing).\nb. Added 7 unit tests:\n\n    ToCheckBlockUpgradeMajority (untested before)\n    EnforceBlockUpgradeMajority (untested before)\n    RejectBlockOutdatedMajority (untested before)\n    \"bad-cb-height\"\n    \"bad-version\"\n    \"time-too-old\"\n    \"bad-txns-nonfinal\"\n\nSergio Demian Lerner & Timo Hanke",
      "tree": {
        "sha": "bf94977ce6d816e2480e272812333813fe01fda9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf94977ce6d816e2480e272812333813fe01fda9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45cccb62a335303962763338d960ea25a73685c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cccb62a335303962763338d960ea25a73685c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45cccb62a335303962763338d960ea25a73685c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cccb62a335303962763338d960ea25a73685c5/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd2819701a1a4481ae06b24924b75d55b9feb115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2819701a1a4481ae06b24924b75d55b9feb115",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2819701a1a4481ae06b24924b75d55b9feb115"
      }
    ],
    "stats": {
      "total": 369,
      "additions": 319,
      "deletions": 50
    },
    "files": [
      {
        "sha": "b340e8f9dd1cbd24b9126e4dd03ae4915bb39f8b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -38,6 +38,7 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n+  test/blockv2_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "f2dbae7f01f0fb9cc1b3bc35689e0e5b358f043c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -193,13 +193,13 @@ class CRegTestParams : public CTestNetParams {\n         nMinerThreads = 1;\n         nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         nTargetSpacing = 10 * 60;\n-        bnProofOfWorkLimit = ~uint256(0) >> 1;\n+        bnProofOfWorkLimit = ~uint256(0); // No difficulty at all\n         genesis.nTime = 1296688602;\n-        genesis.nBits = 0x207fffff;\n+        genesis.nBits = 0x2100FFFF; // use 1/-2^32 difficulty. Before 0x207fffff: This was 1-bit difficulty\n         genesis.nNonce = 2;\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(hashGenesisBlock == uint256(\"0x6aef2f4ed33f670b67505a79aa9bbff284c7bafb92f566736d095cf0acff1965\"));\n \n         vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n "
      },
      {
        "sha": "9c65f9ed540e59cec13885313b6c53f4f65778e7",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -74,7 +74,7 @@ namespace Checkpoints {\n \n     static MapCheckpoints mapCheckpointsRegtest =\n         boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ( 0, uint256(\"0x6aef2f4ed33f670b67505a79aa9bbff284c7bafb92f566736d095cf0acff1965\"))\n         ;\n     static const CCheckpointData dataRegtest = {\n         &mapCheckpointsRegtest,"
      },
      {
        "sha": "3cd2daee699d77a00a3d1fc364f2f822ba8a7814",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -103,7 +103,12 @@ unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n     // after Params().TargetSpacing()*2 time between blocks:\n     if (Params().AllowMinDifficultyBlocks() && nTime > Params().TargetSpacing()*2)\n         return bnLimit.GetCompact();\n-\n+\t\n+\t// uint256 cannot multiply 0xfff...ff by 4, it overflows and returns a lower number\n+\t// so for RegTest at minimum difficulty, we must skip this\n+\tif (Params().NetworkID()==CBaseChainParams::REGTEST)\n+\t\treturn bnLimit.GetCompact();\n+\t\t\n     uint256 bnResult;\n     bnResult.SetCompact(nBase);\n     while (nTime > 0 && bnResult < bnLimit)"
      },
      {
        "sha": "e757be5eb949ed552c127a8a008852aa4a6ba460",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -9,6 +9,7 @@\n #include \"checkpoints.h\"\n \n #include \"uint256.h\"\n+#include \"chainparams.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -20,6 +21,10 @@ BOOST_AUTO_TEST_CASE(sanity)\n {\n     uint256 p11111 = uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n     uint256 p134444 = uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n+\t\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n     BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n \n@@ -33,6 +38,8 @@ BOOST_AUTO_TEST_CASE(sanity)\n     BOOST_CHECK(Checkpoints::CheckBlock(134444+1, p11111));\n \n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate() >= 134444);\n+\t\n+\tSelectParams(prevParams);\n }    \n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "901adcdbf9dd97862ddd2e5f15e09db72e995289",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -14,6 +14,7 @@\n #include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n+#include \"chainparams.h\"\n \n #include <stdint.h>\n \n@@ -126,6 +127,9 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n         (1296207707,453179945)(1302624061,453036989)(1309640330,437004818)\n         (1313172719,436789733);\n \n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n     // \"sane\":\n     BOOST_FOREACH(const BlockData::value_type& i, chainData)\n@@ -147,6 +151,8 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // ... but OK if enough time passed for difficulty to adjust downward:\n     BOOST_CHECK(CheckNBits(firstcheck.second, lastcheck.first+60*60*24*365*4, lastcheck.second, lastcheck.first));\n+\t\n+\tSelectParams(prevParams);\n }\n \n CTransaction RandomOrphan()"
      },
      {
        "sha": "6e215207c0c691fe175d7d7846e115f3190379b7",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -12,13 +12,15 @@\n #include \"serialize.h\"\n #include \"util.h\"\n #include \"version.h\"\n+#include \"chainparams.h\"\n \n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n+\n #if 0\n //\n // alertTests contains 7 alerts, generated with this code:\n@@ -78,8 +80,12 @@\n \n struct ReadAlerts\n {\n+\tCBaseChainParams::Network prevParams;\n     ReadAlerts()\n     {\n+\t\tprevParams = Params().NetworkID();\n+\t\tSelectParams(CBaseChainParams::MAIN);\n+\t\t\n         std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n         CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n         try {\n@@ -92,7 +98,9 @@ struct ReadAlerts\n         }\n         catch (std::exception) { }\n     }\n-    ~ReadAlerts() { }\n+    ~ReadAlerts() { \n+\t\tSelectParams(prevParams);\n+\t}\n \n     static std::vector<std::string> read_lines(boost::filesystem::path filepath)\n     {\n@@ -114,8 +122,11 @@ BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n \n BOOST_AUTO_TEST_CASE(AlertApplies)\n {\n+\t\n+\t\n     SetMockTime(11);\n \n+\n     BOOST_FOREACH(const CAlert& alert, alerts)\n     {\n         BOOST_CHECK(alert.CheckSignature());\n@@ -149,6 +160,8 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n     BOOST_CHECK(!alerts[2].AppliesTo(1, \"/Satoshi:0.3.0/\"));\n \n     SetMockTime(0);\n+\t\n+\t\n }\n \n "
      },
      {
        "sha": "526d28340789381d934106c41ceead9417278c6a",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -12,6 +12,7 @@\n #include \"script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"chainparams.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -126,7 +127,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n-\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -141,6 +142,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+\t\t\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else\n@@ -175,14 +177,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(prevParams);\n }\n \n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -197,6 +200,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+\t\t\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else\n@@ -243,7 +247,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(prevParams);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "e0d4e0b3e79130d8b61dba301fb65eb1c3f4400f",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "added",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -0,0 +1,231 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+\tif ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+\t\t {\n+\t\t\t// The RegTest network has a low subsidy halving interval (150) so \n+\t\t\t// we must recompute the coinbase subsidy if we reach the boundary.\n+\t\t\t\n+\t\t\t// preserve parent hash\n+\t\t\tuint256 prevParent = pblock->hashPrevBlock;\n+\t\t\tdelete pblocktemplate;\n+\t\t\tpblocktemplate = CreateNewBlock(scriptPubKey);   \n+\t\t\tpblock = &pblocktemplate->block; // pointer for convenience\n+\t\t\tpblock->hashPrevBlock = prevParent;\n+\t\t }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::REGTEST); \n+\t\n+\t// We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+\t// See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+\t// for each testcase that requires it.\n+\n+\t// If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\t\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+\tint PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+\tPreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+\tBOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\t\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\t\t\n+\t\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+\t\tPreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+\t\tBOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+\t\tCheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+\t\tPreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+\t\tBOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\t\t\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    \n+    // Some other missing tests, added here as bonus...\n+    \n+\t// Block time too old check\n+\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()-1;\n+    CValidationState state4;\n+    BOOST_CHECK(ProcessBlock(state4, NULL, pblock)==false);\n+    BOOST_CHECK(!state4.IsValid());\n+    BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n+    // Do not update parent since block has failed\n+    \n+    // Adding a non-final coinbase, must modify coinbase\n+\tCheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetEmptyBlock(pblock);\n+    // Use a mutable coinbase to change nLockTime and  nSequence\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0); \n+    txCoinbase.nLockTime = LOCKTIME_THRESHOLD-1; // refers to height\n+    txCoinbase.vin[0].nSequence = 1; // non-zero sequence\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->nVersion = 2;\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    CValidationState state5;\n+    BOOST_CHECK(ProcessBlock(state5, NULL, pblock)==false);\n+    BOOST_CHECK(!state5.IsValid());\n+    BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    delete pblocktemplate;\n+    \n+    \n+    LogPrintf(\"Blockv2test testcase ends\\n\");   \n+}\n+\n+BOOST_AUTO_TEST_CASE(Blockv2testcase)\n+{\n+    Blockv2test();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2eff89368bc8a768e1b760c6d37019263000f09a",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"chainparams.h\"\n \n #include <vector>\n \n@@ -82,6 +83,10 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n     string strSecret = string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n+\t\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     CBitcoinSecret vchSecret;\n     BOOST_CHECK(vchSecret.SetString(strSecret));\n \n@@ -104,6 +109,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n         expected[i] = (char)vch[i];\n \n     BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+\t\n+\tSelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_CASE(bloom_match)"
      },
      {
        "sha": "f9540579a52ea040f4235653f099ecb2b9a1a7d0",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -8,6 +8,7 @@\n #include \"script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"chainparams.h\"\n \n #include <string>\n #include <vector>\n@@ -62,6 +63,10 @@ BOOST_AUTO_TEST_SUITE(key_tests)\n BOOST_AUTO_TEST_CASE(key_test1)\n {\n     CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C, baddress1;\n+\t\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     BOOST_CHECK( bsecret1.SetString (strSecret1));\n     BOOST_CHECK( bsecret2.SetString (strSecret2));\n     BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n@@ -142,6 +147,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n         BOOST_CHECK(rkey1C == pubkey1C);\n         BOOST_CHECK(rkey2C == pubkey2C);\n     }\n+\tSelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2e2412dd5a54fbfd272bb9a19d28771835b25e01",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"core.h\"\n #include \"main.h\"\n+#include \"chainparams.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -12,13 +13,18 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n     uint64_t nSum = 0;\n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n         uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));\n     }\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n+\t\n+\tSelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8aa1bdcc4e37718de30f6dd85d8eab09387eb7c8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 39,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -11,40 +11,6 @@\n \n BOOST_AUTO_TEST_SUITE(miner_tests)\n \n-static\n-struct {\n-    unsigned char extranonce;\n-    unsigned int nonce;\n-} blockinfo[] = {\n-    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n-    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n-    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n-    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n-    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n-    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n-    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n-    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n-    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n-    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n-    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n-    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n-    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n-    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n-    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n-    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n-    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n-    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n-    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n-    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n-    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n-    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n-    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n-    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n-    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n-    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n-    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n-    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n-};\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n@@ -63,21 +29,20 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n     std::vector<CTransaction*>txFirst;\n-    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n+    for (unsigned int i = 0; i < 110; ++i)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n         pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+\t\tCMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n-        txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n+        txCoinbase.vin[0].scriptSig.push_back(i);\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n-        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->vtx[0] = CTransaction(txCoinbase);\t\t\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-        pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n         BOOST_CHECK(state.IsValid());\n@@ -253,6 +218,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+\tmempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "fd29d2f1a91c3084151c0fc24d3e259b0c07d6df",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"netbase.h\"\n+#include \"chainparams.h\"\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -52,7 +53,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {\n     // Test raw transaction API argument handling\n     Value r;\n-\n+\t\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int\"), runtime_error);\n@@ -87,6 +88,8 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction DEADBEEF\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(string(\"sendrawtransaction \")+rawtx+\" extra\"), runtime_error);\n+\t\n+\t\n }\n \n BOOST_AUTO_TEST_CASE(rpc_rawsign)\n@@ -97,6 +100,11 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n       \"[{\\\"txid\\\":\\\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\\\",\"\n       \"\\\"vout\\\":1,\\\"scriptPubKey\\\":\\\"a914b10c9df5f7edf436c697f02f1efdba4cf399615187\\\",\"\n       \"\\\"redeemScript\\\":\\\"512103debedc17b3df2badbcdd86d5feb4562b86fe182e5998abd8bcd4f122c6155b1b21027e940bb73ab8732bfdf7f9216ecefca5b94d6df834e77e108f68e66f126044c052ae\\\"}]\";\n+\t  \n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\n+\t\n     r = CallRPC(string(\"createrawtransaction \")+prevout+\" \"+\n       \"{\\\"3HqAe9LtNBjnsfM4CyYaWTnvCaUYT7v4oZ\\\":11}\");\n     string notsigned = r.get_str();\n@@ -106,6 +114,8 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n+\t\n+\tSelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)"
      },
      {
        "sha": "055a9927127ce522aa72eb78140b40d4998aae61",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"wallet.h\"\n+#include \"chainparams.h\"\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -65,6 +66,9 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     // Test RPC calls for various wallet statistics\n     Value r;\n \n+\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+\tSelectParams(CBaseChainParams::MAIN);\n+\t\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n@@ -173,6 +177,8 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n \tArray arr = retValue.get_array();\n \tBOOST_CHECK(arr.size() > 0);\n \tBOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+\t\n+\tSelectParams(prevParams);\n \n }\n "
      },
      {
        "sha": "5cd081d6fb901eebf89430c7a920a17482250b00",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cccb62a335303962763338d960ea25a73685c5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cccb62a335303962763338d960ea25a73685c5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=45cccb62a335303962763338d960ea25a73685c5",
        "patch": "@@ -30,7 +30,8 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+\t\t\n+        SelectParams(CBaseChainParams::REGTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmRlYjFhMmUwMzIxMmE0ZGRjOTVkYjJjOTg2OGFhZDkxMGVmMWM3",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-08-19T23:47:31Z"
      },
      "committer": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-08-19T23:47:31Z"
      },
      "message": "TAB -> whitespace cleanup",
      "tree": {
        "sha": "ccae154858081e0f205709d955c17c87ca31fa53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccae154858081e0f205709d955c17c87ca31fa53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45cccb62a335303962763338d960ea25a73685c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cccb62a335303962763338d960ea25a73685c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45cccb62a335303962763338d960ea25a73685c5"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 130,
      "deletions": 133
    },
    "files": [
      {
        "sha": "a5f8f675a685fe6b60d22dea60db8fe72f13d432",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -103,12 +103,12 @@ unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n     // after Params().TargetSpacing()*2 time between blocks:\n     if (Params().AllowMinDifficultyBlocks() && nTime > Params().TargetSpacing()*2)\n         return bnLimit.GetCompact();\n-\t\n-\t// uint256 cannot multiply 0xfff...ff by 4, it overflows and returns a lower number\n-\t// so for RegTest at minimum difficulty, we must skip this\n-\tif (Params().NetworkID()==CBaseChainParams::REGTEST)\n-\t\treturn bnLimit.GetCompact();\n-\t\t\n+\n+    // uint256 cannot multiply 0xfff...ff by 4, it overflows and returns a lower number\n+    // so for RegTest at minimum difficulty, we must skip this\n+    if (Params().NetworkID()==CBaseChainParams::REGTEST)\n+        return bnLimit.GetCompact();\n+\n     uint256 bnResult;\n     bnResult.SetCompact(nBase);\n     while (nTime > 0 && bnResult < bnLimit)"
      },
      {
        "sha": "c7e5126e8c09a2e927e2406a9df524ed9ff88184",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -21,10 +21,10 @@ BOOST_AUTO_TEST_CASE(sanity)\n {\n     uint256 p11111 = uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n     uint256 p134444 = uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n-\t\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n     BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n \n@@ -38,8 +38,8 @@ BOOST_AUTO_TEST_CASE(sanity)\n     BOOST_CHECK(Checkpoints::CheckBlock(134444+1, p11111));\n \n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate() >= 134444);\n-\t\n-\tSelectParams(prevParams);\n+\n+    SelectParams(prevParams);\n }    \n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "fcbac7e27090b869c99a3c4b913fe4aa9c6eed37",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -127,9 +127,9 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n         (1296207707,453179945)(1302624061,453036989)(1309640330,437004818)\n         (1313172719,436789733);\n \n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n     // \"sane\":\n     BOOST_FOREACH(const BlockData::value_type& i, chainData)\n@@ -151,8 +151,8 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // ... but OK if enough time passed for difficulty to adjust downward:\n     BOOST_CHECK(CheckNBits(firstcheck.second, lastcheck.first+60*60*24*365*4, lastcheck.second, lastcheck.first));\n-\t\n-\tSelectParams(prevParams);\n+\n+    SelectParams(prevParams);\n }\n \n CTransaction RandomOrphan()"
      },
      {
        "sha": "acb1da2946bddb1977d04def7f7b0c1688a3c4a7",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -80,12 +80,12 @@\n \n struct ReadAlerts\n {\n-\tCBaseChainParams::Network prevParams;\n+    CBaseChainParams::Network prevParams;\n     ReadAlerts()\n     {\n-\t\tprevParams = Params().NetworkID();\n-\t\tSelectParams(CBaseChainParams::MAIN);\n-\t\t\n+        prevParams = Params().NetworkID();\n+        SelectParams(CBaseChainParams::MAIN);\n+\n         std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n         CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n         try {\n@@ -99,8 +99,8 @@ struct ReadAlerts\n         catch (std::exception) { }\n     }\n     ~ReadAlerts() { \n-\t\tSelectParams(prevParams);\n-\t}\n+    SelectParams(prevParams);\n+    }\n \n     static std::vector<std::string> read_lines(boost::filesystem::path filepath)\n     {\n@@ -122,10 +122,8 @@ BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n \n BOOST_AUTO_TEST_CASE(AlertApplies)\n {\n-\t\n-\t\n-    SetMockTime(11);\n \n+    SetMockTime(11);\n \n     BOOST_FOREACH(const CAlert& alert, alerts)\n     {\n@@ -160,8 +158,7 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n     BOOST_CHECK(!alerts[2].AppliesTo(1, \"/Satoshi:0.3.0/\"));\n \n     SetMockTime(0);\n-\t\n-\t\n+\n }\n \n "
      },
      {
        "sha": "5e68a3ed7355a6188867425398bb70e37eca5451",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -142,7 +142,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-\t\t\n+\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else\n@@ -185,7 +185,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -200,7 +200,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-\t\t\n+\n         if (isTestnet)\n             SelectParams(CBaseChainParams::TESTNET);\n         else"
      },
      {
        "sha": "b3c8b995bd884a4b49e6ee3392541ff080b83e5a",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -83,10 +83,10 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n     string strSecret = string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n-\t\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     CBitcoinSecret vchSecret;\n     BOOST_CHECK(vchSecret.SetString(strSecret));\n \n@@ -109,8 +109,8 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n         expected[i] = (char)vch[i];\n \n     BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n-\t\n-\tSelectParams(prevParams);\n+\n+    SelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_CASE(bloom_match)"
      },
      {
        "sha": "bd1ab64a3ed41c446f03bff962e34f88d5624309",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -63,10 +63,10 @@ BOOST_AUTO_TEST_SUITE(key_tests)\n BOOST_AUTO_TEST_CASE(key_test1)\n {\n     CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C, baddress1;\n-\t\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     BOOST_CHECK( bsecret1.SetString (strSecret1));\n     BOOST_CHECK( bsecret2.SetString (strSecret2));\n     BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n         BOOST_CHECK(rkey1C == pubkey1C);\n         BOOST_CHECK(rkey2C == pubkey2C);\n     }\n-\tSelectParams(prevParams);\n+    SelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "333978e777a1e897db5c759186db711af7d0db7d",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -13,18 +13,18 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n     uint64_t nSum = 0;\n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n         uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));\n     }\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n-\t\n-\tSelectParams(prevParams);\n+\n+    SelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "7aa26ca5114d70707431c393cc1c1960c4a1ff41",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -34,12 +34,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n         pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-\t\tCMutableTransaction txCoinbase(pblock->vtx[0]);\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(i);\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n-        pblock->vtx[0] = CTransaction(txCoinbase);\t\t\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n@@ -218,7 +218,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n-\tmempool.clear();\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "c22da80c554122086d4389045abd6d33bb6a3d20",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -53,7 +53,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {\n     // Test raw transaction API argument handling\n     Value r;\n-\t\n+\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int\"), runtime_error);\n@@ -100,11 +100,11 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n       \"[{\\\"txid\\\":\\\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\\\",\"\n       \"\\\"vout\\\":1,\\\"scriptPubKey\\\":\\\"a914b10c9df5f7edf436c697f02f1efdba4cf399615187\\\",\"\n       \"\\\"redeemScript\\\":\\\"512103debedc17b3df2badbcdd86d5feb4562b86fe182e5998abd8bcd4f122c6155b1b21027e940bb73ab8732bfdf7f9216ecefca5b94d6df834e77e108f68e66f126044c052ae\\\"}]\";\n-\t  \n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n+  \n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n \n-\t\n     r = CallRPC(string(\"createrawtransaction \")+prevout+\" \"+\n       \"{\\\"3HqAe9LtNBjnsfM4CyYaWTnvCaUYT7v4oZ\\\":11}\");\n     string notsigned = r.get_str();\n@@ -114,8 +114,8 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n-\t\n-\tSelectParams(prevParams);\n+\n+    SelectParams(prevParams);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)"
      },
      {
        "sha": "2f77a7c35445aa51882d16bc6402dfc907529107",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 74,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -66,35 +66,35 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     // Test RPC calls for various wallet statistics\n     Value r;\n \n-\tCBaseChainParams::Network prevParams = Params().NetworkID();\n-\tSelectParams(CBaseChainParams::MAIN);\n-\t\n+    CBaseChainParams::Network prevParams = Params().NetworkID();\n+    SelectParams(CBaseChainParams::MAIN);\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-\tCBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n-\tValue retValue;\n-\tstring strAccount = \"walletDemoAccount\";\n-\tstring strPurpose = \"receive\";\n-\tBOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-\t\tCWalletDB walletdb(pwalletMain->strWalletFile);\n-\t\tCAccount account;\n-\t\taccount.vchPubKey = demoPubkey;\n-\t\tpwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-\t\twalletdb.WriteAccount(strAccount, account);\n-\t});\n-\n-\n-\t/*********************************\n-\t * \t\t\tsetaccount\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"));\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n-\t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n+    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    Value retValue;\n+    string strAccount = \"walletDemoAccount\";\n+    string strPurpose = \"receive\";\n+    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+        CWalletDB walletdb(pwalletMain->strWalletFile);\n+        CAccount account;\n+        account.vchPubKey = demoPubkey;\n+        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+        walletdb.WriteAccount(strAccount, account);\n+    });\n+\n \n     /*********************************\n-     * \t\t\tlistunspent\n+    * setaccount\n+    *********************************/\n+    BOOST_CHECK_NO_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"));\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n+    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n+\n+    /*********************************\n+     * listunspent\n      *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listunspent\"));\n     BOOST_CHECK_THROW(CallRPC(\"listunspent string\"), runtime_error);\n@@ -105,8 +105,8 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK(r.get_array().empty());\n \n     /*********************************\n-\t * \t\tlistreceivedbyaddress\n-\t *********************************/\n+    * listreceivedbyaddress\n+    *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n@@ -115,8 +115,8 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tlistreceivedbyaccount\n-\t *********************************/\n+    * listreceivedbyaccount\n+    *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n@@ -125,60 +125,60 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tgetrawchangeaddress\n-\t *********************************/\n+    * getrawchangeaddress\n+    *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getrawchangeaddress\"));\n \n     /*********************************\n-\t * \t\tgetnewaddress\n-\t *********************************/\n+    * getnewaddress\n+    *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress getnewaddress_demoaccount\"));\n \n     /*********************************\n-\t * \t\tgetaccountaddress\n-\t *********************************/\n+    * getaccountaddress\n+    *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress \\\"\\\"\"));\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n-\tBOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n-\n-\t/*********************************\n-\t * \t\t\tgetaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n-\n-\t/*********************************\n-\t * \tsignmessage + verifymessage\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n-\t/* Should throw error because this address is not loaded in the wallet */\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n-\n-\t/* missing arguments */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString()), runtime_error);\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n-\t/* Illegal address */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n-\t/* wrong address */\n-\tBOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n-\t/* Correct address and signature but wrong message */\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n-\t/* Correct address, message and signature*/\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n-\n-\t/*********************************\n-\t * \t\tgetaddressesbyaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n-\tArray arr = retValue.get_array();\n-\tBOOST_CHECK(arr.size() > 0);\n-\tBOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n-\t\n-\tSelectParams(prevParams);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n+    BOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n+\n+    /*********************************\n+    * getaccount\n+    *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n+\n+    /*********************************\n+    * \tsignmessage + verifymessage\n+    *********************************/\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n+    /* Should throw error because this address is not loaded in the wallet */\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n+\n+    /* missing arguments */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString()), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n+    /* Illegal address */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n+    /* wrong address */\n+    BOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n+    /* Correct address and signature but wrong message */\n+    BOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n+    /* Correct address, message and signature*/\n+    BOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n+\n+    /*********************************\n+    * getaddressesbyaccount\n+    *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n+    Array arr = retValue.get_array();\n+    BOOST_CHECK(arr.size() > 0);\n+    BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+    \n+    SelectParams(prevParams);\n \n }\n "
      },
      {
        "sha": "415321c6e28838345f1a0341de0e6f93a4cb758c",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afdeb1a2e03212a4ddc95db2c9868aad910ef1c7/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=afdeb1a2e03212a4ddc95db2c9868aad910ef1c7",
        "patch": "@@ -30,7 +30,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-\t\t\n+\n         SelectParams(CBaseChainParams::REGTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET"
      }
    ]
  }
]