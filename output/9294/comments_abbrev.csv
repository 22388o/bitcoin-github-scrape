laanwj,2016-12-06T10:44:28Z,"Interesting assertion error in CWallet::CreateRawTransaction\n```\nstderr:\nbitcoind: ../../src/wallet/wallet.cpp:2395: bool CWallet::CreateTransaction(const std::vector<CRecipient>&, CWalletTx&, CReserveKey&, CAmount&, int&, std::string&, const CCoinControl*, bool): Assertion `ret' failed.\n  File ""/home/travis/build/bitcoin/bitcoin/qa/rpc-tests/test_framework/test_framework.py"", line 145, in",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-265118191,265118191,
jonasschnelli,2016-12-06T12:53:04Z,"Travis is failing because it did what it is supposed to: finding bugs.\nOnce #9295 is merged, travis should succeed.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-265142636,265142636,
gmaxwell,2016-12-10T19:20:42Z,"> Once #9295 is merged, travis should succeed.\n\nShall we find out?",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-266231176,266231176,
jonasschnelli,2016-12-11T10:16:11Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-266273821,266273821,
jonasschnelli,2016-12-12T08:37:55Z,Travis succeeds now.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-266371184,266371184,
jonasschnelli,2017-01-06T13:49:02Z,"Overhauled after recommendation from @sipa and @luke-jr.\n* The amount of external pre-generated keys now back at 100% from `-keypool=(default 100)`.\n* The amount of internal pre-generated keys is +20% from `-keypool=(default 100)`.\n* Pre-generate two internal keys at minimum\n\n... this now results in always have 120% keys pre-generated (20% internal key)",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-270906367,270906367,
jonasschnelli,2017-01-09T07:46:47Z,Updated with a small nit-fix (https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93689981) and a fix for wallet-dump.py RPC test. Travis should succeed now.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-271225631,271225631,
jonasschnelli,2017-01-10T15:51:47Z,Fixed @instagibbs points. Squashed into a single commit.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-271612354,271612354,
instagibbs,2017-01-10T16:04:18Z,utACK 4065d5fd44b9ce68a688c82353822a1cf49efe53,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-271616131,271616131,
jtimon,2017-01-10T18:16:31Z,"I'm not sure how this would work together with #8723 but at a first glance at the code, it seems to simplify things: concept ACK. Can you explain more about its interaction with #8723 and maybe suggest one of them to focus review on first?",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-271653613,271653613,
jonasschnelli,2017-01-12T19:46:46Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-272262994,272262994,
jonasschnelli,2017-01-13T07:38:52Z,"Added a commit that addresses some of @luke-jr points.\nMaybe we can try to not bike-shed this with to many design and code-style nits (braces, etc.) otherwise we will very likely delay this for 0.15.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-272380206,272380206,
jonasschnelli,2017-01-16T10:33:54Z,"Added a couple of fixes:\n* Most important, as @TheBlueMatt has discovered, the `nVersion` handling of `CKeyPool` was wrong. I have fixed it with a `try{}` to serialise the `fInternal` boolean.\n* Return `setKeyPool.size()` if hd or hd-chain-split is disabled\n* Removed redundant `IsLocked()` check\n* Fixed wrong keypool internal size in RPC help\n* Make sure we hand out keypool keys if HD_SP",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-272826123,272826123,
btcdrak,2017-01-16T20:39:18Z,"ACK e34676e\n",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-272957165,272957165,
jonasschnelli,2017-01-17T08:47:02Z,"Added three fixes for issues found by @TheBlueMatt and @luke-jr :\n\n* Switched to 100%/100% for the keypool distribution, also, make sure we always generate at least 1 key for each chain\n* Added a fix that ensures that we don't accidentally upgrade a NON hd-chain-split wallet to hd-chain-split wallet during encryption (=HD reseed).\n* Fix `GetOldestKeyPoolTime` to response `max(oldest_intern",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-273054746,273054746,
TheBlueMatt,2017-01-17T15:15:41Z,"utACK a874b75a180a9e967a3d936cf46df11f8531b70a modulo performance concerns, but I'm more than happy to fix those up post-merge if needed, as they should be pretty easy to address",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-273197120,273197120,
jonasschnelli,2017-01-17T15:43:24Z,"Performance on my Core i7 2.9 GHZ with a 5'000 keypool wallet.\n\nThis PR (results actually in 5k internal and 5k external keys = 10k keys)\n`getnewaddress: real    0m0.219s`\n\n0.13 (5k keys, no chain split)\n`getnewaddress: real    0m0.104s`",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-273205708,273205708,
btcdrak,2017-01-19T19:03:11Z,"utACK a874b75\n",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-273866847,273866847,
jonasschnelli,2017-01-20T19:12:11Z,Removed 0.14 tag (added to 0.15 milestone). Let's hope we can get this in after the 0.14 branch-off,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-274154469,274154469,
jonasschnelli,2017-01-26T20:05:19Z,"1. Fixed most (all?) of @ryanofsky nits\n2. Fixed @theuni's internal/external design nit.\n3. Removed the bump to 140000 TODO",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-275498023,275498023,
wodry,2017-01-27T06:10:56Z,"This split sounds interesting, I wanted to know about the motivation for this, but did not find any information neither in this PR nor by searching in the internet. Could You provide some information/link about motivation for this PR ?",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-275596185,275596185,
sipa,2017-01-27T06:34:41Z,"@wodry BIP32 specifies the use of separate chains for external addresses (those you give out to receive payments on) and internal addresses (used for sending change back to yourself). The initial BIP32 implementation in Bitcoin Core 0.13 did not implement this, and only had a single chain for both. That means you're unable to distinguish what are payments and change in a potential future version t",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-275598856,275598856,
jonasschnelli,2017-02-01T08:11:54Z,Had to rebase after #9377 and slightly modify the `fundrawtransaction.py` test (change `getnewaddress()` into `getrawchangeaddress()`).,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-276597025,276597025,
jonasschnelli,2017-03-02T10:19:36Z,"Is anything holding back this PR, is there anything left to do?",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-283614081,283614081,
jonasschnelli,2017-03-03T14:57:13Z,Needed rebase (caused by #8775).,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-283975045,283975045,
laanwj,2017-03-09T15:34:10Z,"> Is anything holding back this PR, is there anything left to do?\n\nEh yes we should merge this soon.\nSorry, (again) needs rebase though, probably trivial for the std:: changes in #9643",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-285384959,285384959,
jonasschnelli,2017-03-10T08:07:42Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-285604332,285604332,
laanwj,2017-03-10T08:52:15Z,"Locally here (Ubuntu 16.04, x86_64) it fails the wallet-dump.py test:\n```\nwallet-dump.py:\n2017-03-10 09:49:52.887000 TestFramework (INFO): Initializing test directory /tmp/testb91k5t1l/479\n2017-03-10 09:49:55.124000 TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/store/orion/projects/bitcoin/bitcoin/qa/rpc-tests/test_framework/test_framework.py"", lin",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-285612826,285612826,
NicolasDorier,2017-03-10T12:48:51Z,"~utACK 52874f378d3ba3050fddd3a3af0c5347077e2893~\n\nI do not really like the O(N) disk hit on the number of key in the pool. As I am dealing with lots of keys, and machines with crappy latency. But I might fix that in a separate PR.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-285661096,285661096,
NicolasDorier,2017-03-14T06:23:55Z,"Removing my ACK for now, this would make ReserveKey really too slow. I will propose a commit to fix that this week. \nI think there should be 2 keypools or at least a way to get the external count without iterating over the whole keypool, whichever is the most easy. I will play around.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-286333188,286333188,
jonasschnelli,2017-03-16T14:46:57Z,"Needed rebase.\n\nI think the performance is acceptable (see comparison further down).\nImproving the performance could be done after this PR. It's already packed.\n\nA `keypool=5000` comparison between this PR and Master (2.9 GHz Intel Core i7, OSX, SSD).\n\n## This PR\n(Keep in mind that they keypool is now **x2, 5000 ext. and 5000 int. key**)\n```\n$ time ./src/bitcoin-cli --regtest -",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287080205,287080205,
NicolasDorier,2017-03-17T07:28:24Z,"@jonasschnelli well this is on SSD. My hosted VM does not have that. Can you at least do something where I commented on the `if (i < missingInternal)` ?\nYou clutter internal and external together which make a very bad worst case scenario when there is a scan of the pool based on the filter.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287285828,287285828,
jonasschnelli,2017-03-17T15:39:05Z,"@NicolasDorier: this PR is open since a couple of month (dec 2016) and I don't want to add any form of optimisations (only fix real problems and it seems to me that the performance is still acceptable/while not good). We really should do this after this has been merged.\nAdding more optimisation will cause another round of reviewing (and we already did a couple of them).",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287389076,287389076,
ryanofsky,2017-03-17T17:40:34Z,"utACK 78f2cb926495114354d835a2ba344558384c89f9\n\nConfirmed there were no significant changes in the first 13 commits which were rebased since my previous ACK. The rebased commits just added std:: namespace prefixes and updated various python rpc error checks.\n\nAll of the changes in the 4 new commits also looked good. The only one of these that was a change in behavior rather than simple cle",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287422916,287422916,
NicolasDorier,2017-03-18T14:16:45Z,"utACK 78f2cb9\n@jonasschnelli understood, knowing that this PR blocks mine I would also like to see it merged as soon as possible. Will fix the performance issues myself after.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287549038,287549038,
TheBlueMatt,2017-03-20T23:58:39Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-287935243,287935243,
jonasschnelli,2017-03-24T10:05:23Z,Addressed @TheBlueMatt's nits (except https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107040500 which I'm not sure if this is a concern or not),https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-288981619,288981619,
NicolasDorier,2017-03-27T06:00:57Z,"re utACK 1df08d1\n",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-289361025,289361025,
jonasschnelli,2017-03-27T07:53:29Z,"Added a commit to address the backward compatibility issue during wallet encryption mentioned by @TheBlueMatt (https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107040500).\n@TheBlueMatt: can you give it a re-test?",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-289379637,289379637,
jonasschnelli,2017-03-28T07:20:43Z,"Fixed two points reported by @TheBlueMatt:\n1. Move Ser./Deser. of `nInternalChainCounter` to be the last element\n2. Fix a rebase issue where `pwalletMain` was used instead of `pWallet`.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-289685126,289685126,
laanwj,2017-03-29T10:46:58Z,"utACK 4115af7\nI think this has enough ACKs. Let's merge this and fix the rest, which seems to be less critical, later.",https://github.com/bitcoin/bitcoin/pull/9294#issuecomment-290053345,290053345,
paveljanik,2016-12-08T13:39:10Z,Still three?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r91514545,91514545,qa/rpc-tests/keypool.py
paveljanik,2016-12-08T13:40:19Z,three?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r91514738,91514738,qa/rpc-tests/keypool.py
luke-jr,2016-12-22T19:19:44Z,Prefer to explicitly add (internal ? 1 : 0),https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93681318,93681318,src/wallet/wallet.cpp
luke-jr,2016-12-22T20:09:31Z,"Seems like it would be better to just access the specific counter once with a post-increment, and use variables here.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93688939,93688939,src/wallet/wallet.cpp
luke-jr,2016-12-22T20:13:15Z,"IMO this is unintuitive ~~and can lead to loss~~. If users set a keypool size of 100, they expect to be able to safely generate 100 addresses between backups. I usually round down to 90 in advice to give some breathing room, but 80% here will break even that.\n\nTherefore, the full keypool size should be ensured on both chains.\n\nEdit: Forgot this was HD. Less critical in that case.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93689481,93689481,src/wallet/wallet.cpp
luke-jr,2016-12-22T20:16:23Z,IMO it would be better to use an enum for internal vs external rather than a bool.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93689981,93689981,src/wallet/wallet.cpp
jonasschnelli,2016-12-22T20:34:41Z,"Yes. This is a discussion point and I'd like to get others feedback (maybe @gmaxwell and @sipa).\nThe question is, if you want a keypool of 100 external + 50 (TBD)  internals = total 150 keys, if you set the keypool to 100.\n\nIMO user given values should be respected. If the user chooses keypool=100, the keypool should contain 100 keys. But as said, no strong opinion on that.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r93692459,93692459,src/wallet/wallet.cpp
instagibbs,2017-01-09T14:45:18Z,It's called `externalChainChildKey` but it could be either.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95167594,95167594,src/wallet/wallet.cpp
instagibbs,2017-01-09T14:46:51Z,update comment,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95167924,95167924,src/wallet/wallet.cpp
instagibbs,2017-01-09T14:50:51Z,/HD/HD split/?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95168762,95168762,src/wallet/wallet.cpp
instagibbs,2017-01-09T14:54:57Z,"I find it a bit confusing that this value goes from `0`(non-existant) to `-keypool` then to `-keypool*.2`. Perhaps have it start at 0 on previous commit, then set it to non-0 here (unless there is reasoning).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95169601,95169601,src/wallet/wallet.cpp
instagibbs,2017-01-09T14:56:43Z,Seems like a separate optimization?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95169944,95169944,src/wallet/wallet.cpp
instagibbs,2017-01-09T15:05:38Z,Might make sense to explicitly count both types and use those counts if we foresee a future with more possible types rather than implicitly count `total - external`. You'd know better than me how likely that is.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95171761,95171761,src/wallet/rpcwallet.cpp
instagibbs,2017-01-09T15:13:48Z,"also, this is 100%, not 80% of 6. 100% vs 20%, not 80% vs 20%.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95173485,95173485,qa/rpc-tests/keypool.py
jonasschnelli,2017-01-10T15:28:26Z,I think it make sense to keep this as it is: `keypoolsize` should be alined with the `-keypool` conf. That's why `keypoolsize` in `getwalletinfo` responses only the external key-count in the keypool (`-keypool` conf arg also defines the external key count).,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95386634,95386634,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-10T15:29:39Z,"> IMO it would be better to use an enum for internal vs external rather than a bool.\n\nWhy? Either its internal or external. Once we have more configurable HD key derivation (ext-pubkey-derivation, hd-multisig) we could switch to a enum or a more flexible design.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95386917,95386917,src/wallet/wallet.cpp
jonasschnelli,2017-01-10T15:41:36Z,"Right. This is no longer required because we always derive at minimum 2 internal keys. And `ReserveKeyFromKeyPool` will topup the keypool.\nWill remove that part.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95389732,95389732,src/wallet/wallet.cpp
jonasschnelli,2017-01-10T15:51:11Z,"> I find it a bit confusing that this value goes from 0(non-existant) to -keypool then to -keypool*.2. Perhaps have it start at 0 on previous commit, then set it to non-0 here (unless there is reasoning).\n\nFixed. I decided to squash the two commit into a single one because the current PR is a non-splittable change.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95392157,95392157,src/wallet/wallet.cpp
instagibbs,2017-01-10T16:01:15Z,"Sorry, I agree with what you're saying I just wasn't clear enough. I suppose it's along the lines of @luke-jr 's comment about enum, keeping flexible for the future. Not a blocker, just a suggestion. That can be deferred. ",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95394754,95394754,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-10T16:05:09Z,"Right. This is generally a good idea. IMO the next possible HD extensions (far away) are maybe xpub watch-only-wallets, flexible keypath, hd-multisig.\nI can't imagine any change the would require a third (or more then two) type(s) during key derivation as well as in the keypool.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95395818,95395818,src/wallet/rpcwallet.cpp
luke-jr,2017-01-12T20:19:41Z,"This should set nInternalChainCounter for old versions - maybe use `std::numeric_limits<uint32_t>::max()` (and make it private, with all accessors throwing if it's not a sufficient version)?\n\nAlso, braces, please.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95876001,95876001,src/wallet/walletdb.h
luke-jr,2017-01-12T20:21:02Z,To avoid implicit casting when/if the type changes for this parameter. Also makes it clearer at the call-locations what the parameter is specifying.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95876240,95876240,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:22:25Z,"Is there a reason to do this check here, rather than inside `DeriveNewChildKey`?",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95876524,95876524,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:24:34Z,"Seems like this could be significantly simplified with:\n\n```C++\nuint32_t &nChainCounter = (internal ? hdChain.nInternalChainCounter : hdChain.nExternalChainCounter);\n```",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95876955,95876955,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:26:25Z,I think this won't work if the user specifies a HD-but-not-split wallet version for `-walletupgrade`?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95877306,95877306,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:29:27Z,"Probably should check the return value here. Since `TopUpKeyPool` also checks `IsLocked`, perhaps replace it above?",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95877821,95877821,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:32:56Z,Maybe `KeypoolCountKeys(bool internal)`?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95878452,95878452,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:34:02Z,"Iterating over the entire keypool, even if small (which is not guaranteed), seems excessive to do for every keypool top-up... *especially* if we're reading the wallet db (ie, I/O) for each key.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95878639,95878639,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:39:45Z,"Shouldn't the cast be directly on `nTargetSize`, rather than the result of the subtraction?",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95879714,95879714,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:40:55Z,"Also don't create extra internal keys (already current code behaviour, but comment could be clearer).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95879952,95879952,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:43:51Z,"Better to count down and avoid adding every iteration:\n\n```C++\nfor (int64_t i = missingInternal + missingExternal; i--; )\n```",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95880566,95880566,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:45:03Z,"(Assuming counting down, and `internal` initialised to `false` above:)\n\n```C++\nif (i < missingInternal) {\n    internal = true;\n}\n```",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95880783,95880783,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:48:04Z,"These exceptions used to be thrown after the key was removed from the set, allowing a retry to succeed. That is no longer the case here, potentially leading to irrecoverable situations. I'm unsure if this is good or bad.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95881341,95881341,src/wallet/wallet.cpp
luke-jr,2017-01-12T20:55:39Z,"Maybe throw an exception if `!ser_action.ForRead() && fInternal`?\n\nEither way, please add braces.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95882702,95882702,src/wallet/wallet.h
luke-jr,2017-01-12T20:56:54Z,"Do we want `internal` to have a default? Should it be `false`? IIRC currently new keys default to change unless added to the address book, so this default seems to contradict the status quo.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95882966,95882966,src/wallet/wallet.h
luke-jr,2017-01-12T20:58:26Z,Missing logic to initialise this version.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95883264,95883264,src/wallet/walletdb.h
luke-jr,2017-01-12T21:02:36Z,`keypoolsize` should probably be the lower of the two and deprecated. There is no reason to assume prior use didn't look at it for info on change keys.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95883977,95883977,src/wallet/rpcwallet.cpp
luke-jr,2017-01-12T21:03:47Z,"`""keypoolsizes"": {""internal"": N, ""external"": N}` sounds like a good idea here.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95884181,95884181,src/wallet/rpcwallet.cpp
luke-jr,2017-01-12T21:04:32Z,Shouldn't this use `CanSupportFeature(FEATURE_HD_SPLIT)`?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95884308,95884308,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-13T07:18:00Z,I think always reporting `keypoolsize_hd_internal` (with 0 in non HD-SPLIT case) can make parsing simpler.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947333,95947333,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-13T07:18:52Z,"I though about that, but this would break the API while the current PRs change does not.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947412,95947412,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-13T07:20:56Z,"A design question, but IMO `DeriveNewChildKey` should execute the derivation and not care about wallet versions and supported features.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947588,95947588,src/wallet/wallet.cpp
jonasschnelli,2017-01-13T07:22:18Z,I think we should no longer allow non split HD versions.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947698,95947698,src/wallet/wallet.cpp
jonasschnelli,2017-01-13T07:23:10Z,The program can never reach this point in `IsLocked()` state because we return at L2871.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947772,95947772,src/wallet/wallet.cpp
jonasschnelli,2017-01-13T07:24:29Z,Again a design question. setKeyPool.size() - KeypoolCountExternalKeys() = internal key count.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95947886,95947886,src/wallet/wallet.cpp
jonasschnelli,2017-01-13T07:26:06Z,I think we have no other reliable way here and the performance impact should be little. BDB should be pretty fast for that operation and we are only opening the DB once.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95948005,95948005,src/wallet/wallet.cpp
jonasschnelli,2017-01-13T07:31:27Z,I have set the default to false to keep the exiting behaviour.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95948431,95948431,src/wallet/wallet.h
jonasschnelli,2017-01-13T07:32:24Z,`VERSION_HD_BASE` is only there to identify versions that do not support HD SPLIT (first HD version introduced in 0.13).,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r95948510,95948510,src/wallet/walletdb.h
luke-jr,2017-01-13T17:09:43Z,"Then always report it? Right now it's conditional on something more or less irrelevant.\n\nBut I'm not sure it makes sense to ever report 0 when there are indeed keys that will be used for internal outputs...",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96032020,96032020,src/wallet/rpcwallet.cpp
luke-jr,2017-01-13T17:10:59Z,My point is that the existing behaviour is closer to `true` than `false`.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96032283,96032283,src/wallet/wallet.h
luke-jr,2017-01-13T17:12:08Z,Is there some reason not to have a vector or map of separate setKeyPools? (With the current setKeyPool a special case for external keys),https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96032544,96032544,src/wallet/wallet.cpp
luke-jr,2017-01-13T17:12:33Z,That's going to break as soon as we have more than internal/external key pools...,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96032629,96032629,src/wallet/wallet.cpp
luke-jr,2017-01-13T17:13:56Z,"`TopUpKeyPool` could return `false` for other reasons as well. There's no need to check `IsLocked` at L2871; it's redundant. So just remove that check and do:\n\n```C++\nif (!TopUpKeyPool()) {\n    return false;\n}\n```",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96032856,96032856,src/wallet/wallet.cpp
luke-jr,2017-01-13T17:14:52Z,Maybe move it to `private:` then?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96033021,96033021,src/wallet/wallet.cpp
theuni,2017-01-13T18:46:25Z,"Since almost everything here is different depending on internal/external, I think it'd be clearer to just make it ```if (internal)``` and separate the behaviors",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96049236,96049236,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T02:34:17Z,"This also forcibly upgrades the user's wallet (if from pre-split HD version) if they encrypt their wallet, which I think is unaccptable.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96106550,96106550,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T02:38:14Z,"Can we just set the target for both internal and external to nTargetSize? It seems super non-user-friendly that the setting which used to mean ""can create this many keys/transactions"" now means ""can create this many keys, or 1/5th as many transactions"". I dont think we care all that much about the performance hit, do we?",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96106666,96106666,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T03:11:15Z,Note that if you change this need to set the newHdChain's version to the appropriate value prior to SetHDChain.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107402,96107402,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T03:18:43Z,"I think the 10% number is wrong? current code is 20, I believe? (and I think it should be changed to 100).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107529,96107529,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-14T03:20:58Z,"I think we really need to update this - keypoololdest is used to know when your backup has been invalidated. I know technically now that we have HD wallets arent invalidated, but until we have rebuilding-from-chain implemented I think we really need to make sure keypoololdest is still useable as ""if your backup is older than this date, backup again"".\n\nThis means keypoololdest needs to be max(o",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107555,96107555,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-14T03:23:15Z,"Additionally, this is called at the entry to getwalletinfo, even with HD disabled. While I agree with @luke-jr that there should probably be two separate setKeyPools, at a minimum this function needs an if (!IsHDEnabled()) return setKeyPool.size(); to avoid causing massive slowdown for folks who are using non-hd wallets with massive keypools (to avoid constant backups).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107590,96107590,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T03:25:15Z,"Maybe also mention that keypoolsize_hd_internal is NOT included in this count, as one might assume that external_keypool = keypoolsize - keypoolsize_hd_internal from these docs.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107623,96107623,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-14T03:36:28Z,"This should be max(max(nTargetSize, 1) - amountExternal, 0) to avoid violating some of the assumptions about at least one keypool entry being available after TopUpKeyPool returns.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96107802,96107802,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T03:53:05Z,"You need to check if internal is enabled here, not just hd enabled, I think. GetReservedKey is used in a few places with internal set to true without checking if internal is enabled, and if its not, you could end up never succeeding in getting a key, since HD might be enabled, but they never find an internal key.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96108060,96108060,src/wallet/wallet.cpp
TheBlueMatt,2017-01-14T04:02:23Z,I do not believe the serializer version is set to the wallet's version. I believe it is the one set in src/wallet/db.h - CLIENT_VERSION.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96108183,96108183,src/wallet/wallet.h
jonasschnelli,2017-01-16T08:01:35Z,Agree. But probably in a separate PR.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96177396,96177396,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-16T10:16:06Z,"Where do you see the need to set the `nInternalChainCounter` for old versions here? Old Versions will always have the `nInternalChainCounter` set the `0` over `SetNull()` during the constructor call.\n\nA new chain (which then will enable `VERSION_HD_CHAIN_SPLIT`) can only be created when a new HD master key will be set which again will enable `FEATURE_HD_SPLIT`.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96197113,96197113,src/wallet/walletdb.h
jonasschnelli,2017-01-16T10:24:12Z,Some weeks back we discusses that and we came up with something that we should create less internal keys. But I'm fine with 100%/100%. Any objections?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96198575,96198575,src/wallet/wallet.cpp
jonasschnelli,2017-01-16T10:26:45Z,We could... one question is: if the users encrypt his 0.13 wallet (HD enabled but no chain split) in 0.14. Do we want to keep the non-hd split or do we want to enforce an upgrade to HD_Split. The later seems preferable from the users perspective (Is there a reason to not split the HD chains if we can?).,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96198987,96198987,src/wallet/wallet.cpp
TheBlueMatt,2017-01-16T20:18:08Z,"I believe it is policy to not upgrade a user's wallet unless they have specifically requested we do so, so, no, I dont think we should use HD_Split at that point.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96299096,96299096,src/wallet/wallet.cpp
TheBlueMatt,2017-01-16T21:00:49Z,s/chnage/change/,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96304197,96304197,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-16T21:02:10Z,"I'd be fine with reducing the internal keypool significantly once we have rescan logic that can regenerate keys, but until then I think we absolutely need to have it be 100%.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96304347,96304347,src/wallet/wallet.cpp
TheBlueMatt,2017-01-16T21:05:20Z,"Not doing this would break some uses of walletbackup, I think, so I wouldnt be too happy with this slipping into a different release.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96304722,96304722,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-16T21:08:48Z,"Also, these docs are super confusing - the way I read it, if I have HD enabled I'll never have a keypool for change-output keys, which isnt true - they're just included here.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96305141,96305141,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-01-16T22:57:09Z,"I believe this is a bug, which would need fixing prior to merge.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96317711,96317711,src/wallet/wallet.cpp
jonasschnelli,2017-01-17T07:39:56Z,Okay. This is fixed now (https://github.com/bitcoin/bitcoin/pull/9294/files#diff-b2bb174788c7409b671c46ccc86034bdR2886).,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96356711,96356711,src/wallet/wallet.cpp
luke-jr,2017-01-18T17:49:05Z,"It should be setup to prevent accidental usage. If any code were to attempt to use it without a wallet that supports it, we want to throw an error/exception, not silently generate keys we may not be able to recover.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96693727,96693727,src/wallet/walletdb.h
luke-jr,2017-01-18T17:53:42Z,"That commit merely implements a fix for non-split-HD wallets, not for new wallets...",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96694615,96694615,src/wallet/wallet.cpp
TheBlueMatt,2017-01-18T18:12:20Z,"See comments later in the PR, the performance measurements that @jonasschnelli did indicate there is little to no issue for most uses...if we found out this is not true later, we can fix it as a regression-fix.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96698346,96698346,src/wallet/wallet.cpp
luke-jr,2017-01-18T20:19:47Z,"Okay, I expected changing this would be a wallet file format change, but upon further investigation I see it is not.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96725032,96725032,src/wallet/wallet.cpp
ryanofsky,2017-01-19T18:11:12Z,(int) cast superfluous ,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96921055,96921055,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-19T18:13:29Z,"Nit: new comments don't follow existing style in test (space after #, capitalized)",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96921481,96921481,qa/rpc-tests/wallet-hd.py
ryanofsky,2017-01-19T18:13:45Z,trailing whitespace here,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96921545,96921545,qa/rpc-tests/wallet-hd.py
ryanofsky,2017-01-19T18:15:24Z,maybe use assert_equal,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96921865,96921865,qa/rpc-tests/wallet-hd.py
ryanofsky,2017-01-19T18:46:16Z,"Note: I was confused about why 4 generates were needed here previously to use up only 3 keys. But I think it was because TopupKeyPool used to create (nTargetSize + 1) keys instead of nTargetSize keys, which is fixed now.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96928350,96928350,qa/rpc-tests/keypool.py
gmaxwell,2017-01-19T19:19:55Z,I'm completely confused by this? why would the version of the wallet change due to a branch here? won't that break compatibility with wallets generated by git master and cause funds loss for them?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96935865,96935865,src/wallet/wallet.h
ryanofsky,2017-01-19T19:25:34Z,"Could you add a comment mentioning why in this case it is safe to assume key with the lowest index is the oldest key, while in the above case, you need to loop through the keys to find the oldest one. It's not clear (at least to me) why FEATURE_HD_SPLIT would affect key order.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96937164,96937164,src/wallet/wallet.cpp
jonasschnelli,2017-01-19T19:44:45Z,We can keep `139999` for 0.14 to make it compatible with wallets created before branching of 0.14 made with this PR. Unsure what's best practice here...,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96941460,96941460,src/wallet/wallet.h
jonasschnelli,2017-01-19T20:25:38Z,"from IRC\n```\n[21:24:20]  <sipa>	[20:47:45] yeah, there is a race there\n[21:24:20]  <sipa>	[20:48:00] that's always the case when a feature needs to be tied to a version number\n[21:24:20]  <morcos>	[20:48:18] i don't see any problem leaving FEATURE_HD_SPLIT = 139900\n[21:24:20]  <jonasschnelli>	[20:48:21] sipa: keeping in 139999 looks bad but is efficient?\n[21:24:20]  <morcos>	[20:48:24]",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r96949926,96949926,src/wallet/wallet.h
jonasschnelli,2017-01-20T08:20:25Z,"I haven't change this part,... but I feel with you that this is very likely a bug we carry around a long time. Haven't verified it, but returning a `CKeyPool` done in (`void CWallet::ReturnKey(int64_t nIndex)`) will mess up the order assumption.\nIf is a bug, we should fix it,... but maybe in a different PR.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r97028646,97028646,src/wallet/wallet.cpp
jonasschnelli,2017-01-20T09:40:47Z,"I debugged that a little bit and it seems that this assumption (first item in setKeyPool is always oldest key) holds.\n\n* The `std::set setKeyPool` (always ordered) contains `int64_t`. CKeyPool instances remember that nIndex (index of the setKeyPool int64.\n* New CKeyPools will always insert `int64_t nEnd = *(--setKeyPool.end()) + 1;`.\n* Returning keys will keep the date order because the re",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r97039301,97039301,src/wallet/wallet.cpp
ryanofsky,2017-01-24T19:09:09Z,"So it seems like there is no reason for having a FEATURE_HD_SPLIT special case here. Could your remove either the new block of code or the old block of code, and just keep one implementation?",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r97625815,97625815,src/wallet/wallet.cpp
ryanofsky,2017-01-24T19:16:05Z,Maybe add a TODO comment (though this does seem to me like a desirable change to include in this PR).,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r97627414,97627414,src/wallet/rpcwallet.cpp
ryanofsky,2017-01-24T19:36:56Z,Sounds like you just need to remove the TODO.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r97632469,97632469,src/wallet/wallet.h
jonasschnelli,2017-01-26T19:32:18Z,"> Maybe add a TODO comment (though this does seem to me like a desirable change to include in this PR).\n\nThis is fixed in the current version.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98072905,98072905,src/wallet/rpcwallet.cpp
jonasschnelli,2017-01-26T19:34:09Z,"Yes. There are arguments for and against throwing before or after removing. If we throw here, you already ran into (more) significant issues.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98073336,98073336,src/wallet/wallet.cpp
jonasschnelli,2017-01-26T19:50:11Z,"We still need the `FEATURE_HD_SPLIT` special case here. If don't want to return just the oldest key in that case. \nReason:\n* Assume people use GetOldestKeyPoolTime() to determine if it's time for a new backup (difficult question when it's HD anyways, but that actually what @TheBlueMatt came up in https://github.com/bitcoin/bitcoin/pull/9294/files#r96107555)\n* Assume your key in the keypool a",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98076862,98076862,src/wallet/wallet.cpp
jonasschnelli,2017-01-26T19:51:34Z,I think if we branch of 0.14 we would need to bump it to `1499000`. If someone was using this patch in production... he's.. in serious troubles anyways. :),https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98077143,98077143,src/wallet/wallet.h
MarcoFalke,2017-01-26T19:54:56Z,"It should not be required to bump it when it is in master, because some people are using master ""in production"" (i.e. on the main net).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98077940,98077940,src/wallet/wallet.h
ryanofsky,2017-01-26T20:36:22Z,I think you're right. Actually I was just confused because I misread std::max as std::min and couldn't figure out what the new code was doing differently!,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r98085837,98085837,src/wallet/wallet.cpp
NicolasDorier,2017-03-14T06:28:33Z,"if you use `internal = i % 2 == 0;` instead, then at least `ReserveKeyFromPool` would not have to iterates over all the external keys to find one which match the filter when the filter search for internal key.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r105834862,105834862,src/wallet/wallet.cpp
NicolasDorier,2017-03-17T07:26:59Z,"Actually no, my answer would not do. But you can still not clutter internal and external together.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r106595854,106595854,src/wallet/wallet.cpp
TheBlueMatt,2017-03-20T19:47:01Z,nit: I believe comment should point out that this is expected of any old wallets.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r106998328,106998328,src/wallet/wallet.h
TheBlueMatt,2017-03-20T23:01:35Z,Maybe add an additional if (oldest_internal != now && oldest_external != now) break; ?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107037955,107037955,src/wallet/wallet.cpp
TheBlueMatt,2017-03-20T23:13:48Z,"Technically this should happen before SetHDMasterKey, I believe (otherwise it maybe a race?)",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107039826,107039826,src/wallet/wallet.cpp
TheBlueMatt,2017-03-20T23:18:31Z,"By defaulting to VERSION_HD_CHAIN_SPLIT, encrypting a wallet will auto-upgrade the wallet without asking the user, I believe this is technically a bug.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107040500,107040500,src/wallet/walletdb.h
TheBlueMatt,2017-03-20T23:36:15Z,Why is this required? Doesnt walletpassphrase TopUpKeyPool?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107042915,107042915,qa/rpc-tests/fundrawtransaction.py
TheBlueMatt,2017-03-20T23:57:39Z,"Yea, really should be private, I think.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107045646,107045646,src/wallet/wallet.cpp
TheBlueMatt,2017-03-20T23:58:04Z,Maybe assert(CanSupportFeature()) here?,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107045701,107045701,src/wallet/wallet.cpp
jonasschnelli,2017-03-24T09:40:06Z,"Ah. Right. It's guaranteed that the `setKeyPool` iterates always from the oldest to the newest.\nWill add.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107864722,107864722,src/wallet/wallet.cpp
jonasschnelli,2017-03-24T09:53:02Z,"It would upgrade to the new `CHDChain` serialisation format (including the `nInternalChainCounter`), but it would not upgrade to use internal keys, right?\nIs that problematic? If so, I can add a fix that keeps the serialisation version of `CHDChain` during encryption.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r107866883,107866883,src/wallet/walletdb.h
TheBlueMatt,2017-03-24T21:22:50Z,It would break opening in old wallets either way - because the nInternalChainCounter is added in the middle instead of the end the deserialization would come back with garbage.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108002156,108002156,src/wallet/walletdb.h
TheBlueMatt,2017-03-27T21:10:49Z,"Oops, should be pwallet, not pwalletMain now :).",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108280934,108280934,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-03-27T21:19:29Z,"In addition to the fix for backward compat where you set the version, can we make this more robust and flip the order? Generally adding new fields for (de-)serialization we should be adding them to the end.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108282612,108282612,src/wallet/walletdb.h
TheBlueMatt,2017-03-27T21:28:08Z,Why not SetHDMasterKey(int nHDChainVersion)? Then you can just do CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE.,https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108284410,108284410,src/wallet/wallet.cpp
TheBlueMatt,2017-03-27T21:43:53Z,"nit: the old version does an assert(keypool.vchPubKey.IsValid()); which is nice to have...not necessary to add, but would be cool.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108287567,108287567,src/wallet/wallet.cpp
jonasschnelli,2017-03-28T07:13:38Z,"I though hiding the internals at this point would be preferable. IMO `CWallet::encryptWallet` should not have direct knowhow of the CHDChain version handling. I'd prefer passing in the old chain and let it be handled through `SetHDMasterKey`. Also, in future maybe other attributes need to be preserved.\nNot sure although.",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108348270,108348270,src/wallet/wallet.cpp
jonasschnelli,2017-03-28T07:16:18Z,For the keypool oldest it's further down L3026 (at https://github.com/bitcoin/bitcoin/pull/9294/files#diff-b2bb174788c7409b671c46ccc86034bdL3026),https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108348650,108348650,src/wallet/wallet.cpp
TheBlueMatt,2017-03-28T17:58:04Z,"It kinda feels like mixing models, then. Wallet checks for FEATURE_HD_SPLIT everywhere before it updates the nInternalCounts, ie it seems to think its responsible for doing the checks, only to have CHDChain hide some stuff like version, but then you have to copy the version? Either we move logic into CHDChain (as @luke-jr suggested previously, have CHDChain know what version means and assert if yo",https://github.com/bitcoin/bitcoin/pull/9294#discussion_r108491789,108491789,src/wallet/wallet.cpp
