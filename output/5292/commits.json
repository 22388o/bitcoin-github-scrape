[
  {
    "sha": "7329fdd1bae6793fb505994ccd241eca2afc3841",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzI5ZmRkMWJhZTY3OTNmYjUwNTk5NGNjZDI0MWVjYTJhZmMzODQx",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-17T02:29:09Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-17T02:29:09Z"
      },
      "message": "Update comments in txmempool to be doxygen compatible\n\nFix typo in Read() error message",
      "tree": {
        "sha": "b377da6e454db4b34e3dc5ef603f9a28b7c89853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b377da6e454db4b34e3dc5ef603f9a28b7c89853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7329fdd1bae6793fb505994ccd241eca2afc3841",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7329fdd1bae6793fb505994ccd241eca2afc3841",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7329fdd1bae6793fb505994ccd241eca2afc3841",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7329fdd1bae6793fb505994ccd241eca2afc3841/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d3ce7421e11ed693840e04bee4d18fb9d396309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d3ce7421e11ed693840e04bee4d18fb9d396309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d3ce7421e11ed693840e04bee4d18fb9d396309"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 47,
      "deletions": 35
    },
    "files": [
      {
        "sha": "e13f1cc350f5d1240d5cdca4167036b3f6ad13c7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7329fdd1bae6793fb505994ccd241eca2afc3841/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7329fdd1bae6793fb505994ccd241eca2afc3841/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7329fdd1bae6793fb505994ccd241eca2afc3841",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"txmempool.h\"\n@@ -45,9 +45,9 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n-//\n-// Keep track of fee/priority for transactions confirmed within N blocks\n-//\n+/**\n+ * Keep track of fee/priority for transactions confirmed within N blocks\n+ */\n class CBlockAverage\n {\n private:\n@@ -86,8 +86,10 @@ class CBlockAverage\n         return prioritySamples.size();\n     }\n \n-    // Used as belt-and-suspenders check when reading to detect\n-    // file corruption\n+    /**\n+     * Used as belt-and-suspenders check when reading to detect\n+     * file corruption\n+     */\n     bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n     {\n         BOOST_FOREACH(CFeeRate fee, vecFee)\n@@ -139,16 +141,20 @@ class CBlockAverage\n class CMinerPolicyEstimator\n {\n private:\n-    // Records observed averages transactions that confirmed within one block, two blocks,\n-    // three blocks etc.\n+    /**\n+     * Records observed averages transactions that confirmed within one block, two blocks,\n+     * three blocks etc.\n+     */\n     std::vector<CBlockAverage> history;\n     std::vector<CFeeRate> sortedFeeSamples;\n     std::vector<double> sortedPrioritySamples;\n \n     int nBestSeenHeight;\n \n-    // nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n-    // nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n+    /**\n+     * nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n+     * nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n+     */\n     void seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo)\n     {\n         // Last entry records \"everything else\".\n@@ -248,7 +254,9 @@ class CMinerPolicyEstimator\n         }\n     }\n \n-    // Can return CFeeRate(0) if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n+    /**\n+     * Can return CFeeRate(0) if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n+     */\n     CFeeRate estimateFee(int nBlocksToConfirm)\n     {\n         nBlocksToConfirm--;\n@@ -332,7 +340,7 @@ class CMinerPolicyEstimator\n         size_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n-            throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entires.\");\n+            throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");\n \n         std::vector<CBlockAverage> fileHistory;\n         \n@@ -462,7 +470,9 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n     }\n }\n \n-// Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n+/**\n+ * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n+ */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                                 std::list<CTransaction>& conflicts)\n {"
      },
      {
        "sha": "0d3c8bba6a2cf219634b6ecb8887cc7fba913de1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 23,
        "deletions": 21,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7329fdd1bae6793fb505994ccd241eca2afc3841/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7329fdd1bae6793fb505994ccd241eca2afc3841/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7329fdd1bae6793fb505994ccd241eca2afc3841",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_TXMEMPOOL_H\n@@ -25,19 +25,19 @@ inline bool AllowFree(double dPriority)\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n-/*\n+/**\n  * CTxMemPool stores these:\n  */\n class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    CAmount nFee; // Cached to avoid expensive parent-transaction lookups\n-    size_t nTxSize; // ... and avoid recomputing tx size\n-    size_t nModSize; // ... and modified size for priority\n-    int64_t nTime; // Local time when entering the mempool\n-    double dPriority; // Priority when entering the mempool\n-    unsigned int nHeight; // Chain height when entering the mempool\n+    CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize; //! ... and avoid recomputing tx size\n+    size_t nModSize; //! ... and modified size for priority\n+    int64_t nTime; //! Local time when entering the mempool\n+    double dPriority; //! Priority when entering the mempool\n+    unsigned int nHeight; //! Chain height when entering the mempool\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n@@ -68,7 +68,7 @@ class CInPoint\n     bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }\n };\n \n-/*\n+/**\n  * CTxMemPool stores valid-according-to-the-current-best-chain\n  * transactions that may be included in the next block.\n  *\n@@ -81,12 +81,12 @@ class CInPoint\n class CTxMemPool\n {\n private:\n-    bool fSanityCheck; // Normally false, true if -checkmempool or -regtest\n+    bool fSanityCheck; //! Normally false, true if -checkmempool or -regtest\n     unsigned int nTransactionsUpdated;\n     CMinerPolicyEstimator* minerPolicyEstimator;\n \n-    CFeeRate minRelayFee; // Passed to constructor to avoid dependency on main\n-    uint64_t totalTxSize; // sum of all mempool tx' byte sizes\n+    CFeeRate minRelayFee; //! Passed to constructor to avoid dependency on main\n+    uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n \n public:\n     mutable CCriticalSection cs;\n@@ -97,7 +97,7 @@ class CTxMemPool\n     CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n \n-    /*\n+    /**\n      * If sanity-checking is turned on, check makes sure the pool is\n      * consistent (does not contain two transactions that spend the same inputs,\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n@@ -141,19 +141,21 @@ class CTxMemPool\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n \n-    // Estimate fee rate needed to get into the next\n-    // nBlocks\n+    /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n-    // Estimate priority needed to get into the next\n-    // nBlocks\n+\n+    /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n-    // Write/Read estimates to disk\n+    \n+    /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n };\n \n-/** CCoinsView that brings transactions from a memorypool into view.\n-    It does not check for spendings by memory pool transactions. */\n+/** \n+ * CCoinsView that brings transactions from a memorypool into view.\n+ * It does not check for spendings by memory pool transactions.\n+ */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:"
      }
    ]
  }
]