DrahtBot,2020-06-23 19:34:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19316 ([net] Cleanup logic around connection types by amitiuttarwar)\n* #19315 ([tests] Allow outbound & block-relay-only",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648374732,648374732,
naumenkogs,2020-06-24 08:55:22,"Concept ACK.\nThe idea makes perfect sense from the high-level. The implementation seems safe.",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648690864,648690864,
laanwj,2020-06-24 13:10:08,"Does this new global data structure need to be limited in size in some way? At least when it was per peer, it would go away when the peer was disconnected. I'm vaguely worried that this might open up a new DoS vector.",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648809825,648809825,
jnewbery,2020-06-24 14:22:59,"> Does this new global data structure need to be limited in size in some way? At least when it was per peer, it would go away when the peer was disconnected. I'm vaguely worried that this might open up a new DoS vector.\n\nThat's the right question to be asking, but I think we're safe:\n\n- items are inserted into `g_orphan_work_set` at the point they would have been inserted into the per-peer",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648852380,648852380,
jnewbery,2020-06-29 16:58:17,"> If I can give it a shot, the suspected DoS vector is something along the lines of a peer feeding us fake orphan transactions, therefore inflating the size of g_orphan_work_set and preventing us from processing any other orphaned transactions?\n\nI think @laanwj's concern may have been in general about us storing unvalidated data from a peer, which is always something that we need to be careful",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-651242980,651242980,
hebasto,2020-06-29 17:14:05,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-651250718,651250718,
jnewbery,2020-07-01 14:00:02,"> I wonder if there may have been a reason why it was implemented this way in #15644 / 866c805, so it may be good to have review by the author of the code.\n\nSee https://github.com/bitcoin/bitcoin/pull/15644#discussion_r270527597\n\n> To keep the commits hygienic, consider removing the call to ProcessOrphanTx from ProcessMessage in the same commit that adds the new call to it from ProcessGlob",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-652436023,652436023,
jonatack,2020-07-01 15:25:44,"Thanks @jnewbery.\n\nI wanted to encourage the Doxygen commit if you weren't sure about doing a follow-up.\n\nACK 9487f082e5f4b9696e3b4fd42aafebf42617ca9c",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-652485733,652485733,
troygiorshev,2020-07-02 04:26:11,"reACK 9487f082e5f4b9696e3b4fd42aafebf42617ca9c\n\nLooking forward to the follow-up!",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-652773736,652773736,
sipa,2020-07-02 04:51:39,"It took me a while to remember the context here, but this PR causes a subtle but significant change in P2P behavior.\n\nThe reason that there is a per-peer set of to-be-processed potential orphans is that this lets us pause processing for that peer until they're all processed - as long as the orphan work set for a peer is non-empty, all that happens for that peer is steps towards emptying that s",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-652779980,652779980,
jnewbery,2020-07-02 15:19:44,">  I'm not sure that anything depends on that behavior, but I also can't guarantee that there isn't.\n\n> I don't think code cleanup is a sufficient justification for such a fundamental P2P change.\n\nFor context, this is part of a [wider project to move all application-layer data and processing into net processing](https://github.com/bitcoin/bitcoin/issues/19398).\n\nThe PR that introduced ",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-653069628,653069628,
jnewbery,2020-07-02 22:37:03,Lots of discussion about this on IRC today: http://www.erisian.com.au/bitcoin-core-dev/log-2020-07-02.html L325 onwards.,https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-653247942,653247942,
sipa,2020-07-07 18:25:56,"FWIW here is a commit that moves `orphan_work_set` to net_processing (inside `NodeState`) without changing semantics: https://github.com/sipa/bitcoin/commits/202007_orphan_work_set_to_np\n\nIt also makes `orphan_work_set` protected by `g_cs_orphans`, as it apparently was not explicitly protected by any lock in the existing code (which was ok as only the message handler thread accessed it, but st",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-655042711,655042711,
jnewbery,2020-07-07 19:20:08,"This PR intended to do two things:\n\n1. Don't do orphan reconsideration in the context of an individual peer\n2. Move orphan_work_set data from net into net_processing.\n\nI think both changes are good. If everyone agreed, I don't think it'd be a problem to do both in this PR, but since this is controversial and @sipa has concerns that (1) is correct, it makes sense to split them out and con",https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-655071056,655071056,
naumenkogs,2020-06-24 08:47:55,"Wondering if we should clarify that these tasks are expected to be limited to 1 second or something (perhaps ""lightweight tasks"")?\nJust so that future devs don't tempt to put any heavy logic in here.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r444741653,444741653,src/net_processing.h
jnewbery,2020-06-24 13:42:58,"Such documentation, if it's added, should be at the level of the `PeerLogicValidation` class. We don't want anything in the message handler thread to block for a long time (or to *be blocked* by slow tasks in other threads). That includes anything in  `ProcessMessages()`, `SendMessages()` and (now) `ProcessGlobalTasks()`.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r444902920,444902920,src/net_processing.h
troygiorshev,2020-06-29 13:41:02,"Compiler warning `-Winconsistent-missing-override`\n```suggestion\n    bool ProcessGlobalTasks(std::atomic<bool>& interrupt) override;\n```",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r446979785,446979785,src/net_processing.h
jnewbery,2020-06-29 16:52:10,Good catch. Fixed!,https://github.com/bitcoin/bitcoin/pull/19364#discussion_r447114046,447114046,src/net_processing.h
jonatack,2020-07-01 03:48:04,9200126 nit: would it be better to use `emplace` here to construct rather than copy?,https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448099273,448099273,src/net_processing.cpp
jonatack,2020-07-01 04:13:56,"9200126 Do you think it would be clearer for this conditional to be a guard (return early) clause instead? e.g. etc.\n```diff\n-        if (!g_orphan_work_set.empty()) {\n+        if (g_orphan_work_set.empty()) return true;\n```",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448104820,448104820,src/net_processing.cpp
jonatack,2020-07-01 04:17:02,9200126 A comment on the meaning of the return value logic (e.g. orphans remain in the set/more work to do) may be worth adding here.,https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448105552,448105552,src/net_processing.cpp
jonatack,2020-07-01 04:19:59,"9200126 I wanted to ask if these two variable names could be updated/improved while moving this code (e.g. to `removed_txns` and `removed_txn`), but it looks like it may be clearer to leave them as-is given the same naming is used in related functions.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448106239,448106239,src/net_processing.cpp
jnewbery,2020-07-01 13:51:31,"emplace wins when you have to construct a temporary in place which is then copied/moved to the container. When you already have the object in hand (as we do here), it makes no difference - the object is just copied into the container.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448377825,448377825,src/net_processing.cpp
jnewbery,2020-07-01 13:53:29,"That's exactly how I'd normally structure a function like this. However, I expect we'll want to move more housekeeping tasks into `ProcessGlobalTasks()`, in which case we'll want to continue through to the next task queue if there are not orphan txs to reconsider. I didn't use the early exit pattern so that adding those tasks doesn't require restructuring this function.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448379068,448379068,src/net_processing.cpp
jnewbery,2020-07-01 13:54:21,"Documentation for `ProcessGlobalTasks()` is by the declaration in the header file, and includes the meaning of the return value.",https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448379669,448379669,src/net_processing.cpp
jnewbery,2020-07-01 13:54:54,Agree! This can be changed later if necessary.,https://github.com/bitcoin/bitcoin/pull/19364#discussion_r448379999,448379999,src/net_processing.cpp
