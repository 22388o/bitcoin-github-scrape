[
  {
    "sha": "0ea9abf9b4c3694dede390b759df01c1ce0d3166",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWE5YWJmOWI0YzM2OTRkZWRlMzkwYjc1OWRmMDFjMWNlMGQzMTY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-23T17:49:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-29T16:51:43Z"
      },
      "message": "[net processing] Add ProcessGlobalTasks\n\nProcessGlobalTasks does general work that isn't attached to a specific\npeer.",
      "tree": {
        "sha": "9a36ec2bffc19c6cbcab26c2237800b7b02391a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a36ec2bffc19c6cbcab26c2237800b7b02391a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ea9abf9b4c3694dede390b759df01c1ce0d3166",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea9abf9b4c3694dede390b759df01c1ce0d3166",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea9abf9b4c3694dede390b759df01c1ce0d3166",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea9abf9b4c3694dede390b759df01c1ce0d3166/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80fd474e402bb003c3a427f1997eb649e69138ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80fd474e402bb003c3a427f1997eb649e69138ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80fd474e402bb003c3a427f1997eb649e69138ba"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "60393c487692f0b85ada77e4ea631a5d6daf91a6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "patch": "@@ -2107,6 +2107,8 @@ void CConnman::ThreadMessageHandler()\n                 return;\n         }\n \n+        fMoreWork |= m_msgproc->ProcessGlobalTasks(flagInterruptMsgProc);\n+\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodesCopy)\n@@ -2121,11 +2123,6 @@ void CConnman::ThreadMessageHandler()\n     }\n }\n \n-\n-\n-\n-\n-\n bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError, NetPermissionFlags permissions)\n {\n     int nOne = 1;"
      },
      {
        "sha": "5e0386f3bff11cde1c54930bfd74e2c705d34129",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "patch": "@@ -507,6 +507,7 @@ class NetEventsInterface\n public:\n     virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n     virtual bool SendMessages(CNode* pnode) = 0;\n+    virtual bool ProcessGlobalTasks(std::atomic<bool>& interrupt) = 0;\n     virtual void InitializeNode(CNode* pnode) = 0;\n     virtual void FinalizeNode(NodeId id, bool& update_connection_time) = 0;\n "
      },
      {
        "sha": "f17b1a06cb9b6073d58f46ccc9474a7593dd6ed1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "patch": "@@ -3687,6 +3687,12 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+bool PeerLogicValidation::ProcessGlobalTasks(std::atomic<bool>& interruptMsgProc)\n+{\n+    // No tasks to process!\n+    return false;\n+}\n+\n void PeerLogicValidation::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "1574a39c7be3413ef3a9e62ea211c2e64df3699b",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea9abf9b4c3694dede390b759df01c1ce0d3166/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "patch": "@@ -73,6 +73,14 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     */\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n+    /**\n+    * Process global tasks that aren't attached to a specific peer\n+    *\n+    * @param[in]   interrupt       Interrupt condition for processing threads\n+    * @returns     bool            true if there's more work to do\n+    */\n+    bool ProcessGlobalTasks(std::atomic<bool>& interrupt) override;\n+\n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */"
      }
    ]
  },
  {
    "sha": "92001263d60424849bedf0e25decf24dbb20c63c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjAwMTI2M2Q2MDQyNDg0OWJlZGYwZTI1ZGVjZjI0ZGJiMjBjNjNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-23T17:54:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-29T16:51:47Z"
      },
      "message": "[net processing] Move orphan_work_set to a global\n\nOrphan reprocessing should not be tied to the peer that provided\nthe parent. Move orphan_work_set to be a global and process it\nin ProcessGlobalTasks()",
      "tree": {
        "sha": "67f1d72de81afbf504eac5620381778479f299b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67f1d72de81afbf504eac5620381778479f299b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92001263d60424849bedf0e25decf24dbb20c63c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92001263d60424849bedf0e25decf24dbb20c63c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92001263d60424849bedf0e25decf24dbb20c63c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92001263d60424849bedf0e25decf24dbb20c63c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea9abf9b4c3694dede390b759df01c1ce0d3166",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea9abf9b4c3694dede390b759df01c1ce0d3166"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "97b2b9a1e1b2925d845d49050627de3fb21721e0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92001263d60424849bedf0e25decf24dbb20c63c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92001263d60424849bedf0e25decf24dbb20c63c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=92001263d60424849bedf0e25decf24dbb20c63c",
        "patch": "@@ -855,8 +855,6 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n \n-    std::set<uint256> orphan_work_set;\n-\n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n     ~CNode();\n     CNode(const CNode&) = delete;"
      },
      {
        "sha": "0e07a912f3882e9219a46bcce365f0a5f3e87af7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92001263d60424849bedf0e25decf24dbb20c63c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92001263d60424849bedf0e25decf24dbb20c63c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=92001263d60424849bedf0e25decf24dbb20c63c",
        "patch": "@@ -143,6 +143,7 @@ struct COrphanTx {\n };\n RecursiveMutex g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+std::set<uint256> g_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n \n@@ -2832,7 +2833,7 @@ void ProcessMessage(\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n-                        pfrom.orphan_work_set.insert(elem->first);\n+                        g_orphan_work_set.insert(elem->first);\n                     }\n                 }\n             }\n@@ -2845,7 +2846,8 @@ void ProcessMessage(\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(connman, mempool, pfrom.orphan_work_set, lRemovedTxn);\n+            ProcessOrphanTx(connman, mempool, g_orphan_work_set, lRemovedTxn);\n+\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -3607,22 +3609,12 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (!pfrom->vRecvGetData.empty())\n         ProcessGetData(*pfrom, chainparams, connman, m_mempool, interruptMsgProc);\n \n-    if (!pfrom->orphan_work_set.empty()) {\n-        std::list<CTransactionRef> removed_txn;\n-        LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(connman, m_mempool, pfrom->orphan_work_set, removed_txn);\n-        for (const CTransactionRef& removedTx : removed_txn) {\n-            AddToCompactExtraTransactions(removedTx);\n-        }\n-    }\n-\n     if (pfrom->fDisconnect)\n         return false;\n \n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n     if (!pfrom->vRecvGetData.empty()) return true;\n-    if (!pfrom->orphan_work_set.empty()) return true;\n \n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend)\n@@ -3689,7 +3681,20 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n \n bool PeerLogicValidation::ProcessGlobalTasks(std::atomic<bool>& interruptMsgProc)\n {\n-    // No tasks to process!\n+    // Reconsider orphan transactions that may now have parents\n+    {\n+        LOCK2(cs_main, g_cs_orphans);\n+        if (!g_orphan_work_set.empty()) {\n+            std::list<CTransactionRef> removed_txn;\n+            ProcessOrphanTx(connman, m_mempool, g_orphan_work_set, removed_txn);\n+            for (const CTransactionRef& removedTx : removed_txn) {\n+                AddToCompactExtraTransactions(removedTx);\n+            }\n+            if (!g_orphan_work_set.empty()) return true;\n+        }\n+    }\n+\n+    // No more tasks to process!\n     return false;\n }\n "
      }
    ]
  },
  {
    "sha": "9487f082e5f4b9696e3b4fd42aafebf42617ca9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDg3ZjA4MmU1ZjRiOTY5NmUzYjRmZDQyYWFmZWJmNDI2MTdjYTlj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-23T17:57:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-29T16:51:47Z"
      },
      "message": "[net processing] Don't call ProcessOrphanTx from ProcessMessages\n\nWe reprocess orphan transactions on every MessageHandler thread,\nso there's no need to call it in the context of an individual peer.",
      "tree": {
        "sha": "43c778b2afa81f2464d343638ad1a03d51cdbaf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43c778b2afa81f2464d343638ad1a03d51cdbaf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9487f082e5f4b9696e3b4fd42aafebf42617ca9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9487f082e5f4b9696e3b4fd42aafebf42617ca9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9487f082e5f4b9696e3b4fd42aafebf42617ca9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9487f082e5f4b9696e3b4fd42aafebf42617ca9c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92001263d60424849bedf0e25decf24dbb20c63c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92001263d60424849bedf0e25decf24dbb20c63c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92001263d60424849bedf0e25decf24dbb20c63c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "58278742e737d2cc1008af8eb422a689d1a46374",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9487f082e5f4b9696e3b4fd42aafebf42617ca9c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9487f082e5f4b9696e3b4fd42aafebf42617ca9c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9487f082e5f4b9696e3b4fd42aafebf42617ca9c",
        "patch": "@@ -2845,12 +2845,7 @@ void ProcessMessage(\n                 tx.GetHash().ToString(),\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n-            // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(connman, mempool, g_orphan_work_set, lRemovedTxn);\n-\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n+        } else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n             bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n             for (const CTxIn& txin : tx.vin) {\n                 if (recentRejects->contains(txin.prevout.hash)) {"
      }
    ]
  }
]