[
  {
    "sha": "0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjU5NTRjNDM0ZmRkMDRiOWFiY2E2ZGRjNmYxYmJmODk1YjZjNmJl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-23T17:47:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-24T19:29:20Z"
      },
      "message": "Regression test for ResendWalletTransactions\n\nAdds a regression test for the wallet's ResendWalletTransactions function, which uses a new, hidden RPC command \"resendwallettransactions.\"\n\nI refactored main's Broadcast signal so it is passed the best-block time, which let me remove a global variable shared between main.cpp and the wallet (nTimeBestReceived).\n\nI also manually tested the \"rebroadcast unconfirmed every half hour or so\" functionality by:\n\n1. Running bitcoind -connect=0.0.0.0:8333\n2. Creating a couple of send-to-self transactions\n3. Connect to a peer using -addnode\n4. Waited a while, monitoring debug.log, until I see:\n```2015-03-23 18:48:10 ResendWalletTransactions: rebroadcast 2 unconfirmed transactions```\n\nOne last change: don't bother putting ResendWalletTransactions messages in debug.log unless unconfirmed transactions were actually rebroadcast.",
      "tree": {
        "sha": "3b234d59fa48453d435a9c67191f4bebe25ac522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b234d59fa48453d435a9c67191f4bebe25ac522"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlURuxAACgkQdYgkL74406jShQCgi0qb2q8StU4EJgy8XUJm8Vqk\ndWQAn0TrB1bX43bhrvOjmpGCUjMUrEuD\n=74N5\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b234d59fa48453d435a9c67191f4bebe25ac522\nparent 8d2fbfa49141172e1c63f5ab7b684a1f9e210571\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427132838 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1427225360 -0400\n\nRegression test for ResendWalletTransactions\n\nAdds a regression test for the wallet's ResendWalletTransactions function, which uses a new, hidden RPC command \"resendwallettransactions.\"\n\nI refactored main's Broadcast signal so it is passed the best-block time, which let me remove a global variable shared between main.cpp and the wallet (nTimeBestReceived).\n\nI also manually tested the \"rebroadcast unconfirmed every half hour or so\" functionality by:\n\n1. Running bitcoind -connect=0.0.0.0:8333\n2. Creating a couple of send-to-self transactions\n3. Connect to a peer using -addnode\n4. Waited a while, monitoring debug.log, until I see:\n```2015-03-23 18:48:10 ResendWalletTransactions: rebroadcast 2 unconfirmed transactions```\n\nOne last change: don't bother putting ResendWalletTransactions messages in debug.log unless unconfirmed transactions were actually rebroadcast.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2fbfa49141172e1c63f5ab7b684a1f9e210571"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 88,
      "deletions": 32
    },
    "files": [
      {
        "sha": "01e9fa57b2975a1797e2aa6eb960397a5499bc68",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -16,6 +16,7 @@\n #   h) node0 should now have 2 unspent outputs;  send these to node2 via raw tx broadcast by node1\n #   i) have node1 mine a block\n #   j) check balances - node0 should have 0, node2 should have 100\n+#   k) test ResendWalletTransactions - create transactions, startup fourth node, make sure it syncs\n #\n \n from test_framework import BitcoinTestFramework\n@@ -26,7 +27,7 @@ class WalletTest (BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n         self.nodes = start_nodes(3, self.options.tmpdir)\n@@ -132,5 +133,23 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n \n+        # Test ResendWalletTransactions:\n+        # Create a couple of transactions, then start up a fourth\n+        # node (nodes[3]) and ask nodes[0] to rebroadcast.\n+        # EXPECT: nodes[3] should have those transactions in its mempool.\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        sync_mempools(self.nodes)\n+\n+        self.nodes.append(start_node(3, self.options.tmpdir))\n+        connect_nodes_bi(self.nodes, 0, 3)\n+        sync_blocks(self.nodes)\n+\n+        relayed = self.nodes[0].resendwallettransactions()\n+        assert_equal(set(relayed), set([txid1, txid2]))\n+        sync_mempools(self.nodes)\n+\n+        assert(txid1 in self.nodes[3].getrawmempool())\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      },
      {
        "sha": "8f50e7fc164ffdfe3def3c56810ae2b77511671b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -4475,7 +4475,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            GetMainSignals().Broadcast();\n+            GetMainSignals().Broadcast(nTimeBestReceived);\n         }\n \n         //"
      },
      {
        "sha": "31de3f6ac5e1a9fdf1bc36e1f2e9baea8b7e38a7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -116,7 +116,6 @@ extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern const std::string strMessageMagic;\n-extern int64_t nTimeBestReceived;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;\n extern bool fImporting;"
      },
      {
        "sha": "d30fa32eb4778fba0dae1a67c4d22c60593d9b2e",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -333,6 +333,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n+#ifdef ENABLE_WALLET\n+    { \"hidden\", \"resendwallettransactions\", &resendwallettransactions, true, true },\n+#endif\n \n #ifdef ENABLE_WALLET\n     /* Wallet */"
      },
      {
        "sha": "7011d41fc1b362795402ab99bc0010670fa84fd2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -207,6 +207,7 @@ extern json_spirit::Value getwalletinfo(const json_spirit::Array& params, bool f\n extern json_spirit::Value getblockchaininfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value setmocktime(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value resendwallettransactions(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "aa9aefb0de6647fd684e303fe78beb92bef606cb",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -18,13 +18,13 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));"
      },
      {
        "sha": "cb261f6aa384971a7db3b8de42ccd7d4d41b83ba",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -33,7 +33,7 @@ class CValidationInterface {\n     virtual void SetBestChain(const CBlockLocator &locator) {};\n     virtual void UpdatedTransaction(const uint256 &hash) {};\n     virtual void Inventory(const uint256 &hash) {};\n-    virtual void ResendWalletTransactions() {};\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime) {};\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -52,7 +52,7 @@ struct CMainSignals {\n     /** Notifies listeners about an inventory item being seen on the network. */\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void ()> Broadcast;\n+    boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n };"
      },
      {
        "sha": "29f3eda15dd91235ac409cc9c1d07922335d798c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -2096,3 +2096,25 @@ Value getwalletinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     return obj;\n }\n+\n+Value resendwallettransactions(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"resendwallettransactions\\n\"\n+            \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n+            \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n+            \"automatically.\\n\"\n+            \"Returns array of transaction ids that were re-broadcast.\\n\"\n+            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime());\n+    Array result;\n+    BOOST_FOREACH(const uint256& txid, txids)\n+    {\n+        result.push_back(txid.ToString());\n+    }\n+    return result;\n+}"
      },
      {
        "sha": "a10123002eef57e656d12ec0887dcd24ea8c6db5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 23,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -1114,15 +1114,17 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-void CWalletTx::RelayWalletTransaction()\n+bool CWalletTx::RelayWalletTransaction()\n {\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             RelayTransaction((CTransaction)*this);\n+            return true;\n         }\n     }\n+    return false;\n }\n \n set<uint256> CWalletTx::GetConflicts() const\n@@ -1324,7 +1326,31 @@ bool CWalletTx::IsTrusted() const\n     return true;\n }\n \n-void CWallet::ResendWalletTransactions()\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n+{\n+    std::vector<uint256> result;\n+\n+    LOCK(cs_wallet);\n+    // Sort them in chronological order\n+    multimap<unsigned int, CWalletTx*> mapSorted;\n+    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    {\n+        CWalletTx& wtx = item.second;\n+        // Don't rebroadcast if newer than nTime:\n+        if (wtx.nTimeReceived > nTime)\n+            continue;\n+        mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n+    }\n+    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+    {\n+        CWalletTx& wtx = *item.second;\n+        if (wtx.RelayWalletTransaction())\n+            result.push_back(wtx.GetHash());\n+    }\n+    return result;\n+}\n+\n+void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n@@ -1336,30 +1362,15 @@ void CWallet::ResendWalletTransactions()\n         return;\n \n     // Only do it if there's been a new block since last time\n-    if (nTimeBestReceived < nLastResend)\n+    if (nBestBlockTime < nLastResend)\n         return;\n     nLastResend = GetTime();\n \n-    // Rebroadcast any of our txes that aren't in a block yet\n-    LogPrintf(\"ResendWalletTransactions()\\n\");\n-    {\n-        LOCK(cs_wallet);\n-        // Sort them in chronological order\n-        multimap<unsigned int, CWalletTx*> mapSorted;\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n-        {\n-            CWalletTx& wtx = item.second;\n-            // Don't rebroadcast until it's had plenty of time that\n-            // it should have gotten in already by now.\n-            if (nTimeBestReceived - (int64_t)wtx.nTimeReceived > 5 * 60)\n-                mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n-        }\n-        BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n-        {\n-            CWalletTx& wtx = *item.second;\n-            wtx.RelayWalletTransaction();\n-        }\n-    }\n+    // Rebroadcast unconfirmed txes older than 5 minutes before the last\n+    // block was found:\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60);\n+    if (!relayed.empty())\n+        LogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n \n /** @} */ // end of mapWallet"
      },
      {
        "sha": "6ae1c87b1d3023449924adcd092548ccd15a42ac",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0f5954c434fdd04b9abca6ddc6f1bbf895b6c6be",
        "patch": "@@ -381,7 +381,7 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n-    void RelayWalletTransaction();\n+    bool RelayWalletTransaction();\n \n     std::set<uint256> GetConflicts() const;\n };\n@@ -614,7 +614,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void EraseFromWallet(const uint256 &hash);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions();\n+    void ResendWalletTransactions(int64_t nBestBlockTime);\n+    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;"
      }
    ]
  }
]