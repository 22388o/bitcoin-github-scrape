michaelfolkson,2021-08-10 13:18:01,"Concept ACK\n\nJust reviewing my [notes](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019148.html) from the L2 onchain support workshops. It was agreed that restricting to 1 child in a package would be sufficient for discussed L2 use cases (at least for now) and this PR implements multiple parents, 1 child packages rather than restricting to 1 parent, 1 child because of mini",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896020657,896020657,
glozow,2021-08-10 14:59:48,"Thank you @michaelfolkson. Indeed you are correct, we discussed that [multiple parent + 1 child would be best but 1 parent + 1 child sufficient](https://gist.github.com/ariard/32b51ecceccc5c6f647bae86d083c442#file-l2-onchain-support-meeting2-txt-L57-L72) for addressing L2 use cases. After speaking with @TheBlueMatt offline and getting further into the implementation, I realized that the multi-pare",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896102884,896102884,
DrahtBot,2021-08-10 18:55:53,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896235448,896235448,
TheBlueMatt,2021-08-12 20:37:40,"> After speaking with @TheBlueMatt offline and getting further into the implementation, I realized that the multi-parent case would be significantly more helpful without being that much more complex.\n\nThis came, in part, out of a discussion between @ariard and I about an implementation @ariard had to implement the lightning ""anchor output"" protocol in LDK[1], and later a discussion between @sd",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-897951289,897951289,
ariard,2021-08-17 14:33:26,"@TheBlueMatt \n\n> If we can do replacement and multiple (no-onchain-parent) parents without a lot of complexity, it will save us a lot of heartache later.\n\nNo, I'm going to stick to the domino-bumping approach we previously discussed.\n\nMultiple parents aren't safe for lightning as it does allow a counterparty to delay the confirmation of a specific channel commitment by overbidding on a",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-900352202,900352202,
michaelfolkson,2021-08-23 19:49:35,"@ariard: Core could support multiple parents, 1 child packages whilst the Lightning protocol could only support 1 parent, 1 child packages (assuming your safety assessment above for Lightning is correct)? If Lightning needs only a subset of what Core offers there is generally less of a problem. It is when Lightning needs a superset of what Core offers where there is a problem. This would need a se",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-904071910,904071910,
ariard,2021-08-24 22:02:22,"> Core could support multiple parents, 1 child packages whilst the Lightning protocol could only support 1 parent, 1 child packages\n\nYes I think I've made the comment already in #16401, about the batching use-case for LN. I think it's okay as long as you don't have time-sensitive unilateral closure, where a counterparty might interfere with the spending of one funding output also covered by th",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-905006315,905006315,
michaelfolkson,2021-08-25 07:38:06,"> Again, with the lack of a clear project philosophy on the valid set of assumptions one can make on the stability of what Core offers at the mempool/p2p level, I'm learning the lesson, better to be conservative as an upper layer dev!\n\nIf you, Lightning devs etc said to @glozow, Core etc that Lightning can't cope with multiple parent, 1 child packages and it can't enforce the restriction of 1 ",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-905259534,905259534,
glozow,2021-09-24 16:17:17,"Rebased since #22675 was merged. I've reduced this PR's size a little bit. It no longer adds the submitrawpackage RPC, but has unit tests. Mailing list post is up.",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-926757287,926757287,
glozow,2021-09-28 09:25:30,Rebased on master and squashed a couple commits,https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-929016427,929016427,
t-bast,2021-10-19 07:47:28,"Concept ACK.\n\nI agree with @ariard: I personally will use a (1 parent - 1 child) package for the current lightning anchor outputs scheme because it is time-sensitive and subject to attacks from a malicious counterparty.\n\nHowever, since it doesn't make the bitcoind code much more complex, I believe that allowing (N parents - 1 child) can be very beneficial to other off-chain schemes, so we ",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-946451358,946451358,
glozow,2021-10-20 16:54:39,"Rebased, fixed a small bug caught by t-bast offline, and added a formal-ish doc that specifies the set of definitions and rules for packages.",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-947853313,947853313,
hernanmarino,2021-10-27 16:53:23,Concept ACK  ,https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-953117534,953117534,
glozow,2021-10-28 12:53:22,"It seems that this PR is a bit large for reviewers, so I've opened #23381 with all of the no-behavior-change commits from this PR. Reviewing that one should be more mechanical. I will address review comments, but am marking this PR as a draft until that one is merged.",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-953814998,953814998,
jnewbery,2021-11-09 16:34:13,rebase plz,https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-964323031,964323031,
glozow,2021-11-10 01:22:58,"Rebased, ready for review :)",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-964694631,964694631,
laanwj,2021-11-23 15:40:12,"Thanks for adding documentation on the P2P transaction policy. Some small suggestions:\n- Please create a ` doc/policy/README.md` that lists the files in the directory (this can be very brief right now, clearly, but can serve as an overview in the future when more documents are added)\n- Please add a link to `doc/policy/README.md` to `doc/README.md` so that everything can be found from the main ",https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-976737508,976737508,
glozow,2021-11-29 16:29:53,Thanks for the reviews! I've addressed comments and added the commit handling transactions already in mempool since it was the answer to a lot of review questions. Also added some tests and a doc/policy/README.md + link in doc/README.md.,https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-981801320,981801320,
prayank23,2021-08-10 12:48:30,"I have no clue about details of packages and related PRs. Interested in this RPC which can be helpful in my tests. Is this like broadcasting transactions in batches?\n\n```C++\nfor (int i = 0; i < MAX; i++) {\n  if (consensus and mempool policies) {\n  // add to broadcast queue\n} else {\n  // Error\n}\n}\n\n//BroadcastTransaction(node, queue);\n\n```\n\nIs it possible to select pee",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r685983817,685983817,src/rpc/rawtransaction.cpp
glozow,2021-08-10 12:53:17,"> Is this like broadcasting transactions in batches?\n\nNo, but you can make multiple calls to `sendrawtransaction`\n\n> Is it possible to select peer for broadcasting this package?\n\nNo, I don't think that would be very helpful here. If you're interested in enabling specific functionality, perhaps open a PR?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r685987629,685987629,src/rpc/rawtransaction.cpp
prayank23,2021-08-10 13:10:11,Thanks,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r686001324,686001324,src/rpc/rawtransaction.cpp
ariard,2021-10-20 15:53:21,What's your thinking to introduce a `PCKG_BAD` ? I don't see how it provides a supplemental or more restrictive information to the caller instead of relying on `PCKG_POLICY` and it's a bit confusing as the checks failed with `PCKG_BAD` are already located in `src/policy/packages.cpp`.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732922423,732922423,src/policy/packages.h
ariard,2021-10-20 15:54:58,"nit: ""consensus rules""",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732923856,732923856,src/policy/packages.h
ariard,2021-10-20 16:34:11,"How are you aiming to use `exact`=true ? \n\nI understand that if you're aiming to submit the package to your local mempool, you know the state of it and you can adjust the package components to only what is needed (`exact`=false).\n\nHowever, if you submit a package over the p2p network, one can't assume a knowledge of the network mempools. A missing or replaced parent fails the propagation o",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732956584,732956584,src/policy/packages.h
ariard,2021-10-20 16:45:44,"Note to reviewers, this commits also cache if the candidate is a replacement transaction based on the presence of conflicting transactions.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732965588,732965588,src/validation.cpp
ariard,2021-10-20 17:02:44,"Maybe `doc/policy` or `doc/txrelay` ? I guess we'll have another doc for RBF revamp.\n\nRelated #22806 ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732978827,732978827,doc/package_mempool_acceptance.md
glozow,2021-10-20 17:34:16,"Ah, that came from a merge conflict with #22539 which removed it.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733002610,733002610,src/validation.cpp
glozow,2021-10-20 17:44:10,"At some point we will have a P2P protocol for packages which we want to punish peers for violating, so we definitely want to distinguish between a network-wide rule violation and mempool rejection based on our local policy rules. In other words, this distinction mainly informs the net processing layer about the misbehavior of peers.\n\nWithin this PR, we obviously haven't defined P2P stuff yet, ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733009908,733009908,src/policy/packages.h
glozow,2021-10-20 17:57:11,"Correct, I expect all unconfirmed parents to be present, and P2P should be talking about full packages.\n\nAt some point, I was hoping to be able to statically verify that a transaction is exactly child-with-parents by requiring transactions for all of the child's inputs to be present, but I realized we have to allow the parents to confirm earlier than the child, and it's not reasonable to expec",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733019339,733019339,src/policy/packages.h
t-bast,2021-10-21 07:01:56,"nit:\n```suggestion\nA **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733374828,733374828,doc/package_mempool_acceptance.md
t-bast,2021-10-21 07:05:34,"Does that mean that if I have:\n\n-  tx1 in the mempool\n- tx2 and tx3 not yet published\n- childTx spending tx1, tx2 and tx3\n\nA package containing [tx2, tx3, childTx] is invalid?\nDo I need to put tx1 in that package?\nI plan on potentially funding CPFP children with unconfirmed inputs, that means I'd need an extra step to insert them in the package: but if they made it to the mempool o",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733376972,733376972,doc/package_mempool_acceptance.md
t-bast,2021-10-21 07:10:07,"Just to make sure I didn't mess something up: I was able to do package RBF from eclair based on your `package-mempool-accept` branch, was that expected?\n\nI had (localCommitTx, localAnchorTx) in my mempool, and I was able to replace it with (remoteCommitTx, remoteAnchorTx) that paid more fees (with both commit txs paying 0 fee).",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733379748,733379748,doc/package_mempool_acceptance.md
glozow,2021-10-21 07:31:26,Yes! That's just not in this PR yet so I didn't want an inaccurate doc,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733394543,733394543,doc/package_mempool_acceptance.md
glozow,2021-10-21 10:54:44,"Yes, based on these rules, you need to put tx1 in the package. I believe this is better because we can relay packages across the network without worrying about differences in mempool contents.\n\nI can see how it's inconvenient to need to track the other parents when you're submitting to your node. One thing I can offer is adding a bit of code to our client interface code to ""fill in"" the packag",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733557562,733557562,doc/package_mempool_acceptance.md
t-bast,2021-10-21 11:47:21,"> I can see how it's inconvenient to need to track the other parents when you're submitting to your node. One thing I can offer is adding a bit of code to our client interface code to ""fill in"" the package using mempool contents before submitting via ProcessNewPackage - that should be easy enough to do.\n\nThat would be great!",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733594049,733594049,doc/package_mempool_acceptance.md
glozow,2021-10-21 16:33:40,Fixed,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733853963,733853963,doc/package_mempool_acceptance.md
glozow,2021-10-21 16:34:25,"makes sense, I've created a doc/policy folder. More documentation of policy to come :D",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733854506,733854506,doc/package_mempool_acceptance.md
glozow,2021-10-21 16:34:36,Done,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733854635,733854635,src/policy/packages.h
glozow,2021-10-22 13:14:03,Removed `exact` parameter,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r734529807,734529807,src/policy/packages.h
ariard,2021-10-24 22:14:30,"If we want to take opportunity to clarify the code, we can constify this magic value as `CARVEOUT_ANCESTOR_TX_LIMIT`.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735178085,735178085,src/validation.cpp
ariard,2021-10-24 22:44:20,"I think all the checks in this method are related to replacement maybe name could reflect that like `ReplacementChecks` ? `MempoolChecks` isn't really verbose w.r.t class `MemPoolAccept`.\n",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735181313,735181313,src/validation.cpp
ariard,2021-10-24 22:55:37,"""Package evaluation if successful leads to acceptance of the component in the mempool, therefore the package limits must always bind to the mempool ancestor/descendant limits"", better ? ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735182591,735182591,src/validation.h
ariard,2021-10-24 23:22:24,"I think we should keep the package API ""hard-to-misuse"" for the user.\n\nIIUC, this PR introduce a second definition of a package, divergent of the `testmempoolaccept`/`AcceptMultipleTransactions` one. This second definition is more restrictive as the package must be a child with all of its unconfirmed parents and sorted.\n\nIf a user sanitizes a package through `testmempoolaccept` with a 2-pa",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735185991,735185991,src/validation.cpp
ariard,2021-10-24 23:33:38,"I wonder if this check doesn't wrongly block some replacement.\n\nLet's say you have A + B already in the mempool, where B is a child of A. Then I submit A' + B, where A' is a _same-txid-different-witness_ replacement candidate of A, with an improved feerate. A'+B should replace A + B, however it will be rejected as B is already in the mempool ?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735187379,735187379,src/validation.cpp
ariard,2021-10-24 23:36:19,Duplicated checks with `AcceptMultipleTransactions` ? I think it's better to keep an unified package evaluation path between `testmempoolaccept`/`submitpackage`.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735187691,735187691,src/validation.cpp
ariard,2021-10-24 23:44:53,Can be `unconfirmed_parent_txids`. ,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735188761,735188761,src/validation.cpp
ariard,2021-10-24 23:51:05,"""and the transactions cannot already be in the mempool"" are you referring the check L1219 in `AcceptPackage` about child disallowed to conflict with the mempool ?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735189565,735189565,src/validation.cpp
ariard,2021-10-24 23:54:07,"Well, the base feerate of a package component is still offered to the miner, even if this component should not have been accepted in the mempool as a single tx ?\n\nI think a stronger rational is the lack of p2p packages for now, preventing a package to effectively propagate to miner mempools and as such be considered as a valid blockspace demand ?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735190012,735190012,src/validation.cpp
ariard,2021-10-25 00:09:53,"> So these are all PCKG_BAD and, in the future, we'd want to punish a peer that gives us something like this:\n\nI think we're never discouraging based on tx-relay or mempool policy violations because our peers can run a policy far different than ours ? Like a future version of  Core could have package with more than 25 component, a old peer connected would punish that peer for a behavior valid ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735191959,735191959,src/policy/packages.h
glozow,2021-10-26 10:00:40,"Good suggestion. I think I would want to do this in a separate PR, along with adding documentation in the doc/policy/ folder for mempool ancestor/descendant limits and CPFP carve out.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r736363205,736363205,src/validation.cpp
jnewbery,2021-10-27 09:49:24,"Outdated name:\n```suggestion\n * See doc/policy/packages.md for documentation of package validation rules.\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737298164,737298164,src/validation.h
jnewbery,2021-10-27 09:56:17,"I'd suggest not using the word ""static"" here, which already has [multiple meanings in c++](https://en.cppreference.com/w/cpp/keyword/static) that don't apply here. I think ""context-free"" would be better.\n\nI'd also suggest changing the commit log from `[packages] add static IsChildWithParents function` to `[packages] add context-free IsChildWithParents function`",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737303782,737303782,src/validation.cpp
jnewbery,2021-10-27 09:58:03,"Does this need to assert? Why not just fail the `if (package.size() < 2) return false;` test below and return `false`? The calling code already needs to handle that failure, and by definition the empty set is not a ChildWithParents.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737305194,737305194,src/policy/packages.cpp
jnewbery,2021-10-27 10:02:01,Maybe use `std::vector::back()`? That returns a reference to the last element in the vector. You've already established that exists by returning if `package.size < 2`.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737308326,737308326,src/policy/packages.cpp
jnewbery,2021-10-27 10:11:49,"You don't need to construct this `parent_txids` set. You just need to pass once through `package` from the start to the penultimate entry, checking that the hash of each transaction is in `input_txids` (and exiting early with failure if it's not found).",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737315979,737315979,src/policy/packages.cpp
jnewbery,2021-10-27 10:13:43,Is there any advantage to this being an unordered set instead of a set? The size is small enough that the insertion/lookup complexity doesn't matter.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737317419,737317419,src/policy/packages.cpp
jnewbery,2021-10-27 10:27:44,"Can you check the `state.GetResult()` and `state.GetRejectReason()` are what you're expecting ( `PackageValidationResult::PCKG_BAD` and `""package-not-sorted""`)",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737327720,737327720,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:29:28,"```suggestion\n\n        // Now add the child to the package\n        package.push_back(MakeTransactionRef(child));\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329053,737329053,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:29:58,check failure reason,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329351,737329351,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:30:08,check failure reason,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329488,737329488,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:31:53,"```suggestion\n        CMutableTransaction mtx_parent_also_child;\n```\n\nto match the naming below",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737330699,737330699,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:33:18,"Perhaps also check `{tx_parent_also_child, tx_parent, tx_child}`. I think it'll fail `CheckPackage()` since it's not sorted, but will succeed `IsChildWithParents()`.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737331726,737331726,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:35:35,"```suggestion\nBOOST_FIXTURE_TEST_CASE(non_contextual_package_tests, TestChain100Setup)\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737333312,737333312,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:37:19,"Other possible unit tests (not necessarily in this PR):\n\n- too large package (26 txs)\n- too heavy package\n- conflicting txs in package\n- duplicate txs in package (with same and different witnesses)",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737334585,737334585,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 10:39:47,"This seems sufficient for now. In the future, we might want to define a canonically sorted package, where the txs are sorted by generation, then by txid.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737336363,737336363,doc/policy/packages.md
jnewbery,2021-10-27 10:41:03,It's unclear to me whether this definition implies that the graph is fully connected (i.e. every transaction in the package is (transitively) connected to every other transaction in the package through parent/child relationships).,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737337344,737337344,doc/policy/packages.md
jnewbery,2021-10-27 10:43:16,Perhaps highlight that this means that a child-with-unconfirmed-parents is contextual on the block chain. It can only be defined uniquely in the context of a UTXO set (which can be represented by a chain tip block hash).,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737338894,737338894,doc/policy/packages.md
jnewbery,2021-10-27 12:39:48,Oops. I see now that these are in txvalidation_tests.cpp. Why are some of the package unit tests in txpackage_tests.cpp and some in txvalidation_tests.cpp?,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737422767,737422767,src/test/txpackage_tests.cpp
glozow,2021-10-27 13:09:12,"When I first added these tests in #20833, all the checks in `CheckPackage()` were inside `AcceptMultipleTransactions()` (which is why I'm calling `ProcessNewPackage()` to hit those errors). Now that they've been moved to their own function in packages.h, we can make the tests in txvalidation_tests.cpp simpler unit tests and move them to txpackage_tests.cpp.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737448276,737448276,src/test/txpackage_tests.cpp
jnewbery,2021-10-27 13:09:15,"I think it's better to continue using `std::set::empty` rather than implicitly casting the int to a bool:\n\n```suggestion\n    ws.m_replacement_transaction = !ws.m_conflicts.empty();\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737448337,737448337,src/validation.cpp
jnewbery,2021-10-27 13:29:26,"nit: the lock annotation shouldn't be aligned with the open parens (since it's not contained in the parens):\n\n```suggestion\n    bool FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces, PackageValidationState& package_state,\n                         std::map<const uint256, const MempoolAcceptResult>& results)\n        EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n``",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737467866,737467866,src/validation.cpp
glozow,2021-10-28 11:35:59,`IsChildWithParents()` just returns a bool and doesn't use a `PackageValidationState` so there is no failure reason.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738300529,738300529,src/test/txpackage_tests.cpp
glozow,2021-10-28 11:36:16,`IsChildWithParents()` just returns a bool and doesn't use a `PackageValidationState` so there is no failure reason.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738300694,738300694,src/test/txpackage_tests.cpp
glozow,2021-10-28 11:40:21,"Note that this is `AcceptMultipleTransactions` and not `AcceptPackage`.\n\nI'm referring to the check in`PreChecks()`, where it returns failure if the transaction is already in the mempool. So `AcceptMultipleTransactions` expects the `txns` passed in to not already be in the mempool. I think it's important to state this precondition in the function documentation.\n\nOn the other hand, `AcceptP",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738303538,738303538,src/validation.cpp
jnewbery,2021-10-28 12:05:33,:facepalm:,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738321533,738321533,src/test/txpackage_tests.cpp
jnewbery,2021-10-28 12:05:38,:facepalm: :facepalm:,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738321582,738321582,src/test/txpackage_tests.cpp
glozow,2021-10-28 12:59:20,"Yeah you're right, I was getting a little too excited :P will remove and put them all under `PCKG_POLICY`.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738363889,738363889,src/policy/packages.h
glozow,2021-10-28 13:00:04,"> Now that they've been moved to their own function in packages.h, we can make the tests in txvalidation_tests.cpp simpler unit tests and move them to txpackage_tests.cpp.\n\nAdded this in #23381",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738364819,738364819,src/test/txpackage_tests.cpp
glozow,2021-10-28 13:00:48,"Yeah that's a better name, done in #23381",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738365468,738365468,src/validation.cpp
glozow,2021-10-28 13:00:57,Done in #23381,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738365579,738365579,src/validation.cpp
ariard,2021-11-01 23:40:06,"That's right, it's `AcceptMultipleTransactions`. I agree it's important to state requirements in function documentation.\n\nNote as a nit outside the scope of this PR, `testmempoolaccept` documentation doesn't seem to reflect the not-already-in-mempool condition  ""If multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflic",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r740626510,740626510,src/validation.cpp
glozow,2021-11-09 19:52:35,"Good idea, added",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745962362,745962362,src/test/txpackage_tests.cpp
glozow,2021-11-09 19:56:21,"""package policies apply: the transactions cannot conflict with any mempool transactions or each other""\n\nhttps://github.com/bitcoin/bitcoin/blob/8ae4ba481ce8f7da173bef24432729c87a36cb70/src/rpc/rawtransaction.cpp#L875-L876",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745964912,745964912,src/validation.cpp
glozow,2021-11-09 19:58:04,"Right, duplicated for now. I think it's okay since this is a very cheap, context-free check. In the future, when `AcceptPackage` modifies the package (i.e. deduplicates transactions), it will make more sense to call `CheckPackage()` once again on the new set of transactions.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745966322,745966322,src/validation.cpp
glozow,2021-11-09 19:58:17,"Good point, done",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745966499,745966499,src/validation.cpp
glozow,2021-11-09 20:03:11,"Yeah, I agree completely that we will end up with 3 flavors of packages. When we add `submitrawpackage`, it will be best to have `TestMultipleTransactions`, `PackageChildWithParents`, `PackageChildWithParents(test_accept=true)`. These would correspond with user-facing interfaces `testmempoolaccept`, `submitrawpackage`, and `testpackage` (?)",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745971572,745971572,src/validation.cpp
glozow,2021-11-09 20:03:56,I feel like that comment is unnecessary?,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745972266,745972266,src/test/txpackage_tests.cpp
glozow,2021-11-09 20:04:14,"No advantage, but no disadvantage afaik?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745972614,745972614,src/policy/packages.cpp
glozow,2021-11-09 20:11:25,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745979876,745979876,src/policy/packages.cpp
glozow,2021-11-09 20:11:41,"Thanks, done",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745980132,745980132,src/policy/packages.cpp
glozow,2021-11-09 20:13:00,Fixed,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745981456,745981456,src/validation.cpp
glozow,2021-11-09 20:13:18,Clarified,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745981773,745981773,doc/policy/packages.md
glozow,2021-11-09 20:16:31,"I've added ""connected."" I hesitate to write ""fully"" because I have sometimes seen ""fully connected"" used interchangeably with [complete](https://en.wikipedia.org/wiki/Complete_graph).",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985220,745985220,doc/policy/packages.md
glozow,2021-11-09 20:16:44,Done,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985401,745985401,src/test/txpackage_tests.cpp
glozow,2021-11-09 20:17:17,"Sure, done",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985954,745985954,src/test/txpackage_tests.cpp
glozow,2021-11-09 20:17:45,"Good point, edited",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986406,745986406,src/validation.cpp
glozow,2021-11-09 20:17:57,Done,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986582,745986582,src/validation.cpp
glozow,2021-11-09 20:18:18,Edited to be similar to this,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986951,745986951,src/validation.h
glozow,2021-11-09 20:20:37,"In this case, B is already in the mempool and should be deduplicated (removed) from the package. That logic will be added in a future PR.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745989263,745989263,src/validation.cpp
t-bast,2021-11-10 13:33:51,"nit: I found the similar comment in `packages.cpp` clearer: ""The package is expected to be sorted, so the last transaction is the child.""\n\nI would clarify it to:\n\n```suggestion\n    // The package is expected to be sorted, so all transactions except the last one are the unconfirmed parents\n```\n",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746590610,746590610,src/validation.cpp
achow101,2021-11-10 20:39:52,"In 40d3f98e7b3d9630f99efe06fba1f6a6a21794b5 ""[policy] require submitted packages to be child-with-unconfirmed-parents""\n\nISTM this isn't that the transaction conflicts with the mempool but rather that it already exists in the mempool? A similar check is done in `PreChecks` where the wtxid is also checked. Should the wtxid be checked here as well?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746968682,746968682,src/validation.cpp
achow101,2021-11-10 20:49:51,"In 40d3f98e7b3d9630f99efe06fba1f6a6a21794b5 ""[policy] require submitted packages to be child-with-unconfirmed-parents""\n\nWhy must non-package inputs be confirmed? From my understanding of `AcceptMultipleTransactions`, it would be fine to have transactions which have unconfirmed inputs so long as they are already in the mempool.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746975004,746975004,src/validation.cpp
achow101,2021-11-10 20:56:38,"In fd3dbcc7c74eb9da6631c217893c325266bbf2e1 ""[validation] full package accept + mempool submission""\n\nPerhaps mention that this value is unused, so it is ok for it to be `false`? At first, this seemed incorrect since testing package acceptance should have the same parameters as actual package acceptance (modulo adding to the mempool).",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746979226,746979226,src/validation.cpp
achow101,2021-11-10 21:02:39,"In fd3dbcc7c74eb9da6631c217893c325266bbf2e1 ""[validation] full package accept + mempool submission""\n\nIf these are never supposed to fail, then shouldn't these be an assertion rather than returning a failure?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746982966,746982966,src/validation.cpp
glozow,2021-11-10 21:39:04,"We would still be able to validate the package if it was missing parents that were already in our mempool, but it means our peer sent us a malformed package (in the future when we have package relay).",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747005936,747005936,src/validation.cpp
stickies-v,2021-11-10 23:49:39,"nit: since we've already asserted that package.size() >= 2, I think this can be slightly simplified to\n\n```suggestion\n    return std::all_of(package.cbegin(), package.cend() - 1,\n                       [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n```\n\nalso in [validation.cpp](https://github.com/bitcoin/bitcoin/pull/22674/commits/40d3f98e7b3d9630",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747073711,747073711,src/policy/packages.cpp
stickies-v,2021-11-11 00:07:09,"nit: is there a reason for not just using the Package alias?\n```suggestion\n        Package package;\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747080683,747080683,src/test/txpackage_tests.cpp
stickies-v,2021-11-11 00:36:42,"nit: mtx_child spends 49, but only has 20+20 vin. It doesn't affect the tests, but it confused me for a while. ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747115964,747115964,src/test/txpackage_tests.cpp
stickies-v,2021-11-11 14:59:54,"nit: I think you meant to say ""Unrelated transactions""?\n```suggestion\n    // Unrelated transactions are not allowed in package submission.\n```",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747572765,747572765,src/test/txpackage_tests.cpp
ariard,2021-11-16 00:25:57,"I checked the rules present in `ProcessPackage`/`AcceptPackage`/`AcceptMultipleTransactions`. There are 2  package policies I can see missing.\n\nThe first one is the ""package memory usage too high"". That being said this check is host-dependent so it would be too artificial to expect users to respect it. In practice, you will hit first `MAX_PACKAGE_SIZE`.\n\nThe second one is the package must ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749781522,749781522,doc/policy/packages.md
ariard,2021-11-16 01:41:28,"IIUC the design rational behind this check is to prevent unbounded mempool growth in-between individual transaction acceptance and final call to `LimitMempoolSize` ?\n\nIntuitively, I would say package memory usage is already bounded by `MAX_PACKAGE_SIZE` and `MAX_STANDARD_TX_WEIGHT`, even if we have to assume malloc overhead, `total_memory_usage` should stay correlated enough to total vsize, to",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749834798,749834798,src/validation.cpp
ariard,2021-11-16 01:45:07,"If this check should never fail, is it introduced as an additional belt-and-suspender of `PreChecks`, in case we asserted package ancestors/descendants limits with wrong relaxation ?",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749836165,749836165,src/validation.cpp
ariard,2021-11-16 01:51:31,"What are the reasons for a package transaction to not exist in the mempool at that step ?\n\nIf it has failed the script checks, we should have marked `all_submitted` as false and returned early. Asking the question because `FinalizePackage` comment explicitly says that package acceptance should have been atomically or not (""either all of the transactions are added or none"") .",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749838563,749838563,src/validation.cpp
ariard,2021-11-16 01:59:57,"I think you're overriding the `m_result` of package_state, which could have been set first in `FinalizePackage` ? ",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749841646,749841646,src/validation.cpp
laanwj,2021-11-23 16:11:04,"I was a bit confused by ""UTXO in the current chain tip"" here. I understand that you mean ""UTXO in the UTXO set as of the current chain tip"", but i first interpreted it as ""a UTXO in the chain-tip block"".",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755286913,755286913,doc/policy/packages.md
laanwj,2021-11-23 16:29:58,"Defaulting to unordered set unless there's a reason to need ordering for determinism makes sense, imo.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755309288,755309288,src/policy/packages.cpp
ariard,2021-11-24 02:11:48,"Maybe the sentence could be better phrased than ""make sense"", like ""As submitted package are ultimately upper bounded by in-mempool package limits, ensure that package acceptance limits are encompassed by the in-mempool ones"" ?\n\nNote, the mempool package limits can be adjusted by the node settings, e.g size=100. In that case, we refuse package, of which the size has been considered as acceptab",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755641690,755641690,src/validation.h
ariard,2021-11-24 02:23:12,"Do you have test coverage for the `AcceptPackage`-specific checks ""conflicts-with-mempool"" and ""package-not-child-with-unconfirmed-parents"" ? They might be already exercised elsewhere.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755645458,755645458,src/test/txpackage_tests.cpp
glozow,2021-11-29 14:22:21,"This would only fail if there is some serious bug in our consensus/policy code such that policy script checks are looser than consensus. If such a bug exists and an attacker finds it before we do, having an assertion here allows the attacker to crash nodes by sending out transactions exploiting it. However, it'd definitely be good to throw in debug mode so that we can hope to catch it in testing/f",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758407993,758407993,src/validation.cpp
glozow,2021-11-29 16:11:33,Added to the comment,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758514969,758514969,src/validation.cpp
glozow,2021-11-29 16:13:00,"Right - that comment didn't match the code. I've removed this now, since it's not relevant until package RBF",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516418,758516418,src/validation.cpp
glozow,2021-11-29 16:13:21,"Yes, good catch :)",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516751,758516751,src/test/txpackage_tests.cpp
glozow,2021-11-29 16:13:35,Done,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516978,758516978,src/test/txpackage_tests.cpp
glozow,2021-11-29 16:14:08,"Yeah you're right, this is probably overkill. I've removed it.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758517510,758517510,src/validation.cpp
glozow,2021-11-29 16:15:18,I've added a comment to explain why we need to do this - `addUnchecked` needs a `setAncestors`. We need to recalculate it in here because the transaction might have new ancestors (i.e. preceding transactions in the package that were submitted).,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758518641,758518641,src/validation.cpp
glozow,2021-11-29 16:16:06,Good point. Removed the `package_state` stuff from `FinalizePackage()`.,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758519467,758519467,src/validation.cpp
glozow,2021-11-29 16:16:56,"Changed to ""each of its inputs must be available in the UTXO set as of the current chain tip""",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758520232,758520232,doc/policy/packages.md
glozow,2021-11-29 16:17:31,"Changed to:\n\n// If a package is submitted, it must be within the mempool's ancestor/descendant limits. Since a\n// submitted package must be child-with-unconfirmed-parents (all of the transactions are an ancestor\n// of the child), package limits are ultimately bounded by mempool package limits. Ensure that the\n// defaults reflect this constraint.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758520836,758520836,src/validation.h
glozow,2021-11-29 16:18:13,"I've removed the `conflicts-with-mempool` logic, since it's not relevant right now. Added a test for `package-not-child-with-unconfirmed-parents`.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758521523,758521523,src/test/txpackage_tests.cpp
glozow,2021-11-29 16:18:40,Changed to spend 39,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758521922,758521922,src/test/txpackage_tests.cpp
glozow,2021-11-29 16:18:50,Changed both,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758522091,758522091,src/policy/packages.cpp
glozow,2021-11-29 16:19:35,"Added `Assume(false)` to all of the ""should never fail"" checks so they throw in debug mode.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758522794,758522794,src/validation.cpp
glozow,2021-11-29 16:21:11,"1. I've removed the ""package memory usage too high"" check\n2. Added a comment that packages must contain at least 2 transactions\n3. Added a disclaimer that the policy docs aren't exhaustive\n4. Added a warning that multi-parent-1-child may be unsafe for some use cases",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758524316,758524316,doc/policy/packages.md
glozow,2021-11-29 16:21:51,Added a comment for this,https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758524903,758524903,src/validation.cpp
glozow,2021-11-29 16:24:45,"Ok I've added the deduplication logic into this PR (see ""[validation] de-duplicate package transactions already in mempool"" commit). Now, if a same-txid-different-witness transaction is in the mempool, we'll treat it as already-in-mempool. We can add witness replacement later when we have that.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758527589,758527589,src/validation.cpp
glozow,2021-11-29 16:25:56,"Added deduplication logic, so the input to `AcceptMultipleTransactions()` is not necessarily the same input to `AcceptPackage()`.",https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758528793,758528793,src/validation.cpp
