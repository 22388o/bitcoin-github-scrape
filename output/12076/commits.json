[
  {
    "sha": "c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODMzMGQ0MjE2ZTlmOGUzMWM0ZTkxMGE2YmRmNDJmMDk0NThiMmNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-02T13:57:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-19T16:26:00Z"
      },
      "message": "qa: Use node.datadir instead of tmpdir in test framework",
      "tree": {
        "sha": "455c84ebd2b3201985ca5be4de73dd62a4d135d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/455c84ebd2b3201985ca5be4de73dd62a4d135d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93634f296e0b2281b25fdbbd5e608b2f5e662ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93634f296e0b2281b25fdbbd5e608b2f5e662ea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93634f296e0b2281b25fdbbd5e608b2f5e662ea3"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 74,
      "deletions": 71
    },
    "files": [
      {
        "sha": "ac6176e976e377df783f2efdecfe8ba4ac388244",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -241,7 +241,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.test.clear_all_connections()\n         self.stop_nodes()\n         self.nodes = []\n-        shutil.rmtree(self.options.tmpdir + \"/node0\")\n+        shutil.rmtree(get_datadir_path(self.options.tmpdir, 0))\n         self.setup_chain()\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)"
      },
      {
        "sha": "e9b76a53e35fb7dc9fafea7d7698a79a40951e50",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import get_datadir_path\n+\n \n class ConfArgsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -19,7 +19,7 @@ def run_test(self):\n         # Remove the -datadir argument so it doesn't override the config file\n         self.nodes[0].args = [arg for arg in self.nodes[0].args if not arg.startswith(\"-datadir\")]\n \n-        default_data_dir = get_datadir_path(self.options.tmpdir, 0)\n+        default_data_dir = self.nodes[0].datadir\n         new_data_dir = os.path.join(default_data_dir, 'newdatadir')\n         new_data_dir_2 = os.path.join(default_data_dir, 'newdatadir2')\n "
      },
      {
        "sha": "7eaa2310129944b87b1d0c92893cf56c0df692a5",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -44,7 +44,7 @@ def set_test_params(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        self.prunedir = self.options.tmpdir + \"/node2/regtest/blocks/\"\n+        self.prunedir = os.path.join(self.nodes[2].datadir, 'regtest', 'blocks', '')\n \n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)"
      },
      {
        "sha": "73437167007d10e170785ffaf629adbc8a5f7b5c",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -93,8 +93,8 @@ def run_test(self):\n         self.start_node(0)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n-        mempooldat0 = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'mempool.dat')\n-        mempooldat1 = os.path.join(self.options.tmpdir, 'node1', 'regtest', 'mempool.dat')\n+        mempooldat0 = os.path.join(self.nodes[0].datadir, 'regtest', 'mempool.dat')\n+        mempooldat1 = os.path.join(self.nodes[1].datadir, 'regtest', 'mempool.dat')\n         self.log.debug(\"Remove the mempool.dat file. Verify that savemempool to disk via RPC re-creates it\")\n         os.remove(mempooldat0)\n         self.nodes[0].savemempool()"
      },
      {
        "sha": "f549488e7d733002e8878216c4e0dd0be2e40a5a",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -48,7 +48,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         self.nodes[0].rpchost = None\n         self.start_nodes([base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n+        node = get_rpc_proxy(rpc_url(self.nodes[0].datadir, 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "0ce412f74a0e5d1d01da52489338965886856f7f",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -5,13 +5,18 @@\n \"\"\"Test multiple RPC users.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import str_to_b64str, assert_equal\n+from test_framework.util import (\n+    assert_equal,\n+    get_datadir_path,\n+    str_to_b64str,\n+)\n \n import os\n import http.client\n import urllib.parse\n \n-class HTTPBasicsTest (BitcoinTestFramework):\n+\n+class HTTPBasicsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n@@ -22,10 +27,10 @@ def setup_chain(self):\n         rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n         rpcuser = \"rpcuser=rpcuser\ud83d\udcbb\"\n         rpcpassword = \"rpcpassword=rpcpassword\ud83d\udd11\"\n-        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n             f.write(rpcauth+\"\\n\")\n             f.write(rpcauth2+\"\\n\")\n-        with open(os.path.join(self.options.tmpdir+\"/node1\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n@@ -54,7 +59,7 @@ def run_test(self):\n         resp = conn.getresponse()\n         assert_equal(resp.status, 200)\n         conn.close()\n-        \n+\n         #Use new authpair to confirm both work\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n "
      },
      {
        "sha": "446fc6123b889c28be0ef01c1aea2abfebee3a01",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -228,7 +228,7 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, get_datadir_path(self.options.tmpdir, i), rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -400,7 +400,7 @@ def _initialize_chain(self):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, self.options.cachedir, extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "468e07d4add6a1e9272222be13b594ba428a40f0",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -43,9 +43,9 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n-        self.datadir = os.path.join(dirname, \"node\" + str(i))\n+        self.datadir = datadir\n         self.rpchost = rpchost\n         if timewait:\n             self.rpc_timeout = timewait\n@@ -59,7 +59,7 @@ def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, cove\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n         if extra_conf != None:\n-            append_config(dirname, i, extra_conf)\n+            append_config(datadir, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n         # For those callers that need more flexibity, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)"
      },
      {
        "sha": "041e2b86e8c22a315caf1758d5f204e9d65fc529",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -284,7 +284,7 @@ def rpc_url(datadir, i, rpchost=None):\n ################\n \n def initialize_datadir(dirname, n):\n-    datadir = os.path.join(dirname, \"node\" + str(n))\n+    datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n@@ -300,8 +300,7 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n-def append_config(dirname, n, options):\n-    datadir = get_datadir_path(dirname, n)\n+def append_config(datadir, options):\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n         for option in options:\n             f.write(option + \"\\n\")"
      },
      {
        "sha": "46a72d7e28b41ac2288b67418a30884f8674fdcd",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -90,9 +90,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n+        os.remove(os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -116,13 +116,13 @@ def run_test(self):\n             self.do_one_round()\n \n         self.log.info(\"Backing up\")\n-        tmpdir = self.options.tmpdir\n-        self.nodes[0].backupwallet(tmpdir + \"/node0/wallet.bak\")\n-        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.dump\")\n-        self.nodes[1].backupwallet(tmpdir + \"/node1/wallet.bak\")\n-        self.nodes[1].dumpwallet(tmpdir + \"/node1/wallet.dump\")\n-        self.nodes[2].backupwallet(tmpdir + \"/node2/wallet.bak\")\n-        self.nodes[2].dumpwallet(tmpdir + \"/node2/wallet.dump\")\n+\n+        self.nodes[0].backupwallet(os.path.join(self.nodes[0].datadir, 'wallet.bak'))\n+        self.nodes[0].dumpwallet(os.path.join(self.nodes[0].datadir, 'wallet.dump'))\n+        self.nodes[1].backupwallet(os.path.join(self.nodes[1].datadir, 'wallet.bak'))\n+        self.nodes[1].dumpwallet(os.path.join(self.nodes[1].datadir, 'wallet.dump'))\n+        self.nodes[2].backupwallet(os.path.join(self.nodes[2].datadir, 'wallet.bak'))\n+        self.nodes[2].dumpwallet(os.path.join(self.nodes[2].datadir, 'wallet.dump'))\n \n         self.log.info(\"More transactions\")\n         for i in range(5):\n@@ -150,13 +150,13 @@ def run_test(self):\n         self.erase_three()\n \n         # Start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -171,18 +171,18 @@ def run_test(self):\n         self.erase_three()\n \n         #start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n \n         self.start_three()\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[1].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n-        self.nodes[0].importwallet(tmpdir + \"/node0/wallet.dump\")\n-        self.nodes[1].importwallet(tmpdir + \"/node1/wallet.dump\")\n-        self.nodes[2].importwallet(tmpdir + \"/node2/wallet.dump\")\n+        self.nodes[0].importwallet(os.path.join(self.nodes[0].datadir, 'wallet.dump'))\n+        self.nodes[1].importwallet(os.path.join(self.nodes[1].datadir, 'wallet.dump'))\n+        self.nodes[2].importwallet(os.path.join(self.nodes[2].datadir, 'wallet.dump'))\n \n         sync_blocks(self.nodes)\n \n@@ -192,10 +192,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            tmpdir + \"/node0/regtest/wallets/wallet.dat\",\n-            tmpdir + \"/node0/./regtest/wallets/wallet.dat\",\n-            tmpdir + \"/node0/regtest/wallets/\",\n-            tmpdir + \"/node0/regtest/wallets\"]\n+            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, 'regtest', '.', 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', ''),\n+            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets')]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      },
      {
        "sha": "9647906e6e39e426d5de0e3bc62da7b4a26cd6fc",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -4,23 +4,23 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n \n+import os\n+import shutil\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n )\n-import shutil\n-import os\n+\n \n class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n-    def run_test (self):\n-        tmpdir = self.options.tmpdir\n-\n+    def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n         self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n@@ -41,8 +41,8 @@ def run_test (self):\n         self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(non_hd_add))\n \n         # This should be enough to keep the master key and the non-HD key\n-        self.nodes[1].backupwallet(tmpdir + \"/hd.bak\")\n-        #self.nodes[1].dumpwallet(tmpdir + \"/hd.dump\")\n+        self.nodes[1].backupwallet(os.path.join(self.nodes[1].datadir, \"hd.bak\"))\n+        #self.nodes[1].dumpwallet(os.path.join(self.nodes[1].datadir, \"hd.dump\"))\n \n         # Derive some HD addresses and remember the last\n         # Also send funds to each add\n@@ -71,9 +71,9 @@ def run_test (self):\n         self.stop_node(1)\n         # we need to delete the complete regtest directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n-        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n-        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallets/wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -94,9 +94,9 @@ def run_test (self):\n \n         # Try a RPC based rescan\n         self.stop_node(1)\n-        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n-        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n-        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n         self.start_node(1, extra_args=self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()"
      },
      {
        "sha": "30a0c9a760051b1c4f58e3d7d5175733a46d3ca9",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -10,6 +10,7 @@\n - Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n - Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n - connect node1 to node0. Verify that they sync and node1 receives its funds.\"\"\"\n+import os\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -19,56 +20,50 @@\n     sync_blocks,\n )\n \n+\n class KeypoolRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100', '-keypoolmin=20']]\n \n     def run_test(self):\n-        self.tmpdir = self.options.tmpdir\n+        wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n+        wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n \n         self.log.info(\"Make backup of wallet\")\n-\n         self.stop_node(1)\n-\n-        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallets/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n-\n         for _ in range(90):\n             addr_oldpool = self.nodes[1].getnewaddress()\n         for _ in range(20):\n             addr_extpool = self.nodes[1].getnewaddress()\n \n         self.log.info(\"Send funds to wallet\")\n-\n         self.nodes[0].sendtoaddress(addr_oldpool, 10)\n         self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(addr_extpool, 5)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         self.log.info(\"Restart node with wallet backup\")\n-\n         self.stop_node(1)\n-\n-        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n-\n-        self.log.info(\"Verify keypool is restored and balance is correct\")\n-\n+        shutil.copyfile(wallet_backup_path, wallet_path)\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n \n+        self.log.info(\"Verify keypool is restored and balance is correct\")\n         assert_equal(self.nodes[1].getbalance(), 15)\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n-\n         # Check that we have marked all keys up to the used keypool key as used\n         assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n+\n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      },
      {
        "sha": "3a98ae0ad1f2dd7113fac5b5fa2ca909a7886055",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8330d4216e9f8e31c4e910a6bdf42f09458b2cd/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=c8330d4216e9f8e31c4e910a6bdf42f09458b2cd",
        "patch": "@@ -10,7 +10,11 @@\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  }
]