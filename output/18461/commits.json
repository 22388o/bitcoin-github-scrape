[
  {
    "sha": "5079ebed79958f0720ba68a5e389d533342386d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDc5ZWJlZDc5OTU4ZjA3MjBiYTY4YTVlMzg5ZDUzMzM0MjM4NmQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-28T23:11:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-28T23:44:13Z"
      },
      "message": "[net processing] Never try to upgrade a non-segwit peer to high-bandwidth\n\nThis shouldn't happen anyway since\nMaybeSetPeerAsAnnouncingHeaderAndIDs() is called from BlockChecked()\nonly when the node is out of IBD, but make it explicit.",
      "tree": {
        "sha": "55e9fe22dd0494d6b7432e433b32b7972857bada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55e9fe22dd0494d6b7432e433b32b7972857bada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5079ebed79958f0720ba68a5e389d533342386d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5079ebed79958f0720ba68a5e389d533342386d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5079ebed79958f0720ba68a5e389d533342386d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5079ebed79958f0720ba68a5e389d533342386d4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27a82d347eddfe1cde0005f8a2174274ab6efe9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27a82d347eddfe1cde0005f8a2174274ab6efe9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27a82d347eddfe1cde0005f8a2174274ab6efe9f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ec3c83e5271228e20b21e367c57585f528cafa0a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5079ebed79958f0720ba68a5e389d533342386d4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5079ebed79958f0720ba68a5e389d533342386d4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5079ebed79958f0720ba68a5e389d533342386d4",
        "patch": "@@ -557,17 +557,20 @@ static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connma\n         }\n         connman->ForNode(nodeid, [connman](CNode* pfrom){\n             AssertLockHeld(cs_main);\n-            uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n+            // Never try to upgrade a pre-segwit node to high-bandwidth compact block provider\n+            if (!(pfrom->GetLocalServices() & NODE_WITNESS)) return true;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n-                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman](CNode* pnodeStop){\n                     AssertLockHeld(cs_main);\n+                    const uint64_t nCMPCTBLOCKVersion = (pnodeStop->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n                     connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n+            const uint64_t nCMPCTBLOCKVersion = 2;\n             connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;"
      }
    ]
  }
]