Empact,2018-04-12T06:37:59Z,Could you elaborate on why it needs the guidance?,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380694972,380694972,
practicalswift,2018-04-12T06:39:27Z,@Empact See the report linked in #12961 :-),https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380695282,380695282,
Empact,2018-04-12T07:26:51Z,utACK 7e95d97,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380705562,380705562,
practicalswift,2018-04-12T12:31:21Z,Updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-380788396,380788396,
ajtowns,2018-04-13T06:15:02Z,utACK 159c32d1f111e6bad490bd23ae215462e8ba4374,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-381034840,381034840,
practicalswift,2018-04-28T17:46:51Z,@kallewoof @Empact Would you mind re-reviewing the latest version? :-),https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-385193763,385193763,
Empact,2018-04-29T15:43:57Z,utACK 159c32d,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-385260374,385260374,
practicalswift,2018-05-13T18:15:17Z,@MarcoFalke @laanwj Willing to review? :-),https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-388645590,388645590,
MarcoFalke,2018-05-13T18:32:05Z,utACK 159c32d1f111e6bad490bd23ae215462e8ba4374,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-388646604,388646604,
ken2812221,2018-05-14T00:36:39Z,utACK 159c32d1f111e6bad490bd23ae215462e8ba4374,https://github.com/bitcoin/bitcoin/pull/12963#issuecomment-388668149,388668149,
kallewoof,2018-04-12T06:45:30Z,Are you sure the analyzer doesn't realize a reference to an object is never null? Weird.,https://github.com/bitcoin/bitcoin/pull/12963#discussion_r180978952,180978952,src/rpc/mining.cpp
practicalswift,2018-04-12T06:52:57Z,@kallewoof Agreed â€“ it should understand that. Checking `pindexPrev` should be sufficient. Updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/12963#discussion_r180980302,180980302,src/rpc/mining.cpp
ajtowns,2018-04-12T09:26:30Z,"Should this be fixed by adding an `assert(rv == 1);` instead, matching the `LockCommand` case?",https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181018489,181018489,src/test/util_tests.cpp
ajtowns,2018-04-12T09:33:32Z,Might make sense to reset `out_value` and `out_set` at the sample place that `target` actually gets defined.,https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181020485,181020485,src/wallet/test/coinselector_tests.cpp
ajtowns,2018-04-12T10:11:03Z,"I believe the reason this is valid is that we've checked `IsInitialBlockDownload()` is false, and that ensures `chainActive->Tip()` is not nullptr, and we've just ensured `pindexPrev` is `chainActive->Tip()`. We did potentially release `cs_main` in the meantime, though. I wonder if asserting `chainActive->Tip() != nullptr` or `!IsInitialBlockDownload()` would be enough to satisfy to the static ana",https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181030734,181030734,src/rpc/mining.cpp
practicalswift,2018-04-12T10:36:06Z,@ajtowns On what line do you suggest placing that assertion?,https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181036522,181036522,src/rpc/mining.cpp
ajtowns,2018-04-12T12:37:42Z,"If it satisfied the analysis tool, I'd probably put `assert(chainActive->Tip() != nullptr);` somewhere around `static CBlockIndex* pindexPrev;`, I guess.",https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181065038,181065038,src/rpc/mining.cpp
ajtowns,2018-04-12T13:00:36Z,"The warning is only reasonable if an uninitialised `WitnessUnknown` is compared with something; that seems a bug in its own right, and not something that should be hidden by auto initialising everything to 0/empty?\n\nHow about:\n\n```\n+    template<typename T>\n+    inline WitnessUnknown(unsigned int _version, T _data)\n+      : version(_version), length(_data.size())\n+    {\n+        ",https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181071654,181071654,src/script/standard.h
ajtowns,2018-04-12T13:08:39Z,"Thinking about it a bit more, that doesn't guarantee the first `length` bytes of `program` are initialised. `std::copy_n(_data, length, program);` might arguably be better.",https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181074063,181074063,src/script/standard.h
practicalswift,2018-04-12T18:03:35Z,Skipped this change to keep things easy to review. I might post a follow-up PR instead :-),https://github.com/bitcoin/bitcoin/pull/12963#discussion_r181171858,181171858,src/script/standard.h
