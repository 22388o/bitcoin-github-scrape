[
  {
    "sha": "332c1f25b799fa7746e5301f120625525692c39b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzJjMWYyNWI3OTlmYTc3NDZlNTMwMWYxMjA2MjU1MjU2OTJjMzli",
    "commit": {
      "author": {
        "name": "Peter Bushnell",
        "email": "bushsolo@gmail.com",
        "date": "2019-05-08T14:54:13Z"
      },
      "committer": {
        "name": "Peter Bushnell",
        "email": "bushsolo@gmail.com",
        "date": "2019-05-08T14:54:13Z"
      },
      "message": "Use __func__ for log messages",
      "tree": {
        "sha": "31e46915c4941b4b6ed8e30d8b14fc5cfbf884c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31e46915c4941b4b6ed8e30d8b14fc5cfbf884c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/332c1f25b799fa7746e5301f120625525692c39b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/332c1f25b799fa7746e5301f120625525692c39b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/332c1f25b799fa7746e5301f120625525692c39b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/332c1f25b799fa7746e5301f120625525692c39b/comments",
    "author": {
      "login": "Bushstar",
      "id": 5293433,
      "node_id": "MDQ6VXNlcjUyOTM0MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5293433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bushstar",
      "html_url": "https://github.com/Bushstar",
      "followers_url": "https://api.github.com/users/Bushstar/followers",
      "following_url": "https://api.github.com/users/Bushstar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bushstar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bushstar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bushstar/subscriptions",
      "organizations_url": "https://api.github.com/users/Bushstar/orgs",
      "repos_url": "https://api.github.com/users/Bushstar/repos",
      "events_url": "https://api.github.com/users/Bushstar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bushstar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Bushstar",
      "id": 5293433,
      "node_id": "MDQ6VXNlcjUyOTM0MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5293433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bushstar",
      "html_url": "https://github.com/Bushstar",
      "followers_url": "https://api.github.com/users/Bushstar/followers",
      "following_url": "https://api.github.com/users/Bushstar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bushstar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bushstar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bushstar/subscriptions",
      "organizations_url": "https://api.github.com/users/Bushstar/orgs",
      "repos_url": "https://api.github.com/users/Bushstar/repos",
      "events_url": "https://api.github.com/users/Bushstar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bushstar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2a6b0216192b6e8428f1a80b47f5178fccb961a"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 52,
      "deletions": 52
    },
    "files": [
      {
        "sha": "971d99eb3fbf2e443bf2d5f02e7f3384388f2e5e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -86,7 +86,7 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::%s: redeemScripts > %i bytes are invalid\", __func__, MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "818f94e0731e62af1b199cb5a6c59d9472cd8e0c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -474,7 +474,7 @@ SOCKET CreateSocket(const CService &addrConnect)\n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true)) {\n         CloseSocket(hSocket);\n-        LogPrintf(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s: Setting socket to non-blocking failed, error %s\\n\", __func__, NetworkErrorString(WSAGetLastError()));\n     }\n     return hSocket;\n }"
      },
      {
        "sha": "ba64b9e631b6f0e225f6f1e800e88c3a906b15cd",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -895,7 +895,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CBlockPolicyEstimator::%s: up-version (%d) fee estimate file\", __func__, nVersionRequired);\n \n         // Read fee estimates file into temporary variables so existing data\n         // structures aren't corrupted if there is an exception.\n@@ -942,7 +942,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         }\n     }\n     catch (const std::exception& e) {\n-        LogPrintf(\"CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal): %s\\n\",e.what());\n+        LogPrintf(\"CBlockPolicyEstimator::%s: unable to read policy estimator data (non-fatal): %s\\n\", __func__, e.what());\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "fd82435d48f6f5f4c07e03055318399e55d3a354",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -841,7 +841,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             ++nTransactionsUpdated;\n         }\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s feerate += %s\\n\", hash.ToString(), FormatMoney(nFeeDelta));\n+    LogPrintf(\"CTxMemPool::%s: %s feerate += %s\\n\", __func__, hash.ToString(), FormatMoney(nFeeDelta));\n }\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const"
      },
      {
        "sha": "a6ce9a09c46edee3c8d411b04f66e98013b34b73",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -1053,7 +1053,7 @@ static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessa\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = GetSerializeSize(block, fileout.GetVersion());\n@@ -1062,7 +1062,7 @@ static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessa\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk: ftell failed\");\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1076,7 +1076,7 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n+        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n \n     // Read block\n     try {\n@@ -1088,7 +1088,7 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+        return error(\"%s: Errors in block header at %s\", __func__, pos.ToString());\n \n     return true;\n }\n@@ -1104,8 +1104,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n-                pindex->ToString(), pindex->GetBlockPos().ToString());\n+        return error(\"%s: GetHash() doesn't match index for %s at %s\",\n+                __func__, pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n \n@@ -1581,12 +1581,12 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n \n     CBlockUndo blockUndo;\n     if (!UndoReadFromDisk(blockUndo, pindex)) {\n-        error(\"DisconnectBlock(): failure reading undo data\");\n+        error(\"CChainState::%s: failure reading undo data\", __func__);\n         return DISCONNECT_FAILED;\n     }\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size()) {\n-        error(\"DisconnectBlock(): block and undo data inconsistent\");\n+        error(\"CChainState::%s: block and undo data inconsistent\", __func__);\n         return DISCONNECT_FAILED;\n     }\n \n@@ -1613,7 +1613,7 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n         if (i > 0) { // not coinbases\n             CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size()) {\n-                error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n+                error(\"CChainState::%s: transaction and undo data inconsistent\", __func__);\n                 return DISCONNECT_FAILED;\n             }\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n@@ -1655,7 +1655,7 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n     if (pindex->GetUndoPos().IsNull()) {\n         FlatFilePos _pos;\n         if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\n-            return error(\"ConnectBlock(): FindUndoPos failed\");\n+            return error(\"%s: FindUndoPos failed\", __func__);\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n \n@@ -1943,7 +1943,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         for (const auto& tx : block.vtx) {\n             for (size_t o = 0; o < tx->vout.size(); o++) {\n                 if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {\n-                    return state.Invalid(ValidationInvalidReason::CONSENSUS, error(\"ConnectBlock(): tried to overwrite transaction\"),\n+                    return state.Invalid(ValidationInvalidReason::CONSENSUS, error(\"CChainState::%s: tried to overwrite transaction\", __func__),\n                                      REJECT_INVALID, \"bad-txns-BIP30\");\n                 }\n             }\n@@ -1991,7 +1991,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                     state.Invalid(ValidationInvalidReason::CONSENSUS, false,\n                             state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n                 }\n-                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+                return error(\"CChainState::%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n             }\n             nFees += txfee;\n             if (!MoneyRange(nFees)) {\n@@ -2019,7 +2019,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n         if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n-            return state.Invalid(ValidationInvalidReason::CONSENSUS, error(\"ConnectBlock(): too many sigops\"),\n+            return state.Invalid(ValidationInvalidReason::CONSENSUS, error(\"CChainState::%s: too many sigops\", __func__),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         txdata.emplace_back(tx);\n@@ -2313,7 +2313,7 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n         CCoinsViewCache view(pcoinsTip.get());\n         assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n         if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n-            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"CChainState::%s: DisconnectBlock %s failed\", __func__, pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n         assert(flushed);\n     }\n@@ -4028,7 +4028,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n-            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"CVerifyDB::%s: *** ReadBlockFromDisk failed at %d, hash=%s\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n@@ -4038,7 +4038,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlockUndo undo;\n             if (!pindex->GetUndoPos().IsNull()) {\n                 if (!UndoReadFromDisk(undo, pindex)) {\n-                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"CVerifyDB::%s: *** found bad undo data at %d, hash=%s\\n\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString());\n                 }\n             }\n         }\n@@ -4047,7 +4047,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n             DisconnectResult res = g_chainstate.DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n-                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"CVerifyDB::%s: *** irrecoverable inconsistency in block data at %d, hash=%s\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n             if (res == DISCONNECT_UNCLEAN) {\n                 nGoodTransactions = 0;\n@@ -4060,7 +4060,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", ::ChainActive().Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"CVerifyDB::%s: *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", __func__, ::ChainActive().Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // store block count as we move pindex at check level >= 4\n     int block_count = ::ChainActive().Height() - pindex->nHeight;\n@@ -4079,9 +4079,9 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             pindex = ::ChainActive().Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n-                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"CVerifyDB::%s: *** ReadBlockFromDisk failed at %d, hash=%s\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n-                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n+                return error(\"CVerifyDB::%s: *** found unconnectable block at %d, hash=%s (%s)\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         }\n     }\n \n@@ -4097,7 +4097,7 @@ bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& i\n     // TODO: merge with ConnectBlock\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n-        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+        return error(\"CChainState::%s: ReadBlockFromDisk failed at %d, hash=%s\", __func__, pindex->nHeight, pindex->GetBlockHash().ToString());\n     }\n \n     for (const CTransactionRef& tx : block.vtx) {\n@@ -4130,13 +4130,13 @@ bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     const CBlockIndex* pindexFork = nullptr; // Latest block common to both the old and the new tip.\n \n     if (mapBlockIndex.count(hashHeads[0]) == 0) {\n-        return error(\"ReplayBlocks(): reorganization to unknown block requested\");\n+        return error(\"CChainState::%s: reorganization to unknown block requested\", __func__);\n     }\n     pindexNew = mapBlockIndex[hashHeads[0]];\n \n     if (!hashHeads[1].IsNull()) { // The old tip is allowed to be 0, indicating it's the first flush.\n         if (mapBlockIndex.count(hashHeads[1]) == 0) {\n-            return error(\"ReplayBlocks(): reorganization from unknown block requested\");\n+            return error(\"CChainState::%s: reorganization from unknown block requested\", __func__);\n         }\n         pindexOld = mapBlockIndex[hashHeads[1]];\n         pindexFork = LastCommonAncestor(pindexOld, pindexNew);\n@@ -4148,12 +4148,12 @@ bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n         if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindexOld, params.GetConsensus())) {\n-                return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+                return error(\"CChainState::%s: ReadBlockFromDisk() failed at %d, hash=%s\", __func__, pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }\n             LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);\n             DisconnectResult res = DisconnectBlock(block, pindexOld, cache);\n             if (res == DISCONNECT_FAILED) {\n-                return error(\"RollbackBlock(): DisconnectBlock failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+                return error(\"CChainState::%s: DisconnectBlock failed at %d, hash=%s\", __func__, pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }\n             // If DISCONNECT_UNCLEAN is returned, it means a non-existing UTXO was deleted, or an existing UTXO was\n             // overwritten. It corresponds to cases where the block-to-be-disconnect never had all its operations\n@@ -4272,7 +4272,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n             // Disconnect block\n             if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+                return error(\"CChainState::%s: unable to disconnect block at height %i (%s)\", __func__, tip->nHeight, FormatStateMessage(state));\n             }\n \n             // Reduce validity flag and have-data flags.\n@@ -4292,7 +4292,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"CChainState::%s: unable to flush state to disk (%s)\\n\", __func__, FormatStateMessage(state));\n             return false;\n         }\n     }\n@@ -4322,7 +4322,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n         // it'll get called a bunch real soon.\n         CValidationState state;\n         if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"%s: unable to flush state to disk (%s)\\n\", __func__, FormatStateMessage(state));\n             return false;\n         }\n     }"
      },
      {
        "sha": "24089c84d165114a68eb4d71e0156f408b1e768f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -139,7 +139,7 @@ void BerkeleyEnvironment::Close()\n \n     int ret = dbenv->close(0);\n     if (ret != 0)\n-        LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"BerkeleyEnvironment::%s: Error %d closing database environment: %s\\n\", __func__, ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv((u_int32_t)0).remove(strPath.c_str(), 0);\n \n@@ -184,7 +184,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n     fs::path pathErrorFile = pathIn / \"db.log\";\n-    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"BerkeleyEnvironment::%s: LogDir=%s ErrorFile=%s\\n\", __func__, pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n@@ -211,10 +211,10 @@ bool BerkeleyEnvironment::Open(bool retry)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0) {\n-        LogPrintf(\"BerkeleyEnvironment::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"BerkeleyEnvironment::%s: Error %d opening database environment: %s\\n\", __func__, ret, DbEnv::strerror(ret));\n         int ret2 = dbenv->close(0);\n         if (ret2 != 0) {\n-            LogPrintf(\"BerkeleyEnvironment::Open: Error %d closing failed database environment: %s\\n\", ret2, DbEnv::strerror(ret2));\n+            LogPrintf(\"BerkeleyEnvironment::%s: Error %d closing failed database environment: %s\\n\", __func__, ret2, DbEnv::strerror(ret2));\n         }\n         Reset();\n         if (retry) {\n@@ -248,7 +248,7 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n \n     boost::this_thread::interruption_point();\n \n-    LogPrint(BCLog::DB, \"BerkeleyEnvironment::MakeMock\\n\");\n+    LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s\\n\", __func__);\n \n     dbenv->set_cachesize(1, 0, 1);\n     dbenv->set_lg_bsize(10485760 * 4);\n@@ -267,7 +267,7 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw std::runtime_error(strprintf(\"BerkeleyEnvironment::MakeMock: Error %d opening database environment.\", ret));\n+        throw std::runtime_error(strprintf(\"BerkeleyEnvironment::%s: Error %d opening database environment.\", __func__, ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -469,14 +469,14 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"BerkeleyEnvironment::%s: Database salvage found errors, all data may not be recoverable.\\n\", __func__);\n         if (!fAggressive) {\n-            LogPrintf(\"BerkeleyEnvironment::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"BerkeleyEnvironment::%s: Rerun with aggressive mode to ignore errors and continue.\\n\", __func__);\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"BerkeleyEnvironment::%s: Database salvage failed with result %d.\\n\", __func__, result);\n         return false;\n     }\n \n@@ -500,15 +500,15 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n                 break;\n             getline(strDump, valueHex);\n             if (valueHex == DATA_END) {\n-                LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                LogPrintf(\"BerkeleyEnvironment::%s: WARNING: Number of keys in data does not match number of values.\\n\", __func__);\n                 break;\n             }\n             vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n         }\n     }\n \n     if (keyHex != DATA_END) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        LogPrintf(\"BerkeleyEnvironment::%s: WARNING: Unexpected end of file while reading salvage output.\\n\", __func__);\n         return false;\n     }\n \n@@ -775,7 +775,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: [%s] Flush(%s)%s\\n\", strPath, fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: [%s] Flush(%s)%s\\n\", __func__, strPath, fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -784,21 +784,21 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             std::string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: Flushing %s (refcount = %d)...\\n\", __func__, strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s checkpoint\\n\", strFile);\n+                LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: %s checkpoint\\n\", __func__, strFile);\n                 dbenv->txn_checkpoint(0, 0, 0);\n-                LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s detach\\n\", strFile);\n+                LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: %s detach\\n\", __func__, strFile);\n                 if (!fMockDb)\n                     dbenv->lsn_reset(strFile.c_str(), 0);\n-                LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n+                LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: %s closed\\n\", __func__, strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(BCLog::DB, \"BerkeleyEnvironment::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(BCLog::DB, \"BerkeleyEnvironment::%s: Flush(%s)%s took %15dms\\n\", __func__, fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "2d171b5e6d7bf314537e3dd15494680151cb930f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/332c1f25b799fa7746e5301f120625525692c39b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/332c1f25b799fa7746e5301f120625525692c39b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=332c1f25b799fa7746e5301f120625525692c39b",
        "patch": "@@ -1682,8 +1682,8 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n         if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n-            pwallet->WalletLogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n-                                    this->GetHash().ToString());\n+            pwallet->WalletLogPrintf(\"CWalletTx::%s: Unknown transaction type found, txid %s\\n\",\n+                                    __func__, this->GetHash().ToString());\n             address = CNoDestination();\n         }\n "
      }
    ]
  }
]