[
  {
    "sha": "db15e71e79b24601853703bebd1c92f4b523fd5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjE1ZTcxZTc5YjI0NjAxODUzNzAzYmViZDFjOTJmNGI1MjNmZDVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-25T22:10:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-20T17:12:01Z"
      },
      "message": "Use BnB when preset inputs are selected",
      "tree": {
        "sha": "b40db500430c35419208013279dcd36e7e03e289",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b40db500430c35419208013279dcd36e7e03e289"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db15e71e79b24601853703bebd1c92f4b523fd5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db15e71e79b24601853703bebd1c92f4b523fd5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db15e71e79b24601853703bebd1c92f4b523fd5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db15e71e79b24601853703bebd1c92f4b523fd5f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfec3e01b4d6153efecc1d767511c616029cb974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfec3e01b4d6153efecc1d767511c616029cb974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfec3e01b4d6153efecc1d767511c616029cb974"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 58,
      "deletions": 29
    },
    "files": [
      {
        "sha": "bc61630363a015f36cf4eb730992dd11ceb24238",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 13,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db15e71e79b24601853703bebd1c92f4b523fd5f/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db15e71e79b24601853703bebd1c92f4b523fd5f/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=db15e71e79b24601853703bebd1c92f4b523fd5f",
        "patch": "@@ -53,29 +53,39 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n     set.emplace(MakeTransactionRef(tx), nInput);\n }\n \n-static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n     balance += nValue;\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    if (spendable) {\n+        CTxDestination dest;\n+        std::string error;\n+        assert(wallet.GetNewDestination(OutputType::BECH32, \"\", dest, error));\n+        tx.vout[nInput].scriptPubKey = GetScriptForDestination(dest);\n+    }\n     if (fIsFromMe) {\n         // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n-    testWallet.AddToWallet(*wtx.get());\n+    wallet.AddToWallet(*wtx.get());\n     wtxn.emplace_back(std::move(wtx));\n }\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n+{\n+    add_coin(testWallet, nValue, nAge, fIsFromMe, nInput, spendable);\n+}\n \n static void empty_wallet(void)\n {\n@@ -250,17 +260,24 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n     BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n \n-    // Make sure that we aren't using BnB when there are preset inputs\n+    // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n-    add_coin(5 * CENT);\n-    add_coin(3 * CENT);\n-    add_coin(2 * CENT);\n-    CCoinControl coin_control;\n-    coin_control.fAllowOtherInputs = true;\n-    coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n-    BOOST_CHECK(testWallet.SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n-    BOOST_CHECK(!bnb_used);\n-    BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n+    {\n+        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        bool firstRun;\n+        wallet->LoadWallet(firstRun);\n+        LOCK(wallet->cs_wallet);\n+        add_coin(*wallet, 5 * CENT, 6 * 24, false, 0, true);\n+        add_coin(*wallet, 3 * CENT, 6 * 24, false, 0, true);\n+        add_coin(*wallet, 2 * CENT, 6 * 24, false, 0, true);\n+        CCoinControl coin_control;\n+        coin_control.fAllowOtherInputs = true;\n+        coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n+        coin_selection_params_bnb.effective_fee = CFeeRate(0);\n+        BOOST_CHECK(wallet->SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n+        BOOST_CHECK(bnb_used);\n+        BOOST_CHECK(coin_selection_params_bnb.use_bnb);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)"
      },
      {
        "sha": "8f2cbfaf77b9d7f50f64d6bc0e473c7758f4fb8f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 16,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db15e71e79b24601853703bebd1c92f4b523fd5f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db15e71e79b24601853703bebd1c92f4b523fd5f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=db15e71e79b24601853703bebd1c92f4b523fd5f",
        "patch": "@@ -2674,6 +2674,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n+    CAmount value_to_select = nTargetValue;\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n@@ -2699,22 +2700,33 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     coin_control.ListSelected(vPresetInputs);\n     for (const COutPoint& outpoint : vPresetInputs)\n     {\n-        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later\n-        bnb_used = false;\n-        coin_selection_params.use_bnb = false;\n-\n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n         {\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n-            if (wtx.tx->vout.size() <= outpoint.n)\n+            if (wtx.tx->vout.size() <= outpoint.n) {\n+                bnb_used = false;\n                 return false;\n+            }\n             // Just to calculate the marginal byte size\n-            nValueFromPresetInputs += wtx.tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(wtx.tx, outpoint.n));\n-        } else\n+            CInputCoin coin(wtx.tx, outpoint.n, wtx.GetSpendSize(outpoint.n, false));\n+            nValueFromPresetInputs += coin.txout.nValue;\n+            if (coin.m_input_bytes <= 0) {\n+                bnb_used = false;\n+                return false; // Not solvable, can't estimate size for fee\n+            }\n+            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+            if (coin_selection_params.use_bnb) {\n+                value_to_select -= coin.effective_value;\n+            } else {\n+                value_to_select -= coin.txout.nValue;\n+            }\n+            setPresetCoins.insert(coin);\n+        } else {\n+            bnb_used = false;\n             return false; // TODO: Allow non-wallet inputs\n+        }\n     }\n \n     // remove preset inputs from vCoins\n@@ -2743,14 +2755,14 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     size_t max_descendants = (size_t)std::max<int64_t>(1, limit_descendant_count);\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n-    bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+    bool res = value_to_select <= 0 ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     util::insert(setCoinsRet, setPresetCoins);"
      }
    ]
  },
  {
    "sha": "b007efdf1910db1d38671d6435d2f379bbf847d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDA3ZWZkZjE5MTBkYjFkMzg2NzFkNjQzNWQyZjM3OWJiZjg0N2Qy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-25T22:45:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-20T17:12:01Z"
      },
      "message": "Allow BnB when subtract fee from outputs",
      "tree": {
        "sha": "838b89258d7275a9bc084eb9110ab8dbdb98de65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/838b89258d7275a9bc084eb9110ab8dbdb98de65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b007efdf1910db1d38671d6435d2f379bbf847d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b007efdf1910db1d38671d6435d2f379bbf847d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b007efdf1910db1d38671d6435d2f379bbf847d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b007efdf1910db1d38671d6435d2f379bbf847d2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db15e71e79b24601853703bebd1c92f4b523fd5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db15e71e79b24601853703bebd1c92f4b523fd5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db15e71e79b24601853703bebd1c92f4b523fd5f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 24,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4fa5c514914d03025566033404519a5ed80ae9cc",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=b007efdf1910db1d38671d6435d2f379bbf847d2",
        "patch": "@@ -260,6 +260,15 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n     BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n \n+    // Test fees subtracted from output:\n+    empty_wallet();\n+    add_coin(1 * CENT);\n+    vCoins.at(0).nInputBytes = 40;\n+    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    coin_selection_params_bnb.m_subtract_fee_outputs = true;\n+    BOOST_CHECK(testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {"
      },
      {
        "sha": "b5cc477690de4586e847aac1d62af4099d1cd77c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b007efdf1910db1d38671d6435d2f379bbf847d2",
        "patch": "@@ -2648,7 +2648,11 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n                 if (effective_value > 0) {\n                     group.fee += coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n                     group.long_term_fee += coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n-                    group.effective_value += effective_value;\n+                    if (coin_selection_params.m_subtract_fee_outputs) {\n+                        group.effective_value += coin.txout.nValue;\n+                    } else {\n+                        group.effective_value += effective_value;\n+                    }\n                     ++it;\n                 } else {\n                     it = group.Discard(coin);\n@@ -3022,7 +3026,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n             // BnB selector is the only selector used when this is true.\n             // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = nSubtractFeeFromAmount == 0; // If we are doing subtract fee from recipient, then don't use BnB\n+            coin_selection_params.use_bnb = true;\n+            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -3036,7 +3041,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     nValueToSelect += nFeeRet;\n \n                 // vouts to the payees\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                if (!coin_selection_params.m_subtract_fee_outputs) {\n+                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                }\n                 for (const auto& recipient : vecSend)\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n@@ -3053,7 +3060,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                         }\n                     }\n                     // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+                    if (!coin_selection_params.m_subtract_fee_outputs) {\n+                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+                    }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n                     {"
      },
      {
        "sha": "9776b45715da9dfa3e33fce194f228d3385c5131",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b007efdf1910db1d38671d6435d2f379bbf847d2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b007efdf1910db1d38671d6435d2f379bbf847d2",
        "patch": "@@ -715,6 +715,8 @@ struct CoinSelectionParams\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n     size_t tx_noinputs_size = 0;\n+    //! Indicate that we are subtracting the fee from outputs\n+    bool m_subtract_fee_outputs = false;\n \n     CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n     CoinSelectionParams() {}"
      }
    ]
  }
]