[
  {
    "sha": "a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWFjOTVjMWJjNjc3MjZhN2Q2ZWVjYjM1ZDc2NTBlZWQ2Yzg5MzYx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-05-31T13:36:44Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-06-04T17:34:18Z"
      },
      "message": "use const references where appropriate",
      "tree": {
        "sha": "ba9b43d9b01e925d2050d7084a11aec927a2d564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba9b43d9b01e925d2050d7084a11aec927a2d564"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "466f0ea0e66b88285c7797ab36ba777725324e83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/466f0ea0e66b88285c7797ab36ba777725324e83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/466f0ea0e66b88285c7797ab36ba777725324e83"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 61,
      "deletions": 63
    },
    "files": [
      {
        "sha": "ad81e7422645537158ee073f398047994b179d49",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -50,7 +50,7 @@ std::string CUnsignedAlert::ToString() const\n     BOOST_FOREACH(int n, setCancel)\n         strSetCancel += strprintf(\"%d \", n);\n     std::string strSetSubVer;\n-    BOOST_FOREACH(std::string str, setSubVer)\n+    BOOST_FOREACH(const std::string& str, setSubVer)\n         strSetSubVer += \"\\\"\" + str + \"\\\" \";\n     return strprintf(\n         \"CAlert(\\n\"\n@@ -110,7 +110,7 @@ bool CAlert::Cancels(const CAlert& alert) const\n     return (alert.nID <= nCancel || setCancel.count(alert.nID));\n }\n \n-bool CAlert::AppliesTo(int nVersion, std::string strSubVerIn) const\n+bool CAlert::AppliesTo(int nVersion, const std::string& strSubVerIn) const\n {\n     // TODO: rework for client-version-embedded-in-strSubVer ?\n     return (IsInEffect() &&"
      },
      {
        "sha": "4f9fff918165e581fa3e85d29afeb02af9416aef",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -97,7 +97,7 @@ class CAlert : public CUnsignedAlert\n     uint256 GetHash() const;\n     bool IsInEffect() const;\n     bool Cancels(const CAlert& alert) const;\n-    bool AppliesTo(int nVersion, std::string strSubVerIn) const;\n+    bool AppliesTo(int nVersion, const std::string& strSubVerIn) const;\n     bool AppliesToMe() const;\n     bool RelayTo(CNode* pnode) const;\n     bool CheckSignature(const std::vector<unsigned char>& alertKey) const;"
      },
      {
        "sha": "a97d983a3108c0544c5f926fa1650b508683f7e7",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -48,7 +48,7 @@ class CValidationState {\n                  unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n         return DoS(0, ret, _chRejectCode, _strRejectReason);\n     }\n-    bool Error(std::string strRejectReasonIn=\"\") {\n+    bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)\n             strRejectReason = strRejectReasonIn;\n         mode = MODE_ERROR;"
      },
      {
        "sha": "115e3199dc30ade407d3dfdae3ceabcf40520121",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -15,7 +15,7 @@ class uint256;\n class UniValue;\n \n // core_read.cpp\n-extern CScript ParseScript(std::string s);\n+extern CScript ParseScript(const std::string& s);\n extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);"
      },
      {
        "sha": "f762f2c3b7005e1d7b1ae907bf1ce542aa3cbd37",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -22,7 +22,7 @@\n \n using namespace std;\n \n-CScript ParseScript(std::string s)\n+CScript ParseScript(const std::string& s)\n {\n     CScript result;\n "
      },
      {
        "sha": "02dca57031b1bdcdc81824eda4b6556832867e24",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -535,7 +535,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(boost::filesystem::path &path, vImportFiles) {\n+    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n@@ -929,15 +929,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n         std::string warningString;\n         std::string errorString;\n-        \n+\n         if (!CWallet::Verify(strWalletFile, warningString, errorString))\n             return false;\n-        \n+\n         if (!warningString.empty())\n             InitWarning(warningString);\n         if (!errorString.empty())\n             return InitError(warningString);\n-        \n+\n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n@@ -946,7 +946,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-onlynet\"]) {\n+        BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1003,13 +1003,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     bool fBound = false;\n     if (fListen) {\n         if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n                 fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n-            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-whitebind\"]) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(strprintf(_(\"Cannot resolve -whitebind address: '%s'\"), strBind));\n@@ -1029,15 +1029,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"]) {\n+        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n             CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n             if (!addrLocal.IsValid())\n                 return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr));\n             AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n         }\n     }\n \n-    BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n+    BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n         AddOneShot(strDest);\n \n     // ********************************************************* Step 7: load block chain\n@@ -1362,7 +1362,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n+        BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));"
      },
      {
        "sha": "e9a5f7efd949f11ddec02edfa19644dd4a2e6e59",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -693,7 +693,7 @@ bool CheckFinalTx(const CTransaction &tx)\n /**\n  * Check transaction inputs to mitigate two\n  * potential denial-of-service attacks:\n- * \n+ *\n  * 1. scriptSigs with extra data stuffed into them,\n  *    not consumed by scriptPubKey (or P2SH script)\n  * 2. P2SH scripts with a crazy number of expensive\n@@ -2148,7 +2148,7 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-/** \n+/**\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n@@ -3696,7 +3696,7 @@ void static CheckBlockIndex()\n // CAlert\n //\n \n-string GetWarnings(string strFor)\n+std::string GetWarnings(const std::string& strFor)\n {\n     int nPriority = 0;\n     string strStatusBar;"
      },
      {
        "sha": "abaedae207086a2247983f0096ccc6e9bd9c2ff5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -190,7 +190,7 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core */\n-std::string GetWarnings(std::string strFor);\n+std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */"
      },
      {
        "sha": "42ac0e50ea83dee1bb21eb5e148b2fee11d782a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -107,7 +107,7 @@ boost::condition_variable messageHandlerCondition;\n static CNodeSignals g_signals;\n CNodeSignals& GetNodeSignals() { return g_signals; }\n \n-void AddOneShot(string strDest)\n+void AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n     vOneShots.push_back(strDest);\n@@ -1124,7 +1124,7 @@ void ThreadDNSAddressSeed()\n             vector<CAddress> vAdd;\n             if (LookupHost(seed.host.c_str(), vIPs))\n             {\n-                BOOST_FOREACH(CNetAddr& ip, vIPs)\n+                BOOST_FOREACH(const CNetAddr& ip, vIPs)\n                 {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()));\n@@ -1188,7 +1188,7 @@ void ThreadOpenConnections()\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n+            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-connect\"])\n             {\n                 CAddress addr;\n                 OpenNetworkConnection(addr, NULL, strAddr.c_str());\n@@ -1291,10 +1291,10 @@ void ThreadOpenAddedConnections()\n             list<string> lAddresses(0);\n             {\n                 LOCK(cs_vAddedNodes);\n-                BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n                     lAddresses.push_back(strAddNode);\n             }\n-            BOOST_FOREACH(string& strAddNode, lAddresses) {\n+            BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n                 CAddress addr;\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n@@ -1309,20 +1309,19 @@ void ThreadOpenAddedConnections()\n         list<string> lAddresses(0);\n         {\n             LOCK(cs_vAddedNodes);\n-            BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n                 lAddresses.push_back(strAddNode);\n         }\n \n         list<vector<CService> > lservAddressesToAdd(0);\n-        BOOST_FOREACH(string& strAddNode, lAddresses)\n-        {\n+        BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n             vector<CService> vservNode(0);\n             if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             {\n                 lservAddressesToAdd.push_back(vservNode);\n                 {\n                     LOCK(cs_setservAddNodeAddresses);\n-                    BOOST_FOREACH(CService& serv, vservNode)\n+                    BOOST_FOREACH(const CService& serv, vservNode)\n                         setservAddNodeAddresses.insert(serv);\n                 }\n             }\n@@ -1333,7 +1332,7 @@ void ThreadOpenAddedConnections()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n                 for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n-                    BOOST_FOREACH(CService& addrNode, *(it))\n+                    BOOST_FOREACH(const CService& addrNode, *(it))\n                         if (pnode->addr == addrNode)\n                         {\n                             it = lservAddressesToAdd.erase(it);\n@@ -1906,7 +1905,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n-CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fInboundIn) :\n+CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addrKnown(5000, 0.001, insecure_rand()),\n     setInventoryKnown(SendBufferSize() / 1000)"
      },
      {
        "sha": "938f2376f706699659652b74b4af9a9bdc7c27cb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -63,7 +63,7 @@ static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n \n-void AddOneShot(std::string strDest);\n+void AddOneShot(const std::string& strDest);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const std::string& addrName);\n@@ -321,7 +321,7 @@ class CNode\n     // Whether a ping is requested.\n     bool fPingQueued;\n \n-    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false);\n+    CNode(SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:"
      },
      {
        "sha": "51a8bbb9c4be8e00d06f93871609c6879f61330c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -523,8 +523,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n-    {\n+    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n         uint256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n "
      },
      {
        "sha": "a36831de2ac78e60edf3d3f742ae828c0594da5c",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -253,28 +253,28 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     if (params.size() == 1)\n     {\n         LOCK(cs_vAddedNodes);\n-        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n             laddedNodes.push_back(strAddNode);\n     }\n     else\n     {\n         string strNode = params[1].get_str();\n         LOCK(cs_vAddedNodes);\n-        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes) {\n             if (strAddNode == strNode)\n             {\n                 laddedNodes.push_back(strAddNode);\n                 break;\n             }\n+        }\n         if (laddedNodes.size() == 0)\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n     }\n \n     UniValue ret(UniValue::VARR);\n     if (!fDns)\n     {\n-        BOOST_FOREACH(string& strAddNode, laddedNodes)\n-        {\n+        BOOST_FOREACH (const std::string& strAddNode, laddedNodes) {\n             UniValue obj(UniValue::VOBJ);\n             obj.push_back(Pair(\"addednode\", strAddNode));\n             ret.push_back(obj);\n@@ -283,8 +283,7 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     }\n \n     list<pair<string, vector<CService> > > laddedAddreses(0);\n-    BOOST_FOREACH(string& strAddNode, laddedNodes)\n-    {\n+    BOOST_FOREACH(const std::string& strAddNode, laddedNodes) {\n         vector<CService> vservNode(0);\n         if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n@@ -306,19 +305,19 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n \n         UniValue addresses(UniValue::VARR);\n         bool fConnected = false;\n-        BOOST_FOREACH(CService& addrNode, it->second)\n-        {\n+        BOOST_FOREACH(const CService& addrNode, it->second) {\n             bool fFound = false;\n             UniValue node(UniValue::VOBJ);\n             node.push_back(Pair(\"address\", addrNode.ToString()));\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes) {\n                 if (pnode->addr == addrNode)\n                 {\n                     fFound = true;\n                     fConnected = true;\n                     node.push_back(Pair(\"connected\", pnode->fInbound ? \"inbound\" : \"outbound\"));\n                     break;\n                 }\n+            }\n             if (!fFound)\n                 node.push_back(Pair(\"connected\", \"false\"));\n             addresses.push_back(node);"
      },
      {
        "sha": "e6bf008618287579462e13a65dbed76c0c308bb6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -173,7 +173,7 @@ vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n  * Note: This interface may still be subject to change.\n  */\n \n-string CRPCTable::help(string strCommand) const\n+std::string CRPCTable::help(const std::string& strCommand) const\n {\n     string strRet;\n     string category;\n@@ -391,7 +391,7 @@ CRPCTable::CRPCTable()\n     }\n }\n \n-const CRPCCommand *CRPCTable::operator[](string name) const\n+const CRPCCommand *CRPCTable::operator[](const std::string& name) const\n {\n     map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n     if (it == mapCommands.end())\n@@ -1026,11 +1026,13 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     g_rpcSignals.PostCommand(*pcmd);\n }\n \n-std::string HelpExampleCli(string methodname, string args){\n+std::string HelpExampleCli(const std::string& methodname, const std::string& args)\n+{\n     return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n }\n \n-std::string HelpExampleRpc(string methodname, string args){\n+std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n+{\n     return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n         \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n }"
      },
      {
        "sha": "7b462a8b7954cbcf5de88e5a8156a67b5f99b6cd",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -55,7 +55,7 @@ void StopRPCThreads();\n /** Query whether RPC is running */\n bool IsRPCRunning();\n \n-/** \n+/**\n  * Set the RPC warmup status.  When this is done, all RPC calls will error out\n  * immediately with RPC_IN_WARMUP.\n  */\n@@ -110,8 +110,8 @@ class CRPCTable\n     std::map<std::string, const CRPCCommand*> mapCommands;\n public:\n     CRPCTable();\n-    const CRPCCommand* operator[](std::string name) const;\n-    std::string help(std::string name) const;\n+    const CRPCCommand* operator[](const std::string& name) const;\n+    std::string help(const std::string& name) const;\n \n     /**\n      * Execute a method.\n@@ -142,8 +142,8 @@ extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpRequiringPassphrase();\n-extern std::string HelpExampleCli(std::string methodname, std::string args);\n-extern std::string HelpExampleRpc(std::string methodname, std::string args);\n+extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n+extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n extern void EnsureWalletIsUnlocked();\n "
      },
      {
        "sha": "54239741e2056b9be1a7575baa33fafd7bf567b7",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -61,7 +61,7 @@ class UniValue {\n     bool setObject();\n \n     enum VType getType() const { return typ; }\n-    std::string getValStr() const { return val; }\n+    const std::string& getValStr() const { return val; }\n     bool empty() const { return (values.size() == 0); }\n \n     size_t size() const { return values.size(); }\n@@ -247,4 +247,3 @@ extern const UniValue NullUniValue;\n const UniValue& find_value( const UniValue& obj, const std::string& name);\n \n #endif // BITCOIN_UNIVALUE_UNIVALUE_H\n-"
      },
      {
        "sha": "da5821e530d351628335c145e6565f3a7f16e8ad",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -702,7 +702,7 @@ boost::filesystem::path GetTempPath() {\n #endif\n }\n \n-void runCommand(std::string strCommand)\n+void runCommand(const std::string& strCommand)\n {\n     int nErr = ::system(strCommand.c_str());\n     if (nErr)"
      },
      {
        "sha": "6ec81698ea52729b0c6b3108870b4a4a353b166b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -126,7 +126,7 @@ boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n void ShrinkDebugFile();\n-void runCommand(std::string strCommand);\n+void runCommand(const std::string& strCommand);\n \n inline bool IsSwitchChar(char c)\n {"
      },
      {
        "sha": "7d1de7d6a8710db55711feebbfbc9d1156fd697f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -471,7 +471,7 @@ bool ParseDouble(const std::string& str, double *out)\n     return endp && *endp == 0 && !errno;\n }\n \n-std::string FormatParagraph(const std::string in, size_t width, size_t indent)\n+std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n {\n     std::stringstream out;\n     size_t col = 0;"
      },
      {
        "sha": "58329b51bb8586928a459ad8f40ed2459d85f4fc",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -88,11 +88,11 @@ inline std::string HexStr(const T& vch, bool fSpaces=false)\n     return HexStr(vch.begin(), vch.end(), fSpaces);\n }\n \n-/** \n+/**\n  * Format a paragraph of text to a fixed width, adding spaces for\n  * indentation to any added line.\n  */\n-std::string FormatParagraph(const std::string in, size_t width=79, size_t indent=0);\n+std::string FormatParagraph(const std::string& in, size_t width = 79, size_t indent = 0);\n \n /**\n  * Timing-attack-resistant comparison."
      },
      {
        "sha": "d376f42beb02c9cbf960723d6b3d1d613878b8ad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -2414,7 +2414,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     return ret;\n }\n \n-set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const\n+std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAccount) const\n {\n     LOCK(cs_wallet);\n     set<CTxDestination> result;"
      },
      {
        "sha": "2bedad3fca4dd774d60cc0139582d249359dcdb7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ac95c1bc67726a7d6eecb35d7650eed6c89361/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a9ac95c1bc67726a7d6eecb35d7650eed6c89361",
        "patch": "@@ -496,7 +496,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         SetNull();\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWallet(const std::string& strWalletFileIn)\n     {\n         SetNull();\n \n@@ -645,7 +645,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();\n \n-    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n+    std::set<CTxDestination> GetAccountAddresses(const std::string& strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;"
      }
    ]
  }
]