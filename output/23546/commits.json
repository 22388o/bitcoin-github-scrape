[
  {
    "sha": "fae13c39896898aef2281433af143c22d8b3a3b4",
    "node_id": "C_kwDOABII59oAKGZhZTEzYzM5ODk2ODk4YWVmMjI4MTQzM2FmMTQzYzIyZDhiM2EzYjQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-19T11:31:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-19T11:40:13Z"
      },
      "message": "doc: Use clang-tidy comments in crypto_tests\n\nAlso, fix argument name for FastRandomContext.",
      "tree": {
        "sha": "5f9f7797745cca1f8ae152ca131a0308162bb3dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9f7797745cca1f8ae152ca131a0308162bb3dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae13c39896898aef2281433af143c22d8b3a3b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjCkQwAwMQrAMjTUzEay0mjlTddBe6zW1aljcGrpr67OHn2Pv62t/xW94/UEfAm\n43nUk9lSlxjRmhX3iKvTyMJOE9k0UCP/1mCHznMSeUm/Ib+LiKoY2sVl6a5c8M/t\n40D8CIvQIqEEHXWRS2pNLA79gOxXzMjAH06TBEL2ejpPgnoFtqG8bpc39yc2t5AA\nHHkD3plvrUrYmcCAaiTYlgO+vjxeA9brwXG2La3S0DKiE0D5lZ1LC/gvGa2K2/X8\n4/gRSZTiqd71cA74PRQjtd9/8GGKsEmzEJOj0rQ+cjvSabMM2FCNQw1p7h0E6FDR\nmMb7/Gp1PKXBM0/4J9owzyxC7z8a3aI6C5irRZVkLJcHS7C2Lzp4s7PzLadf3YEm\n/WgrMxoQ3MzlhMU7BTwfomgCIZRq+SztKfw5nspVdRDlOp3yxMohsFgDmayS8b+B\nmh1jk2DJwd+JJfoH6voZNacLloHhfJZWwWudO4xHNbV0ec2yp+u5J8cMoJu7eb8d\n0+ksGil1\n=i2Sf\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f9f7797745cca1f8ae152ca131a0308162bb3dd\nparent fe03f7a37fd0ef05149161f6b95a25493e1fe38f\nauthor MarcoFalke <falke.marco@gmail.com> 1637321463 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637322013 +0100\n\ndoc: Use clang-tidy comments in crypto_tests\n\nAlso, fix argument name for FastRandomContext.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae13c39896898aef2281433af143c22d8b3a3b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae13c39896898aef2281433af143c22d8b3a3b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae13c39896898aef2281433af143c22d8b3a3b4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe03f7a37fd0ef05149161f6b95a25493e1fe38f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cbdedd1b85b8e7caaa28f1f6b70b37be3ef77986",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae13c39896898aef2281433af143c22d8b3a3b4/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae13c39896898aef2281433af143c22d8b3a3b4/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=fae13c39896898aef2281433af143c22d8b3a3b4",
        "patch": "@@ -574,10 +574,10 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n {\n     // Use rfc5869 test vectors but truncated to 32 bytes (our implementation only support length 32)\n     TestHKDF_SHA256_32(\n-                /* IKM */ \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n-                /* salt */ \"000102030405060708090a0b0c\",\n-                /* info */ \"f0f1f2f3f4f5f6f7f8f9\",\n-                /* expected OKM */ \"3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf\");\n+                /*ikm_hex=*/\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                /*salt_hex=*/\"000102030405060708090a0b0c\",\n+                /*info_hex=*/\"f0f1f2f3f4f5f6f7f8f9\",\n+                /*okm_check_hex=*/\"3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf\");\n     TestHKDF_SHA256_32(\n                 \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f\",\n                 \"606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf\","
      },
      {
        "sha": "4f2ccb6ebb57902465e8dd67c4c28189437a2e44",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae13c39896898aef2281433af143c22d8b3a3b4/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae13c39896898aef2281433af143c22d8b3a3b4/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=fae13c39896898aef2281433af143c22d8b3a3b4",
        "patch": "@@ -56,7 +56,7 @@ void Seed(FastRandomContext& ctx);\n static inline void SeedInsecureRand(SeedRand seed = SeedRand::SEED)\n {\n     if (seed == SeedRand::ZEROS) {\n-        g_insecure_rand_ctx = FastRandomContext(/* deterministic */ true);\n+        g_insecure_rand_ctx = FastRandomContext(/*fDeterministic=*/true);\n     } else {\n         Seed(g_insecure_rand_ctx);\n     }"
      }
    ]
  },
  {
    "sha": "fa00447442f22a24e5ca5fc538d0bf7bef575544",
    "node_id": "C_kwDOABII59oAKGZhMDA0NDc0NDJmMjJhMjRlNWNhNWZjNTM4ZDBiZjdiZWY1NzU1NDQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-14T14:56:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-19T11:41:47Z"
      },
      "message": "scripted-diff: Use clang-tidy syntax for C++ named arguments\n\n-BEGIN VERIFY SCRIPT-\n perl -0777 -pi -e 's:((\\(|\\{|,)(\\n| )*)\\/\\* ?([^=* ]+) ?\\*\\/ ?:\\1/*\\4=*/:g' $( git ls-files ./src/test ./src/wallet/test )\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4c8b89c07de60c29b5fa765be4c96067b0f42a12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c8b89c07de60c29b5fa765be4c96067b0f42a12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj3TQwAuHoKf+kvB/kdqdSoej5Pt0JeGKtq8EpCw6an6v7NbZNGguMRLFwZB1go\nHCBYMeKIzJuvoaDE+gw7ce56AwlKLi0GvUdXh+JoZD7mjnTKJ4FitduwfAeb7pPD\nGfjXimL+Ofg7Xx7bP2GD5SJeE0mrt6/k/LOpWvG+4tSuE5VSo6fF/L5tsMfBdkk9\nfM7WEV31ahnIi8wfyf+W+AwhCABakYq3klmvkVBi0jKrIUi96dtGWUtRkMf4djan\nsREKh2aQjcwLNf0xYg3m98boH82KGpOmojXkFZONe8uKfQqdOp2N97VMNW0BM0Eq\nhP90JFrexhv4SXkOnVwokRlHnZ3h3chcV+JfqRdLCzwfeJ5/Svie0aOTxsPa30w6\nqgF3HLTHNbp+bJ4uIwAMdGqe/3Qr1w68Xi8pS+97qFsJf0iJOqwwXVjmfSkBqtBk\n2jg/hsC5sl5JuW+2eEV+thGjnaWwPW7Gk4p3qRj8HH03R2BEuQxcxP4Ihho/Nd59\nFV15ZkzV\n=j0mA\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c8b89c07de60c29b5fa765be4c96067b0f42a12\nparent fae13c39896898aef2281433af143c22d8b3a3b4\nauthor MarcoFalke <falke.marco@gmail.com> 1631631394 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637322107 +0100\n\nscripted-diff: Use clang-tidy syntax for C++ named arguments\n\n-BEGIN VERIFY SCRIPT-\n perl -0777 -pi -e 's:((\\(|\\{|,)(\\n| )*)\\/\\* ?([^=* ]+) ?\\*\\/ ?:\\1/*\\4=*/:g' $( git ls-files ./src/test ./src/wallet/test )\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa00447442f22a24e5ca5fc538d0bf7bef575544",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae13c39896898aef2281433af143c22d8b3a3b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae13c39896898aef2281433af143c22d8b3a3b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae13c39896898aef2281433af143c22d8b3a3b4"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 165,
      "deletions": 165
    },
    "files": [
      {
        "sha": "31f30d0379475930b9869cfea02c1ceaf97cacf5",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -26,7 +26,7 @@ class AddrManTest : public AddrMan\n {\n public:\n     explicit AddrManTest(std::vector<bool> asmap = std::vector<bool>())\n-        : AddrMan(asmap, /*deterministic=*/true, /* consistency_check_ratio */ 100)\n+        : AddrMan(asmap, /*deterministic=*/true, /*consistency_check_ratio=*/100)\n     {}\n \n     AddrInfo* Find(const CService& addr)\n@@ -376,7 +376,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test: Sanity check, GetAddr should never return anything if addrman\n     //  is empty.\n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n-    std::vector<CAddress> vAddr1 = addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt);\n+    std::vector<CAddress> vAddr1 = addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt);\n     BOOST_CHECK_EQUAL(vAddr1.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n@@ -396,15 +396,15 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n     BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n     addrman.Good(CAddress(addr1, NODE_NONE));\n     addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n@@ -419,7 +419,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n         if (i % 8 == 0)\n             addrman.Good(addr);\n     }\n-    std::vector<CAddress> vAddr = addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt);\n+    std::vector<CAddress> vAddr = addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt);\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK_EQUAL(vAddr.size(), percent23);\n@@ -973,7 +973,7 @@ BOOST_AUTO_TEST_CASE(load_addrman)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrman);\n     bool exceptionThrown = false;\n-    AddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman1(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/100);\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -990,7 +990,7 @@ BOOST_AUTO_TEST_CASE(load_addrman)\n     // Test that ReadFromStream creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrman);\n \n-    AddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman2(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/100);\n     BOOST_CHECK(addrman2.size() == 0);\n     ReadFromStream(addrman2, ssPeers2);\n     BOOST_CHECK(addrman2.size() == 3);\n@@ -1028,7 +1028,7 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     // Test that the de-serialization of corrupted peers.dat throws an exception.\n     CDataStream ssPeers1 = MakeCorruptPeersDat();\n     bool exceptionThrown = false;\n-    AddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman1(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/100);\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -1044,7 +1044,7 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     // Test that ReadFromStream fails if peers.dat is corrupt\n     CDataStream ssPeers2 = MakeCorruptPeersDat();\n \n-    AddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman2(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }"
      },
      {
        "sha": "91218511bdde03014f031153d779f4ed35517dae",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -269,7 +269,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     CCoinsViewTest base;\n     SimulationTest(&base, false);\n \n-    CCoinsViewDB db_base{\"test\", /*nCacheSize*/ 1 << 23, /*fMemory*/ true, /*fWipe*/ false};\n+    CCoinsViewDB db_base{\"test\", /*nCacheSize=*/1 << 23, /*fMemory=*/true, /*fWipe=*/false};\n     SimulationTest(&db_base, true);\n }\n "
      },
      {
        "sha": "166252959457e54afd4b14c6b21b306d2f6b4ef5",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -213,13 +213,13 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     banman->ClearBanned();\n     nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /*nKeyedNetGroupIn=*/0,\n-                         /*nLocalHostNonceIn */ 0, CAddress(), /*addrNameIn=*/\"\",\n+                         /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[0]);\n     nodes[0]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[0]);\n-    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /*message=*/\"\"); // Should be discouraged\n     {\n         LOCK(nodes[0]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n@@ -229,13 +229,13 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n     nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /*nKeyedNetGroupIn=*/1,\n-                         /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n+                         /*nLocalHostNonceIn=*/1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[1]);\n     nodes[1]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[1]);\n-    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /*message=*/\"\");\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n@@ -246,7 +246,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     // [1] is not discouraged/disconnected yet.\n     BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n     BOOST_CHECK(!nodes[1]->fDisconnect);\n-    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /*message=*/\"\"); // [1] reaches discouragement threshold\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n@@ -260,13 +260,13 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     // Make sure non-IP peers are discouraged and disconnected properly.\n \n     nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /*nKeyedNetGroupIn=*/1,\n-                         /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n+                         /*nLocalHostNonceIn=*/1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n     nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[2]);\n     nodes[2]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[2]);\n-    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n+    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /*message=*/\"\");\n     {\n         LOCK(nodes[2]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n@@ -302,7 +302,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.fSuccessfullyConnected = true;\n \n-    peerLogic->Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n+    peerLogic->Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD, /*message=*/\"\");\n     {\n         LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n@@ -334,7 +334,7 @@ static void MakeNewKeyWithFastRandomContext(CKey& key)\n {\n     std::vector<unsigned char> keydata;\n     keydata = g_insecure_rand_ctx.randbytes(32);\n-    key.Set(keydata.data(), keydata.data() + keydata.size(), /*fCompressedIn*/ true);\n+    key.Set(keydata.data(), keydata.data() + keydata.size(), /*fCompressedIn=*/true);\n     assert(key.IsValid());\n }\n "
      },
      {
        "sha": "9c85c20e2b7aa97ff1956cbea86a0007da809460",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -29,7 +29,7 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    AddrMan addr_man(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addr_man(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/0);\n     try {\n         ReadFromStream(addr_man, data_stream);\n     } catch (const std::exception&) {\n@@ -113,7 +113,7 @@ class AddrManDeterministic : public AddrMan\n {\n public:\n     explicit AddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n-        : AddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n+        : AddrMan(std::move(asmap), /*deterministic=*/true, /*consistency_check_ratio=*/0)\n     {\n         WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n     }\n@@ -286,9 +286,9 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n     }\n     const AddrMan& const_addr_man{addr_man};\n     (void)const_addr_man.GetAddr(\n-        /* max_addresses */ fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n-        /* max_pct */ fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n-        /* network */ std::nullopt);\n+        /*max_addresses=*/fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n+        /*max_pct=*/fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n+        /*network=*/std::nullopt);\n     (void)const_addr_man.Select(fuzzed_data_provider.ConsumeBool());\n     (void)const_addr_man.size();\n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "b2969ecdc00384ea4c38c36d5cc954a7f9359043",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -58,7 +58,7 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     }\n \n     {\n-        BanMan ban_man{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ ConsumeBanTimeOffset(fuzzed_data_provider)};\n+        BanMan ban_man{banlist_file, /*client_interface=*/nullptr, /*default_ban_time=*/ConsumeBanTimeOffset(fuzzed_data_provider)};\n         // The complexity is O(N^2), where N is the input size, because each call\n         // might call DumpBanlist (or other methods that are at least linear\n         // complexity of the input size).\n@@ -105,7 +105,7 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n             SetMockTime(ConsumeTime(fuzzed_data_provider));\n             banmap_t banmap;\n             ban_man.GetBanned(banmap);\n-            BanMan ban_man_read{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ 0};\n+            BanMan ban_man_read{banlist_file, /*client_interface=*/nullptr, /*default_ban_time=*/0};\n             banmap_t banmap_read;\n             ban_man_read.GetBanned(banmap_read);\n             assert(banmap == banmap_read);"
      },
      {
        "sha": "b8f4ad8d94e65b03dea14533dd9734da2b1cc4ce",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    AddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addrman(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/0);\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);\n@@ -69,15 +69,15 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             },\n             [&] {\n                 (void)connman.GetAddresses(\n-                    /* max_addresses */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n-                    /* max_pct */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n-                    /* network */ std::nullopt);\n+                    /*max_addresses=*/fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /*max_pct=*/fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /*network=*/std::nullopt);\n             },\n             [&] {\n                 (void)connman.GetAddresses(\n-                    /* requestor */ random_node,\n-                    /* max_addresses */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n-                    /* max_pct */ fuzzed_data_provider.ConsumeIntegral<size_t>());\n+                    /*requestor=*/random_node,\n+                    /*max_addresses=*/fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /*max_pct=*/fuzzed_data_provider.ConsumeIntegral<size_t>());\n             },\n             [&] {\n                 (void)connman.GetDeterministicRandomizer(fuzzed_data_provider.ConsumeIntegral<uint64_t>());"
      },
      {
        "sha": "48574d71cca42ea5be89c2d1532d4ce2ed5e34c0",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -189,7 +189,7 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    AddrMan am(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan am(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/0);\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      },
      {
        "sha": "64031fde42b6f61ab756886f98054ea82a7c59d0",
        "filename": "src/test/fuzz/node_eviction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/node_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/node_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/node_eviction.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -20,18 +20,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000) {\n         eviction_candidates.push_back({\n-            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            /* m_min_ping_time */ std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int64_t>()},\n-            /* nLastBlockTime */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            /* nLastTXTime */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            /* fRelevantServices */ fuzzed_data_provider.ConsumeBool(),\n-            /* fRelayTxes */ fuzzed_data_provider.ConsumeBool(),\n-            /* fBloomFilter */ fuzzed_data_provider.ConsumeBool(),\n-            /* nKeyedNetGroup */ fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            /* prefer_evict */ fuzzed_data_provider.ConsumeBool(),\n-            /* m_is_local */ fuzzed_data_provider.ConsumeBool(),\n-            /* m_network */ fuzzed_data_provider.PickValueInArray(ALL_NETWORKS),\n+            /*id=*/fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /*nTimeConnected=*/fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /*m_min_ping_time=*/std::chrono::microseconds{fuzzed_data_provider.ConsumeIntegral<int64_t>()},\n+            /*nLastBlockTime=*/fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /*nLastTXTime=*/fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n+            /*fRelevantServices=*/fuzzed_data_provider.ConsumeBool(),\n+            /*fRelayTxes=*/fuzzed_data_provider.ConsumeBool(),\n+            /*fBloomFilter=*/fuzzed_data_provider.ConsumeBool(),\n+            /*nKeyedNetGroup=*/fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+            /*prefer_evict=*/fuzzed_data_provider.ConsumeBool(),\n+            /*m_is_local=*/fuzzed_data_provider.ConsumeBool(),\n+            /*m_network=*/fuzzed_data_provider.PickValueInArray(ALL_NETWORKS),\n         });\n     }\n     // Make a copy since eviction_candidates may be in some valid but otherwise"
      },
      {
        "sha": "e4d95f72a074133d70fe1f32d34ab1b01fbce349",
        "filename": "src/test/fuzz/policy_estimator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/policy_estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/policy_estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/policy_estimator.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -35,7 +35,7 @@ FUZZ_TARGET_INIT(policy_estimator, initialize_policy_estimator)\n                 const CTransaction tx{*mtx};\n                 block_policy_estimator.processTransaction(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx), fuzzed_data_provider.ConsumeBool());\n                 if (fuzzed_data_provider.ConsumeBool()) {\n-                    (void)block_policy_estimator.removeTx(tx.GetHash(), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n+                    (void)block_policy_estimator.removeTx(tx.GetHash(), /*inBlock=*/fuzzed_data_provider.ConsumeBool());\n                 }\n             },\n             [&] {\n@@ -56,7 +56,7 @@ FUZZ_TARGET_INIT(policy_estimator, initialize_policy_estimator)\n                 block_policy_estimator.processBlock(fuzzed_data_provider.ConsumeIntegral<unsigned int>(), ptrs);\n             },\n             [&] {\n-                (void)block_policy_estimator.removeTx(ConsumeUInt256(fuzzed_data_provider), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n+                (void)block_policy_estimator.removeTx(ConsumeUInt256(fuzzed_data_provider), /*inBlock=*/fuzzed_data_provider.ConsumeBool());\n             },\n             [&] {\n                 block_policy_estimator.FlushUnconfirmed();"
      },
      {
        "sha": "94a71859e9d8cb04fcdf992d6591a76f3e83b687",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -83,7 +83,7 @@ void fuzz_target(FuzzBufferType buffer, const std::string& LIMIT_TO_MESSAGE_TYPE\n     p2p_node.fSuccessfullyConnected = successfully_connected;\n     connman.AddTestNode(p2p_node);\n     g_setup->m_node.peerman->InitializeNode(&p2p_node);\n-    FillNode(fuzzed_data_provider, p2p_node, /* init_version */ successfully_connected);\n+    FillNode(fuzzed_data_provider, p2p_node, /*init_version=*/successfully_connected);\n \n     const auto mock_time = ConsumeTime(fuzzed_data_provider);\n     SetMockTime(mock_time);"
      },
      {
        "sha": "21a959315e804e5ebb3091514ce2d1d0e97fa326",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -50,7 +50,7 @@ FUZZ_TARGET_INIT(process_messages, initialize_process_messages)\n         p2p_node.fSuccessfullyConnected = successfully_connected;\n         p2p_node.fPauseSend = false;\n         g_setup->m_node.peerman->InitializeNode(&p2p_node);\n-        FillNode(fuzzed_data_provider, p2p_node, /* init_version */ successfully_connected);\n+        FillNode(fuzzed_data_provider, p2p_node, /*init_version=*/successfully_connected);\n \n         connman.AddTestNode(p2p_node);\n     }"
      },
      {
        "sha": "eb170aab76b5d348255351e22ca0d1d9dff17e6e",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -164,7 +164,7 @@ FUZZ_TARGET_INIT(script, initialize_script)\n         const std::string encoded_dest{EncodeDestination(tx_destination_1)};\n         const UniValue json_dest{DescribeAddress(tx_destination_1)};\n         Assert(tx_destination_1 == DecodeDestination(encoded_dest));\n-        (void)GetKeyForDestination(/* store */ {}, tx_destination_1);\n+        (void)GetKeyForDestination(/*store=*/{}, tx_destination_1);\n         const CScript dest{GetScriptForDestination(tx_destination_1)};\n         const bool valid{IsValidDestination(tx_destination_1)};\n         Assert(dest.empty() != valid);"
      },
      {
        "sha": "4669f783aa00b6005964d766208d19cdef4a350f",
        "filename": "src/test/fuzz/script_assets_test_minimizer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/script_assets_test_minimizer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/script_assets_test_minimizer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_assets_test_minimizer.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -190,7 +190,7 @@ void test_init()\n     static ECCVerifyHandle handle;\n }\n \n-FUZZ_TARGET_INIT_HIDDEN(script_assets_test_minimizer, test_init, /* hidden */ true)\n+FUZZ_TARGET_INIT_HIDDEN(script_assets_test_minimizer, test_init, /*hidden=*/true)\n {\n     if (buffer.size() < 2 || buffer.back() != '\\n' || buffer[buffer.size() - 2] != ',') return;\n     const std::string str((const char*)buffer.data(), buffer.size() - 2);"
      },
      {
        "sha": "8b6ca42a6e556dc6ab584b7d9625f71a14e3b819",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -103,6 +103,6 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);\n-    TxToUniv(tx, /* hashBlock */ uint256::ZERO, u);\n-    TxToUniv(tx, /* hashBlock */ uint256::ONE, u);\n+    TxToUniv(tx, /*hashBlock=*/uint256::ZERO, u);\n+    TxToUniv(tx, /*hashBlock=*/uint256::ONE, u);\n }"
      },
      {
        "sha": "bf66fcef413dabf0f41ce954165e899b33dfd1fd",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -85,7 +85,7 @@ void Finish(FuzzedDataProvider& fuzzed_data_provider, MockedTxPool& tx_pool, CCh\n     {\n         BlockAssembler::Options options;\n         options.nBlockMaxWeight = fuzzed_data_provider.ConsumeIntegralInRange(0U, MAX_BLOCK_WEIGHT);\n-        options.blockMinFeeRate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /* max */ COIN)};\n+        options.blockMinFeeRate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n         auto assembler = BlockAssembler{chainstate, *static_cast<CTxMemPool*>(&tx_pool), ::Params(), options};\n         auto block_template = assembler.CreateNewBlock(CScript{} << OP_TRUE);\n         Assert(block_template->block.vtx.size() >= 1);\n@@ -131,7 +131,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n     // The sum of the values of all spendable outpoints\n     constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n \n-    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    CTxMemPool tx_pool_{/*estimator=*/nullptr, /*check_ratio=*/1};\n     MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(&tx_pool_);\n \n     // Helper to query an amount\n@@ -267,10 +267,10 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n             // Outpoints that no longer count toward the total supply\n             std::set<COutPoint> consumed_supply;\n             for (const auto& removed_tx : removed) {\n-                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+                insert_tx(/*created_by_tx=*/{consumed_erased}, /*consumed_by_tx=*/{outpoints_supply}, /*tx=*/*removed_tx);\n             }\n             for (const auto& added_tx : added) {\n-                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+                insert_tx(/*created_by_tx=*/{outpoints_supply, outpoints_rbf}, /*consumed_by_tx=*/{consumed_supply}, /*tx=*/*added_tx);\n             }\n             for (const auto& p : consumed_erased) {\n                 Assert(outpoints_supply.erase(p) == 1);\n@@ -303,7 +303,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n         txids.push_back(ConsumeUInt256(fuzzed_data_provider));\n     }\n \n-    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    CTxMemPool tx_pool_{/*estimator=*/nullptr, /*check_ratio=*/1};\n     MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(&tx_pool_);\n \n     LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)"
      },
      {
        "sha": "02039cba81a75eddc38d33e9e5dde7abfec054e8",
        "filename": "src/test/fuzz/utxo_snapshot.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/utxo_snapshot.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/fuzz/utxo_snapshot.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/utxo_snapshot.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -49,7 +49,7 @@ FUZZ_TARGET_INIT(utxo_snapshot, initialize_chain)\n         } catch (const std::ios_base::failure&) {\n             return false;\n         }\n-        return chainman.ActivateSnapshot(infile, metadata, /* in_memory */ true);\n+        return chainman.ActivateSnapshot(infile, metadata, /*in_memory=*/true);\n     }};\n \n     if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "005752d508fc205d7b536271c563ce2965904e5a",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -602,7 +602,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //\n     // [tx1]\n     //\n-    CTransactionRef tx1 = make_tx(/* output_values */ {10 * COIN});\n+    CTransactionRef tx1 = make_tx(/*output_values=*/{10 * COIN});\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n \n     // Ancestors / descendants should be 1 / 1 (itself / itself)\n@@ -614,7 +614,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //\n     // [tx1].0 <- [tx2]\n     //\n-    CTransactionRef tx2 = make_tx(/* output_values */ {495 * CENT, 5 * COIN}, /* inputs */ {tx1});\n+    CTransactionRef tx2 = make_tx(/*output_values=*/{495 * CENT, 5 * COIN}, /*inputs=*/{tx1});\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx2));\n \n     // Ancestors / descendants should be:\n@@ -633,7 +633,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //\n     // [tx1].0 <- [tx2].0 <- [tx3]\n     //\n-    CTransactionRef tx3 = make_tx(/* output_values */ {290 * CENT, 200 * CENT}, /* inputs */ {tx2});\n+    CTransactionRef tx3 = make_tx(/*output_values=*/{290 * CENT, 200 * CENT}, /*inputs=*/{tx2});\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx3));\n \n     // Ancestors / descendants should be:\n@@ -658,7 +658,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //              |\n     //              \\---1 <- [tx4]\n     //\n-    CTransactionRef tx4 = make_tx(/* output_values */ {290 * CENT, 250 * CENT}, /* inputs */ {tx2}, /* input_indices */ {1});\n+    CTransactionRef tx4 = make_tx(/*output_values=*/{290 * CENT, 250 * CENT}, /*inputs=*/{tx2}, /*input_indices=*/{1});\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx4));\n \n     // Ancestors / descendants should be:\n@@ -694,14 +694,14 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     CAmount v = 5 * COIN;\n     for (uint64_t i = 0; i < 5; i++) {\n         CTransactionRef& tyi = *ty[i];\n-        tyi = make_tx(/* output_values */ {v}, /* inputs */ i > 0 ? std::vector<CTransactionRef>{*ty[i - 1]} : std::vector<CTransactionRef>{});\n+        tyi = make_tx(/*output_values=*/{v}, /*inputs=*/i > 0 ? std::vector<CTransactionRef>{*ty[i - 1]} : std::vector<CTransactionRef>{});\n         v -= 50 * CENT;\n         pool.addUnchecked(entry.Fee(10000LL).FromTx(tyi));\n         pool.GetTransactionAncestry(tyi->GetHash(), ancestors, descendants);\n         BOOST_CHECK_EQUAL(ancestors, i+1);\n         BOOST_CHECK_EQUAL(descendants, i+1);\n     }\n-    CTransactionRef ty6 = make_tx(/* output_values */ {5 * COIN}, /* inputs */ {tx3, ty5});\n+    CTransactionRef ty6 = make_tx(/*output_values=*/{5 * COIN}, /*inputs=*/{tx3, ty5});\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(ty6));\n \n     // Ancestors / descendants should be:\n@@ -755,10 +755,10 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //            \\---1 <- [tc].0 --<--/\n     //\n     CTransactionRef ta, tb, tc, td;\n-    ta = make_tx(/* output_values */ {10 * COIN});\n-    tb = make_tx(/* output_values */ {5 * COIN, 3 * COIN}, /* inputs */  {ta});\n-    tc = make_tx(/* output_values */ {2 * COIN}, /* inputs */ {tb}, /* input_indices */ {1});\n-    td = make_tx(/* output_values */ {6 * COIN}, /* inputs */ {tb, tc}, /* input_indices */ {0, 0});\n+    ta = make_tx(/*output_values=*/{10 * COIN});\n+    tb = make_tx(/*output_values=*/{5 * COIN, 3 * COIN}, /*inputs=*/ {ta});\n+    tc = make_tx(/*output_values=*/{2 * COIN}, /*inputs=*/{tb}, /*input_indices=*/{1});\n+    td = make_tx(/*output_values=*/{6 * COIN}, /*inputs=*/{tb, tc}, /*input_indices=*/{0, 0});\n     pool.clear();\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(ta));\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tb));"
      },
      {
        "sha": "9470ed814d16e2dd9c968b53041d2bf05efca2bb",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -72,8 +72,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5},\n-        /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 4, 5},\n+        /*unprotected_peer_ids=*/{6, 7, 8, 9, 10, 11},\n         random_context));\n \n     // Verify in the opposite direction.\n@@ -83,8 +83,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = NET_IPV6;\n         },\n-        /* protected_peer_ids */ {6, 7, 8, 9, 10, 11},\n-        /* unprotected_peer_ids */ {0, 1, 2, 3, 4, 5},\n+        /*protected_peer_ids=*/{6, 7, 8, 9, 10, 11},\n+        /*unprotected_peer_ids=*/{0, 1, 2, 3, 4, 5},\n         random_context));\n \n     // Test protection of onion, localhost, and I2P peers...\n@@ -96,8 +96,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = (c.id == 3 || c.id == 8 || c.id == 9) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {3, 8, 9},\n-        /* unprotected_peer_ids */ {},\n+        /*protected_peer_ids=*/{3, 8, 9},\n+        /*unprotected_peer_ids=*/{},\n         random_context));\n \n     // Expect 1/4 onion peers and 1/4 of the other peers to be protected,\n@@ -108,8 +108,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = (c.id == 3 || c.id > 7) ? NET_ONION : NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 8, 9},\n-        /* unprotected_peer_ids */ {4, 5, 6, 7, 10, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 8, 9},\n+        /*unprotected_peer_ids=*/{4, 5, 6, 7, 10, 11},\n         random_context));\n \n     // Expect 1/4 localhost peers to be protected from eviction,\n@@ -119,8 +119,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 1 || c.id == 9 || c.id == 11);\n             c.m_network = NET_IPV4;\n         },\n-        /* protected_peer_ids */ {1, 9, 11},\n-        /* unprotected_peer_ids */ {},\n+        /*protected_peer_ids=*/{1, 9, 11},\n+        /*unprotected_peer_ids=*/{},\n         random_context));\n \n     // Expect 1/4 localhost peers and 1/4 of the other peers to be protected,\n@@ -131,8 +131,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id > 6);\n             c.m_network = NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 7, 8, 9},\n-        /* unprotected_peer_ids */ {3, 4, 5, 6, 10, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 7, 8, 9},\n+        /*unprotected_peer_ids=*/{3, 4, 5, 6, 10, 11},\n         random_context));\n \n     // Expect 1/4 I2P peers to be protected from eviction,\n@@ -142,8 +142,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = (c.id == 2 || c.id == 7 || c.id == 10) ? NET_I2P : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {2, 7, 10},\n-        /* unprotected_peer_ids */ {},\n+        /*protected_peer_ids=*/{2, 7, 10},\n+        /*unprotected_peer_ids=*/{},\n         random_context));\n \n     // Expect 1/4 I2P peers and 1/4 of the other peers to be protected,\n@@ -154,8 +154,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = false;\n             c.m_network = (c.id == 4 || c.id > 8) ? NET_I2P : NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 4, 9, 10},\n-        /* unprotected_peer_ids */ {3, 5, 6, 7, 8, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 4, 9, 10},\n+        /*unprotected_peer_ids=*/{3, 5, 6, 7, 8, 11},\n         random_context));\n \n     // Tests with 2 networks...\n@@ -169,8 +169,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 4);\n             c.m_network = (c.id == 3) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 4},\n-        /* unprotected_peer_ids */ {1, 2},\n+        /*protected_peer_ids=*/{0, 4},\n+        /*unprotected_peer_ids=*/{1, 2},\n         random_context));\n \n     // Combined test: expect having 1 localhost and 1 onion peer out of 7 to\n@@ -182,8 +182,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 6);\n             c.m_network = (c.id == 5) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 1, 6},\n-        /* unprotected_peer_ids */ {2, 3, 4, 5},\n+        /*protected_peer_ids=*/{0, 1, 6},\n+        /*unprotected_peer_ids=*/{2, 3, 4, 5},\n         random_context));\n \n     // Combined test: expect having 1 localhost and 1 onion peer out of 8 to\n@@ -195,8 +195,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 6);\n             c.m_network = (c.id == 5) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 1, 5, 6},\n-        /* unprotected_peer_ids */ {2, 3, 4, 7},\n+        /*protected_peer_ids=*/{0, 1, 5, 6},\n+        /*unprotected_peer_ids=*/{2, 3, 4, 7},\n         random_context));\n \n     // Combined test: expect having 3 localhost and 3 onion peers out of 12 to\n@@ -208,8 +208,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 6 || c.id == 9 || c.id == 11);\n             c.m_network = (c.id == 7 || c.id == 8 || c.id == 10) ? NET_ONION : NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 6, 7, 9},\n-        /* unprotected_peer_ids */ {3, 4, 5, 8, 10, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 6, 7, 9},\n+        /*unprotected_peer_ids=*/{3, 4, 5, 8, 10, 11},\n         random_context));\n \n     // Combined test: expect having 4 localhost and 1 onion peer out of 12 to\n@@ -220,8 +220,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id > 4 && c.id < 9);\n             c.m_network = (c.id == 10) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 5, 6, 10},\n-        /* unprotected_peer_ids */ {3, 4, 7, 8, 9, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 5, 6, 10},\n+        /*unprotected_peer_ids=*/{3, 4, 7, 8, 9, 11},\n         random_context));\n \n     // Combined test: expect having 4 localhost and 2 onion peers out of 16 to\n@@ -232,8 +232,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 6 || c.id == 9 || c.id == 11 || c.id == 12);\n             c.m_network = (c.id == 8 || c.id == 10) ? NET_ONION : NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 6, 8, 9, 10},\n-        /* unprotected_peer_ids */ {4, 5, 7, 11, 12, 13, 14, 15},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 6, 8, 9, 10},\n+        /*unprotected_peer_ids=*/{4, 5, 7, 11, 12, 13, 14, 15},\n         random_context));\n \n     // Combined test: expect having 5 localhost and 1 onion peer out of 16 to\n@@ -245,8 +245,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id > 10);\n             c.m_network = (c.id == 10) ? NET_ONION : NET_IPV4;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 10, 11, 12, 13},\n-        /* unprotected_peer_ids */ {4, 5, 6, 7, 8, 9, 14, 15},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 10, 11, 12, 13},\n+        /*unprotected_peer_ids=*/{4, 5, 6, 7, 8, 9, 14, 15},\n         random_context));\n \n     // Combined test: expect having 1 localhost and 4 onion peers out of 16 to\n@@ -258,8 +258,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n             c.m_is_local = (c.id == 15);\n             c.m_network = (c.id > 6 && c.id < 11) ? NET_ONION : NET_IPV6;\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 7, 8, 9, 15},\n-        /* unprotected_peer_ids */ {5, 6, 10, 11, 12, 13, 14},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 7, 8, 9, 15},\n+        /*unprotected_peer_ids=*/{5, 6, 10, 11, 12, 13, 14},\n         random_context));\n \n     // Combined test: expect having 2 onion and 4 I2P out of 12 peers to protect\n@@ -277,8 +277,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV4;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 6, 8, 10},\n-        /* unprotected_peer_ids */ {3, 4, 5, 7, 9, 11},\n+        /*protected_peer_ids=*/{0, 1, 2, 6, 8, 10},\n+        /*unprotected_peer_ids=*/{3, 4, 5, 7, 9, 11},\n         random_context));\n \n     // Tests with 3 networks...\n@@ -298,8 +298,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV6;\n             }\n         },\n-        /* protected_peer_ids */ {0, 4},\n-        /* unprotected_peer_ids */ {1, 2},\n+        /*protected_peer_ids=*/{0, 4},\n+        /*unprotected_peer_ids=*/{1, 2},\n         random_context));\n \n     // Combined test: expect having 1 localhost, 1 I2P and 1 onion peer out of 7\n@@ -317,8 +317,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV6;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 6},\n-        /* unprotected_peer_ids */ {2, 3, 4, 5},\n+        /*protected_peer_ids=*/{0, 1, 6},\n+        /*unprotected_peer_ids=*/{2, 3, 4, 5},\n         random_context));\n \n     // Combined test: expect having 1 localhost, 1 I2P and 1 onion peer out of 8\n@@ -336,8 +336,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV6;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 5, 6},\n-        /* unprotected_peer_ids */ {2, 3, 4, 7},\n+        /*protected_peer_ids=*/{0, 1, 5, 6},\n+        /*unprotected_peer_ids=*/{2, 3, 4, 7},\n         random_context));\n \n     // Combined test: expect having 4 localhost, 2 I2P, and 2 onion peers out of\n@@ -355,8 +355,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV4;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 6, 7, 9, 11},\n-        /* unprotected_peer_ids */ {4, 5, 8, 10, 12, 13, 14, 15},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 6, 7, 9, 11},\n+        /*unprotected_peer_ids=*/{4, 5, 8, 10, 12, 13, 14, 15},\n         random_context));\n \n     // Combined test: expect having 1 localhost, 8 I2P and 1 onion peer out of\n@@ -374,8 +374,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV6;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5, 12, 15, 16, 17, 18, 23},\n-        /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11, 13, 14, 19, 20, 21, 22},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 4, 5, 12, 15, 16, 17, 18, 23},\n+        /*unprotected_peer_ids=*/{6, 7, 8, 9, 10, 11, 13, 14, 19, 20, 21, 22},\n         random_context));\n \n     // Combined test: expect having 1 localhost, 3 I2P and 6 onion peers out of\n@@ -393,8 +393,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV4;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5, 12, 14, 15, 17, 18, 19},\n-        /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11, 13, 16, 20, 21, 22, 23},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 4, 5, 12, 14, 15, 17, 18, 19},\n+        /*unprotected_peer_ids=*/{6, 7, 8, 9, 10, 11, 13, 16, 20, 21, 22, 23},\n         random_context));\n \n     // Combined test: expect having 1 localhost, 7 I2P and 4 onion peers out of\n@@ -412,8 +412,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV6;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 17, 18},\n-        /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11, 16, 19, 20, 21, 22, 23},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 17, 18},\n+        /*unprotected_peer_ids=*/{6, 7, 8, 9, 10, 11, 16, 19, 20, 21, 22, 23},\n         random_context));\n \n     // Combined test: expect having 8 localhost, 4 I2P, and 3 onion peers out of\n@@ -431,8 +431,8 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n                 c.m_network = NET_IPV4;\n             }\n         },\n-        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 16, 17},\n-        /* unprotected_peer_ids */ {6, 9, 10, 13, 14, 15, 18, 19, 20, 21, 22, 23},\n+        /*protected_peer_ids=*/{0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 16, 17},\n+        /*unprotected_peer_ids=*/{6, 9, 10, 13, 14, 15, 18, 19, 20, 21, 22, 23},\n         random_context));\n }\n "
      },
      {
        "sha": "c5bd9c73fdc88b4955fffb6a34200553df6527a1",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -607,7 +607,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress{}, /* pszDest */ std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n+    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress{}, /*pszDest=*/std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      },
      {
        "sha": "fed941247c94a52f8d97f9b50fed4fce09cd978d",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -44,7 +44,7 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     std::mutex counterMutex[10];\n     int counter[10] = { 0 };\n-    FastRandomContext rng{/* fDeterministic */ true};\n+    FastRandomContext rng{/*fDeterministic=*/true};\n     auto zeroToNine = [](FastRandomContext& rc) -> int { return rc.randrange(10); }; // [0, 9]\n     auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + (int)rc.randrange(1012); }; // [-11, 1000]\n     auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + (int)rc.randrange(2001); }; // [-1000, 1000]"
      },
      {
        "sha": "db4122ac022d4b2a95569494f677149b0cd891e7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -249,26 +249,26 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /*expect_valid=*/true),\n                                 \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n                 unsigned int flags = TrimFlags(~(verify_flags | flag));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n                 flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\n                 }\n             }\n \n             // Check that flags are maximal: transaction should fail if any unset flags are set.\n             for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /*expect_valid=*/false)) {\n                     BOOST_ERROR(\"Too many flags unset: \" << strTest);\n                 }\n             }\n@@ -340,26 +340,26 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags, txdata, strTest, /* expect_valid */ false),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags, txdata, strTest, /*expect_valid=*/false),\n                                 \"Tx unexpectedly passed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Adding any flag(s) should not validate an invalid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 unsigned int flags = FillFlags(verify_flags | flag);\n                 // Adding individual flags\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/false)) {\n                     BOOST_ERROR(\"Tx unexpectedly passed with flag \" << name << \" set: \" << strTest);\n                 }\n                 // Adding random combinations of flags\n                 flags = FillFlags(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size()));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/false)) {\n                     BOOST_ERROR(\"Tx unexpectedly passed with random flags \" << name << \": \" << strTest);\n                 }\n             }\n \n             // Check that flags are minimal: transaction should succeed if any set flags are unset.\n             for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /* expect_valid */ true)) {\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /*expect_valid=*/true)) {\n                     BOOST_ERROR(\"Too many flags set: \" << strTest);\n                 }\n             }"
      },
      {
        "sha": "2193e217801712deae063b3ae7bd9156c4833b67",
        "filename": "src/test/txpackage_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/txpackage_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/txpackage_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txpackage_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -84,10 +84,10 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n     auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*input_vout=*/0,\n                                                    /*input_height=*/ 101, /*input_signing_key=*/parent_key,\n-                                                   /*output_destination */ child_locking_script,\n+                                                   /*output_destination=*/child_locking_script,\n                                                    /*output_amount=*/ CAmount(48 * COIN), /*submit=*/false);\n     CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n-    const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /* test_accept */ true);\n+    const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /*test_accept=*/true);\n     BOOST_CHECK_MESSAGE(result_parent_child.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << result_parent_child.m_state.GetRejectReason());\n     auto it_parent = result_parent_child.m_tx_results.find(tx_parent->GetWitnessHash());\n@@ -103,7 +103,7 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // A single, giant transaction submitted through ProcessNewPackage fails on single tx policy.\n     CTransactionRef giant_ptx = create_placeholder_tx(999, 999);\n     BOOST_CHECK(GetVirtualTransactionSize(*giant_ptx) > MAX_PACKAGE_SIZE * 1000);\n-    auto result_single_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {giant_ptx}, /* test_accept */ true);\n+    auto result_single_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {giant_ptx}, /*test_accept=*/true);\n     BOOST_CHECK(result_single_large.m_state.IsInvalid());\n     BOOST_CHECK_EQUAL(result_single_large.m_state.GetResult(), PackageValidationResult::PCKG_TX);\n     BOOST_CHECK_EQUAL(result_single_large.m_state.GetRejectReason(), \"transaction failed\");"
      },
      {
        "sha": "555979d94e7cca0d0ae4eb6363aa16882876cd1a",
        "filename": "src/test/util/chainstate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/chainstate.h?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -47,7 +47,7 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleati\n \n     malleation(auto_infile, metadata);\n \n-    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory=*/true);\n }\n \n "
      },
      {
        "sha": "696fd902f8a11f32d31ae8f75e69260891a656be",
        "filename": "src/test/util/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -46,18 +46,18 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candida\n     std::vector<NodeEvictionCandidate> candidates;\n     for (int id = 0; id < n_candidates; ++id) {\n         candidates.push_back({\n-            /* id */ id,\n-            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n-            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* fRelevantServices */ random_context.randbool(),\n-            /* fRelayTxes */ random_context.randbool(),\n-            /* fBloomFilter */ random_context.randbool(),\n-            /* nKeyedNetGroup */ random_context.randrange(100),\n-            /* prefer_evict */ random_context.randbool(),\n-            /* m_is_local */ random_context.randbool(),\n-            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n+            /*id=*/id,\n+            /*nTimeConnected=*/static_cast<int64_t>(random_context.randrange(100)),\n+            /*m_min_ping_time=*/std::chrono::microseconds{random_context.randrange(100)},\n+            /*nLastBlockTime=*/static_cast<int64_t>(random_context.randrange(100)),\n+            /*nLastTXTime=*/static_cast<int64_t>(random_context.randrange(100)),\n+            /*fRelevantServices=*/random_context.randbool(),\n+            /*fRelayTxes=*/random_context.randbool(),\n+            /*fBloomFilter=*/random_context.randbool(),\n+            /*nKeyedNetGroup=*/random_context.randrange(100),\n+            /*prefer_evict=*/random_context.randbool(),\n+            /*m_is_local=*/random_context.randbool(),\n+            /*m_network=*/ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n         });\n     }\n     return candidates;"
      },
      {
        "sha": "6a74394e974e4e81c31575dc2f665ed0368a9d95",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -179,7 +179,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     m_node.chainman->InitializeChainstate(m_node.mempool.get());\n     m_node.chainman->ActiveChainstate().InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n     assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n     m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n     assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n@@ -192,7 +192,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<AddrMan>(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    m_node.addrman = std::make_unique<AddrMan>(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/0);\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,"
      },
      {
        "sha": "b890ae49313309ef56c6c9c9eb961f92b3aaffdf",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -41,7 +41,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n \n     CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     c1.InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));\n \n     // Add a coin to the in-memory cache, upsize once, then downsize."
      },
      {
        "sha": "a1f70e7e70c224becb3754d4b689afe375f5e87b",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));\n \n     BOOST_CHECK(!manager.IsSnapshotActive());\n@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\n \n     c2.InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n     WITH_LOCK(::cs_main, c2.InitCoinsCache(1 << 23));\n     // Unlike c1, which doesn't have any blocks. Gets us different tip, height.\n     c2.LoadGenesisBlock();\n@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n \n     {\n         LOCK(::cs_main);\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n \n     {\n         LOCK(::cs_main);"
      },
      {
        "sha": "b4daceb72c98d4bff43ccfa2e3ce30291884b2af",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -21,7 +21,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     CTxMemPool mempool;\n     BlockManager blockman{};\n     CChainState chainstate{&mempool, blockman, *Assert(m_node.chainman)};\n-    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    chainstate.InitCoinsDB(/*cache_size_bytes=*/1 << 10, /*in_memory=*/true, /*should_wipe=*/false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;\n@@ -56,7 +56,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     // Without any coins in the cache, we shouldn't need to flush.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         }\n \n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -92,34 +92,34 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        if (chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes=*/1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n "
      },
      {
        "sha": "35fef288a107c95e3376676f8623863f97695ebc",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa00447442f22a24e5ca5fc538d0bf7bef575544/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=fa00447442f22a24e5ca5fc538d0bf7bef575544",
        "patch": "@@ -133,7 +133,7 @@ inline std::vector<OutputGroup>& KnapsackGroupOutputs(const std::vector<COutput>\n                                               /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                               /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     static std::vector<OutputGroup> static_groups;\n-    static_groups = GroupOutputs(wallet, coins, coin_selection_params, filter, /* positive_only */false);\n+    static_groups = GroupOutputs(wallet, coins, coin_selection_params, filter, /*positive_only=*/false);\n     return static_groups;\n }\n \n@@ -733,7 +733,7 @@ BOOST_AUTO_TEST_CASE(waste_test)\n     add_coin(1 * COIN, 1, selection, fee, fee);\n     add_coin(2 * COIN, 2, selection, fee, fee);\n     const CAmount exact_target{in_amt - fee * 2};\n-    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, /* change_cost */ 0, exact_target));\n+    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, /*change_cost=*/0, exact_target));\n     selection.clear();\n \n     // No Waste when (fee - long_term_fee) == (-cost_of_change), and no excess"
      }
    ]
  }
]