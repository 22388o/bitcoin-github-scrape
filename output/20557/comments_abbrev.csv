jnewbery,2020-12-03 11:39:41,"The code currently rebuckets entries (losing the additional bucket positions) if the asmap checksum changes. I'm not sure if that's necessary and don't see any downside to keeping the same bucketing if restarting with a new asmap. If others agree, I can update this PR to not do that rebucketing.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-737888519,737888519,
jnewbery,2020-12-03 11:43:28,"We should also add a regression test for this. I think a good test would be to add a round trip serialize/unserialize to the addrman fuzz test, and compare the addrman before and after that round trip. There's some internal state that isn't reconstructed from serialize/unserialize (eg the vRandom ordering), but a comparator function that checked number of entries and bucket->entry pairs should wor",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-737890278,737890278,
DrahtBot,2020-12-03 13:28:49,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-737994022,737994022,
naumenkogs,2020-12-04 01:57:03,"Concept ACK.\n\n>The code currently rebuckets entries (losing the additional bucket positions) if the asmap checksum changes. I'm not sure if that's necessary and don't see any downside to keeping the same bucketing if restarting with a new asmap. If others agree, I can update this PR to not do that rebucketing.\n\nThat would mean that asmap is applied to only newly learned addresses, which is",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-738505022,738505022,
jnewbery,2020-12-04 09:39:02,"> That would mean that asmap is applied to only newly learned addresses, which is a downside (assuming asmap is an improvement)\n\nCurrently the bucket positions for existing new addresses are lost entirely when changing asmap, so I don't understand how this is a downside. The choice is between throwing away those bucket positions or not.\n\n> Also, we should keep in mind that non-rebucketing ",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-738680739,738680739,
naumenkogs,2020-12-04 17:38:35,"> Currently the bucket positions for existing new addresses are lost entirely when changing asmap, so I don't understand how this is a downside. The choice is between throwing away those bucket positions or not.\n\nI expressed my agreement with you in the following sentence: ""On the other hand, losing the existing 8 buckets is unfortunate."". Still, ideally, we would apply a new asmap to existing",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-738917757,738917757,
jnewbery,2020-12-10 11:02:02,Thanks for the review @naumenkogs. I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-742449291,742449291,
laanwj,2020-12-10 13:08:24,"Concept ACK, and the code change looks overall good to me. \n\n> https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-737890278\n\nAgree that a test would be useful, to make it easier to see that this fixes the mentioned problems and prevent future regression.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-742510425,742510425,
naumenkogs,2020-12-11 07:48:33,utACK dbdf63c6d82ae8d1ca73f11d1b8844614f0bf8e3,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-743033626,743033626,
jnewbery,2021-01-18 13:25:28,"Improved the naming of one of the variables as suggested in https://github.com/bitcoin/bitcoin/pull/20557#discussion_r556985482 :\n https://github.com/bitcoin/bitcoin/compare/dbdf63c6d82ae8d1ca73f11d1b8844614f0bf8e3..36f3d9d8a48541f0b44ea4cff52a770cab43f2f0.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-762249254,762249254,
jnewbery,2021-01-18 14:36:09,Rebased on master,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-762289179,762289179,
naumenkogs,2021-01-19 07:11:40,ACK ac3547eddd8a7d67b4103508f30d5d02a9c1f148,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-762648732,762648732,
vasild,2021-01-26 16:42:41,"> I think a good test would be to add a round trip serialize/unserialize to the addrman fuzz test, and compare the addrman before and after that round trip. There's some internal state that isn't reconstructed from serialize/unserialize (eg the vRandom ordering), but a comparator function that checked number of entries and bucket->entry pairs should work.\n\nCreated such test at: https://github.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-767671839,767671839,
jnewbery,2021-01-29 10:32:20,"Thanks for the review @vasild. I've resolved your review comments.\n\nI haven't taken your fuzz test yet since it seems like there's a bit more work to make sure that it's getting reliable coverage.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-769722383,769722383,
vasild,2021-01-29 14:24:19,"ACK 4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b\n\n* The addition of a fuzzing test (https://github.com/jnewbery/bitcoin/pull/18) is not a show stopper for this PR.\n* To my understanding, the unneeded [`vvNew[bucket][bucket_position] == -1`](https://github.com/bitcoin/bitcoin/pull/20557/files#diff-164bd9e2e30f54d0a79eb7cc372309e2f2155edc6c3f051290ab078f03f6a771R546) can be removed. It was part of",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-769834905,769834905,
glozow,2021-01-29 23:28:58,"re-ACK https://github.com/bitcoin/bitcoin/commit/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b, changes were a rename, comments, and removing repeat-logging.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-770103446,770103446,
naumenkogs,2021-01-30 09:04:52,ACK 4676a4f,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-770181141,770181141,
jnewbery,2021-02-03 11:13:36,"@MarcoFalke or @laanwj - this PR now has 3 ACKs. If one of you re-reviewed, then it might be ready for merge.",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-772430279,772430279,
jnewbery,2021-02-09 10:24:09,"Thanks @dhruv and @ryanofsky for the reviews. I think this is ready for merge now, and the remaining review comments can be done in follow-ups:\n\n- [ ] Add test (https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-737890278, also see https://github.com/jnewbery/bitcoin/pull/18)\n- [ ] Use structured bindings to iterate bucket_entries (https://github.com/bitcoin/bitcoin/pull/20557#discus",https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-775832831,775832831,
laanwj,2021-02-09 11:36:00,Code review ACK 4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b,https://github.com/bitcoin/bitcoin/pull/20557#issuecomment-775875390,775875390,
MarcoFalke,2020-12-03 12:55:03,"```suggestion\n        const bool restore_bucketing{nUBuckets == ADDRMAN_NEW_BUCKET_COUNT &&\n```",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r535204097,535204097,src/addrman.h
jnewbery,2020-12-03 12:59:23,fixed,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r535206817,535206817,src/addrman.h
naumenkogs,2020-12-08 08:40:13,This comment is weird in general. I don't think we have anything like `ADDRMAN_UNKNOWN_BUCKET_COUNT` anymore?,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r538141515,538141515,src/addrman.h
naumenkogs,2020-12-08 08:41:02,"Should be talking about ADDRMAN_NEW_BUCKET_COUNT, ADDRMAN_NEW_BUCKETS_PER_ADDRESS.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r538142013,538142013,src/addrman.h
naumenkogs,2020-12-08 08:44:35,"So this happens if a new version of Bitcoin Core reduced `ADDRMAN_NEW_BUCKETS_PER_ADDRESS`, and in this case we completely forget the extra addrs.\n\nWhy do you think it's more reasonable? Assuming addrman is less-than-half-full, there's a good chance this odd addr can find a new place without evicting anything.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r538144329,538144329,src/addrman.h
naumenkogs,2020-12-08 08:47:01,"I find it hard to parse ""restore the entry's new buckets"".\n1. Not only buckets, but also positions.\n2. What exactly is ""restore"" is also a bit unclear, I'm thinking if there's a better verb. Perhaps just ""use the serialized [...]""",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r538145834,538145834,src/addrman.h
jnewbery,2020-12-10 10:57:41,"Thanks, changed to ADDRMAN_NEW_BUCKET_COUNT.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r540073174,540073174,src/addrman.h
jnewbery,2020-12-10 10:58:47,Because `ADDRMAN_NEW_BUCKETS_PER_ADDRESS` should be an invariant in addrman. No entry should appear in no more than `ADDRMAN_NEW_BUCKETS_PER_ADDRESS` buckets.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r540073873,540073873,src/addrman.h
jnewbery,2020-12-10 11:01:35,"Changed wording to ""If the bucket count and asmap checksum haven't changed, then attempt to restore the entries to the buckets/positions they were in before serialization."" Hopefully that's clearer!\n",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r540075665,540075665,src/addrman.h
glozow,2021-01-14 01:28:16,"Just to clarify... this is the number of entries in this bucket, right? Not the capacity of the bucket, which is `ADDRMAN_BUCKET_SIZE`?",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r556985482,556985482,src/addrman.h
glozow,2021-01-14 01:46:13,So you're removing the `format >= Format::V2_ASMAP` condition here because otherwise it'd be impossible for `serialized_asmap_checksum == supplied_asmap_checksum` yes?,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r556991230,556991230,src/addrman.h
jnewbery,2021-01-14 13:11:31,Exactly (see the comment above about serialization format: https://github.com/jnewbery/bitcoin/blob/dbdf63c6d82ae8d1ca73f11d1b8844614f0bf8e3/src/addrman.h#L341),https://github.com/bitcoin/bitcoin/pull/20557#discussion_r557383675,557383675,src/addrman.h
jnewbery,2021-01-14 13:13:19,"Correct. If format == V1_DETERMINISTIC, then serialized_asmap_checksum must be 0.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r557384721,557384721,src/addrman.h
glozow,2021-01-15 23:56:58,"I just thought both being called ""size"" is a bit confusing so `num_entries` would have been my choice for naming, but it's the nittiest of nits, non-blocking",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r558689266,558689266,src/addrman.h
jnewbery,2021-01-18 13:23:38,I agree that this is confusing. I've renamed to `num_entries`.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r559563695,559563695,src/addrman.h
vasild,2021-01-25 16:51:27,"@naumenkogs if a new Bitcoin Core reduces `ADDRMAN_NEW_BUCKETS_PER_ADDRESS` from 8 to e.g. 6 and this condition becomes true in the new version, then the address is already in 6 buckets in memory. So we would not completely forget it, or do I miss something?",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r563877014,563877014,src/addrman.h
vasild,2021-01-26 05:36:55,"`vVector` does not exist. More importantly - none of the members is serialized explicitly/directly. So, I think the following changes would make a better description of the source code:\n\n```diff\ndiff --git i/src/addrman.h w/src/addrman.h\nindex cde864f25..983a1f4fd 100644\n--- i/src/addrman.h\n+++ w/src/addrman.h\n@@ -332,29 +332,26 @@ public:\n      *     (format=5, lowest_compatible=5",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r564225855,564225855,src/addrman.h
vasild,2021-01-26 05:48:12,"Under what conditions could it happen that `restore_bucketing` is `false` and `vvNew[bucket][bucket_position] != -1` (occupied)?\n\nIs it only if `ADDRMAN_BUCKET_SIZE` has been changed? If that has happened then we shouldn't try to restore the bucketing (i.e. should set `restore_bucketing` to `false`), but unfortunately the old `ADDRMAN_BUCKET_SIZE` is not saved on disk, so we can only indirectl",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r564232061,564232061,src/addrman.h
vasild,2021-01-26 06:04:22,"If `restore_bucketing` is `false`, then this will be printed for every address, possibly _many_ times. But it does not include the address itself. What about printing the address:\n\n```suggestion\n                LogPrint(BCLog::ADDRMAN, ""Bucketing method was updated, re-bucketing addrman entry from disk for %s\n"", info.ToString());\n```\n\nor print the generic message once:\n\n```suggest",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r564248956,564248956,src/addrman.h
jnewbery,2021-01-29 10:23:37,"If both `restore_bucketing` is false and `vvNew[bucket][bucket_position] != -1` then it means that two addresses hash into the same position in the same new bucket, which is possible based on the source address. `restore_bucketing` would be false if the number of new buckets had changed or the as map had changed.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566720943,566720943,src/addrman.h
jnewbery,2021-01-29 10:27:48,Good catch! I'm just going to move the log to outside the loop to avoid it printing many times. Only printing once seems to be the original intent of this log. Improved logging can be left for a future PR.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566723508,566723508,src/addrman.h
jnewbery,2021-01-29 10:31:30,Good suggestions. I've added a new commit that makes these changes.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566725650,566725650,src/addrman.h
vasild,2021-01-29 10:54:35,"Thanks! `s/vVector/vRandom/` in that commit - there is no member named `vVector`.\nAlso, consider adding `mapInfo` to the list of members that ""are never encoded explicitly"" - the ids (the keys of that map) are not serialized, only the values (and in different order than in the map).",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566738795,566738795,src/addrman.h
vasild,2021-01-29 11:14:00,"Yes! So it follows that (correct me if I am wrong):\n\n* If `restore_bucketing` is `true` then `vvNew[bucket][bucket_position] == -1` is also `true` (position is free, not occupied). So the `if` condition can be reduced to just `if (restore_bucketing) {`.\n\n* If `restore_bucketing` is `false` then `vvNew[bucket][bucket_position] == -1` may be `true` or `false` depending on the hashing. In thi",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566749293,566749293,src/addrman.h
vasild,2021-01-29 11:16:40,`s/restore_bucketing/!restore_bucketing/` in 9a0760db4?,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566750699,566750699,src/addrman.h
jnewbery,2021-01-29 12:30:50,"I think `vvNew[bucket][bucket_position] == -1` is just a belt-and-suspenders. It shouldn't be hit (if so, then something has gone wrong with the position serializing/deserializing to place two addresses in the same bucket/position). I think you're right that we can just remove it, but can we leave that as a follow-up? We can't fix _all_ of addrman's problems in one PR :)",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566789137,566789137,src/addrman.h
jnewbery,2021-01-29 12:31:04,:man_facepalming: You're right of course. I'll fix.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566789249,566789249,src/addrman.h
jnewbery,2021-01-29 12:40:18,Thanks. I applied the diff by hand and missed those. Now fixed!,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566793958,566793958,src/addrman.h
vasild,2021-01-29 14:30:02,"Alright, so either we are both correct that this is redundant and not needed, or we are both wrong!\n\nIf we are wrong, and it can happen that `restore_bucketing` is `true` and `vvNew[bucket][bucket_position] == -1` is `false` (occupied!) then moving the `LogPrint()` call was wrong because it would have been executed inside the `else` branch and now it will not be executed because now it is cond",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r566859824,566859824,src/addrman.h
ryanofsky,2021-02-08 21:50:11,"In commit ""[addrman] Fix new table bucketing during unserialization"" (b4c5fda417dd9ff8bf9fe24a87d384a649e3730d)\n\nCould avoid some verbosity here with\n\n```diff\n-        for (auto bucket_entry : bucket_entries) {\n-            int bucket{bucket_entry.first};\n-            const int n{bucket_entry.second};\n+        for (auto [bucket, n] : bucket_entries) {\n```",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572398580,572398580,src/addrman.h
ryanofsky,2021-02-08 21:55:44,"In commit ""[addrman] Fix new table bucketing during unserialization"" (b4c5fda417dd9ff8bf9fe24a87d384a649e3730d)\n\nSeems like having a data structure here is superfluous if it's just going to be filled up then immediately iterated over and discarded. Maybe it would make sense to remove this vector later.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572401734,572401734,src/addrman.h
ryanofsky,2021-02-08 22:07:17,"In commit ""[addrman] Fix new table bucketing during unserialization"" (b4c5fda417dd9ff8bf9fe24a87d384a649e3730d)\n\nIt would be good to have some test coverage for this. A functional test might be hard but I would think a c++ unit test should be straightforward. Past bugs predict future bugs so a test here could steer coverage in a useful direction.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572410044,572410044,src/addrman.h
dhruv,2021-02-09 01:43:45,"The old code iterates over `mapInfo[0..nNew]`, so we were guaranteed that all `CAddrInfo`s in the new table make their way into `vvNew` (either in the old buckets, or newly assigned ones in the else block below). With the new code, we have an implicit assumption that `bucket_entries.size() == nNew`. Is that safe to assume? I _think_ it is but just wanted to ask since we are iterating over a differ",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572506601,572506601,src/addrman.h
dhruv,2021-02-09 01:45:45,"(nit) since `entry_index` can be confused with the for-loop index, perhaps `entry_id` is better (to match `nIdCount`)?",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572507304,572507304,src/addrman.h
dhruv,2021-02-09 01:47:41,"Thank you! I actually tripped over this while reading the old code.\n\n(nit) could this is a `scripted-diff`?",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572507981,572507981,src/addrman.h
ryanofsky,2021-02-09 01:51:21,"In commit ""[addrman] Don't rebucket new table entries unnecessarily"" (a5c9b04959f443372400f9a736c6eaf5502284a1)\n\nIt would be good if comment could say when this condition happens. Particularly if there is any case where it's expected to happen, or if it can only happen loading bad data.\n\nAlso, discarding entries after max buckets reached seems like another subtle change in behavior that co",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572509364,572509364,src/addrman.h
dhruv,2021-02-09 02:02:44,"In the format above aren't lines 340-342 an encoding of `vvNew`? If so, why remove this comment?",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572513322,572513322,src/addrman.h
ryanofsky,2021-02-09 02:19:25,"In commit ""[addrman] Don't rebucket new table entries unnecessarily"" (a5c9b04959f443372400f9a736c6eaf5502284a1)\n\nJust some notes to make sure I'm following this correctly.\n\n- The `restore_bucketing` change here is aesthetic and the only actual change this line is dropping the `format >= Format::V2_ASMAP` condition. \n- The effect of dropping `format` condition is this will now keep existi",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572518900,572518900,src/addrman.h
vasild,2021-02-09 09:46:33,"I think `bucket_entries.size() >= nNew`, let me use an example:\n\n```\nmapInfo[id=3] = 1.1.1.1\n// for the example, I pick up some arbitrary indexes in vvNew\nvvNew[2][5] = id=3\nvvNew[4][9] = id=3\nnNew = 1\n```\n\nThis would be serialized on disk as:\n\n```\n1 (nNew)\n0 (nTried)\n1024 (new_bucket_count)\n1.1.1.1 (list of new addresses) (*)\n(zero tried addresses)\n0 (number of",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572736572,572736572,src/addrman.h
vasild,2021-02-09 09:50:12,"That variable `entry_index` describes the index of the address in the disk-only list of new addresses (marked as `(*)` in [the comment above](https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572736572)).\n\nI think that should not be confused with the in-memory-only ""id"" and `entry_index` describes it well.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572739225,572739225,src/addrman.h
vasild,2021-02-09 09:54:11,"No, because the memory-only `id` may not equal to the disk-only `index in the serialized ""all new addresses""`.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572742180,572742180,src/addrman.h
jnewbery,2021-02-09 10:01:46,"This was part of the bug that this PR fixes. nNew is the total number of new addrs. Each new addr can appear in more than one new bucket, so the number of entries in bucket_entries could be higher than nNew. The old code was potentially throwing away these additional placements.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572747754,572747754,src/addrman.h
jnewbery,2021-02-09 10:04:33,"I think that's a reasonable suggestion, but not worth invalidating the existing ACKs.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572749636,572749636,src/addrman.h
jnewbery,2021-02-09 10:05:45,"> (nit) could this is a scripted-diff?\n\nScripted diffs are useful when there are many occurrences of a string across multiple files. This string is used in 7 places, so is easy enough to review by eye. ",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572750454,572750454,src/addrman.h
jnewbery,2021-02-09 10:06:56,See the line above. vvNew isn't encoded explicitly but is reconstructed.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572751281,572751281,src/addrman.h
vasild,2021-02-09 10:07:28,"I think that vector could be avoided only if we could seek into the stream. Then we could change the current:\n```\nread new buckets\nread asmap checksum\nprocess the new buckets that were read, depending on the asmap checksum\n```\nto\n```\nseek forward and read the asmap checksum (last 32 bytes)\nseek back and read+process the new bucketing data, depending on the asmap checksum\n```",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572751661,572751661,src/addrman.h
jnewbery,2021-02-09 10:09:47,"We only know how we're going to use the vector after we've deserialized the asmap_checksum field, so I don't think we can get rid of it.",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572753348,572753348,src/addrman.h
vasild,2021-02-09 10:09:58,A test is in the baking at https://github.com/jnewbery/bitcoin/pull/18.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572753489,572753489,src/addrman.h
jnewbery,2021-02-09 10:10:40,I definitely agree. @vasild has a test here: https://github.com/jnewbery/bitcoin/pull/18 which can be added after this PR.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572753969,572753969,src/addrman.h
jnewbery,2021-02-09 10:14:29,I'll expand this comment in a follow-up.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572756630,572756630,src/addrman.h
jnewbery,2021-02-09 10:23:57,"> The restore_bucketing change here is aesthetic and the only actual change this line is dropping the format >= Format::V2_ASMAP condition.\n\nRight, this condition doesn't change during loop iterations, so it's clearer to move it out of the loop, mark it const, and only do a conditional check inside the loop on what can change over iterations.\n\n> The effect of dropping format condition is t",https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572763470,572763470,src/addrman.h
jnewbery,2021-02-09 10:24:31,:heart: structured bindings. Good suggestion. I'll do in a follow-up.,https://github.com/bitcoin/bitcoin/pull/20557#discussion_r572763827,572763827,src/addrman.h
