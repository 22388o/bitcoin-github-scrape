[
  {
    "sha": "b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGM1ZmRhNDE3ZGQ5ZmY4YmY5ZmUyNGE4N2QzODRhNjQ5ZTM3MzBk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-03T10:54:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-18T13:23:16Z"
      },
      "message": "[addrman] Fix new table bucketing during unserialization\n\nAn addrman entry can appear in up to 8 new table buckets. We store this\nentry->bucket indexing during shutdown so that on restart we can restore\nthe entries to their correct buckets.\n\nCommit ec45646de9e62b3d42c85716bfeb06d8f2b507dc broke the\ndeserialization code so that each entry could only be put in up to one\nnew bucket. Fix that.",
      "tree": {
        "sha": "8f8bddc6fe9dabcf4474892efb607ab03ae2e67b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f8bddc6fe9dabcf4474892efb607ab03ae2e67b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7acda55c4fa611481979a41dfd5ca016bb535409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7acda55c4fa611481979a41dfd5ca016bb535409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7acda55c4fa611481979a41dfd5ca016bb535409"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bcf36d9b3f87213f47e20f78fa15b62520844db1",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
        "patch": "@@ -500,7 +500,9 @@ friend class CAddrManTest;\n         nTried -= nLost;\n \n         // Store positions in the new table buckets to apply later (if possible).\n-        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+        // An entry may appear in up to ADDRMAN_NEW_BUCKETS_PER_ADDRESS buckets,\n+        // so we store all bucket-entry_index pairs to iterate through later.\n+        std::vector<std::pair<int, int>> bucket_entries;\n \n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n@@ -509,7 +511,7 @@ friend class CAddrManTest;\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    entryToBucket[nIndex] = bucket;\n+                    bucket_entries.emplace_back(bucket, nIndex);\n                 }\n             }\n         }\n@@ -523,9 +525,10 @@ friend class CAddrManTest;\n             s >> serialized_asmap_version;\n         }\n \n-        for (int n = 0; n < nNew; n++) {\n-            CAddrInfo &info = mapInfo[n];\n-            int bucket = entryToBucket[n];\n+        for (auto bucket_entry : bucket_entries) {\n+            int bucket{bucket_entry.first};\n+            const int n{bucket_entry.second};\n+            CAddrInfo& info = mapInfo[n];\n             int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n             if (format >= Format::V2_ASMAP && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&\n                 info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS && serialized_asmap_version == supplied_asmap_version) {"
      }
    ]
  },
  {
    "sha": "009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDliOGUwZmRmM2JmYjExNjY4ZWRhY2NlZDVkOGI3MDcyNmQ1ZDBl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-03T11:31:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-18T13:23:16Z"
      },
      "message": "[addrman] Improve variable naming/code style of touched code.",
      "tree": {
        "sha": "d2c80f7f99c2df7c4d347e1a916ac722e59eeddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2c80f7f99c2df7c4d347e1a916ac722e59eeddd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009b8e0fdf3bfb11668edacced5d8b70726d5d0e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4c5fda417dd9ff8bf9fe24a87d384a649e3730d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4cd4106ff40b1b067cb0b55ebe98484013b033b8",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/009b8e0fdf3bfb11668edacced5d8b70726d5d0e/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/009b8e0fdf3bfb11668edacced5d8b70726d5d0e/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
        "patch": "@@ -504,14 +504,14 @@ friend class CAddrManTest;\n         // so we store all bucket-entry_index pairs to iterate through later.\n         std::vector<std::pair<int, int>> bucket_entries;\n \n-        for (int bucket = 0; bucket < nUBuckets; bucket++) {\n-            int nSize = 0;\n-            s >> nSize;\n-            for (int n = 0; n < nSize; n++) {\n-                int nIndex = 0;\n-                s >> nIndex;\n-                if (nIndex >= 0 && nIndex < nNew) {\n-                    bucket_entries.emplace_back(bucket, nIndex);\n+        for (int bucket = 0; bucket < nUBuckets; ++bucket) {\n+            int num_entries{0};\n+            s >> num_entries;\n+            for (int n = 0; n < num_entries; ++n) {\n+                int entry_index{0};\n+                s >> entry_index;\n+                if (entry_index >= 0 && entry_index < nNew) {\n+                    bucket_entries.emplace_back(bucket, entry_index);\n                 }\n             }\n         }\n@@ -527,13 +527,13 @@ friend class CAddrManTest;\n \n         for (auto bucket_entry : bucket_entries) {\n             int bucket{bucket_entry.first};\n-            const int n{bucket_entry.second};\n-            CAddrInfo& info = mapInfo[n];\n+            const int entry_index{bucket_entry.second};\n+            CAddrInfo& info = mapInfo[entry_index];\n             int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n             if (format >= Format::V2_ASMAP && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&\n                 info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS && serialized_asmap_version == supplied_asmap_version) {\n                 // Bucketing has not changed, using existing bucket positions for the new table\n-                vvNew[bucket][nUBucketPos] = n;\n+                vvNew[bucket][nUBucketPos] = entry_index;\n                 info.nRefCount++;\n             } else {\n                 // In case the new table data cannot be used (format unknown, bucket count wrong or new asmap),\n@@ -542,7 +542,7 @@ friend class CAddrManTest;\n                 bucket = info.GetNewBucket(nKey, m_asmap);\n                 nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n                 if (vvNew[bucket][nUBucketPos] == -1) {\n-                    vvNew[bucket][nUBucketPos] = n;\n+                    vvNew[bucket][nUBucketPos] = entry_index;\n                     info.nRefCount++;\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "8062d928ce5c495c1b6ecd18e4b30c12da822d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDYyZDkyOGNlNWM0OTVjMWI2ZWNkMThlNGIzMGMxMmRhODIyZDkw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-03T11:00:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-18T13:23:16Z"
      },
      "message": "[addrman] Rename asmap version to asmap checksum\n\nVersion implies that higher numbers take precendence. This is really a\nchecksum, to check whether the provided asmap is the same as the one\nused when the peers.dat file was serialized.\n\nAlso update the comments to explain where/why this is used.",
      "tree": {
        "sha": "7fedda3656451ae36c7c3d6722594c8201025fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fedda3656451ae36c7c3d6722594c8201025fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8062d928ce5c495c1b6ecd18e4b30c12da822d90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8062d928ce5c495c1b6ecd18e4b30c12da822d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8062d928ce5c495c1b6ecd18e4b30c12da822d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8062d928ce5c495c1b6ecd18e4b30c12da822d90/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009b8e0fdf3bfb11668edacced5d8b70726d5d0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/009b8e0fdf3bfb11668edacced5d8b70726d5d0e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "75e9f36b860168de548c4ea1fe09625b389d08a5",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8062d928ce5c495c1b6ecd18e4b30c12da822d90/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8062d928ce5c495c1b6ecd18e4b30c12da822d90/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=8062d928ce5c495c1b6ecd18e4b30c12da822d90",
        "patch": "@@ -340,6 +340,7 @@ friend class CAddrManTest;\n      * * for each bucket:\n      *   * number of elements\n      *   * for each element: index\n+     * * asmap checksum\n      *\n      * 2**30 is xorred with the number of buckets to make addrman deserializer v0 detect it\n      * as incompatible. This is necessary because it did not check the version number on\n@@ -348,8 +349,8 @@ friend class CAddrManTest;\n      * Notice that vvTried, mapAddr and vVector are never encoded explicitly;\n      * they are instead reconstructed from the other information.\n      *\n-     * vvNew is serialized, but only used if ADDRMAN_UNKNOWN_BUCKET_COUNT didn't change,\n-     * otherwise it is reconstructed as well.\n+     * vvNew is serialized, but only used if ADDRMAN_NEW_BUCKET_COUNT and the asmap checksum\n+     * didn't change, otherwise it is reconstructed as well.\n      *\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports\n      * changes to the ADDRMAN_ parameters without breaking the on-disk structure.\n@@ -413,13 +414,13 @@ friend class CAddrManTest;\n                 }\n             }\n         }\n-        // Store asmap version after bucket entries so that it\n+        // Store asmap checksum after bucket entries so that it\n         // can be ignored by older clients for backward compatibility.\n-        uint256 asmap_version;\n+        uint256 asmap_checksum;\n         if (m_asmap.size() != 0) {\n-            asmap_version = SerializeHash(m_asmap);\n+            asmap_checksum = SerializeHash(m_asmap);\n         }\n-        s << asmap_version;\n+        s << asmap_checksum;\n     }\n \n     template <typename Stream>\n@@ -516,13 +517,13 @@ friend class CAddrManTest;\n             }\n         }\n \n-        uint256 supplied_asmap_version;\n+        uint256 supplied_asmap_checksum;\n         if (m_asmap.size() != 0) {\n-            supplied_asmap_version = SerializeHash(m_asmap);\n+            supplied_asmap_checksum = SerializeHash(m_asmap);\n         }\n-        uint256 serialized_asmap_version;\n+        uint256 serialized_asmap_checksum;\n         if (format >= Format::V2_ASMAP) {\n-            s >> serialized_asmap_version;\n+            s >> serialized_asmap_checksum;\n         }\n \n         for (auto bucket_entry : bucket_entries) {\n@@ -531,7 +532,7 @@ friend class CAddrManTest;\n             CAddrInfo& info = mapInfo[entry_index];\n             int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n             if (format >= Format::V2_ASMAP && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&\n-                info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS && serialized_asmap_version == supplied_asmap_version) {\n+                info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS && serialized_asmap_checksum == supplied_asmap_checksum) {\n                 // Bucketing has not changed, using existing bucket positions for the new table\n                 vvNew[bucket][nUBucketPos] = entry_index;\n                 info.nRefCount++;"
      }
    ]
  },
  {
    "sha": "a5c9b04959f443372400f9a736c6eaf5502284a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWM5YjA0OTU5ZjQ0MzM3MjQwMGY5YTczNmM2ZWFmNTUwMjI4NGEx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-03T11:12:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-18T13:23:16Z"
      },
      "message": "[addrman] Don't rebucket new table entries unnecessarily\n\nOnly rebucket if the asmap checksum has changed, not if the file format\nhas changed but no asmap is provided.\n\nAlso, don't try to add an entry to another bucket if it already appears\nin ADDRMAN_NEW_BUCKETS_PER_ADDRESS buckets.",
      "tree": {
        "sha": "99cb6e1504a9f89fc961c0f1fe00b7f17c1e036d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99cb6e1504a9f89fc961c0f1fe00b7f17c1e036d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5c9b04959f443372400f9a736c6eaf5502284a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c9b04959f443372400f9a736c6eaf5502284a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c9b04959f443372400f9a736c6eaf5502284a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c9b04959f443372400f9a736c6eaf5502284a1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8062d928ce5c495c1b6ecd18e4b30c12da822d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8062d928ce5c495c1b6ecd18e4b30c12da822d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8062d928ce5c495c1b6ecd18e4b30c12da822d90"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "693860aad9a0e31c98fc16f88f34c2d9bbfa3524",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c9b04959f443372400f9a736c6eaf5502284a1/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c9b04959f443372400f9a736c6eaf5502284a1/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a5c9b04959f443372400f9a736c6eaf5502284a1",
        "patch": "@@ -517,6 +517,8 @@ friend class CAddrManTest;\n             }\n         }\n \n+        // Attempt to restore the entry's new buckets if the bucket count and asmap\n+        // checksum haven't changed\n         uint256 supplied_asmap_checksum;\n         if (m_asmap.size() != 0) {\n             supplied_asmap_checksum = SerializeHash(m_asmap);\n@@ -525,19 +527,26 @@ friend class CAddrManTest;\n         if (format >= Format::V2_ASMAP) {\n             s >> serialized_asmap_checksum;\n         }\n+        const bool restore_bucketing{nUBuckets == ADDRMAN_NEW_BUCKET_COUNT &&\n+                                     serialized_asmap_checksum == supplied_asmap_checksum};\n \n         for (auto bucket_entry : bucket_entries) {\n             int bucket{bucket_entry.first};\n             const int entry_index{bucket_entry.second};\n             CAddrInfo& info = mapInfo[entry_index];\n+\n+            // The entry shouldn't appear in more than\n+            // ADDRMAN_NEW_BUCKETS_PER_ADDRESS. If it has already, just skip\n+            // this bucket_entry.\n+            if (info.nRefCount >= ADDRMAN_NEW_BUCKETS_PER_ADDRESS) continue;\n+\n             int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-            if (format >= Format::V2_ASMAP && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&\n-                info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS && serialized_asmap_checksum == supplied_asmap_checksum) {\n+            if (restore_bucketing && vvNew[bucket][nUBucketPos] == -1) {\n                 // Bucketing has not changed, using existing bucket positions for the new table\n                 vvNew[bucket][nUBucketPos] = entry_index;\n                 info.nRefCount++;\n             } else {\n-                // In case the new table data cannot be used (format unknown, bucket count wrong or new asmap),\n+                // In case the new table data cannot be used (bucket count wrong or new asmap),\n                 // try to give them a reference based on their primary source address.\n                 LogPrint(BCLog::ADDRMAN, \"Bucketing method was updated, re-bucketing addrman entries from disk\\n\");\n                 bucket = info.GetNewBucket(nKey, m_asmap);"
      }
    ]
  },
  {
    "sha": "ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzM1NDdlZGRkOGE3ZDY3YjQxMDM1MDhmMzBkNWQwMmE5YzFmMTQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-03T11:31:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-18T13:23:16Z"
      },
      "message": "[addrman] Improve variable naming/code style of touched code.",
      "tree": {
        "sha": "84eb6b1bb0423cc7e18675a20b335fb311b7f777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84eb6b1bb0423cc7e18675a20b335fb311b7f777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3547eddd8a7d67b4103508f30d5d02a9c1f148/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5c9b04959f443372400f9a736c6eaf5502284a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c9b04959f443372400f9a736c6eaf5502284a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c9b04959f443372400f9a736c6eaf5502284a1"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "cde864f2590e4f130a05c385313b816177a12d0c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac3547eddd8a7d67b4103508f30d5d02a9c1f148/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac3547eddd8a7d67b4103508f30d5d02a9c1f148/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
        "patch": "@@ -517,8 +517,9 @@ friend class CAddrManTest;\n             }\n         }\n \n-        // Attempt to restore the entry's new buckets if the bucket count and asmap\n-        // checksum haven't changed\n+        // If the bucket count and asmap checksum haven't changed, then attempt\n+        // to restore the entries to the buckets/positions they were in before\n+        // serialization.\n         uint256 supplied_asmap_checksum;\n         if (m_asmap.size() != 0) {\n             supplied_asmap_checksum = SerializeHash(m_asmap);\n@@ -540,20 +541,20 @@ friend class CAddrManTest;\n             // this bucket_entry.\n             if (info.nRefCount >= ADDRMAN_NEW_BUCKETS_PER_ADDRESS) continue;\n \n-            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-            if (restore_bucketing && vvNew[bucket][nUBucketPos] == -1) {\n+            int bucket_position = info.GetBucketPosition(nKey, true, bucket);\n+            if (restore_bucketing && vvNew[bucket][bucket_position] == -1) {\n                 // Bucketing has not changed, using existing bucket positions for the new table\n-                vvNew[bucket][nUBucketPos] = entry_index;\n-                info.nRefCount++;\n+                vvNew[bucket][bucket_position] = entry_index;\n+                ++info.nRefCount;\n             } else {\n                 // In case the new table data cannot be used (bucket count wrong or new asmap),\n                 // try to give them a reference based on their primary source address.\n                 LogPrint(BCLog::ADDRMAN, \"Bucketing method was updated, re-bucketing addrman entries from disk\\n\");\n                 bucket = info.GetNewBucket(nKey, m_asmap);\n-                nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                if (vvNew[bucket][nUBucketPos] == -1) {\n-                    vvNew[bucket][nUBucketPos] = entry_index;\n-                    info.nRefCount++;\n+                bucket_position = info.GetBucketPosition(nKey, true, bucket);\n+                if (vvNew[bucket][bucket_position] == -1) {\n+                    vvNew[bucket][bucket_position] = entry_index;\n+                    ++info.nRefCount;\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "436292367c1d737cf73bd985293539500d1206f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzYyOTIzNjdjMWQ3MzdjZjczYmQ5ODUyOTM1Mzk1MDBkMTIwNmY1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-29T10:18:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-29T12:39:55Z"
      },
      "message": "[addrman] Improve serialization comments\n\nThanks to Vasil Dimov <vd@FreeBSD.org> for these suggestions",
      "tree": {
        "sha": "d165925c1d0cb01bfff34c9a9e9fdbd79831a409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d165925c1d0cb01bfff34c9a9e9fdbd79831a409"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/436292367c1d737cf73bd985293539500d1206f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436292367c1d737cf73bd985293539500d1206f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/436292367c1d737cf73bd985293539500d1206f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436292367c1d737cf73bd985293539500d1206f5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3547eddd8a7d67b4103508f30d5d02a9c1f148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3547eddd8a7d67b4103508f30d5d02a9c1f148"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9ca0a989c0a5e23d74da030bacbab00765002f3c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/436292367c1d737cf73bd985293539500d1206f5/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/436292367c1d737cf73bd985293539500d1206f5/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=436292367c1d737cf73bd985293539500d1206f5",
        "patch": "@@ -335,23 +335,20 @@ friend class CAddrManTest;\n      * * nNew\n      * * nTried\n      * * number of \"new\" buckets XOR 2**30\n-     * * all nNew addrinfos in vvNew\n-     * * all nTried addrinfos in vvTried\n-     * * for each bucket:\n+     * * all new addresses (total count: nNew)\n+     * * all tried addresses (total count: nTried)\n+     * * for each new bucket:\n      *   * number of elements\n-     *   * for each element: index\n+     *   * for each element: index in the serialized \"all new addresses\"\n      * * asmap checksum\n      *\n      * 2**30 is xorred with the number of buckets to make addrman deserializer v0 detect it\n      * as incompatible. This is necessary because it did not check the version number on\n      * deserialization.\n      *\n-     * Notice that vvTried, mapAddr and vVector are never encoded explicitly;\n+     * vvNew, vvTried, mapInfo, mapAddr and vRandom are never encoded explicitly;\n      * they are instead reconstructed from the other information.\n      *\n-     * vvNew is serialized, but only used if ADDRMAN_NEW_BUCKET_COUNT and the asmap checksum\n-     * didn't change, otherwise it is reconstructed as well.\n-     *\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports\n      * changes to the ADDRMAN_ parameters without breaking the on-disk structure.\n      *"
      }
    ]
  },
  {
    "sha": "4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Njc2YTRmYjViZTBmNmVmMGIzZjcxYzFmNDM2MWMyMGY3Y2IwZTBi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-29T10:29:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-29T12:39:55Z"
      },
      "message": "[addrman] Don't repeat \"Bucketing method was updated\" log multiple times\n\nThanks to Vasil Dimov <vd@FreeBSD.org> for these suggestions",
      "tree": {
        "sha": "d03f2f12741f2ef0365ed216384de5efad9b6be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d03f2f12741f2ef0365ed216384de5efad9b6be7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "436292367c1d737cf73bd985293539500d1206f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436292367c1d737cf73bd985293539500d1206f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/436292367c1d737cf73bd985293539500d1206f5"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "92a5570953076b78a9230173f0159d7543f6d2f6",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=4676a4fb5be0f6ef0b3f71c1f4361c20f7cb0e0b",
        "patch": "@@ -528,6 +528,10 @@ friend class CAddrManTest;\n         const bool restore_bucketing{nUBuckets == ADDRMAN_NEW_BUCKET_COUNT &&\n                                      serialized_asmap_checksum == supplied_asmap_checksum};\n \n+        if (!restore_bucketing) {\n+            LogPrint(BCLog::ADDRMAN, \"Bucketing method was updated, re-bucketing addrman entries from disk\\n\");\n+        }\n+\n         for (auto bucket_entry : bucket_entries) {\n             int bucket{bucket_entry.first};\n             const int entry_index{bucket_entry.second};\n@@ -546,7 +550,6 @@ friend class CAddrManTest;\n             } else {\n                 // In case the new table data cannot be used (bucket count wrong or new asmap),\n                 // try to give them a reference based on their primary source address.\n-                LogPrint(BCLog::ADDRMAN, \"Bucketing method was updated, re-bucketing addrman entries from disk\\n\");\n                 bucket = info.GetNewBucket(nKey, m_asmap);\n                 bucket_position = info.GetBucketPosition(nKey, true, bucket);\n                 if (vvNew[bucket][bucket_position] == -1) {"
      }
    ]
  }
]