[
  {
    "sha": "122786d0e0170c73536360b705af711e1338adbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjI3ODZkMGUwMTcwYzczNTM2MzYwYjcwNWFmNzExZTEzMzhhZGJm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-21T23:27:55Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-22T16:02:53Z"
      },
      "message": "Consensus: Remove ISM",
      "tree": {
        "sha": "025090542ab4e14b665a4ee852cd0344ce243ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/025090542ab4e14b665a4ee852cd0344ce243ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/122786d0e0170c73536360b705af711e1338adbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122786d0e0170c73536360b705af711e1338adbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/122786d0e0170c73536360b705af711e1338adbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122786d0e0170c73536360b705af711e1338adbf/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 83,
      "deletions": 107
    },
    "files": [
      {
        "sha": "e903b2fbf07b329746081dfe0c98c3c322736bbc",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -71,9 +71,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 3 blocks '''\n+        ''' 398 more version 3 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(398):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -118,24 +118,6 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Check that the new CLTV rules are enforced in the 751st version 4\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        cltv_invalidate(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n-\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in range(199):\n@@ -169,6 +151,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        '''\n+        Check that the new CLTV rules are enforced in the 951st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3"
      },
      {
        "sha": "baa77b92a05bbfb69551245021bf9248bf2708c2",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -30,7 +30,8 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(200)\n+        cnt += 100\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")"
      },
      {
        "sha": "3bad5af5e67a44dd623201d75980a4461162a434",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -79,9 +79,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 2 blocks '''\n+        ''' 298 more version 2 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(298):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -124,25 +124,7 @@ def get_tests(self):\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' \n-        Check that the new DERSIG rules are enforced in the 751st version 3\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        unDERify(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n+        yield TestInstance([[block, True]])       \n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n@@ -177,6 +159,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        ''' \n+        Check that the new DERSIG rules are enforced in the 951st version 3\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        unDERify(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2"
      },
      {
        "sha": "c7c8ce73d99f5f00bfffc353a17c5cd924445868",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -71,11 +71,10 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n+        consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -167,11 +166,10 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 51;\n-        consensus.nMajorityRejectBlockOutdated = 75;\n-        consensus.nMajorityWindow = 100;\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n+        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n+        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -247,11 +245,10 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n-        consensus.BIP34Height = -1; // BIP34 has not necessarily activated on regtest\n+        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n         consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "5b2f49184fc3f6d2a1a28e8c69e5f5271600fc20",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -39,13 +39,13 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /** Used to check majorities for block version upgrade */\n-    int nMajorityEnforceBlockUpgrade;\n-    int nMajorityRejectBlockOutdated;\n-    int nMajorityWindow;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /** Block height at which BIP65 becomes active */\n+    int BIP65Height;\n+    /** Block height at which BIP66 becomes active */\n+    int BIP66Height;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "e92dbd72feaa11d7aaf9ee779f65fa76951b16ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 31,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -107,11 +107,6 @@ map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2372,15 +2367,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n-    // when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing the DERSIG (BIP66) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP66Height) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n-    // blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP65Height) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -3504,6 +3497,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n@@ -3517,10 +3511,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n-        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", version - 1),\n-                                 strprintf(\"rejected nVersion=0x%08x block\", version - 1));\n+    // check for version 2, 3 and 4 upgrades\n+    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n+       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n+       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n+                                 strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n     return true;\n }\n@@ -3547,9 +3543,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CB\n         }\n     }\n \n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    // Enforce rule that the coinbase starts with serialized block height\n+    if (nHeight >= consensusParams.BIP34Height)\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -3722,19 +3717,6 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {"
      },
      {
        "sha": "e3c32d905af74a0b2f307fc53694eb61f1c8d930",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -817,22 +817,23 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n+static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    int nFound = 0;\n-    CBlockIndex* pstart = pindex;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n+    UniValue rv(UniValue::VOBJ);\n+    bool activated = false;\n+    switch(version)\n     {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n+        case 2:\n+            activated = pindex->nHeight >= consensusParams.BIP34Height;\n+            break;\n+        case 3:\n+            activated = pindex->nHeight >= consensusParams.BIP66Height;\n+            break;\n+        case 4:\n+            activated = pindex->nHeight >= consensusParams.BIP65Height;\n+            break;\n     }\n-\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"status\", nFound >= nRequired));\n-    rv.push_back(Pair(\"found\", nFound));\n-    rv.push_back(Pair(\"required\", nRequired));\n-    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n+    rv.push_back(Pair(\"status\", activated));\n     return rv;\n }\n \n@@ -841,8 +842,7 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     UniValue rv(UniValue::VOBJ);\n     rv.push_back(Pair(\"id\", name));\n     rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n+    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n     return rv;\n }\n \n@@ -897,13 +897,9 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n             \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n+            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n             \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n-            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n-            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n-            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n             \"        },\\n\"\n-            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n             \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\""
      }
    ]
  }
]