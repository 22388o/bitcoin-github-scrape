[
  {
    "sha": "e12df93e5969491313a36d68a45e2b76ee139f42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTJkZjkzZTU5Njk0OTEzMTNhMzZkNjhhNDVlMmI3NmVlMTM5ZjQy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-12-21T13:15:41Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-12-21T14:08:36Z"
      },
      "message": "QA: Fix -usecli converting named bool args to non-lowercase",
      "tree": {
        "sha": "122587fbea4caec9bfbce9673ddaa0d6d9dca1ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/122587fbea4caec9bfbce9673ddaa0d6d9dca1ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12df93e5969491313a36d68a45e2b76ee139f42",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlwc8+QACgkQV/+b28ww\nEAkiDRAAue4aRqFEJ2Y2gJ8AZadpTTQIHaGXUpni5C9//V5fDqJMbt3+HKRjUYOU\nWJweknEau47ScO3UbTi0MCqbhg5lvLQ3w2uEc8YeGATfZnFmnq6xbVBtHu+RDb2m\nXuNUKXU7DaKOb+FMb2Kx7//ZkP5UeGcz8qDkewNJr2G46Hpjr9Yt/qYp+R1GmlKG\n6H+wmsBkfmPw6cdyrypWs3YkhDo5BsccaskMIRXvoqaRezjO4yjmGeKU7eOJWmb1\nVPlnx4H3GVmyEX8zCckOvhONkRZ6sGflDZCBBVDCevXZxsUMuFRPCK6MfcsCIBI8\nOvocW/eFSWstKkaeRr1ewORaafHBO0cnCgQUjAnMW5Obx8ys1MBGrwPYwzXjzZet\n3xn83yCaIA4ptwfvgb6Ij/7p0CwlYPohwJI05LHxwySHPGARTaXRghftCvJTL4Pb\nbTMGAPit2v5MvZ1iu5ZsMY2KnJhyoZhxLZu3cV59n80GPQkRUKv5fD6SxS5ELMjg\nNDiG+qwKiJVCYnIcBivh2DrCk24wwDOZzSZeJC8T9VdFKM/2bi5Oiz8hsHrYcJ8z\n/9t6ClNZm+mDOVEB1g6wLCKdtbNznsqDmwAknnkcPUaBG2EnblVpC2l6b++v5evR\nYIKqwWO2ym92DWY878MqCcKyiUddk2xGoSqlNGuv8YgSVijsTQY=\n=Ks/Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 122587fbea4caec9bfbce9673ddaa0d6d9dca1ed\nparent feda41e0a7c4440d398516850f9cbd4c4f3192dd\nauthor Sjors Provoost <sjors@sprovoost.nl> 1545398141 +0000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1545401316 +0000\n\nQA: Fix -usecli converting named bool args to non-lowercase\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12df93e5969491313a36d68a45e2b76ee139f42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e12df93e5969491313a36d68a45e2b76ee139f42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12df93e5969491313a36d68a45e2b76ee139f42/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "feda41e0a7c4440d398516850f9cbd4c4f3192dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feda41e0a7c4440d398516850f9cbd4c4f3192dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/feda41e0a7c4440d398516850f9cbd4c4f3192dd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8225992c25ea93ebd86fff866d11f36262a83816",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e12df93e5969491313a36d68a45e2b76ee139f42/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e12df93e5969491313a36d68a45e2b76ee139f42/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e12df93e5969491313a36d68a45e2b76ee139f42",
        "patch": "@@ -434,7 +434,7 @@ def batch(self, requests):\n     def send_cli(self, command=None, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n         pos_args = [str(arg).lower() if type(arg) is bool else str(arg) for arg in args]\n-        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        named_args = [str(key) + \"=\" + (str(value).lower() if type(value) is bool else str(value)) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n         p_args = [self.binary, \"-datadir=\" + self.datadir] + self.options\n         if named_args:"
      }
    ]
  },
  {
    "sha": "8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2UxN2MwZmIwZWE1MWU4MDQ3ZGIzZDVhMjNiZWY3NDdiYmVkZjNh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-12-21T14:42:31Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-12-21T14:42:31Z"
      },
      "message": "[wallet] support creating an empty wallet",
      "tree": {
        "sha": "f15fbd7817f51916668b1ceca6ce58fbdb3e91a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f15fbd7817f51916668b1ceca6ce58fbdb3e91a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlwc+9gACgkQV/+b28ww\nEAkrtBAAvb5kM8UrQSkUD9x1+WyU0qORU/LJxnOVZucge58tH2gXRr1MTiHHbP2Y\nf0rYZgupOMZJJjoUqnsIMu3LoIlxx6fx00ksfR3ykrfwjikx77LYYorCfGqMmR2X\n1tNWX/y4oVdp8j1lf+4vobgJhTlhy5hfEH4DOmQ7VHi7bfjJrgiQRPHXo25qg7U3\nhqsGtKtwDTK5FFQ0TGeCNenbFRV2a3qGTNr8vOrj7UBaMaYzhhKyvtW38HtV7GLo\nS6SVRXl0GykLG//1hvxIQTFp/eVTn9iD6IwQU/ZxBydoZYEbIq8W+VrOTd1tYuM0\nmTz2lvk5mN80w/YKGT0V37lLvQ1ZiiyCikUUEJZ2Woe7pA1p3KzXPiEkxBebtDv6\nN9PXS0KUhBZI5Xq9IlDcKynLiU56NkLgM16Qlu8LWWziZhomWAPDWLMMswv6lXtG\ngfO3HtsyPkfJV1Eia2DDot2YNnozfqc71iqpPCtzO2lWoXbFHxIKwc0TlvGE4QrS\nZkZ6/YnvEqKDKg/5T/jk+6jT55DtaF5mzbT72pJbE36/evkNg5YzAQVnlf2ZmZeU\nRDK7JPWhWNqt8UQ/2Bp0O/Z27JFdT/EGfCQzS82NPinoaf6IDafexKX240xqoLOV\nE+u1CWVaXn8/wp+LLJuGq5ysauy2mVTBZhAHzrnU4xslokWXDa4=\n=/czC\n-----END PGP SIGNATURE-----",
        "payload": "tree f15fbd7817f51916668b1ceca6ce58fbdb3e91a2\nparent e12df93e5969491313a36d68a45e2b76ee139f42\nauthor Sjors Provoost <sjors@sprovoost.nl> 1545403351 +0000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1545403351 +0000\n\n[wallet] support creating an empty wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e12df93e5969491313a36d68a45e2b76ee139f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12df93e5969491313a36d68a45e2b76ee139f42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e12df93e5969491313a36d68a45e2b76ee139f42"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 120,
      "deletions": 51
    },
    "files": [
      {
        "sha": "030162de12bf4ad73e9cefcbe06c2064cd47447c",
        "filename": "doc/release-notes-14936.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/doc/release-notes-14936.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/doc/release-notes-14936.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14936.md?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -0,0 +1,4 @@\n+Miscellaneous RPC changes\n+------------\n+\n+- The RPC `createwallet` now has an optional `empty` argument that can be used to create an empty wallet."
      },
      {
        "sha": "5a340c6412ed551db64370b4d95e1fc48fced94a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -161,6 +161,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n+    { \"createwallet\", 2, \"empty\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "8e4fa608edac44c6fee94a1b9d023305803e20ef",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -2551,13 +2551,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n                     {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create an empty wallet\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -2578,6 +2579,11 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         disable_privatekeys = request.params[1].get_bool();\n     }\n \n+    bool create_empty = false;\n+    if (!request.params[2].isNull()) {\n+        create_empty = request.params[2].get_bool();\n+    }\n+\n     WalletLocation location(request.params[0].get_str());\n     if (location.Exists()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n@@ -2588,7 +2594,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0), create_empty);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -4151,7 +4157,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"empty\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "612e86eb1b37962b8e6b0d418575e9bdc5f3487a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 9,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -138,8 +138,9 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n-    // use HD key derivation if HD was enabled during wallet creation\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n     if (IsHDEnabled()) {\n+        if (!HasHDSeed()) throw std::runtime_error(std::string(__func__) + \": No HD Seed\");\n         DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n         secret.MakeNewKey(fCompressed);\n@@ -661,7 +662,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD seed with a new one\n+        // if we are using HD, create a fresh seed or replace the existing seed with a new one\n         if (IsHDEnabled()) {\n             SetHDSeed(GenerateNewSeed());\n         }\n@@ -1375,11 +1376,20 @@ void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n     hdChain = chain;\n }\n \n-bool CWallet::IsHDEnabled() const\n+bool CWallet::HasHDSeed() const\n {\n     return !hdChain.seed_id.IsNull();\n }\n \n+bool CWallet::IsHDEnabled() const\n+{\n+    LOCK(cs_wallet);\n+    // -usehd was removed in 0.16, so all wallets with FEATURE_PRE_SPLIT_KEYPOOL are HD\n+    // For older wallets the presence of seed_id indicates if HD is enabled.\n+    // Support for empty HD capable wallets was added in 0.18\n+    return CanSupportFeature(FEATURE_PRE_SPLIT_KEYPOOL) || HasHDSeed();\n+}\n+\n void CWallet::SetWalletFlag(uint64_t flags)\n {\n     LOCK(cs_wallet);\n@@ -3214,6 +3224,9 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (IsLocked())\n             return false;\n \n+        // If wallet supports HD but no seed is present, do not top up keypool\n+        if(IsHDEnabled() && !HasHDSeed()) return true;\n+\n         // Top up key pool\n         unsigned int nTargetSize;\n         if (kpSize > 0)\n@@ -3336,6 +3349,10 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n         return false;\n     }\n \n+    if (IsHDEnabled() && !HasHDSeed()) {\n+        return false;\n+    }\n+\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n@@ -3863,7 +3880,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags, bool create_empty)\n {\n     const std::string& walletFile = location.GetName();\n \n@@ -3979,20 +3996,28 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n     if (fFirstRun)\n     {\n-        // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n-        walletInstance->SetMinVersion(FEATURE_LATEST);\n+        // Ensure this wallet can only be opened by clients supporting HD with\n+        // chain split and expects no default key.\n+        if (!create_empty) {\n+            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        } else {\n+            // In addition, this wallet can only be opened by clients\n+            // supporting empty wallets. Older clients might see these as\n+            // non-HD wallets and try to upgrade them.\n+            walletInstance->SetMinVersion(FEATURE_LATEST);\n+        }\n \n         if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             //selective allow to set flags\n             walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-        } else {\n+        } else if (!create_empty) {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n-        }\n+        } // Otherwise, do not generate a new seed\n \n         // Top up the keypool\n-        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n+        if (!create_empty && !walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "cf52eed639f87868ac00addc0ef31611eaed9b51",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -115,7 +115,9 @@ enum WalletFeature\n \n     FEATURE_PRE_SPLIT_KEYPOOL = 169900, // Upgraded to HD SPLIT and can have a pre-split keypool\n \n-    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n+    FEATURE_ALLOW_EMPTY = 179900, // Wallet can be created without keys\n+\n+    FEATURE_LATEST = FEATURE_ALLOW_EMPTY\n };\n \n //! Default for -addresstype\n@@ -1096,7 +1098,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0, bool create_empty = false);\n \n     /**\n      * Wallet post-init setup\n@@ -1110,6 +1112,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() const { return hdChain; }\n \n+    /* Returns true if wallet has an HD seed */\n+    bool HasHDSeed() const;\n+\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n "
      },
      {
        "sha": "34a42b704be33f186afe83962615dac6cf626e82",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -117,8 +117,8 @@\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n-    'wallet_disableprivatekeys.py',\n-    'wallet_disableprivatekeys.py --usecli',\n+    'wallet_createwallet.py',\n+    'wallet_createwallet.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "ae5fe4dacc7cdc8db07c2fcbe873ad2492ac3666",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=8ce17c0fb0ea51e8047db3d5a23bef747bbedf3a",
        "patch": "@@ -0,0 +1,63 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test createwallet arguments.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class CreateWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(1) # Leave IBD for sethdseed\n+\n+        self.nodes[0].createwallet(wallet_name='w0')\n+        w0 = node.get_wallet_rpc('w0')\n+        address1 = w0.getnewaddress()\n+\n+        self.log.info(\"Test disableprivatekeys creation.\")\n+        self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n+        w1 = node.get_wallet_rpc('w1')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info(\"Test empty creation with private keys disabled.\")\n+        self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, empty=True)\n+        w2 = node.get_wallet_rpc('w2')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info(\"Test empty creation with private keys enabled.\")\n+        self.nodes[0].createwallet(wallet_name='w3', disable_private_keys=False, empty=True)\n+        w3 = node.get_wallet_rpc('w3')\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", w3.getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", w3.getrawchangeaddress)\n+        # Import private key\n+        w3.importprivkey(w0.dumpprivkey(address1))\n+        # Imported private keys are currently ignored by the keypool\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", w3.getnewaddress)\n+        # Set the seed\n+        w3.sethdseed()\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 1)\n+        w3.getnewaddress()\n+        w3.getrawchangeaddress()\n+\n+if __name__ == '__main__':\n+    CreateWalletTest().main()"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e12df93e5969491313a36d68a45e2b76ee139f42/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e12df93e5969491313a36d68a45e2b76ee139f42/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=e12df93e5969491313a36d68a45e2b76ee139f42",
        "patch": "@@ -1,35 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test disable-privatekeys mode.\n-\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_raises_rpc_error,\n-)\n-\n-\n-class DisablePrivateKeysTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-        self.supports_cli = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        node = self.nodes[0]\n-        self.log.info(\"Test disableprivatekeys creation.\")\n-        self.nodes[0].createwallet('w1', True)\n-        self.nodes[0].createwallet('w2')\n-        w1 = node.get_wallet_rpc('w1')\n-        w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n-        w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n-\n-if __name__ == '__main__':\n-    DisablePrivateKeysTest().main()"
      }
    ]
  }
]