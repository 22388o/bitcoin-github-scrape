gmaxwell,2014-12-17T06:57:35Z,"Okay I was about to wag my finger at you about making it IsStandard making the hardfork possible then I caught that you said _passing_.    Your text is reasonably clear, I'm leaving this comment just in case someone else makes the same reading error.\n\nI'm unsure how useful this is. There is some risk that people will mistake IsStandardness enforcement for adequate security.  (""I tried to cheat a",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67284164,67284164,
petertodd,2014-12-17T07:09:24Z,"> Okay I was about to wag my finger at you about making it IsStandard making the hardfork possible\n\nTo be clear, what exactly were you thinking I'd done?\n\n> I'm unsure how useful this is. There is some risk that people will mistake IsStandardness enforcement for adequate security.\n\nYeah, OTOH, the many of the applications for CLTV like micropayment channels already have some of that risk in ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67284965,67284965,
gmaxwell,2014-12-17T07:11:08Z,"@petertodd My initial read of the description had me thinking you made CLTV IsStandard with no constraint on validity (""No code to start the process of a soft fork""), creating a risk for miners who might included invalid ones.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67285066,67285066,
petertodd,2014-12-17T07:13:50Z,"@gmaxwell Ah! Yeah, the NOPx discouragement code still applies, and in fact has a special case to make sure that if CLTV isn't enabled, NOP2 usage is discouraged: https://github.com/bitcoin/bitcoin/pull/5496/files#diff-be2905e2f5218ecdbe4e55637dac75f3R339\n\n(DISCOURAGE_UPGRADABLE_NOPS is unittested too, so without that the unittests would fail)\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67285250,67285250,
btcdrak,2014-12-17T08:06:21Z,"@petertodd I have to agree with @gmaxwell, something about your PR wording immediately made me jump to the wrong conclusion too.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67289008,67289008,
petertodd,2014-12-17T10:36:37Z,Any suggestions on wording this better?\n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67304585,67304585,
petertodd,2014-12-25T06:20:56Z,Rebased on top of #5521 \n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68089494,68089494,
NicolasDorier,2014-12-25T22:10:20Z,"Just to know if I understand well.\n\nYou would want such mempool only check of CLTV out for 0.11, then, if it works without any notable problems and with some people building stuff on top of it, pushing that into the miners' rule for 0.12 ?\n\nI'm asking because I intend to build some stuff on top of it, and not really motivated to run and adapt my code for a viacoin node. So I guess my only opti",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114109,68114109,
TheBlueMatt,2014-12-25T22:14:12Z,"Hopefully we enforce more than mempool for 0.11, but enforcing for mempool is a one-line change after merging the code (which we should move forward with, whether with mempool enforcement or not)\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114175,68114175,
gmaxwell,2014-12-25T22:25:27Z,@petertodd Say the relay rule were widely deployed. What would be the plan if our we discovered that the exact rule construction wasn't the one we wanted?  \n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114361,68114361,
NicolasDorier,2014-12-25T22:36:06Z,"I see. That's great to know !\n\nI'll be waiting for 0.11, I don't have the time/skill to compile bitcoind from sources on linux.\n\nNot a deal breaker though, I have my own script evaluator in .NET, I will port the CLTV + tests in it so I can test without a node. Not perfect, but I should be able to play with it truthfully enough.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114539,68114539,
petertodd,2014-12-25T22:44:02Z,"Since it's just a relay rule at worst you just reject transactions with NOP2 from the mempool - the default behaviour - pick a new NOP#, and try out the new behaviour. \n\nThis means the implementation either does one or the other version - nice and clean - and neither version will interfere with the other. Of course both NOPs will make it into blocks, but that's not going to do us any harm as nei",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114665,68114665,
petertodd,2015-04-21T04:43:39Z,Rebased on master.\n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-94636217,94636217,
petertodd,2015-04-21T04:45:04Z,^ @jgarzik @btcdrak \n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-94636345,94636345,
morcos,2015-05-01T17:22:50Z,ACK\nI reviewed this and tested by creating this small RPC test:\nhttps://gist.github.com/morcos/61084ac8a33363278638\n(it requires a rebase to master first as it uses some of the new python tools)\n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98182156,98182156,
jgarzik,2015-05-01T17:28:01Z,"Concept ACK - I think this falls on the side of being a useful soft fork upgrade half-step.\n\nOf course, I would prefer to be more aggressive and go the entire way in one step.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98182959,98182959,
petertodd,2015-05-03T22:04:42Z,"@morcos Actually your RPC test should work on master now; pull-req #5981 has been merged.\n\n@jgarzik We don't know if the most recent soft-fork will actually trigger prior to the release of v0.11, especially with @laanwj's proposed schedule. Merging this for v0.11 would at least get 95% of the code in the release, with actual enforcement happening in a v0.11.1 release. Getting off the rebase trea",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98549694,98549694,
TheBlueMatt,2015-05-04T02:19:01Z,"I like merging this, but doing both CLTV things in one swoop would be really nice. Certainly if we're gonna use one of the precious few OP_NOPs we have we might as well make it more flexible. The relative-CLTV idea is incredibly useful in systems like the proposed Lightning network, a proposal to build on top of payment challen hub-and-spoke networks (though Ive been unsuccessful in getting them t",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98568239,98568239,
petertodd,2015-05-04T05:09:32Z,@TheBlueMatt I replied on the mailing list: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07442.html\n,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98589469,98589469,
petertodd,2015-05-09T09:08:15Z,"Updated to add a type field for future soft-forks, e.g. a relative CLTV upgrade.\n\nBIP updated: https://github.com/bitcoin/bips/pull/153\n\nCLTV demos: https://github.com/petertodd/checklocktimeverify-demos/commit/148e91e74f8b9e31d0bf35ddcf506b5030a05232\n\nThis should satisfy all objections. I propose this is merged for v0.11.0, and the actual soft-fork implemented in v0.11.1 once the ongoing BI",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-100454263,100454263,
btcdrak,2015-05-11T22:35:36Z,I have tested the code and sent the following tx `fc6fa964c510e79b55ccea5bc8f21a505867b8ed286f6da02172bf8c297720dd` on testnet using the following redeem script `632102b0efefbe8f8feaabc74ebde89928bfacc6471fe5f4db43b19c2ff4e58fdfc290ad670400ca9a3b51b16d6821032c8296c603d3c5802027d57a8f3ae382d7464abfda6f80e4f7d592ce23d696e7ac` which decodes to `OP_IF 02b0efefbe8f8feaabc74ebde89928bfacc6471fe5f4db43b1,https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101067294,101067294,
NicolasDorier,2015-05-12T12:57:29Z,"The goal of doing that is to workaround the NOPX scarcity.\nWould it not be better to take currently unused NOP for creating an ""OP_EXT"" instruction. \n\nThen defines\n\n0 OP_EXT would be for CHECKLOCKTIMEVERIFY,\n\n1 OP_EXT would be for the next soft fork,\n\n2 OP_EXT would be for the third soft fork, etc...\n\nYour PR seems to only add extensibility for future relative CLTV, when I think, it can",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101266479,101266479,
btcdrak,2015-05-12T13:02:25Z,"@NicolasDorier I am not sure I understand, the parameter that precedes `OP_NOP2` already allows for any number of future CLTV implementations (e.g. relative CLTV and other implementations yet to be imagined), `1 OP_NOP2`, `2 OP_NOP2`, `3 OP_NOP2`, `4 OP_NOP2`, `5 OP_NOP2`, `6 OP_NOP2`, `7 OP_NOP2`.... `n OP_NOP2`\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101267307,101267307,
NicolasDorier,2015-05-12T13:10:08Z,"What I mean is that you just changed the CLTV by requiring 1 OP_NOP2 for doing it.\nYou did it for NOP scarcity reason, and (not a big deal though), it broke the simpler code before.\n\nThe rational for adding the PUSH 1, was permitting new mode and implementation for CLTV in the future without wasting other NOP.\n\nMy point is that NOP scarcity is not a problem worth considering. \n\nBecause the ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101269691,101269691,
NicolasDorier,2015-05-12T13:44:16Z,"Following what I just said, the latest PR is equivalent with choosing OP_EXT = NOP2, CLTV = NOP11 and RCLTV = NOP12, so why not waiting NOP10 for OP_EXT and just using NOP2 for CLTV and NOP3 for RCLTV.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101286528,101286528,
gavinandresen,2015-05-12T13:59:17Z,"I agree with @NicolasDorier, no reason to worry about NOP scarcity until we hit OP_NOP10-- and when we do, we can redefine OP_NOP10 as OP_EXT.\n\nI think there is a good chance before then one of the OP_NOP's will be used to define an entirely different, redesigned scripting system, so we'll never get there.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403,101293403,
NicolasDorier,2015-05-12T15:41:37Z,"Just to be clear, this is not an objection with the parametized CTLV. I just wanted to point out that the reason for doing it were flawed but I don't feel strongly about that.\n\nI would prefer a parametized CLTV for the 15may freeze than delaying the CLTV one more time for the reasons I gave.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101324711,101324711,
petertodd,2015-05-12T17:10:50Z,"I opened a pull-req with the unparameterized version as well, #6124 \n\nI personally prefer the unparameterized version without the type argument; I agree with @gavinandresen that running out of NOP's isn't a major concern. More importantly though, let's pick one and get this merged for v0.11.0\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101353180,101353180,
btcdrak,2015-05-12T17:13:58Z,"@NicolasDorier It's a valid point. I don't particularly care either way, although the PR was adjusted to account for discussion on the mailing list. I'm fine with either. Prefer the original #6124\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101354205,101354205,
petertodd,2015-05-15T17:53:05Z,"Seems we have rough consensus that a type parameter isn't needed, so closing in favor of #6124 \n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102470882,102470882,
maaku,2015-05-16T16:46:23Z,"Gah. I was not subscribed to this issue and didn't see the last few days debate.\n\nAllow me to make an argument _in favor of_ the type parameter. I have never seen opcode scarcity as the prime justification, and that was not the motivation for suggesting it as I did in an earlier PR. The reason I believe it is valuable to include the type parameter is for possible type checking efficiencies and f",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102650333,102650333,
maaku,2015-05-16T17:05:38Z,"Also, I should mention that including the type parameter allows OP_CLTV and its relative variant to share nearly all of their implementation inline without a call-out. I hope to have code demonstrating this available in the very near future.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102655339,102655339,
jtimon,2015-05-16T17:09:03Z,"You can still reuse code in the checker (https://github.com/bitcoin/bitcoin/pull/6124/files#diff-be2905e2f5218ecdbe4e55637dac75f3R1129), having 2 separated opcodes for cltv and rcltv doesn't preclude code reuse.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102655499,102655499,
petertodd,2015-05-16T18:55:14Z,"@maaku I think that's making a lot of premature assumptions about how the scripting system will be extended in the future. I think we're a lot more likely to implement an OP_MAST/OP_EVAL which just calls a new scheme, rather than continue extending what we have now.\n\nre: code reuse, I'm not convinced that avoiding code reuse in cases where we're talking about just a few lines of consensus-critic",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102666167,102666167,
maaku,2015-05-16T19:04:42Z,"@petertodd the only non-aesthetic argument I've seen for multiple top-level opcodes instead of an extended opcode is that it saves 1 byte. However that byte is in the scriptSig, as there truly isn't any reason to use CLTV / RCLTV within a scriptPubKey. On the other hand, there may be future extensions to script which we want the use of an unallocated NOP in scriptPubKeys, I'd much rather take the ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102666617,102666617,
petertodd,2015-05-16T19:11:58Z,"@maaku Hmm? It's quite likely that we'll see CLTV use in scriptPubKey's for payment channels for backup reasons, and absolutely guaranteed they'll be in redeemScripts. CLTV arguments are certainly always going to be in scriptPubKey's/redeemScript's as they rarely, if ever, are something where it makes sense to provide to spend a txout.\n\nAnyway, the cost of an extra script version byte when it co",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102667144,102667144,
jtimon,2015-05-16T19:41:29Z,"@maaku I believe the only non-aesthetic argument in the other direction is no_op scarcity.\nThe reuse argument is invalid and your other ""primary argument"" seems aesthetic to me as well.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102669459,102669459,
jgarzik,2015-05-16T20:30:18Z,"Non-aesthetic?  In a wider context, agree w/ @petertodd RE _""I think we're a lot more likely to implement an OP_MAST/OP_EVAL which just calls a new scheme, rather than continue extending what we have now.""_\n\ne.g. OP_ETHEREUM would likely just require one opcode.\n",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102685625,102685625,
maaku,2015-05-16T21:50:24Z,"Even though I'm the first to argue in favor of a script replacement, when discussing changes to the existing script system I think it is prudent to assume that we'll be stuck with script for much longer than we anticipate. I think that conservatism favors a two-byte extension opcode: (1) it leaves more single byte nopcodes available for OP_EVAL-like extensions which benefit more from brevity, and ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102701478,102701478,
petertodd,2015-05-16T21:55:36Z,"Without a full script replacement why would you ever need any script authoring tools? Script is just too limited to warrant that kind of complexity right now - there are literally less than a dozen or so basic script fragments that are useful.\n\nOn 16 May 2015 17:50:58 GMT-04:00, Mark Friedenbach notifications@github.com wrote:\n\n> Even though I'm the first to argue in favor of a script replacem",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102702244,102702244,
jtimon,2015-05-16T23:13:33Z,"> (1) it leaves more single byte nopcodes available for OP_EVAL-like extensions which benefit more from brevity,\n\nLet's reserve OP_16 for script2.0 and let's assume that will take ages to be deployed.\nLet's reserve OP_15 for taking the extra byte instead of doing it now, that will give us 255 more instructions.\nLet's reserve OP_15 255 to take a short (2 bytes) in a similar way, that will give ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102710437,102710437,
maaku,2015-05-16T23:55:39Z,"Make OP_NOP2 fail unless there are at least two items on the stack. It doesn't care what items, but they must be >=2. At this point a script tool, or relay policy is written that has no idea what the extra OP_NOP2 functionality is, but it knows that at the point OP_NOP2 is executed, there must be two items on the stack. A script compiler or transaction validator throws an error if it can determine",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102712217,102712217,
petertodd,2015-05-19T06:00:26Z,"@maaku Relay nodes already drop transactions that use unknown opcodes; in fact I should have done that for this type patch... shows it's an ill-advised idea IMO - yet another thing to take into account over the simpler ""one-opcode one-function"" principle.\n\nAgain, I'm just not seeing the value of things like ""type checkers"" for the scripting language right now, given how utterly simple it is. Equ",https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-103349229,103349229,
SergioDemianLerner,2014-12-17T14:21:12Z,"I don't understand why this check returns false and why it's not done before (nLockTime > (int64_t)txTo.nLockTime). The comment says that if IsFinal() = true, then the CHECKLOCKTIMEVERIFY is bypassed (accepted).\n",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973702,21973702,src/script/interpreter.cpp
SergioDemianLerner,2014-12-17T14:23:20Z,I will read the spec again.\n,https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973847,21973847,src/script/interpreter.cpp
petertodd,2014-12-17T14:42:33Z,"You're reading it backwards: we're trying to prevent someone from _bypassing_ the nLockTime of the transaction by setting every nSequence field to MAXINT.\n\nAs for the order of the tests, I designed it to go from least data required to prove to most.\n\nOn 17 December 2014 09:21:43 GMT-05:00, SergioDemianLerner notifications@github.com wrote:\n\n> > -    if (nLockTime > (int64_t)txTo.nLockTime)\n",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21975040,21975040,src/script/interpreter.cpp
SergioDemianLerner,2014-12-17T14:57:05Z,Right. The Bitcoin protocol first checks the nLockTime and THEN checks the sequence num if nLockTime check is false. I had to read again the IsFinalTx() function. \n,https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976075,21976075,src/script/interpreter.cpp
SergioDemianLerner,2014-12-17T15:04:07Z,"The comment regarding ""bypassing"" is a bit confusing. Shouldn't it say ""Finally CHECKLOCKTIMEVERIFY WILL INVALIDATE THE REDEEMER TRANSACTION if the corresponding txin has been finalized by setting nSequence to maxint.""\n",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976623,21976623,src/script/interpreter.cpp
petertodd,2014-12-17T15:12:42Z,"I'm not sure that's any less confusing.\n\nThe key concept to understand is that CLTV only checks the transaction's nLockTime field, not the actual block height or time. Thus anything that disables nLockTime's effect can bypass CLTV.\n\nIncidentally I think part of the confusion is how the SignatureChecker object separates the logic of CLTV into two completely disjoint parts for no clear reason. I",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21977243,21977243,src/script/interpreter.cpp
sipa,2014-12-17T16:13:35Z,"I believe I would have found @SergioDemianLerner's suggestion to be helpful when trying to understand the code - and that was starting from a version that had everything in one place.\n\nExtra documentation on the SignatureChecker class and its virtual methods is probably helpful though. They essentially represent ""verify something from the context"". \n",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21982101,21982101,src/script/interpreter.cpp
petertodd,2014-12-20T06:17:01Z,"@sipa My thinking there is that the comments explain _why_ the code is the way it is, the code itself should itself be sufficient to explain what it's doing. This is particularly true in consensus-critical code like this patch where the code itself is extremely simple and the implications and design criteria are the important part. @SergioDemianLerner's suggested change doesn't explain the why; if",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r22140162,22140162,src/script/interpreter.cpp
jtimon,2015-05-12T19:21:41Z,"Can you move all this to an inline function outside of EvalScript?\nIt will be build equivalent but much more readable (at the very least for the indentation, but seeing the parameters of each opcode is interesting too).\nAt some point we should do something like #5153 (having a check-identical-build script would help making that trivial to review and non-risky in a completely obvious way), so we ",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170312,30170312,src/script/interpreter.cpp
btcdrak,2015-05-12T19:25:37Z,@jtimon Could codestyle nits be left until after the PR is merged?\n,https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170656,30170656,src/script/interpreter.cpp
jtimon,2015-05-12T19:33:37Z,"Well, it would be delaying that for the later bigger cleanup of EvalScript, the point is just to make to history cleaner by squashing the fixup into https://github.com/petertodd/bitcoin/commit/dc17027f2c37b97ce5b40154a64f18c16a72ee18.\nBut adding a fixup commit that is proven to produce an identical build it's not really a blocker IMO.\nWhat's blocking this is the lack of decision on the parametri",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171391,30171391,src/script/interpreter.cpp
btcdrak,2015-05-12T19:38:59Z,I think the issue of using parameterised version or not is quite clear: there isn't scarcity as pointed out by @gavinandresen and @NicolasDorier because OP_NOP10 can be repurposed to a general extension. Until we reach the limits it surely makes sense to produce concise scripts without parameter hacks?\n,https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171866,30171866,src/script/interpreter.cpp
jtimon,2015-05-12T19:39:59Z,"Well, another blocker is the new softfork deployment mechanism @sipa is working on.\nAnd remember this doesn't have to be part of 0.11, we could just release 0.11.1 with this a week after releasing 0.11.\nSo, yes, I think we have time for an identical-build fixup commit (won't imply more testing), why clean later when you can avoid it in the first place?\n",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171946,30171946,src/script/interpreter.cpp
petertodd,2015-05-12T20:56:27Z,"@jtimon I'm skeptical of making this an inline function when no other opcodes are precisely because when (if!) we change other opcodes to be inline functions the last thing we need is two different ways of doing it. Better to stick to the same, well-tested, mechanism everything else uses; making it an inline function now risks having to change it again anyway.\n\nre: the softfork mechanism, I'm we",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30179423,30179423,src/script/interpreter.cpp
jtimon,2015-05-13T01:06:50Z,"re softfork: ok, that makes sense.\n\nI really hope is when and not if. Your argument sounds like ""let's just dump the trash in the floor of the kitchen because the rest of the house is also dirty"".\nI don't understand why having ugly code should preclude us from written the new stuff in a cleaner way, it will be less work and smaller diffs in future cleanups.\n\n> same, **well-tested**, mechanism",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30195552,30195552,src/script/interpreter.cpp
petertodd,2015-05-15T17:57:58Z,">  I don't understand why having ugly code should preclude us from written the new stuff in a cleaner way, it will be less work and smaller diffs in future cleanups.\n\nWell, like I say, I think having to fix something in the future in two different ways rather than just one different way is more work. I'd give the analogy of a factory that produces drums of arsenic as a byproduct, which currently",https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30430518,30430518,src/script/interpreter.cpp
