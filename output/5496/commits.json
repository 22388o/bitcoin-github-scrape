[
  {
    "sha": "99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTA4OGQ2MGQ4YTc3NDdjNmQxYTdmZDVkOGNkMzg4YmUxYjNlMTM4",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T05:00:01Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-05-09T08:29:47Z"
      },
      "message": "Make CScriptNum() take nMaxNumSize as an argument\n\nWhile the existing numeric opcodes are all limited to 4-byte bignum\narguments, new opcodes will need different limits.",
      "tree": {
        "sha": "07b2c24e6eefb91b9bbc749824824d3e62625759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b2c24e6eefb91b9bbc749824824d3e62625759"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7eb66182f3799e695f655e40d58ed2fdaa7044e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb66182f3799e695f655e40d58ed2fdaa7044e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb66182f3799e695f655e40d58ed2fdaa7044e1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a4b9de30468f3e4c8be0d3047a89cc7045c43408",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
        "patch": "@@ -195,7 +195,10 @@ class CScriptNum\n         m_value = n;\n     }\n \n-    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n     {\n         if (vch.size() > nMaxNumSize) {\n             throw scriptnum_error(\"script number overflow\");\n@@ -318,8 +321,6 @@ class CScriptNum\n         return result;\n     }\n \n-    static const size_t nMaxNumSize = 4;\n-\n private:\n     static int64_t set_vch(const std::vector<unsigned char>& vch)\n     {"
      },
      {
        "sha": "d95724dbe17b7d89ab7bba5c103ca75645dcf52c",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
        "patch": "@@ -145,7 +145,7 @@ static void RunCreate(const int64_t& num)\n {\n     CheckCreateInt(num);\n     CScriptNum scriptnum(num);\n-    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n+    if (scriptnum.getvch().size() <= CScriptNum::nDefaultMaxNumSize)\n         CheckCreateVch(num);\n     else\n     {"
      }
    ]
  },
  {
    "sha": "48e9c57cf06352f890eac4285ae022d8746cf3fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGU5YzU3Y2YwNjM1MmY4OTBlYWM0Mjg1YWUwMjJkODc0NmNmM2Zk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T05:02:59Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-05-09T08:33:49Z"
      },
      "message": "Move LOCKTIME_THRESHOLD to src/script/script.h\n\nWill now be needed by CHECKLOCKTIMEVERIFY code.",
      "tree": {
        "sha": "100a64bf4a6b04dbeaae983c320a00c65a07441f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/100a64bf4a6b04dbeaae983c320a00c65a07441f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48e9c57cf06352f890eac4285ae022d8746cf3fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e9c57cf06352f890eac4285ae022d8746cf3fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48e9c57cf06352f890eac4285ae022d8746cf3fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e9c57cf06352f890eac4285ae022d8746cf3fd/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99088d60d8a7747c6d1a7fd5d8cd388be1b3e138"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e9c57cf06352f890eac4285ae022d8746cf3fd/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e9c57cf06352f890eac4285ae022d8746cf3fd/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=48e9c57cf06352f890eac4285ae022d8746cf3fd",
        "patch": "@@ -12,7 +12,5 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "45a06acc9f6cbf3c9957cdcd2ef2c0e756d874e0",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e9c57cf06352f890eac4285ae022d8746cf3fd/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e9c57cf06352f890eac4285ae022d8746cf3fd/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=48e9c57cf06352f890eac4285ae022d8746cf3fd",
        "patch": "@@ -18,6 +18,10 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n+// Threshold for nLockTime: below this value it is interpreted as block number,\n+// otherwise as UNIX timestamp.\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n {"
      }
    ]
  },
  {
    "sha": "dc17027f2c37b97ce5b40154a64f18c16a72ee18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzE3MDI3ZjJjMzdiOTdjZTViNDAxNTRhNjRmMThjMTZhNzJlZTE4",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T07:44:25Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-05-09T08:33:49Z"
      },
      "message": "Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)\n\n<nLockTime> 1 CHECKLOCKTIMEVERIFY -> <nLockTime> 1\n\nFails if tx.nLockTime < nLockTime, allowing the funds in a txout to be\nlocked until some block height or block time in the future is reached.\n\nOnly the logic and unittests are implemented; this commit does not have\nany actual soft-fork logic in it.\n\nThanks to Pieter Wuille for rebase.\n\nCredit goes to Gregory Maxwell for the suggestion of comparing the\nargument against the transaction nLockTime rather than the current\ntime/blockheight directly.",
      "tree": {
        "sha": "973a7c41a31fa3472fba7baf9bebfabece6ba261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/973a7c41a31fa3472fba7baf9bebfabece6ba261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc17027f2c37b97ce5b40154a64f18c16a72ee18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc17027f2c37b97ce5b40154a64f18c16a72ee18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc17027f2c37b97ce5b40154a64f18c16a72ee18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc17027f2c37b97ce5b40154a64f18c16a72ee18/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48e9c57cf06352f890eac4285ae022d8746cf3fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e9c57cf06352f890eac4285ae022d8746cf3fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48e9c57cf06352f890eac4285ae022d8746cf3fd"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 247,
      "deletions": 3
    },
    "files": [
      {
        "sha": "146f48cc48a6dbabcf6a51339f86abdcc5e1538f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 2,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n+                        // not enabled; treat as a NOP2\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // Type of locktime to verify. Currently the only type\n+                    // defined is 1, which is to verify the nLockTime\n+                    // absolutely. If the type is not recognised, the opcode is\n+                    // treated as a NOP to allow for upgrades in the future.\n+                    //\n+                    // That said, for simplicity sake, we *do* require the\n+                    // argument to be a (possibly minimal) number within the\n+                    // numerical limits.\n+                    const CScriptNum nType(stacktop(-1), fRequireMinimal);\n+                    if (nType != 1)\n+                        break;\n+\n+                    // Only if the type is recognised do we require the stack\n+                    // to have the second argument. The alternative, requiring\n+                    // the stack to always have both arguments, would prohibit\n+                    // future CLTV upgrades that don't need two arguments.\n+                    if (stack.size() < 2)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n \n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                    // Note that elsewhere numeric opcodes are limited to\n+                    // operands in the range -2**31+1 to 2**31-1, however it is\n+                    // legal for opcodes to produce results exceeding that\n+                    // range. This limitation is implemented by CScriptNum's\n+                    // default 4-byte limit.\n+                    //\n+                    // If we kept to that limit we'd have a year 2038 problem,\n+                    // even though the nLockTime field in transactions\n+                    // themselves is uint32 which only becomes meaningless\n+                    // after the year 2106.\n+                    //\n+                    // Thus as a special case we tell CScriptNum to accept up\n+                    // to 5-byte bignums, which are good until 2**32-1, the\n+                    // same limit as the nLockTime field itself.\n+                    const CScriptNum nLockTime(stacktop(-2), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX 1 CHECKLOCKTIMEVERIFY.\n+                    if (nLockTime < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // Actually compare the specified lock time with the transaction.\n+                    if (!checker.CheckLockTime(nLockTime))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n+\n+                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1084,6 +1145,43 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo->vin[nIn].IsFinal())\n+        return false;\n+\n+    return true;\n+}\n+\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      },
      {
        "sha": "4d103ef84822d2c6c6ba76b0fe9901924352fcb0",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -76,6 +76,10 @@ enum\n     // (softfork safe, BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n+\n+    // Verify CHECKLOCKTIMEVERIFY (BIP65)\n+    //\n+    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -88,6 +92,11 @@ class BaseSignatureChecker\n         return false;\n     }\n \n+    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -103,6 +112,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "be2a57c3bc2cef4455d26f8c2cb0c05ad1e3ea59",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -154,6 +154,7 @@ enum opcodetype\n     // expansion\n     OP_NOP1 = 0xb0,\n     OP_NOP2 = 0xb1,\n+    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,"
      },
      {
        "sha": "f1aa1fb408ae57ee4d89e860e5f24211c709af44",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -47,6 +47,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"OP_RETURN was encountered\";\n         case SCRIPT_ERR_UNBALANCED_CONDITIONAL:\n             return \"Invalid OP_IF construction\";\n+        case SCRIPT_ERR_NEGATIVE_LOCKTIME:\n+            return \"Negative locktime\";\n+        case SCRIPT_ERR_UNSATISFIED_LOCKTIME:\n+            return \"Locktime requirement not satisfied\";\n         case SCRIPT_ERR_SIG_HASHTYPE:\n             return \"Signature hash type missing or not understood\";\n         case SCRIPT_ERR_SIG_DER:"
      },
      {
        "sha": "bb10b8a2932a53eb72342581a95b6b712d41a4d2",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -35,6 +35,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n+    /* OP_CHECKLOCKTIMEVERIFY */\n+    SCRIPT_ERR_NEGATIVE_LOCKTIME,\n+    SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n+\n     /* BIP62 */\n     SCRIPT_ERR_SIG_HASHTYPE,\n     SCRIPT_ERR_SIG_DER,"
      },
      {
        "sha": "5424aae729d74189a91e08c1d908d22d06da9f4e",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -120,6 +120,78 @@\n [[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510100ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight nLockTime=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Input locked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"] ,\n+  [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument 2^32 with nLockTime=2^32-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Same, but with nLockTime=2^31-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000035151b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x9c0876b427ee3c9389be376e0071730a76714818 EQUAL\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004035151b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"The type argument must be a valid number within numerical limits\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 2147483648 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 -2147483648 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 0x05 0100000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "c1be7d2257b5249a8ea8247c53826957376a7a67",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -187,5 +187,59 @@\n \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH\"],\n \n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Any non-maxint nSequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD 1 NOP2\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD 1 NOP2\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded arguments are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 1 NOP2\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"If the type argument is not 1, CLTV continues to act as a NOP\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-2147483647 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000035151b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x9c0876b427ee3c9389be376e0071730a76714818 EQUAL\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004035151b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "fe7f00a8b23ec9b0370e7822680fbdedc3eeadc9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc17027f2c37b97ce5b40154a64f18c16a72ee18/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "patch": "@@ -39,7 +39,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK);\n+    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "14a63f433cf41028cbf670e60538c8adabecf067",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGE2M2Y0MzNjZjQxMDI4Y2JmNjcwZTYwNTM4YzhhZGFiZWNmMDY3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-12-17T05:31:44Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-05-09T08:40:18Z"
      },
      "message": "Enable CHECKLOCKTIMEVERIFY as a standard script verify flag\n\nTransactions that fail CLTV verification will be rejected from the\nmempool, making it easy to test the feature. However blocks containing\n\"invalid\" CLTV-using transactions will still be accepted; this is *not*\nthe soft-fork required to actually enable CLTV for production use.",
      "tree": {
        "sha": "9c7fe43d7b6cbbe9c3e10ae3d2a30389aa1d2661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c7fe43d7b6cbbe9c3e10ae3d2a30389aa1d2661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14a63f433cf41028cbf670e60538c8adabecf067",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJVTcfzXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAxMmM0MzhhNTk3YWQxNWRmNjk3ODg4YmU1NzlmNGY4MThh\nMzA1MTdjZDYwZmJkYzgvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkfs6jgf9Glb543xWLqoqScu16eAyIMRF\nMvOFRi5MnK8MZ6at77g7GfGqHFomKC3EMy/HGFwP1ppE94p0q8kC74o7t2AEKPO+\nJh3VTF+b0a6fC7DIOLtDxinOE1sG53ErjObu5cllvKfTB1zOWGRND5AMJX4K7GuM\nW4xjr09Xz6Y469/gAH4ktjDlxB+qzYvGDwjYokurwZJkC0w62+Q2psvqEZoH/I30\ntqaa+E6GEu0HNHVVY1WYTwBYHm0hPb2cfwtN3zWorJOpq/VZtLXHz4A8/qZYZtIN\nNy57dSBF7C0IVMKRZ2kLtQQxlyqnnSmbc8OIKd8kFexXy6IZnghDNAQDJQlRDg==\n=06Ll\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c7fe43d7b6cbbe9c3e10ae3d2a30389aa1d2661\nparent dc17027f2c37b97ce5b40154a64f18c16a72ee18\nauthor Peter Todd <pete@petertodd.org> 1418794304 -0500\ncommitter Peter Todd <pete@petertodd.org> 1431160818 -0400\n\nEnable CHECKLOCKTIMEVERIFY as a standard script verify flag\n\nTransactions that fail CLTV verification will be rejected from the\nmempool, making it easy to test the feature. However blocks containing\n\"invalid\" CLTV-using transactions will still be accepted; this is *not*\nthe soft-fork required to actually enable CLTV for production use.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14a63f433cf41028cbf670e60538c8adabecf067",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14a63f433cf41028cbf670e60538c8adabecf067",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14a63f433cf41028cbf670e60538c8adabecf067/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc17027f2c37b97ce5b40154a64f18c16a72ee18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc17027f2c37b97ce5b40154a64f18c16a72ee18"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3b401dfe4f085c472e81b1d9ace440a9971ce72b",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14a63f433cf41028cbf670e60538c8adabecf067/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14a63f433cf41028cbf670e60538c8adabecf067/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=14a63f433cf41028cbf670e60538c8adabecf067",
        "patch": "@@ -50,7 +50,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK;\n+                                                         SCRIPT_VERIFY_CLEANSTACK |\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      }
    ]
  }
]