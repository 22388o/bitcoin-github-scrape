[
  {
    "sha": "9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2E3ODU3ZGY3NGM1MmViMmM0NmJlMzZjODhhMTI4NzliZTZjZjhj",
    "commit": {
      "author": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-01T19:15:23Z"
      },
      "committer": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-03T21:58:30Z"
      },
      "message": "Rationalize currency unit to \"BTC\"\n\nPreviously various user-facing strings have used inconsistent currency units \"BTC\",\n\"btc\" and \"bitcoins\". This adds a single constant and uses it for each reference to\nthe currency unit.\n\nAlso adds a description of the unit for --maxtxfee, and adds the missing \"amount\"\nfield description to the (deprecated) move RPC command.",
      "tree": {
        "sha": "b9273763228ed4a847d3bc64c7c68c820c0b0e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9273763228ed4a847d3bc64c7c68c820c0b0e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 48,
      "deletions": 40
    },
    "files": [
      {
        "sha": "b46918198448b1487e500a49dfceea3bec4b434e",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"tinyformat.h\"\n \n+const std::string CURRENCY_UNIT = \"BTC\";\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n@@ -27,5 +29,5 @@ CAmount CFeeRate::GetFee(size_t nSize) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n+    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "90e6b5aa8ed577868a15da0ad50fbbcdcfc42f79",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -16,6 +16,8 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n+extern const std::string CURRENCY_UNIT;\n+\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin"
      },
      {
        "sha": "08e1a3d1a68c0e95e9efae1c279c2d027b2d28f2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -342,16 +342,17 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n@@ -388,7 +389,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {"
      },
      {
        "sha": "80d49490d2daf4fe104054dba117e15ff5f6d248",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -192,7 +193,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in bitcoins\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n@@ -461,7 +462,7 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in btc\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n             \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\""
      },
      {
        "sha": "6d10d1ce158f572b29cab801535de99b4fc91bad",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -60,8 +60,8 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc/kb\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "d51aa503059945879aa3d58beaa9945475dc1387",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -423,7 +423,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\""
      },
      {
        "sha": "a3246b41fb656868f30094567f3a9b35567fccd8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -149,7 +149,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n@@ -335,7 +335,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"     ]\\n\"\n             \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n \n@@ -422,7 +422,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\""
      },
      {
        "sha": "198b5baf6051c246d201f0527621473a868b98f2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -390,7 +390,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+            \"2. \\\"amount\\\"      (numeric, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n@@ -452,7 +452,7 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             \"  [\\n\"\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n-            \"      amount,                 (numeric) The amount in btc\\n\"\n+            \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n@@ -556,7 +556,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount   (numeric) The total amount in btc received at this address.\\n\"\n+            \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n@@ -614,7 +614,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nAmount received by the default account with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"\\\"\") +\n@@ -707,7 +707,7 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n@@ -793,14 +793,15 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n-            \"3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n-            \"4. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n+            \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false           (boolean) true if successfull.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nMove 0.01 btc from the default account to the account named tabby\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n-            \"\\nMove 0.01 btc timotei to akiko with a comment and funds have 6 confirmations\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" timotei to akiko with a comment and funds have 6 confirmations\\n\"\n             + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n@@ -867,7 +868,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n-            \"3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).\\n\"\n+            \"3. amount                (numeric, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -877,7 +878,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"        (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nSend 0.01 btc from the default account to the address, must have at least 1 confirmation\\n\"\n+            \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n             \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n@@ -932,7 +933,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n+            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in \" + CURRENCY_UNIT + \" is the value\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n@@ -1233,7 +1234,7 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n-            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n@@ -1405,11 +1406,11 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n             \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n             \"                                                associated with an address, transaction id and block details\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n             \"                                         'receive' category of transactions.\\n\"\n@@ -1600,10 +1601,10 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n@@ -1686,7 +1687,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n+            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"confirmations\\\" : n,     (numeric) The number of confirmations\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",  (string) The block hash\\n\"\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n@@ -1699,7 +1700,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n-            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n@@ -2165,7 +2166,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2194,14 +2195,14 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2278,7 +2279,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\""
      }
    ]
  }
]