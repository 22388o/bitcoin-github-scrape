DrahtBot,2021-05-30 16:05:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22805](https://github.com/bitcoin/bitcoin/pull/22805) (refactor: use CWallet const shared pointers in dump{privkey,walle",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-851022611,851022611,
ryanofsky,2021-06-11 20:00:51,"Rebased a3f623035a2653049d098f43e55b9e01850cb16c -> 642843a193c237fc7a21dffc9fbbb3e10ab8e50d ([`pr/txfun.1`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.1) -> [`pr/txfun.2`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txfun.1-rebase..pr/txfun.2)) due to conflict with #22008",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-859832948,859832948,
fjahr,2021-06-13 20:02:53,Code review ACK 642843a193c237fc7a21dffc9fbbb3e10ab8e50d,https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-860262977,860262977,
ryanofsky,2021-06-17 13:18:55,"Rebased 642843a193c237fc7a21dffc9fbbb3e10ab8e50d -> b69d82094bccdf929f7d483c5031c55e6e40f103 ([`pr/txfun.2`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.2) -> [`pr/txfun.3`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txfun.2-rebase..pr/txfun.3)) for no reason\nRebased b69d82094bccdf929f7d483c5031c55e6e40f103 -> 33a",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-863232535,863232535,
ryanofsky,2021-08-13 01:57:35,"Rebased 33af67edbd902e9b9c3862c3a3066798cac1a33d -> 67f8c262281feb3599ec2dab13439edd520bb5e6 ([`pr/txfun.4`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.4) -> [`pr/txfun.5`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txfun.4-rebase..pr/txfun.5)) due to conflict with #22155",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-898100690,898100690,
ryanofsky,2021-08-19 13:24:53,"Rebased 67f8c262281feb3599ec2dab13439edd520bb5e6 -> 54faec818254453f8c0813f60be0164afb26558a ([`pr/txfun.5`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.5) -> [`pr/txfun.6`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/txfun.5-rebase..pr/txfun.6)) due to conflict with #19101",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-901913664,901913664,
fjahr,2021-08-23 22:08:41,"Code review re-ACK 54faec818254453f8c0813f60be0164afb26558a\n\nConfirmed changes since my last review did not change behavior and only addressed mentioned merge conflicts.",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-904167606,904167606,
meshcollider,2021-09-01 05:12:40,"Sorry about another rebase Russ, I'll review this next ðŸ˜„ ",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-909894911,909894911,
ryanofsky,2021-09-01 14:59:50,"> Sorry about another rebase Russ, I'll review this next smile\n\nThanks! And no problem, conflicts were trivial\n\nRebased 54faec818254453f8c0813f60be0164afb26558a -> b11a195ef450bd138aa03204a5e74fdd3ddced26 ([`pr/txfun.6`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.6) -> [`pr/txfun.7`](https://github.com/ryanofsky/bitcoin/commits/pr/txfun.7), [compare](https://github.com/ryanofsky",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910369645,910369645,
achow101,2021-09-01 20:09:44,"I get that the point is to remove circular dependencies, but I am not sure about the new code layout which removes a lot of the object-oriented-ness of the wallet. It doesn't quite make sense to me why so many functions need or should be changed to take `CWallet` or `CWalletTx` (or both) as arguments when, conceptually, it makes more sense to have them remain as member functions.",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910688118,910688118,
ryanofsky,2021-09-01 21:34:57,">  removes a lot of the object-oriented-ness of the wallet.\n\nThis was discussed more here https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910688118, but the general idea is that saying `object.function()` or `function(object)` does not substantively affect the object orientedness off the code, that big classes with too many interacting parts are hard to understand and maintain, and ",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910785904,910785904,
achow101,2021-09-01 22:11:01,"Is there a description of where this is going and what the end state is going to look like? To me, it feels like many of the changes made here are not well motivated (other than removing the circular dependency). I've read through #21206, #21207, and https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Transaction-Conflict-Tracking, but it's not clear to me how these particular changes are ",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910824104,910824104,
ryanofsky,2021-09-01 23:13:06,"This PR is my end state for detaching methods and breaking the monolithic wallet.h/cpp into wallet.h/cpp, transaction.h/cpp, receive.h/cpp, and spend.h/spend.cpp modules. Obviously if more work is done on balance tracking and spending code more improvements can be made in these places. This PR is only fixing inconsistencies in naming and moving function declarations out of wallet.h to the new tran",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-910879195,910879195,
achow101,2021-09-02 01:43:49,"Ok, I think I get it now. #21207 moved several things, including members of `CWallet` and `CWalletTx` to `spend.cpp` and `receive.cpp`. Then this PR completes that move by making the moved functions no longer members of `CWallet` and `CWalletTx` so that we don't have implementations of class members across different files. My last question is how is this refactor useful to us? I'm not convinced th",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-911015569,911015569,
ryanofsky,2021-09-02 02:35:49,"> My last question is how is this refactor useful to us?\n\nLike you mentioned, this PR post-moveonly cleanup after #21207, and the overall motivation is described there. The goal of that PR and this one were to increase legibility and improve organization of wallet code. Before #21207 balance computing code was mixed with syncing code and coin selection code and all of this was in random order.",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-911061060,911061060,
achow101,2021-09-02 02:52:34,ACK b11a195ef450bd138aa03204a5e74fdd3ddced26,https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-911075369,911075369,
Sjors,2021-09-02 12:00:08,"It would be useful to see which PR's are impacted by silent merge conflicts. Afaik most of the big upcoming work, like taproot, doesn't touch this. I also think this reorganization makes future wallet improvements less scary.",https://github.com/bitcoin/bitcoin/pull/22100#issuecomment-911592871,911592871,
Sjors,2021-05-31 16:29:58,How come you're able to move `GetCredit` but not `GetDebit`?,https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642592067,642592067,src/wallet/wallet.h
ryanofsky,2021-05-31 17:30:05,"re: https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642592067\n\n> How come you're able to move `GetCredit` but not `GetDebit`?\n\nI would like to move it, but it's kept in place for now to avoid circular dependencies. The problem is that the `CWallet::SyncTransaction` method needs to call `CWallet::AddToWalletIfInvolvingMe` which needs to call `CWallet::IsFromMe` which needs to call",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642612870,642612870,src/wallet/wallet.h
promag,2021-05-31 19:39:48,Comparing to 4e11f88320b644b67db55fe737815451ca7d0681 (which I reviewed in #21206) what is the motivation to prefix with `Cached`? Is it relevant for the caller that some caching is involved? Is it a way to remember that concurrent syncs can happen and so the return value can be out of date?,https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642653123,642653123,src/wallet/receive.h
ryanofsky,2021-05-31 20:21:39,"re: https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642653123\n\n> Comparing to [4e11f88](https://github.com/bitcoin/bitcoin/commit/4e11f88320b644b67db55fe737815451ca7d0681) (which I reviewed in #21206) what is the motivation to prefix with `Cached`? Is it relevant for the caller that some caching is involved? Is it a way to remember that concurrent syncs can happen and so the return v",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642664678,642664678,src/wallet/receive.h
promag,2021-05-31 21:02:41,"> Functions named Tx instead of CachedTx just take plain CTransaction arguments by comparison\n\nThanks for the clarification. An alternative prefix could be `Wallet`, so in this case, could be `WalletTxGetCredit`. But it's fine as is and agree with the convention.\n\n> Re: concurrency, I think cs_wallet doesn't really allow too much and there shouldn't be caching problems related to that. Cac",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642675557,642675557,src/wallet/receive.h
ryanofsky,2021-05-31 22:54:37,"re: https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642664678\n\n> > Functions named Tx instead of CachedTx just take plain CTransaction arguments by comparison\n> \n> Thanks for the clarification. An alternative prefix could be `Wallet`, so in this case, could be `WalletTxGetCredit`. But it's fine as is and agree with the convention.\n\nThat suggestion is pretty good too. Maybe I ",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642698155,642698155,src/wallet/receive.h
promag,2021-05-31 23:01:20,"Both are just fine to me, as long as the motivation and convention are clear.",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642699195,642699195,src/wallet/receive.h
achow101,2021-09-01 20:10:23,"Given that #20773 is merged, could the change to `GetDebit` be done now?",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r700539371,700539371,src/wallet/wallet.h
Sjors,2021-09-02 09:48:28,Or maybe in a (more compact) followup.,https://github.com/bitcoin/bitcoin/pull/22100#discussion_r700927541,700927541,src/wallet/wallet.h
ryanofsky,2021-09-02 11:16:54,"re: https://github.com/bitcoin/bitcoin/pull/22100#discussion_r642592067\n\n>>>> How come you're able to move `GetCredit` but not `GetDebit`?\n\n>>> I would like to move it, but it's kept in place for now to avoid circular dependencies.\n\n>> Given that #20773 is merged, could the change to `GetDebit` be done now?\n\n> Or maybe in a (more compact) followup.\n\nYes #20733 does make this ea",https://github.com/bitcoin/bitcoin/pull/22100#discussion_r700986601,700986601,src/wallet/wallet.h
