[
  {
    "sha": "9ccaaba11e94571fe984857494042ac292c17156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2NhYWJhMTFlOTQ1NzFmZTk4NDg1NzQ5NDA0MmFjMjkyYzE3MTU2",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T17:45:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T20:36:18Z"
      },
      "message": "[init] Add -peerblockfilters option\n\nWhen a node is configured with --blockfilterindex=basic and\n-peerblockfilters it can serve compact block filters to its peers.\n\nThis commit adds the configuration option handling. Future commits\nadd compact block serving and service bits signaling.",
      "tree": {
        "sha": "f21a5d9dacdcd034f3540910a37f791097dffbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f21a5d9dacdcd034f3540910a37f791097dffbe9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ccaaba11e94571fe984857494042ac292c17156",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaaba11e94571fe984857494042ac292c17156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccaaba11e94571fe984857494042ac292c17156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaaba11e94571fe984857494042ac292c17156/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b24f6084ede92d0f493ff416b4726245140b2c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b24f6084ede92d0f493ff416b4726245140b2c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b24f6084ede92d0f493ff416b4726245140b2c1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "010938a9113c9e62d1e1361da5e354eea9721e72",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaaba11e94571fe984857494042ac292c17156/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaaba11e94571fe984857494042ac292c17156/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9ccaaba11e94571fe984857494042ac292c17156",
        "patch": "@@ -446,6 +446,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -993,6 +994,13 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Basic filters are the only supported filters. The basic filters index must be enabled\n+    // to serve compact filters\n+    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS) &&\n+        g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n+        return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))"
      },
      {
        "sha": "4033c85d07a3319c5aeb385af61ca53be1a5a4df",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaaba11e94571fe984857494042ac292c17156/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaaba11e94571fe984857494042ac292c17156/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9ccaaba11e94571fe984857494042ac292c17156",
        "patch": "@@ -21,6 +21,7 @@ static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n static const bool DEFAULT_PEERBLOOMFILTERS = false;\n+static const bool DEFAULT_PEERBLOCKFILTERS = false;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:"
      }
    ]
  },
  {
    "sha": "f9e00bb25ac4039056808affeb5ffa86a2c317fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWUwMGJiMjVhYzQwMzkwNTY4MDhhZmZlYjVmZmE4NmEyYzMxN2Zl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:19:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T20:36:19Z"
      },
      "message": "[net processing] Message handling for getcfcheckpt.\n\nIf -peerblockfilters is configured, handle requests for cfcheckpt.",
      "tree": {
        "sha": "c0bc9e4ff525803891a493afee9b8f71a1fdde63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0bc9e4ff525803891a493afee9b8f71a1fdde63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9e00bb25ac4039056808affeb5ffa86a2c317fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9e00bb25ac4039056808affeb5ffa86a2c317fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9e00bb25ac4039056808affeb5ffa86a2c317fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9e00bb25ac4039056808affeb5ffa86a2c317fe/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ccaaba11e94571fe984857494042ac292c17156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaaba11e94571fe984857494042ac292c17156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccaaba11e94571fe984857494042ac292c17156"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 128,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40f12c810c1372936f0c50fc5c492d885c4e9517",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f9e00bb25ac4039056808affeb5ffa86a2c317fe",
        "patch": "@@ -8,9 +8,11 @@\n #include <addrman.h>\n #include <banman.h>\n #include <blockencodings.h>\n+#include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <hash.h>\n+#include <index/blockfilterindex.h>\n #include <validation.h>\n #include <merkleblock.h>\n #include <netmessagemaker.h>\n@@ -127,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Interval between compact filter checkpoints. See BIP 157. */\n+static constexpr int CFCHECKPT_INTERVAL = 1000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      const BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and the peer would be allowed to fetch it.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a getcfcheckpt request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    const BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+                                   stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+\n+    // Populate headers.\n+    const CBlockIndex* block_index = stop_index;\n+    for (int i = headers.size() - 1; i >= 0; i--) {\n+        int height = (i + 1) * CFCHECKPT_INTERVAL;\n+        block_index = block_index->GetAncestor(height);\n+\n+        if (!filter_index->LookupFilterHeader(block_index, headers[i])) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFCHECKPT,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              headers);\n+    connman->PushMessage(pfrom, std::move(msg));\n+}\n+\n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n@@ -3270,6 +3375,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFCHECKPT) {\n+        ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer\n         LOCK(cs_main);"
      },
      {
        "sha": "25851e786c4ed5c979afa252b60fb5179eba4166",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=f9e00bb25ac4039056808affeb5ffa86a2c317fe",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFCHECKPT=\"getcfcheckpt\";\n+const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of\n@@ -71,6 +73,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFCHECKPT,\n+    NetMsgType::CFCHECKPT,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n "
      },
      {
        "sha": "dfcb0e0660c747d456596b5aa6923f6ff2e021e3",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9e00bb25ac4039056808affeb5ffa86a2c317fe/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f9e00bb25ac4039056808affeb5ffa86a2c317fe",
        "patch": "@@ -234,6 +234,20 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * getcfcheckpt requests evenly spaced compact filter headers, enabling\n+ * parallelized download and validation of the headers between them.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFCHECKPT;\n+/**\n+ * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n+ * evenly spaced filter headers for blocks on the requested chain.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *CFCHECKPT;\n };\n \n /* Get a vector of all valid message types (see above) */"
      }
    ]
  },
  {
    "sha": "23083856a551ca13e8b142791c296ecb25cc4e7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzA4Mzg1NmE1NTFjYTEzZThiMTQyNzkxYzI5NmVjYjI1Y2M0ZTdm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:10:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T20:36:19Z"
      },
      "message": "[test] Add test for cfcheckpt",
      "tree": {
        "sha": "9fd276e7c7fa030c0d1d139608e72cedd4491776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fd276e7c7fa030c0d1d139608e72cedd4491776"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23083856a551ca13e8b142791c296ecb25cc4e7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23083856a551ca13e8b142791c296ecb25cc4e7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23083856a551ca13e8b142791c296ecb25cc4e7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23083856a551ca13e8b142791c296ecb25cc4e7f/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9e00bb25ac4039056808affeb5ffa86a2c317fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9e00bb25ac4039056808affeb5ffa86a2c317fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9e00bb25ac4039056808affeb5ffa86a2c317fe"
      }
    ],
    "stats": {
      "total": 187,
      "additions": 187,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d00a6dc07e7bd80efff2f9afee4c4da80fdce86",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=23083856a551ca13e8b142791c296ecb25cc4e7f",
        "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peerblockfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        self.sync_blocks(timeout=600)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_and_ping(message=request)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        self.log.info(\"Reorg node 0 to a new chain.\")\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_blocks(timeout=600)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on active chain.\")\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+\n+        main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n+        tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on stale chain.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfcheckpt']\n+\n+        stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (stale_cfcheckpt,)]\n+        )\n+\n+        self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n+        requests = [\n+            msg_getcfcheckpt(\n+                filter_type=FILTER_TYPE_BASIC,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+        ]\n+        for request in requests:\n+            node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+            node1.send_message(request)\n+            node1.wait_for_disconnect()\n+\n+        self.log.info(\"Check that invalid requests result in disconnection.\")\n+        requests = [\n+            # Requesting unknown filter type results in disconnection.\n+            msg_getcfcheckpt(\n+                filter_type=255,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+            # Requesting unknown hash results in disconnection.\n+            msg_getcfcheckpt(\n+                filter_type=FILTER_TYPE_BASIC,\n+                stop_hash=123456789,\n+            ),\n+        ]\n+        for request in requests:\n+            node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+            node0.send_message(request)\n+            node0.wait_for_disconnect()\n+\n+if __name__ == '__main__':\n+    CompactFiltersTest().main()"
      },
      {
        "sha": "ef5ef49eaf4096bb6387cadac07f421386e48ae0",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=23083856a551ca13e8b142791c296ecb25cc4e7f",
        "patch": "@@ -57,6 +57,8 @@\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n \n+FILTER_TYPE_BASIC = 0\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -1512,3 +1514,50 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n \n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n+\n+class msg_getcfcheckpt:\n+    __slots__ = (\"filter_type\", \"stop_hash\")\n+    msgtype =  b\"getcfcheckpt\"\n+\n+    def __init__(self, filter_type, stop_hash):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n+class msg_cfcheckpt:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"headers\")\n+    msgtype =  b\"cfcheckpt\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, headers=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.headers = headers\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.headers = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256_vector(self.headers)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)"
      },
      {
        "sha": "ba0391625e2e3ec7a6d73a19838f981b4a2a0ded",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=23083856a551ca13e8b142791c296ecb25cc4e7f",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n     msg_filteradd,\n@@ -67,6 +68,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n     b\"filteradd\": msg_filteradd,\n@@ -328,6 +330,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass\n     def on_filteradd(self, message): pass"
      },
      {
        "sha": "5d8b1a24e65ab161c412ec93738df755c3109758",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23083856a551ca13e8b142791c296ecb25cc4e7f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=23083856a551ca13e8b142791c296ecb25cc4e7f",
        "patch": "@@ -225,6 +225,7 @@\n     'feature_loadblock.py',\n     'p2p_dos_header_tree.py',\n     'p2p_unrequested_blocks.py',\n+    'p2p_blockfilters.py',\n     'feature_includeconf.py',\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',"
      }
    ]
  }
]