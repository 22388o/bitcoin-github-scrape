prusnak,2020-05-05 08:46:53,Seems the `lint` target fails in the Travis CI.,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-623933451,623933451,
DrahtBot,2020-05-05 09:25:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18876 ([WIP] Serve BIP 157 compact filters by jnewbery)\n* #18698 (Make g_chainman internal to validation by MarcoFalke)\",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-623950453,623950453,
jnewbery,2020-05-06 03:52:55,Note to reviewers: the Travis failures are timeouts and can be ignored. This PR is ready for review.,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-624428221,624428221,
jnewbery,2020-05-07 16:00:16,"Rebased on master to fix the spurious travis failures, and addressed @jkczyz's review comments. Thanks for the review!",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625343964,625343964,
jnewbery,2020-05-07 16:51:40,Addressed @ariard's review comments.,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625372467,625372467,
jnewbery,2020-05-08 02:33:24,Addressed all review comments from @fjahr and @jonatack . Thanks for the review!,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625595614,625595614,
ariard,2020-05-08 07:30:56,"Code Review ACK 6691493, changes since last review are switch to `int` instead of `uint32_t`, renaming to `peerblockfilters`, test modifications, better comments.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625680941,625680941,
jnewbery,2020-05-08 13:02:04,Thanks for review @jonatack . I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625804510,625804510,
jkczyz,2020-05-08 14:59:44,"> Thanks for review @jonatack . I've addressed all your comments.\n\nNeeds push. Also, please update the flag name in commit messages.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625857203,625857203,
jnewbery,2020-05-08 15:27:54,"> Needs push. Also, please update the flag name in commit messages.\n\ndone and done!",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625870657,625870657,
fjahr,2020-05-08 17:01:48,"re-ACK 967e2b10a51b831e49abd9171e3f05843e00e76b\n\nChanges addressed nits discussed in the comments. Tests are green for me locally.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625916125,625916125,
jkczyz,2020-05-08 17:57:38,"ACK 967e2b10a51b831e49abd9171e3f05843e00e76b\n\nComments addressed and tests pass.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625940516,625940516,
jonatack,2020-05-08 18:19:41,"Code review ACK 967e2b10a51b831e49abd9171e3f05843e00e76b. I'm still thinking about the long-term consequences of adding BIP157 support but so far these changes seem fine. Per `git diff 6691493 967e2b1` the only change since my previous tested review was addressing my renaming comments.\n\nThere may be a update needed for #16224. Appveyor is signalling *init.cpp(1001,97): error C2664: 'bool InitE",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625949821,625949821,
jonatack,2020-05-09 16:07:02,"Code review re-ACK 23083856a551ca13e8b142791c296ecb25cc4e7f the only change since my review @ 967e2b1 is an update required for #16224 that was merged yesterday.\n```diff\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -999,22 +998,22 @@ bool AppInitParameterInteraction()\n     // to serve compact filters\n     if (gArgs.GetBoolArg(""-peerblockfilters"", DEFAULT_PEERBLOCKFILTERS) &&\n         g_e",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626198287,626198287,
fjahr,2020-05-10 13:25:20,"re-ACK 23083856a551ca13e8b142791c296ecb25cc4e7f\n\nOnly change was fixing merge conflict in `init.cpp`:\n\n```\n$ git range-diff f54753293fe7355e4280944d766f22054b560ba1..967e2b10a51b831e49abd9171e3f05843e00e76b 5b24f6084ede92d0f493ff416b4726245140b2c1..23083856a551ca13e8b142791c296ecb25cc4e7f\n```",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626327752,626327752,
jkczyz,2020-05-10 18:03:46,"re-ACK 23083856a551ca13e8b142791c296ecb25cc4e7f\n\nOnly change required in `init.cpp` for #16224.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626366079,626366079,
ariard,2020-05-11 08:11:03,re-Code Review ACK 2308385,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626545296,626545296,
luke-jr,2020-05-11 16:07:13,"This [remains Concept NACK](https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623722125) since [it is harmful to Bitcoin](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017820.html) and should not be merged, no matter how well-reviewed.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626798022,626798022,
NicolasDorier,2020-05-11 16:27:28,"I also believe neutrino is harmful to bitcoin https://medium.com/@nicolasdorier/neutrino-is-dangerous-for-my-self-sovereignty-18fac5bcdc25\n\nHowever, I believe it can be useful to whitelisted peers. (I think you should add a permission flag for that)\n\nConcept NACK, except if protected by a permission flag to force its use only to specific trusted peers.",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626809421,626809421,
ThomasBucaioni,2020-05-11 17:03:34,All three test suites passed here.,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626828598,626828598,
clarkmoody,2020-05-11 21:54:16,Tested ACK 23083856a,https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626986048,626986048,
jnewbery,2020-05-12 12:45:39,"This PR now has 6 ACKs:\n\n- @jonatack (https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626198287)\n- @fjahr (https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626327752)\n- @jkczyz (https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626366079)\n- @ariard (https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-626545296)\n- @clarkmoody (https://github.com/bitc",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-627319808,627319808,
MarcoFalke,2020-05-12 12:57:25,"re-ACK 23083856a5 ðŸŒ³\n\nOnly change since my previous review https://github.com/bitcoin/bitcoin/pull/18876#issuecomment-627322015\n\n* Rename setting\n* Small code and test refactoring\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 23083856a5 ðŸŒ³\n\nOnly change since my previous review https",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-627325634,627325634,
MarcoFalke,2020-05-12 13:02:07,"> Concept NACK, except if protected by a permission flag to force its use only to specific trusted peers.\n\nThe implementation here is incomplete. The follow-ups in #18876 need to be merged as well. And if another setting is seen to be needed for this to be safely shipped, this should also be done in a follow-up. However, I think we shouldn't block progress here based on Bitcoin Core related im",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-627328398,627328398,
jonasschnelli,2020-05-13 13:08:44,"post merge concept ACK.\n\nHowever, I think this merge was too fast. A 6 day window for a first concrete step in filter serving after BIP157 is IMO too fast for a reasonable discussion. I also still miss conceptual reviews from long term p2p contributors. There is no rush IMO.\n\n**Edit:** I probably underestimated the effort that went into #16442 (this PR is mostly recycled code from 16442) w",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-627972271,627972271,
MarcoFalke,2020-05-14 16:36:41,"> Edit: I probably underestimated the effort that went into #16442 (this PR is mostly recycled code from 16442) which could legitimate a quicker merge.\n\nThanks. Just wanted to reply that.\n\nFor reference, the permission flag pr is here, btw: #18972 \n\n",https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-628750775,628750775,
promag,2020-05-05 20:42:43,`g_enabled_filter_types.count(BlockFilterType::BASIC)`? otherwise `#include <algorithm>`.,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420393465,420393465,src/init.cpp
jnewbery,2020-05-06 03:52:17,Good suggestion. Taken.,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420531180,420531180,src/init.cpp
jkczyz,2020-05-06 18:41:33,Update `allNetMessageTypes` as per namespace comment.,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421010893,421010893,src/protocol.h
jkczyz,2020-05-06 18:59:13,"Might be worth separating these checks. Otherwise, the logging is not quite accurate when `-peercfilters` is not set.",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421021746,421021746,src/net_processing.cpp
jkczyz,2020-05-06 19:12:02,Also use `const` here for consistency with `stop_index`?,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421029307,421029307,src/net_processing.cpp
jkczyz,2020-05-06 19:36:37,"Given block heights are of type `int` in `CBlockIndex`, perhaps `height` and `CFCHECKPT_INTERVAL` should be `int` as well instead of `uint32_t`.",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421043128,421043128,src/net_processing.cpp
jkczyz,2020-05-06 20:01:22,s/cfcheckpt/getcfcheckpt,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421057005,421057005,src/net_processing.cpp
ariard,2020-05-07 08:29:42,"Is the following scenario plausible ? Client receives from peers block H1 as tip and goes offline. H1 is reorg'ed out of the active chain. After a month, Client goes back and try to start filter-sync through checkpoints. Sending H1 will be rejected as per `BlockRequestAllowed` we reject reorg'ed out block older than a month, but has been part of the active chain and dutifully announced.\n\nIt ma",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421330556,421330556,src/net_processing.cpp
ariard,2020-05-07 08:51:29,"Is this test verify the following spec requirement ""StopHash MUST be known to belong to a block accepted by the receiving peer. This is the case if the peer had previously sent a headers or inv message with any descendent blocks"" ?\n\nThis point is unclear to me with regards to the receiver requirement, what should we do in case of peer asking for a `StopHash` non-yet-announced to them. Do we ch",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421344230,421344230,test/functional/p2p_cfilters.py
fjahr,2020-05-07 15:53:22,"If `-peercfilters` isn't set, the resulting error message below would be confusing I think.",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421612318,421612318,src/net_processing.cpp
jnewbery,2020-05-07 16:18:59,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421629462,421629462,src/protocol.h
jnewbery,2020-05-07 16:22:58,"I think changing the log text to ""peer x requested unsupported block filter type"" addresses your concern (either `-peercfilters` is unset and they've requested any block filter type, or `-peercfilters` is set and they've requested a block filter type that isn't basic).\n\nLater on we'll switch this logic to use `GetLocalServices` instead: https://github.com/bitcoin/bitcoin/pull/18876/commits/5c2",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421631968,421631968,src/net_processing.cpp
jnewbery,2020-05-07 16:23:03,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632032,421632032,src/net_processing.cpp
jnewbery,2020-05-07 16:23:08,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632090,421632090,src/net_processing.cpp
jnewbery,2020-05-07 16:23:12,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632124,421632124,src/net_processing.cpp
fjahr,2020-05-07 16:29:32,"nit:\n```suggestion\n    // Basic filters index must be enabled to serve compact filters\n    // because it is the only available filter option for now\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421636285,421636285,src/init.cpp
jnewbery,2020-05-07 16:48:36,"I don't think it matters. If a BIP 157 client pre-emptively requests a filter header for a block that the server hasn't yet accepted, then they would be disconnected.\n\nGenerally we don't consider block propagation timing to be a privacy/topology leak, since new block events are rare and too expensive to be controlled by an observer.\n\nRequesting a block that the server hasn't accepted yet i",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421648046,421648046,test/functional/p2p_cfilters.py
jnewbery,2020-05-07 16:51:01,"Yes, that's possible. A client should always request the filter headers from a recently sync'ed block headers chain.\n\nI was going to update the comment to say something like ""Check that the stop block exists and is either in the best chain or was re-orged out less than a month ago"", but I don't like repeating program logic in a comment, especially if it's located far from the code, since any c",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421649572,421649572,src/net_processing.cpp
fjahr,2020-05-07 16:58:29,i.e. I agree with what @jkczyz was saying earlier I think but just saw you addressed it now,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421654189,421654189,src/net_processing.cpp
jonatack,2020-05-07 17:39:46,"`CFCHECKPT_INTERVAL` is set to 1000, but perhaps add a static assert sanity check against division by zero (as well as against a `height` of zero on line 2055).\n```diff\n+    static_assert(CFCHECKPT_INTERVAL !=0);\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421678792,421678792,src/net_processing.cpp
jonatack,2020-05-07 17:48:28,"Current idiom in the test suite:\n```diff\n-        node0.send_message(request)\n-        node0.sync_with_ping(timeout=5)\n+        node0.send_and_ping(message=request, timeout=5)\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421683976,421683976,test/functional/p2p_cfilters.py
jonatack,2020-05-07 20:27:52,"Would it be preferable to reference to const here?\n```diff\n-                                      BlockFilterType filter_type,\n+                                      const BlockFilterType& filter_type,\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421773505,421773505,src/net_processing.cpp
jonatack,2020-05-07 20:58:41,"idem\n```diff\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n+        node0.send_and_ping(request)\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421789997,421789997,test/functional/p2p_cfilters.py
jonatack,2020-05-07 20:58:58,"and here as well\n```diff\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n+        node0.send_and_ping(request)\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421790143,421790143,test/functional/p2p_cfilters.py
fjahr,2020-05-07 22:21:27,"```suggestion\n        assert_equal(response.stop_hash, request.stop_hash)\n        assert_equal(len(response.headers), 2)\n```",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421828302,421828302,test/functional/p2p_cfilters.py
jnewbery,2020-05-08 01:32:32,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421886525,421886525,src/init.cpp
jnewbery,2020-05-08 01:34:04,I'll pass on this one. No-one is ever going to change the constant to be zero.,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421886946,421886946,src/net_processing.cpp
jnewbery,2020-05-08 01:35:32,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421887327,421887327,test/functional/p2p_cfilters.py
jnewbery,2020-05-08 01:36:02,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421887459,421887459,test/functional/p2p_cfilters.py
jnewbery,2020-05-08 01:38:47,No. The enum is a uint8_t. Passing an int is more efficient than passing a pointer (see eg https://stackoverflow.com/questions/3009543/passing-integers-as-constant-references-versus-copying),https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421888211,421888211,src/net_processing.cpp
jnewbery,2020-05-08 01:41:22,"That'll be caught by the `assert_equal(response.headers, [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)])` below",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421888981,421888981,test/functional/p2p_cfilters.py
ariard,2020-05-08 07:25:11,"> Generally we don't consider block propagation timing to be a privacy/topology leak, since new block events are rare and too expensive to be controlled by an observer.\n\nI think relying on event scarcity in case of block variance may not hold, so I would rather consider the heavily-optimized block propagation as an obstruction for an attacker to fingerprint topology with confidence.\n\n> Req",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421988220,421988220,test/functional/p2p_cfilters.py
jonatack,2020-05-08 07:54:30,"Ugh, sorry John, I've been indoors for too long, for some reason I misread the BlockFilterType. Yes, an integer should be passed by value.",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422001372,422001372,src/net_processing.cpp
jonatack,2020-05-08 08:02:10,"> I'll pass on this one. No-one is ever going to change the constant to be zero.\n\nHeh, this is 2020, I don't count on anything to be sane anymore :)",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422004990,422004990,src/net_processing.cpp
jonatack,2020-05-08 08:40:58,Is this line needed nowadays? I don't think any other functional p2p_* tests use `rpc_timeout`.,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422022167,422022167,test/functional/p2p_cfilters.py
jonatack,2020-05-08 08:47:48,"Per the change to `-peerblockfilters`, consider renaming `DEFAULT_PEERCFILTERS` to `DEFAULT_PEERBLOCKFILTERS` as well.\n\n```cpp\nsrc/init.cpp:449:    gArgs.AddArg(""-peerblockfilters"", strprintf(""Serve compact block filters to peers per BIP 157 (default: %u)"", DEFAULT_PEERCFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\nsrc/init.cpp:1000:    if (gArgs.GetBoolArg(""-peerblockfil",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422025238,422025238,src/init.cpp
jonatack,2020-05-08 08:50:15,"After the change to `-peerblockfilters`, should the test be renamed as well? e.g. `p2p_peerblockfilters.py`\n",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422026358,422026358,test/functional/test_runner.py
jnewbery,2020-05-08 12:56:23,"This was needed to prevent the test from timing out when run under valgrind. Since yesterday, we no longer run functional tests under valgrind on every travis run, but I'd prefer not to keep changing this. If people run this test under valgrind locally, they'd need to add this back.",https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422127037,422127037,test/functional/p2p_cfilters.py
jnewbery,2020-05-08 13:01:09,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422129130,422129130,src/init.cpp
jnewbery,2020-05-08 13:01:14,done,https://github.com/bitcoin/bitcoin/pull/18877#discussion_r422129173,422129173,test/functional/test_runner.py
