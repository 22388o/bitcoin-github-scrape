jonatack,2020-08-21 14:17:59,"Concept/approach ACK, could add test coverage and release note (see #19731 for an example).",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678314413,678314413,
theStack,2020-08-21 14:56:30,"Thanks for reviewing @jonatack! Added a release note, will add a functional test for this within the next days.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678334874,678334874,
DrahtBot,2020-08-21 16:02:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20599 (net processing: Tolerate sendheaders and sendcmpct messages before verack by jnewbery)\n\nIf you consider this pul",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678367498,678367498,
theStack,2020-08-22 23:54:08,"Added a functional test to `p2p_compactblocks.py` that covers all 4 possible combinations of bandwidth_{from,to}.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678710453,678710453,
practicalswift,2020-08-23 05:38:58,"Concept ACK\n\nWould be nice to have `bitcoin-cli -netinfo t` expose this info in the future :)",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678732220,678732220,
jonatack,2020-08-24 06:11:46,"> Would be nice to have `bitcoin-cli -netinfo t` expose this info in the future :)\n\nYes. Along with other new ones like `last_transaction`, `last_block`, `conn_type`.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678924793,678924793,
sipa,2020-08-24 08:27:12,"Concept ACK.\n\nI'd suggest putting ""bip152"" somewhere in the name of the field, as the concept of high bandwidth mode is very specific to that BIP (and really doesn't dramatically increase actual bandwidth, as an unqualified name may make seem).",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-678985562,678985562,
theStack,2020-08-24 11:15:35,"@sipa: Agreed that referring to the BIP in the name would make sense here.\n@jonatack: Thanks for the detailled review! I plan to address all of your suggestions. \n\nBefore I take any further changes, I'd like to discuss the naming. Some suggestions:\n- `bip152_highbandwidth_{from,to}`\n- `bip152_hb_{from,to}` (shorter, but not obvious)\n- `bip152_cmpctblk_announce_{from,to}` (avoids the ""h",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-679065891,679065891,
jonatack,2020-08-25 13:11:03,"> My favourite would simply be `bip152_highbandwidth_{from,to}`\n\nI agree with you. Might be good to have input from @TheBlueMatt or @gmaxwell.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-680015543,680015543,
instagibbs,2020-08-25 15:19:44,"> bip152_highbandwidth_{from,to}\n> bip152_hb_{from,to} (shorter, but not obvious)\n\nThese seems fine, `hb` is shorter so I prefer. Anyone who is using this stuff should be familiar with the BIP and if not read it anyways.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-680091456,680091456,
naumenkogs,2020-08-26 12:53:56,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-680860674,680860674,
theStack,2020-08-26 15:32:01,"// EDIT: Before there was a ""rebased"" comment there that was not accurate, I confused with another PR ü§¶‚Äç‚ôÇÔ∏è \nWill still wait a bit for more naming opinions before tackling review suggestions.\n\nCurrently `bip152_bandwidth_{from,to}` (preferred by 2, jonatack and my humble self) is favoured over `bip152_bh_{from,to}` (preferred by 1, instagibbs).",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-680954252,680954252,
theStack,2020-08-27 22:52:13,"Decided for the name `bip152_highbandwidth_{to,from}` for now (both for the exposed RPC result fields and the internal variable names) and force-pushed with most of the suggestions from jonatack.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-682230242,682230242,
gmaxwell,2020-08-28 00:48:03,"The patch I carry locally for this calls it \n\n+            obj.pushKV(""bip152_hb"", \n\nbut I don't think it matter other than it should mention BIP152.\n",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-682262664,682262664,
theStack,2020-09-03 08:38:56,"Now that three people voted for the short version (instagibbs, jonatack, and indirectly also gmaxwell), I changed the RPC result fields to `bip152_hb_{to,from}`. The internal state variable names in `CNode{Stats}` are still kept in the long version though.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-686343994,686343994,
theStack,2020-09-20 09:56:51,"Rebased on master and shortened the test by using the parameterized ctor for `msg_sendcmpct`, now that #19781 has been merged.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-695767929,695767929,
jonatack,2020-09-20 10:36:51,Code review re-ACK bc8cc02 per `git range-diff 831b0ec bff461c bc8cc02`,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-695771418,695771418,
naumenkogs,2020-09-21 09:37:41,Code review ACK bc8cc02,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-696007242,696007242,
theStack,2020-09-21 23:37:48,"Rebased on master (was needed after the recent merge of #17785). Thanks a lot for reviewing, jonatack and naumenkogs!",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-696436215,696436215,
naumenkogs,2020-09-22 06:15:22,reACK 4df1d1244cd334fdb946de698fe39eba1b11147b,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-696528944,696528944,
jonatack,2020-09-22 07:29:54,Code review re-ACK 4df1d1244cd334fdb946de698fe39eba1b11147b per ` git range-diff 7737603 bc8cc02 4df1d12`,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-696556183,696556183,
theStack,2020-09-28 23:06:17,"Rebased on master, changed the data type of the introduced high-bandwidth flags `CNode::m_bip152_highbandwidth_{to,from}` to atomic bools (see discussion https://github.com/bitcoin/bitcoin/pull/19776#discussion_r495482994) and fixed typos in the comments (s/sendcmpt/sendcmpct/).",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-700328872,700328872,
naumenkogs,2020-09-29 06:00:17,reACK 343dc4760fd2407895fc8b3417a504b194429156,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-700467920,700467920,
jonatack,2020-09-29 06:51:04,re-ACK 343dc4760fd2407895fc8b3417a504b194429156 per `git range-diff 7ea6499 4df1d12 343dc47`,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-700489169,700489169,
theStack,2020-10-21 13:21:44,"Since there hasn't been any activity for more than three weeks: is there anything else I can do for this PR? It has two ACKs (jonatack, naumenkogs) and two Concept ACKs (sipa, practicalswift), I think it should be ready for merge.",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-713567204,713567204,
jonatack,2020-10-21 13:33:14,"I reckon it's not a reflection on this PR (which seems good AFAICS), just that attention has been focused on reviewing key features before the feature freeze October 15 and now on fixing bugs before branch-off. After branch-off, I'm guessing that features in waiting like this one will see renewed attention (if not before).",https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-713578107,713578107,
MarcoFalke,2020-10-21 14:32:09,Looks like this has missed the feature freeze. Can be merged after Nov 1st,https://github.com/bitcoin/bitcoin/pull/19776#issuecomment-713620781,713620781,
jonatack,2020-08-24 07:14:52,"8e9e5517 suggestion\n\n```markdown\n- The `getpeerinfo` RPC returns two new boolean fields, `highbandwidth_to` and\n  `highbandwidth_from`, that respectively indicate whether we selected a peer to\n  be in compact blocks high-bandwidth mode or whether a peer selected us as a\n  compact blocks high-bandwidth peer. High-bandwidth peers send new block\n  announcements via a `cmptblock` message",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r475387172,475387172,doc/release-notes-19776.md
jonatack,2020-08-24 07:21:10,"d778c4a / f9cc66bc / edb4ad4 here and in `net.h/cpp` and `p2p_compactblocks.py`, consider inverting the order to be to/from, per consistency with the existing `lastsend`/`lastrecv` order in the codebase and the language idioms of to/from and send/receive.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r475390168,475390168,src/rpc/net.cpp
jonatack,2020-08-24 07:27:39,"edb4ad4 nit, s/both nodes haven't/neither node/",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r475393299,475393299,test/functional/p2p_compactblocks.py
jonatack,2020-08-24 08:01:33,f9cc66bc An explanatory comment here may be nice; I found this the least clear line of this PR changeset.,https://github.com/bitcoin/bitcoin/pull/19776#discussion_r475411024,475411024,src/net_processing.cpp
jonatack,2020-08-24 08:09:18,"edb4ad4 suggestions\n```diff\n-        # Asserts that the RPC getpeerinfo boolean result fields ""highbandwidth_{from,to}""\n-        # for the last peer of a given node match the given parameters\n-        def assert_highbandwidth_states(node, hb_from, hb_to):\n+        # Assert the getpeerinfo `highbandwidth_to/highbandwith_from` boolean\n+        # fields for the last peer of a given node m",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r475414849,475414849,test/functional/p2p_compactblocks.py
theStack,2020-08-27 22:37:57,"Thanks, I like that much better! Adapted it, removed the indentation (as other PR review notes currently in master also don't have it) and added you as co-author.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r478733482,478733482,doc/release-notes-19776.md
theStack,2020-08-27 22:39:27,Done.,https://github.com/bitcoin/bitcoin/pull/19776#discussion_r478733964,478733964,src/net_processing.cpp
theStack,2020-08-27 22:40:34,"Good point, done.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r478734372,478734372,src/rpc/net.cpp
theStack,2020-08-27 22:47:50,"Shortened the comment a bit and also reordered the parameters. Didn't want to change the function name to be even longer though (considering it's so close to where its used, possibly even closer after #19781 would be merged) everything should be clear.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r478736865,478736865,test/functional/p2p_compactblocks.py
theStack,2020-08-27 22:48:15,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r478736982,478736982,test/functional/p2p_compactblocks.py
jonatack,2020-09-01 11:06:30,"The names have indeed become very long, and they should arguably be written as `bip152_high_bandwidth_{to/from}`, so I'd now vote for `bip152_hb_{to/from}`.\n\n```\n    ""version"" : n,                               (numeric) The peer version, such as 70001\n    ""subver"" : ""str"",                            (string) The string version\n    ""inbound"" : true|false,                      (boolean) I",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r481056687,481056687,src/rpc/net.cpp
jonatack,2020-09-01 11:06:48,"nit if you retouch\n```suggestion\n- The `getpeerinfo` RPC returns two new boolean fields, `bip152_highbandwidth_to`\n```",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r481056835,481056835,doc/release-notes-19776.md
theStack,2020-09-03 08:36:36,Done.,https://github.com/bitcoin/bitcoin/pull/19776#discussion_r482806124,482806124,doc/release-notes-19776.md
theStack,2020-09-03 08:36:52,"Done, see comment below.",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r482806281,482806281,src/rpc/net.cpp
sipa,2020-09-26 18:31:52,"As these are mutable fields, add a `GUARDED_BY` annotation?",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r495482994,495482994,src/net.h
theStack,2020-09-27 17:20:10,"Good point, I'm not sure though on what to put into the annotation, i.e. guarded by _what_? I see three possibilities here to protecting concurrent access to the boolean fields:\n- introducing a new Mutex (seems overkill)\n- guard with cs_main, as that Mutex is already guaranteed to be held when the flags are written (seems overkill as well, considering this is not validation-critical at all and",https://github.com/bitcoin/bitcoin/pull/19776#discussion_r495594809,495594809,src/net.h
sipa,2020-09-27 23:01:34,Atomic bools seem easiest.,https://github.com/bitcoin/bitcoin/pull/19776#discussion_r495628380,495628380,src/net.h
