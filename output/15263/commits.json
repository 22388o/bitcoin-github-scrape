[
  {
    "sha": "11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWUwZmQ4ZDY2Njc3YTkyYjZkMTJhMzlkMGEyNmYxYjM5ZDlhNDZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-25T18:33:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-25T18:39:06Z"
      },
      "message": "Descriptor expansions only need pubkey entries for PKH/WPKH",
      "tree": {
        "sha": "969a9a867ccfbba45d8c877ed2edcf5063abde67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/969a9a867ccfbba45d8c877ed2edcf5063abde67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "41e0f2e11766e7c83ac1fb85e06848cf30080a9f",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e",
        "patch": "@@ -226,7 +226,7 @@ class DescriptorImpl : public Descriptor\n      *  @param pubkeys The evaluations of the m_pubkey_args field.\n      *  @param script The evaluation of m_script_arg (or nullptr when m_script_arg is nullptr).\n      *  @param out A FlatSigningProvider to put scripts or public keys in that are necessary to the solver.\n-     *             The script and pubkeys argument to this function are automatically added.\n+     *             The script arguments to this function are automatically added, as is the origin info of the provided pubkeys.\n      *  @return A vector with scriptPubKeys for this descriptor.\n      */\n     virtual std::vector<CScript> MakeScripts(const std::vector<CPubKey>& pubkeys, const CScript* script, FlatSigningProvider& out) const = 0;\n@@ -322,7 +322,6 @@ class DescriptorImpl : public Descriptor\n         for (auto& entry : entries) {\n             pubkeys.push_back(entry.first);\n             out.origins.emplace(entry.first.GetID(), std::move(entry.second));\n-            out.pubkeys.emplace(entry.first.GetID(), entry.first);\n         }\n         if (m_script_arg) {\n             for (const auto& subscript : subscripts) {\n@@ -396,7 +395,12 @@ class PKDescriptor final : public DescriptorImpl\n class PKHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(keys[0].GetID())); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider& out) const override\n+    {\n+        CKeyID id = keys[0].GetID();\n+        out.pubkeys.emplace(id, keys[0]);\n+        return Singleton(GetScriptForDestination(id));\n+    }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, \"pkh\") {}\n };\n@@ -405,7 +409,12 @@ class PKHDescriptor final : public DescriptorImpl\n class WPKHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(WitnessV0KeyHash(keys[0].GetID()))); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider& out) const override\n+    {\n+        CKeyID id = keys[0].GetID();\n+        out.pubkeys.emplace(id, keys[0]);\n+        return Singleton(GetScriptForDestination(WitnessV0KeyHash(id)));\n+    }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, \"wpkh\") {}\n };\n@@ -418,6 +427,7 @@ class ComboDescriptor final : public DescriptorImpl\n     {\n         std::vector<CScript> ret;\n         CKeyID id = keys[0].GetID();\n+        out.pubkeys.emplace(id, keys[0]);\n         ret.emplace_back(GetScriptForRawPubKey(keys[0])); // P2PK\n         ret.emplace_back(GetScriptForDestination(id)); // P2PKH\n         if (keys[0].IsCompressed()) {"
      }
    ]
  }
]