[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457676590",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-457676590",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 457676590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzY3NjU5MA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-25T18:40:13Z",
    "updated_at": "2019-01-25T18:40:13Z",
    "author_association": "MEMBER",
    "body": "I believe the existing tests are sufficient here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457676590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457858803",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-457858803",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 457858803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg1ODgwMw==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T19:35:25Z",
    "updated_at": "2019-01-26T19:35:25Z",
    "author_association": "MEMBER",
    "body": "utACK https://github.com/bitcoin/bitcoin/pull/15263/commits/11e0fd8d66677a92b6d12a39d0a26f1b39d9a46e\r\n\r\nNice, thanks :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457858803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458936244",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-458936244",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 458936244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODkzNjI0NA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T13:05:02Z",
    "updated_at": "2019-01-30T13:07:23Z",
    "author_association": "MEMBER",
    "body": "Nit: the top comment of `DescriptorImpl` currently says: `(size 1 for PK, PKH, WPKH; any size of Multisig)`. Add `Combo`?\r\n\r\nConcept ACK, I think. Just checking if I understand the rationale correctly, in the proposed descriptor importmulti : \r\n<img width=\"919\" alt=\"schermafbeelding 2019-01-30 om 13 34 38\" src=\"https://user-images.githubusercontent.com/10217/51981600-db53b780-2493-11e9-8a43-11ac1a2f8967.png\">\r\n\r\nThis currently [doesn't import the public keys](https://github.com/bitcoin/bitcoin/pull/14491#issuecomment-457420341), only the scripts. That can be solved by adding `outkeys`  to `pubkey_map`, but this would also add all public keys in a multisig descriptor.\r\n\r\nLater on in the import process `pubkey_map` is used to add each pub key as watch-only to the wallet (if it's not already present):\r\n\r\n<img width=\"999\" alt=\"schermafbeelding 2019-01-30 om 13 47 28\" src=\"https://user-images.githubusercontent.com/10217/51982217-9fb9ed00-2495-11e9-93f8-2fb1e74c7bfd.png\">\r\n\r\nThis in turn is relevant for `AddToWalletIfInvolvingMe` which for each new transaction in a block checks if it needs to be added to a wallet. It does that when `IsMine()` is true for any output (which can mean `ISMINE_WATCH_ONLY`, `ISMINE_SPENDABLE` or both). That in turn depends on ` txout.scriptPubKey`, which is handled through `IsMineInner(...., IsMineSigVersion::TOP)`. \r\n\r\nThat's where my brain gives up, but I'm guessing that `IsMineInner` will return `>0` if an output pays to a public key (hash). That would be bad if that public key belongs to a different member of the multisig group. Conversely, I'm assuming that if we don't take the additional step - on top of adding the script - of adding a public key, then IsMine won't recognize the transaction as belonging to the user. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458936244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459198138",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-459198138",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 459198138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTE5ODEzOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T03:08:53Z",
    "updated_at": "2019-01-31T03:08:53Z",
    "author_association": "MEMBER",
    "body": "> This currently doesn't import the public keys, only the scripts. That can be solved by adding outkeys to pubkey_map, but this would also add all public keys in a multisig descriptor.\r\n\r\nThat's what the code originally was, before I complained that that would make outputs to multisig participant keys marked as IsMIne.\r\n\r\n> That's where my brain gives up\r\n\r\nI agree this is hard to reason about... replacing all this logic with descriptor based logic will hopefully make it more transparent and with fewer gotchas.\r\n\r\n> Conversely, I'm assuming that if we don't take the additional step - on top of adding the script - of adding a public key, then IsMine won't recognize the transaction as belonging to the user.\r\n\r\nRight, the problem is that our only way of importing a public key does two things that ought to be independent:\r\n* It lets the signing logic know about public keys that occur in scripts (pkh and wpkh) by hash, allowing it to sign (this isn't necessary for things like multisig, as the actual pubkeys occur in the script there, so they don't need to be available in the wallet).\r\n* It marks PK/PKH outputs as IsMine.\r\n\r\nIf it was just the first, it would be harmless; teaching how to sign something never hurts if you don't accidentally also make unrelated things treated as IsMine.\r\n\r\nWhat this change does is make descriptor expansions for multisig no longer fill up the pubkeys that occur in the script. This is safe because they weren't actually needed for the first effect, and has the added benefit that when combined with the importmulti code will cause these multisig individual keys to not become watched.\r\n\r\nHowever, it does keep the effect that when you import say a P2WPKH descriptor, the pubkey will be expanded, and then imported, causing P2PKH outputs for the same key to also become watched. Thankfully, that is \"policy compatible\" - anyone able to spend a P2WPKH output would also be able to spend the P2PKH version. It's unfortunate, but not a disaster. The full solution will be descriptor based IsMine logic, where we can exactly control what is treated as ours.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459198138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459282699",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-459282699",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 459282699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTI4MjY5OQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T09:50:32Z",
    "updated_at": "2019-01-31T09:51:52Z",
    "author_association": "MEMBER",
    "body": "> the pubkey will be expanded, and then imported, causing P2PKH outputs for the same key to also become watched. \r\n\r\nIs this import also what causes `getnewaddress \"\" legacy` to work even if you imported a P2WPKH descriptor? _Actually that won't happen until #14075._ I find that pretty annoying, because it can break compatibility with the source you imported from. It's even potentially dangerous if only that source has the private keys, and doesn't know how to sign the other types. However, it's not new behavior and it's something we can properly deal with in descriptor based wallets.\r\n\r\nAnyway, utACK 11e0fd8",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459282699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459436893",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15263#issuecomment-459436893",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15263",
    "id": 459436893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTQzNjg5Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T17:41:49Z",
    "updated_at": "2019-01-31T17:41:49Z",
    "author_association": "MEMBER",
    "body": "@Sjors Similar but different effect.\n\nFor private keys we rely on the \"ImplicitlyLearnRelatedScripts\" function to know how to spend P2PKH/P2SH/P2WSH (in memory) for every private key in the wallet.\n\nFor public keys, the reason is that we only have one record (watch only keys) in the keystore for both watching and solving public key related scripts.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459436893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]