[
  {
    "sha": "c5b903af130e767562684f198b478dcfa0476372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWI5MDNhZjEzMGU3Njc1NjI2ODRmMTk4YjQ3OGRjZmEwNDc2Mzcy",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-25T23:00:23Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T00:12:59Z"
      },
      "message": "Add whitelistforcerelay to control forced relaying.\n\nAlso renames whitelistalwaysrelay.\n\nNodes relay all transactions from whitelisted peers, this\n gets in the way of some useful reasons for whitelisting\n peers-- for example, bypassing bandwidth limitations.\n\nThe purpose of this forced relaying is for specialized gateway\n applications where a node is being used as a P2P connection\n filter and multiplexer, but where you don't want it getting\n in the way of (re-)broadcast.\n\nThis change makes it configurable with whitelistforcerelay.",
      "tree": {
        "sha": "87b381a92fad5b2dc2c14b98468fa582c5b40361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87b381a92fad5b2dc2c14b98468fa582c5b40361"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5b903af130e767562684f198b478dcfa0476372",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5b903af130e767562684f198b478dcfa0476372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5b903af130e767562684f198b478dcfa0476372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5b903af130e767562684f198b478dcfa0476372/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c894fbbb1dc0778628fa3f246b92d673b3f70cfa"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4d12250b4453dbc9073a420b4c595f39757b7e13",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5b903af130e767562684f198b478dcfa0476372/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5b903af130e767562684f198b478dcfa0476372/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c5b903af130e767562684f198b478dcfa0476372",
        "patch": "@@ -386,7 +386,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whitelistalwaysrelay\", strprintf(_(\"Always relay transactions received from whitelisted peers (default: %d)\"), DEFAULT_WHITELISTALWAYSRELAY));\n+    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n+    strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n     strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET\n@@ -833,16 +834,23 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     }\n \n-    // disable walletbroadcast and whitelistalwaysrelay in blocksonly mode\n+\n+    // disable walletbroadcast and whitelistrelay in blocksonly mode\n     if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n-        if (SoftSetBoolArg(\"-whitelistalwaysrelay\", false))\n-            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistalwaysrelay=0\\n\", __func__);\n+        if (SoftSetBoolArg(\"-whitelistrelay\", false))\n+            LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistrelay=0\\n\", __func__);\n #ifdef ENABLE_WALLET\n         if (SoftSetBoolArg(\"-walletbroadcast\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n #endif\n     }\n \n+    // Forcing relay from whitelisted hosts implies we will accept relays from them in the first place.\n+    if (GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n+        if (SoftSetBoolArg(\"-whitelistrelay\", true))\n+            LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n+    }\n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);"
      },
      {
        "sha": "b65e4cdc0a2d88729ca1d04295940a9106b889a9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5b903af130e767562684f198b478dcfa0476372/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5b903af130e767562684f198b478dcfa0476372/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c5b903af130e767562684f198b478dcfa0476372",
        "patch": "@@ -4415,8 +4415,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         bool fBlocksOnly = GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-        // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistalwaysrelay is true\n-        if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY))\n+        // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistrelay is true\n+        if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY))\n             fBlocksOnly = false;\n \n         LOCK(cs_main);\n@@ -4588,8 +4588,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == \"tx\")\n     {\n         // Stop processing the transaction early if\n-        // We are in blocks only mode and peer is either not whitelisted or whitelistalwaysrelay is off\n-        if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)))\n+        // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n+        if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n             LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n             return true;\n@@ -4688,7 +4688,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());\n \n-            if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n+            if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were already in the mempool or rejected from it due\n                 // to policy, allowing the node to function as a gateway for"
      },
      {
        "sha": "7629631dc5d99c96a3fb61c533312baee2df2952",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5b903af130e767562684f198b478dcfa0476372/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5b903af130e767562684f198b478dcfa0476372/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c5b903af130e767562684f198b478dcfa0476372",
        "patch": "@@ -42,8 +42,10 @@ struct CNodeStateStats;\n \n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n-/** Default for DEFAULT_WHITELISTALWAYSRELAY. */\n-static const bool DEFAULT_WHITELISTALWAYSRELAY = true;\n+/** Default for DEFAULT_WHITELISTRELAY. */\n+static const bool DEFAULT_WHITELISTRELAY = true;\n+/** Default for DEFAULT_WHITELISTFORCERELAY. */\n+static const bool DEFAULT_WHITELISTFORCERELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */"
      }
    ]
  }
]