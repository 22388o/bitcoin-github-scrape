[
  {
    "sha": "fee59621172fd47d64ef611a4949880d5ea44721",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWU1OTYyMTE3MmZkNDdkNjRlZjYxMWE0OTQ5ODgwZDVlYTQ0NzIx",
    "commit": {
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2020-05-11T02:11:02Z"
      },
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2020-05-11T02:11:02Z"
      },
      "message": "Persist coins cache to disk and load on startup",
      "tree": {
        "sha": "7a01f2f3fc144a05741e866368ea22ded01b91d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a01f2f3fc144a05741e866368ea22ded01b91d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fee59621172fd47d64ef611a4949880d5ea44721",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee59621172fd47d64ef611a4949880d5ea44721",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fee59621172fd47d64ef611a4949880d5ea44721",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee59621172fd47d64ef611a4949880d5ea44721/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 126,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6776d9d1d5b96fab2cd522a9d2e910848aaca01d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee59621172fd47d64ef611a4949880d5ea44721/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee59621172fd47d64ef611a4949880d5ea44721/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=fee59621172fd47d64ef611a4949880d5ea44721",
        "patch": "@@ -318,6 +318,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n+    //! The in memory cache of the coins view\n+    const CCoinsMap& GetCacheMap() const { return cacheCoins; };\n+\n private:\n     /**\n      * @note this is marked const, but may actually append to `cacheCoins`, increasing"
      },
      {
        "sha": "40a29e7295c2e6d2d2d7105d73865adbc7ac8a5c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee59621172fd47d64ef611a4949880d5ea44721/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee59621172fd47d64ef611a4949880d5ea44721/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fee59621172fd47d64ef611a4949880d5ea44721",
        "patch": "@@ -242,6 +242,14 @@ void Shutdown(NodeContext& node)\n         fFeeEstimatesInitialized = false;\n     }\n \n+    // Default persistcoinscache to false if -dbcache is set to higher than default\n+    int64_t dbcache = gArgs.GetArg(\"-dbcache\", nDefaultDbCache);\n+    bool persist_coins_cache = gArgs.GetArg(\"-persistcoinscache\", dbcache <= nDefaultDbCache ? DEFAULT_PERSIST_COINS_CACHE : false);\n+    if (persist_coins_cache) {\n+        LOCK(::cs_main);\n+        DumpCoinsCache(::ChainstateActive().CoinsTip());\n+    }\n+\n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n     {\n         LOCK(cs_main);\n@@ -397,6 +405,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistcoinscache\", strprintf(\"Whether to save the coins cache on shutdown and load on restart (default: %u unless -dbcache is set to higher than the default value)\", DEFAULT_PERSIST_COINS_CACHE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -696,6 +705,14 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     {\n     CImportingNow imp;\n \n+    // Default persistcoinscache to false if -dbcache is set to higher than default\n+    int64_t dbcache = gArgs.GetArg(\"-dbcache\", nDefaultDbCache);\n+    bool persist_coins_cache = gArgs.GetArg(\"-persistcoinscache\", dbcache <= nDefaultDbCache ? DEFAULT_PERSIST_COINS_CACHE : false);\n+    if (persist_coins_cache) {\n+        LOCK(::cs_main);\n+        LoadCoinsCache(::ChainstateActive().CoinsTip());\n+    }\n+\n     // -reindex\n     if (fReindex) {\n         int nFile = 0;"
      },
      {
        "sha": "54ef8c7cbbbca37603cc4cfb181eec41bf01d8ef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee59621172fd47d64ef611a4949880d5ea44721/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee59621172fd47d64ef611a4949880d5ea44721/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fee59621172fd47d64ef611a4949880d5ea44721",
        "patch": "@@ -5135,6 +5135,104 @@ bool DumpMempool(const CTxMemPool& pool)\n     return true;\n }\n \n+static const uint64_t COINSCACHE_DUMP_VERSION = 1;\n+\n+bool LoadCoinsCache(CCoinsViewCache& coinsCache)\n+{\n+    int64_t start = GetTimeMicros();\n+\n+    FILE* filestr = fsbridge::fopen(GetDataDir() / \"coinscache.dat\", \"rb\");\n+    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"Failed to open coins cache file from disk. Continuing anyway.\\n\");\n+        return false;\n+    }\n+\n+    try {\n+        uint64_t version;\n+        file >> version;\n+        if (version != COINSCACHE_DUMP_VERSION) {\n+            return false;\n+        }\n+\n+        uint64_t persisted_size;\n+        file >> persisted_size;\n+        uint64_t dbcache = gArgs.GetArg(\"-dbcache\", nDefaultDbCache);\n+        // If cache was persisted with larger dbcache don't use it\n+        if (persisted_size > dbcache) {\n+            return false;\n+        }\n+\n+        uint64_t num;\n+        file >> num;\n+        uint64_t total = num;\n+        int64_t last = GetTimeMillis();\n+        while (num--) {\n+            COutPoint outpoint;\n+            file >> outpoint;\n+            coinsCache.AccessCoin(outpoint);\n+            int64_t now = GetTimeMillis();\n+            if ((now-last)*MILLI > 5) {\n+                LogPrintf(\"Warming coins cache: %i%% complete. Run with -persistcoinscache=0 to disable.\\n\", (int)((total-num)/(double)total * 100));\n+                last = now;\n+            }\n+        }\n+\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to deserialize coins cache data on disk: %s. Continuing anyway.\\n\", e.what());\n+        return false;\n+    }\n+\n+    int64_t end = GetTimeMicros();\n+    LogPrintf(\"Imported coins cache from disk: %i utxos added to in-memory cache in %gs\\n\", coinsCache.GetCacheSize(), (end-start)*MICRO);\n+    return true;\n+}\n+\n+bool DumpCoinsCache(const CCoinsViewCache& coinsCache)\n+{\n+    int64_t start = GetTimeMicros();\n+\n+    static Mutex dump_mutex;\n+    LOCK(dump_mutex);\n+\n+    try {\n+        FILE* filestr = fsbridge::fopen(GetDataDir() / \"coinscache.dat.new\", \"wb\");\n+        if (!filestr) {\n+            return false;\n+        }\n+\n+        CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+\n+        uint64_t version = COINSCACHE_DUMP_VERSION;\n+        file << version;\n+\n+        uint64_t dbcache = gArgs.GetArg(\"-dbcache\", nDefaultDbCache);\n+        file << dbcache;\n+\n+        uint64_t count = 0;\n+        const auto& cacheMap = coinsCache.GetCacheMap();\n+        for(const auto& imap: cacheMap)\n+            if (!imap.second.coin.IsSpent())\n+                count++;\n+        file << (uint64_t)count;\n+\n+        for (const auto& imap : cacheMap)\n+            if (!imap.second.coin.IsSpent())\n+                file << imap.first;\n+\n+        if (!FileCommit(file.Get()))\n+            throw std::runtime_error(\"FileCommit failed\");\n+        file.fclose();\n+        RenameOver(GetDataDir() / \"coinscache.dat.new\", GetDataDir() / \"coinscache.dat\");\n+        int64_t end = GetTimeMicros();\n+        LogPrintf(\"Dumped coins cache in %gs\\n\", (end-start)*MICRO);\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to dump coins cache: %s. Continuing anyway.\\n\", e.what());\n+        return false;\n+    }\n+    return true;\n+}\n+\n //! Guess how far we are in the verification process at the given block index\n //! require cs_main if pindex has not been validated yet (because nChainTx might be unset)\n double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {"
      },
      {
        "sha": "b42622ebdf9a4f0ad98140b1d235f1fe86949561",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee59621172fd47d64ef611a4949880d5ea44721/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee59621172fd47d64ef611a4949880d5ea44721/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fee59621172fd47d64ef611a4949880d5ea44721",
        "patch": "@@ -75,6 +75,8 @@ static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n+/** Default for -persistcoinscache */\n+static const bool DEFAULT_PERSIST_COINS_CACHE = true;\n /** Default for using fee filter */\n static const bool DEFAULT_FEEFILTER = true;\n /** Default for -stopatheight */\n@@ -907,6 +909,12 @@ bool DumpMempool(const CTxMemPool& pool);\n /** Load the mempool from disk. */\n bool LoadMempool(CTxMemPool& pool);\n \n+/** Dump the coins cache to disk. */\n+bool DumpCoinsCache(const CCoinsViewCache& coinsCache);\n+\n+/** Load the coins cache from disk. */\n+bool LoadCoinsCache(CCoinsViewCache& coinsCache);\n+\n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n {"
      }
    ]
  }
]