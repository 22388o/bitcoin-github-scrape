benma,2017-06-01T10:45:31Z,Pinging @theuni ,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-305457866,305457866,
benma,2017-06-01T15:36:05Z,"@ryanofsky thanks. I actually did it like this in a first iteration, but changed it because I figured that the arguments should be evaluated as much as possible before entering ConnMan. After all, ConnMan doesn't particularly care about the command line string representation.\n\nIt was a bit weird having the error messages that relate to `-whitelist`, `-bind`, `-whitebind` still in ConnMan as op",https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-305531892,305531892,
theuni,2017-06-05T20:09:26Z,"I believe this is OK. I have a PR coming up which (after lots of thought) moves resolving into its own class, of which CConnman is one user. This way other layers are able to use the resolver without necessarily having to go through CConnman.\n\nSo, concept ACK. Reviewing.",https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-306290911,306290911,
sipa,2017-06-12T23:22:50Z,@theuni Can you check whether your requested changes are addressed?,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-307962526,307962526,
theuni,2017-06-13T19:05:35Z,looks good aside from those few issues.,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-308216930,308216930,
benma,2017-06-13T22:39:56Z,"@theuni thanks for the feedback. I added a new commit for easier review, I will squash in the end.",https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-308269163,308269163,
benma,2017-06-13T23:30:38Z,@theuni addressed the GetBoolArgs issue and squashed.,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-308277455,308277455,
benma,2017-06-15T21:11:17Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-308867010,308867010,
theuni,2017-06-20T22:09:17Z,utACK 07b2afef10bb6366a270e325fd41a8bc526c9ef3,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-309906101,309906101,
laanwj,2017-06-26T13:03:33Z,utACK 07b2afe,https://github.com/bitcoin/bitcoin/pull/10496#issuecomment-311052981,311052981,
practicalswift,2017-06-01T10:48:25Z,"Minor nit, but what about switching to C++11 strongly typed enumerations (`enum class`) while we are at it?",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r119583012,119583012,src/net.cpp
benma,2017-06-01T11:12:34Z,"Great idea,  but unfortunately, bitwise operations don't work with those (unless you manually add those functions to the class) :(\n\nSee http://blog.bitwigglers.org/using-enum-classes-as-type-safe-bitmasks/\n",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r119586702,119586702,src/net.cpp
practicalswift,2017-06-01T11:24:33Z,"Ah, of course. Sorry!",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r119588733,119588733,src/net.cpp
theuni,2017-06-05T20:17:56Z,"This looks like a change in behavior when setting ""-bind=foo -listen=0"". Granted, that combination makes no sense.\n\nI think we should probably just check for that combination, and exit with an error in that case.",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r120198811,120198811,src/init.cpp
theuni,2017-06-05T20:19:09Z,See other comment. It doesn't make sense to have binds/whitebinds set at all if !fListen.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r120199183,120199183,src/net.cpp
theuni,2017-06-05T20:30:59Z,"Mm, this moves the logic away from the caller and into CConnman, which is what we're trying to avoid by adding the heaps of options.\n\nI think I'd prefer to see flags passed in along with CServices, so that CConnman can just do what it's told. So either a tiny struct, or just a pair.\n\nThen, CConnman will try to bind the BF_EXPLICIT addresses, and if it fails, tries to bind the rest.\n\nAl",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r120201881,120201881,src/net.cpp
benma,2017-06-10T14:13:46Z,"> Mm, this moves the logic away from the caller and into CConnman, which is what we're trying to avoid by adding the heaps of options.\n> I think I'd prefer to see flags passed in along with CServices, so that CConnman can just do what it's told. So either a tiny struct, or just a pair.\n\nThe logic would be in `CConnman` all the same, just the data structure you pass the info with is changed f",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121258101,121258101,src/net.cpp
benma,2017-06-10T14:14:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121258108,121258108,src/init.cpp
benma,2017-06-10T14:14:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121258111,121258111,src/net.cpp
theuni,2017-06-13T18:26:01Z,"\n\n>>Mm, this moves the logic away from the caller and into CConnman, which is what we're trying to avoid by adding the heaps of options.\n    I think I'd prefer to see flags passed in along with CServices, so that CConnman can just do what it's told. So either a tiny struct, or just a pair.\n\n> The logic would be in CConnman all the same, just the data structure you pass the info with is c",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121758762,121758762,src/net.cpp
theuni,2017-06-13T18:31:10Z,Well done! Thanks for using the local instance.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121760173,121760173,src/net.cpp
theuni,2017-06-13T18:41:20Z,"Looks like there's no way to run without listening now.\n\nSorry for not being more clear here: https://github.com/bitcoin/bitcoin/pull/10496#discussion_r120199183. I was suggesting that we shouldn't get into InitBinds in the first place if binding isn't allowed.\n\nWe'll either need to change this so that its caller uses the ugly global as before:\n``` c++\n    if(fListen && !InitBinds(...)",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121762724,121762724,src/net.cpp
theuni,2017-06-13T18:46:30Z,This strError param is clunky (my fault!). We should do away with it and just use clientInterface->InitError() directly. That can be done as a follow-up though.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121764020,121764020,src/net.cpp
theuni,2017-06-13T18:57:20Z,s/GetBoolArg/gArgs.GetBoolArg/,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121766894,121766894,src/init.cpp
benma,2017-06-13T22:39:03Z,"Oops, was a bit too eager here. Re-added the `fListen` check as you suggested.",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121814829,121814829,src/net.cpp
benma,2017-06-13T22:39:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121814845,121814845,src/net.cpp
benma,2017-06-13T22:39:11Z,"GetBoolArg() is simply wrapping gArgs.GetBoolArg(), and both variants are already used in the function. Could make that consistent in a separate PR.",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121814853,121814853,src/init.cpp
benma,2017-06-13T22:45:01Z,"> For example, there's no way to specify ""listen on this address as well as the localhost fallbacks"".\n\nBut that wasn't possible before either.\n\nDo you prefer the commit which passes the whitelist flag in the pair (https://github.com/bitcoin/bitcoin/pull/10496/commits/768c7f72d9fac542a45ad788713faa1a3f46897c), or should I drop it? I don't mind either way, but the new code seems less readabl",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121815726,121815726,src/net.cpp
theuni,2017-06-13T22:50:42Z,"gArgs is the new (as of very recently) way of handling these args, it'd be helpful if new code didn't reintroduce the former usage as I assume the wrappers are intended to be temporary.",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121816590,121816590,src/init.cpp
theuni,2017-06-13T22:59:31Z,"> But that wasn't possible before either.\n\nSure, but we've been slowly moving these config options out to the caller so that less is hard-coded.\n\nIn the near-future, I'm looking forward to creating 2 CConnman instances and running them against each-other for testing. The more we can control via setup options, the better. I have no problem with adding those options incrementally, I'd just l",https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121817915,121817915,src/net.cpp
benma,2017-06-13T23:30:20Z,:+1: I reverted it as I find the previous version more readable.,https://github.com/bitcoin/bitcoin/pull/10496#discussion_r121822429,121822429,src/net.cpp
