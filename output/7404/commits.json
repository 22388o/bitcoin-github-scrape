[
  {
    "sha": "6fc1480076fe9b1b538415f8e458829cb2a0d128",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmMxNDgwMDc2ZmU5YjFiNTM4NDE1ZjhlNDU4ODI5Y2IyYTBkMTI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T17:58:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:14Z"
      },
      "message": "Keep addrman's nService bits consistent with outbound observations",
      "tree": {
        "sha": "8902cd1cf071139d59a9779317356d17c9370a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8902cd1cf071139d59a9779317356d17c9370a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc1480076fe9b1b538415f8e458829cb2a0d128",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc1480076fe9b1b538415f8e458829cb2a0d128",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc1480076fe9b1b538415f8e458829cb2a0d128",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc1480076fe9b1b538415f8e458829cb2a0d128/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9779e1e1f320a45255f2e81325f2feceec3fa944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9779e1e1f320a45255f2e81325f2feceec3fa944",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9779e1e1f320a45255f2e81325f2feceec3fa944"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9b5f11ed6c2231b3aaec8a4299e044605fce4bd0",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6fc1480076fe9b1b538415f8e458829cb2a0d128",
        "patch": "@@ -494,3 +494,21 @@ void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n     if (nTime - info.nTime > nUpdateInterval)\n         info.nTime = nTime;\n }\n+\n+void CAddrMan::SetServices_(const CService& addr, uint64_t nServices)\n+{\n+    CAddrInfo* pinfo = Find(addr);\n+\n+    // if not found, bail out\n+    if (!pinfo)\n+        return;\n+\n+    CAddrInfo& info = *pinfo;\n+\n+    // check whether we are talking about the exact same CService (including same port)\n+    if (info != addr)\n+        return;\n+\n+    // update info\n+    info.nServices = nServices;\n+}"
      },
      {
        "sha": "3c64d89698948a99f141a658c3742d40b530ee28",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6fc1480076fe9b1b538415f8e458829cb2a0d128",
        "patch": "@@ -246,6 +246,9 @@ class CAddrMan\n     //! Mark an entry as currently-connected-to.\n     void Connected_(const CService &addr, int64_t nTime);\n \n+    //! Update an entry's service bits.\n+    void SetServices_(const CService &addr, uint64_t nServices);\n+\n public:\n     /**\n      * serialized format:\n@@ -575,6 +578,14 @@ class CAddrMan\n         nKey.SetNull(); //Do not use outside of tests.\n     }\n \n+    void SetServices(const CService &addr, uint64_t nServices)\n+    {\n+        LOCK(cs);\n+        Check();\n+        SetServices_(addr, nServices);\n+        Check();\n+    }\n+\n };\n \n #endif // BITCOIN_ADDRMAN_H"
      },
      {
        "sha": "2f14609c136dccc1dd5d8426bc0f0ba74d12954a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc1480076fe9b1b538415f8e458829cb2a0d128/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6fc1480076fe9b1b538415f8e458829cb2a0d128",
        "patch": "@@ -4579,6 +4579,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n+        if (!pfrom->fInbound)\n+        {\n+            addrman.SetServices(pfrom->addr, pfrom->nServices);\n+        }\n         if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version"
      }
    ]
  },
  {
    "sha": "3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGJmZGY5OGM5N2YxMmFlZWQ3MTk2ZDdmMzgzOTVjNzZjMjE4OWQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T18:09:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:14Z"
      },
      "message": "Verify that outbound connections have expected services",
      "tree": {
        "sha": "879be11aedc3b52a59138cf3236a4d344655d48e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/879be11aedc3b52a59138cf3236a4d344655d48e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fc1480076fe9b1b538415f8e458829cb2a0d128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc1480076fe9b1b538415f8e458829cb2a0d128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc1480076fe9b1b538415f8e458829cb2a0d128"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2c8dfe8ac251fe065208bf6bdaab7b5dcf01a413",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
        "patch": "@@ -4583,6 +4583,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             addrman.SetServices(pfrom->addr, pfrom->nServices);\n         }\n+        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        {\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected));\n+            pfrom->fDisconnect = true;\n+        }\n+\n         if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version"
      },
      {
        "sha": "5293d2d97e79a7bc900c70b29dd44aee01b1936b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
        "patch": "@@ -69,6 +69,9 @@ namespace {\n     };\n }\n \n+/** Services this node implementation cares about */\n+static const uint64_t nRelevantServices = NODE_NETWORK;\n+\n //\n // Global state variables\n //\n@@ -422,6 +425,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n             vNodes.push_back(pnode);\n         }\n \n+        pnode->nServicesExpected = addrConnect.nServices & nRelevantServices;\n         pnode->nTimeConnected = GetTime();\n \n         return pnode;\n@@ -2344,6 +2348,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     filterInventoryKnown(50000, 0.000001)\n {\n     nServices = 0;\n+    nServicesExpected = 0;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;"
      },
      {
        "sha": "fe7599caf0ec709fecac1a29650c882bc865105e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbfdf98c97f12aeed7196d7f38395c76c2189d6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
        "patch": "@@ -316,6 +316,7 @@ class CNode\n public:\n     // socket\n     uint64_t nServices;\n+    uint64_t nServicesExpected;\n     SOCKET hSocket;\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries"
      }
    ]
  },
  {
    "sha": "255485789621fba1cab98143b67f8e7bb0a785d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTU0ODU3ODk2MjFmYmExY2FiOTgxNDNiNjdmOGU3YmIwYTc4NWQ5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T12:31:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:14Z"
      },
      "message": "Only store and connect to NODE_NETWORK nodes",
      "tree": {
        "sha": "7d7c6a18f4a7060696bbbe4d8fb19d28bdeb7f17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d7c6a18f4a7060696bbbe4d8fb19d28bdeb7f17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/255485789621fba1cab98143b67f8e7bb0a785d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/255485789621fba1cab98143b67f8e7bb0a785d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/255485789621fba1cab98143b67f8e7bb0a785d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/255485789621fba1cab98143b67f8e7bb0a785d9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbfdf98c97f12aeed7196d7f38395c76c2189d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbfdf98c97f12aeed7196d7f38395c76c2189d6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "991064d1d3d717f29b1368e12f8481f572ea672d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/255485789621fba1cab98143b67f8e7bb0a785d9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/255485789621fba1cab98143b67f8e7bb0a785d9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=255485789621fba1cab98143b67f8e7bb0a785d9",
        "patch": "@@ -4749,6 +4749,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             boost::this_thread::interruption_point();\n \n+            if (!(addr.nServices & NODE_NETWORK))\n+                continue;\n+\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);"
      },
      {
        "sha": "a05555ded1ce9c0a04f0e6e1dddacb284d751bb3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/255485789621fba1cab98143b67f8e7bb0a785d9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/255485789621fba1cab98143b67f8e7bb0a785d9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=255485789621fba1cab98143b67f8e7bb0a785d9",
        "patch": "@@ -1593,6 +1593,10 @@ void ThreadOpenConnections()\n             if (IsLimited(addr))\n                 continue;\n \n+            // only connect to full nodes\n+            if (!(addr.nServices & NODE_NETWORK))\n+                continue;\n+\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;"
      }
    ]
  },
  {
    "sha": "bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmYwZjE4ZTZmZTljMDU2ZGMwODJhYTNmZWUwNjY2M2MyNjI1YTYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:14Z"
      },
      "message": "test: Re-introduce JSON pretty printing in test builder",
      "tree": {
        "sha": "8cf0b52be2c59c3d165dce12614ba0f0bd897dfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cf0b52be2c59c3d165dce12614ba0f0bd897dfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf0f18e6fe9c056dc082aa3fee06663c2625a63/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "255485789621fba1cab98143b67f8e7bb0a785d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/255485789621fba1cab98143b67f8e7bb0a785d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/255485789621fba1cab98143b67f8e7bb0a785d9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f7fb4ec29f152714df4919006afb67ebde0c3344",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbf0f18e6fe9c056dc082aa3fee06663c2625a63/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbf0f18e6fe9c056dc082aa3fee06663c2625a63/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
        "patch": "@@ -585,11 +585,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const UniValue& tv = json_good[idx];\n-            tests_good.insert(tv.get_array().write());\n+            tests_good.insert(tv.get_array().write(1,4));\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n             const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(tv.get_array().write());\n+            tests_bad.insert(tv.get_array().write(1,4));\n         }\n     }\n \n@@ -608,7 +608,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      }
    ]
  },
  {
    "sha": "25c1f670325ceb1771379626d8dc48df36a4874a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWMxZjY3MDMyNWNlYjE3NzEzNzk2MjZkOGRjNDhkZjM2YTQ4NzRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "test: Script_error checking in script_invalid tests\n\nCheck the returned script_error. Add expected script_error\nfor generated as well as custom tests.\n\nThe specific error is not part of consensus, however\nit could avoid unclear reporting issues such as #6862 in the future.\n\nFixes #7513.",
      "tree": {
        "sha": "ee3de4bbc6f014b4bc19525b8bbfdd9905de1b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee3de4bbc6f014b4bc19525b8bbfdd9905de1b32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25c1f670325ceb1771379626d8dc48df36a4874a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c1f670325ceb1771379626d8dc48df36a4874a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25c1f670325ceb1771379626d8dc48df36a4874a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c1f670325ceb1771379626d8dc48df36a4874a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf0f18e6fe9c056dc082aa3fee06663c2625a63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf0f18e6fe9c056dc082aa3fee06663c2625a63"
      }
    ],
    "stats": {
      "total": 1232,
      "additions": 682,
      "deletions": 550
    },
    "files": [
      {
        "sha": "9e91132984ead759c7f72f4e804d222f543f2421",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 559,
        "deletions": 496,
        "changes": 1055,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c1f670325ceb1771379626d8dc48df36a4874a/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c1f670325ceb1771379626d8dc48df36a4874a/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=25c1f670325ceb1771379626d8dc48df36a4874a"
      },
      {
        "sha": "30e3f37e14c289e8859f3e087a326c50b285c570",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 54,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c1f670325ceb1771379626d8dc48df36a4874a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c1f670325ceb1771379626d8dc48df36a4874a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=25c1f670325ceb1771379626d8dc48df36a4874a",
        "patch": "@@ -52,6 +52,64 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n+struct ScriptErrorDesc\n+{\n+    ScriptError_t err;\n+    const char *name;\n+};\n+\n+static ScriptErrorDesc script_errors[]={\n+    {SCRIPT_ERR_OK, \"OK\"},\n+    {SCRIPT_ERR_UNKNOWN_ERROR, \"UNKNOWN_ERROR\"},\n+    {SCRIPT_ERR_EVAL_FALSE, \"EVAL_FALSE\"},\n+    {SCRIPT_ERR_OP_RETURN, \"OP_RETURN\"},\n+    {SCRIPT_ERR_SCRIPT_SIZE, \"SCRIPT_SIZE\"},\n+    {SCRIPT_ERR_PUSH_SIZE, \"PUSH_SIZE\"},\n+    {SCRIPT_ERR_OP_COUNT, \"OP_COUNT\"},\n+    {SCRIPT_ERR_STACK_SIZE, \"STACK_SIZE\"},\n+    {SCRIPT_ERR_SIG_COUNT, \"SIG_COUNT\"},\n+    {SCRIPT_ERR_PUBKEY_COUNT, \"PUBKEY_COUNT\"},\n+    {SCRIPT_ERR_VERIFY, \"VERIFY\"},\n+    {SCRIPT_ERR_EQUALVERIFY, \"EQUALVERIFY\"},\n+    {SCRIPT_ERR_CHECKMULTISIGVERIFY, \"CHECKMULTISIGVERIFY\"},\n+    {SCRIPT_ERR_CHECKSIGVERIFY, \"CHECKSIGVERIFY\"},\n+    {SCRIPT_ERR_NUMEQUALVERIFY, \"NUMEQUALVERIFY\"},\n+    {SCRIPT_ERR_BAD_OPCODE, \"BAD_OPCODE\"},\n+    {SCRIPT_ERR_DISABLED_OPCODE, \"DISABLED_OPCODE\"},\n+    {SCRIPT_ERR_INVALID_STACK_OPERATION, \"INVALID_STACK_OPERATION\"},\n+    {SCRIPT_ERR_INVALID_ALTSTACK_OPERATION, \"INVALID_ALTSTACK_OPERATION\"},\n+    {SCRIPT_ERR_UNBALANCED_CONDITIONAL, \"UNBALANCED_CONDITIONAL\"},\n+    {SCRIPT_ERR_NEGATIVE_LOCKTIME, \"NEGATIVE_LOCKTIME\"},\n+    {SCRIPT_ERR_UNSATISFIED_LOCKTIME, \"UNSATISFIED_LOCKTIME\"},\n+    {SCRIPT_ERR_SIG_HASHTYPE, \"SIG_HASHTYPE\"},\n+    {SCRIPT_ERR_SIG_DER, \"SIG_DER\"},\n+    {SCRIPT_ERR_MINIMALDATA, \"MINIMALDATA\"},\n+    {SCRIPT_ERR_SIG_PUSHONLY, \"SIG_PUSHONLY\"},\n+    {SCRIPT_ERR_SIG_HIGH_S, \"SIG_HIGH_S\"},\n+    {SCRIPT_ERR_SIG_NULLDUMMY, \"SIG_NULLDUMMY\"},\n+    {SCRIPT_ERR_PUBKEYTYPE, \"PUBKEYTYPE\"},\n+    {SCRIPT_ERR_CLEANSTACK, \"CLEANSTACK\"},\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"}\n+};\n+\n+const char *FormatScriptError(ScriptError_t err)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].err == err)\n+            return script_errors[i].name;\n+    BOOST_ERROR(\"Unknown scripterror enumeration value, update script_errors in script_tests.cpp.\");\n+    return \"\";\n+}\n+\n+ScriptError_t ParseScriptError(const std::string &name)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].name == name)\n+            return script_errors[i].err;\n+    BOOST_ERROR(\"Unknown scripterror \\\"\" << name << \"\\\" in test description\");\n+    return SCRIPT_ERR_UNKNOWN_ERROR;\n+}\n+\n BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n@@ -87,13 +145,13 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message, int scriptError)\n {\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n+    BOOST_CHECK_MESSAGE(scriptError == -1 || err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n@@ -187,6 +245,7 @@ class TestBuilder\n     std::vector<unsigned char> push;\n     std::string comment;\n     int flags;\n+    int scriptError;\n \n     void DoPush()\n     {\n@@ -204,7 +263,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(-1)\n     {\n         if (P2SH) {\n             creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n@@ -214,6 +273,12 @@ class TestBuilder\n         spendTx = BuildSpendingTransaction(CScript(), creditTx);\n     }\n \n+    TestBuilder& ScriptError(ScriptError_t err)\n+    {\n+        scriptError = err;\n+        return *this;\n+    }\n+\n     TestBuilder& Add(const CScript& script)\n     {\n         DoPush();\n@@ -288,7 +353,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment, expect ? SCRIPT_ERR_OK : scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -301,6 +366,8 @@ class TestBuilder\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n         array.push_back(comment);\n+        if (scriptError != -1)\n+            array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         return array;\n     }\n \n@@ -328,99 +395,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK, bad sig\", 0\n-                             ).PushSig(keys.key0).DamagePush(10));\n+                             ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2PKH\", 0\n                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2PKH, bad pubkey\", 0\n-                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n+                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK anyonecanpay\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK anyonecanpay marked with normal hashtype\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                               \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n+                             ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+                             ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3\", 0\n                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3, 2 sigs\", 0\n-                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n+                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n+                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding but no DERSIG\", 0\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"BIP66 example 1, without DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, without DERSIG\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, without DERSIG\", 0\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 4, without DERSIG\", 0\n                               ).Num(0));\n@@ -429,46 +496,46 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, without DERSIG\", 0\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 6, without DERSIG\", 0\n                               ).Num(1));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                                \"BIP66 example 7, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, without DERSIG\", 0\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 10, without DERSIG\", 0\n                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n@@ -480,33 +547,33 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                               \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n@@ -515,62 +582,61 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n                               \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5));\n+                             ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).DamagePush(10));\n+                             ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                               \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", 0\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n-\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n                               ).Num(11).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n-                             ).Num(11).PushSig(keys.key0));\n+                             ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(11).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                             ).Num(11).PushSig(keys.key0).PushRedeem());\n+                             ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n@@ -598,7 +664,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -652,15 +718,14 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(script_invalid)\n {\n     // Scripts that should evaluate as invalid\n     UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n-\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n@@ -676,8 +741,12 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n+        int scriptError = -1; // Expected script error is optional, and follows comment\n+        if (test.size() >= 5 && test[4].get_str() != \"\") {\n+            scriptError = ParseScriptError(test[4].get_str());\n+        }\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "42b73b42f5efff59afac9566ba3a13d3c142e202",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmI3M2I0MmY1ZWZmZjU5YWZhYzk1NjZiYTNhMTNkM2MxNDJlMjAy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:54:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Fix JSON pretty printing in script_tests",
      "tree": {
        "sha": "eabbcc7a3427a9934bbcaf288453ec19fd096bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eabbcc7a3427a9934bbcaf288453ec19fd096bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42b73b42f5efff59afac9566ba3a13d3c142e202",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b73b42f5efff59afac9566ba3a13d3c142e202",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42b73b42f5efff59afac9566ba3a13d3c142e202",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b73b42f5efff59afac9566ba3a13d3c142e202/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25c1f670325ceb1771379626d8dc48df36a4874a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c1f670325ceb1771379626d8dc48df36a4874a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25c1f670325ceb1771379626d8dc48df36a4874a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 16,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8f927f8f913033830176236f427db15ca333bfc3",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42b73b42f5efff59afac9566ba3a13d3c142e202/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42b73b42f5efff59afac9566ba3a13d3c142e202/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=42b73b42f5efff59afac9566ba3a13d3c142e202",
        "patch": "@@ -381,6 +381,18 @@ class TestBuilder\n         return creditTx.vout[0].scriptPubKey;\n     }\n };\n+\n+std::string JSONPrettyPrint(const UniValue& univalue)\n+{\n+    std::string ret = univalue.write(4);\n+    // Workaround for libunivalue pretty printer, which puts a space between comma's and newlines\n+    size_t pos = 0;\n+    while ((pos = ret.find(\" \\n\", pos)) != std::string::npos) {\n+        ret.replace(pos, 2, \"\\n\");\n+        pos++;\n+    }\n+    return ret;\n+}\n }\n \n BOOST_AUTO_TEST_CASE(script_build)\n@@ -651,11 +663,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const UniValue& tv = json_good[idx];\n-            tests_good.insert(tv.get_array().write(1,4));\n+            tests_good.insert(JSONPrettyPrint(tv.get_array()));\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n             const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(tv.get_array().write(1,4));\n+            tests_bad.insert(JSONPrettyPrint(tv.get_array()));\n         }\n     }\n \n@@ -664,7 +676,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = test.GetJSON().write(1,4);\n+        std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -674,7 +686,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = test.GetJSON().write(1,4);\n+        std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      }
    ]
  },
  {
    "sha": "60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGIzMjkyODdjN2M2NDhjY2JiNGQ5NWQ2Y2U3ZGE4MTVlNWNhZmM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:08:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Fix some misconstructed tests\n\nThey claimed to be testing P2SH scripts with non-push scriptSigs, but\n1) they were not enabling P2SH\n2) they have push-only scriptSigs\n\nFix this, and add a few more related cases.",
      "tree": {
        "sha": "040cc044a7b7f71931d6c53420fd3652fe3ff7b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/040cc044a7b7f71931d6c53420fd3652fe3ff7b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42b73b42f5efff59afac9566ba3a13d3c142e202",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b73b42f5efff59afac9566ba3a13d3c142e202",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42b73b42f5efff59afac9566ba3a13d3c142e202"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b9f150eacb2368e34e2c68b951760c93ef550775",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
        "patch": "@@ -845,18 +845,18 @@\n     \"SIG_PUSHONLY\"\n ],\n [\n-    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"\",\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"P2SH\",\n     \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\",\n-    \"EVAL_FALSE\"\n+    \"SIG_PUSHONLY\"\n ],\n [\n-    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n     \"SIGPUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig\",\n-    \"EVAL_FALSE\"\n+    \"P2SH(P2PK) with non-push scriptSig but not P2SH\",\n+    \"SIG_PUSHONLY\"\n ],\n [\n     \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\","
      },
      {
        "sha": "29ccbd92ff930a270a0bb60d50dd27720c65a15f",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
        "patch": "@@ -882,6 +882,18 @@\n     \"\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\"\n ],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"\",\n+    \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\"\n+],\n+[\n+    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 NOP8\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with non-push scriptSig but with P2SH validation\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\","
      },
      {
        "sha": "4ecb56de84981d7866172994fec60c02075ee62f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b329287c7c648ccbb4d95d6ce7da815e5cafc8/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
        "patch": "@@ -628,12 +628,18 @@ BOOST_AUTO_TEST_CASE(script_build)\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n                              ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n+                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with non-push scriptSig but with P2SH validation\", 0\n+                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", 0\n-                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+                              \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n+                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));"
      }
    ]
  },
  {
    "sha": "3bb79007ed822b4e75fa0ef165add4adb61067ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmI3OTAwN2VkODIyYjRlNzVmYTBlZjE2NWFkZDRhZGI2MTA2N2Fl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:26:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Fix formatting of NOPs for generated script tests",
      "tree": {
        "sha": "bf837e4a95f5288829fd3c6e759384628678d6d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf837e4a95f5288829fd3c6e759384628678d6d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bb79007ed822b4e75fa0ef165add4adb61067ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb79007ed822b4e75fa0ef165add4adb61067ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb79007ed822b4e75fa0ef165add4adb61067ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb79007ed822b4e75fa0ef165add4adb61067ae/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b329287c7c648ccbb4d95d6ce7da815e5cafc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60b329287c7c648ccbb4d95d6ce7da815e5cafc8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f9e2266a3966edebde2f519f543239469eece09",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bb79007ed822b4e75fa0ef165add4adb61067ae/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bb79007ed822b4e75fa0ef165add4adb61067ae/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3bb79007ed822b4e75fa0ef165add4adb61067ae",
        "patch": "@@ -35,7 +35,7 @@ string FormatScript(const CScript& script)\n             } else if ((op >= OP_1 && op <= OP_16) || op == OP_1NEGATE) {\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n-            } else if (op >= OP_NOP && op <= OP_CHECKMULTISIGVERIFY) {\n+            } else if (op >= OP_NOP && op <= OP_NOP10) {\n                 string str(GetOpName(op));\n                 if (str.substr(0, 3) == string(\"OP_\")) {\n                     ret += str.substr(3, string::npos) + \" \";\n@@ -45,7 +45,7 @@ string FormatScript(const CScript& script)\n             if (vch.size() > 0) {\n                 ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n             } else {\n-                ret += strprintf(\"0x%x\", HexStr(it2, it));\n+                ret += strprintf(\"0x%x \", HexStr(it2, it));\n             }\n             continue;\n         }"
      }
    ]
  },
  {
    "sha": "5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjY2Y2RhYmQ0N2IyZGQxN2RjYTEyZWJiZTdkN2RjMjE0NzdjMjQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T13:45:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Make script_error a mandatory 4th field for script_tests",
      "tree": {
        "sha": "c2670c3a63d75c7b2c37748d008f5862a82ab37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2670c3a63d75c7b2c37748d008f5862a82ab37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb79007ed822b4e75fa0ef165add4adb61067ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb79007ed822b4e75fa0ef165add4adb61067ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb79007ed822b4e75fa0ef165add4adb61067ae"
      }
    ],
    "stats": {
      "total": 2367,
      "additions": 1200,
      "deletions": 1167
    },
    "files": [
      {
        "sha": "1427cb630a6f2af32e8009f63dfc7e03d866af7f",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 553,
        "deletions": 553,
        "changes": 1106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=5f66cdabd47b2dd17dca12ebbe7d7dc21477c247"
      },
      {
        "sha": "4e86ee78ba604e0463be3e1cc279fd4c0049165f",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 641,
        "deletions": 605,
        "changes": 1246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=5f66cdabd47b2dd17dca12ebbe7d7dc21477c247"
      },
      {
        "sha": "006d8aa644beb27c89a8952dbc026dc531bd6394",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
        "patch": "@@ -263,7 +263,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(-1)\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n     {\n         if (P2SH) {\n             creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n@@ -365,9 +365,8 @@ class TestBuilder\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n+        array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         array.push_back(comment);\n-        if (scriptError != -1)\n-            array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         return array;\n     }\n \n@@ -715,7 +714,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n     // Format is an array of arrays\n-    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\" ]\n+    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n     UniValue tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n@@ -735,6 +734,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n+        BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n \n         DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n     }\n@@ -747,7 +747,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 3) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 4) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -759,10 +759,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        int scriptError = -1; // Expected script error is optional, and follows comment\n-        if (test.size() >= 5 && test[4].get_str() != \"\") {\n-            scriptError = ParseScriptError(test[4].get_str());\n-        }\n+        int scriptError = ParseScriptError(test[3].get_str());\n \n         DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n     }"
      }
    ]
  },
  {
    "sha": "9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjg1YzY4YTRkN2YwZTAwM2RiYzc3M2NiODllYzhjMDVhMGJmNDU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T13:50:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Get rid of expect in script_tests as it's implied by scripterror",
      "tree": {
        "sha": "574b370fff20da9f947af24e27aab3d4207ea816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/574b370fff20da9f947af24e27aab3d4207ea816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f66cdabd47b2dd17dca12ebbe7d7dc21477c247"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6340af2081f955b1b19b45431a8d3495d0786794",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
        "patch": "@@ -145,13 +145,14 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message, int scriptError)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n {\n+    bool expect = (scriptError == SCRIPT_ERR_OK);\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(scriptError == -1 || err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+    BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n@@ -349,11 +350,11 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Test(bool expect)\n+    TestBuilder& Test()\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment, expect ? SCRIPT_ERR_OK : scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -680,7 +681,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     std::string strBad;\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n-        test.Test(true);\n+        test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n@@ -690,7 +691,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n         strGood += str + \",\\n\";\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n-        test.Test(false);\n+        test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n@@ -736,7 +737,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n         BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, SCRIPT_ERR_OK);\n     }\n }\n \n@@ -761,7 +762,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n         int scriptError = ParseScriptError(test[3].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, scriptError);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "90125c23320582860e535ba8254bb9a89232de25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDEyNWMyMzMyMDU4Mjg2MGU1MzViYTgyNTRiYjlhODkyMzJkZTI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T14:11:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Merge script_valid and script_invalid tests",
      "tree": {
        "sha": "1d11da69d0a2a7ebb527c9db319ffc5294decafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d11da69d0a2a7ebb527c9db319ffc5294decafe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90125c23320582860e535ba8254bb9a89232de25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90125c23320582860e535ba8254bb9a89232de25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90125c23320582860e535ba8254bb9a89232de25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90125c23320582860e535ba8254bb9a89232de25/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458"
      }
    ],
    "stats": {
      "total": 2346,
      "additions": 1143,
      "deletions": 1203
    },
    "files": [
      {
        "sha": "226b1ec9c93b9918172f19cb1b72b682a36dddd8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90125c23320582860e535ba8254bb9a89232de25/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90125c23320582860e535ba8254bb9a89232de25/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=90125c23320582860e535ba8254bb9a89232de25",
        "patch": "@@ -20,11 +20,10 @@ EXTRA_DIST += \\\n \ttest/data/txcreatesign.hex\n \n JSON_TEST_FILES = \\\n-  test/data/script_valid.json \\\n+  test/data/script_tests.json \\\n   test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n-  test/data/script_invalid.json \\\n   test/data/tx_invalid.json \\\n   test/data/tx_valid.json \\\n   test/data/sighash.json"
      },
      {
        "sha": "1427cb630a6f2af32e8009f63dfc7e03d866af7f",
        "filename": "src/test/data/script_invalid.json",
        "status": "removed",
        "additions": 0,
        "deletions": 877,
        "changes": 877,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=9b85c68a4d7f0e003dbc773cb89ec8c05a0bf458",
        "patch": "@@ -1,877 +0,0 @@\n-[\n-[\"Format is: [scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n-[\"It is evaluated as if there was a crediting coinbase transaction with two 0\"],\n-[\"pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\"],\n-[\"followed by a spending transaction which spends this output as only input (and\"],\n-[\"correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\"],\n-[\"nSequences are max.\"],\n-\n-[\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"EVAL_FALSE\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n-[\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"and multiple spaces should not change that.\"],\n-[\"   \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"    \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"\", \"\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n-[\"\", \"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n-[\"\", \"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\",\"NOP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\",\"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"DEPTH\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0x4c01\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA1 with not enough bytes\"],\n-[\"0x4d0200ff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA2 with not enough bytes\"],\n-[\"0x4e03000000ffff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA4 with not enough bytes\"],\n-\n-[\"1\", \"IF 0x50 ENDIF 1\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"0x50 is reserved\"],\n-[\"0x52\", \"0x5f ADD 0x60 EQUAL\", \"P2SH,STRICTENC\",\"EVAL_FALSE\", \"0x51 through 0x60 push 1 through 16 onto stack\"],\n-[\"0\",\"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\",\"\"],\n-[\"1\", \"IF VER ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VER non-functional\"],\n-[\"0\", \"IF VERIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n-[\"0\", \"IF ELSE 1 ELSE VERIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n-[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n-[\"0\", \"IF ELSE 1 ELSE VERNOTIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n-\n-[\"1 IF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF/ENDIF can't span scriptSig/scriptPubKey\"],\n-[\"1 IF 0 ENDIF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1 ELSE 0 ENDIF\", \"1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"0 NOTIF\", \"123\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-\n-[\"0\", \"DUP IF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"DUP IF ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"IF 1 ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"NOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 0\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 0\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 1\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1\", \"IF RETURN ELSE ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"Multiple ELSEs\"],\n-[\"1\", \"IF 1 ELSE ELSE RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-\n-[\"1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"Malformed IF/ELSE/ENDIF sequence\"],\n-[\"1\", \"ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"ENDIF ELSE IF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ENDIF ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ELSE ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-\n-[\"1\", \"RETURN\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-[\"1\", \"DUP IF RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-\n-[\"1\", \"RETURN 'data'\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"canonical prunable txout format\"],\n-[\"0 IF\", \"RETURN ENDIF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"still prunable because IF/ENDIF can't span scriptSig/scriptPubKey\"],\n-\n-[\"0\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"VERIFY\"],\n-[\"1\", \"VERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1\", \"VERIFY 0\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1 TOALTSTACK\", \"FROMALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\", \"alt stack not shared between sig/pubkey\"],\n-\n-[\"IFDUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"DROP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"DUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"DUP 1 ADD 2 EQUALVERIFY 0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 0 NIP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0 1\", \"OVER DEPTH 3 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"19 20 21\", \"PICK 19 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"-1 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"19 20 21\", \"0 PICK 20 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"1 PICK 21 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"2 PICK 22 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"0 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"-1 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"19 20 21\", \"0 ROLL 20 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"1 ROLL 21 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"2 ROLL 22 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 2 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0 1 2 ROT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0 1\", \"SWAP 1 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 0\", \"TUCK DEPTH 3 EQUALVERIFY SWAP 2DROP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 2\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2 3 2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n-[\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n-[\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n-[\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n-[\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n-[\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n-[\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n-[\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],\n-[\"1 2 0 IF XOR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"XOR disabled\"],\n-[\"2 0 IF 2MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2MUL disabled\"],\n-[\"2 0 IF 2DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2DIV disabled\"],\n-[\"2 2 0 IF MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MUL disabled\"],\n-[\"2 2 0 IF DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"DIV disabled\"],\n-[\"2 2 0 IF MOD ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MOD disabled\"],\n-[\"2 2 0 IF LSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LSHIFT disabled\"],\n-[\"2 2 0 IF RSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RSHIFT disabled\"],\n-\n-[\"\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are no stack items\"],\n-[\"0\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are not 2 stack items\"],\n-[\"0 1\",\"EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 1 ADD\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"11 1 ADD 12 SUB\", \"11 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n-[\"-2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n-[\"2147483647 DUP ADD\", \"4294967294 NUMEQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NUMEQUAL must be in numeric range\"],\n-[\"'abcdef' NOT\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NOT is an arithmetic operand\"],\n-\n-[\"2 DUP MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 DUP DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"7 3 MOD\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-\n-[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"Ensure 100% coverage of discouraged NOPS\"],\n-[\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP3\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP8\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP9\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP10\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-\n-[\"NOP10\", \"1\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in scriptSig\"],\n-\n-[\"1 0x01 0xb9\", \"HASH160 0x14 0x15727299b05b45fdaf9ac9ecf7565cfe27c3e567 EQUAL\",\n- \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n-\n-[\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n-[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n-[\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xca ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xce ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xda ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xde ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xea ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xeb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xec ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xed ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xee ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xef ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfa ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xff ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-\n-[\"1 IF 1 ELSE\", \"0xff ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"invalid because scriptSig and scriptPubKey are processed separately\"],\n-\n-[\"NOP\", \"RIPEMD160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\",\n-\"'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\",\n-\"P2SH,STRICTENC\",\n-\"PUSH_SIZE\",\n-\">520 byte push\"],\n-[\"0\",\n-\"IF 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' ENDIF 1\",\n-\"P2SH,STRICTENC\",\n-\"PUSH_SIZE\",\n-\">520 byte push in non-executed IF branch\"],\n-[\"1\",\n-\"0x61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\">201 opcodes executed. 0x61 is NOP\"],\n-[\"0\",\n-\"IF 0x6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161 ENDIF 1\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\">201 opcodes including non-executed IF branch. 0x61 is NOP\"],\n-[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"1 2 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"P2SH,STRICTENC\",\n-\"STACK_SIZE\",\n-\">1,000 stack size (0x6f is 3DUP)\"],\n-[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"1 TOALTSTACK 2 TOALTSTACK 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"P2SH,STRICTENC\",\n-\"STACK_SIZE\",\n-\">1,000 stack+altstack size\"],\n-[\"NOP\",\n-\"0 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f 2DUP 0x616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n-\"P2SH,STRICTENC\",\n-\"SCRIPT_SIZE\",\n-\"10,001-byte scriptPubKey\"],\n-\n-[\"NOP1\",\"NOP10\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1\",\"VER\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER is reserved\"],\n-[\"1\",\"VERIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERIF is reserved\"],\n-[\"1\",\"VERNOTIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERNOTIF is reserved\"],\n-[\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n-[\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n-[\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n-[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n-\n-[\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n-[\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n-[\"-2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"Because we use a sign bit, -2147483648 is also 5 bytes\"],\n-[\"2147483647\", \"1ADD 1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n-[\"2147483648\", \"1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n-\n-[\"2147483648 1\", \"BOOLOR 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLOR on 5-byte integers (but we can still do IF etc)\"],\n-[\"2147483648 1\", \"BOOLAND 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLAND on 5-byte integers\"],\n-\n-[\"1\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"ENDIF without IF\"],\n-[\"1\", \"IF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF without ENDIF\"],\n-[\"1 IF 1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IFs don't carry over\"],\n-\n-[\"NOP\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"The following tests check the if(stack.size() < N) tests in each opcode\"],\n-[\"NOP\", \"NOTIF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"They are here to catch copy-and-paste errors\"],\n-[\"NOP\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"Most of them are duplicated elsewhere,\"],\n-\n-[\"NOP\", \"TOALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"but, hey, more is always better, right?\"],\n-[\"1\", \"FROMALTSTACK\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\"],\n-[\"1\", \"2DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"3DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1\", \"2OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 1 1\", \"2ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1\", \"2SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"IFDUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 3\", \"PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0\", \"PICK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 3\", \"ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0\", \"ROLL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"TUCK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"1\", \"EQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"EQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"1ADD 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1SUB 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"ABS 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"NOT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0NOTEQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"1\", \"ADD\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SUB\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"BOOLAND\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"BOOLOR\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMNOTEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"LESSTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"GREATERTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"LESSTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"GREATERTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"MIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"MAX\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"WITHIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"RIPEMD160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA1 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"Increase CHECKSIG and CHECKMULTISIG negative test coverage\"],\n-[\"\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are no stack items\"],\n-[\"0\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are not 2 stack items\"],\n-[\"\", \"CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are no stack items\"],\n-[\"\", \"-1 CHECKMULTISIG NOT\", \"STRICTENC\", \"PUBKEY_COUNT\", \"CHECKMULTISIG must error when the specified number of pubkeys is negative\"],\n-[\"\", \"1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough pubkeys on the stack\"],\n-[\"\", \"-1 0 CHECKMULTISIG NOT\", \"STRICTENC\", \"SIG_COUNT\", \"CHECKMULTISIG must error when the specified number of signatures is negative\"],\n-[\"\", \"1 'pk1' 1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough signatures on the stack\"],\n-[\"\", \"'dummy' 'sig1' 1 'pk1' 1 CHECKMULTISIG IF 1 ENDIF\", \"\", \"EVAL_FALSE\", \"CHECKMULTISIG must push false to stack when signature is invalid when NOT in strict enc mode\"],\n-\n-[\"\",\nn-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"202 CHECKMULTISIGS, fails due to 201 op limit\"],\n-\n-[\"1\",\n-\"0 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY 0 0 CHECKMULTISIGVERIFY\",\n-\"P2SH,STRICTENC\",\n-\"INVALID_STACK_OPERATION\",\n-\"\"],\n-\n-[\"\",\n-\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"Fails due to 201 sig op limit\"],\n-\n-[\"1\",\n-\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"\"],\n-\n-\n-[\"0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"21 CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"PUBKEY_COUNT\", \"nPubKeys > 20\"],\n-[\"0 'sig' 1 0\", \"CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"SIG_COUNT\", \"nSigs > nPubKeys\"],\n-\n-\n-[\"NOP 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\", \"Tests for Script.IsPushOnly()\"],\n-[\"NOP1 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\"],\n-\n-[\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED in P2SH should fail\"],\n-[\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER in P2SH should fail\"],\n-\n-[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"Basic OP_0 execution\"],\n-\n-[\"MINIMALDATA enforcement for PUSHDATAs\"],\n-\n-[\"0x4c 0x00\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"Empty vector minimally represented by OP_0\"],\n-[\"0x01 0x81\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"-1 minimally represented by OP_1NEGATE\"],\n-[\"0x01 0x01\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"1 to 16 minimally represented by OP_1 to OP_16\"],\n-[\"0x01 0x02\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x03\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x04\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x05\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x06\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x07\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x08\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x09\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0a\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0b\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0c\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0d\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0e\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0f\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x10\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-\n-[\"0x4c 0x48 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\", \"DROP 1\", \"MINIMALDATA\",\n- \"MINIMALDATA\",\n- \"PUSHDATA1 of 72 bytes minimally represented by direct push\"],\n-\n-[\"0x4d 0xFF00 0xn- \"MINIMALDATA\",\n- \"PUSHDATA2 of 255 bytes minimally represented by PUSHDATA1\"],\n-\n-[\"0x4e 0x00010000 0xn- \"MINIMALDATA\",\n- \"PUSHDATA4 of 256 bytes minimally represented by PUSHDATA2\"],\n-\n-[\"MINIMALDATA enforcement for numeric arguments\"],\n-\n-[\"0x01 0x00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x01 0x80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"0x80 (negative zero) numequals 0\"],\n-[\"0x02 0x0080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x02 0x0500\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n-[\"0x03 0x050000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n-[\"0x02 0x0580\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n-[\"0x03 0x050080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n-[\"0x03 0xff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff\"],\n-[\"0x03 0xff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xff7f\"],\n-[\"0x04 0xffff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffffff\"],\n-[\"0x04 0xffff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff7f\"],\n-\n-[\"Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule\"],\n-\n-[\"1 0x02 0x0000\", \"PICK DROP\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"1 0x02 0x0000\", \"ROLL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"1ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"1SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"NEGATE DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"ABS DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"0NOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0 0x02 0x0000\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 1\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0x02 0x0000 0 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0 0x02 0x0000\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0 0 0x02 0x0000\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0 1\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-\n-[\"Order of CHECKMULTISIG evaluation tests, inverted by swapping the order of\"],\n-[\"pubkeys/signatures so they fail due to the STRICTENC rules on validly encoded\"],\n-[\"signatures and pubkeys.\"],\n-[\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501\",\n-    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0 2 CHECKMULTISIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n-],\n-[\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n-    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n-    \"STRICTENC\",\n-    \"SIG_DER\",\n-    \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n-],\n-[\n-    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n-    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n-    \"P2SH,STRICTENC\",\n-    \"SIG_DER\",\n-    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n-],\n-\n-[\"Increase DERSIG test coverage\"],\n-[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n-[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Missing S is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n-[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n-[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n-\n-[\"Automatically generated test cases\"],\n-[\n-    \"0x47 0x304402200a5c6163f07b8c3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n-    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK, bad sig\"\n-],\n-[\n-    \"0x47 0x3044022034bb0494b50b8ef130e2185bb220265b9284ef5b4b8a8da4d8415df489c83b5102206259a26d9cc0a125ac26af6153b17c02956855ebe1467412f066e402f5f05d1201 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n-    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n-    \"\",\n-    \"EQUALVERIFY\",\n-    \"P2PKH, bad pubkey\"\n-],\n-[\n-    \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790201\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK anyonecanpay marked with normal hashtype\"\n-],\n-[\n-    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n-    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n-    \"P2SH\",\n-    \"EVAL_FALSE\",\n-    \"P2SH(P2PK), bad redeemscript\"\n-],\n-[\n-    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n-    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n-    \"P2SH\",\n-    \"EQUALVERIFY\",\n-    \"P2SH(P2PKH), bad sig\"\n-],\n-[\n-    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"3-of-3, 2 sigs\"\n-],\n-[\n-    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n-    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n-    \"P2SH\",\n-    \"EVAL_FALSE\",\n-    \"P2SH(2-of-3), 1 sig\"\n-],\n-[\n-    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too much R padding\"\n-],\n-[\n-    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too much S padding\"\n-],\n-[\n-    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too little R padding\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK NOT with bad sig with too much R padding\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK NOT with too much R padding but no DERSIG\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK NOT with too much R padding\"\n-],\n-[\n-    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 1, with DERSIG\"\n-],\n-[\n-    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 2, without DERSIG\"\n-],\n-[\n-    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 2, with DERSIG\"\n-],\n-[\n-    \"0\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 3, without DERSIG\"\n-],\n-[\n-    \"0\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 3, with DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 5, without DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 5, with DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 6, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 7, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 8, without DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 8, with DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 9, without DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 9, with DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 10, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 11, without DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 11, with DERSIG\"\n-],\n-[\n-    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with multi-byte hashtype, with DERSIG\"\n-],\n-[\n-    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"LOW_S\",\n-    \"SIG_HIGH_S\",\n-    \"P2PK with high S\"\n-],\n-[\n-    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK with hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK NOT with hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK NOT with invalid hybrid pubkey\"\n-],\n-[\n-    \"0 0x47 0x3044022079c7824d6c868e0e1a273484e28c2654a27d043c8a27f49f52cb72efed0759090220452bbbf7089574fa082095a4fc1b3a16bafcf97a3a34d745fafc922cce66b27201\",\n-    \"1 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 2 CHECKMULTISIG\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"1-of-2 with the first 1 hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n-    \"STRICTENC\",\n-    \"SIG_HASHTYPE\",\n-    \"P2PK with undefined hashtype\"\n-],\n-[\n-    \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"SIG_HASHTYPE\",\n-    \"P2PK NOT with invalid sig and undefined hashtype\"\n-],\n-[\n-    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n-    \"NULLDUMMY\",\n-    \"SIG_NULLDUMMY\",\n-    \"3-of-3 with nonzero dummy\"\n-],\n-[\n-    \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n-    \"NULLDUMMY\",\n-    \"SIG_NULLDUMMY\",\n-    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n-],\n-[\n-    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n-    \"SIGPUSHONLY\",\n-    \"SIG_PUSHONLY\",\n-    \"2-of-2 with two identical keys and sigs pushed using OP_DUP\"\n-],\n-[\n-    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n-    \"P2SH\",\n-    \"SIG_PUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\"\n-],\n-[\n-    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n-    \"SIGPUSHONLY\",\n-    \"SIG_PUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig but not P2SH\"\n-],\n-[\n-    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n-    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"CLEANSTACK,P2SH\",\n-    \"CLEANSTACK\",\n-    \"P2PK with unnecessary input\"\n-],\n-[\n-    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n-    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n-    \"CLEANSTACK,P2SH\",\n-    \"CLEANSTACK\",\n-    \"P2SH with unnecessary input\"\n-],\n-\n-[\"The End\"]\n-]"
      },
      {
        "sha": "e69cc9e41371e3fa9e781e0dfd83bc9f8ac411d9",
        "filename": "src/test/data/script_tests.json",
        "status": "renamed",
        "additions": 865,
        "deletions": 0,
        "changes": 865,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90125c23320582860e535ba8254bb9a89232de25/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90125c23320582860e535ba8254bb9a89232de25/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=90125c23320582860e535ba8254bb9a89232de25",
        "patch": "@@ -701,6 +701,556 @@\n [\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Zero-length S is correctly encoded for DERSIG\"],\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Negative S is correctly encoded\"],\n \n+[\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"EVAL_FALSE\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n+[\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"and multiple spaces should not change that.\"],\n+[\"   \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"    \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"\", \"\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n+[\"\", \"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n+[\"\", \"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\",\"NOP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\",\"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"DEPTH\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0x4c01\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA1 with not enough bytes\"],\n+[\"0x4d0200ff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA2 with not enough bytes\"],\n+[\"0x4e03000000ffff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA4 with not enough bytes\"],\n+\n+[\"1\", \"IF 0x50 ENDIF 1\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"0x50 is reserved\"],\n+[\"0x52\", \"0x5f ADD 0x60 EQUAL\", \"P2SH,STRICTENC\",\"EVAL_FALSE\", \"0x51 through 0x60 push 1 through 16 onto stack\"],\n+[\"0\",\"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\",\"\"],\n+[\"1\", \"IF VER ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VER non-functional\"],\n+[\"0\", \"IF VERIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n+[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERNOTIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n+\n+[\"1 IF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF/ENDIF can't span scriptSig/scriptPubKey\"],\n+[\"1 IF 0 ENDIF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1 ELSE 0 ENDIF\", \"1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"0 NOTIF\", \"123\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+\n+[\"0\", \"DUP IF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"DUP IF ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"IF 1 ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"NOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 0\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 0\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 1\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1\", \"IF RETURN ELSE ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"Multiple ELSEs\"],\n+[\"1\", \"IF 1 ELSE ELSE RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+\n+[\"1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"Malformed IF/ELSE/ENDIF sequence\"],\n+[\"1\", \"ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"ENDIF ELSE IF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ENDIF ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ELSE ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+\n+[\"1\", \"RETURN\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+[\"1\", \"DUP IF RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+\n+[\"1\", \"RETURN 'data'\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"canonical prunable txout format\"],\n+[\"0 IF\", \"RETURN ENDIF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"still prunable because IF/ENDIF can't span scriptSig/scriptPubKey\"],\n+\n+[\"0\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"VERIFY\"],\n+[\"1\", \"VERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1\", \"VERIFY 0\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1 TOALTSTACK\", \"FROMALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\", \"alt stack not shared between sig/pubkey\"],\n+\n+[\"IFDUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"DROP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"DUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"DUP 1 ADD 2 EQUALVERIFY 0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 0 NIP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0 1\", \"OVER DEPTH 3 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"19 20 21\", \"PICK 19 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"-1 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"19 20 21\", \"0 PICK 20 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"1 PICK 21 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"2 PICK 22 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"0 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"-1 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"19 20 21\", \"0 ROLL 20 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"1 ROLL 21 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"2 ROLL 22 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 2 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0 1 2 ROT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0 1\", \"SWAP 1 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 0\", \"TUCK DEPTH 3 EQUALVERIFY SWAP 2DROP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 2\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2 3 2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n+[\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n+[\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n+[\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n+[\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n+[\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n+[\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n+[\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],\n+[\"1 2 0 IF XOR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"XOR disabled\"],\n+[\"2 0 IF 2MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2MUL disabled\"],\n+[\"2 0 IF 2DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2DIV disabled\"],\n+[\"2 2 0 IF MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MUL disabled\"],\n+[\"2 2 0 IF DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"DIV disabled\"],\n+[\"2 2 0 IF MOD ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MOD disabled\"],\n+[\"2 2 0 IF LSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LSHIFT disabled\"],\n+[\"2 2 0 IF RSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RSHIFT disabled\"],\n+\n+[\"\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are no stack items\"],\n+[\"0\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are not 2 stack items\"],\n+[\"0 1\",\"EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 1 ADD\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"11 1 ADD 12 SUB\", \"11 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"-2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"2147483647 DUP ADD\", \"4294967294 NUMEQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NUMEQUAL must be in numeric range\"],\n+[\"'abcdef' NOT\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NOT is an arithmetic operand\"],\n+\n+[\"2 DUP MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 DUP DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"7 3 MOD\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"Ensure 100% coverage of discouraged NOPS\"],\n+[\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP3\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP8\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP9\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP10\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+\n+[\"NOP10\", \"1\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in scriptSig\"],\n+\n+[\"1 0x01 0xb9\", \"HASH160 0x14 0x15727299b05b45fdaf9ac9ecf7565cfe27c3e567 EQUAL\",\n+ \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n+\n+[\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n+[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n+[\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xca ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xce ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xda ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xde ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xea ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xeb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xec ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xed ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xee ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xef ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfa ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xff ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+\n+[\"1 IF 1 ELSE\", \"0xff ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"invalid because scriptSig and scriptPubKey are processed separately\"],\n+\n+[\"NOP\", \"RIPEMD160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\",\n+\"'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\",\n+\"P2SH,STRICTENC\",\n+\"PUSH_SIZE\",\n+\">520 byte push\"],\n+[\"0\",\n+\"IF 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' ENDIF 1\",\n+\"P2SH,STRICTENC\",\n+\"PUSH_SIZE\",\n+\">520 byte push in non-executed IF branch\"],\n+[\"1\",\n+\"0x61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\">201 opcodes executed. 0x61 is NOP\"],\n+[\"0\",\n+\"IF 0x6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161 ENDIF 1\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\">201 opcodes including non-executed IF branch. 0x61 is NOP\"],\n+[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"1 2 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"P2SH,STRICTENC\",\n+\"STACK_SIZE\",\n+\">1,000 stack size (0x6f is 3DUP)\"],\n+[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"1 TOALTSTACK 2 TOALTSTACK 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"P2SH,STRICTENC\",\n+\"STACK_SIZE\",\n+\">1,000 stack+altstack size\"],\n+[\"NOP\",\n+\"0 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f 2DUP 0x616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n+\"P2SH,STRICTENC\",\n+\"SCRIPT_SIZE\",\n+\"10,001-byte scriptPubKey\"],\n+\n+[\"NOP1\",\"NOP10\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1\",\"VER\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER is reserved\"],\n+[\"1\",\"VERIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERIF is reserved\"],\n+[\"1\",\"VERNOTIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERNOTIF is reserved\"],\n+[\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n+[\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n+[\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n+[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n+\n+[\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n+[\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n+[\"-2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"Because we use a sign bit, -2147483648 is also 5 bytes\"],\n+[\"2147483647\", \"1ADD 1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n+[\"2147483648\", \"1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n+\n+[\"2147483648 1\", \"BOOLOR 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLOR on 5-byte integers (but we can still do IF etc)\"],\n+[\"2147483648 1\", \"BOOLAND 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLAND on 5-byte integers\"],\n+\n+[\"1\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"ENDIF without IF\"],\n+[\"1\", \"IF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF without ENDIF\"],\n+[\"1 IF 1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IFs don't carry over\"],\n+\n+[\"NOP\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"The following tests check the if(stack.size() < N) tests in each opcode\"],\n+[\"NOP\", \"NOTIF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"They are here to catch copy-and-paste errors\"],\n+[\"NOP\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"Most of them are duplicated elsewhere,\"],\n+\n+[\"NOP\", \"TOALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"but, hey, more is always better, right?\"],\n+[\"1\", \"FROMALTSTACK\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\"],\n+[\"1\", \"2DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"3DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1\", \"2OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 1 1\", \"2ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1\", \"2SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"IFDUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 3\", \"PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0\", \"PICK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 3\", \"ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0\", \"ROLL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"TUCK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"1\", \"EQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"EQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"1ADD 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1SUB 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"ABS 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"NOT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0NOTEQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"1\", \"ADD\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SUB\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"BOOLAND\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"BOOLOR\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMNOTEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"LESSTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"GREATERTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"LESSTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"GREATERTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"MIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"MAX\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"WITHIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"RIPEMD160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA1 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"Increase CHECKSIG and CHECKMULTISIG negative test coverage\"],\n+[\"\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are no stack items\"],\n+[\"0\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are not 2 stack items\"],\n+[\"\", \"CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are no stack items\"],\n+[\"\", \"-1 CHECKMULTISIG NOT\", \"STRICTENC\", \"PUBKEY_COUNT\", \"CHECKMULTISIG must error when the specified number of pubkeys is negative\"],\n+[\"\", \"1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough pubkeys on the stack\"],\n+[\"\", \"-1 0 CHECKMULTISIG NOT\", \"STRICTENC\", \"SIG_COUNT\", \"CHECKMULTISIG must error when the specified number of signatures is negative\"],\n+[\"\", \"1 'pk1' 1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough signatures on the stack\"],\n+[\"\", \"'dummy' 'sig1' 1 'pk1' 1 CHECKMULTISIG IF 1 ENDIF\", \"\", \"EVAL_FALSE\", \"CHECKMULTISIG must push false to stack when signature is invalid when NOT in strict enc mode\"],\n+\n+[\"\",\nn+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"202 CHECKMULTISIGS, fails due to 201 op limit\"],\n+\n+[\"1\",\nn+\"P2SH,STRICTENC\",\n+\"INVALID_STACK_OPERATION\",\n+\"\"],\n+\n+[\"\",\n+\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"Fails due to 201 sig op limit\"],\n+\n+[\"1\",\n+\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"\"],\n+\n+\n+[\"0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"21 CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"PUBKEY_COUNT\", \"nPubKeys > 20\"],\n+[\"0 'sig' 1 0\", \"CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"SIG_COUNT\", \"nSigs > nPubKeys\"],\n+\n+\n+[\"NOP 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\", \"Tests for Script.IsPushOnly()\"],\n+[\"NOP1 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\"],\n+\n+[\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED in P2SH should fail\"],\n+[\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER in P2SH should fail\"],\n+\n+[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"Basic OP_0 execution\"],\n+\n+[\"MINIMALDATA enforcement for PUSHDATAs\"],\n+\n+[\"0x4c 0x00\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"Empty vector minimally represented by OP_0\"],\n+[\"0x01 0x81\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"-1 minimally represented by OP_1NEGATE\"],\n+[\"0x01 0x01\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"1 to 16 minimally represented by OP_1 to OP_16\"],\n+[\"0x01 0x02\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x03\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x04\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x05\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x06\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x07\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x08\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x09\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0a\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0b\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0c\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0d\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0e\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0f\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x10\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+\n+[\"0x4c 0x48 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\", \"DROP 1\", \"MINIMALDATA\",\n+ \"MINIMALDATA\",\n+ \"PUSHDATA1 of 72 bytes minimally represented by direct push\"],\n+\n+[\"0x4d 0xFF00 0xn+ \"MINIMALDATA\",\n+ \"PUSHDATA2 of 255 bytes minimally represented by PUSHDATA1\"],\n+\n+[\"0x4e 0x00010000 0xn+ \"MINIMALDATA\",\n+ \"PUSHDATA4 of 256 bytes minimally represented by PUSHDATA2\"],\n+\n+[\"MINIMALDATA enforcement for numeric arguments\"],\n+\n+[\"0x01 0x00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x01 0x80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"0x80 (negative zero) numequals 0\"],\n+[\"0x02 0x0080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x02 0x0500\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n+[\"0x03 0x050000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n+[\"0x02 0x0580\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n+[\"0x03 0x050080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n+[\"0x03 0xff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff\"],\n+[\"0x03 0xff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xff7f\"],\n+[\"0x04 0xffff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffffff\"],\n+[\"0x04 0xffff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff7f\"],\n+\n+[\"Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule\"],\n+\n+[\"1 0x02 0x0000\", \"PICK DROP\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"1 0x02 0x0000\", \"ROLL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"1ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"1SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"NEGATE DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"ABS DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"0NOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0 0x02 0x0000\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 1\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0x02 0x0000 0 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0 0x02 0x0000\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0 0 0x02 0x0000\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0 1\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+\n+[\"Order of CHECKMULTISIG evaluation tests, inverted by swapping the order of\"],\n+[\"pubkeys/signatures so they fail due to the STRICTENC rules on validly encoded\"],\n+[\"signatures and pubkeys.\"],\n+[\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501\",\n+    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0 2 CHECKMULTISIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n+],\n+[\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n+    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n+    \"STRICTENC\",\n+    \"SIG_DER\",\n+    \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n+],\n+[\n+    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n+    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n+    \"P2SH,STRICTENC\",\n+    \"SIG_DER\",\n+    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n+],\n+\n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n@@ -709,83 +1259,209 @@\n     \"OK\",\n     \"P2PK\"\n ],\n+[\n+    \"0x47 0x304402200a5c6163f07b8c3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK, bad sig\"\n+],\n [\n     \"0x47 0x304402206e05a6fe23c59196ffe176c9ddc31e73a9885638f9d1328d47c0c703863b8876022076feb53811aa5b04e0e79f938eb19906cc5e67548bc555a8e8b8b0fc603d840c01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n     \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PKH\"\n ],\n+[\n+    \"0x47 0x3044022034bb0494b50b8ef130e2185bb220265b9284ef5b4b8a8da4d8415df489c83b5102206259a26d9cc0a125ac26af6153b17c02956855ebe1467412f066e402f5f05d1201 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n+    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"EQUALVERIFY\",\n+    \"P2PKH, bad pubkey\"\n+],\n [\n     \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790281\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK anyonecanpay\"\n ],\n+[\n+    \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790201\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK anyonecanpay marked with normal hashtype\"\n+],\n [\n     \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n     \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH(P2PK)\"\n ],\n+[\n+    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"EVAL_FALSE\",\n+    \"P2SH(P2PK), bad redeemscript\"\n+],\n [\n     \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n     \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n     \"\",\n     \"OK\",\n     \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"\n ],\n+[\n+    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"P2SH\",\n+    \"EQUALVERIFY\",\n+    \"P2SH(P2PKH), bad sig\"\n+],\n [\n     \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"3-of-3\"\n ],\n+[\n+    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"3-of-3, 2 sigs\"\n+],\n [\n     \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0x47 0x30440220563e5b3b1fc11662a84bc5ea2a32cc3819703254060ba30d639a1aaf2d5068ad0220601c1f47ddc76d93284dd9ed68f7c9974c4a0ea7cbe8a247d6bc3878567a5fca01 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n     \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH(2-of-3)\"\n ],\n+[\n+    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"EVAL_FALSE\",\n+    \"P2SH(2-of-3), 1 sig\"\n+],\n [\n     \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too much R padding\"\n+],\n [\n     \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too much S padding but no DERSIG\"\n ],\n+[\n+    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too much S padding\"\n+],\n [\n     \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too little R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too little R padding\"\n+],\n [\n     \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK NOT with bad sig with too much R padding\"\n+],\n+[\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK NOT with too much R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK NOT with too much R padding\"\n+],\n [\n     \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 1, without DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n [\n     \"0\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n@@ -800,27 +1476,104 @@\n     \"OK\",\n     \"BIP66 example 4, with DERSIG\"\n ],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n [\n     \"1\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 6, without DERSIG\"\n ],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n [\n     \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 7, without DERSIG\"\n ],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n [\n     \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 10, without DERSIG\"\n ],\n+[\n+    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n@@ -842,27 +1595,69 @@\n     \"OK\",\n     \"P2PK with multi-byte hashtype, without DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with high S but no LOW_S\"\n ],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S\",\n+    \"SIG_HIGH_S\",\n+    \"P2PK with high S\"\n+],\n [\n     \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with hybrid pubkey but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK NOT with hybrid pubkey\"\n+],\n [\n     \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK NOT with invalid hybrid pubkey\"\n+],\n [\n     \"0 0x47 0x304402202e79441ad1baf5a07fb86bae3753184f6717d9692680947ea8b6e8b777c69af1022079a262e13d868bb5a0964fefe3ba26942e1b0669af1afb55ef3344bc9d4fc4c401\",\n     \"1 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n@@ -877,41 +1672,83 @@\n     \"OK\",\n     \"1-of-2 with the second 1 hybrid pubkey\"\n ],\n+[\n+    \"0 0x47 0x3044022079c7824d6c868e0e1a273484e28c2654a27d043c8a27f49f52cb72efed0759090220452bbbf7089574fa082095a4fc1b3a16bafcf97a3a34d745fafc922cce66b27201\",\n+    \"1 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 2 CHECKMULTISIG\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"1-of-2 with the first 1 hybrid pubkey\"\n+],\n [\n     \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with undefined hashtype but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"STRICTENC\",\n+    \"SIG_HASHTYPE\",\n+    \"P2PK with undefined hashtype\"\n+],\n [\n     \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"SIG_HASHTYPE\",\n+    \"P2PK NOT with invalid sig and undefined hashtype\"\n+],\n [\n     \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"NULLDUMMY\",\n+    \"SIG_NULLDUMMY\",\n+    \"3-of-3 with nonzero dummy\"\n+],\n [\n     \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n     \"\",\n     \"OK\",\n     \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"NULLDUMMY\",\n+    \"SIG_NULLDUMMY\",\n+    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\"\n ],\n+[\n+    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n+    \"SIGPUSHONLY\",\n+    \"SIG_PUSHONLY\",\n+    \"2-of-2 with two identical keys and sigs pushed using OP_DUP\"\n+],\n [\n     \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n     \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n@@ -926,6 +1763,20 @@\n     \"OK\",\n     \"P2PK with non-push scriptSig but with P2SH validation\"\n ],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"P2SH\",\n+    \"SIG_PUSHONLY\",\n+    \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\"\n+],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"SIGPUSHONLY\",\n+    \"SIG_PUSHONLY\",\n+    \"P2SH(P2PK) with non-push scriptSig but not P2SH\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n@@ -940,13 +1791,27 @@\n     \"OK\",\n     \"P2PK with unnecessary input but no CLEANSTACK\"\n ],\n+[\n+    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"CLEANSTACK,P2SH\",\n+    \"CLEANSTACK\",\n+    \"P2PK with unnecessary input\"\n+],\n [\n     \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH with unnecessary input but no CLEANSTACK\"\n ],\n+[\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n+    \"CLEANSTACK,P2SH\",\n+    \"CLEANSTACK\",\n+    \"P2SH with unnecessary input\"\n+],\n [\n     \"0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",",
        "previous_filename": "src/test/data/script_valid.json"
      },
      {
        "sha": "d42187f9127c29a4330f78c44ec70378f8283eec",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 277,
        "deletions": 324,
        "changes": 601,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90125c23320582860e535ba8254bb9a89232de25/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90125c23320582860e535ba8254bb9a89232de25/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=90125c23320582860e535ba8254bb9a89232de25",
        "patch": "@@ -2,8 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"data/script_invalid.json.h\"\n-#include \"data/script_valid.json.h\"\n+#include \"data/script_tests.json.h\"\n \n #include \"core_io.h\"\n #include \"key.h\"\n@@ -399,356 +398,310 @@ BOOST_AUTO_TEST_CASE(script_build)\n {\n     const KeyData keys;\n \n-    std::vector<TestBuilder> good;\n-    std::vector<TestBuilder> bad;\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2PK\", 0\n-                              ).PushSig(keys.key0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2PK, bad sig\", 0\n-                             ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                               \"P2PKH\", 0\n-                              ).PushSig(keys.key1).Push(keys.pubkey1C));\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                              \"P2PKH, bad pubkey\", 0\n-                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                               \"P2PK anyonecanpay\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                              \"P2PK anyonecanpay marked with normal hashtype\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n-                               \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n-                              ).PushSig(keys.key0).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                               \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n-                              ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                              \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n-\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"3-of-3\", 0\n-                              ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"3-of-3, 2 sigs\", 0\n-                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n-                              ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too much R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too much S padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too little R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with too much R padding but no DERSIG\", 0\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"BIP66 example 1, without DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 2, without DERSIG\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 3, without DERSIG\", 0\n-                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 4, without DERSIG\", 0\n-                              ).Num(0));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).Num(0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 5, without DERSIG\", 0\n-                             ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 6, without DERSIG\", 0\n-                              ).Num(1));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"BIP66 example 7, without DERSIG\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 8, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 9, without DERSIG\", 0\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 10, without DERSIG\", 0\n-                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 11, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 12, without DERSIG\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with high S but no LOW_S\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n-                               \"P2PK with hybrid pubkey but no STRICTENC\", 0\n-                              ).PushSig(keys.key0, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n-                              \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n-                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n-    good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"1-of-2 with the second 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n-                              \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                               \"P2PK with undefined hashtype but no STRICTENC\", 0\n-                              ).PushSig(keys.key1, 5));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                              \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n-                              ).PushSig(keys.key1, 5).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n-                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n-                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n-\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n-                              ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n-                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with non-push scriptSig but with P2SH validation\", 0\n-                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n-                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n-                              ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n-                              ).Num(11).PushSig(keys.key0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n-                             ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n-                              ).Num(11).PushSig(keys.key0).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                             ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                              ).PushSig(keys.key0).PushRedeem());\n-\n-\n-    std::set<std::string> tests_good;\n-    std::set<std::string> tests_bad;\n+    std::vector<TestBuilder> tests;\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK\", 0\n+                               ).PushSig(keys.key0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK, bad sig\", 0\n+                               ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2PKH\", 0\n+                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2PKH, bad pubkey\", 0\n+                               ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK anyonecanpay\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK anyonecanpay marked with normal hashtype\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n+                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3\", 0\n+                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3, 2 sigs\", 0\n+                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much S padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too little R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 1, without DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 2, without DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 3, without DERSIG\", 0\n+                               ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 4, without DERSIG\", 0\n+                               ).Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 5, without DERSIG\", 0\n+                               ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 6, without DERSIG\", 0\n+                               ).Num(1));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 7, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 8, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 9, without DERSIG\", 0\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 10, without DERSIG\", 0\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 11, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 12, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with high S but no LOW_S\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n+                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n+                                \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the second 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n+                               ).PushSig(keys.key1, 5));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n+                               ).PushSig(keys.key1, 5).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n+                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n+                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with non-push scriptSig but with P2SH validation\", 0\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n+                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n+                               ).Num(11).PushSig(keys.key0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n+                               ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(11).PushSig(keys.key0).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                               ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem());\n+\n+\n+    std::set<std::string> tests_set;\n \n     {\n-        UniValue json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n-        UniValue json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+        UniValue json_tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n-        for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n-            const UniValue& tv = json_good[idx];\n-            tests_good.insert(JSONPrettyPrint(tv.get_array()));\n-        }\n-        for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n-            const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(JSONPrettyPrint(tv.get_array()));\n+        for (unsigned int idx = 0; idx < json_tests.size(); idx++) {\n+            const UniValue& tv = json_tests[idx];\n+            tests_set.insert(JSONPrettyPrint(tv.get_array()));\n         }\n     }\n \n-    std::string strGood;\n-    std::string strBad;\n+    std::string strGen;\n \n-    BOOST_FOREACH(TestBuilder& test, good) {\n+    BOOST_FOREACH(TestBuilder& test, tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n-        if (tests_good.count(str) == 0) {\n+        if (tests_set.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n         }\n #endif\n-        strGood += str + \",\\n\";\n-    }\n-    BOOST_FOREACH(TestBuilder& test, bad) {\n-        test.Test();\n-        std::string str = JSONPrettyPrint(test.GetJSON());\n-#ifndef UPDATE_JSON_TESTS\n-        if (tests_bad.count(str) == 0) {\n-            BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());\n-        }\n-#endif\n-        strBad += str + \",\\n\";\n+        strGen += str + \",\\n\";\n     }\n \n #ifdef UPDATE_JSON_TESTS\n-    FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n-    fputs(strGood.c_str(), valid);\n-    fclose(valid);\n-    FILE* invalid = fopen(\"script_invalid.json.gen\", \"w\");\n-    fputs(strBad.c_str(), invalid);\n-    fclose(invalid);\n+    FILE* file = fopen(\"script_tests.json.gen\", \"w\");\n+    fputs(strGen.c_str(), file);\n+    fclose(file);\n #endif\n }\n \n-BOOST_AUTO_TEST_CASE(script_valid)\n+BOOST_AUTO_TEST_CASE(script_json_test)\n {\n-    // Read tests from test/data/script_valid.json\n+    // Read tests from test/data/script_tests.json\n     // Format is an array of arrays\n     // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n-    UniValue tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        string strTest = test.write();\n-        if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n-        {\n-            if (test.size() != 1) {\n-                BOOST_ERROR(\"Bad test: \" << strTest);\n-            }\n-            continue;\n-        }\n-        string scriptSigString = test[0].get_str();\n-        CScript scriptSig = ParseScript(scriptSigString);\n-        string scriptPubKeyString = test[1].get_str();\n-        CScript scriptPubKey = ParseScript(scriptPubKeyString);\n-        unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n-\n-        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, SCRIPT_ERR_OK);\n-    }\n-}\n+    UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n-BOOST_AUTO_TEST_CASE(script_invalid)\n-{\n-    // Scripts that should evaluate as invalid\n-    UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 4) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 4) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);"
      }
    ]
  },
  {
    "sha": "4f90d36e903e8b3331489ca943aea2380de05360",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjkwZDM2ZTkwM2U4YjMzMzE0ODljYTk0M2FlYTIzODBkZTA1MzYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-28T19:47:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "[qa] wallet: Wait for reindex to catch up",
      "tree": {
        "sha": "6cfa9a67ca4b1b573173250ac43b5976b0c99396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cfa9a67ca4b1b573173250ac43b5976b0c99396"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f90d36e903e8b3331489ca943aea2380de05360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f90d36e903e8b3331489ca943aea2380de05360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f90d36e903e8b3331489ca943aea2380de05360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f90d36e903e8b3331489ca943aea2380de05360/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90125c23320582860e535ba8254bb9a89232de25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90125c23320582860e535ba8254bb9a89232de25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90125c23320582860e535ba8254bb9a89232de25"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "af417e6d53f16b09e657713aca86cc27251838a8",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f90d36e903e8b3331489ca943aea2380de05360/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f90d36e903e8b3331489ca943aea2380de05360/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=4f90d36e903e8b3331489ca943aea2380de05360",
        "patch": "@@ -256,6 +256,7 @@ def run_test (self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n+        block_count = self.nodes[0].getblockcount()\n \n         maintenance = [\n             '-rescan',\n@@ -268,10 +269,9 @@ def run_test (self):\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n-            connect_nodes_bi(self.nodes,0,1)\n-            connect_nodes_bi(self.nodes,1,2)\n-            connect_nodes_bi(self.nodes,0,2)\n-            self.sync_all()\n+            while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n+                # reindex will leave rpc warm up \"early\"; Wait for it to finish\n+                time.sleep(0.1)\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n "
      }
    ]
  },
  {
    "sha": "c7474657c93b4c6496bcf905b926960e6cfe8800",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQ3NDY1N2M5M2I0YzY0OTZiY2Y5MDViOTI2OTYwZTZjZmU4ODAw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-04-11T16:52:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T13:38:15Z"
      },
      "message": "Use txid as key in mapAlreadyAskedFor\n\nPreviously we used the CInv that would be sent to the peer announcing the\ntransaction as the key, but using the txid instead allows us to decouple the\np2p layer from the application logic (which relies on this map to avoid\nduplicate tx requests).",
      "tree": {
        "sha": "3dec85d031474f2f950f72478b5c7db0a2b1ecb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dec85d031474f2f950f72478b5c7db0a2b1ecb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7474657c93b4c6496bcf905b926960e6cfe8800",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7474657c93b4c6496bcf905b926960e6cfe8800",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7474657c93b4c6496bcf905b926960e6cfe8800",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7474657c93b4c6496bcf905b926960e6cfe8800/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f90d36e903e8b3331489ca943aea2380de05360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f90d36e903e8b3331489ca943aea2380de05360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f90d36e903e8b3331489ca943aea2380de05360"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "327b9f64cc43bff451c455b9e1580a0b97c836d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7474657c93b4c6496bcf905b926960e6cfe8800/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7474657c93b4c6496bcf905b926960e6cfe8800/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c7474657c93b4c6496bcf905b926960e6cfe8800",
        "patch": "@@ -5016,7 +5016,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CValidationState state;\n \n         pfrom->setAskFor.erase(inv.hash);\n-        mapAlreadyAskedFor.erase(inv);\n+        mapAlreadyAskedFor.erase(inv.hash);\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {"
      },
      {
        "sha": "3985f92a3c4cd661c035472bd4d758d8caef7114",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7474657c93b4c6496bcf905b926960e6cfe8800/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7474657c93b4c6496bcf905b926960e6cfe8800/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c7474657c93b4c6496bcf905b926960e6cfe8800",
        "patch": "@@ -95,7 +95,7 @@ CCriticalSection cs_vNodes;\n map<CInv, CDataStream> mapRelay;\n deque<pair<int64_t, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n-limitedmap<CInv, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n+limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;\n@@ -2428,7 +2428,7 @@ void CNode::AskFor(const CInv& inv)\n     // We're using mapAskFor as a priority queue,\n     // the key is the earliest time the request can be sent\n     int64_t nRequestTime;\n-    limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n+    limitedmap<uint256, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv.hash);\n     if (it != mapAlreadyAskedFor.end())\n         nRequestTime = it->second;\n     else\n@@ -2447,7 +2447,7 @@ void CNode::AskFor(const CInv& inv)\n     if (it != mapAlreadyAskedFor.end())\n         mapAlreadyAskedFor.update(it, nRequestTime);\n     else\n-        mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n+        mapAlreadyAskedFor.insert(std::make_pair(inv.hash, nRequestTime));\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n "
      },
      {
        "sha": "d9dcac3da8f00f98ae02f238970dea325a85ae30",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7474657c93b4c6496bcf905b926960e6cfe8800/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7474657c93b4c6496bcf905b926960e6cfe8800/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c7474657c93b4c6496bcf905b926960e6cfe8800",
        "patch": "@@ -164,7 +164,7 @@ extern CCriticalSection cs_vNodes;\n extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern limitedmap<CInv, int64_t> mapAlreadyAskedFor;\n+extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n extern CCriticalSection cs_vAddedNodes;"
      }
    ]
  },
  {
    "sha": "119677249da339a791a17bdc3d771f16a18300cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTk2NzcyNDlkYTMzOWE3OTFhMTdiZGMzZDc3MWYxNmExODMwMGNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:04:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:28:37Z"
      },
      "message": "Change mapRelay to store CTransactions",
      "tree": {
        "sha": "fbf2cfddbf9107a8cb08df0443624bcee05c7ca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbf2cfddbf9107a8cb08df0443624bcee05c7ca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/119677249da339a791a17bdc3d771f16a18300cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119677249da339a791a17bdc3d771f16a18300cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/119677249da339a791a17bdc3d771f16a18300cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119677249da339a791a17bdc3d771f16a18300cd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7474657c93b4c6496bcf905b926960e6cfe8800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7474657c93b4c6496bcf905b926960e6cfe8800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7474657c93b4c6496bcf905b926960e6cfe8800"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 8,
      "deletions": 21
    },
    "files": [
      {
        "sha": "91cfee0c3ce408169259457ce6bced4572beef08",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119677249da339a791a17bdc3d771f16a18300cd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119677249da339a791a17bdc3d771f16a18300cd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=119677249da339a791a17bdc3d771f16a18300cd",
        "patch": "@@ -4494,7 +4494,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 bool pushed = false;\n                 {\n                     LOCK(cs_mapRelay);\n-                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n+                    map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n                         pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n                         pushed = true;\n@@ -4503,10 +4503,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 if (!pushed && inv.type == MSG_TX) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n-                        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-                        ss.reserve(1000);\n-                        ss << tx;\n-                        pfrom->PushMessage(NetMsgType::TX, ss);\n+                        pfrom->PushMessage(NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }"
      },
      {
        "sha": "1cdba19e4bec8533674910b659340c38f18e41b8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119677249da339a791a17bdc3d771f16a18300cd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119677249da339a791a17bdc3d771f16a18300cd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=119677249da339a791a17bdc3d771f16a18300cd",
        "patch": "@@ -92,8 +92,8 @@ std::string strSubVersion;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n-map<CInv, CDataStream> mapRelay;\n-deque<pair<int64_t, CInv> > vRelayExpiration;\n+map<uint256, CTransaction> mapRelay;\n+deque<pair<int64_t, uint256> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n@@ -2057,14 +2057,6 @@ instance_of_cnetcleanup;\n \n \n void RelayTransaction(const CTransaction& tx)\n-{\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss.reserve(10000);\n-    ss << tx;\n-    RelayTransaction(tx, ss);\n-}\n-\n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     {\n@@ -2076,9 +2068,8 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n             vRelayExpiration.pop_front();\n         }\n \n-        // Save original serialized message so newer versions are preserved\n-        mapRelay.insert(std::make_pair(inv, ss));\n-        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n+        mapRelay.insert(std::make_pair(inv.hash, tx));\n+        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv.hash));\n     }\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)"
      },
      {
        "sha": "1549d7249b95b4c508343153062faf598e925f20",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119677249da339a791a17bdc3d771f16a18300cd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119677249da339a791a17bdc3d771f16a18300cd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=119677249da339a791a17bdc3d771f16a18300cd",
        "patch": "@@ -161,8 +161,8 @@ extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n-extern std::map<CInv, CDataStream> mapRelay;\n-extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n+extern std::map<uint256, CTransaction> mapRelay;\n+extern std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n@@ -763,7 +763,6 @@ class CNode\n \n class CTransaction;\n void RelayTransaction(const CTransaction& tx);\n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      }
    ]
  },
  {
    "sha": "2a74ff09abfec1f1b52c2f05de0915f81524f733",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTc0ZmYwOWFiZmVjMWYxYjUyYzJmMDVkZTA5MTVmODE1MjRmNzMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:30:54Z"
      },
      "message": "--- [SEGWIT] begin: segnet ---",
      "tree": {
        "sha": "fbf2cfddbf9107a8cb08df0443624bcee05c7ca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbf2cfddbf9107a8cb08df0443624bcee05c7ca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a74ff09abfec1f1b52c2f05de0915f81524f733",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a74ff09abfec1f1b52c2f05de0915f81524f733",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a74ff09abfec1f1b52c2f05de0915f81524f733",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a74ff09abfec1f1b52c2f05de0915f81524f733/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "119677249da339a791a17bdc3d771f16a18300cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119677249da339a791a17bdc3d771f16a18300cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/119677249da339a791a17bdc3d771f16a18300cd"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "efbd772eb6e1105f23282025e121737add8418ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmJkNzcyZWI2ZTExMDVmMjMyODIwMjVlMTIxNzM3YWRkODQxOGFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:47:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "Don't check the genesis block PoW\n\nInspired by Jorge Timon's \"Testchain: Don't check the genesis block\", but\nrestricted to just PoW check.\n\nCode by Matt Corallo, originally submitted as a patch to segwit.",
      "tree": {
        "sha": "5e97be5b14c828493faf0e3d021dd139d9970054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e97be5b14c828493faf0e3d021dd139d9970054"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efbd772eb6e1105f23282025e121737add8418ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbd772eb6e1105f23282025e121737add8418ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efbd772eb6e1105f23282025e121737add8418ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbd772eb6e1105f23282025e121737add8418ad/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a74ff09abfec1f1b52c2f05de0915f81524f733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a74ff09abfec1f1b52c2f05de0915f81524f733",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a74ff09abfec1f1b52c2f05de0915f81524f733"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dad64350f8a0dc5033508b1510322f6d7ebab253",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efbd772eb6e1105f23282025e121737add8418ad/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efbd772eb6e1105f23282025e121737add8418ad/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=efbd772eb6e1105f23282025e121737add8418ad",
        "patch": "@@ -90,6 +90,9 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n+    if (hash == params.hashGenesisBlock)\n+        return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      }
    ]
  },
  {
    "sha": "c5a44b64c00229a1b84fbab7a770709505660fd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWE0NGI2NGMwMDIyOWExYjg0ZmJhYjdhNzcwNzA5NTA1NjYwZmQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-31T02:49:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "Create segnet4",
      "tree": {
        "sha": "be1e3d2cdd3dae67c3ee647c9ca893263a2eb629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be1e3d2cdd3dae67c3ee647c9ca893263a2eb629"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5a44b64c00229a1b84fbab7a770709505660fd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5a44b64c00229a1b84fbab7a770709505660fd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5a44b64c00229a1b84fbab7a770709505660fd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5a44b64c00229a1b84fbab7a770709505660fd5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efbd772eb6e1105f23282025e121737add8418ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbd772eb6e1105f23282025e121737add8418ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efbd772eb6e1105f23282025e121737add8418ad"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 86,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f53371168e2ac33253d0f3efcffb1164cfe06f93",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c5a44b64c00229a1b84fbab7a770709505660fd5",
        "patch": "@@ -9,6 +9,7 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"arith_uint256.h\"\n \n #include <assert.h>\n \n@@ -231,6 +232,66 @@ class CTestNetParams : public CChainParams {\n };\n static CTestNetParams testNetParams;\n \n+/**\n+ * Segnet\n+ */\n+class CSegNetParams : public CChainParams {\n+public:\n+    CSegNetParams() {\n+        strNetworkID = \"segnet4\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nMajorityEnforceBlockUpgrade = 7;\n+        consensus.nMajorityRejectBlockOutdated = 9;\n+        consensus.nMajorityWindow = 10;\n+        consensus.BIP34Height = -1;\n+        consensus.BIP34Hash = uint256();\n+        consensus.powLimit = uint256S(\"000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // 512x lower min difficulty than mainnet\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = false;\n+        pchMessageStart[0] = 0xdc;\n+        pchMessageStart[1] = 0xab;\n+        pchMessageStart[2] = 0xa1;\n+        pchMessageStart[3] = 0xc4;\n+        vAlertPubKey = ParseHex(\"0300000000000000000000003b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63\");\n+        nDefaultPort = 28901;\n+        nMaxTipAge = 0x7fffffff;\n+        nPruneAfterHeight = 1000;\n+        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 144; // Faster than normal for segnet (144 instead of 2016)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+\n+        genesis = CreateGenesisBlock(1452831101, 0, UintToArith256(consensus.powLimit).GetCompact(), 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,30);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,50);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,158);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x05)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x05)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_seg, pnSeed6_seg + ARRAYLEN(pnSeed6_seg));\n+\n+        fMiningRequiresPeers = true;\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = false;\n+        fMineBlocksOnDemand = false;\n+        fTestnetToBeDeprecatedFieldRPC = true;\n+\n+        // checkpointData is empty\n+    }\n+};\n+static CSegNetParams segNetParams;\n+\n /**\n  * Regression test\n  */\n@@ -309,6 +370,8 @@ CChainParams& Params(const std::string& chain)\n             return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n+    else if (chain == CBaseChainParams::SEGNET)\n+            return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n     else"
      },
      {
        "sha": "41e781f8207f3a696f3a63d34201fa76921757bc",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=c5a44b64c00229a1b84fbab7a770709505660fd5",
        "patch": "@@ -13,6 +13,7 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::SEGNET = \"segnet\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -51,6 +52,20 @@ class CBaseTestNetParams : public CBaseChainParams\n };\n static CBaseTestNetParams testNetParams;\n \n+/**\n+ * Segnet\n+ */\n+class CBaseSegNetParams : public CBaseChainParams\n+{\n+public:\n+    CBaseSegNetParams()\n+    {\n+        nRPCPort = 28902;\n+        strDataDir = \"segnet4\";\n+    }\n+};\n+static CBaseSegNetParams segNetParams;\n+\n /*\n  * Regression test\n  */\n@@ -79,6 +94,8 @@ CBaseChainParams& BaseParams(const std::string& chain)\n         return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n         return testNetParams;\n+    else if (chain == CBaseChainParams::SEGNET)\n+        return segNetParams;\n     else if (chain == CBaseChainParams::REGTEST)\n         return regTestParams;\n     else\n@@ -94,13 +111,16 @@ std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    bool fSegNet = GetBoolArg(\"-segnet\", false);\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if ((int)fRegTest + (int)fTestNet + (int)fSegNet > 1)\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet, -segnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n+    if (fSegNet)\n+        return CBaseChainParams::SEGNET;\n     return CBaseChainParams::MAIN;\n }\n "
      },
      {
        "sha": "dea94820ae5b77e3a15e7192ff9817fbf4ef3957",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5a44b64c00229a1b84fbab7a770709505660fd5/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=c5a44b64c00229a1b84fbab7a770709505660fd5",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n+    static const std::string SEGNET;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      }
    ]
  },
  {
    "sha": "f7e2a3053e4b307793559081ed334967030556e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2UyYTMwNTNlNGIzMDc3OTM1NTkwODFlZDMzNDk2NzAzMDU1NmUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T16:21:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "Add segnet seed nodes",
      "tree": {
        "sha": "b998f86467339365272ae1bdba14fdf774f2d9a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b998f86467339365272ae1bdba14fdf774f2d9a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7e2a3053e4b307793559081ed334967030556e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e2a3053e4b307793559081ed334967030556e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7e2a3053e4b307793559081ed334967030556e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e2a3053e4b307793559081ed334967030556e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5a44b64c00229a1b84fbab7a770709505660fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5a44b64c00229a1b84fbab7a770709505660fd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5a44b64c00229a1b84fbab7a770709505660fd5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aeddc5f731b4294268a4bb9d3b8108bf284656e3",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e2a3053e4b307793559081ed334967030556e2/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e2a3053e4b307793559081ed334967030556e2/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=f7e2a3053e4b307793559081ed334967030556e2",
        "patch": "@@ -129,6 +129,9 @@ def main():\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')\n+    with open(os.path.join(indir,'nodes_seg.txt'),'r') as f:\n+        process_nodes(g, f, 'pnSeed6_seg', 28901)\n+    g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')"
      },
      {
        "sha": "0b3b4f6295cb35e4ca52723787176ad185a919b4",
        "filename": "contrib/seeds/nodes_seg.txt",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e2a3053e4b307793559081ed334967030556e2/contrib/seeds/nodes_seg.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e2a3053e4b307793559081ed334967030556e2/contrib/seeds/nodes_seg.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_seg.txt?ref=f7e2a3053e4b307793559081ed334967030556e2",
        "patch": "@@ -0,0 +1,3 @@\n+# List of fixed seed nodes for segnet\n+\n+37.34.48.17"
      },
      {
        "sha": "03f347cb59e1e37a417bdaab547d26c42a106366",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e2a3053e4b307793559081ed334967030556e2/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e2a3053e4b307793559081ed334967030556e2/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=f7e2a3053e4b307793559081ed334967030556e2",
        "patch": "@@ -947,6 +947,10 @@ static SeedSpec6 pnSeed6_main[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0xb3,0xd1,0xf8,0xbe,0xa7,0x6b,0x46,0xbe,0xe8,0x84}, 8333}\n };\n \n+static SeedSpec6 pnSeed6_seg[] = {\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x22,0x30,0x11}, 28901}\n+};\n+\n static SeedSpec6 pnSeed6_test[] = {\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x99,0xcb,0x26,0x31,0xba,0x48,0x51,0x31,0x39,0x0d}, 18333},\n     {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x44,0xf4,0xf4,0xf0,0xbf,0xf7,0x7e,0x6d,0xc4,0xe8}, 18333},"
      }
    ]
  },
  {
    "sha": "ee501e918840933c2235126b64b7796e6c8c4367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTUwMWU5MTg4NDA5MzNjMjIzNTEyNmI2NGI3Nzk2ZTZjOGM0MzY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-16T00:26:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "qt: Work (don't crash) with -segnet",
      "tree": {
        "sha": "1c3dcc9e43434b977b2081327b4d4c95d5aefdcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c3dcc9e43434b977b2081327b4d4c95d5aefdcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee501e918840933c2235126b64b7796e6c8c4367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee501e918840933c2235126b64b7796e6c8c4367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee501e918840933c2235126b64b7796e6c8c4367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee501e918840933c2235126b64b7796e6c8c4367/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7e2a3053e4b307793559081ed334967030556e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e2a3053e4b307793559081ed334967030556e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7e2a3053e4b307793559081ed334967030556e2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c96097e5ffcae52df4dcf196aa8e585fe7583d70",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee501e918840933c2235126b64b7796e6c8c4367/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee501e918840933c2235126b64b7796e6c8c4367/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=ee501e918840933c2235126b64b7796e6c8c4367",
        "patch": "@@ -50,5 +50,6 @@ static const int MAX_URI_LENGTH = 255;\n #define QAPP_ORG_DOMAIN \"bitcoin.org\"\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n+#define QAPP_APP_NAME_SEGNET \"Bitcoin-Qt-segnet\"\n \n #endif // BITCOIN_QT_GUICONSTANTS_H"
      },
      {
        "sha": "eccf948f0b5f2b42794d74f4b10a421dacb8686a",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee501e918840933c2235126b64b7796e6c8c4367/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee501e918840933c2235126b64b7796e6c8c4367/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=ee501e918840933c2235126b64b7796e6c8c4367",
        "patch": "@@ -17,6 +17,7 @@ static const struct {\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n+    {\"segnet4\", QAPP_APP_NAME_SEGNET, 30, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[segnet4]\")},\n     {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);"
      }
    ]
  },
  {
    "sha": "c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGY3NjI3MGMyYTRhODFjZDU0YThhMGY0MDRkYzMyZjUzZTg1MmU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "--- [SEGWIT] begin: P2P/node/consensus ---",
      "tree": {
        "sha": "1c3dcc9e43434b977b2081327b4d4c95d5aefdcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c3dcc9e43434b977b2081327b4d4c95d5aefdcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee501e918840933c2235126b64b7796e6c8c4367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee501e918840933c2235126b64b7796e6c8c4367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee501e918840933c2235126b64b7796e6c8c4367"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "526b553aef06c9c0e22fcc71f19199d11d0a2140",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjZiNTUzYWVmMDZjOWMwZTIyZmNjNzFmMTkxOTlkMTFkMGEyMTQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:32:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:20Z"
      },
      "message": "Add segregated witness transaction serialization\n\nContains refactorings by Eric Lombrozo.\nContains fixup by Nicolas Dorier.",
      "tree": {
        "sha": "548318f1d18fbafda18651a263224baf80ad2fd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/548318f1d18fbafda18651a263224baf80ad2fd0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/526b553aef06c9c0e22fcc71f19199d11d0a2140",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526b553aef06c9c0e22fcc71f19199d11d0a2140",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/526b553aef06c9c0e22fcc71f19199d11d0a2140",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526b553aef06c9c0e22fcc71f19199d11d0a2140/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f76270c2a4a81cd54a8a0f404dc32f53e852e6"
      }
    ],
    "stats": {
      "total": 346,
      "additions": 283,
      "deletions": 63
    },
    "files": [
      {
        "sha": "ad2f4146cbdcadad3b03daedf49c9d4db453789e",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -554,7 +554,7 @@ def run_test(self):\n         # test fundrawtransaction with OP_RETURN and no vin #\n         #####################################################\n \n-        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        rawtx   = \"01000000000000010000000000000000066a047465737400000000\"\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         assert_equal(len(dec_tx['vin']), 0)"
      },
      {
        "sha": "85bd52b7f66ae01baecfa9ebd00f15d868c633db",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -96,7 +96,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n         return false;\n \n     vector<unsigned char> txData(ParseHex(strHexTx));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssData >> tx;\n     }\n@@ -113,7 +113,7 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n         return false;\n \n     std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssBlock >> block;\n     }"
      },
      {
        "sha": "fc04546cdcece2bdb80843ca186eb8c7f6d5868e",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -118,7 +118,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n \n string EncodeHexTx(const CTransaction& tx)\n {\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ssTx << tx;\n     return HexStr(ssTx.begin(), ssTx.end());\n }"
      },
      {
        "sha": "57124fcd52ebf87c50470224d9f416dcd372024e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -1453,7 +1453,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n     if (fTxIndex) {\n         CDiskTxPos postx;\n         if (pblocktree->ReadTxIndex(hash, postx)) {\n-            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+            CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             if (file.IsNull())\n                 return error(\"%s: OpenBlockFile failed\", __func__);\n             CBlockHeader header;\n@@ -1512,7 +1512,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n-    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     if (fileout.IsNull())\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n@@ -1535,7 +1535,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     if (filein.IsNull())\n         return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n@@ -1909,7 +1909,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     fileout << blockundo;\n \n     // calculate & write checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     hasher << hashBlock;\n     hasher << blockundo;\n     fileout << hasher.GetHash();\n@@ -1935,7 +1935,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     }\n \n     // Verify checksum\n-    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n+    CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n@@ -2379,7 +2379,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n+        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n@@ -3457,7 +3457,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n@@ -3980,7 +3980,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n         try {\n             CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n-            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+            unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n@@ -4011,7 +4011,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -4370,6 +4370,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     switch (inv.type)\n     {\n     case MSG_TX:\n+    case MSG_WITNESS_TX:\n         {\n             assert(recentRejects);\n             if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n@@ -4388,6 +4389,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n                    pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n+    case MSG_WITNESS_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n     }\n     // Don't know what it is, just say we already got one\n@@ -4412,7 +4414,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             boost::this_thread::interruption_point();\n             it++;\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n@@ -4454,6 +4456,8 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         assert(!\"cannot load block from disk\");\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n+                    else if (inv.type == MSG_WITNESS_BLOCK)\n+                        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_WITNESS, NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n                     {\n                         LOCK(pfrom->cs_filter);\n@@ -4488,22 +4492,22 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n             }\n-            else if (inv.IsKnownType())\n+            else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)\n             {\n                 // Send stream from relay memory\n                 bool pushed = false;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, (*mi).second);\n                         pushed = true;\n                     }\n                 }\n-                if (!pushed && inv.type == MSG_TX) {\n+                if (!pushed && (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n-                        pfrom->PushMessage(NetMsgType::TX, tx);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }\n@@ -4515,7 +4519,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             // Track requests for our stuff.\n             GetMainSignals().Inventory(inv.hash);\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n                 break;\n         }\n     }\n@@ -5002,7 +5006,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n-        vRecv >> tx;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> tx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n@@ -5231,7 +5235,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n-        vRecv >> block;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> block;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n         LogPrint(\"net\", \"received block %s peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n@@ -5856,11 +5860,11 @@ bool SendMessages(CNode* pto)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n+                if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n+                if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && !fSendTrickle)\n                 {\n                     // 1/4 of tx invs blast to all immediately\n                     static uint256 hashSalt;"
      },
      {
        "sha": "e31409d7db1fec32043a04c3f3669bbf1cf77f47",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -508,7 +508,7 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n+            if ((inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) && filterInventoryKnown.contains(inv.hash))\n                 return;\n             vInventoryToSend.push_back(inv);\n         }\n@@ -564,6 +564,23 @@ class CNode\n         }\n     }\n \n+    /** Send a message containing a1, serialized with flag flag. */\n+    template<typename T1>\n+    void PushMessageWithFlag(int flag, const char* pszCommand, const T1& a1)\n+    {\n+        try\n+        {\n+            BeginMessage(pszCommand);\n+            WithOrVersion(&ssSend, flag) << a1;\n+            EndMessage();\n+        }\n+        catch (...)\n+        {\n+            AbortMessage();\n+            throw;\n+        }\n+    }\n+\n     template<typename T1, typename T2>\n     void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)\n     {"
      },
      {
        "sha": "29307aed5be4803efb271634fb3af83ce15732f1",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -38,7 +38,6 @@ class CBlockHeader\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n@@ -120,7 +119,6 @@ class CBlock : public CBlockHeader\n     std::string ToString() const;\n };\n \n-\n /** Describes a place in the block chain to another node such that if the\n  * other node doesn't have the same branch, it can find a recent common trunk.\n  * The further back it is, the further before the fork it may be."
      },
      {
        "sha": "2d93e0e1e8e953a4fd5c1209b1c1eee79db78cf3",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -60,28 +60,34 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n {\n-    return SerializeHash(*this);\n+    return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n void CTransaction::UpdateHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, 0);\n+}\n+\n+uint256 CTransaction::GetWitnessHash() const\n+{\n+    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_WITNESS);\n }\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {\n     UpdateHash();\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     *const_cast<int*>(&nVersion) = tx.nVersion;\n     *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n     *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n+    *const_cast<CTxWitness*>(&wit) = tx.wit;\n     *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n     *const_cast<uint256*>(&hash) = tx.hash;\n     return *this;\n@@ -136,6 +142,8 @@ std::string CTransaction::ToString() const\n         nLockTime);\n     for (unsigned int i = 0; i < vin.size(); i++)\n         str += \"    \" + vin[i].ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < wit.vtxinwit.size(); i++)\n+        str += \"    \" + wit.vtxinwit[i].scriptWitness.ToString() + \"\\n\";\n     for (unsigned int i = 0; i < vout.size(); i++)\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;"
      },
      {
        "sha": "1ea49fc16f5c08e84f884e19cec3572a811be705",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 137,
        "deletions": 11,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -11,6 +11,8 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n+static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -193,8 +195,134 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    if (ser_action.ForRead()) {\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            if (flags == 0 && tx.vin.size() != 0) {\n+                throw std::ios_base::failure(\"Extended transaction format unnecessarily used\");\n+            }\n+        } else {\n+            /* We read a non-empty vin. Assume a normal vout follows. */\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        }\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        if ((flags & 1) && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* The witness flag is present, and we support witnesses. */\n+            flags ^= 1;\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+        if (flags) {\n+            /* Unknown flag in the serialization */\n+            throw std::ios_base::failure(\"Unknown transaction optional data\");\n+        }\n+    } else {\n+        if (nVersion & SERIALIZE_TRANSACTION_WITNESS) {\n+            /* Check whether witnesses need to be serialized. */\n+            if (!tx.wit.IsNull()) {\n+                flags |= 1;\n+            }\n+        }\n+        if (flags || ((nVersion & SERIALIZE_TRANSACTION_WITNESS) != 0 && tx.vin.size() == 0)) {\n+            /* Use extended format in case witnesses are to be serialized. */\n+            std::vector<CTxIn> vinDummy;\n+            READWRITE(vinDummy);\n+            READWRITE(flags);\n+        }\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        if (flags & 1) {\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+    }\n+    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+}\n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n@@ -223,6 +351,7 @@ class CTransaction\n     const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     const uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n@@ -237,13 +366,10 @@ class CTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n-        if (ser_action.ForRead())\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+        if (ser_action.ForRead()) {\n             UpdateHash();\n+        }\n     }\n \n     bool IsNull() const {\n@@ -254,6 +380,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // Compute a hash that includes both transaction and witness data\n+    uint256 GetWitnessHash() const;\n+\n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n@@ -289,6 +418,7 @@ struct CMutableTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n@@ -298,11 +428,7 @@ struct CMutableTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "468d8668dac5c2b092caca8fa7fdd8becc162d5d",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -42,7 +42,9 @@ static const char* ppszTypeName[] =\n     \"ERROR\", // Should never occur\n     NetMsgType::TX,\n     NetMsgType::BLOCK,\n-    \"filtered block\" // Should never occur\n+    \"filtered block\", // Should never occur\n+    \"witness block\",\n+    \"witness tx\",\n };\n \n /** All known message types. Keep this in the same order as the list of\n@@ -180,7 +182,8 @@ bool operator<(const CInv& a, const CInv& b)\n \n bool CInv::IsKnownType() const\n {\n-    return (type >= 1 && type < (int)ARRAYLEN(ppszTypeName));\n+    int masked = type & MSG_TYPE_MASK;\n+    return (masked >= 1 && masked <= MSG_TYPE_MAX);\n }\n \n const char* CInv::GetCommand() const"
      },
      {
        "sha": "5d7544b9b5fcc66a8e615857897c4a62bc45d16a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -310,12 +310,17 @@ class CInv\n     uint256 hash;\n };\n \n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n enum {\n     MSG_TX = 1,\n     MSG_BLOCK,\n-    // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,\n-    // MSG_FILTERED_BLOCK should not appear in any invs except as a part of getdata.\n+    // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n };\n \n+const int MSG_TYPE_MAX = MSG_FILTERED_BLOCK;\n+\n #endif // BITCOIN_PROTOCOL_H"
      },
      {
        "sha": "287adf0d13c1f83705b8d46150267da197b406d6",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -419,7 +419,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     if (!fVerbose)\n     {\n-        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         ssBlock << block;\n         std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n         return strHex;"
      },
      {
        "sha": "c1c25dfd6ad06ae8ceacd042339c29cbcb0b9833",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -605,7 +605,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n         try {"
      },
      {
        "sha": "6b1eb52bbf8c2292383e2dfdb8d957d6515607b7",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -231,3 +231,15 @@ bool CScript::IsPushOnly() const\n {\n     return this->IsPushOnly(begin());\n }\n+\n+std::string CScriptWitness::ToString() const\n+{\n+    std::string ret = \"CScriptWitness(\";\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (i) {\n+            ret += \", \";\n+        }\n+        ret += HexStr(stack[i]);\n+    }\n+    return ret + \")\";\n+}"
      },
      {
        "sha": "7453b28af77fa94e204a5da14fecb9d3ac2f0d3a",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -631,6 +631,18 @@ class CScript : public CScriptBase\n     }\n };\n \n+struct CScriptWitness\n+{\n+    std::vector<std::vector<unsigned char> > stack;\n+\n+    // Some compilers complain without a default constructor\n+    CScriptWitness() { }\n+\n+    bool IsNull() const { return stack.empty(); }\n+\n+    std::string ToString() const;\n+};\n+\n class CReserveScript\n {\n public:"
      },
      {
        "sha": "e5b0f06cde475105d37967224a724a30503228ae",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -22,6 +22,39 @@\n #include <utility>\n #include <vector>\n \n+template<typename Stream>\n+class OverrideStream\n+{\n+    Stream* stream;\n+public:\n+    const int nType;\n+    const int nVersion;\n+\n+    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator<<(const T& obj)\n+    {\n+        // Serialize to this stream\n+        ::Serialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator>>(T& obj)\n+    {\n+        // Unserialize from this stream\n+        ::Unserialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+};\n+\n+template<typename S>\n+OverrideStream<S> WithOrVersion(S* s, int nVersionFlag)\n+{\n+    return OverrideStream<S>(s, s->GetType(), s->GetVersion() | nVersionFlag);\n+}\n+\n /** Double ended buffer combining vector and stream-like interfaces.\n  *\n  * >> and << read and write unformatted data using the above serialization templates."
      },
      {
        "sha": "f9b8d9d3ef942b083f7a1c7db5d5c82be4d3d5ca",
        "filename": "src/test/data/blanktx.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/blanktx.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/blanktx.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.hex?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -1 +1 @@\n-01000000000000000000\n+010000000000000000000000"
      },
      {
        "sha": "5033bf19edaff96784ac85ffa9f4e77e77a8b570",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -32,7 +32,7 @@\n [\"Tests for CheckTransaction()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"0100000000010000000000000000015100000000\", \"P2SH\"],\n+\"01000000000000010000000000000000015100000000\", \"P2SH\"],\n \n [\"No outputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x05ab9e14d983742513f0f451e105ffb4198d1dd4 EQUAL\"]],"
      },
      {
        "sha": "82b68a9f8916d95818a719b8b52d57492cddd07d",
        "filename": "src/test/data/txcreate2.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/txcreate2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/test/data/txcreate2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.hex?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -1 +1 @@\n-01000000000100000000000000000000000000\n+010000000000000100000000000000000000000000"
      },
      {
        "sha": "ff7482fb99475a538a4b84846257a4674a91fe4b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -224,7 +224,7 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn, int nSerVersionIn) : pdb(NULL), activeTxn(NULL), nSerVersion(nSerVersionIn)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));"
      },
      {
        "sha": "ef1fff1be34f9a016bd9c900d022056dbd9f2d8b",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -99,8 +99,9 @@ class CDB\n     DbTxn* activeTxn;\n     bool fReadOnly;\n     bool fFlushOnClose;\n+    int nSerVersion;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true, int nSerVersion = CLIENT_VERSION);\n     ~CDB() { Close(); }\n \n public:\n@@ -119,7 +120,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -134,7 +135,7 @@ class CDB\n \n         // Unserialize value\n         try {\n-            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, nSerVersion);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -155,13 +156,13 @@ class CDB\n             assert(!\"Write called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Value\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(SER_DISK, nSerVersion);\n         ssValue.reserve(10000);\n         ssValue << value;\n         Dbt datValue(&ssValue[0], ssValue.size());\n@@ -184,7 +185,7 @@ class CDB\n             assert(!\"Erase called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -204,7 +205,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssKey(SER_DISK, nSerVersion);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());"
      },
      {
        "sha": "036a8b2567aaad469588a29349bea007f7d0f5b2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -639,8 +639,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssKey(SER_DISK, nSerVersion);\n+            CDataStream ssValue(SER_DISK, nSerVersion);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n@@ -745,8 +745,8 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n         while (true)\n         {\n             // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssKey(SER_DISK, nSerVersion);\n+            CDataStream ssValue(SER_DISK, nSerVersion);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;"
      },
      {
        "sha": "160bca6cba1f311a795809a04c550f251c1de8db",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526b553aef06c9c0e22fcc71f19199d11d0a2140/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLETDB_H\n \n #include \"amount.h\"\n+#include \"primitives/transaction.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n \n@@ -77,7 +78,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "49d0bd978e86edefac2be81afc747d4d71317a8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWQwYmQ5NzhlODZlZGVmYWMyYmU4MWFmYzc0N2Q0ZDcxMzE3YThi",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-11T07:55:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Removed ppszTypeName from protocol.cpp",
      "tree": {
        "sha": "7ff96c480da95f8844292149bb358748dd7f0686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ff96c480da95f8844292149bb358748dd7f0686"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49d0bd978e86edefac2be81afc747d4d71317a8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d0bd978e86edefac2be81afc747d4d71317a8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49d0bd978e86edefac2be81afc747d4d71317a8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d0bd978e86edefac2be81afc747d4d71317a8b/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526b553aef06c9c0e22fcc71f19199d11d0a2140",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526b553aef06c9c0e22fcc71f19199d11d0a2140"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 34,
      "deletions": 35
    },
    "files": [
      {
        "sha": "04bee3ddf087166fd97d28b024726c32273348bd",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d0bd978e86edefac2be81afc747d4d71317a8b/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d0bd978e86edefac2be81afc747d4d71317a8b/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=49d0bd978e86edefac2be81afc747d4d71317a8b",
        "patch": "@@ -37,16 +37,6 @@ const char *REJECT=\"reject\";\n const char *SENDHEADERS=\"sendheaders\";\n };\n \n-static const char* ppszTypeName[] =\n-{\n-    \"ERROR\", // Should never occur\n-    NetMsgType::TX,\n-    NetMsgType::BLOCK,\n-    \"filtered block\", // Should never occur\n-    \"witness block\",\n-    \"witness tx\",\n-};\n-\n /** All known message types. Keep this in the same order as the list of\n  * messages above and in protocol.h.\n  */\n@@ -161,17 +151,13 @@ CInv::CInv(int typeIn, const uint256& hashIn)\n \n CInv::CInv(const std::string& strType, const uint256& hashIn)\n {\n-    unsigned int i;\n-    for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n-    {\n-        if (strType == ppszTypeName[i])\n-        {\n-            type = i;\n-            break;\n-        }\n-    }\n-    if (i == ARRAYLEN(ppszTypeName))\n+    if (strType == NetMsgType::TX)\n+        type = MSG_TX;\n+    else if (strType == NetMsgType::BLOCK)\n+        type = MSG_BLOCK;\n+    else\n         throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n+\n     hash = hashIn;\n }\n \n@@ -188,9 +174,14 @@ bool CInv::IsKnownType() const\n \n const char* CInv::GetCommand() const\n {\n-    if (!IsKnownType())\n+    int masked = type & MSG_TYPE_MASK;\n+    switch (masked)\n+    {\n+    case MSG_TX:    return NetMsgType::TX;\n+    case MSG_BLOCK: return NetMsgType::BLOCK;\n+    default:\n         throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n-    return ppszTypeName[type];\n+    }\n }\n \n std::string CInv::ToString() const"
      },
      {
        "sha": "3ef569bf527e491d8099c938d0dc6d7872847caf",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d0bd978e86edefac2be81afc747d4d71317a8b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d0bd978e86edefac2be81afc747d4d71317a8b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=49d0bd978e86edefac2be81afc747d4d71317a8b",
        "patch": "@@ -281,6 +281,27 @@ class CAddress : public CService\n     unsigned int nTime;\n };\n \n+/** getdata message types */\n+enum GetDataMsg\n+{\n+    MSG_TX = 1,\n+    MSG_BLOCK,\n+    MSG_TYPE_MAX = MSG_BLOCK,\n+    // The following can only occur in getdata. Invs always use TX or BLOCK.\n+    MSG_FILTERED_BLOCK,\n+    UNDEFINED,\n+};\n+\n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+\n+enum GetDataMsgWithFlags\n+{\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n+    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n+};\n+\n /** inv message data */\n class CInv\n {\n@@ -310,17 +331,4 @@ class CInv\n     uint256 hash;\n };\n \n-const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n-enum {\n-    MSG_TX = 1,\n-    MSG_BLOCK,\n-    // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK,\n-    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n-    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n-};\n-\n-const int MSG_TYPE_MAX = MSG_FILTERED_BLOCK;\n-\n #endif // BITCOIN_PROTOCOL_H"
      }
    ]
  },
  {
    "sha": "f822e15fa61cf7f9941320b914577f925f8aa701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODIyZTE1ZmE2MWNmN2Y5OTQxMzIwYjkxNDU3N2Y5MjVmOGFhNzAx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-16T01:29:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "getdata enum issue fix",
      "tree": {
        "sha": "7b1d55cee950d80ac9daf40a13d5923d7a3f96c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b1d55cee950d80ac9daf40a13d5923d7a3f96c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f822e15fa61cf7f9941320b914577f925f8aa701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f822e15fa61cf7f9941320b914577f925f8aa701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f822e15fa61cf7f9941320b914577f925f8aa701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f822e15fa61cf7f9941320b914577f925f8aa701/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49d0bd978e86edefac2be81afc747d4d71317a8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d0bd978e86edefac2be81afc747d4d71317a8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49d0bd978e86edefac2be81afc747d4d71317a8b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e333b166406deb765a554d45b413204bf6ded139",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f822e15fa61cf7f9941320b914577f925f8aa701/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f822e15fa61cf7f9941320b914577f925f8aa701/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f822e15fa61cf7f9941320b914577f925f8aa701",
        "patch": "@@ -282,21 +282,16 @@ class CAddress : public CService\n };\n \n /** getdata message types */\n+const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n+const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n enum GetDataMsg\n {\n-    MSG_TX = 1,\n+    UNDEFINED = 0,\n+    MSG_TX,\n     MSG_BLOCK,\n     MSG_TYPE_MAX = MSG_BLOCK,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n-    UNDEFINED,\n-};\n-\n-const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n-\n-enum GetDataMsgWithFlags\n-{\n     MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n     MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,"
      }
    ]
  },
  {
    "sha": "d1f2258fdc17ae5e449b6b341694a752bf1514b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWYyMjU4ZmRjMTdhZTVlNDQ5YjZiMzQxNjk0YTc1MmJmMTUxNGI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-16T23:20:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Introduce and preferentially peer with NODE_WITNESS service bit\n\nService bit logic by Nicolas Dorier.",
      "tree": {
        "sha": "118d4ea08200559bd8ca3decd0b3c1becec13fd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/118d4ea08200559bd8ca3decd0b3c1becec13fd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1f2258fdc17ae5e449b6b341694a752bf1514b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f2258fdc17ae5e449b6b341694a752bf1514b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f2258fdc17ae5e449b6b341694a752bf1514b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f2258fdc17ae5e449b6b341694a752bf1514b9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f822e15fa61cf7f9941320b914577f925f8aa701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f822e15fa61cf7f9941320b914577f925f8aa701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f822e15fa61cf7f9941320b914577f925f8aa701"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 30,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5c321546cb7d4bfc97fd313b4b1aa311c75d28d4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "patch": "@@ -263,6 +263,8 @@ struct CNodeState {\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n     bool fPreferHeaders;\n+    //! Whether this peer can give us witnesses\n+    bool fHaveWitness;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -279,6 +281,7 @@ struct CNodeState {\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n+        fHaveWitness = false;\n     }\n };\n \n@@ -4637,6 +4640,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n \n+        if((pfrom->nServices & NODE_WITNESS))\n+        {\n+            LOCK(cs_main);\n+            State(pfrom->GetId())->fHaveWitness = true;\n+        }\n+\n         // Potentially mark this peer as a preferred download peer.\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n \n@@ -4826,14 +4835,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n-            const CInv &inv = vInv[nInv];\n+            CInv &inv = vInv[nInv];\n \n             boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n+            if (inv.type == MSG_TX && State(pfrom->GetId())->fHaveWitness) {\n+                inv.type = MSG_WITNESS_TX;\n+            }\n+\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -4849,6 +4862,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        if (State(pfrom->GetId())->fHaveWitness) {\n+                            inv.type = MSG_WITNESS_BLOCK;\n+                        }\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n@@ -5927,7 +5943,7 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n                 LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);"
      },
      {
        "sha": "d9db1551c75fb4dfca936b36c9263cc1c6329371",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "patch": "@@ -70,14 +70,14 @@ namespace {\n }\n \n /** Services this node implementation cares about */\n-static const uint64_t nRelevantServices = NODE_NETWORK;\n+static const uint64_t nRelevantServices = NODE_NETWORK | NODE_WITNESS;\n \n //\n // Global state variables\n //\n bool fDiscover = true;\n bool fListen = true;\n-uint64_t nLocalServices = NODE_NETWORK;\n+uint64_t nLocalServices = NODE_NETWORK | NODE_WITNESS;\n CCriticalSection cs_mapLocalHost;\n map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n@@ -1601,6 +1601,10 @@ void ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n+            // only consider non-witness nodes after 40 failed attemps\n+            if (!(addr.nServices & NODE_WITNESS) && nTries < 40)\n+                continue;\n+\n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n             if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n                 continue;"
      },
      {
        "sha": "05f939f17fd6022e48cc050573c916dd6b31a348",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "patch": "@@ -238,6 +238,9 @@ enum {\n     // Bitcoin Core nodes used to support this by default, without advertising this bit,\n     // but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)\n     NODE_BLOOM = (1 << 2),\n+    // Indicates that a node can be asked for blocks and transactions including\n+    // witness data.\n+    NODE_WITNESS = (1 << 3),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "d74e477580ba27332f056edac6136e8c6cc47134",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f2258fdc17ae5e449b6b341694a752bf1514b9/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "patch": "@@ -40,4 +40,7 @@ static const int NO_BLOOM_VERSION = 70011;\n //! \"sendheaders\" command and announcing blocks with headers starts with this version\n static const int SENDHEADERS_VERSION = 70012;\n \n+//! Version after which witness support potentially exists\n+static const int WITNESS_VERSION = 70012;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWRkYzQ2MmY0M2Q4NzM2NmZkZDFkZmJkOTk5ZTgyZmQzYThjNTg0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:42:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Witness commitment validation\n\nIncludes a fix by Suhas Daftuar",
      "tree": {
        "sha": "f41d2222ddd460266572a5144f9fbd7088221256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f41d2222ddd460266572a5144f9fbd7088221256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f2258fdc17ae5e449b6b341694a752bf1514b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f2258fdc17ae5e449b6b341694a752bf1514b9"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 188,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5a3e98c5f2f8cb46a77c8c5a674890b20f642d2b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -93,6 +93,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -186,6 +191,11 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 2000000000; // Far in the future\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 2100000000;\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -266,6 +276,9 @@ class CSegNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n \n         genesis = CreateGenesisBlock(1452831101, 0, UintToArith256(consensus.powLimit).GetCompact(), 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -318,6 +331,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_WITNESS].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n@@ -383,3 +399,4 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n+ "
      },
      {
        "sha": "b10f1bae51adfcb4a84f9583390cc8f2614c1e43",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -161,6 +161,17 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n     return ComputeMerkleRoot(leaves, mutated);\n }\n \n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    leaves[0].SetNull(); // The witness hash of the coinbase is 0.\n+    for (size_t s = 1; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetWitnessHash();\n+    }\n+    return ComputeMerkleRoot(leaves, mutated);\n+}\n+\n std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n {\n     std::vector<uint256> leaves;"
      },
      {
        "sha": "194aea9b75dc30fbedac6450d8d938f24e9878cd",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -22,6 +22,12 @@ uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint2\n  */\n uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = NULL);\n \n+/*\n+ * Compute the Merkle root of the witness transactions in a block.\n+ * *mutated is set to true if a duplicated subtree was found.\n+ */\n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = NULL);\n+\n /*\n  * Compute the Merkle branch for the tree of transactions in a block, for a\n  * given position."
      },
      {
        "sha": "b7c552b82146790371e2a6ba0a64e86b71ff6161",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -16,6 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n+    DEPLOYMENT_WITNESS,\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "d2b147c6f0b3fe3593cf0de23493485daf1bf7ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -1033,6 +1033,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n     }\n \n+    // Don't accept witness transactions before the final threshold passes\n+    if (!tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n+    }\n+\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n@@ -3303,6 +3308,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+        }\n+    }\n+    static const std::vector<unsigned char> nonce(32, 0x00);\n+    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && block.vtx[0].wit.IsEmpty()) {\n+        block.vtx[0].wit.vtxinwit.resize(1);\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.resize(1);\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0] = nonce;\n+    }\n+}\n+\n+std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    std::vector<unsigned char> commitment;\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+        }\n+    }\n+    bool fHaveWitness = false;\n+    for (size_t t = 1; t < block.vtx.size(); t++) {\n+        if (!block.vtx[t].wit.IsNull()) {\n+            fHaveWitness = true;\n+            break;\n+        }\n+    }\n+    std::vector<unsigned char> ret(32, 0x00);\n+    if (fHaveWitness && IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        if (commitpos == -1) {\n+            uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n+            CHash256().Write(witnessroot.begin(), 32).Write(&ret[0], 32).Finalize(witnessroot.begin());\n+            CTxOut out;\n+            out.nValue = 0;\n+            out.scriptPubKey.resize(38);\n+            out.scriptPubKey[0] = OP_RETURN;\n+            out.scriptPubKey[1] = 0x24;\n+            out.scriptPubKey[2] = 0xaa;\n+            out.scriptPubKey[3] = 0x21;\n+            out.scriptPubKey[4] = 0xa9;\n+            out.scriptPubKey[5] = 0xed;\n+            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n+            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n+            const_cast<std::vector<CTxOut>*>(&block.vtx[0].vout)->push_back(out);\n+            block.vtx[0].UpdateHash();\n+        }\n+    }\n+    UpdateUncommitedBlockStructures(block, pindexPrev, consensusParams);\n+    return commitment;\n+}\n+\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n@@ -3367,6 +3434,48 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   multiple, the last one is used.\n+    bool fHaveWitness = false;\n+    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        int commitpos = -1;\n+        for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+            if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+                commitpos = o;\n+            }\n+        }\n+        if (commitpos != -1) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);\n+            }\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+            }\n+            fHaveWitness = true;\n+        }\n+    }\n+\n+    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam\n+    if (!fHaveWitness) {\n+        for (size_t i = 0; i < block.vtx.size(); i++) {\n+            if (!block.vtx[i].wit.IsNull()) {\n+                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+            }\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "e12b44e24376dee21aea55531910880bcd3a8e50",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -448,6 +448,17 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+/** Check whether witness commitments are required for block. */\n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n+/** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n+/** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n+std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n \n class CBlockFileInfo\n {"
      },
      {
        "sha": "204e9cd0b8de4aed713e99c1c4d44b73e7418827",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -138,6 +138,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         if (chainparams.MineBlocksOnDemand())\n             pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n+        // Decide whether to include witness transactions (temporary)\n+        bool fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();\n@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())\n+                continue; // cannot accept witness transactions into a non-witness block\n+\n             bool fOrphan = false;\n             BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n             {\n@@ -280,6 +286,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n+        pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n@@ -298,7 +305,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -310,7 +317,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << vchCoinbaseCommitment << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;\n@@ -425,7 +432,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                 return;\n             }\n             CBlock *pblock = &pblocktemplate->block;\n-            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n+            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n \n             LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                 ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));"
      },
      {
        "sha": "7e6fd41e73624d4839ef053cbffce43f1d52a6da",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -27,14 +27,15 @@ struct CBlockTemplate\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n+    std::vector<unsigned char> vchCoinbaseCommitment;\n };\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "e32f682525aa292c11d069e8dd5b08b5fa727586",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -331,7 +331,6 @@ class CTransaction\n private:\n     /** Memory only. */\n     const uint256 hash;\n-    void UpdateHash() const;\n \n public:\n     // Default transaction version.\n@@ -410,6 +409,8 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n+\n+    void UpdateHash() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "febe6b4f3ee758c8f5700c2746a820aa164ce673",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -682,6 +682,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     bip9_softforks.push_back(BIP9SoftForkDesc(\"csv\", consensusParams, Consensus::DEPLOYMENT_CSV));\n+    bip9_softforks.push_back(BIP9SoftForkDesc(\"witness\", consensusParams, Consensus::DEPLOYMENT_WITNESS));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      },
      {
        "sha": "25500e2d465f012c54d79066b49f55e4bdbf9273",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -163,7 +163,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n-            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n+            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n         }\n         while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n             // Yes, there is a chance every nonce could fail to satisfy the -regtest\n@@ -347,7 +347,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal\\n\"\n             \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n             \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n@@ -528,7 +529,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {\n         uint256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n \n@@ -538,8 +539,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         UniValue entry(UniValue::VOBJ);\n \n         entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-\n-        entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n+        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n         BOOST_FOREACH (const CTxIn &in, tx.vin)\n@@ -586,6 +587,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n+        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+    }\n \n     return result;\n }\n@@ -649,6 +653,14 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         }\n     }\n \n+    {\n+        LOCK(cs_main);\n+        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        if (mi != mapBlockIndex.end()) {\n+            UpdateUncommitedBlockStructures(block, mi->second, Params().GetConsensus());\n+        }\n+    }\n+\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);"
      },
      {
        "sha": "517c52e772e0743c65f483bf20d4bd3a3d0bab17",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "patch": "@@ -126,7 +126,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(tx);\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce, pblocktemplate->vchCoinbaseCommitment);\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "25d4d9e461a002337420508dc8768c350d90dbde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWQ0ZDllNDYxYTAwMjMzNzQyMDUwOGRjODc2OGMzNTBkOTBkYmRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-08T00:16:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Script validation logic for witnesses",
      "tree": {
        "sha": "f66150b0a1aa78753ae47f0444f840a082e0d98d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f66150b0a1aa78753ae47f0444f840a082e0d98d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25d4d9e461a002337420508dc8768c350d90dbde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d4d9e461a002337420508dc8768c350d90dbde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25d4d9e461a002337420508dc8768c350d90dbde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d4d9e461a002337420508dc8768c350d90dbde/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ddc462f43d87366fdd1dfbd999e82fd3a8c584"
      }
    ],
    "stats": {
      "total": 238,
      "additions": 201,
      "deletions": 37
    },
    "files": [
      {
        "sha": "238b6a394593db0ed8dbd3636cdb9cbfff481033",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -463,7 +463,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "a9819cd2610b5f28ce588796ca8d86da52059087",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -1780,7 +1780,8 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n+    const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "a6bcc777ff51d21e6cbb0b422232ae70010afa53",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -41,7 +41,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n                                                          SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n-                                                         SCRIPT_VERIFY_LOW_S;\n+                                                         SCRIPT_VERIFY_LOW_S |\n+                                                         SCRIPT_VERIFY_WITNESS |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "476f6aaa04204d36c95472042eadbdc675b0a1cc",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -763,7 +763,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "5c9e7c0a571a5cab15c259671c496570b6020ed5",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -85,7 +85,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "081f41b1f1edb7228c94b73bf5e99c09f358a512",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 2,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -1239,8 +1239,67 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n+    vector<vector<unsigned char> > stack;\n+    CScript scriptPubKey;\n+\n+    if (witversion == 0) {\n+        if (program.size() == 32) {\n+            // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n+            if (witness.stack.size() == 0) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+            }\n+            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+            uint256 hashScriptPubKey;\n+            CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n+            if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+        } else if (program.size() == 20) {\n+            // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n+            if (witness.stack.size() != 2) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n+            }\n+            scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            stack = witness.stack;\n+        } else {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n+        }\n+    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    } else {\n+        // Higher version witness scripts return true for future softfork compatibility\n+        return set_success(serror);\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    }\n+\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+        return false;\n+    }\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1)\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    if (!CastToBool(stack.back()))\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    static const CScriptWitness emptyWitness;\n+    if (witness == NULL) {\n+        witness = &emptyWitness;\n+    }\n+    bool hadWitness = false;\n+\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n \n     if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !scriptSig.IsPushOnly()) {\n@@ -1261,6 +1320,25 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n     if (CastToBool(stack.back()) == false)\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n \n+    // Bare witness programs\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            hadWitness = true;\n+            if (scriptSig.size() != 0) {\n+                // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n+                return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n+            }\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                return false;\n+            }\n+            // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+            // for witness programs.\n+            stack.resize(1);\n+        }\n+    }\n+\n     // Additional validation for spend-to-script-hash transactions:\n     if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n     {\n@@ -1287,19 +1365,48 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n         if (!CastToBool(stack.back()))\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+\n+        // P2SH witness program\n+        if (flags & SCRIPT_VERIFY_WITNESS) {\n+            if (pubKey2.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                hadWitness = true;\n+                if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n+                    // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n+                    // reintroduce malleability.\n+                    return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n+                }\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                    return false;\n+                }\n+                // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+                // for witness programs.\n+                stack.resize(1);\n+            }\n+        }\n     }\n \n     // The CLEANSTACK check is only performed after potential P2SH evaluation,\n     // as the non-P2SH evaluation of a P2SH script will obviously not result in\n-    // a clean stack (the P2SH inputs remain).\n+    // a clean stack (the P2SH inputs remain). The same holds for witness evaluation.\n     if ((flags & SCRIPT_VERIFY_CLEANSTACK) != 0) {\n         // Disallow CLEANSTACK without P2SH, as otherwise a switch CLEANSTACK->P2SH+CLEANSTACK\n         // would be possible, which is not a softfork (and P2SH should be one).\n         assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        assert((flags & SCRIPT_VERIFY_WITNESS) != 0);\n         if (stack.size() != 1) {\n             return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n         }\n     }\n \n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        // We can't check for correct unexpected witness data if P2SH was off, so require\n+        // that WITNESS implies P2SH. Otherwise, going from WITNESS->P2SH+WITNESS would be\n+        // possible, which is not a softfork.\n+        assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        if (!hadWitness && !witness->IsNull()) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_UNEXPECTED);\n+        }\n+    }\n+\n     return set_success(serror);\n }"
      },
      {
        "sha": "1f550cd42b80d07701409e876a4f3276ff80ee5a",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -74,7 +74,7 @@ enum\n     // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n     // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n     // (softfork safe, BIP62 rule 6)\n-    // Note: CLEANSTACK should never be used without P2SH.\n+    // Note: CLEANSTACK should never be used without P2SH or WITNESS.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n \n     // Verify CHECKLOCKTIMEVERIFY\n@@ -86,6 +86,14 @@ enum\n     //\n     // See BIP112 for details\n     SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n+\n+    // Support segregated witness\n+    //\n+    SCRIPT_VERIFY_WITNESS = (1U << 11),\n+\n+    // Making v2-v16 witness program non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n@@ -139,6 +147,6 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "cabee7dc979c7de366b01e4e7402deb325467fde",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -210,6 +210,24 @@ bool CScript::IsPayToScriptHash() const\n             (*this)[22] == OP_EQUAL);\n }\n \n+// A witness program is any valid CScript that consists of a 1-byte push opcode\n+// followed by a data push between 2 and 32 bytes.\n+bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const\n+{\n+    if (this->size() < 4 || this->size() > 34) {\n+        return false;\n+    }\n+    if ((*this)[0] != OP_0 && ((*this)[0] < OP_1 || (*this)[0] > OP_16)) {\n+        return false;\n+    }\n+    if ((size_t)((*this)[1] + 2) == this->size()) {\n+        version = DecodeOP_N((opcodetype)(*this)[0]);\n+        program = std::vector<unsigned char>(this->begin() + 2, this->end());\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CScript::IsPushOnly(const_iterator pc) const\n {\n     while (pc < end())"
      },
      {
        "sha": "2d02a554ed425c2b793a96f43f88b916a5a0ebde",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -609,6 +609,7 @@ class CScript : public CScriptBase\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n+    bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly(const_iterator pc) const;"
      },
      {
        "sha": "cef807edcf475a5acfe61454ff2284580a630354",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -65,8 +65,22 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Dummy CHECKMULTISIG argument must be zero\";\n         case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS:\n             return \"NOPx reserved for soft-fork upgrades\";\n+        case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM:\n+            return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_PUBKEYTYPE:\n             return \"Public key is neither compressed or uncompressed\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH:\n+            return \"Witness program has incorrect length\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY:\n+            return \"Witness program was passed an empty witness\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH:\n+            return \"Witness program hash mismatch\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED:\n+            return \"Witness requires empty scriptSig\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED_P2SH:\n+            return \"Witness requires only-redeemscript scriptSig\";\n+        case SCRIPT_ERR_WITNESS_UNEXPECTED:\n+            return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "09dc6945adb45286a88f748b6da232c9af1d2069",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -51,6 +51,15 @@ typedef enum ScriptError_t\n \n     /* softfork safeness */\n     SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,\n+    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,\n+\n+    /* segregated witness */\n+    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,\n+    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,\n+    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,\n+    SCRIPT_ERR_WITNESS_MALLEATED,\n+    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n+    SCRIPT_ERR_WITNESS_UNEXPECTED,\n \n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;"
      },
      {
        "sha": "37b702de17cb613f05ed6c6a7885d7a67ac74fc3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -123,7 +123,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     }\n \n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      },
      {
        "sha": "8dedb23e43d21309c38ff07b9fcf36eb5aef72e9",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -83,20 +83,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -107,18 +107,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -130,12 +130,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "ed31271626215d49ee4040775e6dc4890748a20b",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -45,7 +45,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "8cdf8d6c7bb370001e908c871d195ea182028e51",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -147,10 +147,14 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -796,18 +800,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -829,54 +833,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n@@ -996,7 +1000,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << i;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n \n@@ -1005,7 +1009,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << data;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Length \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n }"
      },
      {
        "sha": "6c460445a812112964cc09741e2f0cc8dfa3100c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d4d9e461a002337420508dc8768c350d90dbde/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d4d9e461a002337420508dc8768c350d90dbde/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=25d4d9e461a002337420508dc8768c350d90dbde",
        "patch": "@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "be10fb4c1a401f996062abbc78232866272d0425",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTEwZmI0YzFhNDAxZjk5NjA2MmFiYmM3ODIzMjg2NjI3MmQwNDI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T00:04:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Enable SCRIPT_VERIFY_WITNESS for mempool transactions",
      "tree": {
        "sha": "70be6f3b3f7e2883440ad2bd68e2beed0b31a94a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70be6f3b3f7e2883440ad2bd68e2beed0b31a94a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be10fb4c1a401f996062abbc78232866272d0425",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be10fb4c1a401f996062abbc78232866272d0425",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be10fb4c1a401f996062abbc78232866272d0425",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be10fb4c1a401f996062abbc78232866272d0425/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d4d9e461a002337420508dc8768c350d90dbde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d4d9e461a002337420508dc8768c350d90dbde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d4d9e461a002337420508dc8768c350d90dbde"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "000b1972702718403466354b0dc47b80c36dcf8e",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be10fb4c1a401f996062abbc78232866272d0425/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be10fb4c1a401f996062abbc78232866272d0425/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=be10fb4c1a401f996062abbc78232866272d0425",
        "patch": "@@ -77,6 +77,9 @@ class CValidationState {\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }\n+    void SetCorruptionPossible() {\n+        corruptionPossible = true;\n+    }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n     std::string GetDebugMessage() const { return strDebugMessage; }"
      },
      {
        "sha": "bd4faaad14d9d9720f7f86c7d63cf35fdec475a1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be10fb4c1a401f996062abbc78232866272d0425/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be10fb4c1a401f996062abbc78232866272d0425/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=be10fb4c1a401f996062abbc78232866272d0425",
        "patch": "@@ -1389,8 +1389,17 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true)) {\n+            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+            // need to turn both off, and compare against just turning off CLEANSTACK\n+            // to see if the failure is specifically due to witness validation.\n+            if (CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n+                !CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+                // Only the witness is wrong, so the transaction itself may be fine.\n+                state.SetCorruptionPossible();\n+            }\n             return false;\n+        }\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -5220,8 +5229,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            assert(recentRejects);\n-            recentRejects->insert(tx.GetHash());\n+            if (!state.CorruptionPossible()) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());\n+            }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n@@ -5250,8 +5261,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n-            if (nDoS > 0)\n+            if (nDoS > 0 && (!state.CorruptionPossible() || State(pfrom->id)->fHaveWitness)) {\n+                // When a non-witness-supporting peer gives us a transaction that would\n+                // be accepted if witness validation was off, we can't blame them for it.\n                 Misbehaving(pfrom->GetId(), nDoS);\n+            }\n         }\n         FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }"
      }
    ]
  },
  {
    "sha": "a43536a33b484da630278074c0ca0eeabb49e5eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDM1MzZhMzNiNDg0ZGE2MzAyNzgwNzRjMGNhMGVlYWJiNDllNWVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T15:27:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Activate script consensus rules through BIP9",
      "tree": {
        "sha": "9c4afab8a71eb0e4514c64879b503767c91fa1f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c4afab8a71eb0e4514c64879b503767c91fa1f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a43536a33b484da630278074c0ca0eeabb49e5eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43536a33b484da630278074c0ca0eeabb49e5eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a43536a33b484da630278074c0ca0eeabb49e5eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43536a33b484da630278074c0ca0eeabb49e5eb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be10fb4c1a401f996062abbc78232866272d0425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be10fb4c1a401f996062abbc78232866272d0425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be10fb4c1a401f996062abbc78232866272d0425"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c3b2f20f94e56bfc18986938955d232ba326d319",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a43536a33b484da630278074c0ca0eeabb49e5eb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a43536a33b484da630278074c0ca0eeabb49e5eb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a43536a33b484da630278074c0ca0eeabb49e5eb",
        "patch": "@@ -2325,6 +2325,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n+    // Start enforcing WITNESS rules using versionbits logic.\n+    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n "
      }
    ]
  },
  {
    "sha": "92fc17104b67ae4b1473d6f96b67d2060a41ba47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmZjMTcxMDRiNjdhZTRiMTQ3M2Q2Zjk2YjY3ZDIwNjBhNDFiYTQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-29T01:37:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Only download blocks from witness peers after fork",
      "tree": {
        "sha": "68689eaba7718357814130015306faadc9cca511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68689eaba7718357814130015306faadc9cca511"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92fc17104b67ae4b1473d6f96b67d2060a41ba47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fc17104b67ae4b1473d6f96b67d2060a41ba47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92fc17104b67ae4b1473d6f96b67d2060a41ba47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fc17104b67ae4b1473d6f96b67d2060a41ba47/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a43536a33b484da630278074c0ca0eeabb49e5eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43536a33b484da630278074c0ca0eeabb49e5eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a43536a33b484da630278074c0ca0eeabb49e5eb"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fc14c7225d5c1edbbd4ad68cdbbf368d8799f9d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fc17104b67ae4b1473d6f96b67d2060a41ba47/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fc17104b67ae4b1473d6f96b67d2060a41ba47/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=92fc17104b67ae4b1473d6f96b67d2060a41ba47",
        "patch": "@@ -4985,7 +4985,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n-                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n+                        (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         if (State(pfrom->GetId())->fHaveWitness) {\n                             inv.type = MSG_WITNESS_BLOCK;\n                         }\n@@ -5337,7 +5338,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash())) {\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -5359,7 +5361,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Can't download any more from this peer\n                         break;\n                     }\n-                    vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                    vGetData.push_back(CInv(State(pfrom->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n                     LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n@@ -6072,10 +6074,12 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                    pindex->nHeight, pto->id);\n+                if (State(pto->GetId())->fHaveWitness || !IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+                    vGetData.push_back(CInv(State(pto->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n+                    LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                        pindex->nHeight, pto->id);\n+                }\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {"
      }
    ]
  },
  {
    "sha": "e66b0148d830829ec3365da3c953f8b4c189ebd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjZiMDE0OGQ4MzA4MjllYzMzNjVkYTNjOTUzZjhiNGMxODllYmQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:51:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Observe input amounts: verification",
      "tree": {
        "sha": "a42f0572349b7598d1eb63111ecd169c96a649df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a42f0572349b7598d1eb63111ecd169c96a649df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e66b0148d830829ec3365da3c953f8b4c189ebd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66b0148d830829ec3365da3c953f8b4c189ebd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e66b0148d830829ec3365da3c953f8b4c189ebd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66b0148d830829ec3365da3c953f8b4c189ebd5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92fc17104b67ae4b1473d6f96b67d2060a41ba47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fc17104b67ae4b1473d6f96b67d2060a41ba47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fc17104b67ae4b1473d6f96b67d2060a41ba47"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 48,
      "deletions": 36
    },
    "files": [
      {
        "sha": "e76ca81b11cb9b29b4b2e2404ee7123522250d2b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -453,6 +453,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n@@ -463,7 +464,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "e87d86e8bac4c6358f55d2f25da20fc5420a3d93",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -1790,7 +1790,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n-    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore), &error)) {\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "4eab36a9fbe4ad68c607394971b8ec33433dae54",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -394,23 +394,25 @@ class CScriptCheck\n {\n private:\n     CScript scriptPubKey;\n+    CAmount amount;\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n     bool cacheStore;\n     ScriptError error;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n     CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n-        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n+        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n         ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n \n     bool operator()();\n \n     void swap(CScriptCheck &check) {\n         scriptPubKey.swap(check.scriptPubKey);\n         std::swap(ptxTo, check.ptxTo);\n+        std::swap(amount, check.amount);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);"
      },
      {
        "sha": "1363f00b159b820afa826db0b0665d6b4f642d97",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -752,6 +752,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n@@ -763,7 +764,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "26e7a85b7b7229c33b01f4542996d20f4b983cf5",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -85,7 +85,8 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        CAmount am(0);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "cd3e2f773177b4d4c95db355ebbe9b9b1ac83533",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_BITCOINCONSENSUS_H\n #define BITCOIN_BITCOINCONSENSUS_H\n \n+#include <stdint.h>\n+\n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n   #if defined(_WIN32)"
      },
      {
        "sha": "acec970bb187912cfe14dc5d3c1638f47a592d18",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -131,7 +131,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n@@ -143,7 +143,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);"
      },
      {
        "sha": "050bf8cc4229089251bf3fc6d977e17ee000f193",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -22,7 +22,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn) : TransactionSignatureChecker(txToIn, nInIn, amount), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "62d874eed45845dbdd5548626673995d88404617",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -18,7 +18,8 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+static const CAmount amountZero = 0;\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amountZero) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n@@ -258,7 +259,7 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatur\n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n {\n-    TransactionSignatureChecker checker(&txTo, nIn);\n+    TransactionSignatureChecker checker(&txTo, nIn, amountZero);\n     return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n }\n "
      },
      {
        "sha": "0a66487803c52e8a03aec736093562a2aa06a5b8",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -48,6 +48,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n     ScriptError err;\n     CKey key[4];\n+    CAmount amount = 0;\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n@@ -83,20 +84,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -107,18 +108,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -130,12 +131,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "ab1d1e99d5d6721bfc6dab961b86ac520d6754e3",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -45,7 +45,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue), &err);\n }\n \n "
      },
      {
        "sha": "850fe82a3f107bb6c056c8324171a26c4d5c0dd5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -154,7 +154,8 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    static const CAmount amountZero = 0;\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, amountZero), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -800,18 +801,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -833,54 +834,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n "
      },
      {
        "sha": "87737ed26ab98840e981f4fa42b96ee415e240fc",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66b0148d830829ec3365da3c953f8b4c189ebd5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "patch": "@@ -149,9 +149,10 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n+                CAmount amount = 0;\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -224,8 +225,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+                CAmount amount = 0;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "46daedfaa59599377029876e29768d33586b8eb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmRhZWRmYWE1OTU5OTM3NzAyOTg3NmUyOTc2OGQzMzU4NmI4ZWIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-27T18:49:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Add signature version 1 with updated sighash\n\nIncludes simplifications by Eric Lombrozo.",
      "tree": {
        "sha": "9020f4ba7cdfb01bd626cf73dbf64a18ed3d3988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9020f4ba7cdfb01bd626cf73dbf64a18ed3d3988"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46daedfaa59599377029876e29768d33586b8eb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46daedfaa59599377029876e29768d33586b8eb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46daedfaa59599377029876e29768d33586b8eb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46daedfaa59599377029876e29768d33586b8eb2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66b0148d830829ec3365da3c953f8b4c189ebd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e66b0148d830829ec3365da3c953f8b4c189ebd5"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 124,
      "deletions": 62
    },
    "files": [
      {
        "sha": "4ebfe9ef3b07d6b4a25e1346da070ea45f16bc31",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -462,7 +462,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;"
      },
      {
        "sha": "9b0cf5a16fd34432fbb322b223e2c44dd00a0ab9",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -761,7 +761,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {"
      },
      {
        "sha": "43bb394eff0e2ec659278878ff2156c8efbcef12",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 12,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -229,7 +229,7 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -869,13 +869,15 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     CScript scriptCode(pbegincodehash, pend);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n-                    scriptCode.FindAndDelete(CScript(vchSig));\n+                    if (sigversion == 0) {\n+                        scriptCode.FindAndDelete(CScript(vchSig));\n+                    }\n \n                     if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n                         //serror is set\n                         return false;\n                     }\n-                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -925,7 +927,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n-                        scriptCode.FindAndDelete(CScript(vchSig));\n+                        if (sigversion == 0) {\n+                            scriptCode.FindAndDelete(CScript(vchSig));\n+                        }\n                     }\n \n                     bool fSuccess = true;\n@@ -943,7 +947,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         }\n \n                         // Check signature\n-                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                         if (fOk) {\n                             isig++;\n@@ -1106,8 +1110,64 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n {\n+    if (sigversion == 1) {\n+        uint256 hashPrevouts;\n+        uint256 hashSequence;\n+        uint256 hashOutputs;\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].prevout;\n+            }\n+            hashPrevouts = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].nSequence;\n+            }\n+            hashSequence = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n+                ss << txTo.vout[n];\n+            }\n+            hashOutputs = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << txTo.vout[nIn];\n+            hashOutputs = ss.GetHash();\n+        }\n+\n+        CHashWriter ss(SER_GETHASH, 0);\n+        // Version\n+        ss << txTo.nVersion;\n+        // Input prevouts/nSequence (none/all, depending on flags)\n+        ss << hashPrevouts;\n+        ss << hashSequence;\n+        // The input being signed (replacing the scriptSig with scriptCode + amount)\n+        // The prevout may already be contained in hashPrevout, and the nSequence\n+        // may already be contain in hashSequence.\n+        ss << txTo.vin[nIn].prevout;\n+        ss << static_cast<const CScriptBase&>(scriptCode);\n+        ss << amount;\n+        ss << txTo.vin[nIn].nSequence;\n+        // Outputs (none/one/all, depending on flags)\n+        ss << hashOutputs;\n+        // Locktime\n+        ss << txTo.nLockTime;\n+        // Sighash type\n+        ss << nHashType;\n+\n+        return ss.GetHash();\n+    }\n+\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n@@ -1136,7 +1196,7 @@ bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned cha\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1149,7 +1209,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n@@ -1280,7 +1340,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 1, serror)) {\n         return false;\n     }\n \n@@ -1307,12 +1367,12 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     }\n \n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, flags, checker, serror))\n+    if (!EvalScript(stack, scriptSig, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (stack.empty())\n@@ -1358,7 +1418,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stack);\n \n-        if (!EvalScript(stack, pubKey2, flags, checker, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, 0, serror))\n             // serror is set\n             return false;\n         if (stack.empty())"
      },
      {
        "sha": "9761a32181dad61c44792c01ac4484cae274813e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -98,12 +98,12 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion);\n \n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return false;\n     }\n@@ -126,13 +126,14 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n private:\n     const CTransaction* txTo;\n     unsigned int nIn;\n+    const CAmount amount;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n };\n@@ -146,7 +147,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "b08f6312da54bb85710a1534bf75d9292618b082",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -18,16 +18,15 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-static const CAmount amountZero = 0;\n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amountZero) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, 0);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n@@ -186,7 +185,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (checker.CheckSig(sig, pubkey, scriptPubKey))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -256,10 +255,10 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatur\n     return CScript();\n }\n \n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n {\n-    TransactionSignatureChecker checker(&txTo, nIn, amountZero);\n+    TransactionSignatureChecker checker(&txTo, nIn, amount);\n     return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n }\n \n@@ -271,9 +270,9 @@ CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecke\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n \n     return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }\n@@ -285,7 +284,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return true;\n     }"
      },
      {
        "sha": "f54511f7a67f5d23a82b202cb2cb42f9ea1b1e14",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -35,10 +35,11 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     const CTransaction* txTo;\n     unsigned int nIn;\n     int nHashType;\n+    CAmount amount;\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n@@ -62,6 +63,6 @@ bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutab\n CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n \n /** Combine two script signatures on transactions. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n+CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "9105a78f092c3c9f862f01339a791254b489038a",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "da99db022e7b53cecd9ffb49b791d30a8eac4212",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 28,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -306,7 +306,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType, 0, 0);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -735,29 +735,29 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }\n \n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     //\n@@ -888,6 +888,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the CombineSignatures function\n+    CAmount amount;\n     CBasicKeyStore keystore;\n     vector<CKey> keys;\n     vector<CPubKey> pubkeys;\n@@ -906,61 +907,61 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n     CScript empty;\n-    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);\n+    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, empty);\n     BOOST_CHECK(combined.empty());\n \n     // Single signature case:\n     SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n     scriptSigCopy = scriptSig;\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n     scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, scriptSigCopy);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, scriptSigCopy);\n     BOOST_CHECK(combined == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n     BOOST_CHECK(combined == scriptSig);\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n+    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, 0);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n+    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, 0);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n+    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, 0);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n \n@@ -976,21 +977,21 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial1b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial1b);\n     BOOST_CHECK(combined == partial1a);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial2a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial2a);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial1a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial1a);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1b, partial2b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1b, partial2b);\n     BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial1b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial1b);\n     BOOST_CHECK(combined == complete13);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial3a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial3a);\n     BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial2b);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial2b);\n     BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial3a);\n+    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial3a);\n     BOOST_CHECK(combined == partial3c);\n }\n "
      },
      {
        "sha": "0df5f3c88ba2c13cd8e00a9a8ed71039b8f2d04a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, txTo, nIn, nHashType, 0, 0);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, 0);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      },
      {
        "sha": "968807bd8722f298970ee8fcec67fb07d29afff6",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46daedfaa59599377029876e29768d33586b8eb2/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46daedfaa59599377029876e29768d33586b8eb2/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=46daedfaa59599377029876e29768d33586b8eb2",
        "patch": "@@ -48,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n         // Sign:\n         std::vector<unsigned char> vchSig;\n-        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL, 0, 0);\n         BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         spends[i].vin[0].scriptSig << vchSig;"
      }
    ]
  },
  {
    "sha": "54eabc939c516c736fd48119d8824e0e7965dd80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGVhYmM5MzljNTE2YzczNmZkNDgxMTlkODgyNGUwZTc5NjVkZDgw",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-01-22T17:46:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:21Z"
      },
      "message": "Return witness data\n\nIncludes RPC field name changes by Luke-jr.",
      "tree": {
        "sha": "93f926e8bb71ac0af5f3482afb01cb2d51e7bb8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93f926e8bb71ac0af5f3482afb01cb2d51e7bb8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54eabc939c516c736fd48119d8824e0e7965dd80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54eabc939c516c736fd48119d8824e0e7965dd80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54eabc939c516c736fd48119d8824e0e7965dd80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54eabc939c516c736fd48119d8824e0e7965dd80/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46daedfaa59599377029876e29768d33586b8eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46daedfaa59599377029876e29768d33586b8eb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46daedfaa59599377029876e29768d33586b8eb2"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 25,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dea1430604da214d7d3352d5a89d4bba764e5127",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54eabc939c516c736fd48119d8824e0e7965dd80/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54eabc939c516c736fd48119d8824e0e7965dd80/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=54eabc939c516c736fd48119d8824e0e7965dd80",
        "patch": "@@ -95,7 +95,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n+    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n+    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n@@ -325,6 +326,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n             \"}\\n\"\n             \"\\nResult (for verbose=false):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -373,6 +375,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\""
      },
      {
        "sha": "be4fd6cbba3a093c80a1fceadf9cf4785ed14df7",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54eabc939c516c736fd48119d8824e0e7965dd80/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54eabc939c516c736fd48119d8824e0e7965dd80/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=54eabc939c516c736fd48119d8824e0e7965dd80",
        "patch": "@@ -62,11 +62,14 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n-    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n+    entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+    entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n+\n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.push_back(Pair(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n@@ -78,6 +81,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n+        if (!tx.wit.IsNull()) {\n+            if (!tx.wit.vtxinwit[i].IsNull()) {\n+                UniValue txinwitness(UniValue::VARR);\n+                for (unsigned int j = 0; j < tx.wit.vtxinwit[i].scriptWitness.stack.size(); j++) {\n+                    std::vector<unsigned char> item = tx.wit.vtxinwit[i].scriptWitness.stack[j];\n+                    txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                }\n+                in.push_back(Pair(\"txinwitness\", txinwitness));\n+            }\n+\n+        }\n         in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n         vin.push_back(in);\n     }\n@@ -134,7 +148,8 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n+            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -146,6 +161,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n             \"       \\\"sequence\\\": n      (numeric) The script sequence number\\n\"\n+            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n@@ -431,6 +447,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n+            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n@@ -442,6 +459,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n             \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n+            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\""
      }
    ]
  },
  {
    "sha": "d6c69c226683e78138c3b8ca306af414122d7fa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmM2OWMyMjY2ODNlNzgxMzhjM2I4Y2EzMDZhZjQxNDEyMmQ3ZmEw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-03T17:54:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Implement block size/sigop cost rules, limits, and GBT support\n\nIncludes changes by Suhas Daftuar and Luke-jr.",
      "tree": {
        "sha": "65926ccbdd8ae0673a9d40bd01d87f28d7f350e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65926ccbdd8ae0673a9d40bd01d87f28d7f350e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6c69c226683e78138c3b8ca306af414122d7fa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6c69c226683e78138c3b8ca306af414122d7fa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6c69c226683e78138c3b8ca306af414122d7fa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6c69c226683e78138c3b8ca306af414122d7fa0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54eabc939c516c736fd48119d8824e0e7965dd80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54eabc939c516c736fd48119d8824e0e7965dd80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54eabc939c516c736fd48119d8824e0e7965dd80"
      }
    ],
    "stats": {
      "total": 311,
      "additions": 216,
      "deletions": 95
    },
    "files": [
      {
        "sha": "473e58eb44c4e80ab694bf4f25ecaf3b8ea4e37a",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -97,7 +97,7 @@ def setup_chain(self):\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=200\", \"-blockmaxsize=999000\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n \n     def mine_full_block(self, node, address):\n         # Want to create a full block\n@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * 1000000\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available / old_block_size\n \n-        # 144MB will be reserved for relaying new blocks, so expect this to\n-        # succeed for ~70 tries.\n+        # 576MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~235 tries.\n         for i in xrange(success_count):\n             test_nodes[0].send_message(getdata_request)\n             test_nodes[0].sync_with_ping()\n@@ -198,9 +198,9 @@ def run_test(self):\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n-        # We'll try 200 times\n+        # We'll try 800 times\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(200):\n+        for i in xrange(800):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)"
      },
      {
        "sha": "320f174d538b09da712bbabaee4e9f0371c14602",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -191,7 +191,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n \n     // extract and validate vout\n     string strVout = strInput.substr(pos + 1, string::npos);"
      },
      {
        "sha": "0177509d8fbd2bcceaf6894f2284be5e9ec17831",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;\n+/** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+static const unsigned int MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "af1f3cdb5989db522fe51d9ee196b5231bfa6a1a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 26,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -930,8 +930,24 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+{\n+    int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n+\n+    if (tx.IsCoinBase())\n+        return nSigOps;\n \n+    if (flags & SCRIPT_VERIFY_P2SH) {\n+        nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n+    }\n \n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, i < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[i].scriptWitness : NULL, flags);\n+    }\n+    return nSigOps;\n+}\n \n \n \n@@ -944,8 +960,8 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -1150,8 +1166,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -1174,17 +1189,17 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, lp);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOps > MAX_STANDARD_TX_SIGOPS) || (nBytesPerSigOp && nSigOps > nSize / nBytesPerSigOp))\n+        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n-                strprintf(\"%d\", nSigOps));\n+                strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n@@ -2340,7 +2355,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n-    unsigned int nSigOps = 0;\n+    unsigned int nSigOpsCost = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n@@ -2350,10 +2365,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += GetLegacySigOpCount(tx);\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                             REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n@@ -2373,18 +2384,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n+        }\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n+        // GetTransactionSigOpCost counts 3 types of sigops:\n+        // * legacy (always)\n+        // * p2sh (when P2SH enabled in flags and excludes coinbase)\n+        // * witness (when witness enabled in flags and excludes coinbase)\n+        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n+        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n+                             REJECT_INVALID, \"bad-blk-sigops\");\n \n+        if (!tx.IsCoinBase())\n+        {\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n@@ -3272,9 +3284,11 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // All potential-corruption validation must be done before we do any\n     // transaction validation, as otherwise we may mark the header as invalid\n     // because we receive the wrong transactions for it.\n+    // Note that witness malleability is checked in ContextualCheckBlock, so no\n+    // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n@@ -3299,7 +3313,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -3491,6 +3505,16 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // After the coinbase witness nonce and commitment are verified,\n+    // we can check if the block cost passes (before we've checked the\n+    // coinbase witness, it would be possible for the cost to be too\n+    // large by filling up the coinbase witness, which doesn't change\n+    // the block hash, so we couldn't mark the block as permanently\n+    // failed).\n+    if (GetBlockCost(block) > MAX_BLOCK_COST) {\n+        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+    }\n+\n     return true;\n }\n \n@@ -4138,7 +4162,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n+        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -4157,7 +4181,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      },
      {
        "sha": "b8ccfa9c82f71dc415674d579ddfebbe72a6eeb6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -131,7 +131,7 @@ extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockSize;\n+extern uint64_t nLastBlockCost;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;"
      },
      {
        "sha": "b0471dec4f511c90b25b92bff9f3e1b14a8f679c",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -153,7 +153,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "197ac0cdca068997391196113086a3bb24d6e84e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -43,7 +43,7 @@ using namespace std;\n // transactions that depend on transactions that aren't yet in the block.\n \n uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockSize = 0;\n+uint64_t nLastBlockCost = 0;\n \n class ScoreCompare\n {\n@@ -89,22 +89,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     // Add dummy coinbase tx as first transaction\n     pblock->vtx.push_back(CTransaction());\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    unsigned int nBlockMaxCost = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE) * WITNESS_SCALE_FACTOR;\n     // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+    nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n-    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n+    unsigned int nBlockPriorityCost = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE) * WITNESS_SCALE_FACTOR;\n+    nBlockPriorityCost = std::min(nBlockMaxCost, nBlockPriorityCost);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n-    nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n+    unsigned int nBlockMinCost = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE) * WITNESS_SCALE_FACTOR;\n+    nBlockMinCost = std::min(nBlockMaxCost, nBlockMinCost);\n \n     // Collect memory pool transactions into the block\n     CTxMemPool::setEntries inBlock;\n@@ -119,9 +119,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n     std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n     bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockCost = 4000;\n     uint64_t nBlockTx = 0;\n-    unsigned int nBlockSigOps = 100;\n+    unsigned int nBlockSigOpsCost = 400;\n     int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n@@ -145,7 +145,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();\n \n-        bool fPriorityBlock = nBlockPrioritySize > 0;\n+        bool fPriorityBlock = nBlockPriorityCost > 0;\n         if (fPriorityBlock) {\n             vecPriority.reserve(mempool.mapTx.size());\n             for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n@@ -206,22 +206,23 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n \n             unsigned int nTxSize = iter->GetTxSize();\n+            unsigned int nTxCost = nTxSize * WITNESS_SCALE_FACTOR; /* TODO: more accurate version using GetTransactionCost */\n             if (fPriorityBlock &&\n-                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                (nBlockCost + nTxCost >= nBlockPriorityCost || !AllowFree(actualPriority))) {\n                 fPriorityBlock = false;\n                 waitPriMap.clear();\n             }\n             if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockCost >= nBlockMinCost)) {\n                 break;\n             }\n-            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n-                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+            if (nBlockCost + nTxCost >= nBlockMaxCost) {\n+                if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n                     break;\n                 }\n                 // Once we're within 1000 bytes of a full block, only look at 50 more txs\n                 // to try to fill the remaining space.\n-                if (nBlockSize > nBlockMaxSize - 1000) {\n+                if (nBlockCost > nBlockMaxCost - 4000) {\n                     lastFewTxs++;\n                 }\n                 continue;\n@@ -230,9 +231,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            unsigned int nTxSigOps = iter->GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n-                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+            unsigned int nTxSigOpsCost = iter->GetSigOpCost();\n+            if (nBlockSigOpsCost + nTxSigOpsCost >= MAX_BLOCK_SIGOPS_COST) {\n+                if (nBlockSigOpsCost > MAX_BLOCK_SIGOPS_COST - 8) {\n                     break;\n                 }\n                 continue;\n@@ -242,10 +243,10 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             // Added\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n-            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n-            nBlockSize += nTxSize;\n+            pblocktemplate->vTxSigOpsCost.push_back(nTxSigOpsCost);\n+            nBlockCost += nTxCost;\n             ++nBlockTx;\n-            nBlockSigOps += nTxSigOps;\n+            nBlockSigOpsCost += nTxSigOpsCost;\n             nFees += nTxFees;\n \n             if (fPrintPriority)\n@@ -279,8 +280,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             }\n         }\n         nLastBlockTx = nBlockTx;\n-        nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n+        nLastBlockCost = nBlockCost;\n+        LogPrintf(\"CreateNewBlock(): total cost %u txs: %u fees: %ld sigopscost %d\\n\", nBlockCost, nBlockTx, nFees, nBlockSigOpsCost);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n@@ -294,7 +295,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n-        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+        pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]) * WITNESS_SCALE_FACTOR;\n \n         CValidationState state;\n         if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {"
      },
      {
        "sha": "3a30b98f773fb239bb80effc997c0636eeff52df",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -26,7 +26,7 @@ struct CBlockTemplate\n {\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n-    std::vector<int64_t> vTxSigOps;\n+    std::vector<int64_t> vTxSigOpsCost;\n     std::vector<unsigned char> vchCoinbaseCommitment;\n };\n "
      },
      {
        "sha": "5f2d52faeb721266cf7ffe3f0be274fa4734d784",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -2116,7 +2116,7 @@ void CNode::RecordBytesSent(uint64_t bytes)\n void CNode::SetMaxOutboundTarget(uint64_t limit)\n {\n     LOCK(cs_totalBytesSent);\n-    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SERIALIZED_SIZE;\n     nMaxOutboundLimit = limit;\n \n     if (limit > 0 && limit < recommendedMinimum)\n@@ -2171,7 +2171,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n     {\n         // keep a large enought buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n-        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SERIALIZED_SIZE;\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n             return true;\n     }"
      },
      {
        "sha": "7800f098ad0abc6cda72a912f427675e85e5ed91",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -67,8 +67,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n+    unsigned int sz = GetTransactionCost(tx);\n+    if (sz >= MAX_STANDARD_TX_COST) {\n         reason = \"tx-size\";\n         return false;\n     }\n@@ -153,3 +153,8 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n     return true;\n }\n+\n+int64_t GetVirtualTransactionSize(const CTransaction& tx)\n+{\n+    return (GetTransactionCost(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+}"
      },
      {
        "sha": "0040148bac8497d6fceef4f878c1ec0f86c3f027",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -20,11 +20,11 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n /** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+static const unsigned int MAX_STANDARD_TX_COST = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n@@ -65,4 +65,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+/** Compute the virtual transaction size (cost reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(const CTransaction& tx);\n+\n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "ac6445b5e26c06af3afbefde07135606defe6925",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+}"
      },
      {
        "sha": "e2a309e63d821df2ea86973e057072ff6f3aede8",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -154,4 +154,7 @@ struct CBlockLocator\n     }\n };\n \n+/** Compute the consensus-critical block cost (see BIP 141). */\n+int64_t GetBlockCost(const CBlock& tx);\n+\n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "de7e71bbba2ed3bf3c3b9fc854c4b789ed15be5b",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -121,7 +121,7 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // Providing any more cleanup incentive than making additional inputs free would\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n-        nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+        nTxSize = (GetTransactionCost(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n     for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n@@ -148,3 +148,8 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n+\n+int64_t GetTransactionCost(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);\n+}"
      },
      {
        "sha": "295472301787f78474261b8812512911d7c5ebfb",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -13,6 +13,8 @@\n \n static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n \n+static const int WITNESS_SCALE_FACTOR = 4;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -438,4 +440,7 @@ struct CMutableTransaction\n     uint256 GetHash() const;\n };\n \n+/** Compute the cost of a transaction, as defined by BIP 141 */\n+int64_t GetTransactionCost(const CTransaction &tx);\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "53441ab81c484b96ec22fe03ae770f98fadb3005",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -97,6 +97,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n@@ -376,6 +377,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"cost\\\" : n             (numeric) The block cost\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\""
      },
      {
        "sha": "d02f0b94488574d016e7e8e1a31f1e33dcffefa4",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -255,7 +255,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n+    obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n@@ -327,7 +327,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+            \"For full specification, see BIP 22 and BIP 145:\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n@@ -354,7 +356,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"             ,...\\n\"\n             \"         ],\\n\"\n             \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\\n\"\n+            \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n+            \"         \\\"cost\\\" : n,                 (numeric) total transaction size cost, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -371,8 +374,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n+            \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n+            \"  \\\"costlimit\\\" : n,                  (numeric) limit of block cost\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n@@ -552,7 +556,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n-        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[index_in_template]));\n+        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n+        entry.push_back(Pair(\"cost\", GetTransactionCost(tx)));\n \n         transactions.push_back(entry);\n     }\n@@ -582,8 +587,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n+    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"costlimit\", (int64_t)MAX_BLOCK_COST));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "7bb660080a570452a37d5d7acbefa1fb6fa3bd9f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -64,6 +64,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n     entry.push_back(Pair(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS)));\n+    entry.push_back(Pair(\"vsize\", (int)::GetVirtualTransactionSize(tx)));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n \n@@ -150,6 +151,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n+            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n@@ -449,6 +451,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n             \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n+            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n             \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\""
      },
      {
        "sha": "4ea505302eaf59808f26ea041afda2f3186b6288",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -1470,3 +1470,50 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n     return set_success(serror);\n }\n+\n+size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness, int flags)\n+{\n+    if (witversion == 0) {\n+        if (witprogram.size() == 20)\n+            return 1;\n+\n+        if (witprogram.size() == 32 && witness.stack.size() > 0) {\n+            CScript subscript(witness.stack.back().begin(), witness.stack.back().end());\n+            return subscript.GetSigOpCount(true);\n+        }\n+    }\n+\n+    // Future flags may be implemented here.\n+    return 0;\n+}\n+\n+size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)\n+{\n+    static const CScriptWitness witnessEmpty;\n+\n+    if ((flags & SCRIPT_VERIFY_WITNESS) == 0) {\n+        return 0;\n+    }\n+    assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty, flags);\n+    }\n+\n+    if (scriptPubKey.IsPayToScriptHash() && scriptSig.IsPushOnly()) {\n+        CScript::const_iterator pc = scriptSig.begin();\n+        vector<unsigned char> data;\n+        while (pc < scriptSig.end()) {\n+            opcodetype opcode;\n+            scriptSig.GetOp(pc, opcode, data);\n+        }\n+        CScript subscript(data.begin(), data.end());\n+        if (subscript.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty, flags);\n+        }\n+    }\n+\n+    return 0;\n+}"
      },
      {
        "sha": "e29dcde6c02bbdf343513582697b2d744c2b563f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -150,4 +150,6 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n+size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n+\n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "adeb494c844d96cd263784ade0e3714530372761",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"policy/policy.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n \n@@ -363,12 +364,12 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx2.GetHash()));\n     BOOST_CHECK(pool.exists(tx3.GetHash()));\n \n-    pool.TrimToSize(::GetSerializeSize(CTransaction(tx1), SER_NETWORK, PROTOCOL_VERSION)); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    pool.TrimToSize(GetVirtualTransactionSize(tx1)); // mempool is limited to tx1's size in memory usage, so nothing fits\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n-    CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n+    CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();"
      },
      {
        "sha": "ee7b4201da8f7bcb91752abca3c41f6d6954da45",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -152,7 +152,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n         // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "4dd19069447299b0a56bd30400bd6d429de54080",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"policy/policy.h\"\n #include \"policy/fees.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\"\n@@ -50,7 +51,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n     tx.vout[0].nValue=0LL;\n-    CFeeRate baseRate(basefee, ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION));\n+    CFeeRate baseRate(basefee, GetVirtualTransactionSize(tx));\n \n     // Create a fake block\n     std::vector<CTransaction> block;"
      },
      {
        "sha": "de090700310def3bce02cdd1c2f99c7a98c7bd64",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount, lp);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCost, lp);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "e8910da179349e1fb135086f3f11012ff65542ef",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -67,12 +67,12 @@ struct TestMemPoolEntryHelper\n     unsigned int nHeight;\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n-    unsigned int sigOpCount;\n+    unsigned int sigOpCost;\n     LockPoints lp;\n \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }\n+        hadNoDependencies(false), spendsCoinbase(false), sigOpCost(4) { }\n     \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n@@ -83,6 +83,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n-    TestMemPoolEntryHelper &SigOps(unsigned int _sigops) { sigOpCount = _sigops; return *this; }\n+    TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }\n };\n #endif"
      },
      {
        "sha": "b8e9231d8dc513ef7af7e777ccbfda7ed7dc0fcf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n #include \"timedata.h\"\n@@ -22,12 +23,12 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase, unsigned int _sigOps, LockPoints lp):\n+                                 bool _spendsCoinbase, unsigned int _sigOpsCost, LockPoints lp):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    nTxSize = GetVirtualTransactionSize(tx);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n     nUsageSize = RecursiveDynamicUsage(tx);\n "
      },
      {
        "sha": "b327959fe5467b3975ab5e349b24fd7d58f6b476",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -84,7 +84,7 @@ class CTxMemPoolEntry\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n-    unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n+    unsigned int sigOpCost; //! SigOps cost\n     int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n     LockPoints lockPoints; //! Track the height and time at which tx was final\n \n@@ -101,7 +101,7 @@ class CTxMemPoolEntry\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n-                    unsigned int nSigOps, LockPoints lp);\n+                    unsigned int nSigOpsCost, LockPoints lp);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -115,7 +115,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n-    unsigned int GetSigOpCount() const { return sigOpCount; }\n+    unsigned int GetSigOpCost() const { return sigOpCost; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n     const LockPoints& GetLockPoints() const { return lockPoints; }"
      },
      {
        "sha": "7ede916a60384e1b9a70f190f5a9087143e5408b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6c69c226683e78138c3b8ca306af414122d7fa0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6c69c226683e78138c3b8ca306af414122d7fa0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d6c69c226683e78138c3b8ca306af414122d7fa0",
        "patch": "@@ -2180,7 +2180,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     nIn++;\n                 }\n \n-                unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION);\n+                unsigned int nBytes = GetVirtualTransactionSize(txNew);\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n@@ -2192,7 +2192,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                if (nBytes >= MAX_STANDARD_TX_SIZE)\n+                if (GetTransactionCost(txNew) >= MAX_STANDARD_TX_COST)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;"
      }
    ]
  },
  {
    "sha": "c730637ae7279bbf8509f361f397a45924eb6c1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzMwNjM3YWU3Mjc5YmJmODUwOWYzNjFmMzk3YTQ1OTI0ZWI2YzFl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Add command line options to loosen mempool acceptance rules",
      "tree": {
        "sha": "da50bff722fe2710c857033dd7fc5db2cfda740d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da50bff722fe2710c857033dd7fc5db2cfda740d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c730637ae7279bbf8509f361f397a45924eb6c1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c730637ae7279bbf8509f361f397a45924eb6c1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c730637ae7279bbf8509f361f397a45924eb6c1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c730637ae7279bbf8509f361f397a45924eb6c1e/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6c69c226683e78138c3b8ca306af414122d7fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6c69c226683e78138c3b8ca306af414122d7fa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6c69c226683e78138c3b8ca306af414122d7fa0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6fde3bbf3beaa5415103f1aa47eb90aa17926c00",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c730637ae7279bbf8509f361f397a45924eb6c1e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c730637ae7279bbf8509f361f397a45924eb6c1e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c730637ae7279bbf8509f361f397a45924eb6c1e",
        "patch": "@@ -1050,7 +1050,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n     }\n \n     // Don't accept witness transactions before the final threshold passes\n-    if (!tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n@@ -1402,14 +1402,19 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             }\n         }\n \n+        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+        if (!Params().RequireStandard()) {\n+            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+        }\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true)) {\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n-                !CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n                 // Only the witness is wrong, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }"
      }
    ]
  },
  {
    "sha": "fd9390f6621ac92909b9df5183e99a3838123ee7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDkzOTBmNjYyMWFjOTI5MDliOWRmNTE4M2U5OWEzODM4MTIzZWU3",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2016-01-24T16:29:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "bitcoinconsensus: add method that accepts amount, and return error when verify_script receives VERIFY_WITNESS flag\n\nscript_tests: always test bitcoinconsensus_verify_script_with_amount if VERIFY_WITNESS isn't set\n\nRename internal method + make it static\n\ntrim bitcoinconsensus_ prefix\n\nAdd SERIALIZE_TRANSACTION_WITNESS flag",
      "tree": {
        "sha": "ccf1428bb6278ff1d3b57aaedf633a81495f7ff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccf1428bb6278ff1d3b57aaedf633a81495f7ff5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd9390f6621ac92909b9df5183e99a3838123ee7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9390f6621ac92909b9df5183e99a3838123ee7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9390f6621ac92909b9df5183e99a3838123ee7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9390f6621ac92909b9df5183e99a3838123ee7/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c730637ae7279bbf8509f361f397a45924eb6c1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c730637ae7279bbf8509f361f397a45924eb6c1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c730637ae7279bbf8509f361f397a45924eb6c1e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 40,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b3bace56ccfb967a7731853c6be959ee1bbaeac4",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9390f6621ac92909b9df5183e99a3838123ee7/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9390f6621ac92909b9df5183e99a3838123ee7/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=fd9390f6621ac92909b9df5183e99a3838123ee7",
        "patch": "@@ -69,29 +69,49 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n-         // Regardless of the verification result, the tx did not error.\n-         set_error(err, bitcoinconsensus_ERR_OK);\n+        // Regardless of the verification result, the tx did not error.\n+        set_error(err, bitcoinconsensus_ERR_OK);\n \n-        CAmount am(0);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }\n \n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    CAmount am(amount);\n+    return ::verify_script(scriptPubKey, scriptPubKeyLen, am, txTo, txToLen, nIn, flags, err);\n+}\n+\n+\n+int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+                                   const unsigned char *txTo        , unsigned int txToLen,\n+                                   unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n+        return set_error(err, bitcoinconsensus_ERR_AMOUNT_REQUIRED);\n+    }\n+\n+    CAmount am(0);\n+    return ::verify_script(scriptPubKey, scriptPubKeyLen, am, txTo, txToLen, nIn, flags, err);\n+}\n+\n unsigned int bitcoinconsensus_version()\n {\n     // Just use the API version for now"
      },
      {
        "sha": "7a988badded8958af3482c06377a98dee2d00609",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9390f6621ac92909b9df5183e99a3838123ee7/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9390f6621ac92909b9df5183e99a3838123ee7/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=fd9390f6621ac92909b9df5183e99a3838123ee7",
        "patch": "@@ -33,14 +33,15 @@\n extern \"C\" {\n #endif\n \n-#define BITCOINCONSENSUS_API_VER 0\n+#define BITCOINCONSENSUS_API_VER 1\n \n typedef enum bitcoinconsensus_error_t\n {\n     bitcoinconsensus_ERR_OK = 0,\n     bitcoinconsensus_ERR_TX_INDEX,\n     bitcoinconsensus_ERR_TX_SIZE_MISMATCH,\n     bitcoinconsensus_ERR_TX_DESERIALIZE,\n+    bitcoinconsensus_ERR_AMOUNT_REQUIRED,\n } bitcoinconsensus_error;\n \n /** Script verification flags */\n@@ -50,13 +51,18 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by\n /// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under\n /// the additional constraints specified by flags.\n /// If not NULL, err will contain an error/success code for the operation\n EXPORT_SYMBOL int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+                                                 const unsigned char *txTo        , unsigned int txToLen,\n+                                                 unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n+\n+EXPORT_SYMBOL int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n "
      },
      {
        "sha": "0f28b3736fad2ddb3660b711b4ad75e22e592bed",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9390f6621ac92909b9df5183e99a3838123ee7/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9390f6621ac92909b9df5183e99a3838123ee7/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=fd9390f6621ac92909b9df5183e99a3838123ee7",
        "patch": "@@ -160,7 +160,12 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n-    BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n+    if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), amountZero, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+    } else {\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n+    }\n #endif\n }\n "
      }
    ]
  },
  {
    "sha": "4d90727666ddafa14163c198b0fa65e1bbd9df9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDkwNzI3NjY2ZGRhZmExNDE2M2MxOThiMGZhNjVlMWJiZDlkZjlj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-18T02:41:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Increase MAX_PROTOCOL_MESSAGE_LENGTH\n\nWitness blocks can be greater than 2MiB, but cannot be validly greater\nthan 4MB.",
      "tree": {
        "sha": "f20e4f7b8e4fc58864db74abbf878a382f52249c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f20e4f7b8e4fc58864db74abbf878a382f52249c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d90727666ddafa14163c198b0fa65e1bbd9df9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d90727666ddafa14163c198b0fa65e1bbd9df9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d90727666ddafa14163c198b0fa65e1bbd9df9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d90727666ddafa14163c198b0fa65e1bbd9df9c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd9390f6621ac92909b9df5183e99a3838123ee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9390f6621ac92909b9df5183e99a3838123ee7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9390f6621ac92909b9df5183e99a3838123ee7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ffed452f931d21b05b7986eb8d0ff64447f622f7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d90727666ddafa14163c198b0fa65e1bbd9df9c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d90727666ddafa14163c198b0fa65e1bbd9df9c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4d90727666ddafa14163c198b0fa65e1bbd9df9c",
        "patch": "@@ -43,8 +43,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n-/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** -listen default */"
      }
    ]
  },
  {
    "sha": "e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTViNmE0MmU5MTY1ZWI2YmEwOTE0OTRjMmVkMTlmZWM0ODIwYWFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-18T16:20:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Add rewind logic to deal with post-fork software updates",
      "tree": {
        "sha": "9dbe2cac413272b0a4171fdcc6e28a2d10144f35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dbe2cac413272b0a4171fdcc6e28a2d10144f35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d90727666ddafa14163c198b0fa65e1bbd9df9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d90727666ddafa14163c198b0fa65e1bbd9df9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d90727666ddafa14163c198b0fa65e1bbd9df9c"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 97,
      "deletions": 20
    },
    "files": [
      {
        "sha": "062861fa251851d226f44e253d116d33b984dff5",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "patch": "@@ -90,6 +90,8 @@ enum BlockStatus {\n     BLOCK_FAILED_VALID       =   32, //! stage after last reached validness failed\n     BLOCK_FAILED_CHILD       =   64, //! descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n+\n+    BLOCK_OPT_WITNESS       =   128, //! block data in blk*.data was received with a witness-enforcing client\n };\n \n /** The block chain is a tree shaped structure starting with the"
      },
      {
        "sha": "66618b230aa60236ee52a78413d07666fc834f57",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "patch": "@@ -1363,6 +1363,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!fReindex) {\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                    if (!RewindBlockIndex(chainparams.GetConsensus())) {\n+                        strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                        break;\n+                    }\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\","
      },
      {
        "sha": "fc771696a5bc8fc3cccab9bc20cdd5c9056b33cc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 20,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "patch": "@@ -2659,7 +2659,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n }\n \n /** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n-bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n+bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams, bool fBare = false)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2679,24 +2679,27 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n-    // Resurrect mempool transactions from the disconnected block.\n-    std::vector<uint256> vHashUpdate;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n-        CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n-            mempool.remove(tx, removed, true);\n-        } else if (mempool.exists(tx.GetHash())) {\n-            vHashUpdate.push_back(tx.GetHash());\n-        }\n-    }\n-    // AcceptToMemoryPool/addUnchecked all assume that new mempool entries have\n-    // no in-mempool children, which is generally not true when adding\n-    // previously-confirmed transactions back to the mempool.\n-    // UpdateTransactionsFromBlock finds descendants of any transactions in this\n-    // block that were added back and cleans up the mempool state.\n-    mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+\n+    if (!fBare) {\n+        // Resurrect mempool transactions from the disconnected block.\n+        std::vector<uint256> vHashUpdate;\n+        BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+            // ignore validation errors in resurrected transactions\n+            list<CTransaction> removed;\n+            CValidationState stateDummy;\n+            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n+                mempool.remove(tx, removed, true);\n+            } else if (mempool.exists(tx.GetHash())) {\n+                vHashUpdate.push_back(tx.GetHash());\n+            }\n+        }\n+        // AcceptToMemoryPool/addUnchecked all assume that new mempool entries have\n+        // no in-mempool children, which is generally not true when adding\n+        // previously-confirmed transactions back to the mempool.\n+        // UpdateTransactionsFromBlock finds descendants of any transactions in this\n+        // block that were added back and cleans up the mempool state.\n+        mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+    }\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -3117,7 +3120,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n-    pindexNew->nStatus |= BLOCK_HAVE_DATA;\n+    pindexNew->nStatus |= BLOCK_HAVE_DATA | BLOCK_OPT_WITNESS;\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n     setDirtyBlockIndex.insert(pindexNew);\n \n@@ -4073,6 +4076,68 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool RewindBlockIndex(const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+\n+    int nHeight = 1;\n+    while (nHeight <= chainActive.Height()) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            break;\n+        }\n+        nHeight++;\n+    }\n+\n+    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+    CValidationState state;\n+    CBlockIndex* pindex = chainActive.Tip();\n+    while (chainActive.Height() >= nHeight) {\n+        if (!DisconnectTip(state, params, true)) {\n+            return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n+        }\n+        // Occasionally flush state to disk.\n+        if (!FlushStateToDisk(state, FLUSH_STATE_PERIODIC))\n+            return false;\n+    }\n+\n+    // Reduce validity flag and have-data flags.\n+    // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+    // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+        CBlockIndex* pindexIter = it->second;\n+        if (IsWitnessEnabled(pindexIter->pprev, params) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n+            // Reduce validity\n+            pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n+            // Remove have-data flags.\n+            pindexIter->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+            // Remove storage location.\n+            pindexIter->nFile = 0;\n+            pindexIter->nDataPos = 0;\n+            pindexIter->nUndoPos = 0;\n+            // Remove various other things\n+            pindexIter->nTx = 0;\n+            pindexIter->nChainTx = 0;\n+            pindexIter->nSequenceId = 0;\n+            // Make sure it gets written.\n+            setDirtyBlockIndex.insert(pindexIter);\n+            // Update setBlockIndexCandidates\n+            setBlockIndexCandidates.erase(pindexIter);\n+        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->nChainTx) {\n+            setBlockIndexCandidates.insert(pindexIter);\n+        }\n+    }\n+\n+    PruneBlockIndexCandidates();\n+\n+    CheckBlockIndex(params);\n+\n+    if (!FlushStateToDisk(state, FLUSH_STATE_ALWAYS)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "b42d77489fb6afc503f5c8db9b09f09464569df4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e95b6a42e9165eb6ba091494c2ed19fec4820aaa/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "patch": "@@ -453,6 +453,8 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n+bool RewindBlockIndex(const Consensus::Params& params);\n+\n void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n /** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */"
      }
    ]
  },
  {
    "sha": "da279a967a8cde924d341bac073afc0c1a66a4ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTI3OWE5NjdhOGNkZTkyNGQzNDFiYWMwNzNhZmMwYzFhNjZhNGFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "--- [SEGWIT] begin: wallet ---",
      "tree": {
        "sha": "9dbe2cac413272b0a4171fdcc6e28a2d10144f35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dbe2cac413272b0a4171fdcc6e28a2d10144f35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da279a967a8cde924d341bac073afc0c1a66a4ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da279a967a8cde924d341bac073afc0c1a66a4ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da279a967a8cde924d341bac073afc0c1a66a4ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da279a967a8cde924d341bac073afc0c1a66a4ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95b6a42e9165eb6ba091494c2ed19fec4820aaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e95b6a42e9165eb6ba091494c2ed19fec4820aaa"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWY4Y2JiOTZiMDNjYTI5NDZhYmJjMzFiZTUyYjI4NzZkMTNhYTJh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:54:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Witness script signing",
      "tree": {
        "sha": "740cd2be8c6012e0cd5bccb3c34bba4c2e6de343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/740cd2be8c6012e0cd5bccb3c34bba4c2e6de343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da279a967a8cde924d341bac073afc0c1a66a4ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da279a967a8cde924d341bac073afc0c1a66a4ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da279a967a8cde924d341bac073afc0c1a66a4ab"
      }
    ],
    "stats": {
      "total": 548,
      "additions": 382,
      "deletions": 166
    },
    "files": [
      {
        "sha": "86cef8b7c4d784f095948ccccac5fa3ede771c94",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -354,6 +354,18 @@ vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n     return ParseHexUV(o[strKey], strKey);\n }\n \n+static CAmount AmountFromValue(const UniValue& value)\n+{\n+    if (!value.isNum() && !value.isStr())\n+        throw runtime_error(\"Amount is not a number or string\");\n+    CAmount amount;\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+        throw runtime_error(\"Invalid amount\");\n+    if (!MoneyRange(amount))\n+        throw runtime_error(\"Amount out of range\");\n+    return amount;\n+}\n+\n static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n {\n     int nHashType = SIGHASH_ALL;\n@@ -425,7 +437,10 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(prevOut[\"amount\"]);\n+                }\n             }\n \n             // if redeemScript given and private keys given,\n@@ -455,15 +470,16 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n         const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n-        }\n+        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }"
      },
      {
        "sha": "7238a896f782f5a0612caa46d213d6f6f2f86987",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -580,7 +580,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\"    (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"    ]\\n\"\n@@ -718,7 +719,10 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n+                }\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n@@ -775,15 +779,18 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n         const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, amount, txin.scriptSig, txv.vin[i].scriptSig);\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         }\n+\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));"
      },
      {
        "sha": "498c27dc3b4a26aeeb855c5feacd50f982e3160d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 196,
        "deletions": 83,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -20,37 +20,37 @@ typedef std::vector<unsigned char> valtype;\n \n TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, 0);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     vector<unsigned char> vchSig;\n-    if (!creator.CreateSig(vchSig, address, scriptCode))\n+    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))\n         return false;\n-    scriptSigRet << vchSig;\n+    ret.push_back(vchSig);\n     return true;\n }\n \n-static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, creator, scriptCode, scriptSigRet))\n+        if (Sign1(keyID, creator, scriptCode, ret, sigversion))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n@@ -63,9 +63,11 @@ static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreato\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     CScript& scriptSigRet, txnouttype& whichTypeRet)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet, int sigversion)\n {\n-    scriptSigRet.clear();\n+    CScript scriptRet;\n+    uint160 h160;\n+    ret.clear();\n \n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n@@ -79,62 +81,142 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n             CPubKey vch;\n             creator.KeyStore().GetPubKey(keyID, vch);\n-            scriptSigRet << ToByteVector(vch);\n+            ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n \n     case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n+        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n+\n+    case TX_WITNESS_V0_KEYHASH:\n+        ret.push_back(vSolutions[0]);\n+        return true;\n+\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n+        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n+\n+    default:\n+        return false;\n     }\n-    return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+static CScript PushAll(const vector<valtype>& values)\n {\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n+{\n+    CScript script = fromPubKey;\n+    bool solved = true;\n+    std::vector<valtype> result;\n     txnouttype whichType;\n-    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n-        return false;\n+    solved = SignStep(creator, script, result, whichType, 0);\n+    bool P2SH = false;\n+    CScript subscript;\n+    sigdata.scriptWitness.stack.clear();\n \n-    if (whichType == TX_SCRIPTHASH)\n+    if (solved && whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n+        // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = scriptSig;\n+        script = subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, script, result, whichType, 0) && whichType != TX_SCRIPTHASH;\n+        P2SH = true;\n+    }\n \n+    if (solved && whichType == TX_WITNESS_V0_KEYHASH)\n+    {\n+        CScript witnessscript;\n+        witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        bool fSolved =\n-            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << valtype(subscript.begin(), subscript.end());\n-        if (!fSolved) return false;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1);\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n+    }\n+    else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n+        txnouttype subType;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n     }\n \n+    if (P2SH) {\n+        result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n+    }\n+    sigdata.scriptSig = PushAll(result);\n+\n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+}\n+\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)\n+{\n+    SignatureData data;\n+    assert(tx.vin.size() > nIn);\n+    data.scriptSig = tx.vin[nIn].scriptSig;\n+    if (tx.wit.vtxinwit.size() > nIn) {\n+        data.scriptWitness = tx.wit.vtxinwit[nIn].scriptWitness;\n+    }\n+    return data;\n+}\n+\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n+{\n+    assert(tx.vin.size() > nIn);\n+    tx.vin[nIn].scriptSig = data.scriptSig;\n+    if (!data.scriptWitness.IsNull() || tx.wit.vtxinwit.size() > nIn) {\n+        tx.wit.vtxinwit.resize(tx.vin.size());\n+        tx.wit.vtxinwit[nIn].scriptWitness = data.scriptWitness;\n+    }\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, amount, nHashType);\n \n-    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n+    SignatureData sigdata;\n+    bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n+    UpdateTransaction(txTo, nIn, sigdata);\n+    return ret;\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -144,20 +226,12 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n-}\n-\n-static CScript PushAll(const vector<valtype>& values)\n-{\n-    CScript result;\n-    BOOST_FOREACH(const valtype& v, values)\n-        result << v;\n-    return result;\n+    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n-static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n-                               const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n+                               const vector<valtype>& sigs1, const vector<valtype>& sigs2, int sigversion)\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n@@ -185,7 +259,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (checker.CheckSig(sig, pubkey, scriptPubKey, 0))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey, sigversion))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -194,87 +268,126 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n     }\n     // Now build a merged CScript:\n     unsigned int nSigsHave = 0;\n-    CScript result; result << OP_0; // pop-one-too-many workaround\n+    std::vector<valtype> result; result.push_back(valtype()); // pop-one-too-many workaround\n     for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n     {\n         if (sigs.count(vSolutions[i+1]))\n         {\n-            result << sigs[vSolutions[i+1]];\n+            result.push_back(sigs[vSolutions[i+1]]);\n             ++nSigsHave;\n         }\n     }\n     // Fill any missing with OP_0:\n     for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result << OP_0;\n+        result.push_back(valtype());\n \n     return result;\n }\n \n-static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+namespace\n+{\n+struct Stacks\n+{\n+    std::vector<valtype> script;\n+    std::vector<valtype> witness;\n+\n+    Stacks() {}\n+    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n+    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+    }\n+\n+    SignatureData Output() const {\n+        SignatureData result;\n+        result.scriptSig = PushAll(script);\n+        result.scriptWitness.stack = witness;\n+        return result;\n+    }\n+};\n+}\n+\n+static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 vector<valtype>& sigs1, vector<valtype>& sigs2)\n+                                 Stacks sigs1, Stacks sigs2, int sigversion)\n {\n     switch (txType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n         // Don't know anything about this, assume bigger one is correct:\n-        if (sigs1.size() >= sigs2.size())\n-            return PushAll(sigs1);\n-        return PushAll(sigs2);\n+        if (sigs1.script.size() >= sigs2.script.size())\n+            return sigs1;\n+        return sigs2;\n     case TX_PUBKEY:\n     case TX_PUBKEYHASH:\n         // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.empty() || sigs1[0].empty())\n-            return PushAll(sigs2);\n-        return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script[0].empty())\n+            return sigs2;\n+        return sigs1;\n+    case TX_WITNESS_V0_KEYHASH:\n+        // Signatures are bigger than placeholders or empty scripts:\n+        if (sigs1.witness.empty() || sigs1.witness[0].empty())\n+            return sigs2;\n+        return sigs1;\n     case TX_SCRIPTHASH:\n-        if (sigs1.empty() || sigs1.back().empty())\n-            return PushAll(sigs2);\n-        else if (sigs2.empty() || sigs2.back().empty())\n-            return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script.back().empty())\n+            return sigs2;\n+        else if (sigs2.script.empty() || sigs2.script.back().empty())\n+            return sigs1;\n         else\n         {\n             // Recur to combine:\n-            valtype spk = sigs1.back();\n+            valtype spk = sigs1.script.back();\n             CScript pubKey2(spk.begin(), spk.end());\n \n             txnouttype txType2;\n             vector<vector<unsigned char> > vSolutions2;\n             Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.pop_back();\n-            sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n-            result << spk;\n+            sigs1.script.pop_back();\n+            sigs2.script.pop_back();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, sigversion);\n+            result.script.push_back(spk);\n             return result;\n         }\n     case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, checker, vSolutions, sigs1, sigs2);\n+        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script, sigversion));\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        if (sigs1.witness.empty() || sigs1.witness.back().empty())\n+            return sigs2;\n+        else if (sigs2.witness.empty() || sigs2.witness.back().empty())\n+            return sigs1;\n+        else\n+        {\n+            // Recur to combine:\n+            CScript pubKey2(sigs1.witness.back().begin(), sigs1.witness.back().end());\n+            txnouttype txType2;\n+            vector<valtype> vSolutions2;\n+            Solver(pubKey2, txType2, vSolutions2);\n+            sigs1.witness.pop_back();\n+            sigs1.script = sigs1.witness;\n+            sigs1.witness.clear();\n+            sigs2.witness.pop_back();\n+            sigs2.script = sigs2.witness;\n+            sigs2.witness.clear();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, 1);\n+            result.witness = result.script;\n+            result.script.clear();\n+            result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n+            return result;\n+        }\n+    default:\n+        return Stacks();\n     }\n-\n-    return CScript();\n }\n \n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n-{\n-    TransactionSignatureChecker checker(&txTo, nIn, amount);\n-    return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n-}\n-\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+                          const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n {\n     txnouttype txType;\n     vector<vector<unsigned char> > vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n-    vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n-    vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n-\n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), 0).Output();\n }\n \n namespace {\n@@ -297,7 +410,7 @@ const BaseSignatureChecker& DummySignatureCreator::Checker() const\n     return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const\n+bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const\n {\n     // Create a dummy signature that is a valid DER-encoding\n     vchSig.assign(72, '\\000');"
      },
      {
        "sha": "6144cd470f8d7500b819723c8886ac6ffa92eaa0",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -27,7 +27,7 @@ class BaseSignatureCreator {\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n     /** Create a singular (non-script) signature. */\n-    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const =0;\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -41,28 +41,44 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+};\n+\n+class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n+    CTransaction tx;\n+\n+public:\n+    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amount, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatyres. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n+};\n+\n+struct SignatureData {\n+    CScript scriptSig;\n+    CScriptWitness scriptWitness;\n+\n+    SignatureData() {}\n+    explicit SignatureData(const CScript& script) : scriptSig(script) {}\n };\n \n /** Produce a script signature using a generic signature creator. */\n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n+bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n \n-/** Combine two script signatures on transactions. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CAmount& amount, const CScript& scriptSig1, const CScript& scriptSig2);\n+/** Extract signature data from a transaction, and insert it. */\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "bb178f49fe9f245a8359b98dc2c0fda0a0052334",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -31,6 +31,8 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_SCRIPTHASH: return \"scripthash\";\n     case TX_MULTISIG: return \"multisig\";\n     case TX_NULL_DATA: return \"nulldata\";\n+    case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n+    case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     }\n     return NULL;\n }\n@@ -66,6 +68,22 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         return true;\n     }\n \n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            typeRet = TX_WITNESS_V0_KEYHASH;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            typeRet = TX_WITNESS_V0_SCRIPTHASH;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     // Provably prunable, data-carrying output\n     //\n     // So long as script passes the IsUnspendable() test and all but the first\n@@ -282,3 +300,26 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }\n+\n+CScript GetScriptForWitness(const CScript& redeemscript)\n+{\n+    CScript ret;\n+\n+    txnouttype typ;\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (Solver(redeemscript, typ, vSolutions)) {\n+        if (typ == TX_PUBKEY) {\n+            unsigned char h160[20];\n+            CHash160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160);\n+            ret << OP_0 << std::vector<unsigned char>(&h160[0], &h160[20]);\n+            return ret;\n+        } else if (typ == TX_PUBKEYHASH) {\n+           ret << OP_0 << vSolutions[0];\n+           return ret;\n+        }\n+    }\n+    uint256 hash;\n+    CSHA256().Write(&redeemscript[0], redeemscript.size()).Finalize(hash.begin());\n+    ret << OP_0 << ToByteVector(hash);\n+    return ret;\n+}"
      },
      {
        "sha": "7684cf25c3146d20509b4e715a105b5690d37a55",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -51,6 +51,8 @@ enum txnouttype\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n     TX_NULL_DATA,\n+    TX_WITNESS_V0_SCRIPTHASH,\n+    TX_WITNESS_V0_KEYHASH,\n };\n \n class CNoDestination {\n@@ -77,5 +79,6 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n CScript GetScriptForDestination(const CTxDestination& dest);\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+CScript GetScriptForWitness(const CScript& redeemscript);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "0f9158bd06ee87a167b7c430ae428da659f7234b",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -148,7 +148,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n-        SignSignature(keystore, txPrev, tx, 0);\n+        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n \n         AddOrphanTx(tx, i);\n     }\n@@ -168,7 +168,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n             tx.vin[j].prevout.n = j;\n             tx.vin[j].prevout.hash = txPrev.GetHash();\n         }\n-        SignSignature(keystore, txPrev, tx, 0);\n+        SignSignature(keystore, txPrev, tx, 0, SIGHASH_ALL);\n         // Re-use same signature for other inputs\n         // (they don't have to be valid for this test)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)"
      },
      {
        "sha": "7b3d9fe03f0b2b1a46727147a5ab9ae8171f560c",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -313,7 +313,7 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n \n     for (int i = 0; i < 3; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n     }\n }\n "
      },
      {
        "sha": "aa9c2f1a0e45434a7872cd3bcc3a58b35459ff87",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -107,7 +108,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n     for (int i = 0; i < 8; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n     }\n     // All of the above should be OK, and the txTos have valid signatures\n     // Check to make sure signature verification fails if we use the wrong ScriptSig:\n@@ -204,7 +205,7 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n     for (int i = 0; i < 4; i++)\n     {\n-        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n         BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n@@ -333,9 +334,9 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         txTo.vin[i].prevout.n = i;\n         txTo.vin[i].prevout.hash = txFrom.GetHash();\n     }\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1));\n-    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1, SIGHASH_ALL));\n+    BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2, SIGHASH_ALL));\n     // SignSignature doesn't know how to sign these. We're\n     // not testing validating signatures, so just create\n     // dummy signatures that DO include the correct P2SH scripts:"
      },
      {
        "sha": "c216ff84e399d5dc7378f60d4f8d0438eb1fd146",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -152,16 +152,16 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n     CMutableTransaction tx2 = tx;\n-    static const CAmount amountZero = 0;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, amountZero), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n-        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), amountZero, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n     } else {\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n@@ -893,7 +893,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the CombineSignatures function\n-    CAmount amount;\n+    CAmount amount = 0;\n     CBasicKeyStore keystore;\n     vector<CKey> keys;\n     vector<CPubKey> pubkeys;\n@@ -911,50 +911,50 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n-    CScript empty;\n-    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, empty);\n-    BOOST_CHECK(combined.empty());\n+    SignatureData empty;\n+    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, empty);\n+    BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n-    SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL); // changes scriptSig\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     scriptSigCopy = scriptSig;\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, scriptSigCopy);\n-    BOOST_CHECK(combined == scriptSig);\n+    scriptSigCopy = CScript() << OP_0 << std::vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n-    SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n@@ -982,22 +982,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial1b);\n-    BOOST_CHECK(combined == partial1a);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1a, partial2a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial1a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial1b, partial2b);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial1b);\n-    BOOST_CHECK(combined == complete13);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial2a, partial3a);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial2b);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, amount, partial3b, partial3a);\n-    BOOST_CHECK(combined == partial3c);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == partial1a);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial2a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial1a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == complete13);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == partial3c);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_push)"
      },
      {
        "sha": "2bc239c5481a1b7d524bc3fdedfe157a64b36444",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -2166,17 +2166,20 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 {\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n-                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n+                    SignatureData sigdata;\n                     if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata);\n                     else\n-                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n+                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata);\n \n                     if (!signSuccess)\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n+                    } else {\n+                        UpdateTransaction(txNew, nIn, sigdata);\n                     }\n+\n                     nIn++;\n                 }\n \n@@ -2186,6 +2189,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (!sign) {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n                         vin.scriptSig = CScript();\n+                    txNew.wit.SetNull();\n                 }\n \n                 // Embed the constructed transaction data in wtxNew."
      },
      {
        "sha": "447346da09f5a827363930b7b2b61ca4a2354ede",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "patch": "@@ -57,6 +57,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n             return ISMINE_SPENDABLE;\n         break;\n     case TX_PUBKEYHASH:\n+    case TX_WITNESS_V0_KEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n@@ -72,6 +73,20 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         }\n         break;\n     }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret == ISMINE_SPENDABLE)\n+                return ret;\n+        }\n+        break;\n+    }\n+\n     case TX_MULTISIG:\n     {\n         // Only consider transactions \"mine\" if we own ALL the\n@@ -88,8 +103,8 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n \n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n-        CScript scriptSig;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        SignatureData sigs;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      }
    ]
  },
  {
    "sha": "15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTU4NWUwOTFmNmM4MTE0YWEwYWI2NzI2YWJjZmIzYzdmMDZiYzA0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T00:13:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Add witness address RPCs (using P2SH)\n\nIncludes support for pushkeyhash wit v0 by Alex Morcos.",
      "tree": {
        "sha": "74e25c9e0e23b44d942065a9d51608e24cd485ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74e25c9e0e23b44d942065a9d51608e24cd485ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f8cbb96b03ca2946abbc31be52b2876d13aa2a"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 106,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c38cbf6e44a4badae6ebb11e173efc053b0be36e",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "patch": "@@ -312,6 +312,39 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nCreates a witness address for a particular script.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"  \\\"witnessScript\\\":\\\"script\\\"      (string) The string value of the hex-encoded witness script.\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());\n+    CScript script(code.begin(), code.end());\n+    CScript witscript = GetScriptForWitness(script);\n+    CScriptID witscriptid(witscript);\n+    CBitcoinAddress address(witscriptid);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", address.ToString()));\n+    result.push_back(Pair(\"witnessScript\", HexStr(witscript.begin(), witscript.end())));\n+\n+    return result;\n+}\n+\n UniValue verifymessage(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)"
      },
      {
        "sha": "e8410fe7659413b4b2bb4b589b9f6fd5a784d0ae",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "patch": "@@ -315,6 +315,7 @@ static const CRPCCommand vRPCCommands[] =\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n+    { \"util\",               \"createwitnessaddress\",   &createwitnessaddress,   true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n     { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n@@ -333,6 +334,7 @@ static const CRPCCommand vRPCCommands[] =\n #ifdef ENABLE_WALLET\n     /* Wallet */\n     { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true  },\n+    { \"wallet\",             \"addwitnessaddress\",      &addwitnessaddress,      true  },\n     { \"wallet\",             \"backupwallet\",           &backupwallet,           true  },\n     { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true  },\n     { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true  },"
      },
      {
        "sha": "a3779dd92ce16a251144d0ff496db3eab7647756",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "patch": "@@ -213,7 +213,9 @@ extern UniValue movecmd(const UniValue& params, bool fHelp);\n extern UniValue sendfrom(const UniValue& params, bool fHelp);\n extern UniValue sendmany(const UniValue& params, bool fHelp);\n extern UniValue addmultisigaddress(const UniValue& params, bool fHelp);\n+extern UniValue addwitnessaddress(const UniValue& params, bool fHelp);\n extern UniValue createmultisig(const UniValue& params, bool fHelp);\n+extern UniValue createwitnessaddress(const UniValue& params, bool fHelp);\n extern UniValue listreceivedbyaddress(const UniValue& params, bool fHelp);\n extern UniValue listreceivedbyaccount(const UniValue& params, bool fHelp);\n extern UniValue listtransactions(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "886fbd8bddb9944468e1c6b343e902e52c4ac7ec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15585e091f6c8114aa0ab6726abcfb3c7f06bc04/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "patch": "@@ -1100,6 +1100,75 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+class Witnessifier : public boost::static_visitor<bool>\n+{\n+public:\n+    CScriptID result;\n+\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+\n+    bool operator()(const CKeyID &keyID) {\n+        CPubKey pubkey;\n+        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n+            CScript basescript;\n+            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+            CScript witscript = GetScriptForWitness(basescript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) {\n+        CScript subscript;\n+        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+            int witnessversion;\n+            std::vector<unsigned char> witprog;\n+            if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n+                result = scriptID;\n+                return true;\n+            }\n+            CScript witscript = GetScriptForWitness(subscript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+            \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n+            \"It returns the witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    Witnessifier w;\n+    CTxDestination dest = address.Get();\n+    bool ret = boost::apply_visitor(w, dest);\n+    if (!ret) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet\");\n+    }\n+\n+    return CBitcoinAddress(w.result).ToString();\n+}\n \n struct tallyitem\n {"
      }
    ]
  },
  {
    "sha": "cc61707ada5c94844c3e753679c7a84f53316d4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzYxNzA3YWRhNWM5NDg0NGMzZTc1MzY3OWM3YTg0ZjUzMzE2ZDRk",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-10T06:59:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "signrawtransaction can sign P2WSH",
      "tree": {
        "sha": "040fbdd0cc57d39ce24deab26aac20547346dc87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/040fbdd0cc57d39ce24deab26aac20547346dc87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc61707ada5c94844c3e753679c7a84f53316d4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61707ada5c94844c3e753679c7a84f53316d4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc61707ada5c94844c3e753679c7a84f53316d4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61707ada5c94844c3e753679c7a84f53316d4d/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15585e091f6c8114aa0ab6726abcfb3c7f06bc04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15585e091f6c8114aa0ab6726abcfb3c7f06bc04"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9bd35f8f4f6c4c2b333be46c91d7fa7844be73f4",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61707ada5c94844c3e753679c7a84f53316d4d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61707ada5c94844c3e753679c7a84f53316d4d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=cc61707ada5c94844c3e753679c7a84f53316d4d",
        "patch": "@@ -445,7 +445,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n \n             // if redeemScript given and private keys given,\n             // add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && scriptPubKey.IsPayToScriptHash() &&\n+            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash()) &&\n                 prevOut.exists(\"redeemScript\")) {\n                 UniValue v = prevOut[\"redeemScript\"];\n                 vector<unsigned char> rsData(ParseHexUV(v, \"redeemScript\"));"
      },
      {
        "sha": "3186ea068c1a44460e6fa939d0a8e0216072e960",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61707ada5c94844c3e753679c7a84f53316d4d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61707ada5c94844c3e753679c7a84f53316d4d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=cc61707ada5c94844c3e753679c7a84f53316d4d",
        "patch": "@@ -580,7 +580,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n             \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n@@ -727,7 +727,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n+            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n                 UniValue v = find_value(prevOut, \"redeemScript\");\n                 if (!v.isNull()) {"
      },
      {
        "sha": "17fbce8ba34f028cc1f24c0dda49b55051d8b7dc",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61707ada5c94844c3e753679c7a84f53316d4d/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61707ada5c94844c3e753679c7a84f53316d4d/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=cc61707ada5c94844c3e753679c7a84f53316d4d",
        "patch": "@@ -210,6 +210,14 @@ bool CScript::IsPayToScriptHash() const\n             (*this)[22] == OP_EQUAL);\n }\n \n+bool CScript::IsPayToWitnessScriptHash() const\n+{\n+    // Extra-fast test for pay-to-witness-script-hash CScripts:\n+    return (this->size() == 34 &&\n+            (*this)[0] == OP_0 &&\n+            (*this)[1] == 0x20);\n+}\n+\n // A witness program is any valid CScript that consists of a 1-byte push opcode\n // followed by a data push between 2 and 32 bytes.\n bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const"
      },
      {
        "sha": "e1cbf0605e92f22eede54bb4c69a8b5af24227b5",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61707ada5c94844c3e753679c7a84f53316d4d/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61707ada5c94844c3e753679c7a84f53316d4d/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=cc61707ada5c94844c3e753679c7a84f53316d4d",
        "patch": "@@ -609,6 +609,7 @@ class CScript : public CScriptBase\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n+    bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */"
      }
    ]
  },
  {
    "sha": "61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWZmNjM3MzY0Y2I3YmI4N2ExNDY5YWU3YTI5YjVkZDQ4NmQ2ZTBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "--- [SEGWIT] begin: tests ---",
      "tree": {
        "sha": "040fbdd0cc57d39ce24deab26aac20547346dc87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/040fbdd0cc57d39ce24deab26aac20547346dc87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc61707ada5c94844c3e753679c7a84f53316d4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61707ada5c94844c3e753679c7a84f53316d4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc61707ada5c94844c3e753679c7a84f53316d4d"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "47d93375029415c11c70e8b93b7bff52f83efe7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2Q5MzM3NTAyOTQxNWMxMWM3MGU4YjkzYjdiZmY1MmY4M2VmZTdm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-20T15:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:22Z"
      },
      "message": "Signing tests",
      "tree": {
        "sha": "ae101c38c6412c70216c12f37505a188e104f59e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae101c38c6412c70216c12f37505a188e104f59e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47d93375029415c11c70e8b93b7bff52f83efe7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d93375029415c11c70e8b93b7bff52f83efe7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47d93375029415c11c70e8b93b7bff52f83efe7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d93375029415c11c70e8b93b7bff52f83efe7f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61ff637364cb7bb87a1469ae7a29b5dd486d6e0d"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 276,
      "deletions": 0
    },
    "files": [
      {
        "sha": "591e67c5aae336494be2bd0dda86e431de308ead",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 276,
        "deletions": 0,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47d93375029415c11c70e8b93b7bff52f83efe7f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47d93375029415c11c70e8b93b7bff52f83efe7f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=47d93375029415c11c70e8b93b7bff52f83efe7f",
        "patch": "@@ -14,7 +14,9 @@\n #include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"script/script_error.h\"\n+#include \"script/standard.h\"\n #include \"utilstrencodings.h\"\n \n #include <map>\n@@ -25,11 +27,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n using namespace std;\n \n+typedef vector<unsigned char> valtype;\n+\n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n \n@@ -315,6 +320,277 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n }\n \n+void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransaction& output, CMutableTransaction& input, bool success = true)\n+{\n+    CMutableTransaction outputm;\n+    outputm.nVersion = 1;\n+    outputm.vin.resize(1);\n+    outputm.vin[0].prevout.SetNull();\n+    outputm.vin[0].scriptSig = CScript();\n+    outputm.wit.vtxinwit.resize(1);\n+    outputm.vout.resize(1);\n+    outputm.vout[0].nValue = 1;\n+    outputm.vout[0].scriptPubKey = outscript;\n+    CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) << outputm;\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) >> output;\n+    assert(output.vin.size() == 1);\n+    assert(output.vin[0] == outputm.vin[0]);\n+    assert(output.vout.size() == 1);\n+    assert(output.vout[0] == outputm.vout[0]);\n+    assert(output.wit.vtxinwit.size() == 0);\n+\n+    CMutableTransaction inputm;\n+    inputm.nVersion = 1;\n+    inputm.vin.resize(1);\n+    inputm.vin[0].prevout.hash = output.GetHash();\n+    inputm.vin[0].prevout.n = 0;\n+    inputm.wit.vtxinwit.resize(1);\n+    inputm.vout.resize(1);\n+    inputm.vout[0].nValue = 1;\n+    inputm.vout[0].scriptPubKey = CScript();\n+    bool ret = SignSignature(keystore, output, inputm, 0, SIGHASH_ALL);\n+    assert(ret == success);\n+    CDataStream ssin(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) << inputm;\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) >> input;\n+    assert(input.vin.size() == 1);\n+    assert(input.vin[0] == inputm.vin[0]);\n+    assert(input.vout.size() == 1);\n+    assert(input.vout[0] == inputm.vout[0]);\n+    if (inputm.wit.IsNull()) {\n+        assert(input.wit.IsNull());\n+    } else {\n+        assert(!input.wit.IsNull());\n+        assert(input.wit.vtxinwit.size() == 1);\n+        assert(input.wit.vtxinwit[0].scriptWitness.stack == inputm.wit.vtxinwit[0].scriptWitness.stack);\n+    }\n+}\n+\n+void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags, bool success)\n+{\n+    ScriptError error;\n+    CTransaction inputi(input);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    assert(ret == success);\n+}\n+\n+static CScript PushAll(const vector<valtype>& values)\n+{\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n+{\n+    vector<valtype> stack;\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n+    assert(stack.size() > 0);\n+    stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n+    script = PushAll(stack);\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_witness)\n+{\n+    CBasicKeyStore keystore, keystore2;\n+    CKey key1, key2, key3, key1L, key2L;\n+    CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;\n+    key1.MakeNewKey(true);\n+    key2.MakeNewKey(true);\n+    key3.MakeNewKey(true);\n+    key1L.MakeNewKey(false);\n+    key2L.MakeNewKey(false);\n+    pubkey1 = key1.GetPubKey();\n+    pubkey2 = key2.GetPubKey();\n+    pubkey3 = key3.GetPubKey();\n+    pubkey1L = key1L.GetPubKey();\n+    pubkey2L = key2L.GetPubKey();\n+    keystore.AddKeyPubKey(key1, pubkey1);\n+    keystore.AddKeyPubKey(key2, pubkey2);\n+    keystore.AddKeyPubKey(key1L, pubkey1L);\n+    keystore.AddKeyPubKey(key2L, pubkey2L);\n+    CScript scriptPubkey1, scriptPubkey2, scriptPubkey1L, scriptPubkey2L, scriptMulti;\n+    scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n+    scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n+    scriptPubkey1L << ToByteVector(pubkey1L) << OP_CHECKSIG;\n+    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG; \n+    std::vector<CPubKey> oneandthree;\n+    oneandthree.push_back(pubkey1);\n+    oneandthree.push_back(pubkey3);\n+    scriptMulti = GetScriptForMultisig(2, oneandthree);\n+    keystore.AddCScript(scriptPubkey1);\n+    keystore.AddCScript(scriptPubkey2);\n+    keystore.AddCScript(scriptPubkey1L);\n+    keystore.AddCScript(scriptPubkey2L);\n+    keystore.AddCScript(scriptMulti);\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1L));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2L));\n+    keystore.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddCScript(scriptMulti);\n+    keystore2.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddKeyPubKey(key3, pubkey3);\n+\n+    CTransaction output1, output2;\n+    CMutableTransaction input1, input2;\n+    SignatureData sigdata;\n+\n+    // Normal pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1L, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2L, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2L)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, false);\n+    CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptMulti)), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(scriptMulti)), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // Witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptMulti), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForWitness(scriptMulti), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output1, input1, false);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output2, input2, false);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+}\n+\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "ab215e49cc697564549366e35ae57ff205d2a46d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjIxNWU0OWNjNjk3NTY0NTQ5MzY2ZTM1YWU1N2ZmMjA1ZDJhNDZk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:50:23Z"
      },
      "message": "Add rpc test for segwit\n\nAmended by Pieter Wuille to use multisig 1-of-1 for P2WSH tests, and BIP9\nbased switchover logic.",
      "tree": {
        "sha": "f558a765f68974abce700cc3f2d174bc99b4e977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f558a765f68974abce700cc3f2d174bc99b4e977"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab215e49cc697564549366e35ae57ff205d2a46d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab215e49cc697564549366e35ae57ff205d2a46d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab215e49cc697564549366e35ae57ff205d2a46d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab215e49cc697564549366e35ae57ff205d2a46d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47d93375029415c11c70e8b93b7bff52f83efe7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d93375029415c11c70e8b93b7bff52f83efe7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47d93375029415c11c70e8b93b7bff52f83efe7f"
      }
    ],
    "stats": {
      "total": 215,
      "additions": 215,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87e9cfdf3feb73229ff9d7a047b7f44d2edeb722",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab215e49cc697564549366e35ae57ff205d2a46d/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab215e49cc697564549366e35ae57ff205d2a46d/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=ab215e49cc697564549366e35ae57ff205d2a46d",
        "patch": "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the SegWit changeover logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+import hashlib\n+from binascii import hexlify\n+\n+NODE_0 = 0\n+NODE_1 = 1\n+NODE_2 = 2\n+WIT_V0 = 0\n+WIT_V1 = 1\n+\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+def ripemd160(s):\n+    return hashlib.new('ripemd160', s).digest()\n+\n+def witness_script(version, pubkey):\n+    if (version == 0):\n+        pubkeyhash = hexlify(ripemd160(sha256(pubkey.decode(\"hex\"))))\n+        pkscript = \"0014\" + pubkeyhash\n+    elif (version == 1):\n+        # 1-of-1 multisig\n+        scripthash = hexlify(sha256((\"5121\" + pubkey + \"51ae\").decode(\"hex\")))\n+        pkscript = \"0020\" + scripthash\n+    else:\n+        assert(\"Wrong version\" == \"0 or 1\")\n+    return pkscript\n+\n+def addlength(script):\n+    scriptlen = format(len(script)/2, 'x')\n+    assert(len(scriptlen) == 2)\n+    return scriptlen + script\n+\n+def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n+    pkscript = witness_script(version, pubkey);\n+    if (encode_p2sh):\n+        p2sh_hash = hexlify(ripemd160(sha256(pkscript.decode(\"hex\"))))\n+        pkscript = \"a914\"+p2sh_hash+\"87\"\n+    inputs = []\n+    outputs = {}\n+    inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]} )\n+    DUMMY_P2SH = \"2MySexEGVzZpRgNQ1JdjdP5bRETznm3roQ2\" # P2SH of \"OP_1 OP_DROP\"\n+    outputs[DUMMY_P2SH] = amount\n+    tx_to_witness = node.createrawtransaction(inputs,outputs)\n+    #replace dummy output with our own\n+    tx_to_witness = tx_to_witness[0:110] + addlength(pkscript) + tx_to_witness[-8:]\n+    return tx_to_witness\n+\n+def send_to_witness(version, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n+    tx_to_witness = create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount)\n+    if (sign):\n+        signed = node.signrawtransaction(tx_to_witness)\n+        return node.sendrawtransaction(signed[\"hex\"])\n+    else:\n+        if (insert_redeem_script):\n+            tx_to_witness = tx_to_witness[0:82] + addlength(insert_redeem_script) + tx_to_witness[84:]\n+\n+    return node.sendrawtransaction(tx_to_witness)\n+\n+def getutxo(txid):\n+    utxo = {}\n+    utxo[\"vout\"] = 0\n+    utxo[\"txid\"] = txid\n+    return utxo\n+\n+class SegWitTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-logtimemicros\", \"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-logtimemicros\", \"-debug\", \"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def success_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        block = node.generate(1)\n+        assert_equal(len(node.getblock(block[0])[\"tx\"]), 2)\n+        sync_blocks(self.nodes)\n+\n+    def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        block = node.generate(1)\n+        assert_equal(len(node.getblock(block[0])[\"tx\"]), 1)\n+        sync_blocks(self.nodes)\n+\n+    def fail_accept(self, node, txid, sign, redeem_script=\"\"):\n+        try:\n+            send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        except JSONRPCException as exp:\n+            assert(exp.error[\"code\"] == -26)\n+        else:\n+            raise AssertionError(\"Tx should not have been accepted\")\n+\n+    def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n+        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        try:\n+            node.generate(1)\n+        except JSONRPCException as exp:\n+            assert(exp.error[\"code\"] == -1)\n+        else:\n+            raise AssertionError(\"Created valid block when TestBlockValidity should have failed\")\n+        sync_blocks(self.nodes)\n+\n+    def run_test(self):\n+        self.nodes[0].generate(160) #block 160\n+\n+        self.pubkey = []\n+        p2sh_ids = [] # p2sh_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE embedded in p2sh\n+        wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n+        for i in xrange(3):\n+            newaddress = self.nodes[i].getnewaddress()\n+            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n+            self.nodes[i].addwitnessaddress(newaddress)\n+            self.nodes[i].addwitnessaddress(multiaddress)\n+            p2sh_ids.append([])\n+            wit_ids.append([])\n+            for v in xrange(2):\n+                p2sh_ids[i].append([])\n+                wit_ids[i].append([])\n+\n+        for i in xrange(5):\n+            for n in xrange(3):\n+                for v in xrange(2):\n+                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], False, Decimal(\"49.999\")))\n+                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], True, Decimal(\"49.999\")))\n+\n+        self.nodes[0].generate(1) #block 161\n+        sync_blocks(self.nodes)\n+\n+        # Make sure all nodes recognize the transactions as theirs\n+        assert_equal(self.nodes[0].getbalance(), 60*50 - 60*50 + 20*Decimal(\"49.999\") + 50)\n+        assert_equal(self.nodes[1].getbalance(), 20*Decimal(\"49.999\"))\n+        assert_equal(self.nodes[2].getbalance(), 20*Decimal(\"49.999\"))\n+\n+        self.nodes[0].generate(262) #block 423\n+        sync_blocks(self.nodes)\n+\n+        print \"Verify default node can't accept any witness format txs before fork\"\n+        # unsigned, no scriptsig\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False)\n+        # unsigned with redeem script\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False, addlength(witness_script(0, self.pubkey[0])))\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False, addlength(witness_script(1, self.pubkey[0])))\n+        # signed\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True)\n+        self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True)\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True)\n+\n+        print \"Verify witness txs are skipped for mining before the fork\"\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True) #block 424\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][0], True) #block 425\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][0], True) #block 426\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][0], True) #block 427\n+\n+        # TODO: An old node would see these txs without witnesses and be able to mine them\n+\n+        print \"Verify unsigned bare witness txs in versionbits-setting blocks are valid before the fork\"\n+        self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][1], False) #block 428\n+        self.success_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][1], False) #block 429\n+\n+        print \"Verify unsigned p2sh witness txs without a redeem script are invalid\"\n+        self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False)\n+        self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False)\n+\n+        print \"Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\"\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False, addlength(witness_script(0, self.pubkey[2]))) #block 430\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False, addlength(witness_script(1, self.pubkey[2]))) #block 431\n+\n+        print \"Verify previous witness txs skipped for mining can now be mined\"\n+        assert_equal(len(self.nodes[2].getrawmempool()), 4)\n+        block = self.nodes[2].generate(1) #block 432 (first block with new rules; 432 = 144 * 3)\n+        sync_blocks(self.nodes)\n+        assert_equal(len(self.nodes[2].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[2].getblock(block[0])[\"tx\"]), 5)\n+\n+        print \"Verify witness txs without witness data are invalid after the fork\"\n+        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][2], False)\n+        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][2], False)\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, addlength(witness_script(0, self.pubkey[2])))\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, addlength(witness_script(1, self.pubkey[2])))\n+\n+        print \"Verify default node can now use witness txs\"\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True) #block 432\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True) #block 433\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True) #block 434\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True) #block 435\n+\n+if __name__ == '__main__':\n+    SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWMzZDQ0NzNjZjAyOThlMWI3MjI0YWU4ZDc5NzdhNGM3ZDUwN2Fj",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-03T14:48:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-17T23:11:25Z"
      },
      "message": "Add transaction tests for segwit\n\n...with the four types of segwit payment, as well as all sighash combinaisons.",
      "tree": {
        "sha": "00697d9de947bdf72913f0dd841ecac42923150d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00697d9de947bdf72913f0dd841ecac42923150d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab215e49cc697564549366e35ae57ff205d2a46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab215e49cc697564549366e35ae57ff205d2a46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab215e49cc697564549366e35ae57ff205d2a46d"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 241,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3371a226dc65bc61cc1cbaccd3334f1400d95a94",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
        "patch": "@@ -255,5 +255,64 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n \n+[\"Unknown witness program version (with DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623ffffffffff1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"Unknown length for witness program v0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x15 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3fff\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff04b60300000000000001519e070000000000000151860b0000000000000100960000000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay (same index output value changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e80300000000000001516c070000000000000151b80b0000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay (input sequence changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000000000000000000000000000000000000000000000001000000000100000000010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay (third output value changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151540b00000000000001510002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with a push of 521 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x33198a9bfef674ebddb9ffaa52928017b8472791e54c609cb95f278ac6b1e349\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015102fdn+\n+[\"Witness with unknown version which push false on the stack should be invalid (even without DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x02 0x0000\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015101010100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness program should leave clean stack\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x2f04a3aa051f1f60d695f6c44c0c3d383973dfd446ace8962664a76bb10e31a8\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01000000000000000001510102515100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness v0 with a push of 2 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x02 0x0001\", 2000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015101040002000100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown witness version with non empty scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x02 0x0001\", 2000]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000151ffffffff010000000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Non witness Single|AnyoneCanPay hash input's position (permutation)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff0001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff02e9030000000000000151e803000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"P2WSH with a redeem representing a witness scriptPubKey should fail\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x34b6c399093e06cf9f0f7f660a1abcfe78fcf7b576f43993208edd9518a0ae9b\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0001045102010100000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "79166247ac9733d2249ba2a4bea50bca58fc7e74",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
        "patch": "@@ -317,5 +317,155 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n \"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n \n+[\"Valid P2WPKH (Private key of segwit tests is L5AQtV2HDm4xGsseLokK2VAT2EtYKcTm3c7HwqnJBFt9LdaQULsM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100cfb07164b36ba64c1b1e8c7720a56ad64d96f6ef332d3d37f9cb3c96477dc44502200a464cd7a9cf94cd70f66ce4f4f0625ef650052c7afcfe29d7d7e01830ff91ed012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2WSH\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3db\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100aa5d8aa40a90f23ce2c3d11bc845ca4a12acd99cbea37de6b9f6d86edebba8cb022022dedc2aa0a255f74d04c0b76ece2d7c691f9dd11a64a8ac49f62a99c3a05f9d01232103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2SH(P2WPKH)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xfe9c7dacc9fcfbf7e3b7d5ad06aa2b28c5a7b7e3 EQUAL\", 1000]],\n+\"01000000000101000100000000000000000000000000000000000000000000000000000000000000000000171600144c9c3dfac4207d5d8cb89df5722cb3d712385e3fffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100cfb07164b36ba64c1b1e8c7720a56ad64d96f6ef332d3d37f9cb3c96477dc44502200a464cd7a9cf94cd70f66ce4f4f0625ef650052c7afcfe29d7d7e01830ff91ed012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Valid P2SH(P2WSH)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x2135ab4f0981830311e35600eebc7376dce3a914 EQUAL\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000023220020ff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbffffffff01e8030000000000001976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac02483045022100aa5d8aa40a90f23ce2c3d11bc845ca4a12acd99cbea37de6b9f6d86edebba8cb022022dedc2aa0a255f74d04c0b76ece2d7c691f9dd11a64a8ac49f62a99c3a05f9d01232103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff05540b0000000000000151d0070000000000000151840300000000000001513c0f00000000000001512c010000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71000000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff0484030000000000000151d0070000000000000151540b0000000000000151c800000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash Single (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff04b60300000000000001519e070000000000000151860b00000000000001009600000000000000015100000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff04b60300000000000001519e070000000000000151860b0000000000000100960000000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash None (same signature, only sequences changed)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"01000000000103000100000000000000000000000000000000000000000000000000000000000000000000000200000000010000000000000000000000000000000000000000000000000000000000000100000000ffffffff000100000000000000000000000000000000000000000000000000000000000002000000000200000003e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3100],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"0x51\", 4100]],\n+\"0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with SigHash All|AnyoneCanPay (same signature as previous)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown witness program version  (without DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 2000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"0x51\", 3000]],\n+\"0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623ffffffffff1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness with a push of 520 bytes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x20 0x33198a9bfef674ebddb9ffaa52928017b8472791e54c609cb95f278ac6b1e349\", 1000]],\n+\"0100000000010100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015102fdn+\n+[\"Transaction mixing all SigHash, segwit and normal inputs\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 2, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1002],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 3, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1003],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 4, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1004],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 5, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1005],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 6, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1006],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 7, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1007],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 8, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1008],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 9, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1009],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 10, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1010],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 11, \"DUP HASH160 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f EQUALVERIFY CHECKSIG\", 1011]],\n+\"0100000000010c00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff0001000000000000000000000000000000000000000000000000000000000000020000006a473044022026c2e65b33fcd03b2a3b0f25030f0244bd23cc45ae4dec0f48ae62255b1998a00220463aa3982b718d593a6b9e0044513fd67a5009c2fdccc59992cffc2b167889f4012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000030000006a4730440220008bd8382911218dcb4c9f2e75bf5c5c3635f2f2df49b36994fde85b0be21a1a02205a539ef10fb4c778b522c1be852352ea06c67ab74200977c722b0bc68972575a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000040000006b483045022100d9436c32ff065127d71e1a20e319e4fe0a103ba0272743dbd8580be4659ab5d302203fd62571ee1fe790b182d078ecfd092a509eac112bea558d122974ef9cc012c7012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000050000006a47304402200e2c149b114ec546015c13b2b464bbcb0cdc5872e6775787527af6cbc4830b6c02207e9396c6979fb15a9a2b96ca08a633866eaf20dc0ff3c03e512c1d5a1654f148012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0001000000000000000000000000000000000000000000000000000000000000060000006b483045022100b20e70d897dc15420bccb5e0d3e208d27bdd676af109abbd3f88dbdb7721e6d6022005836e663173fbdfe069f54cde3c2decd3d0ea84378092a5d9d85ec8642e8a41012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff00010000000000000000000000000000000000000000000000000000000000000700000000ffffffff00010000000000000000000000000000000000000000000000000000000000000800000000ffffffff00010000000000000000000000000000000000000000000000000000000000000900000000ffffffff00010000000000000000000000000000000000000000000000000000000000000a00000000ffffffff00010000000000000000000000000000000000000000000000000000000000000b0000006a47304402206639c6e05e3b9d2675a7f3876286bdf7584fe2bbd15e0ce52dd4e02c0092cdc60220757d60b0a61fc95ada79d23746744c72bac1545a75ff6c2c7cdb6ae04e7e9592012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71ffffffff0ce8030000000000000151e9030000000000000151ea030000000000000151eb030000000000000151ec030000000000000151ed030000000000000151ee030000000000000151ef030000000000000151f0030000000000000151f1030000000000000151f2030000000000000151f30300000000000001510248304502210082219a54f61bf126bfc3fa068c6e33831222d1d7138c6faa9d33ca87fd4202d6022063f9902519624254d7c2c8ea7ba2d66ae975e4e229ae38043973ec707d5d4a83012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7102473044022017fb58502475848c1b09f162cb1688d0920ff7f142bed0ef904da2ccc88b168f02201798afa61850c65e77889cbcd648a5703b487895517c88f85cdd18b021ee246a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000000247304402202830b7926e488da75782c81a54cd281720890d1af064629ebf2e31bf9f5435f30220089afaa8b455bbeb7d9b9c3fe1ed37d07685ade8455c76472cda424d93e4074a012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7102473044022026326fcdae9207b596c2b05921dbac11d81040c4d40378513670f19d9f4af893022034ecd7a282c0163b89aaa62c22ec202cef4736c58cd251649bad0d8139bcbf55012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71024730440220214978daeb2f38cd426ee6e2f44131a33d6b191af1c216247f1dd7d74c16d84a02205fdc05529b0bc0c430b4d5987264d9d075351c4f4484c16e91662e90a72aab24012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710247304402204a6e9f199dc9672cf2ff8094aaa784363be1eb62b679f7ff2df361124f1dca3302205eeb11f70fab5355c9c8ad1a0700ea355d315e334822fa182227e9815308ee8f012103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000\", \"P2SH,WITNESS\"],\n+\n+[\"Unknown version witness program with empty witness\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness SIGHASH_SINGLE with output out of bound\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x51\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x20 0x4d6c2a32c87821d68fc016fca70797abdb80df6cd84651d40a9300c6bad79e62\", 1000]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff01d00700000000000001510003483045022100e078de4e96a0e05dcdc0a414124dd8475782b5f3f0ed3f607919e9a5eeeb22bf02201de309b3a3109adb3de8074b3610d4cf454c49b61247a2779a0bcbf31c889333032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc711976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac00000000\", \"P2SH,WITNESS\"],\n+\n+[\"1 byte push should not be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x01 0x01\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"33 bytes push should not be considered a witness scriptPubKey\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"The witness version must use OP_1 to OP_16 only\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x01 0x10 0x02 0x0001\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"The witness program push must be canonical\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x4c02 0x0001\", 1000]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n+\n+[\"Witness Single|AnyoneCanPay does not hash input's position\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff02e8030000000000000151e90300000000000001510247304402206d59682663faab5e4cb733c562e22cdae59294895929ec38d7c016621ff90da0022063ef0af5f970afe8a45ea836e3509b8847ed39463253106ac17d19c437d3d56b832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710248304502210085001a820bfcbc9f9de0298af714493f8a37b3b354bfd21a7097c3e009f2018c022050a8b4dbc8155d4d04da2f5cdd575dcf8dd0108de8bec759bd897ea01ecb3af7832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Witness Single|AnyoneCanPay does not hash input's position (permutation)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x00 0x14 0x4c9c3dfac4207d5d8cb89df5722cb3d712385e3f\", 1001]],\n+\"0100000000010200010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff02e9030000000000000151e80300000000000001510248304502210085001a820bfcbc9f9de0298af714493f8a37b3b354bfd21a7097c3e009f2018c022050a8b4dbc8155d4d04da2f5cdd575dcf8dd0108de8bec759bd897ea01ecb3af7832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710247304402206d59682663faab5e4cb733c562e22cdae59294895929ec38d7c016621ff90da0022063ef0af5f970afe8a45ea836e3509b8847ed39463253106ac17d19c437d3d56b832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc7100000000\", \"P2SH,WITNESS\"],\n+\n+[\"Non witness Single|AnyoneCanPay hash input's position\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1000],\n+[\"0000000000000000000000000000000000000000000000000000000000000100\", 1, \"0x21 0x03596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71 CHECKSIG\", 1001]],\n+\"01000000020001000000000000000000000000000000000000000000000000000000000000000000004847304402202a0b4b1294d70540235ae033d78e64b4897ec859c7b6f1b2b1d8a02e1d46006702201445e756d2254b0f1dfda9ab8e1e1bc26df9668077403204f32d16a49a36eb6983ffffffff00010000000000000000000000000000000000000000000000000000000000000100000049483045022100acb96cfdbda6dc94b489fd06f2d720983b5f350e31ba906cdbd800773e80b21c02200d74ea5bdf114212b4bbe9ed82c36d2e369e302dff57cb60d01c428f0bd3daab83ffffffff02e8030000000000000151e903000000000000015100000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "a87074dc7fd356d21be037088304cdcad1949895",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
        "patch": "@@ -50,7 +50,9 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n     (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n     (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n-    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY);\n+    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n+    (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n+    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n \n unsigned int ParseScriptFlags(string strFlags)\n {\n@@ -113,6 +115,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -123,13 +126,17 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n                 UniValue vinput = input.get_array();\n-                if (vinput.size() != 3)\n+                if (vinput.size() < 3 || vinput.size() > 4)\n                 {\n                     fValid = false;\n                     break;\n                 }\n-\n-                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n+                if (vinput.size() >= 4)\n+                {\n+                    mapprevOutValues[outpoint] = vinput[3].get_int64();\n+                }\n             }\n             if (!fValid)\n             {\n@@ -138,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n             CTransaction tx;\n             stream >> tx;\n \n@@ -155,9 +162,13 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 }\n \n                 CAmount amount = 0;\n+                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n+                    amount = mapprevOutValues[tx.vin[i].prevout];\n+                }\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n+                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -189,6 +200,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n+            map<COutPoint, int64_t> mapprevOutValues;\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n@@ -199,13 +211,17 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n                 UniValue vinput = input.get_array();\n-                if (vinput.size() != 3)\n+                if (vinput.size() < 3 || vinput.size() > 4)\n                 {\n                     fValid = false;\n                     break;\n                 }\n-\n-                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                COutPoint outpoint(uint256S(vinput[0].get_str()), vinput[1].get_int());\n+                mapprevOutScriptPubKeys[outpoint] = ParseScript(vinput[2].get_str());\n+                if (vinput.size() >= 4)\n+                {\n+                    mapprevOutValues[outpoint] = vinput[3].get_int64();\n+                }\n             }\n             if (!fValid)\n             {\n@@ -214,7 +230,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             string transaction = test[1].get_str();\n-            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n+            CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION  | SERIALIZE_TRANSACTION_WITNESS);\n             CTransaction tx;\n             stream >> tx;\n \n@@ -231,8 +247,12 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 CAmount amount = 0;\n+                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n+                    amount = mapprevOutValues[tx.vin[i].prevout];\n+                }\n+                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n+                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -422,7 +442,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n     scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n     scriptPubkey1L << ToByteVector(pubkey1L) << OP_CHECKSIG;\n-    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG; \n+    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG;\n     std::vector<CPubKey> oneandthree;\n     oneandthree.push_back(pubkey1);\n     oneandthree.push_back(pubkey3);"
      }
    ]
  },
  {
    "sha": "ed9c2f877e2509131937289f52fae790b3354d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDljMmY4NzdlMjUwOTEzMTkzNzI4OWY1MmZhZTc5MGIzMzU0ZDg4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-04T14:01:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-17T23:11:25Z"
      },
      "message": "Add segwit support to script_tests",
      "tree": {
        "sha": "1a2c121eaf5f60c009140717faedf24fbfb030f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a2c121eaf5f60c009140717faedf24fbfb030f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed9c2f877e2509131937289f52fae790b3354d88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9c2f877e2509131937289f52fae790b3354d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed9c2f877e2509131937289f52fae790b3354d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9c2f877e2509131937289f52fae790b3354d88/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec3d4473cf0298e1b7224ae8d7977a4c7d507ac"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 42,
      "deletions": 19
    },
    "files": [
      {
        "sha": "eea12bca4cd28af2cd6e640cc3f17191f7353023",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed9c2f877e2509131937289f52fae790b3354d88/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed9c2f877e2509131937289f52fae790b3354d88/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=ed9c2f877e2509131937289f52fae790b3354d88",
        "patch": "@@ -1,5 +1,5 @@\n [\n-[\"Format is: [scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n+[\"Format is: [[wit...]?, scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n [\"It is evaluated as if there was a crediting coinbase transaction with two 0\"],\n [\"pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\"],\n [\"followed by a spending transaction which spends this output as only input (and\"],\n@@ -1251,6 +1251,12 @@\n [\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n \n+[\"Some basic segwit checks\"],\n+[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"EVAL_FALSE\", \"Invalid witness script\"],\n+[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n+[[\"00\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n+[[\"51\"], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\","
      },
      {
        "sha": "e4961b506b63a46a0c0384d093a91dae622f4f46",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 18,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed9c2f877e2509131937289f52fae790b3354d88/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed9c2f877e2509131937289f52fae790b3354d88/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ed9c2f877e2509131937289f52fae790b3354d88",
        "patch": "@@ -88,7 +88,14 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_SIG_NULLDUMMY, \"SIG_NULLDUMMY\"},\n     {SCRIPT_ERR_PUBKEYTYPE, \"PUBKEYTYPE\"},\n     {SCRIPT_ERR_CLEANSTACK, \"CLEANSTACK\"},\n-    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"}\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"},\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM, \"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH, \"WITNESS_PROGRAM_WRONG_LENGTH\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY, \"WITNESS_PROGRAM_WITNESS_EMPTY\"},\n+    {SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH, \"WITNESS_PROGRAM_MISMATCH\"},\n+    {SCRIPT_ERR_WITNESS_MALLEATED, \"WITNESS_MALLEATED\"},\n+    {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n+    {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)\n@@ -127,13 +134,15 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)\n {\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n     txSpend.nLockTime = 0;\n     txSpend.vin.resize(1);\n     txSpend.vout.resize(1);\n+    txSpend.wit.vtxinwit.resize(1);\n+    txSpend.wit.vtxinwit[0].scriptWitness = scriptWitness;\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n@@ -144,7 +153,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n     if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n@@ -153,12 +162,12 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n     }\n     ScriptError err;\n     CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n         BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n@@ -280,7 +289,7 @@ class TestBuilder\n         } else {\n             creditTx = BuildCreditingTransaction(redeemScript);\n         }\n-        spendTx = BuildSpendingTransaction(CScript(), creditTx);\n+        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n     }\n \n     TestBuilder& ScriptError(ScriptError_t err)\n@@ -363,7 +372,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, comment, scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, CScriptWitness(), flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -703,29 +712,37 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n {\n     // Read tests from test/data/script_tests.json\n     // Format is an array of arrays\n-    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n+    // Inner arrays are [ [\"wit\"...]?, \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n     UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 4) // Allow size > 3; extra stuff ignored (useful for comments)\n+        CScriptWitness witness;\n+        unsigned int pos = 0;\n+        if (test.size() > 0 && test[pos].isArray()) {\n+            for (unsigned int i = 0; i < test[pos].size(); i++) {\n+                witness.stack.push_back(ParseHex(test[pos][i].get_str()));\n+            }\n+            pos++;\n+        }\n+        if (test.size() < 4 + pos) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n             }\n             continue;\n         }\n-        string scriptSigString = test[0].get_str();\n+        string scriptSigString = test[pos++].get_str();\n         CScript scriptSig = ParseScript(scriptSigString);\n-        string scriptPubKeyString = test[1].get_str();\n+        string scriptPubKeyString = test[pos++].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n-        unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        int scriptError = ParseScriptError(test[3].get_str());\n+        unsigned int scriptflags = ParseScriptFlags(test[pos++].get_str());\n+        int scriptError = ParseScriptError(test[pos++].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, scriptError);\n+        DoTest(scriptPubKey, scriptSig, witness, scriptflags, strTest, scriptError);\n     }\n }\n \n@@ -803,7 +820,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     scriptPubKey12 << OP_1 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n-    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n+    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n     BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n@@ -834,7 +851,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     scriptPubKey23 << OP_2 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << ToByteVector(key3.GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n-    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n+    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom23);\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n@@ -907,7 +924,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     }\n \n     CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n-    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), txFrom);\n+    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n "
      }
    ]
  },
  {
    "sha": "240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDBjYzlhYTdiNGNmYTljMDRkMzQzN2IyZWVhNzFjZjU3ZWUwMTlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T11:37:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-17T23:11:25Z"
      },
      "message": "Autogeneration support for witness in script_tests",
      "tree": {
        "sha": "8e1fc4dad6dc5cff1b005cab2892d118f3b1df7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e1fc4dad6dc5cff1b005cab2892d118f3b1df7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed9c2f877e2509131937289f52fae790b3354d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9c2f877e2509131937289f52fae790b3354d88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed9c2f877e2509131937289f52fae790b3354d88"
      }
    ],
    "stats": {
      "total": 235,
      "additions": 226,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e94fec17ed43b90601d23a0e8e3be3e283093bb0",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
        "patch": "@@ -1825,6 +1825,138 @@\n     \"OK\",\n     \"P2SH with CLEANSTACK\"\n ],\n+[\n+    [\n+        \"3044022039105b995a5f448639a997a5c90fda06f50b49df30c3bdb6663217bf79323db002206fecd54269dec569fcc517178880eb58bb40f381a282bb75766ff3637d5f4b4301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2WSH\"\n+],\n+[\n+    [\n+        \"304402201a96950593cb0af32d080b0f193517f4559241a8ebd1e95e414533ad64a3f423022047f4f6d3095c23235bdff3aeff480d0529c027a3f093cb265b7cbf148553b85101\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2WPKH\"\n+],\n+[\n+    [\n+        \"3044022061fc1a144e221ec77a58a4281936eb6a1b715b9349e446e74d106ec26c8633ba022008064a0d112e8ad514440fcdfaa1006e48305d6844f50a65873fb4b2cf9c035f01\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\"\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH)\"\n+],\n+[\n+    [\n+        \"3044022014e69768e174972f21d32d93002ca6fc26133cb9e819ceef7efb970798bde7b4022078b86849dbbec692ec9355aa2a763fce7ea11bf72fdd8ea5ea8083de6f8a77fe01\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH)\"\n+],\n+[\n+    [\n+        \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WSH with the wrong key\"\n+],\n+[\n+    [\n+        \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2WPKH with the wrong key\"\n+],\n+[\n+    [\n+        \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WSH) with the wrong key\"\n+],\n+[\n+    [\n+        \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"EVAL_FALSE\",\n+    \"Basic P2SH(P2WPKH) with the wrong key\"\n+],\n+[\n+    [\n+        \"304402202589f0512cb2408fb08ed9bd24f85eb3059744d9e4f2262d0b7f1338cff6e8b902206c0978f449693e0578c71bc543b11079fd0baae700ee5e9a6bee94db490af9fc01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"\",\n+    \"0 0x20 0xac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2WSH with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"304402206ef7fdb2986325d37c6eb1a8bb24aeb46dede112ed8fc76c7d7500b9b83c0d3d02201edc2322c794fe2d6b0bd73ed319e714aa9b86d8891961530d5c9b7156b60d4e01\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"\",\n+    \"0 0x14 0x7cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2WPKH with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"30440220069ea3581afaf8187f63feee1fd2bd1f9c0dc71ea7d6e8a8b07ee2ebcf824bf402201a4fdef4c532eae59223be1eda6a397fc835142d4ddc6c74f4aa85b766a5c16f01\",\n+        \"41048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26cafac\"\n+    ],\n+    \"0x22 0x0020ac8ebd9e52c17619a381fa4f71aebb696087c6ef17c960fd0587addad99c0610\",\n+    \"HASH160 0x14 0x61039a003883787c0d6ebc66d97fdabe8e31449d EQUAL\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH) with the wrong key but no WITNESS\"\n+],\n+[\n+    [\n+        \"304402204209e49457c2358f80d0256bc24535b8754c14d08840fc4be762d6f5a0aed80b02202eaf7d8fc8d62f60c67adcd99295528d0e491ae93c195cec5a67e7a09532a88001\",\n+        \"048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n+    ],\n+    \"0x16 0x00147cf9c846cd4882efec4bf07e44ebdad495c94f4b\",\n+    \"HASH160 0x14 0x4e0c2aed91315303fc6a1dc4c7bc21c88f75402e EQUAL\",\n+    \"P2SH\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "d66c9f122bd19e08ca10cd7df8e979aa84289240",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 9,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
        "patch": "@@ -253,11 +253,22 @@ struct KeyData\n     }\n };\n \n+enum WitnessMode {\n+    WITNESS_NONE,\n+    WITNESS_PKH,\n+    WITNESS_SH\n+};\n \n class TestBuilder\n {\n private:\n-    CScript scriptPubKey;\n+    //! Actually executed script\n+    CScript script;\n+    //! The P2SH redeemscript\n+    CScript redeemscript;\n+    //! The Witness embedded script\n+    CScript witscript;\n+    CScriptWitness scriptWitness;\n     CTransaction creditTx;\n     CMutableTransaction spendTx;\n     bool havePush;\n@@ -282,13 +293,25 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n+    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n     {\n+        CScript scriptPubKey = script;\n+        if (wm == WITNESS_PKH) {\n+            uint160 hash;\n+            CHash160().Write(&script[1], script.size() - 1).Finalize(hash.begin());\n+            script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(hash) << OP_EQUALVERIFY << OP_CHECKSIG;\n+            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+        } else if (wm == WITNESS_SH) {\n+            witscript = scriptPubKey;\n+            uint256 hash;\n+            CSHA256().Write(&witscript[0], witscript.size()).Finalize(hash.begin());\n+            scriptPubKey = CScript() << OP_0 << ToByteVector(hash);\n+        }\n         if (P2SH) {\n-            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n-        } else {\n-            creditTx = BuildCreditingTransaction(redeemScript);\n+            redeemscript = scriptPubKey;\n+            scriptPubKey = CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n         }\n+        creditTx = BuildCreditingTransaction(scriptPubKey);\n         spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n     }\n \n@@ -318,9 +341,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 0)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType, 0, 0);\n+        uint256 hash = SignatureHash(script, spendTx, 0, nHashType, 0, sigversion);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -336,6 +359,11 @@ class TestBuilder\n         return *this;\n     }\n \n+    TestBuilder& PushWitSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, int sigversion = 1)\n+    {\n+        return PushSig(key, nHashType, lenR, lenS, sigversion).AsWit();\n+    }\n+\n     TestBuilder& Push(const CPubKey& pubkey)\n     {\n         DoPush(std::vector<unsigned char>(pubkey.begin(), pubkey.end()));\n@@ -344,10 +372,16 @@ class TestBuilder\n \n     TestBuilder& PushRedeem()\n     {\n-        DoPush(std::vector<unsigned char>(scriptPubKey.begin(), scriptPubKey.end()));\n+        DoPush(std::vector<unsigned char>(redeemscript.begin(), redeemscript.end()));\n         return *this;\n     }\n \n+    TestBuilder& PushWitRedeem()\n+    {\n+        DoPush(std::vector<unsigned char>(witscript.begin(), witscript.end()));\n+        return AsWit();\n+    }\n+\n     TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)\n     {\n         assert(havePush);\n@@ -372,15 +406,30 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, CScriptWitness(), flags, comment, scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n \n+    TestBuilder& AsWit()\n+    {\n+        assert(havePush);\n+        scriptWitness.stack.push_back(push);\n+        havePush = false;\n+        return *this;\n+    }\n+\n     UniValue GetJSON()\n     {\n         DoPush();\n         UniValue array(UniValue::VARR);\n+        if (!scriptWitness.stack.empty()) {\n+            UniValue wit(UniValue::VARR);\n+            for (unsigned i = 0; i < scriptWitness.stack.size(); i++) {\n+                wit.push_back(HexStr(scriptWitness.stack[i]));\n+            }\n+            array.push_back(wit);\n+        }\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n@@ -676,6 +725,42 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n                                ).PushSig(keys.key0).PushRedeem());\n \n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2WSH with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2WPKH with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2SH(P2WPKH) with the wrong key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2WSH with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, false, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2WPKH with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, false, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_SH\n+                               ).PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1),\n+                                \"Basic P2SH(P2WPKH) with the wrong key but no WITNESS\", SCRIPT_VERIFY_P2SH, true, WITNESS_PKH\n+                               ).PushWitSig(keys.key0).Push(keys.pubkey1).AsWit().PushRedeem());\n \n     std::set<std::string> tests_set;\n "
      }
    ]
  },
  {
    "sha": "5bd6e9ede20d1a97823355b966a5d7a079e22650",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmQ2ZTllZGUyMGQxYTk3ODIzMzU1Yjk2NmE1ZDdhMDc5ZTIyNjUw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:02:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-17T23:11:25Z"
      },
      "message": "Update p2p test framework with segwit support\n\nmininode now supports witness transactions/blocks, blocktools\nhas a helper for adding witness commitments to blocks, and script\nhas a function to calculate hashes for signature under sigversion\n1, used by segwit.",
      "tree": {
        "sha": "3f6c9499ab4d278b19f35b42f5404f1f95f9d79e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f6c9499ab4d278b19f35b42f5404f1f95f9d79e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bd6e9ede20d1a97823355b966a5d7a079e22650",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd6e9ede20d1a97823355b966a5d7a079e22650",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd6e9ede20d1a97823355b966a5d7a079e22650",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd6e9ede20d1a97823355b966a5d7a079e22650/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/240cc9aa7b4cfa9c04d3437b2eea71cf57ee019c"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 257,
      "deletions": 22
    },
    "files": [
      {
        "sha": "c466dc89101e4ad9c3c435e01bbd6d97f8037d0d",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=5bd6e9ede20d1a97823355b966a5d7a079e22650",
        "patch": "@@ -5,7 +5,7 @@\n #\n \n from mininode import *\n-from script import CScript, OP_TRUE, OP_CHECKSIG\n+from script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -22,6 +22,29 @@ def create_block(hashprev, coinbase, nTime=None):\n     block.calc_sha256()\n     return block\n \n+# From BIP141\n+WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n+\n+# According to BIP141, nVersion=5 blocks must commit to the\n+# hash of all in-block transactions including witness.\n+def add_witness_commitment(block, nonce=0L):\n+    # First calculate the merkle root of the block's\n+    # transactions, with witnesses.\n+    witness_nonce = nonce\n+    witness_root = block.calc_witness_merkle_root()\n+    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n+    # witness_nonce should go to coinbase witness.\n+    block.vtx[0].wit.vtxinwit = [CTxinWitness()]\n+    block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(witness_nonce)]\n+\n+    # witness commitment is the last OP_RETURN output in coinbase\n+    output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n+    block.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, output_data])))\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    block.rehash()\n+\n+\n def serialize_script_num(value):\n     r = bytearray(0)\n     if value == 0:"
      },
      {
        "sha": "98f6f163d6e160dbe0e1b8f2486acaf64cc52a1e",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 182,
        "deletions": 20,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5bd6e9ede20d1a97823355b966a5d7a079e22650",
        "patch": "@@ -38,6 +38,11 @@\n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n \n+NODE_NETWORK = (1 << 0)\n+NODE_GETUTXO = (1 << 1)\n+NODE_BLOOM = (1 << 2)\n+NODE_WITNESS = (1 << 3)\n+\n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when \n # using select)\n@@ -127,7 +132,10 @@ def deser_vector(f, c):\n     return r\n \n \n-def ser_vector(l):\n+# ser_function_name: Allow for an alternate serialization function on the\n+# entries in the vector (we use this for serializing the vector of transactions\n+# for a witness block).\n+def ser_vector(l, ser_function_name=None):\n     r = \"\"\n     if len(l) < 253:\n         r = chr(len(l))\n@@ -138,7 +146,10 @@ def ser_vector(l):\n     else:\n         r = chr(255) + struct.pack(\"<Q\", len(l))\n     for i in l:\n-        r += i.serialize()\n+        if ser_function_name:\n+            r += getattr(i, ser_function_name)()\n+        else:\n+            r += i.serialize()\n     return r\n \n \n@@ -267,12 +278,16 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n+MSG_WITNESS_FLAG = 1<<30\n \n class CInv(object):\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n-        2: \"Block\"}\n+        2: \"Block\",\n+        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\"\n+    }\n \n     def __init__(self, t=0, h=0L):\n         self.type = t\n@@ -381,12 +396,73 @@ def __repr__(self):\n                binascii.hexlify(self.scriptPubKey))\n \n \n+class CScriptWitness(object):\n+    def __init__(self):\n+        # stack is a vector of strings\n+        self.stack = []\n+\n+    def __repr__(self):\n+        return \"CScriptWitness(%s)\" % \\\n+               (\",\".join([binascii.hexlify(x) for x in self.stack]))\n+\n+    def is_null(self):\n+        if self.stack:\n+            return False\n+        return True\n+\n+\n+class CTxinWitness(object):\n+    def __init__(self):\n+        self.scriptWitness = CScriptWitness()\n+\n+    def deserialize(self, f):\n+        self.scriptWitness.stack = deser_string_vector(f)\n+\n+    def serialize(self):\n+        return ser_string_vector(self.scriptWitness.stack)\n+\n+    def __repr__(self):\n+        return repr(self.scriptWitness)\n+\n+    def is_null(self):\n+        return self.scriptWitness.is_null()\n+\n+\n+class CTxWitness(object):\n+    def __init__(self):\n+        self.vtxinwit = []\n+\n+    def deserialize(self, f):\n+        for i in xrange(len(self.vtxinwit)):\n+            self.vtxinwit[i].deserialize(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        # This is different than the usual vector serialization --\n+        # we omit the length of the vector, which is required to be\n+        # the same length as the transaction's vin vector.\n+        for x in self.vtxinwit:\n+            r += x.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxWitness(%s)\" % \\\n+               (';'.join([repr(x) for x in self.vtxinwit]))\n+\n+    def is_null(self):\n+        for x in self.vtxinwit:\n+            if not x.is_null():\n+                return False\n+        return True\n+\n+\n class CTransaction(object):\n     def __init__(self, tx=None):\n         if tx is None:\n             self.nVersion = 1\n             self.vin = []\n             self.vout = []\n+            self.wit = CTxWitness()\n             self.nLockTime = 0\n             self.sha256 = None\n             self.hash = None\n@@ -395,33 +471,82 @@ def __init__(self, tx=None):\n             self.vin = copy.deepcopy(tx.vin)\n             self.vout = copy.deepcopy(tx.vout)\n             self.nLockTime = tx.nLockTime\n-            self.sha256 = None\n-            self.hash = None\n+            self.sha256 = tx.sha256\n+            self.hash = tx.hash\n+            self.wit = copy.deepcopy(tx.wit)\n \n     def deserialize(self, f):\n         self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n         self.vin = deser_vector(f, CTxIn)\n-        self.vout = deser_vector(f, CTxOut)\n+        flags = 0\n+        if len(self.vin) == 0:\n+            flags = struct.unpack(\"<B\", f.read(1))[0]\n+            # Not sure why flags can't be zero, but this\n+            # matches the implementation in bitcoind\n+            if (flags != 0):\n+                self.vin = deser_vector(f, CTxIn)\n+                self.vout = deser_vector(f, CTxOut)\n+        else:\n+            self.vout = deser_vector(f, CTxOut)\n+        if flags != 0:\n+            self.wit.vtxinwit = [CTxinWitness()]*len(self.vin)\n+            self.wit.deserialize(f)\n         self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n         self.sha256 = None\n         self.hash = None\n \n-    def serialize(self):\n+    def serialize_without_witness(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    # Only serialize with witness when explicitly called for\n+    def serialize_with_witness(self):\n+        flags = 0\n+        if not self.wit.is_null():\n+            flags |= 1\n         r = \"\"\n         r += struct.pack(\"<i\", self.nVersion)\n+        if flags:\n+            dummy = []\n+            r += ser_vector(dummy)\n+            r += struct.pack(\"<B\", flags)\n         r += ser_vector(self.vin)\n         r += ser_vector(self.vout)\n+        if flags & 1:\n+            if (len(self.wit.vtxinwit) != len(self.vin)):\n+                # vtxinwit must have the same length as vin\n+                self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n+                for i in xrange(len(self.wit.vtxinwit), len(self.vin)):\n+                    self.wit.vtxinwit.append(CTxinWitness())\n+            r += self.wit.serialize()\n         r += struct.pack(\"<I\", self.nLockTime)\n         return r\n \n+    # Regular serialization is without witness -- must explicitly\n+    # call serialize_with_witness to include witness data.\n+    def serialize(self):\n+        return self.serialize_without_witness()\n+\n+    # Recalculate the txid (transaction hash without witness)\n     def rehash(self):\n         self.sha256 = None\n         self.calc_sha256()\n \n-    def calc_sha256(self):\n+    # We will only cache the serialization without witness in\n+    # self.sha256 and self.hash -- those are expected to be the txid.\n+    def calc_sha256(self, with_witness=False):\n+        if with_witness:\n+            # Don't cache the result, just return it\n+            return uint256_from_str(hash256(self.serialize_with_witness()))\n+\n         if self.sha256 is None:\n-            self.sha256 = uint256_from_str(hash256(self.serialize()))\n+            self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n         self.hash = hash256(self.serialize())[::-1].encode('hex_codec')\n+        return self.sha256\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -512,17 +637,17 @@ def deserialize(self, f):\n         super(CBlock, self).deserialize(f)\n         self.vtx = deser_vector(f, CTransaction)\n \n-    def serialize(self):\n+    def serialize(self, with_witness=False):\n         r = \"\"\n         r += super(CBlock, self).serialize()\n-        r += ser_vector(self.vtx)\n+        if with_witness:\n+            r += ser_vector(self.vtx, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.vtx)\n         return r\n \n-    def calc_merkle_root(self):\n-        hashes = []\n-        for tx in self.vtx:\n-            tx.calc_sha256()\n-            hashes.append(ser_uint256(tx.sha256))\n+    # Calculate the merkle root given a vector of transaction hashes\n+    def get_merkle_root(self, hashes):\n         while len(hashes) > 1:\n             newhashes = []\n             for i in xrange(0, len(hashes), 2):\n@@ -531,6 +656,24 @@ def calc_merkle_root(self):\n             hashes = newhashes\n         return uint256_from_str(hashes[0])\n \n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        return self.get_merkle_root(hashes)\n+\n+    def calc_witness_merkle_root(self):\n+        # For witness root purposes, the hash of the\n+        # coinbase, with witness, is defined to be 0...0\n+        hashes = [ser_uint256(0)]\n+\n+        for tx in self.vtx[1:]:\n+            # Calculate the hashes with witness data\n+            hashes.append(ser_uint256(tx.calc_sha256(True)))\n+\n+        return self.get_merkle_root(hashes)\n+\n     def is_valid(self):\n         self.calc_sha256()\n         target = uint256_from_compact(self.nBits)\n@@ -806,11 +949,16 @@ def deserialize(self, f):\n         self.tx.deserialize(f)\n \n     def serialize(self):\n-        return self.tx.serialize()\n+        return self.tx.serialize_without_witness()\n \n     def __repr__(self):\n         return \"msg_tx(tx=%s)\" % (repr(self.tx))\n \n+class msg_witness_tx(msg_tx):\n+\n+    def serialize(self):\n+        return self.tx.serialize_with_witness()\n+\n \n class msg_block(object):\n     command = \"block\"\n@@ -830,6 +978,12 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n \n+class msg_witness_block(msg_block):\n+\n+    def serialize(self):\n+        r = self.block.serialize(with_witness=True)\n+        return r\n+\n \n class msg_getaddr(object):\n     command = \"getaddr\"\n@@ -929,6 +1083,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendheaders()\"\n \n+\n # getheaders message has\n # number of entries\n # vector of hashes\n@@ -1016,6 +1171,8 @@ def __init__(self):\n         # tests; it causes message delivery to sleep for the specified time\n         # before acquiring the global lock and delivering the next message.\n         self.deliver_sleep_time = None\n+        # Remember the services our peer has advertised\n+        self.peer_services = None\n \n     def set_deliver_sleep_time(self, value):\n         with mininode_lock:\n@@ -1053,6 +1210,7 @@ def on_version(self, conn, message):\n         conn.ver_send = min(MY_VERSION, message.nVersion)\n         if message.nVersion < 209:\n             conn.ver_recv = conn.ver_send\n+        conn.nServices = message.nServices\n \n     def on_verack(self, conn, message):\n         conn.ver_recv = conn.ver_send\n@@ -1082,6 +1240,7 @@ def on_reject(self, conn, message): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n+    def on_sendheaders(self, conn, message): pass\n \n \n # The actual NodeConn class\n@@ -1103,15 +1262,17 @@ class NodeConn(asyncore.dispatcher):\n         \"headers\": msg_headers,\n         \"getheaders\": msg_getheaders,\n         \"reject\": msg_reject,\n-        \"mempool\": msg_mempool\n+        \"mempool\": msg_mempool,\n+        \"sendheaders\": msg_sendheaders,\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": \"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+        \"segnet\": \"\\x2e\\x96\\xea\\xca\"     # segnet\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1126,6 +1287,7 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         self.network = net\n         self.cb = callback\n         self.disconnect = False\n+        self.nServices = 0\n \n         # stuff version msg into sendbuf\n         vt = msg_version()"
      },
      {
        "sha": "f24634b5ae5086474dfa788ab2e5300cf2475f7e",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd6e9ede20d1a97823355b966a5d7a079e22650/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=5bd6e9ede20d1a97823355b966a5d7a079e22650",
        "patch": "@@ -14,8 +14,9 @@\n \n from __future__ import absolute_import, division, print_function, unicode_literals\n \n-from .mininode import CTransaction, CTxOut, hash256\n+from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n+import hashlib\n \n import sys\n bchr = chr\n@@ -35,6 +36,10 @@\n \n OPCODE_NAMES = {}\n \n+def hash160(s):\n+    return hashlib.new('ripemd160', sha256(s)).digest()\n+\n+\n _opcode_instances = []\n class CScriptOp(int):\n     \"\"\"A single script opcode\"\"\"\n@@ -894,3 +899,48 @@ def SignatureHash(script, txTo, inIdx, hashtype):\n     hash = hash256(s)\n \n     return (hash, None)\n+\n+# TODO: Allow cached hashPrevouts/hashSequence/hashOutputs to be provided.\n+# Performance optimization probably not necessary for python tests, however.\n+# Note that this corresponds to sigversion == 1 in EvalScript, which is used\n+# for version 0 witnesses.\n+def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):\n+\n+    hashPrevouts = 0L\n+    hashSequence = 0L\n+    hashOutputs = 0L\n+\n+    if not (hashtype & SIGHASH_ANYONECANPAY):\n+        serialize_prevouts = str()\n+        for i in txTo.vin:\n+            serialize_prevouts += i.prevout.serialize()\n+        hashPrevouts = uint256_from_str(hash256(serialize_prevouts))\n+\n+    if (not (hashtype & SIGHASH_ANYONECANPAY) and (hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n+        serialize_sequence = str()\n+        for i in txTo.vin:\n+            serialize_sequence += struct.pack(\"<I\", i.nSequence)\n+        hashSequence = uint256_from_str(hash256(serialize_sequence))\n+\n+    if ((hashtype & 0x1f) != SIGHASH_SINGLE and (hashtype & 0x1f) != SIGHASH_NONE):\n+        serialize_outputs = str()\n+        for o in txTo.vout:\n+            serialize_outputs += o.serialize()\n+        hashOutputs = uint256_from_str(hash256(serialize_outputs))\n+    elif ((hashtype & 0x1f) == SIGHASH_SINGLE and inIdx < len(txTo.vout)):\n+        serialize_outputs = txTo.vout[inIdx].serialize()\n+        hashOutputs = uint256_from_str(hash256(serialize_outputs))\n+\n+    ss = str()\n+    ss += struct.pack(\"<i\", txTo.nVersion)\n+    ss += ser_uint256(hashPrevouts)\n+    ss += ser_uint256(hashSequence)\n+    ss += txTo.vin[inIdx].prevout.serialize()\n+    ss += ser_string(script)\n+    ss += struct.pack(\"<q\", amount)\n+    ss += struct.pack(\"<I\", txTo.vin[inIdx].nSequence)\n+    ss += ser_uint256(hashOutputs)\n+    ss += struct.pack(\"<i\", txTo.nLockTime)\n+    ss += struct.pack(\"<I\", hashtype)\n+\n+    return hash256(ss)"
      }
    ]
  },
  {
    "sha": "fb4873ead5ab1c9eea9e93f50d164b417e080488",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjQ4NzNlYWQ1YWIxYzllZWE5ZTkzZjUwZDE2NGI0MTdlMDgwNDg4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:03:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-17T23:11:25Z"
      },
      "message": "P2P test for segwit",
      "tree": {
        "sha": "c9783e892afbd7094e03b3fef36c1182a74d31bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9783e892afbd7094e03b3fef36c1182a74d31bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4873ead5ab1c9eea9e93f50d164b417e080488",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4873ead5ab1c9eea9e93f50d164b417e080488",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4873ead5ab1c9eea9e93f50d164b417e080488",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4873ead5ab1c9eea9e93f50d164b417e080488/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bd6e9ede20d1a97823355b966a5d7a079e22650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd6e9ede20d1a97823355b966a5d7a079e22650",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd6e9ede20d1a97823355b966a5d7a079e22650"
      }
    ],
    "stats": {
      "total": 1576,
      "additions": 1576,
      "deletions": 0
    },
    "files": [
      {
        "sha": "863ad7109d7d5d4d986ed4cf7e4ae2836c3640ee",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "added",
        "additions": 1576,
        "deletions": 0,
        "changes": 1576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4873ead5ab1c9eea9e93f50d164b417e080488/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4873ead5ab1c9eea9e93f50d164b417e080488/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=fb4873ead5ab1c9eea9e93f50d164b417e080488",
        "patch": "@@ -0,0 +1,1576 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0L):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print \"\\tVerifying NODE_WITNESS service bit\"\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print \"\\tTesting non-witness transaction\"\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), \"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print \"\\tTesting behavior of unnecessary witnesses\"\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print \"\\tTesting witness commitments\"\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28L)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1L)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0L)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print \"\\tTesting witness block malleability\"\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append('a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(binascii.hexlify(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(binascii.hexlify(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1L) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print \"\\tTesting witness block size limit\"\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, \"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in xrange(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in xrange(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), \"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in xrange(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = ['a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = 'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1L)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(binascii.hexlify(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0L)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(binascii.hexlify(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(binascii.hexlify(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print \"\\tTesting extra witness data in tx\"\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), \"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = \"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print \"\\tTesting maximum witness push size\"\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ 'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = 'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print \"\\tTesting maximum witness program length\"\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript(['a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript(['a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = ['a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print \"\\tTesting witness input length\"\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in xrange(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = \"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in xrange(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in xrange(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = ['a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = ['a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = ['a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print \"\\tTesting relay of witness transactions\"\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print \"Error: duplicate tx getdata!\"\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.\n+    def test_tx_relay_after_segwit_activation(self):\n+        print \"\\tTesting relay of witness transactions\"\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected because we can't use a witness\n+        # when spending a non-witness output.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that unnecessary witnesses are rejected.\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # Verify that removing the witness succeeds.\n+        # Re-announcing won't result in a getdata for ~2.5 minutes, so just\n+        # deliver the modified transaction.\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Now try to add extra witness data to a valid witness tx.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), \"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n+        tx3.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+\n+        # Get rid of the extra witness, and verify acceptance.\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        # Also check that old_node gets a tx announcement, even though this is\n+        # a witness transaction.\n+        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+\n+        # Cleanup: mine the transactions and update utxo for next test\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n+    # This is true regardless of segwit activation.\n+    def test_block_relay(self, segwit_activated):\n+        print \"\\tTesting block relay\"\n+\n+        # test_node has set NODE_WITNESS, so all getdata requests should be for\n+        # witness blocks.\n+        # Test announcing a block via inv results in a getdata, and that\n+        # announcing a version 4 or random VB block with a header results in a getdata\n+\n+        block1 = self.build_next_block()\n+        block1.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block1, True)\n+\n+        block2 = self.build_next_block(nVersion=4)\n+        block2.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block2, True)\n+\n+        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3.solve()\n+        self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block3, True)\n+\n+        # Check that we can getdata for witness blocks or regular blocks,\n+        # and the right thing happens.\n+        if segwit_activated == False:\n+            # Before activation, we should be able to request old blocks with\n+            # or without witness, and they should be the same.\n+            chain_height = self.nodes[0].getblockcount()\n+            # Pick 10 random blocks on main chain, and verify that getdata's\n+            # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n+            all_heights = range(chain_height+1)\n+            random.shuffle(all_heights)\n+            all_heights = all_heights[0:10]\n+            for height in all_heights:\n+                block_hash = self.nodes[0].getblockhash(height)\n+                rpc_block = self.nodes[0].getblock(block_hash, False)\n+                block_hash = int(block_hash, 16)\n+                block = self.test_node.request_block(block_hash, 2)\n+                wit_block = self.test_node.request_block(block_hash, 2|MSG_WITNESS_FLAG)\n+                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), binascii.unhexlify(rpc_block))\n+        else:\n+            # After activation, witness blocks and non-witness blocks should\n+            # be different.  Verify rpc getblock() returns witness blocks, while\n+            # getdata respects the requested type.\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [])\n+            # This gives us a witness commitment.\n+            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n+            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            self.test_node.test_witness_block(block, accepted=True)\n+            # Now try to retrieve it...\n+            rpc_block = self.nodes[0].getblock(block.hash, False)\n+            non_wit_block = self.test_node.request_block(block.sha256, 2)\n+            wit_block = self.test_node.request_block(block.sha256, 2|MSG_WITNESS_FLAG)\n+            assert_equal(wit_block.serialize(True), binascii.unhexlify(rpc_block))\n+            assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n+            assert_equal(wit_block.serialize(True), block.serialize(True))\n+\n+\n+    # Verify that future segwit upgraded transactions are non-standard,\n+    # but valid in blocks. Can run this before and after segwit activation.\n+    def test_segwit_versions(self):\n+        print \"\\tTesting standardness/consensus for segwit versions (0-16)\"\n+        assert(len(self.utxo))\n+        NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n+        if (len(self.utxo) < NUM_TESTS):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+            split_value = (self.utxo[0].nValue - 4000) / NUM_TESTS\n+            for i in xrange(NUM_TESTS):\n+                tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n+            tx.rehash()\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [tx])\n+            self.test_node.test_witness_block(block, accepted=True)\n+            self.utxo.pop(0)\n+            for i in xrange(NUM_TESTS):\n+                self.utxo.append(UTXO(tx.sha256, i, split_value))\n+\n+        sync_blocks(self.nodes)\n+        temp_utxo = []\n+        tx = CTransaction()\n+        count = 0\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        for version in range(OP_1, OP_16+1) + [OP_0]:\n+            count += 1\n+            # First try to spend to a future version segwit scriptPubKey.\n+            scriptPubKey = CScript([CScriptOp(version), witness_hash])\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\")]\n+            tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n+            tx.rehash()\n+            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            self.utxo.pop(0)\n+            temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+        self.nodes[0].generate(1) # Mine all the transactions\n+        sync_blocks(self.nodes)\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Finally, verify that version 0 -> version 1 transactions\n+        # are non-standard\n+        scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), \"\")]\n+        tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        tx2.rehash()\n+        # Gets accepted to test_node, because standardness of outputs isn't\n+        # checked with fRequireStandard\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n+        temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        tx3 = CTransaction()\n+        total_value = 0\n+        for i in temp_utxo:\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx3.wit.vtxinwit.append(CTxinWitness())\n+            total_value += i.nValue\n+        tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n+        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.rehash()\n+        # Spending a higher version witness output is not allowed by policy,\n+        # even with fRequireStandard=false.\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        self.test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert(\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+\n+        # Building a block with the transaction must be valid, however.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2, tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+        # Add utxo to our list\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_premature_coinbase_witness_spend(self):\n+        print \"\\tTesting premature coinbase witness spend\"\n+        block = self.build_next_block()\n+        # Change the output of the block to be a witness output.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        block.vtx[0].vout[0].scriptPubKey = scriptPubKey\n+        # This next line will rehash the coinbase and update the merkle\n+        # root, and solve.\n+        self.update_witness_block_with_transactions(block, [])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        spend_tx = CTransaction()\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), \"\")]\n+        spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        spend_tx.rehash()\n+\n+        # Now test a premature spend.\n+        self.nodes[0].generate(98)\n+        sync_blocks(self.nodes)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=False)\n+\n+        # Advancing one more block should allow the spend.\n+        self.nodes[0].generate(1)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+\n+    def test_signature_version_1(self):\n+        print \"\\tTesting segwit signature hash version 1\"\n+        key = CECKey()\n+        key.set_secretbytes(\"9\")\n+        pubkey = CPubKey(key.get_pubkey())\n+\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First create a witness output for use in the tests.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+        # Mine this transaction in preparation for following tests.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+\n+        # Add signature for a P2PK witness program.\n+        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+            signature = key.sign(tx_hash) + chr(hashtype)\n+            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+            txTo.rehash()\n+\n+        # Test each hashtype\n+        prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+        for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n+            for hashtype in [SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE]:\n+                hashtype |= sigflag\n+                block = self.build_next_block()\n+                tx = CTransaction()\n+                tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+                tx.vout.append(CTxOut(prev_utxo.nValue - 1000, scriptPubKey))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                # Too-large input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Too-small input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue-1, key)\n+                block.vtx.pop() # remove last tx\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Now try correct value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n+                block.vtx.pop()\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=True)\n+\n+                prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+\n+        # Test combinations of signature hashes.\n+        # Split the utxo into a lot of outputs.\n+        # Randomly choose up to 10 to spend, sign with different hashtypes, and\n+        # output to a random number of outputs.  Repeat NUM_TESTS times.\n+        # Ensure that we've tested a situation where we use SIGHASH_SINGLE with\n+        # an input index > number of outputs.\n+        NUM_TESTS = 500\n+        temp_utxos = []\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), \"\"))\n+        split_value = prev_utxo.nValue // NUM_TESTS\n+        for i in xrange(NUM_TESTS):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n+        for i in xrange(NUM_TESTS):\n+            temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        block = self.build_next_block()\n+        used_sighash_single_out_of_bounds = False\n+        for i in xrange(NUM_TESTS):\n+            # Choose random number of inputs to use.\n+            num_inputs = random.randint(1, 10)\n+            # Create a slight bias for producing more utxos\n+            num_outputs = random.randint(1, 11)\n+            random.shuffle(temp_utxos)\n+            assert(len(temp_utxos) > num_inputs)\n+            tx = CTransaction()\n+            total_value = 0\n+            for i in xrange(num_inputs):\n+                tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), \"\"))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                total_value += temp_utxos[i].nValue\n+            split_value = total_value // num_outputs\n+            for i in xrange(num_outputs):\n+                tx.vout.append(CTxOut(split_value, scriptPubKey))\n+            for i in xrange(num_inputs):\n+                # Now try to sign each input, using a random hashtype.\n+                anyonecanpay = 0\n+                if random.randint(0, 1):\n+                    anyonecanpay = SIGHASH_ANYONECANPAY\n+                hashtype = random.randint(1, 3) | anyonecanpay\n+                sign_P2PK_witness_input(witness_program, tx, i, hashtype, temp_utxos[i].nValue, key)\n+                if (hashtype == SIGHASH_SINGLE and i >= num_outputs):\n+                    used_sighash_single_out_of_bounds = True\n+            tx.rehash()\n+            for i in xrange(num_outputs):\n+                temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+            temp_utxos = temp_utxos[num_inputs:]\n+\n+            block.vtx.append(tx)\n+\n+            # Test the block periodically, if we're close to maxblocksize\n+            if (get_virtual_size(block) > MAX_BLOCK_SIZE - 1000):\n+                self.update_witness_block_with_transactions(block, [])\n+                self.test_node.test_witness_block(block, accepted=True)\n+                block = self.build_next_block()\n+\n+        if (not used_sighash_single_out_of_bounds):\n+            print(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n+        # Test the transactions we've added to the block\n+        if (len(block.vtx) > 1):\n+            self.update_witness_block_with_transactions(block, [])\n+            self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now test witness version 0 P2PKH transactions\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), \"\"))\n+        tx.vout.append(CTxOut(temp_utxos[0].nValue, scriptPKH))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), \"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+\n+        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + chr(SIGHASH_ALL)\n+\n+        # Check that we can't have a scriptSig\n+        tx2.vin[0].scriptSig = CScript([signature, pubkey])\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Move the signature to the witness.\n+        block.vtx.pop()\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n+        tx2.vin[0].scriptSig = \"\"\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        temp_utxos.pop(0)\n+\n+        # Update self.utxos for later tests. Just spend everything in\n+        # temp_utxos to a corresponding entry in self.utxos\n+        tx = CTransaction()\n+        index = 0\n+        for i in temp_utxos:\n+            # Just spend to our usual anyone-can-spend output\n+            # Use SIGHASH_SINGLE|SIGHASH_ANYONECANPAY so we can build up\n+            # the signatures as we go.\n+            tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), \"\"))\n+            tx.vout.append(CTxOut(i.nValue, CScript([OP_TRUE])))\n+            tx.wit.vtxinwit.append(CTxinWitness())\n+            sign_P2PK_witness_input(witness_program, tx, index, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, i.nValue, key)\n+            index += 1\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        for i in xrange(len(tx.vout)):\n+            self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n+\n+\n+    # Test P2SH wrapped witness programs.\n+    def test_p2sh_witness(self, segwit_activated):\n+        print \"\\tTesting P2SH witness transactions\"\n+\n+        assert(len(self.utxo))\n+\n+        # Prepare the p2sh-wrapped witness output\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        p2wsh_pubkey = CScript([OP_0, witness_hash])\n+        p2sh_witness_hash = hash160(p2wsh_pubkey)\n+        scriptPubKey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([p2wsh_pubkey]) # a push of the redeem script\n+\n+        # Fund the P2SH output\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # Verify mempool acceptance and block validity\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True, with_witness=segwit_activated)\n+        sync_blocks(self.nodes)\n+\n+        # Now test attempts to spend the output.\n+        spend_tx = CTransaction()\n+        spend_tx.vin.append(CTxIn(COutPoint(tx.sha256, 0), scriptSig))\n+        spend_tx.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        spend_tx.rehash()\n+\n+        # This transaction should not be accepted into the mempool pre- or\n+        # post-segwit.  Mempool acceptance will use SCRIPT_VERIFY_WITNESS which\n+        # will require a witness to spend a witness program regardless of\n+        # segwit activation.  Note that older bitcoind's that are not\n+        # segwit-aware would also reject this for failing CLEANSTACK.\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Try to put the witness script in the scriptSig, should also fail.\n+        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, 'a'])\n+        spend_tx.rehash()\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Now put the witness script in the witness, should succeed after\n+        # segwit activates.\n+        spend_tx.vin[0].scriptSig = scriptSig\n+        spend_tx.rehash()\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ 'a', witness_program ]\n+\n+        # Verify mempool acceptance\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [spend_tx])\n+\n+        # If we're before activation, then sending this without witnesses\n+        # should be valid.  If we're after activation, then sending this with\n+        # witnesses should be valid.\n+        if segwit_activated:\n+            self.test_node.test_witness_block(block, accepted=True)\n+        else:\n+            self.test_node.test_witness_block(block, accepted=True, with_witness=False)\n+\n+        # Update self.utxo\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(spend_tx.sha256, 0, spend_tx.vout[0].nValue))\n+\n+    # Test the behavior of starting up a segwit-aware node after the softfork\n+    # has activated.  As segwit requires different block data than pre-segwit\n+    # nodes would have stored, this requires special handling.\n+    # To enable this test, pass --oldbinary=<path-to-pre-segwit-bitcoind> to\n+    # the test.\n+    def test_upgrade_after_activation(self, node, node_id):\n+        print \"\\tTesting software upgrade after softfork activation\"\n+\n+        assert(node_id != 0) # node0 is assumed to be a segwit-active bitcoind\n+\n+        # Make sure the nodes are all up\n+        sync_blocks(self.nodes)\n+\n+        # Restart with the new binary\n+        stop_node(node, node_id)\n+        self.nodes[node_id] = start_node(node_id, self.options.tmpdir, [\"-debug\"])\n+        connect_nodes(self.nodes[0], node_id)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Make sure that this peer thinks segwit has activated.\n+        assert(get_bip9_status(node, 'witness')['status'] == \"active\")\n+\n+        # Make sure this peers blocks match those of node0.\n+        height = node.getblockcount()\n+        while height >= 0:\n+            block_hash = node.getblockhash(height)\n+            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n+            assert_equal(self.nodes[0].getblock(block_hash), node.getblock(block_hash))\n+            height -= 1\n+\n+\n+    def test_witness_sigops(self):\n+        '''Ensure sigop counting is correct inside witnesses.'''\n+        print \"\\tTesting sigops limit\"\n+\n+        assert(len(self.utxo))\n+\n+        # Keep this under MAX_OPS_PER_SCRIPT (201)\n+        witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG]*5 + [OP_CHECKSIG]*193 + [OP_ENDIF])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        sigops_per_script = 20*5 + 193*1\n+        # We'll produce 2 extra outputs, one with a program that would take us\n+        # over max sig ops, and one with a program that would exactly reach max\n+        # sig ops\n+        outputs = (MAX_SIGOP_COST // sigops_per_script) + 2\n+        extra_sigops_available = MAX_SIGOP_COST % sigops_per_script\n+\n+        # We chose the number of checkmultisigs/checksigs to make this work:\n+        assert(extra_sigops_available < 100) # steer clear of MAX_OPS_PER_SCRIPT\n+\n+        # This script, when spent with the first\n+        # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n+        # would push us just over the block sigop limit.\n+        witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available + 1) + [OP_ENDIF])\n+        witness_hash_toomany = sha256(witness_program_toomany)\n+        scriptPubKey_toomany = CScript([OP_0, witness_hash_toomany])\n+\n+        # If we spend this script instead, we would exactly reach our sigop\n+        # limit (for witness sigops).\n+        witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available) + [OP_ENDIF])\n+        witness_hash_justright = sha256(witness_program_justright)\n+        scriptPubKey_justright = CScript([OP_0, witness_hash_justright])\n+\n+        # First split our available utxo into a bunch of outputs\n+        split_value = self.utxo[0].nValue // outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), \"\"))\n+        for i in xrange(outputs):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.vout[-2].scriptPubKey = scriptPubKey_toomany\n+        tx.vout[-1].scriptPubKey = scriptPubKey_justright\n+        tx.rehash()\n+\n+        block_1 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_1, [tx])\n+        self.test_node.test_witness_block(block_1, accepted=True)\n+\n+        tx2 = CTransaction()\n+        # If we try to spend the first n-1 outputs from tx, that should be\n+        # too many sigops.\n+        total_value = 0\n+        for i in xrange(outputs-1):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), \"\"))\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program ]\n+            total_value += tx.vout[i].nValue\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_toomany ] \n+        tx2.vout.append(CTxOut(total_value, CScript([OP_TRUE])))\n+        tx2.rehash()\n+\n+        block_2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_2, [tx2])\n+        self.test_node.test_witness_block(block_2, accepted=False)\n+\n+        # Try dropping the last input in tx2, and add an output that has\n+        # too many sigops (contributing to legacy sigop count).\n+        checksig_count = (extra_sigops_available // 4) + 1\n+        scriptPubKey_checksigs = CScript([OP_CHECKSIG]*checksig_count)\n+        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs));\n+        tx2.vin.pop()\n+        tx2.wit.vtxinwit.pop()\n+        tx2.vout[0].nValue -= tx.vout[-2].nValue\n+        tx2.rehash()\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx2])\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # If we drop the last checksig in this output, the tx should succeed.\n+        block_4 = self.build_next_block()\n+        tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG]*(checksig_count-1))\n+        tx2.rehash()\n+        self.update_witness_block_with_transactions(block_4, [tx2])\n+        self.test_node.test_witness_block(block_4, accepted=True)\n+\n+        # Reset the tip back down for the next test\n+        sync_blocks(self.nodes)\n+        for x in self.nodes:\n+            x.invalidateblock(block_4.hash)\n+\n+        # Try replacing the last input of tx2 to be spending the last\n+        # output of tx\n+        block_5 = self.build_next_block()\n+        tx2.vout.pop()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, outputs-1), \"\"))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n+        tx2.rehash()\n+        self.update_witness_block_with_transactions(block_5, [tx2])\n+        self.test_node.test_witness_block(block_5, accepted=True)\n+\n+        # TODO: test p2sh sigop counting\n+\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n+        self.old_node = TestNode()  # only NODE_NETWORK\n+        self.std_node = TestNode() # for testing node1 (fRequireStandard=true)\n+\n+        self.p2p_connections = [self.test_node, self.old_node]\n+\n+        self.connections = []\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.old_node, services=NODE_NETWORK))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], self.std_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.test_node.add_connection(self.connections[0])\n+        self.old_node.add_connection(self.connections[1])\n+        self.std_node.add_connection(self.connections[2])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Keep a place to store utxo's that can be used in later tests\n+        self.utxo = []\n+\n+        # Test logic begins here\n+        self.test_node.wait_for_verack()\n+\n+        print \"\\nStarting tests before segwit lock in:\"\n+\n+        self.test_witness_services() # Verifies NODE_WITNESS\n+        self.test_non_witness_transaction() # non-witness tx's are accepted\n+        self.test_unnecessary_witness_before_segwit_activation()\n+        self.test_block_relay(segwit_activated=False)\n+\n+        sync_blocks(self.nodes)\n+\n+        # At lockin, nothing should change.\n+        print \"\\nTesting behavior post lockin, pre-activation\"\n+        self.advance_to_segwit_lockin()\n+\n+        # Retest unnecessary witnesses\n+        self.test_unnecessary_witness_before_segwit_activation()\n+        self.test_witness_tx_relay_before_segwit_activation()\n+        self.test_block_relay(segwit_activated=False)\n+        self.test_p2sh_witness(segwit_activated=False)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Now activate segwit\n+        print \"\\nTesting behavior after segwit activation\"\n+        self.advance_to_segwit_active()\n+\n+        sync_blocks(self.nodes)\n+\n+        # Test P2SH witness handling again\n+        self.test_p2sh_witness(segwit_activated=True)\n+        self.test_witness_commitments()\n+        self.test_block_malleability()\n+        self.test_witness_block_size()\n+        self.test_submit_block()\n+        self.test_extra_witness_data()\n+        self.test_max_witness_push_length()\n+        self.test_max_witness_program_length()\n+        self.test_witness_input_length()\n+        self.test_block_relay(segwit_activated=True)\n+        self.test_tx_relay_after_segwit_activation()\n+        self.test_segwit_versions()\n+        self.test_premature_coinbase_witness_spend()\n+        self.test_signature_version_1()\n+        sync_blocks(self.nodes)\n+        if self.test_upgrade:\n+            self.test_upgrade_after_activation(self.nodes[2], 2)\n+        else:\n+            print \"\\tSkipping upgrade-after-activation test (use --oldbinary to enable)\"\n+        self.test_witness_sigops()\n+\n+\n+if __name__ == '__main__':\n+    SegWitTest().main()"
      }
    ]
  }
]