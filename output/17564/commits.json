[
  {
    "sha": "facbaf092f1ab298943206603cff6e6e3d30d452",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNiYWYwOTJmMWFiMjk4OTQzMjA2NjAzY2ZmNmU2ZTNkMzBkNDUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T20:36:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T18:45:49Z"
      },
      "message": "rpc: Use mempool from node context instead of global\n\nCurrently they are identical, but in the future we might want to turn\nthe mempool into a unique_ptr. Replacing the global with the mempool\npointer from the node context simplifies this step.",
      "tree": {
        "sha": "8028edb1dd96232ed91d01abb6b0b40a718141ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8028edb1dd96232ed91d01abb6b0b40a718141ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjsrwv/bsKW2afogFhOPuMTJWO6hMB+gzbNL6CNNJh9iAxA/ZzNG11N9sgUpYFJ\nKnqT86FPCcXctibK4ZpX7gBCuvh0/Ql21TnoP7fU6yBPWPd5E8wYZ/GnkUOnV9EF\nAHJUzyuHAm6utyq7THticLtGYICSmRJa+nO2T2/HfvXVzk7HWfXfrLsr4Dqd4L/f\nCI3Ou63B5CRHtYIWSxH2ld09Cd/Arp7ExFJuokLkgjP1ltAnXamCI9tMDfkav2ag\n4rnfZhlkWz4RUkPxE9qqyIjMCqKwrDYUYAWKJvQ7HgkItq/qSYFW/T0ZxzKoYXae\nOqgeAOAChpeYwx4ADKl8ivvKya/a+Pjc5Wp942kZrAckGuJ6nxyamhhpOSfJNK4U\nzQuhUtd49GEw6e4Iqlr4g6QBwCf+eKia7Xg/bvN+LQBZyqwuKwAOzMPow63pqs/X\ngeuHWemExwmUIWUQ21DVIb9vlss3w3GqYoL8dnD95HEez6mxJIM1MS1bKssEKusE\nQVQzh5B1\n=pI3U\n-----END PGP SIGNATURE-----",
        "payload": "tree 8028edb1dd96232ed91d01abb6b0b40a718141ff\nparent b983e7e1721fa68cc04c05b1249d5871d66debe5\nauthor MarcoFalke <falke.marco@gmail.com> 1574455003 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575571549 -0500\n\nrpc: Use mempool from node context instead of global\n\nCurrently they are identical, but in the future we might want to turn\nthe mempool into a unique_ptr. Replacing the global with the mempool\npointer from the node context simplifies this step.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facbaf092f1ab298943206603cff6e6e3d30d452",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "044a84dabf34d43fa74225733b66c790a36befca",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -528,7 +528,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(::mempool, fVerbose);\n+    return MempoolToJSON(EnsureMemPool(), fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n@@ -566,6 +566,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -591,7 +592,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -633,6 +634,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -658,7 +660,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -685,6 +687,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -694,7 +697,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     const CTxMemPoolEntry &e = *it;\n     UniValue info(UniValue::VOBJ);\n-    entryToJSON(::mempool, info, e);\n+    entryToJSON(mempool, info, e);\n     return info;\n }\n \n@@ -1070,6 +1073,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n \n     if (fMempool) {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1448,7 +1452,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    return MempoolInfoToJSON(::mempool);\n+    return MempoolInfoToJSON(EnsureMemPool());\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n@@ -1964,11 +1968,13 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (!::mempool.IsLoaded()) {\n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n+    if (!mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n     }\n \n-    if (!DumpMempool(::mempool)) {\n+    if (!DumpMempool(mempool)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Unable to dump mempool to disk\");\n     }\n "
      },
      {
        "sha": "bb78aaac64b9814579d3443894b3133d55f2f8ad",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -244,6 +244,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             }.Check(request);\n \n     LOCK(cs_main);\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n@@ -290,7 +291,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    mempool.PrioritiseTransaction(hash, nAmount);\n+    EnsureMemPool().PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -476,6 +477,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     if (!lpval.isNull())\n     {\n@@ -510,7 +512,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n-                    // without holding ::mempool.cs to avoid deadlocks\n+                    // without holding the mempool lock to avoid deadlocks\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += std::chrono::seconds(10);"
      },
      {
        "sha": "38332fa3429052a1bbea03137c8a2bf1d9f7eeee",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -636,6 +636,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n@@ -888,6 +889,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n         max_raw_tx_fee_rate = CFeeRate(AmountFromValue(request.params[1]));\n     }\n \n+    CTxMemPool& mempool = EnsureMemPool();\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -1506,6 +1508,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);"
      }
    ]
  },
  {
    "sha": "fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY2MGQ2NWQ3Y2M0MDFhZDViYmZkYzA3NmEwNzRkZTE5YTc5MzI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T21:24:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T19:22:05Z"
      },
      "message": "node: Use mempool from node context instead of global",
      "tree": {
        "sha": "e66d5323bd671bbfdec809b28775d8bf5d56ba8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e66d5323bd671bbfdec809b28775d8bf5d56ba8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgDtgv/e0FKG6Lc4rqqR+cJ9sCVjGyasle1lyquM4TAhlFf5GE91KWDuW8XplEx\nFMesARb6qYbNb5l6YVDuYSKRIMtIZVSKVnbdHzTb+D8DF6Tl/hR4Z1Sa3aTUmHiN\ny1zuO/0SAO3/K+V9CRAjvM7/9+a8In1ThtiXRdBoZ244YaDD8GliviVYpPDODtz5\nLx97jd72YgsvENbZHf8bYHebj42gP1VVs3xVglO5QSgMf5Iu/CIQ9B1VQDp96L2v\nkc/JF+ruVDARbbOS77zKpfEbZPtvtwWQLQywCNduoKK4a1i0a87oIguaK6+RxUBw\nhW/AvCKLBnWbQ03wAfJ4WkV7sUJ4woc2EB042MmmEb9ldsrffjF+05jH4oWwI0vO\niqQTXPpeG16HXCThJE4+ExKwofeJNpTiuty/eTY1JP9WOPOZ08UP9jQ5sT7/6W4U\nj76WkvlNQpT5Dx6F8vjeBTzHERZBBMxsyZ53f8wTLym5XhP2UhdIntLdgQZnmecv\nu2L2dM3I\n=D/F8\n-----END PGP SIGNATURE-----",
        "payload": "tree e66d5323bd671bbfdec809b28775d8bf5d56ba8f\nparent facbaf092f1ab298943206603cff6e6e3d30d452\nauthor MarcoFalke <falke.marco@gmail.com> 1574457878 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575573725 -0500\n\nnode: Use mempool from node context instead of global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facbaf092f1ab298943206603cff6e6e3d30d452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facbaf092f1ab298943206603cff6e6e3d30d452"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ac640aa35a7e80c4f0fd142a72ee74c7d9c50e94",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -263,7 +263,7 @@ class ChainImpl : public Chain\n         }\n         return true;\n     }\n-    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(coins); }\n+    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "24695c1afc2f71e3c8d7c987b908af826d3ee107",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -167,8 +167,8 @@ class NodeImpl : public Node\n     }\n     int64_t getTotalBytesRecv() override { return m_context.connman ? m_context.connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return m_context.connman ? m_context.connman->GetTotalBytesSent() : 0; }\n-    size_t getMempoolSize() override { return ::mempool.size(); }\n-    size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n+    size_t getMempoolSize() override { return m_context.mempool ? m_context.mempool->size() : 0; }\n+    size_t getMempoolDynamicUsage() override { return m_context.mempool ? m_context.mempool->DynamicMemoryUsage() : 0; }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n         LOCK(::cs_main);"
      },
      {
        "sha": "f4f86cdbe9667e598714b8ace3b1347eafb6b687",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -4,14 +4,16 @@\n \n #include <node/coin.h>\n \n+#include <node/context.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-void FindCoins(std::map<COutPoint, Coin>& coins)\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n-    LOCK2(cs_main, ::mempool.cs);\n+    assert(node.mempool);\n+    LOCK2(cs_main, node.mempool->cs);\n     CCoinsViewCache& chain_view = ::ChainstateActive().CoinsTip();\n-    CCoinsViewMemPool mempool_view(&chain_view, ::mempool);\n+    CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {\n         if (!mempool_view.GetCoin(coin.first, coin.second)) {\n             // Either the coin is not in the CCoinsViewCache or is spent. Clear it."
      },
      {
        "sha": "908850e2a5ac3fcbc6b6c35182fea7ae13b6351f",
        "filename": "src/node/coin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -9,14 +9,16 @@\n \n class COutPoint;\n class Coin;\n+struct NodeContext;\n \n /**\n  * Look up unspent output information. Returns coins in the mempool and in the\n  * current chain UTXO set. Iterates through all the keys in the map and\n  * populates the values.\n  *\n+ * @param[in] node The node context to use for lookup\n  * @param[in,out] coins map to fill\n  */\n-void FindCoins(std::map<COutPoint, Coin>& coins);\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins);\n \n #endif // BITCOIN_NODE_COIN_H"
      },
      {
        "sha": "5e2e50201598b913fa847ff6bdaded844dcd3ec9",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -20,6 +20,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n     // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n     assert(node.connman);\n+    assert(node.mempool);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n     bool callback_set = false;\n@@ -35,10 +36,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    if (!mempool.exists(hashTx)) {\n+    if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx),\n+        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = FormatStateMessage(state);\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "71390420411ebe3e694b0157d0d7fe5607d33d07",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -134,6 +134,7 @@ void TestGUI(interfaces::Node& node)\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     node.context()->connman = std::move(test.m_node.connman);\n+    node.context()->mempool = std::move(test.m_node.mempool);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "fc6fc70392e7cb84359d94d771e7285783338a30",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -759,7 +759,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    FindCoins(coins);\n+    FindCoins(*g_rpc_node, coins);\n \n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);"
      },
      {
        "sha": "84a3980b195c82610753b3224574bd68b692a517",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -112,14 +112,10 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    NodeContext node;\n-    node.chain = interfaces::MakeChain(node);\n-    g_rpc_node = &node;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n-    g_rpc_node = nullptr;\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)"
      }
    ]
  },
  {
    "sha": "fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThlNjUwYjUyNWU5NDkzYmRmYTM5M2MwYzNlMzRjYjIyYzc4YzA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T21:17:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:45:22Z"
      },
      "message": "rest: Use mempool from node context instead of global",
      "tree": {
        "sha": "19b73eeda69ab1b03ade40dad2d5a9bbbee4486f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19b73eeda69ab1b03ade40dad2d5a9bbbee4486f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhKjQv/VuhpGreoZdQOOudjvy7fMmXnihwRyI6MD1qf/c3W1rIn1DmLvnZB8+LK\nf84oqeSZg53PLi2eL1MEzy4NydzzgZ8O4doYmFaoi8OI31TFZpYckAjNxI1Zy6Js\nDtE7TY7A+4ocGiuwp95595lyMI3k0EQJslrv+wbwo4CrocRYbxETJUMUKZa0pa5M\nu9sNMkFo3mXRuqieKqQLM+EngfO9iugKVIkb7RaZqiaM17x9FwGxRfbhztWDhnN3\nbPBU2M1QR/Cx2rfFRc0WDNvP7AlwwInWcmyw7WW9Yudt/K9RDdNP77QXM7R834eN\n7RcNs2Z64+zauE9X8LcIi0pu4EwSI+PKxaooiU5xsUj1Rkb6Z7/caGAzZ2/5dX/A\naF2F4WgcoL84HftjOTvwp6h20Fwh5bGdJhFP0BEjfkl1qK2zK2KqOBJiPsLgT/GD\ny6cVwXvLi495wmiek/zQrXd7LKAUMxAxO3afvFY+kGIieenEZ5FU+CPSBqsSQust\ncsk+b5Xj\n=1VTn\n-----END PGP SIGNATURE-----",
        "payload": "tree 19b73eeda69ab1b03ade40dad2d5a9bbbee4486f\nparent fa660d65d7cc401ad5bbfdc076a074de19a79329\nauthor MarcoFalke <falke.marco@gmail.com> 1574457468 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576511122 -0500\n\nrest: Use mempool from node context instead of global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa660d65d7cc401ad5bbfdc076a074de19a79329"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 32,
      "deletions": 7
    },
    "files": [
      {
        "sha": "55756ecfdf312ed88fb1c1cfd918b283ff8d9f3b",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
        "patch": "@@ -8,6 +8,7 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <index/txindex.h>\n+#include <node/context.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n@@ -16,6 +17,7 @@\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n@@ -69,6 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n     return false;\n }\n \n+/**\n+ * Get the node context mempool.\n+ *\n+ * Set the HTTP error and return nullptr if node context\n+ * mempool is not found.\n+ *\n+ * @param[in]  req the HTTP request\n+ * return pointer to the mempool or nullptr if no mempool found\n+ */\n+static CTxMemPool* GetMemPool(HTTPRequest* req)\n+{\n+    if (!g_rpc_node || !g_rpc_node->mempool) {\n+        RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n+        return nullptr;\n+    }\n+    return g_rpc_node->mempool;\n+}\n+\n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n     const std::string::size_type pos = strReq.rfind('.');\n@@ -295,12 +315,14 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolInfoObject = MempoolInfoToJSON(::mempool);\n+        UniValue mempoolInfoObject = MempoolInfoToJSON(*mempool);\n \n         std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -315,14 +337,15 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n \n static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n {\n-    if (!CheckWarmup(req))\n-        return false;\n+    if (!CheckWarmup(req)) return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolObject = MempoolToJSON(::mempool, true);\n+        UniValue mempoolObject = MempoolToJSON(*mempool, true);\n \n         std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -500,11 +523,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         };\n \n         if (fCheckMemPool) {\n+            const CTxMemPool* mempool = GetMemPool(req);\n+            if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n-            LOCK2(cs_main, mempool.cs);\n+            LOCK2(cs_main, mempool->cs);\n             CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n-            CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-            process_utxos(viewMempool, mempool);\n+            CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n+            process_utxos(viewMempool, *mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n             process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());"
      }
    ]
  }
]