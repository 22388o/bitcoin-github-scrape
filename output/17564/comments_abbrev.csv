DrahtBot,2019-11-22 23:41:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16426](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16426.html) (Reverse cs_main, cs_wallet lock order and r",https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-557734475,557734475,
laanwj,2019-11-23 13:44:29,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-557799100,557799100,
practicalswift,2019-11-25 00:09:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-557944102,557944102,
practicalswift,2019-12-13 22:41:08,"ACK faaa23984e4ce8b6dc71d243ba651fae3fb780f7 -- diff looks correct\n\nThanks for doing this!",https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-565636268,565636268,
jnewbery,2019-12-15 03:52:11,"> It can be null because this version of EnsureMemPool only sets http status headers and doesn't throw an exception.\n\nAh, you're right. I was confused because the name suggests that it ensures the return value is valid, and the other version of `EnsureMemPool` throws if the mempool can't be found.\n\nI've implemented a version of Russ's suggested changes here: https://github.com/jnewbery/bit",https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-565775031,565775031,
MarcoFalke,2019-12-16 15:47:12,Fixed up and force pushed commit by @jnewbery with suggested rename,https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-566117580,566117580,
jnewbery,2019-12-16 20:49:14,Code review ACK fa8e650b5,https://github.com/bitcoin/bitcoin/pull/17564#issuecomment-566236808,566236808,
ryanofsky,2019-11-25 16:00:37,"In commit ""node: Use mempool from node context instead of global"" (fa963d3818afea82061615b9939361444e5b5c2d)\n\nI think you can get rid of this code now that the test framework is managing `g_rpc_node`:\n\n```diff\n--- a/src/test/rpc_tests.cpp\n+++ b/src/test/rpc_tests.cpp\n@@ -112,15 +112,10 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r350271905,350271905,src/test/rpc_tests.cpp
MarcoFalke,2019-11-25 16:11:07,Thanks. Fixed,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r350278254,350278254,src/test/rpc_tests.cpp
jnewbery,2019-12-02 16:17:59,"I don't understand your insistence on using ""transaction pool"" in comments, function and variables names. Adding another name for something that is already commonly called mempool just adds to confusion for new contributors. Can we just call the mempool ""the mempool"" and be done with it?",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352688931,352688931,src/rest.cpp
jnewbery,2019-12-02 16:27:13,What's the rationale for using `auto` here? I generally agree with Matt that we should avoid use of `auto` unless there are clear benefits: https://github.com/bitcoin/bitcoin/pull/12120/files.,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352694254,352694254,src/rest.cpp
jnewbery,2019-12-02 16:30:48,"I think in a future where running without a mempool is possible, we could make this friendlier by just defaulting `include_mempool` to false for nodes without mempools rather than forcing the user to always pass false as an argument.\n\n(no change needed for this PR but something to add when `-nomempool` is added as an option)",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352696587,352696587,src/rpc/blockchain.cpp
jnewbery,2019-12-02 16:32:16,"I think I'd prefer to have this check explicitly called at the top of this function rather than hidden in a univalue value assignment.\n\nSame is true for other changes in this file. I think it's better to be explicit at the top of the function that a mempool is going to be required, and fail early if it isn't available.",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352697669,352697669,src/rpc/mining.cpp
jnewbery,2019-12-02 16:41:11,Are we really allowed to throw `JSONRPCError`s in the rest code? I don't see it happening anywhere else. Where does it get caught?,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352703062,352703062,src/rest.cpp
jnewbery,2019-12-02 16:43:31,Please update doxygen comment,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r352704433,352704433,src/node/coin.h
instagibbs,2019-12-03 17:34:43,"tend to agree. In fact, there are more ""transaction pools"" like ""orphan pool"" etc. ""Mempool"" seems unambiguous in comparison?",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r353322190,353322190,src/rest.cpp
MarcoFalke,2019-12-03 18:25:54,"I'd rather not use `mempool` here because it shadows the global of the same name. This is fragile, because the code could be moved around and change its meaning because instead of `process_utxos::tx_pool` it uses `::mempool` instead.",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r353347325,353347325,src/rest.cpp
MarcoFalke,2019-12-03 18:26:08,Happy to change it to anything else. Any suggestions?,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r353347443,353347443,src/rest.cpp
ryanofsky,2019-12-03 18:53:36,"> Happy to change it to anything else. Any suggestions?\n\ntx_mempool would be an ugly compromise. But personally, I would call it mempool and not worry about shadowing, because it seems like the global should be removed or renamed to `g_mempool` anyway, and doing that should be pretty easy, especially after these changes.",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r353360282,353360282,src/rest.cpp
MarcoFalke,2019-12-05 18:42:24,"Ok, left the name as is with two effects:\n\n* Smaller diff\n* `mempool` shadows `::mempool` until the global is renamed to `::g_mempoool`",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r354482575,354482575,src/rest.cpp
MarcoFalke,2019-12-05 18:45:07,Removed `auto`,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r354483852,354483852,src/rest.cpp
MarcoFalke,2019-12-05 18:46:00,Done: Moved `EnsureMemPool` right after parsing the args where applicable.,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r354484282,354484282,src/rpc/mining.cpp
MarcoFalke,2019-12-05 18:46:11,Done,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r354484380,354484380,src/node/coin.h
MarcoFalke,2019-12-05 19:20:57,good point. Changed it to return `404` when the mempool is not found.,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r354500819,354500819,src/rest.cpp
jnewbery,2019-12-13 22:57:21,Where is the `NonFatalCheckError` caught?,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357864021,357864021,src/rest.cpp
jnewbery,2019-12-13 22:59:39,I don't understand how we can get `!mempool_`. `EnsureMemPool()` can't return a nullptr. Same for the other calls to `EnsureMemPool()` below,https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357864534,357864534,src/rest.cpp
ryanofsky,2019-12-13 23:55:54,"re: https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357864021\n\n> Where is the `NonFatalCheckError` caught?\n\nI didn't look into whether its caught but assumed this was basically functioning like an assert since it can only happen when bitcoind is not running, and in that case an abort, a caught exception, or an uncaught exception should all be preferable to a null dereference",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357875032,357875032,src/rest.cpp
ryanofsky,2019-12-13 23:56:02,"re: https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357864534\n\n> I don't understand how we can get `!mempool_`. `EnsureMemPool()` can't return a nullptr. Same for the other calls to `EnsureMemPool()` below\n\nIt can be null because this version of `EnsureMemPool` only sets http status headers and doesn't throw an exception. Personally I think this code would be a little clearer dro",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r357875057,357875057,src/rest.cpp
promag,2019-12-15 21:41:53,"Or it could just throw an exception leaving the request handlers free of handling these error case. Only change here would be like\n```diff\n-UniValue mempoolInfoObject = MempoolInfoToJSON(::mempool);\n+UniValue mempoolInfoObject = MempoolInfoToJSON(GetMemPoolOrThrow());\n```",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r358008010,358008010,src/rest.cpp
MarcoFalke,2019-12-16 15:48:03,"Yes, bitcoind will crash on uncaught exceptions (like this one)",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r358308127,358308127,src/rest.cpp
MarcoFalke,2019-12-16 15:48:25,"Code was removed, so closing this conv",https://github.com/bitcoin/bitcoin/pull/17564#discussion_r358308327,358308327,src/rest.cpp
