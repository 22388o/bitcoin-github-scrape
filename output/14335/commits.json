[
  {
    "sha": "edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGI1MzUwYzMyY2RmN2Y4NDg3Nzc3YjVjYzFhMmViZmNkZmM5ZTc1",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T20:30:53Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T20:30:53Z"
      },
      "message": "Move NotifyNumConnectionsChanged logic to private method.",
      "tree": {
        "sha": "e7e8f22dbbccbfd2a92d4554a4c23fb896939fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7e8f22dbbccbfd2a92d4554a4c23fb896939fc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "767275247d086117dddcdfca74933f3efe18c47c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
        "patch": "@@ -1153,9 +1153,22 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n+void CConnman::NotifyNumConnectionsChanged()\n+{\n+    size_t vNodesSize;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesSize = vNodes.size();\n+    }\n+    if(vNodesSize != nPrevNodeCount) {\n+        nPrevNodeCount = vNodesSize;\n+        if(clientInterface)\n+            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n+\n void CConnman::ThreadSocketHandler()\n {\n-    unsigned int nPrevNodeCount = 0;\n     while (!interruptNet)\n     {\n         //\n@@ -1219,16 +1232,7 @@ void CConnman::ThreadSocketHandler()\n                 }\n             }\n         }\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n-        }\n+        NotifyNumConnectionsChanged();\n \n         //\n         // Find which sockets have data to receive\n@@ -2217,6 +2221,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;\n+    nPrevNodeCount = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n     flagInterruptMsgProc = false;"
      },
      {
        "sha": "ba5cd4f5c7d31b01045ece1dde7fe28e4c27b359",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
        "patch": "@@ -336,6 +336,7 @@ class CConnman\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n+    void NotifyNumConnectionsChanged();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n@@ -406,6 +407,7 @@ class CConnman\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n+    unsigned int nPrevNodeCount;\n \n     /** Services this instance offers */\n     ServiceFlags nLocalServices;"
      }
    ]
  },
  {
    "sha": "7479b63d9109ccaf3708a92dc65dc24556576551",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDc5YjYzZDkxMDljY2FmMzcwOGE5MmRjNjVkYzI0NTU2NTc2NTUx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T20:36:58Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T20:53:52Z"
      },
      "message": "Move DisconnectNodes logic to private method.",
      "tree": {
        "sha": "ad6d70f7d51ab4b6dbbf20d6e653d412cf0007ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6d70f7d51ab4b6dbbf20d6e653d412cf0007ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7479b63d9109ccaf3708a92dc65dc24556576551",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7479b63d9109ccaf3708a92dc65dc24556576551",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7479b63d9109ccaf3708a92dc65dc24556576551",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7479b63d9109ccaf3708a92dc65dc24556576551/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edb5350c32cdf7f8487777b5cc1a2ebfcdfc9e75"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 63,
      "deletions": 60
    },
    "files": [
      {
        "sha": "006e094fc77025796d9b014d6000abafecff93ec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 60,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7479b63d9109ccaf3708a92dc65dc24556576551/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7479b63d9109ccaf3708a92dc65dc24556576551/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7479b63d9109ccaf3708a92dc65dc24556576551",
        "patch": "@@ -1153,85 +1153,87 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void CConnman::NotifyNumConnectionsChanged()\n+void CConnman::DisconnectNodes()\n {\n-    size_t vNodesSize;\n     {\n         LOCK(cs_vNodes);\n-        vNodesSize = vNodes.size();\n-    }\n-    if(vNodesSize != nPrevNodeCount) {\n-        nPrevNodeCount = vNodesSize;\n-        if(clientInterface)\n-            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n-    }\n-}\n-\n-void CConnman::ThreadSocketHandler()\n-{\n-    while (!interruptNet)\n-    {\n-        //\n-        // Disconnect nodes\n-        //\n-        {\n-            LOCK(cs_vNodes);\n \n-            if (!fNetworkActive) {\n-                // Disconnect any connected nodes\n-                for (CNode* pnode : vNodes) {\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n-                        pnode->fDisconnect = true;\n-                    }\n+        if (!fNetworkActive) {\n+            // Disconnect any connected nodes\n+            for (CNode* pnode : vNodes) {\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n                 }\n             }\n+        }\n \n-            // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+        // Disconnect unused nodes\n+        std::vector<CNode*> vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+        {\n+            if (pnode->fDisconnect)\n             {\n-                if (pnode->fDisconnect)\n-                {\n-                    // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                // remove from vNodes\n+                vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n+                // release outbound grant (if any)\n+                pnode->grantOutbound.Release();\n \n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n+                // close socket and cleanup\n+                pnode->CloseSocketDisconnect();\n \n-                    // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n-                }\n+                // hold in disconnected pool until all refs are released\n+                pnode->Release();\n+                vNodesDisconnected.push_back(pnode);\n             }\n         }\n+    }\n+    {\n+        // Delete disconnected nodes\n+        std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+        for (CNode* pnode : vNodesDisconnectedCopy)\n         {\n-            // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n-            {\n-                // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n+            // wait until threads are done using it\n+            if (pnode->GetRefCount() <= 0) {\n+                bool fDelete = false;\n+                {\n+                    TRY_LOCK(pnode->cs_inventory, lockInv);\n+                    if (lockInv) {\n+                        TRY_LOCK(pnode->cs_vSend, lockSend);\n+                        if (lockSend) {\n+                            fDelete = true;\n                         }\n                     }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n-                    }\n+                }\n+                if (fDelete) {\n+                    vNodesDisconnected.remove(pnode);\n+                    DeleteNode(pnode);\n                 }\n             }\n         }\n+    }\n+}\n+\n+void CConnman::NotifyNumConnectionsChanged()\n+{\n+    size_t vNodesSize;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesSize = vNodes.size();\n+    }\n+    if(vNodesSize != nPrevNodeCount) {\n+        nPrevNodeCount = vNodesSize;\n+        if(clientInterface)\n+            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n+\n+void CConnman::ThreadSocketHandler()\n+{\n+    while (!interruptNet)\n+    {\n+        DisconnectNodes();\n         NotifyNumConnectionsChanged();\n \n         //"
      },
      {
        "sha": "f6af2a3babe6beb0d41aadbe95449db51e2d4a33",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7479b63d9109ccaf3708a92dc65dc24556576551/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7479b63d9109ccaf3708a92dc65dc24556576551/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7479b63d9109ccaf3708a92dc65dc24556576551",
        "patch": "@@ -336,6 +336,7 @@ class CConnman\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n+    void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWY5Y2ZmMTFhZDNlZjI3ODkzYjRiMjAwOWRkYmZjYjIwODU1NGE5",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T20:43:00Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T21:08:04Z"
      },
      "message": "Move InactivityCheck logic to private method.",
      "tree": {
        "sha": "85850f82a19562b99e974fa5adfd41d49d5e26d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85850f82a19562b99e974fa5adfd41d49d5e26d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2af9cff11ad3ef27893b4b2009ddbfcb208554a9/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7479b63d9109ccaf3708a92dc65dc24556576551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7479b63d9109ccaf3708a92dc65dc24556576551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7479b63d9109ccaf3708a92dc65dc24556576551"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 35,
      "deletions": 32
    },
    "files": [
      {
        "sha": "644fed5ef8cb7e3436a78d49d212a827c80402d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 32,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2af9cff11ad3ef27893b4b2009ddbfcb208554a9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2af9cff11ad3ef27893b4b2009ddbfcb208554a9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
        "patch": "@@ -1229,6 +1229,39 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n+void CConnman::InactivityCheck(CNode *pnode)\n+{\n+    int64_t nTime = GetSystemTimeInSeconds();\n+    if (nTime - pnode->nTimeConnected > 60)\n+    {\n+        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+        {\n+            LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+            pnode->fDisconnect = true;\n+        }\n+        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+        {\n+            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+            pnode->fDisconnect = true;\n+        }\n+        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+        {\n+            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+            pnode->fDisconnect = true;\n+        }\n+        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        {\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+            pnode->fDisconnect = true;\n+        }\n+        else if (!pnode->fSuccessfullyConnected)\n+        {\n+            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n+            pnode->fDisconnect = true;\n+        }\n+    }\n+}\n+\n void CConnman::ThreadSocketHandler()\n {\n     while (!interruptNet)\n@@ -1425,38 +1458,7 @@ void CConnman::ThreadSocketHandler()\n                 }\n             }\n \n-            //\n-            // Inactivity checking\n-            //\n-            int64_t nTime = GetSystemTimeInSeconds();\n-            if (nTime - pnode->nTimeConnected > 60)\n-            {\n-                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n-                {\n-                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n-                {\n-                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n-                {\n-                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n-                {\n-                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (!pnode->fSuccessfullyConnected)\n-                {\n-                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n-                    pnode->fDisconnect = true;\n-                }\n-            }\n+            InactivityCheck(pnode);\n         }\n         {\n             LOCK(cs_vNodes);"
      },
      {
        "sha": "480e9b83f77fe2cf51817b95b7d400ed5da23cc6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2af9cff11ad3ef27893b4b2009ddbfcb208554a9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2af9cff11ad3ef27893b4b2009ddbfcb208554a9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
        "patch": "@@ -338,6 +338,7 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n+    void InactivityCheck(CNode *pnode);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzI0ODhlNmU3YjRjMmQzN2YzZjQzNGQ1NzVkMjU4MDZkZGNiMGIw",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T21:03:17Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-24T21:08:10Z"
      },
      "message": "Move SocketHandler logic to private method.",
      "tree": {
        "sha": "d358c3db58c67deecf7ac2ef5898ecf69ca31516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d358c3db58c67deecf7ac2ef5898ecf69ca31516"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032488e6e7b4c2d37f3f434d575d25806ddcb0b0/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2af9cff11ad3ef27893b4b2009ddbfcb208554a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2af9cff11ad3ef27893b4b2009ddbfcb208554a9"
      }
    ],
    "stats": {
      "total": 329,
      "additions": 167,
      "deletions": 162
    },
    "files": [
      {
        "sha": "1b47f288fd8721f68cc0e7cbc0ef21e279e2055c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 166,
        "deletions": 162,
        "changes": 328,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032488e6e7b4c2d37f3f434d575d25806ddcb0b0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032488e6e7b4c2d37f3f434d575d25806ddcb0b0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
        "patch": "@@ -1262,209 +1262,213 @@ void CConnman::InactivityCheck(CNode *pnode)\n     }\n }\n \n-void CConnman::ThreadSocketHandler()\n+void CConnman::SocketHandler()\n {\n-    while (!interruptNet)\n-    {\n-        DisconnectNodes();\n-        NotifyNumConnectionsChanged();\n+    //\n+    // Find which sockets have data to receive\n+    //\n+    struct timeval timeout;\n+    timeout.tv_sec  = 0;\n+    timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n \n-        //\n-        // Find which sockets have data to receive\n-        //\n-        struct timeval timeout;\n-        timeout.tv_sec  = 0;\n-        timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n-\n-        fd_set fdsetRecv;\n-        fd_set fdsetSend;\n-        fd_set fdsetError;\n-        FD_ZERO(&fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        SOCKET hSocketMax = 0;\n-        bool have_fds = false;\n+    fd_set fdsetRecv;\n+    fd_set fdsetSend;\n+    fd_set fdsetError;\n+    FD_ZERO(&fdsetRecv);\n+    FD_ZERO(&fdsetSend);\n+    FD_ZERO(&fdsetError);\n+    SOCKET hSocketMax = 0;\n+    bool have_fds = false;\n \n-        for (const ListenSocket& hListenSocket : vhListenSocket) {\n-            FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-            have_fds = true;\n-        }\n+    for (const ListenSocket& hListenSocket : vhListenSocket) {\n+        FD_SET(hListenSocket.socket, &fdsetRecv);\n+        hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n+        have_fds = true;\n+    }\n \n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n         {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes)\n+            // Implement the following logic:\n+            // * If there is data to send, select() for sending data. As this only\n+            //   happens when optimistic write failed, we choose to first drain the\n+            //   write buffer in this case before receiving more. This avoids\n+            //   needlessly queueing received data, if the remote peer is not themselves\n+            //   receiving data. This means properly utilizing TCP flow control signalling.\n+            // * Otherwise, if there is space left in the receive buffer, select() for\n+            //   receiving data.\n+            // * Hand off all complete messages to the processor, to be handled without\n+            //   blocking here.\n+\n+            bool select_recv = !pnode->fPauseRecv;\n+            bool select_send;\n             {\n-                // Implement the following logic:\n-                // * If there is data to send, select() for sending data. As this only\n-                //   happens when optimistic write failed, we choose to first drain the\n-                //   write buffer in this case before receiving more. This avoids\n-                //   needlessly queueing received data, if the remote peer is not themselves\n-                //   receiving data. This means properly utilizing TCP flow control signalling.\n-                // * Otherwise, if there is space left in the receive buffer, select() for\n-                //   receiving data.\n-                // * Hand off all complete messages to the processor, to be handled without\n-                //   blocking here.\n-\n-                bool select_recv = !pnode->fPauseRecv;\n-                bool select_send;\n-                {\n-                    LOCK(pnode->cs_vSend);\n-                    select_send = !pnode->vSendMsg.empty();\n-                }\n+                LOCK(pnode->cs_vSend);\n+                select_send = !pnode->vSendMsg.empty();\n+            }\n \n-                LOCK(pnode->cs_hSocket);\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n \n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n+            FD_SET(pnode->hSocket, &fdsetError);\n+            hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+            have_fds = true;\n \n-                if (select_send) {\n-                    FD_SET(pnode->hSocket, &fdsetSend);\n-                    continue;\n-                }\n-                if (select_recv) {\n-                    FD_SET(pnode->hSocket, &fdsetRecv);\n-                }\n+            if (select_send) {\n+                FD_SET(pnode->hSocket, &fdsetSend);\n+                continue;\n+            }\n+            if (select_recv) {\n+                FD_SET(pnode->hSocket, &fdsetRecv);\n             }\n         }\n+    }\n \n-        int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                             &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        if (interruptNet)\n-            return;\n+    int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n+                         &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+    if (interruptNet)\n+        return;\n \n-        if (nSelect == SOCKET_ERROR)\n+    if (nSelect == SOCKET_ERROR)\n+    {\n+        if (have_fds)\n         {\n-            if (have_fds)\n-            {\n-                int nErr = WSAGetLastError();\n-                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-                for (unsigned int i = 0; i <= hSocketMax; i++)\n-                    FD_SET(i, &fdsetRecv);\n-            }\n-            FD_ZERO(&fdsetSend);\n-            FD_ZERO(&fdsetError);\n-            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-                return;\n+            int nErr = WSAGetLastError();\n+            LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n+            for (unsigned int i = 0; i <= hSocketMax; i++)\n+                FD_SET(i, &fdsetRecv);\n         }\n+        FD_ZERO(&fdsetSend);\n+        FD_ZERO(&fdsetError);\n+        if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n+            return;\n+    }\n \n-        //\n-        // Accept new connections\n-        //\n-        for (const ListenSocket& hListenSocket : vhListenSocket)\n+    //\n+    // Accept new connections\n+    //\n+    for (const ListenSocket& hListenSocket : vhListenSocket)\n+    {\n+        if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n         {\n-            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n-            {\n-                AcceptConnection(hListenSocket);\n-            }\n+            AcceptConnection(hListenSocket);\n         }\n+    }\n+\n+    //\n+    // Service each socket\n+    //\n+    std::vector<CNode*> vNodesCopy;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+            pnode->AddRef();\n+    }\n+    for (CNode* pnode : vNodesCopy)\n+    {\n+        if (interruptNet)\n+            return;\n \n         //\n-        // Service each socket\n+        // Receive\n         //\n-        std::vector<CNode*> vNodesCopy;\n+        bool recvSet = false;\n+        bool sendSet = false;\n+        bool errorSet = false;\n         {\n-            LOCK(cs_vNodes);\n-            vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->AddRef();\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n+            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n         }\n-        for (CNode* pnode : vNodesCopy)\n+        if (recvSet || errorSet)\n         {\n-            if (interruptNet)\n-                return;\n-\n-            //\n-            // Receive\n-            //\n-            bool recvSet = false;\n-            bool sendSet = false;\n-            bool errorSet = false;\n+            // typical socket buffer is 8K-64K\n+            char pchBuf[0x10000];\n+            int nBytes = 0;\n             {\n                 LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+                nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n             }\n-            if (recvSet || errorSet)\n+            if (nBytes > 0)\n             {\n-                // typical socket buffer is 8K-64K\n-                char pchBuf[0x10000];\n-                int nBytes = 0;\n-                {\n-                    LOCK(pnode->cs_hSocket);\n-                    if (pnode->hSocket == INVALID_SOCKET)\n-                        continue;\n-                    nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                }\n-                if (nBytes > 0)\n-                {\n-                    bool notify = false;\n-                    if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-                        pnode->CloseSocketDisconnect();\n-                    RecordBytesRecv(nBytes);\n-                    if (notify) {\n-                        size_t nSizeAdded = 0;\n-                        auto it(pnode->vRecvMsg.begin());\n-                        for (; it != pnode->vRecvMsg.end(); ++it) {\n-                            if (!it->complete())\n-                                break;\n-                            nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n-                        }\n-                        {\n-                            LOCK(pnode->cs_vProcessMsg);\n-                            pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n-                            pnode->nProcessQueueSize += nSizeAdded;\n-                            pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n-                        }\n-                        WakeMessageHandler();\n-                    }\n-                }\n-                else if (nBytes == 0)\n-                {\n-                    // socket closed gracefully\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"socket closed\\n\");\n-                    }\n+                bool notify = false;\n+                if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n                     pnode->CloseSocketDisconnect();\n-                }\n-                else if (nBytes < 0)\n-                {\n-                    // error\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                RecordBytesRecv(nBytes);\n+                if (notify) {\n+                    size_t nSizeAdded = 0;\n+                    auto it(pnode->vRecvMsg.begin());\n+                    for (; it != pnode->vRecvMsg.end(); ++it) {\n+                        if (!it->complete())\n+                            break;\n+                        nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                    }\n                     {\n-                        if (!pnode->fDisconnect)\n-                            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-                        pnode->CloseSocketDisconnect();\n+                        LOCK(pnode->cs_vProcessMsg);\n+                        pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n+                        pnode->nProcessQueueSize += nSizeAdded;\n+                        pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n                     }\n+                    WakeMessageHandler();\n                 }\n             }\n-\n-            //\n-            // Send\n-            //\n-            if (sendSet)\n+            else if (nBytes == 0)\n             {\n-                LOCK(pnode->cs_vSend);\n-                size_t nBytes = SocketSendData(pnode);\n-                if (nBytes) {\n-                    RecordBytesSent(nBytes);\n+                // socket closed gracefully\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"socket closed\\n\");\n+                }\n+                pnode->CloseSocketDisconnect();\n+            }\n+            else if (nBytes < 0)\n+            {\n+                // error\n+                int nErr = WSAGetLastError();\n+                if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                {\n+                    if (!pnode->fDisconnect)\n+                        LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+                    pnode->CloseSocketDisconnect();\n                 }\n             }\n-\n-            InactivityCheck(pnode);\n         }\n+\n+        //\n+        // Send\n+        //\n+        if (sendSet)\n         {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->Release();\n+            LOCK(pnode->cs_vSend);\n+            size_t nBytes = SocketSendData(pnode);\n+            if (nBytes) {\n+                RecordBytesSent(nBytes);\n+            }\n         }\n+\n+        InactivityCheck(pnode);\n+    }\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodesCopy)\n+            pnode->Release();\n+    }\n+}\n+\n+void CConnman::ThreadSocketHandler()\n+{\n+    while (!interruptNet)\n+    {\n+        DisconnectNodes();\n+        NotifyNumConnectionsChanged();\n+        SocketHandler();\n     }\n }\n "
      },
      {
        "sha": "03be59131b6083a9d56076f52c7da087f1c8de65",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032488e6e7b4c2d37f3f434d575d25806ddcb0b0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032488e6e7b4c2d37f3f434d575d25806ddcb0b0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=032488e6e7b4c2d37f3f434d575d25806ddcb0b0",
        "patch": "@@ -339,6 +339,7 @@ class CConnman\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n     void InactivityCheck(CNode *pnode);\n+    void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  }
]