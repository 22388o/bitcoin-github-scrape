[
  {
    "sha": "689746841afd0f2076a7d93d30974c2f7d29cd83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODk3NDY4NDFhZmQwZjIwNzZhN2Q5M2QzMDk3NGMyZjdkMjljZDgz",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T05:00:01Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:39:17Z"
      },
      "message": "Make CScriptNum() take nMaxNumSize as an argument\n\nWhile the existing numeric opcodes are all limited to 4-byte bignum\narguments, new opcodes will need different limits.\n\nRebased-From: 99088d60d8a7747c6d1a7fd5d8cd388be1b3e138",
      "tree": {
        "sha": "dc1828542aa2ea198e6431e73a8172020cd5b657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc1828542aa2ea198e6431e73a8172020cd5b657"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/689746841afd0f2076a7d93d30974c2f7d29cd83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689746841afd0f2076a7d93d30974c2f7d29cd83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/689746841afd0f2076a7d93d30974c2f7d29cd83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689746841afd0f2076a7d93d30974c2f7d29cd83/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cea6b0dee0b0f10d5f41433e27c70213a4c531f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cea6b0dee0b0f10d5f41433e27c70213a4c531f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cea6b0dee0b0f10d5f41433e27c70213a4c531f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e3af4a6fd9d0c7c46102ab3aceb684ec2547c5e6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/689746841afd0f2076a7d93d30974c2f7d29cd83/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/689746841afd0f2076a7d93d30974c2f7d29cd83/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=689746841afd0f2076a7d93d30974c2f7d29cd83",
        "patch": "@@ -194,7 +194,10 @@ class CScriptNum\n         m_value = n;\n     }\n \n-    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n     {\n         if (vch.size() > nMaxNumSize) {\n             throw scriptnum_error(\"script number overflow\");\n@@ -317,8 +320,6 @@ class CScriptNum\n         return result;\n     }\n \n-    static const size_t nMaxNumSize = 4;\n-\n private:\n     static int64_t set_vch(const std::vector<unsigned char>& vch)\n     {"
      },
      {
        "sha": "2f88b0676668d91ed7f5942e0ea580a0df88a7aa",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/689746841afd0f2076a7d93d30974c2f7d29cd83/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/689746841afd0f2076a7d93d30974c2f7d29cd83/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=689746841afd0f2076a7d93d30974c2f7d29cd83",
        "patch": "@@ -142,7 +142,7 @@ static void RunCreate(const int64_t& num)\n {\n     CheckCreateInt(num);\n     CScriptNum scriptnum(num);\n-    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n+    if (scriptnum.getvch().size() <= CScriptNum::nDefaultMaxNumSize)\n         CheckCreateVch(num);\n     else\n     {"
      }
    ]
  },
  {
    "sha": "750d54f9510d784c2a502089754241986fb1338a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTBkNTRmOTUxMGQ3ODRjMmE1MDIwODk3NTQyNDE5ODZmYjEzMzhh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T05:02:59Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:39:17Z"
      },
      "message": "Move LOCKTIME_THRESHOLD to src/script/script.h\n\nWill now be needed by CHECKLOCKTIMEVERIFY code.\n\nRebased-From: 48e9c57cf06352f890eac4285ae022d8746cf3fd",
      "tree": {
        "sha": "4aa0c72c60a81c8a25224f5b3924f05b84364952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aa0c72c60a81c8a25224f5b3924f05b84364952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/750d54f9510d784c2a502089754241986fb1338a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/750d54f9510d784c2a502089754241986fb1338a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/750d54f9510d784c2a502089754241986fb1338a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/750d54f9510d784c2a502089754241986fb1338a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "689746841afd0f2076a7d93d30974c2f7d29cd83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689746841afd0f2076a7d93d30974c2f7d29cd83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/689746841afd0f2076a7d93d30974c2f7d29cd83"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52cc4f38bf3085c2cd095e1ec0ce9fc0b11eed50",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/750d54f9510d784c2a502089754241986fb1338a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/750d54f9510d784c2a502089754241986fb1338a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=750d54f9510d784c2a502089754241986fb1338a",
        "patch": "@@ -74,8 +74,6 @@ static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */"
      },
      {
        "sha": "6433d1a766a2f6ef836aa7da7f7a74e36c596e96",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/750d54f9510d784c2a502089754241986fb1338a/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/750d54f9510d784c2a502089754241986fb1338a/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=750d54f9510d784c2a502089754241986fb1338a",
        "patch": "@@ -17,6 +17,10 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n+// Threshold for nLockTime: below this value it is interpreted as block number,\n+// otherwise as UNIX timestamp.\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n {"
      }
    ]
  },
  {
    "sha": "6d0132520c6944a2f9f0d571e88d7fd57f805c38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDAxMzI1MjBjNjk0NGEyZjlmMGQ1NzFlODhkN2ZkNTdmODA1YzM4",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-29T07:44:25Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:39:17Z"
      },
      "message": "Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)\n\n<nLockTime> CHECKLOCKTIMEVERIFY -> <nLockTime>\n\nFails if tx.nLockTime < nLockTime, allowing the funds in a txout to be\nlocked until some block height or block time in the future is reached.\n\nOnly the logic and unittests are implemented; this commit does not have\nany actual soft-fork logic in it.\n\nThanks to Pieter Wuille for rebase.\n\nCredit goes to Gregory Maxwell for the suggestion of comparing the\nargument against the transaction nLockTime rather than the current\ntime/blockheight directly.\n\nRebased-From: bc60b2b4b401f0adff5b8b9678903ff8feb5867b",
      "tree": {
        "sha": "ea3a680e1167a5d05fec040d4a12482e09a1a298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea3a680e1167a5d05fec040d4a12482e09a1a298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d0132520c6944a2f9f0d571e88d7fd57f805c38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0132520c6944a2f9f0d571e88d7fd57f805c38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0132520c6944a2f9f0d571e88d7fd57f805c38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0132520c6944a2f9f0d571e88d7fd57f805c38/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "750d54f9510d784c2a502089754241986fb1338a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/750d54f9510d784c2a502089754241986fb1338a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/750d54f9510d784c2a502089754241986fb1338a"
      }
    ],
    "stats": {
      "total": 215,
      "additions": 211,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2150d014a32f9ac5b3c103b4ede44fdb169d4f33",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 2,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -335,9 +335,51 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n+                        // not enabled; treat as a NOP2\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // Note that elsewhere numeric opcodes are limited to\n+                    // operands in the range -2**31+1 to 2**31-1, however it is\n+                    // legal for opcodes to produce results exceeding that\n+                    // range. This limitation is implemented by CScriptNum's\n+                    // default 4-byte limit.\n+                    //\n+                    // If we kept to that limit we'd have a year 2038 problem,\n+                    // even though the nLockTime field in transactions\n+                    // themselves is uint32 which only becomes meaningless\n+                    // after the year 2106.\n+                    //\n+                    // Thus as a special case we tell CScriptNum to accept up\n+                    // to 5-byte bignums, which are good until 2**39-1, well\n+                    // beyond the 2**32-1 limit of the nLockTime field itself.\n+                    const CScriptNum nLockTime(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKLOCKTIMEVERIFY.\n+                    if (nLockTime < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // Actually compare the specified lock time with the transaction.\n+                    if (!checker.CheckLockTime(nLockTime))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n \n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1083,6 +1125,43 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo->vin[nIn].IsFinal())\n+        return false;\n+\n+    return true;\n+}\n+\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      },
      {
        "sha": "9f76d69a466d75a28aebd367f3e94e2cc5007215",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -68,8 +68,12 @@ enum\n     // discouraged NOPs fails the script. This verification flag will never be\n     // a mandatory flag applied to scripts in a block. NOPs that are not\n     // executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\n-    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7)\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),\n \n+    // Verify CHECKLOCKTIMEVERIFY\n+    //\n+    // See BIP65 for details.\n+    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -82,6 +86,11 @@ class BaseSignatureChecker\n         return false;\n     }\n \n+    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -97,6 +106,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "54d98a0786006d649e67f2c072429e02c203d639",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -153,6 +153,7 @@ enum opcodetype\n     // expansion\n     OP_NOP1 = 0xb0,\n     OP_NOP2 = 0xb1,\n+    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,"
      },
      {
        "sha": "788d7ff4689b7229b205e3d1222858fdffa795bd",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -47,6 +47,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"OP_RETURN was encountered\";\n         case SCRIPT_ERR_UNBALANCED_CONDITIONAL:\n             return \"Invalid OP_IF construction\";\n+        case SCRIPT_ERR_NEGATIVE_LOCKTIME:\n+            return \"Negative locktime\";\n+        case SCRIPT_ERR_UNSATISFIED_LOCKTIME:\n+            return \"Locktime requirement not satisfied\";\n         case SCRIPT_ERR_SIG_HASHTYPE:\n             return \"Signature hash type missing or not understood\";\n         case SCRIPT_ERR_SIG_DER:"
      },
      {
        "sha": "7b4c40edaaca55cc6513686e732abcf5c5e9929f",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -35,6 +35,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n+    /* OP_CHECKLOCKTIMEVERIFY */\n+    SCRIPT_ERR_NEGATIVE_LOCKTIME,\n+    SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n+\n     /* BIP62 */\n     SCRIPT_ERR_SIG_HASHTYPE,\n     SCRIPT_ERR_SIG_DER,"
      },
      {
        "sha": "a8882430e2923052f628b76fde4fc3c1fdf1c53e",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -103,5 +103,71 @@\n [[[\"ad503f72c18df5801ee64d76090afe4c607fb2b822e9b7b63c5826c50e22fc3b\", 0, \"0x21 0x027c3a97665bf283a102a587a62a30a0c102d4d3b141015e2cae6f64e2543113e5 CHECKSIG NOT\"]],\n \"01000000013bfc220ec526583cb6b7e922b8b27f604cfe0a09764de61e80f58dc1723f50ad0000000000ffffffff0101000000000000002321027c3a97665bf283a102a587a62a30a0c102d4d3b141015e2cae6f64e2543113e5ac00000000\", \"P2SH\"],\n \n+\n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight nLockTime=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Input locked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n+  [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument 2^32 with nLockTime=2^32-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Same, but with nLockTime=2^31-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "ecbce93601b35212ea41401cec636b187af19d4e",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -178,5 +178,47 @@\n \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH\"],\n \n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Any non-maxint nSequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded arguments are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "abd33017ed6a78f3138962966768a17ba0af6339",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0132520c6944a2f9f0d571e88d7fd57f805c38/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "patch": "@@ -38,7 +38,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY)\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n-    (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n+    (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTAxZDBmODlkNGYyNGVhYzdjOGEyMWE2Nzc5ZTc5NTZhZDEzYTg3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-12-17T05:31:44Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:50:56Z"
      },
      "message": "Enable CHECKLOCKTIMEVERIFY as a standard script verify flag\n\nTransactions that fail CLTV verification will be rejected from the\nmempool, making it easy to test the feature. However blocks containing\n\"invalid\" CLTV-using transactions will still be accepted; this is *not*\nthe soft-fork required to actually enable CLTV for production use.\n\nRebased-From: ffd75adce01a78b3461b3ff05bcc2b530a9ce994",
      "tree": {
        "sha": "9a6892a8cf18f7d4784c04bff0aff16d34767a5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a6892a8cf18f7d4784c04bff0aff16d34767a5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0132520c6944a2f9f0d571e88d7fd57f805c38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0132520c6944a2f9f0d571e88d7fd57f805c38"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d7f023f20828e3a2fbad8c49aee4e7df2533080c",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
        "patch": "@@ -50,6 +50,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */"
      }
    ]
  },
  {
    "sha": "41372485ce2ebd172ba067d401f24259b014fad5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTM3MjQ4NWNlMmViZDE3MmJhMDY3ZDQwMWYyNDI1OWIwMTRmYWQ1",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:30:50Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:51:01Z"
      },
      "message": "Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n\nBased on the earlier BIP66 soft-fork logic implemented by Pieter\nWuille's 5a47811da5158df763aa2fca09ce646ee0c51e7b\n\nRebased-From: 287f54fc90c29301faede8d4ac2ea24a91441917",
      "tree": {
        "sha": "48022076c88ab291cebe3bde095864f732da61e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48022076c88ab291cebe3bde095864f732da61e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41372485ce2ebd172ba067d401f24259b014fad5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41372485ce2ebd172ba067d401f24259b014fad5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41372485ce2ebd172ba067d401f24259b014fad5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41372485ce2ebd172ba067d401f24259b014fad5/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e01d0f89d4f24eac7c8a21a6779e7956ad13a87"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ce3730f16d4eb4f2c83e1125a17413cce84aa034",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41372485ce2ebd172ba067d401f24259b014fad5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41372485ce2ebd172ba067d401f24259b014fad5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=41372485ce2ebd172ba067d401f24259b014fad5",
        "patch": "@@ -1698,11 +1698,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n+    // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && CBlockIndex::IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n+    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 4 && CBlockIndex::IsSuperMajority(4, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2555,6 +2562,11 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n+    // Reject block.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 4 && CBlockIndex::IsSuperMajority(4, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n     return true;\n }\n "
      },
      {
        "sha": "b80d1f8f0ee4516ae661397e2f4d47f303db654b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41372485ce2ebd172ba067d401f24259b014fad5/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41372485ce2ebd172ba067d401f24259b014fad5/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=41372485ce2ebd172ba067d401f24259b014fad5",
        "patch": "@@ -24,7 +24,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=3;\n+    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "70daae85aed88803eeb010296abef9b86b1d9336",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41372485ce2ebd172ba067d401f24259b014fad5/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41372485ce2ebd172ba067d401f24259b014fad5/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=41372485ce2ebd172ba067d401f24259b014fad5",
        "patch": "@@ -44,9 +44,10 @@ typedef enum bitcoinconsensus_error_t\n /** Script verification flags */\n enum\n {\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      }
    ]
  },
  {
    "sha": "6a1343b47010362e48a36a05227e8b3ddb70ebdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTEzNDNiNDcwMTAzNjJlNDhhMzZhMDUyMjdlOGIzZGRiNzBlYmRm",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:42:17Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:51:01Z"
      },
      "message": "Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork\n\nbip65-cltv.py is based on the earlier BIP66 soft-fork RPC test\nimplemented by Pieter Wuille's 819bcf9b9902319176cdb1d476cacfee9b3727ec\n\nbip65-cltv-p2p.py is based on the earlier BIP66 P2P test by Suhas\nDaftuar's d76412b068d95454732aa3def95decf35251759a\n\nRebased-From: 308257856099e82e91881ba97f741d840184727c",
      "tree": {
        "sha": "55906f9dc06f2631ca86a3e70b538aba907ce845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55906f9dc06f2631ca86a3e70b538aba907ce845"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a1343b47010362e48a36a05227e8b3ddb70ebdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343b47010362e48a36a05227e8b3ddb70ebdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343b47010362e48a36a05227e8b3ddb70ebdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343b47010362e48a36a05227e8b3ddb70ebdf/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41372485ce2ebd172ba067d401f24259b014fad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41372485ce2ebd172ba067d401f24259b014fad5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41372485ce2ebd172ba067d401f24259b014fad5"
      }
    ],
    "stats": {
      "total": 264,
      "additions": 264,
      "deletions": 0
    },
    "files": [
      {
        "sha": "944d9dd28d3a6c7c24a6b7305d22b4bf129b49d9",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343b47010362e48a36a05227e8b3ddb70ebdf/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343b47010362e48a36a05227e8b3ddb70ebdf/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=6a1343b47010362e48a36a05227e8b3ddb70ebdf",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def cltv_invalidate(tx):\n+    '''Modify the signature in vin 0 of the tx to fail CLTV\n+\n+    Prepends -1 CLTV DROP in the scriptSig itself.\n+    '''\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+                                  list(CScript(tx.vin[0].scriptSig)))\n+\n+'''\n+This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP65Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].setgenerate(True, 2)\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 3 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new CLTV rules are not enforced in the 750th\n+        version 3 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new CLTV rules are enforced in the 751st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      },
      {
        "sha": "e009c1c986962d2fcd3e5e3a42c06c7c75f7dabf",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343b47010362e48a36a05227e8b3ddb70ebdf/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343b47010362e48a36a05227e8b3ddb70ebdf/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=6a1343b47010362e48a36a05227e8b3ddb70ebdf",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class BIP65Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].setgenerate(True, 50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].setgenerate(True, 99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=4 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=3 block after 949 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].setgenerate(True, 1)\n+            raise AssertionError(\"Succeeded to mine a version=3 block after 950 version=4 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=3 block after 950 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      }
    ]
  },
  {
    "sha": "5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGM3MmY4YmIwYmY1NDQ3MjI3YWFmNWRhNWZjNmUwOTY5ZTk2YmRi",
    "commit": {
      "author": {
        "name": "Esteban Ordano",
        "email": "eordano@gmail.com",
        "date": "2015-07-03T01:38:34Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:51:05Z"
      },
      "message": "CLTV: Add more tests to improve coverage\n\nFour cases included:\n\n* The CLTV operand type mismatches the tx locktime. In the script it is\n  1 (interpreted as block height), but in the tx is 500000000\n  (interpreted as date)\n* The stack is empty when executing OP_CLTV\n* The tx is final by having only one input with MAX_INT sequence number\n* The operand for CLTV is negative (after OP_0 OP_1 OP_SUB)\n\nRebased-From: cb54d17355864fa08826d6511a0d7692b21ef2c9",
      "tree": {
        "sha": "2c8883d0aaed16aa4b1f4816122243915512b463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c8883d0aaed16aa4b1f4816122243915512b463"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWFpDrXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMTBhNzM3MDkwMmI0MzFmZjE4MDM2ODQ0YjgzZThlNjBi\nMWM1NDAzMzQwOWNlZmYvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udxrjQf/Z6BWCXFRjSVaQu5DCMc7ffJI\np9SQx0VD61tQ68htNELrd0CBoYDS3/zGqmGF/KI0A86iTBCqI0pKQFNyNYbM0t8E\nke0Ux5P5FXedjxl4JdsyNdxVzJSflZF9iUWJs76WaGMjU8juVTinrisDmhMjMhOL\nZDUh0x+ZuEBQWdBFpYm0sds8ASh/ybpjVNCPijcdcC001DeUGaZtIoFAP1KvqizP\naX3tl8H8+dLRvQNg1B4rfLRpPrWSxA72eMAbnoqQdRbhaQq8hAF072ry9RS9r2NW\nZ6GK6KFQbwFoHB5ZOPrko9sQ18OHifAbQZ30OZvfCz0g5aVgv6dMYvZLJfPjaw==\n=sHHe\n-----END PGP SIGNATURE-----",
        "payload": "tree 2c8883d0aaed16aa4b1f4816122243915512b463\nparent 6a1343b47010362e48a36a05227e8b3ddb70ebdf\nauthor Esteban Ordano <eordano@gmail.com> 1435887514 -0700\ncommitter Peter Todd <pete@petertodd.org> 1444319465 +0200\n\nCLTV: Add more tests to improve coverage\n\nFour cases included:\n\n* The CLTV operand type mismatches the tx locktime. In the script it is\n  1 (interpreted as block height), but in the tx is 500000000\n  (interpreted as date)\n* The stack is empty when executing OP_CLTV\n* The tx is final by having only one input with MAX_INT sequence number\n* The operand for CLTV is negative (after OP_0 OP_1 OP_SUB)\n\nRebased-From: cb54d17355864fa08826d6511a0d7692b21ef2c9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb/comments",
    "author": {
      "login": "eordano",
      "id": 42750,
      "node_id": "MDQ6VXNlcjQyNzUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/42750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eordano",
      "html_url": "https://github.com/eordano",
      "followers_url": "https://api.github.com/users/eordano/followers",
      "following_url": "https://api.github.com/users/eordano/following{/other_user}",
      "gists_url": "https://api.github.com/users/eordano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eordano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eordano/subscriptions",
      "organizations_url": "https://api.github.com/users/eordano/orgs",
      "repos_url": "https://api.github.com/users/eordano/repos",
      "events_url": "https://api.github.com/users/eordano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eordano/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a1343b47010362e48a36a05227e8b3ddb70ebdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343b47010362e48a36a05227e8b3ddb70ebdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343b47010362e48a36a05227e8b3ddb70ebdf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a197e301cb4ce2c48a5e3e9022f48fba4f2a8c0c",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=5dc72f8bb0bf5447227aaf5da5fc6e0969e96bdb",
        "patch": "@@ -121,6 +121,8 @@\n [\"Argument missing\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument negative with by-blockheight nLockTime=0\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n@@ -129,10 +131,14 @@\n [\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Input locked\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1ffffffff0100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n@@ -142,6 +148,8 @@\n [\"Argument/tx height/time mismatch, both versions\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],"
      }
    ]
  }
]