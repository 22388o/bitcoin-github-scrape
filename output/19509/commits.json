[
  {
    "sha": "dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmY3NzlkNWRlYjA0ZjU1YzZlODQ5M2NlNGUxMmVkNDYyODYzOGYz",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-22T12:59:16Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-18T01:31:02Z"
      },
      "message": "Clean PushMessage and ProcessMessages\n\nThis brings PushMessage and ProcessMessages further in line with the\nstyle guide by fixing their if statements.\n\nLogMessage is later called, inside an if statement, inside both of these\nmethods.",
      "tree": {
        "sha": "31b8a0eecda150e8642fff61b653dc4435c0ab5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31b8a0eecda150e8642fff61b653dc4435c0ab5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc51b99bd5e99a4828a5f759b21ae911aef461e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc51b99bd5e99a4828a5f759b21ae911aef461e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc51b99bd5e99a4828a5f759b21ae911aef461e5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 6,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a3f7f3aba1df650edf4f7ee7d6f304ecaacb09b2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf779d5deb04f55c6e8493ce4e12ed4628638f3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf779d5deb04f55c6e8493ce4e12ed4628638f3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
        "patch": "@@ -2879,18 +2879,14 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(*pnode);\n+        if (optimisticSend) nBytesSent = SocketSendData(*pnode);\n     }\n-    if (nBytesSent)\n-        RecordBytesSent(nBytesSent);\n+    if (nBytesSent) RecordBytesSent(nBytesSent);\n }\n \n bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)"
      },
      {
        "sha": "7d89d3ea6e907fe5d43a4d83759f51fe8f38bef5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf779d5deb04f55c6e8493ce4e12ed4628638f3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf779d5deb04f55c6e8493ce4e12ed4628638f3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
        "patch": "@@ -4028,14 +4028,12 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n \n     // Don't bother if send buffer is too full to respond anyway\n-    if (pfrom->fPauseSend)\n-        return false;\n+    if (pfrom->fPauseSend) return false;\n \n     std::list<CNetMessage> msgs;\n     {\n         LOCK(pfrom->cs_vProcessMsg);\n-        if (pfrom->vProcessMsg.empty())\n-            return false;\n+        if (pfrom->vProcessMsg.empty()) return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n         pfrom->nProcessQueueSize -= msgs.front().m_raw_message_size;"
      }
    ]
  },
  {
    "sha": "f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmE3N2ZmOTdiZWMwOWRkNWZjYzA0M2Q4NjU5ZDhlYzVkZmI4N2My",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T17:20:47Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T20:58:42Z"
      },
      "message": "Add CaptureMessage\n\nThis commit adds the CaptureMessage function.  This will later be called\nwhen any message is sent or received.  The capture directory is fixed,\nin a new folder \"message_capture\" in the datadir.  Peers will then have\ntheir own subfolders, named with their IP address and port, replacing\ncolons with underscores to keep compatibility with Windows.  Inside,\nreceived and sent messages will be captured into two binary files,\nmsgs_recv.dat and msgs_sent.dat.\n\ne.g.\nmessage_capture/203.0.113.7_56072/msgs_recv.dat\nmessage_capture/203.0.113.7_56072/msgs_sent.dat\n\nThe format has been designed as to result in a minimal performance\nimpact.  A parsing script is added in a later commit.",
      "tree": {
        "sha": "fb44b69ac67e2183242dfd743aab011e611adb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb44b69ac67e2183242dfd743aab011e611adb37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf779d5deb04f55c6e8493ce4e12ed4628638f3"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 38,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3ab626381333e44261bcc8741a34cfd48340f72c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
        "patch": "@@ -1042,16 +1042,17 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Trim requested connection counts, to fit into system limitations\n     // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n-    nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS + nBind);\n+    nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS + nBind + NUM_FDS_MESSAGE_CAPTURE);\n+\n #ifdef USE_POLL\n     int fd_max = nFD;\n #else\n     int fd_max = FD_SETSIZE;\n #endif\n-    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n+    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n-    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));"
      },
      {
        "sha": "29529d54caa37b67ac4a9db7f0860fb8d7b794b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
        "patch": "@@ -2929,3 +2929,31 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    // Note: This function captures the message at the time of processing,\n+    // not at socket receive/send time.\n+    // This ensures that the messages are always in order from an application\n+    // layer (processing) perspective.\n+    auto now = GetTime<std::chrono::microseconds>();\n+\n+    // Windows folder names can not include a colon\n+    std::string clean_addr = addr.ToString();\n+    std::replace(clean_addr.begin(), clean_addr.end(), ':', '_');\n+\n+    fs::path base_path = GetDataDir() / \"message_capture\" / clean_addr;\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    ser_writedata64(f, now.count());\n+    f.write(msg_type.data(), msg_type.length());\n+    for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n+        f << '\\0';\n+    }\n+    uint32_t size = data.size();\n+    ser_writedata32(f, size);\n+    f.write((const char*)data.data(), data.size());\n+}"
      },
      {
        "sha": "96d411bf291399ba16852fcb1b52897646ffd46b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
        "patch": "@@ -20,6 +20,7 @@\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n+#include <span.h>\n #include <streams.h>\n #include <sync.h>\n #include <threadinterrupt.h>\n@@ -75,6 +76,8 @@ static constexpr uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n static const bool DEFAULT_BLOCKSONLY = false;\n /** -peertimeout default */\n static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n+/** Number of file descriptors required for message capture **/\n+static const int NUM_FDS_MESSAGE_CAPTURE = 1;\n \n static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n@@ -1239,6 +1242,9 @@ inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now,\n     return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n }\n \n+/** Dump binary message to file, with timestamp */\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);\n+\n struct NodeEvictionCandidate\n {\n     NodeId id;"
      }
    ]
  },
  {
    "sha": "4d1a582549bc982d55e24585b0ba06f92f21e9da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDFhNTgyNTQ5YmM5ODJkNTVlMjQ1ODViMGJhMDZmOTJmMjFlOWRh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T18:00:03Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T20:58:42Z"
      },
      "message": "Call CaptureMessage at appropriate locations\n\nThese calls are toggled by a debug-only \"capturemessages\" flag.  Default\ndisabled.",
      "tree": {
        "sha": "926a3e2d20a05a4ad93e33913310aec9a001a9fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/926a3e2d20a05a4ad93e33913310aec9a001a9fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d1a582549bc982d55e24585b0ba06f92f21e9da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e16f0e8c831b003592bb15f059ec01c6f3c2a623",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4d1a582549bc982d55e24585b0ba06f92f21e9da",
        "patch": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \".\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "81f014d9325105e26758b850d99e9a502ddb6418",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4d1a582549bc982d55e24585b0ba06f92f21e9da",
        "patch": "@@ -2864,6 +2864,9 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n     LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+        CaptureMessage(pnode->addr, msg.m_type, msg.data, /* incoming */ false);\n+    }\n \n     // make sure we use the appropriate network transport format\n     std::vector<unsigned char> serializedHeader;"
      },
      {
        "sha": "d0a743e81c2187cf05c08375503bdd730b05585f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d1a582549bc982d55e24585b0ba06f92f21e9da/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4d1a582549bc982d55e24585b0ba06f92f21e9da",
        "patch": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+        CaptureMessage(pfrom->addr, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);\n+    }\n+\n     msg.SetVersion(pfrom->GetCommonVersion());\n     const std::string& msg_type = msg.m_command;\n "
      }
    ]
  },
  {
    "sha": "e4f378a505922c0f544b4cfbfdb169e884e02be9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGYzNzhhNTA1OTIyYzBmNTQ0YjRjZmJmZGIxNjllODg0ZTAyYmU5",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T20:07:13Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:01:39Z"
      },
      "message": "Add capture parser\n\nThis commit adds contrib/message-capture/message-capture-parser.py, a python\nscript to be used alongside -capturemessages to parse the captured\nmessages.\n\nIt is complete with arguments and will parse any file given, sorting the\nmessages in the files when creating the output.  If an output file is\nspecified with -o or --output, it will dump the messages in json format\nto that file, otherwise it will print to stdout.\n\nThe small change to the unused msg_generic is to bring it in line with\nthe other message classes, purely to avoid a bug in the future.",
      "tree": {
        "sha": "a9a927c8b86d15682cdc37581febfd9562a960a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a927c8b86d15682cdc37581febfd9562a960a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f378a505922c0f544b4cfbfdb169e884e02be9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d1a582549bc982d55e24585b0ba06f92f21e9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d1a582549bc982d55e24585b0ba06f92f21e9da"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 215,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9988478f1b90c4215a89c8899d321971c0830be0",
        "filename": "contrib/message-capture/message-capture-parser.py",
        "status": "added",
        "additions": 214,
        "deletions": 0,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f378a505922c0f544b4cfbfdb169e884e02be9/contrib/message-capture/message-capture-parser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f378a505922c0f544b4cfbfdb169e884e02be9/contrib/message-capture/message-capture-parser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-parser.py?ref=e4f378a505922c0f544b4cfbfdb169e884e02be9",
        "patch": "@@ -0,0 +1,214 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+\n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Start converting the message to a dictionary\n+            msg_dict = {}\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+\n+            msg_ser = BytesIO(f_in.read(length))\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # Unrecognized message type\n+                try:\n+                    msgtype_tmp = msgtype.decode()\n+                    if not msgtype_tmp.isprintable():\n+                        raise UnicodeDecodeError\n+                    msg_dict[\"msgtype\"] = msgtype_tmp\n+                except UnicodeDecodeError:\n+                    msg_dict[\"msgtype\"] = \"UNREADABLE\"\n+                msg_dict[\"body\"] = msg_ser.read().hex()\n+                msg_dict[\"error\"] = \"Unrecognized message type.\"\n+                messages.append(msg_dict)\n+                print(f\"WARNING - Unrecognized message type {msgtype} in {path}\", file=sys.stderr)\n+                continue\n+\n+            # Deserialize the message\n+            msg = MESSAGEMAP[msgtype]()\n+            msg_dict[\"msgtype\"] = msgtype.decode()\n+\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Unable to deserialize message body\n+                msg_ser.seek(0, os.SEEK_SET)\n+                msg_dict[\"body\"] = msg_ser.read().hex()\n+                msg_dict[\"error\"] = \"Unable to deserialize message.\"\n+                messages.append(msg_dict)\n+                print(f\"WARNING - Unable to deserialize message in {path}\", file=sys.stderr)\n+                continue\n+\n+            # Convert body of message into a jsonable object\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"-n\", \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+    else:\n+        progress_bar = None\n+\n+    for capture in capturepaths:\n+        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+\n+    messages.sort(key=lambda msg: msg['time'])\n+\n+    if use_progress_bar:\n+        progress_bar.set_progress(1)\n+\n+    jsonrep = json.dumps(messages)\n+    if output:\n+        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n+            f_out.write(jsonrep)\n+    else:\n+        print(jsonrep)\n+\n+if __name__ == \"__main__\":\n+    main()"
      },
      {
        "sha": "27a09ef86c75151f13d8788215a7f6d6e880e443",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f378a505922c0f544b4cfbfdb169e884e02be9/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f378a505922c0f544b4cfbfdb169e884e02be9/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=e4f378a505922c0f544b4cfbfdb169e884e02be9",
        "patch": "@@ -1273,7 +1273,7 @@ def __repr__(self):\n # for cases where a user needs tighter control over what is sent over the wire\n # note that the user must supply the name of the msgtype, and the data\n class msg_generic:\n-    __slots__ = (\"msgtype\", \"data\")\n+    __slots__ = (\"data\")\n \n     def __init__(self, msgtype, data=None):\n         self.msgtype = msgtype"
      }
    ]
  },
  {
    "sha": "381f77be858d7417209b6de0b7cd23cb7eb99261",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODFmNzdiZTg1OGQ3NDE3MjA5YjZkZTBiN2NkMjNjYjdlYjk5MjYx",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-23T18:36:17Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:15:05Z"
      },
      "message": "Add Message Capture Test\n\nAdd a functional test for CaptureMessage.  This connects and then\ndisconnects a peer so that the handshake can be used to check if capture\nis being done correctly.\n\nIncluded in a docstring in the test is the following:\n\nFrom the data file we'll only check the structure.\n\nWe won't care about things like:\n- Deserializing the payload of the message\n    - This is managed by the deserialize methods in\n      test_framework.messages\n- The order of the messages\n    - There's no reason why we can't, say, change the order of the\n      messages in the handshake\n- Message Type\n    - We can add new message types\n\nWe're ignoring these because they're simply too brittle to test here.",
      "tree": {
        "sha": "a7c774d63fc48cb39ac6ed17be6c3e99c44bb5d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c774d63fc48cb39ac6ed17be6c3e99c44bb5d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381f77be858d7417209b6de0b7cd23cb7eb99261",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381f77be858d7417209b6de0b7cd23cb7eb99261",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/381f77be858d7417209b6de0b7cd23cb7eb99261",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381f77be858d7417209b6de0b7cd23cb7eb99261/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4f378a505922c0f544b4cfbfdb169e884e02be9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f378a505922c0f544b4cfbfdb169e884e02be9"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "113e26c4259a3aee88fd91df215614edbed480d4",
        "filename": "test/functional/p2p_message_capture.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381f77be858d7417209b6de0b7cd23cb7eb99261/test/functional/p2p_message_capture.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381f77be858d7417209b6de0b7cd23cb7eb99261/test/functional/p2p_message_capture.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_message_capture.py?ref=381f77be858d7417209b6de0b7cd23cb7eb99261",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore, MESSAGEMAP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype in MESSAGEMAP)\n+            assert(len(remainder) == 0 or not remainder.decode().isprintable())\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+\n+class MessageCaptureTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-capturemessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        capturedir = os.path.join(self.nodes[0].datadir, \"regtest/message_capture\")\n+        # Connect a node so that the handshake occurs\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        self.nodes[0].disconnect_p2ps()\n+        recv_file = glob.glob(os.path.join(capturedir, \"*/msgs_recv.dat\"))[0]\n+        mini_parser(recv_file)\n+        sent_file = glob.glob(os.path.join(capturedir, \"*/msgs_sent.dat\"))[0]\n+        mini_parser(sent_file)\n+\n+\n+if __name__ == '__main__':\n+    MessageCaptureTest().main()"
      },
      {
        "sha": "d821458226f91fb7ca38487a51ff2ca4430ecf80",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381f77be858d7417209b6de0b7cd23cb7eb99261/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381f77be858d7417209b6de0b7cd23cb7eb99261/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=381f77be858d7417209b6de0b7cd23cb7eb99261",
        "patch": "@@ -264,6 +264,7 @@\n     'p2p_add_connections.py',\n     'p2p_unrequested_blocks.py',\n     'p2p_blockfilters.py',\n+    'p2p_message_capture.py',\n     'feature_includeconf.py',\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',"
      }
    ]
  },
  {
    "sha": "bff7c66e67aa2f18ef70139338643656a54444fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmY3YzY2ZTY3YWEyZjE4ZWY3MDEzOTMzODY0MzY1NmE1NDQ0NGZl",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-10-13T11:38:59Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:15:05Z"
      },
      "message": "Add documentation to contrib folder\n\nThis commit adds brief documentation for this feature.  Included in the\njustification is the purpose of this feature as well as usage and\nfunctionality tips.",
      "tree": {
        "sha": "2835bfcb79d7c7908d92a130f1e8da385042bb28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2835bfcb79d7c7908d92a130f1e8da385042bb28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bff7c66e67aa2f18ef70139338643656a54444fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bff7c66e67aa2f18ef70139338643656a54444fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bff7c66e67aa2f18ef70139338643656a54444fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bff7c66e67aa2f18ef70139338643656a54444fe/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381f77be858d7417209b6de0b7cd23cb7eb99261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381f77be858d7417209b6de0b7cd23cb7eb99261",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381f77be858d7417209b6de0b7cd23cb7eb99261"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "730196846134f627761feb559c8a847fcf202ae9",
        "filename": "contrib/message-capture/message-capture-docs.md",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bff7c66e67aa2f18ef70139338643656a54444fe/contrib/message-capture/message-capture-docs.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bff7c66e67aa2f18ef70139338643656a54444fe/contrib/message-capture/message-capture-docs.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-docs.md?ref=bff7c66e67aa2f18ef70139338643656a54444fe",
        "patch": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessages` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    ./contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `jq . out.json`"
      }
    ]
  }
]