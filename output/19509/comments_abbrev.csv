naumenkogs,2020-07-14 07:48:07,"Concept ACK the high-level idea. I think this feature may be quite useful while debugging, and it requires very few lines of code.\n\nI have two questions though:\n1. How to better integrate it with the existing codebase? Should the format be similar to what we have now:\n`received: addr (30003 bytes) peer=0`? Or maybe it doesn't matter.\n2. Is there any threat of this feature being used for ",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-658027492,658027492,
DrahtBot,2020-07-14 07:58:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20404 (Remove names from translatable strings by hebasto)\n\nIf you consider this pull request important, please also hel",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-658032164,658032164,
troygiorshev,2020-07-20 02:39:33,"`git range-diff master cf5966a 9898fa1`\n\nMade suggested changes and fixed the Travis problem.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-660768336,660768336,
troygiorshev,2020-07-21 12:48:27,"@naumenkogs thanks for the concept ack!\n\n> How to better integrate it with the existing codebase? Should the format be similar to what we have now:\nreceived: addr (30003 bytes) peer=0? Or maybe it doesn't matter.\n\nIMO that format is good for a debug log, where things need to be compact on a single line.  For this I much prefer JSON.\n\n> Is there any threat of this feature being used f",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-661838550,661838550,
troygiorshev,2020-07-22 19:03:21,"`git range-diff master 9898fa1 cbb154e`\n\n- Trivial Rebase\n- Added a commit at the beginning cleaning up PushMessage's and ProcessMessages's if statements\n- LogMessage now uses Span\n- command -> msg_type\n- python import is now relative to file\n- other small comments and fixes",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-662631024,662631024,
troygiorshev,2020-07-23 18:47:47,"`git range-diff master cbb154e 863c6b5`\n\n- Added Test\n- Fixed Travis warning\n- Made Time Mockable",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-663172100,663172100,
theStack,2020-07-26 19:45:01,"Huge Concept ACK! Very nice idea with simple implementation, I'm also pretty sure this will be very helpful for debugging purposes. Will definitely code-review that within the next days.\n\nJust one detail I find quite odd: why create two files instead of just one and not rather include the direction as part of the serialization for each message? Is it only about saving disk space (1 byte per me",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-664031860,664031860,
troygiorshev,2020-07-27 12:46:08,"@theStack Thanks for the concept ACK!\n\n> why create two files instead of just one\n\nGood question; I considered a few ways of doing this.  Just to be clear, I create two files _per peer_.  Partially, yes, this saves 1 byte per message.  I could have also just logged everything into one file, which meant I would have had to save the peer address alongside each message as well.  Ultimately, I",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-664374225,664374225,
theStack,2020-07-28 12:53:02,"> > why create two files instead of just one\n> \n> Good question; I considered a few ways of doing this. Just to be clear, I create two files _per peer_. Partially, yes, this saves 1 byte per message. I could have also just logged everything into one file, which meant I would have had to save the peer address alongside each message as well. Ultimately, I chose the current way with the intention",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665021261,665021261,
MarcoFalke,2020-07-28 15:53:45,re-run ci,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665122781,665122781,
luke-jr,2020-07-29 23:50:00,"I don't find your ""why not Wireshark?"" very convincing... If anything, it made me less sure this should get merged.\n\nWireshark is a fairly simple and standard tool. Glancing at the code, this PR is basically just a less-user-friendly reinvention thereof.\n\nIf there are concerns with maintenance of the Wireshark dissector, as I understand it, we could fork it and maintain it out of Wireshark",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665987681,665987681,
troygiorshev,2020-07-30 13:19:37,"`git range-diff master 863c6b5 f5fffb7`\n\n- Enforced little-endian writing to match parser\n- Test uses `assert_equal` when possible",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-666359778,666359778,
troygiorshev,2020-07-31 00:46:50,rebased,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-666845848,666845848,
troygiorshev,2020-08-05 14:21:06,"`git range-diff master 6095431 0547b23`\n\n  * Values coming from `uint256` variables print as hex correctly\n  * Restructured the output, renamed some fields\n  * Some whitespace fixes\n  * Small change to `msg_generic` (unused) in `messages.py`",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669222105,669222105,
troygiorshev,2020-08-06 13:58:26,"`git range-diff master 0547b23 4205c56`\n\n  * peer logging -> message logging\n  * command -> msgtype\n  * Removed unneeded `size_t` cast\n  * Parser now properly handles unrecognized messages\n  * Parser now verified payload length\n",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669943836,669943836,
troygiorshev,2020-08-06 14:00:20,"Regarding mini_parser in the functional test: discussion [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465770624).  The popular question is ""Why reimplement the parser here, as opposed to just calling `contrib/message-logging/message-logging-parser.py`?""\n\nThe main reason, which I agree with, is brought up by @jnewbery.  \n\n> I think it's much better not to assume that the",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669945057,669945057,
troygiorshev,2020-08-07 21:38:51,"`git range-diff master 4205c56 555e48a`\n\n- Rebased (trivial)\n- Now uses `MakeUCharSpan` as suggested [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466528085)\n- Now accounts for the increase in file descriptor usage (by one)\n   - This will be improved in #18911",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-670723420,670723420,
theStack,2020-08-11 21:00:08,"I tested the logging parser on my system (running Python 3.5.2) and got the following error:\n```\n$ contrib/message-logging/message-logging-parser.py /tmp/bitcoin_func_test_9sw28m5f/node0/regtest/message_logging/127.0.0.1\:33370/*.dat\n/tmp/bitcoin_func_test_9sw28m5f/node0/regtest/message_logging/127.0.0.1:33370/msgs_recv.dat\n<class 'pathlib.PosixPath'>\nTraceback (most recent call last):\",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-672276687,672276687,
troygiorshev,2020-08-13 23:48:23,"`git range-diff master 555e48a 4fc2e39`\n\n@theStack thanks for catching that!  I had been running this all under the wrong environment the whole time. (I'll plug `conda` here, never worry about your python environment again: just make sure to pick the right one)\n\nIn fixing this I ran into a current python bug!\nhttps://discuss.python.org/t/pathlib-absolute-vs-resolve/2573\n\nTL;DR: if yo",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-673764080,673764080,
jb55,2020-08-17 20:10:44,"@luke-jr says:\n> I don't find your ""why not Wireshark?"" very convincing... If anything, it made me less sure this should get merged. Wireshark is a fairly simple and standard tool. Glancing at the code, this PR is basically just a less-user-friendly reinvention thereof. If there are concerns with maintenance of the Wireshark dissector, as I understand it, we could fork it and maintain it out of ",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675088137,675088137,
narula,2020-08-19 00:00:25,"~~It pains me a bit that this circumvents the existing logging infrastructure. Why is it not the case this is all just logged to debug.log (like everything else) and the parser works on that, filtering peer messages?~~\n\nAs @jnewbery points out below, I totally missed that this was binary logging! I should have looked more carefully.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675776414,675776414,
jnewbery,2020-08-19 08:20:39,"> It pains me a bit that this circumvents the existing logging infrastructure. Why is it not the case this is all just logged to debug.log (like everything else) and the parser works on that, filtering peer messages?\n\nThis PR dumps binary serialized messages (not text) to file, which is then post-processed by other software. The msgs_*.dat files can be enormous - hundreds of megabytes if block",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675927925,675927925,
practicalswift,2020-08-19 10:11:38,"Regarding the ""why not use Wireshark?"" discussion:\n\nI don't know about which use cases others are thinking about, but having this in `master` would help me a lot at least:\n\nI will use this feature in ways not suitable for Wireshark: both for long-term permanent capture of messages for after-the-fact trouble-shooting/debugging, and also for capturing messages that can be fed as seeds into t",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676082265,676082265,
michaelfolkson,2020-08-19 14:41:13,"I think this is a clear Concept ACK for new contributors. \n\nI was unsure on the Concept ACK for longer term contributors. The fact that this is useful for some longer term contributors (e.g. @theStack, @practicalswift) convinces me it is just about a Concept ACK given the low cost (future maintenance, additional complexity). \n\n>  If there are concerns with maintenance of the Wireshark diss",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676468262,676468262,
sipa,2020-08-19 17:18:54,"I wonder why the name ""message dumping"" was changed to ""message logging"". I find dumping a much more accurate term, as this isn't just producing a log (which sounds more like metadata recording), but an exact dump of all messages.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676555213,676555213,
troygiorshev,2020-08-21 16:48:57,"`git range-diff master 4fc2e39 ff3a39c`\n\nThanks for the review everyone!\n\nImprovement\n\n* Added a progress bar to the parser\n\nFixes\n\n* Now uses GetBoolArg as opposed to IsArgSet\n* IP addresses now have colons replaced with underscores\n* One LogMessage call site is moved, as per [this comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472931626)\n* LogMessage",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-678387396,678387396,
laanwj,2020-09-06 12:36:54,"Concept ACK, I think the dumping changes to the C++ here could entirely be replaced with a use of #19866, no strong opinion on whether we should do both or not, but I think the python analysis tooling here is useful in any case.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-687778637,687778637,
troygiorshev,2020-09-23 02:11:01,"`git range-diff master ff3a39c ba68f02`\n\ntrivial rebase",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-697079425,697079425,
jnewbery,2020-09-23 09:51:47,"@troygiorshev what's the status here? You've rebased, but there are unaddressed review comments from a few contributors. CI is also failing.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-697259250,697259250,
troygiorshev,2020-10-07 04:09:20,"`git range-diff master ba68f02 5d5aeca`\n\nRebased",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704679027,704679027,
troygiorshev,2020-10-07 04:55:20,"`git range-diff master 5d5aeca 18bcf97`\n\n* Renamed ""Logging"" to ""Capture"" throughout!",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704691194,704691194,
troygiorshev,2020-10-07 05:08:19,"`git range-diff master 18bcf97 d2d3d12`\n\n* Now uses `seek` instead of `read`\n* Fixed `mininode` to `p2p` problem\n* Removed unneeded `optimistic_send` boolean from `PushMessage`\n\nStill TODO: Documentation!",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704694969,704694969,
practicalswift,2020-10-07 09:30:20,"Tested ACK d2d3d12d94477d0d377c82738832dfca2ac9e531\n\nLooking forward to having this in `master`. This functionality is super useful for 1.) learning purposes, 2.) troubleshooting purposes, and 3.) fuzzing purposes (easy generation of seed corpora from actual message data).\n\nI encourage others to review. To try this out:\n\n```\n$ gh checkout pr 19509 && make distclean && ./autogen.sh &&",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704814038,704814038,
jnewbery,2020-10-09 09:57:41,I'm planning to rereview this once the CI failures are fixed and the documentation is done.,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-706088661,706088661,
troygiorshev,2020-10-14 06:17:31,"`git range-diff master d2d3d12 d0ffb34`\n\n* Fixed remaining `mininode` to `p2p` issue\n* Added documentation!",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708183871,708183871,
troygiorshev,2020-10-14 06:17:48,"`git range-diff master d0ffb34 9a9314a`\n\n* Rebased to master to fix Travis\n\nAll pending TODOs for this PR are complete.  Thanks to everyone who has reviewed so far, should be an easy reACK from many of you!",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708183974,708183974,
promag,2020-10-14 07:07:37,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708206663,708206663,
practicalswift,2020-10-14 08:21:24,"Removed my ACK (temporarily) in light of @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472499) about the unrelated change in `src/net.cpp`. \n\nHopefully that will be resolved soon and I'd be glad to re-review :)",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708242978,708242978,
promag,2020-10-14 13:44:05,"We could (also) expose these via ZMQ, just saying.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708411183,708411183,
troygiorshev,2020-10-16 02:41:54,"`git range-diff master 9a9314a 2418ec6`\n\n* Reverted the change to optimisticSend\n\nTravis should™ pass now.  I can't get the fuzz tests to build, but I get the same linker error on `master` as I do here, so I assume it's unrelated. ",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-709696165,709696165,
troygiorshev,2020-10-16 09:46:57,"Cirrus failing to fetch `sqlite-autoconf-3320100.tar.gz`, 404.  Unrelated.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-709944745,709944745,
practicalswift,2020-10-16 13:48:24,ACK 2418ec658ccd2e8e033bced0f5b7c183946940ac,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-710058576,710058576,
theStack,2020-11-15 19:59:03,"The changes themselves LGTM. However, while testing the feature on mainnet, the parsing tool `contrib/message-capture/message-capture-parser.py` encountered a problem decoding the following `version` message:\n\n```\n$ xxd -g1 msgs_recv.dat\n00000000: 75 da 89 ca 28 b4 05 00 76 65 72 73 69 6f 6e 00  u...(...version.\n00000010: 00 00 00 00 6b 00 00 00 60 ea 00 00 00 00 00 00  ....k...`.......",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-727627176,727627176,
troygiorshev,2020-11-18 00:42:40,"`git range-diff master 2418ec6 4690881`\n\n* Fixed version fRelay bug\n  * The parser now more closely matches how parsing works in the test framework and in bitcoind\n* Documentation now follows PEP 0394\n* Removed cat overuse in documentation\n\nFirst of all, many thanks @theStack for both finding the bug and identifying exactly what causes it.  Your guess was spot on and the links to the",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729302211,729302211,
troygiorshev,2020-11-18 01:03:28,"Also, I thought sharing the binary file as a hexdump worked great!  Thanks for adding the tip to use xxd's `-r` flag.  I personally use HxD in Windows to view and edit binary files.  It's a GUI so everything's messy - someone who uses xxd with vim might have a good reason to have binary files shared one way or another.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729308771,729308771,
MarcoFalke,2020-11-18 06:29:04,"another example: In commit fa74d3d720f I removed unused deserialize code, because supported versions of Bitcoin Core would never serialize such a version message. (We only use the test framework to test supported versions of Core). So I am wondering if the message capture may ever write a message that can't be parsed by our test code. And if there is a way to protect against this.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729462566,729462566,
practicalswift,2020-11-18 10:02:18,"Is there any chance this PR could get a release milestone?\n\nFWIW I love this feature and would love to see it in `master` soon :)  Thanks @troygiorshev!",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729571242,729571242,
troygiorshev,2020-11-25 07:01:58,"> So I am wondering if the message capture may ever write a message that can't be parsed by our test code. And if there is a way to protect against this.\n\nIdeally, in my mind, our test code should function as closely as possible to Core.  So, if a message can be parsed by Core it should be able to be parsed by our test code.  You're right that this will get tricky for undefined behavior or bro",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733509943,733509943,
MarcoFalke,2020-11-25 07:06:01,"the message capture code will write the message *before* parsing. So except for the message header (message type) nothing is parsed, it could be any raw byte string. There is no way the test framework could make sense of that if not by accident.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733511635,733511635,
troygiorshev,2020-11-25 07:20:38,"Oh, yeah you're completely right, thanks.\n\nLuckily (due to #19107) only messages with a valid header are pushed onto the vRecv queue, given to ProcessMessages, and parsed by the message capture parser.  So we can trust that the header is workable.  This will allow us to simply skip ~~messages~~ files that contain messages that fail deserilization, and we should be able to continue parsing all ",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733517645,733517645,
troygiorshev,2021-01-19 20:49:26,"`git range-diff master 4690881 abbb8ac`\n\n* Parser now no longer crashes when it reaches an unrecognized or broken message.  Instead it simply skips that message and the rest of the file the message came from.\n* Removed an unused import from the previous force push",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763130904,763130904,
troygiorshev,2021-01-19 21:03:03,"`git range-diff master abbb8ac d2e0f73`\n\n* Rebased",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763139446,763139446,
troygiorshev,2021-01-19 21:46:48,"`git range-diff master d2e0f73 af8bcd1`\n\n* Fixed two typos in documentation",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763162247,763162247,
practicalswift,2021-01-20 02:43:59,Tested ACK af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763289712,763289712,
troygiorshev,2021-01-21 19:39:19,"`git range-diff master af8bcd1 a17b250`\n\n* Implemented various style improvement suggested by jnewbery above",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-764889339,764889339,
jnewbery,2021-01-22 10:22:01,"> Slightly less sure about separating send/receive, but seems ok.\n\nThis was my suggestion. Maybe a hangover from my telecoms days when it was common to dump different streams for send/recv. The benefit here is that we save one bit (really one byte since there's nowhere to stuff it in the other metadata fields) per message because we don't need a flag to indicate send/recv. As well as that, the",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765304301,765304301,
MarcoFalke,2021-01-22 10:53:12,"> ACK! I think a directory structure of <IP_port>/<peerid>/[send|recv].dev would work very nicely.\n\nI think that could be confusing, because the same IP_port can have different peerid during the same connection (reconnect), but also can have the same peerid across restarts. So this make it *harder* to get the msgs of just one session.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765320311,765320311,
MarcoFalke,2021-01-22 10:58:01,"There has been some feedback, but at the very least you need to fix the linter for this to be merged.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765322561,765322561,
jnewbery,2021-01-22 11:02:29,"> I think that could be confusing, because the same IP_port can have different peerid during the same connection (reconnect), but also can have the same peerid across restarts. So this make it harder to get the msgs of just one session.\n\nAh, good point. I'd missed sipa's point about using a `(our own node startup time, peer id)` pair to handle restarts.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765324760,765324760,
practicalswift,2021-01-22 16:00:03,"@sipa \n\n> Concept ACK. I really like the approach of having separate files per peer/connection. Slightly less sure about separating send/receive, but seems ok.\n\nAgreed: I also have a slight preference towards combining send and recv in the same file for these type of captures.\n\nFor ""request-response"" analysis it is really nice to be able to have the messages in correct order without ha",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765508093,765508093,
sipa,2021-01-22 19:09:15,"@jnewbery \n\n> The benefit here is that we save one bit (really one byte since there's nowhere to stuff it in the other metadata fields) per message because we don't need a flag to indicate send/recv.\n\nThe direction could be stored in the top bit of the size field. The max protocol message size is 4000000 bytes, so even 3 bytes would be enough if we really wanted to. A variable-length encod",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765625996,765625996,
jnewbery,2021-01-22 19:28:22,"> Especially if we'd go in a direction of separating separate sessions to the same ip/port, I think there is an elegance to having exactly 1 file = 1 session.\n\nI agree that this seems very nice. I don't have any objection to changing the output to be this way.\n\n> What about a directory structure of `<CLIENT_NAME>_<CLIENT_VERSION>/<ip>_<port>/<timestamp>_<peerid>.dat`?\n\nI'm less convinc",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765635682,765635682,
sipa,2021-01-22 19:33:19,"> I'm less convinced of this.\n\nYes, just a suggestion to hear what people think.\n\n> For one, those details can easily be fished out of the received version message in the file.\n\nNote that I'm talking about the version of the *dumping* node, not of the peer we're connecting to (that may also be interesting of course, but is a bit harder as it means you only know the filename after recei",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765637994,765637994,
troygiorshev,2021-01-22 21:50:50,"> why not capture messages after CNode::ReceiveMsgBytes?\n\nThis has been brought up a couple times now, and it's a great question, so it's worth a full response (that won't be buried in resolved conversations).\n\nMy priority in this PR is that the capture of messages always occurs in order from an _application layer_ perspective.  Because of this, I have to capture messages in the MessageHan",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796,765704796,
sipa,2021-01-22 22:16:20,"@troygiorshev That's a great point. I was thinking that the difference between net-level and net_processing-level ordering would only be different interleaving across peers, but you're right to point out it even obscures the processing within one peer. I agree it's valuable to dump in processing order.\n",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765715052,765715052,
troygiorshev,2021-01-23 19:50:36,"> is really nice to be able to have the messages in correct order without having to correlate timestamps from two different files to produce an ""ordered"" file covering the entire flow.\n\nThis is already done for you by the parser, just give it both files and the messages will be interleaved automatically in the output file.  If I'm understanding you correctly, the following should do what you'r",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766168963,766168963,
troygiorshev,2021-01-23 21:17:50,"`git range-diff master a17b250 bff7c66`\n\n* Message capture now more gracefully handles unrecognized and corrupted messages\n* Corrected typo in docs\n* Added comment to clarify how timestamps are being used here\n* A couple small improvements to the test\n\nThanks so much for the review everyone!\n\nUp soon: 1 file = 1 session",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766180700,766180700,
MarcoFalke,2021-01-24 11:14:58,"re-ACK bff7c66e67aa2f18ef70139338643656a54444fe only some minor changes: 👚\n\n* doc fixups\n* append messages in the python parser even when the msg type is unknown or something can not be decoded\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK bff7c66e67aa2f18ef70139338643656a54444fe only som",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766330486,766330486,
michaelfolkson,2021-01-24 14:01:56,Still need to do **a lot** of playing around with this. Interested if you have given any thought @troygiorshev on what questions this tool can easily answer (without additional digging) and what is possible for future improvements/future PRs. Don't want to derail review of this PR though so set up a StackExchange [question](https://bitcoin.stackexchange.com/questions/101799/how-can-i-obtain-a-bett,https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766352948,766352948,
MarcoFalke,2021-02-02 10:18:39,"The nit here can be addressed, once you have to rebase: https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562515326",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771530227,771530227,
jnewbery,2021-02-02 11:35:17,"> Up soon: 1 file = 1 session\n\n@troygiorshev Are you still planning to do this? ",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771574041,771574041,
jnewbery,2021-02-02 12:01:24,"utACK bff7c66e67aa2f18ef70139338643656a54444fe\n\nThis isn't part of the public interface, so the file layout can be changed in a follow-up.",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771587318,771587318,
leonardojobim,2021-02-10 07:21:02,"I ran the message-capture-parser.py and received the following error:\n\n```\nError:\nTraceback (most recent call last):\n  File ""./message-capture-parser.py"", line 214, in <module>\n    main()\n  File ""./message-capture-parser.py"", line 199, in main\n    process_file(str(capture), messages, ""recv"" in capture.stem, progress_bar)\n  File ""./message-capture-parser.py"", line 159, in process_",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-776502093,776502093,
jnewbery,2021-02-18 10:42:33,"Nice find @leonardojobim! You could also test for the list's non-emptiness by checking its booleanness, which is maybe more pythonic:\n\n```python\nelif isinstance(val, list) and val and slot in HASH_INT_VECTORS and isinstance(val[0], int):\n```\n\nDo you mind opening a PR for this?",https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-781252090,781252090,
MarcoFalke,2020-07-14 07:19:41,"I don't think it is needed in python to duplicate how the script was called in the help.\n\n```suggestion\n        epilog=""EXAMPLE \n\t{sys.argv[0]} -o out.json <data-dir>/peer_logging/**/*.dat"",\n```\n\nIn case you wanted to do this because the import (` sys.path.append('test/functional')`) is relative to the pwd, you could make it relative to this file, which would be more stable.\n\nAls",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454153812,454153812,contrib/peer-logging/peer-logging-parser.py
naumenkogs,2020-07-14 07:38:12,"""dumpmessages""?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454163465,454163465,src/net_processing.cpp
jnewbery,2020-07-14 08:25:32,"use `fs::create_directories` (which is currently just an alias for boost::filesystem`, but means that the std filesystem can be substituted in when we upgrade our c++ version.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454189508,454189508,src/net.cpp
jnewbery,2020-07-14 08:26:09,Does this mean we try to create the directory every time we send/receive a message? Is that a problem?,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454189846,454189846,src/net.cpp
jnewbery,2020-07-14 08:27:21,Can this logic be moved to `ReceiveMsgBytes` so that all the message dumping is contained within the net layer?,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454190521,454190521,src/net_processing.cpp
troygiorshev,2020-07-14 11:28:35,ah thanks fixed!,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454288639,454288639,src/net_processing.cpp
troygiorshev,2020-07-14 16:01:25,"Yes!  It's unfortunate that we have some MessageHandler code in net.cpp.  Right now all of the logging is done is done in MessageHandler, I think we should keep it that way.  It would be nice to move PushMessage to net_processing some day.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454466665,454466665,src/net_processing.cpp
practicalswift,2020-07-14 16:28:11,"```suggestion\nvoid LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)\n```\n\nRationale: [F.15: Prefer simple and conventional ways of passing information ](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional) (C++ Core Guidlines) :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454484398,454484398,src/net.cpp
jnewbery,2020-07-14 17:11:49,"Yes, you're right. Even though PushMessage is in net.cpp, it's always executed on the MessageHandler thread.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454512068,454512068,src/net_processing.cpp
practicalswift,2020-07-14 17:18:25,"```suggestion\n    f.write((const char*)data.data(), data.size());\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516050,454516050,src/net.cpp
practicalswift,2020-07-14 17:19:11,"```suggestion\nvoid LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming);\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516500,454516500,src/net.h
practicalswift,2020-07-14 17:19:41,"The scope of `tmp` can be limited to the `gArgs.IsArgSet(""-logmessages"")` case below.\n\n(Or perhaps skip introducing a new variable - the name `tmp` really doesn't add any information to the reader.)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516814,454516814,src/net_processing.cpp
practicalswift,2020-07-14 17:33:50,"Could use `CAutoFile` instead (which provides proper serialization automatically)?\n\nNo need for `c_str()` here :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454525647,454525647,src/net.cpp
practicalswift,2020-07-14 17:42:24,"Nit: Could be introduced when needed?\n\nRationale: [ES.21: Don’t introduce a variable (or constant) before you need to use it](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce) (C++ Core Guidelines) :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454531068,454531068,src/net.cpp
Saibato,2020-07-14 19:18:41,"Nit. If if log messages where enabled  by` -logmessages=<LogMessageDir> `not empty\nwe would have a separate LogMessagesDir , instead of logging in DataDir by default. And DataDir should be always <> LogDir.imho. see   #19419  ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454586940,454586940,src/net.cpp
troygiorshev,2020-07-17 13:11:13,"This is ok.  As per the boost docs: ""Creation failure because [base_path] resolves to an existing directory shall not be treated as an error.""",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456432065,456432065,src/net.cpp
troygiorshev,2020-07-17 14:06:06,"I can't imagine this is a performance hit, but if anyone is worried I guess this could be moved to the CNode's constructor.  I would want to first be really sure that a node's address won't ever change.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456464413,456464413,src/net.cpp
troygiorshev,2020-07-20 00:51:12,"> \n> \n> Nit. If if log messages where enabled by`-logmessages=<LogMessageDir>`not empty\n> we would have a separate LogMessagesDir , instead of logging in DataDir by default. And DataDir should be always <> LogDir.imho. see #19419\n\nI'll consider this, having the log directory configurable would be nice.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456978790,456978790,src/net.cpp
troygiorshev,2020-07-20 02:36:52,thanks :),https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998242,456998242,src/net.cpp
troygiorshev,2020-07-20 02:37:11,"Thanks for suggesting this, `CAutoFile` is much nicer",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998332,456998332,src/net.cpp
troygiorshev,2020-07-20 02:37:23,done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998405,456998405,src/net.cpp
troygiorshev,2020-07-20 02:37:39,"good point, done",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998477,456998477,src/net_processing.cpp
MarcoFalke,2020-07-20 05:47:11,"nit:\n\n```suggestion\n        if (gArgs.IsArgSet(""-logmessages"")) {\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457072901,457072901,src/net.cpp
MarcoFalke,2020-07-20 05:47:30,"nit:\n\n```suggestion\n            LogMessage(*pnode, msg.m_type, msg.data, /* incoming */ false);\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457073081,457073081,src/net.cpp
MarcoFalke,2020-07-20 05:53:02,"nit: Only valid message types are logged, not junk data\n\n```suggestion\nvoid LogMessage(const CNode& node, const std::string& msg_type, const std::vector<unsigned char>& data, bool is_incoming)\n```\n\nAlso, instead of copying the message data into a new vector, why not use a cheap std::span?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457075888,457075888,src/net.cpp
MarcoFalke,2020-07-20 05:54:42,"Q: Is it important that this time is equal to the receive time of the message?\n\nIf yes, you could pass in the time from the caller. (msg.m_time)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457076718,457076718,src/net.cpp
troygiorshev,2020-07-22 12:39:01,"The exact time doesn't matter, this is mainly used for sorting the messages later.  All that's important is that messages that are sent later have a later time.  To avoid races I only call LogMessage from the MessageHandler thread.  When sending a message in PushMessage, we don't have anything like msg.m_time until the message is into SocketHandler.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458760191,458760191,src/net.cpp
troygiorshev,2020-07-22 12:44:55,"I'd prefer to keep this as it is.  I understand (and agree with) ES.21 completely, but I'm trying to treat `time` as an argument, not a local, which is why it's right at the top.  I would love to pass it in instead but practically can't (see [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458760191)).\n\nIf anyone is strongly against this I'll move it.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458763531,458763531,src/net.cpp
troygiorshev,2020-07-22 12:47:50,"Ah I misread the style guide!\n\nNow that I'm adding braces to this, I'll add them to the rest of PushMessage.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458765292,458765292,src/net.cpp
troygiorshev,2020-07-22 18:33:21,"done\n\n(That sort of format string is something I'm looking forward to in 3.6 😄)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000213,459000213,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-07-22 18:33:30,A test is in the works,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000283,459000283,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-07-22 18:33:39,done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000374,459000374,src/net.cpp
troygiorshev,2020-07-22 18:33:47,Good point!  done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000465,459000465,src/net.cpp
practicalswift,2020-07-22 20:46:03,"Please avoid change unrelated lines (unless there are good reasons doing so). It makes it harder to reason about the actual changes if one includes unrelated whitespace changes in the same commit :)\n\nApplies also below and throughout this PR.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459072714,459072714,src/net.cpp
practicalswift,2020-07-22 20:50:44,Same here (and below): don't change unrelated lines :),https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459075159,459075159,src/net_processing.cpp
troygiorshev,2020-07-23 02:05:34,"I made these changes in response to [this comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457072901).  As far as I can tell they're all in the first commit 84a79d61cef5c9386597869adccda4aa5992cc96 (which only contains the unrelated changes), and they don't show up at all in `git range-diff master 9898fa1 cbb154e`.  i.e. on my machine I haven't mixed any real changes with whitesp",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459179239,459179239,src/net.cpp
jnewbery,2020-07-23 10:14:25,"This seems reasonable. Although the general advice is to not fix style on lines that you're not otherwise touching, if it's all contained within a single cleanup commit, then I think that's also fine.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459347986,459347986,src/net.cpp
MarcoFalke,2020-07-23 18:23:55,"```suggestion\n    for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n```\n\nto fix the compile failure:\n\n```\nnet.cpp:2880:39: error: comparison of integers of different signs: 'int' and 'const size_t' (aka 'const unsigned long') [-Werror,-Wsign-compare]\n\n    for (int i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n\n                        ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459643471,459643471,src/net.cpp
troygiorshev,2020-07-23 18:45:29,"I'm not sure why this didn't come up before, and still doesn't come up on my machine :/  Regardless, fixed.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459655628,459655628,src/net.cpp
MarcoFalke,2020-07-23 19:26:02,I don't know either: #19123,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459677362,459677362,src/net.cpp
theStack,2020-07-28 12:55:24,"This way of serialization doesn't seem to be endian-agnostic, i.e. it depends on the architecture whether this is written out in big or little endian format. In the parsing script you assume both time and data size are stored in little endian, hence this needs to be enforced here. I think `ser_writedata32` (see `serialization.h`) can be used for this.\nIt's a pity though that the CI tests don't f",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461556730,461556730,src/net.cpp
theStack,2020-07-28 12:55:28,"Same as above, this should be guaranteed to be written out in little endian byte order.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461556757,461556757,src/net.cpp
MarcoFalke,2020-07-28 16:45:10,"would be good to use assert_equal for debugability \n\nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/712616300#L3056",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461724204,461724204,test/functional/p2p_peer_logging.py
troygiorshev,2020-07-30 13:15:04,done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462986846,462986846,src/net.cpp
troygiorshev,2020-07-30 13:17:02,"Thanks for catching this!  When fixing it I considered if it was better to instead change the test to follow the system endianness (with python's `sys.byteorder`).  I think fixing a particular endianness for the .dat files, as temporary as they are, is better.  Someone might generate them on a BE system and then parse them on a LE system one day...",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462988168,462988168,src/net.cpp
troygiorshev,2020-07-30 13:17:11,done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462988274,462988274,test/functional/p2p_peer_logging.py
jnewbery,2020-07-31 17:01:48,chmod this to 755 so it's executable.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463725486,463725486,contrib/peer-logging/peer-logging-parser.py
jnewbery,2020-07-31 17:02:13,nit: pep8 says at least 2 spaces before an inline comment :grimacing: ,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463725672,463725672,contrib/peer-logging/peer-logging-parser.py
jnewbery,2020-07-31 17:14:44,"`""recv"": true` and `""recv"": false` don't seem very friendly here. Perhaps `""direction"": ""received""` and `""direction"": ""sent""` is better?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463731380,463731380,contrib/peer-logging/peer-logging-parser.py
jnewbery,2020-07-31 17:16:55,"You should deserialize the body of the message to a sub-object. That means if any message types contain fields called 'msgtype', 'time', 'length' or 'recv', they won't conflict with the metadata.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463732392,463732392,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-04 20:11:49,"oof thanks, TIL\n\n(I'm surprised nothing caught this)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465302710,465302710,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-04 20:21:36,"I'll meet you in the middle and do `""direction"": ""recv""` and `""direction"": ""sent""` :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465307759,465307759,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-04 20:26:23,done,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465310100,465310100,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-04 20:26:40,"done, and improved the names and order",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465310222,465310222,contrib/peer-logging/peer-logging-parser.py
MarcoFalke,2020-08-05 14:31:14,"Instead of reimplementing the parser here, couldn't this just call `contrib/peer-logging/peer-logging-parser.py {dat_file}`?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465770624,465770624,test/functional/p2p_peer_logging.py
theStack,2020-08-06 08:52:03,"I think the cast to `size_t` is not needed here? `msg.m_recv` is an instance of `CDataStream`, its `size()` method returns `CDataStream::size_type` which is a typedef to a `std::vector::size_type`, which again is `size_t`.\n```suggestion\n        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), msg.m_recv.size()}, /* incoming */ true);\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466248108,466248108,src/net_processing.cpp
theStack,2020-08-06 09:05:50,"The ""command"" terminology should not be used anymore for network messages, we just call it ""message type"" now (see e.g. PRs https://github.com/bitcoin/bitcoin/pull/18533, https://github.com/bitcoin/bitcoin/pull/18610, https://github.com/bitcoin/bitcoin/pull/18937). Replacement suggestions: . s/COMMAND_SIZE/MSGTYPE_SIZE and s/command/msg_type (in the parsing code below).",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466255925,466255925,contrib/peer-logging/peer-logging-parser.py
theStack,2020-08-06 09:29:34,+1 on code deduplication. The included timestamps check (all timestamps are past genesis block) can be done on the result rather than directly in the parser.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466279593,466279593,test/functional/p2p_peer_logging.py
theStack,2020-08-06 09:33:52,"For skipping unrecognized messages, I think a dummy read on `f_in` (`length` bytes) is missing here to advance the file pointer to the next message.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466284790,466284790,contrib/peer-logging/peer-logging-parser.py
jnewbery,2020-08-06 09:58:11,I think it's much better not to assume that the contrib directory is available. Functional tests can be run when the build directory is out of tree and the source directory is not available. It makes sense to me to have a limited parser in the test case rather than importing from somewhere else.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466302307,466302307,test/functional/p2p_peer_logging.py
theStack,2020-08-06 10:05:24,"Could check here after the deserialization if the `f_in` was advanced by the expected `length` (what is currently done in the functional test), e.g. something like:\n```\n            msg_start_pos = f_in.tell()\n            ...\n            msg.deserialize(f_in)\n            ...\n            msg_length = f_in.tell() - msg_start_pos\n            assert_equal(length, msg_length)\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466306326,466306326,contrib/peer-logging/peer-logging-parser.py
theStack,2020-08-06 10:30:26,"I agree that the dependency on the contrib directory is a drawback, but then on the other hand we already have a test importing from contrib: `feature_loadblock.py` (uses `contrib/linearize` scripts). Is there really a need to run functional tests without the other sources available? They are all part of the same repository.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466318870,466318870,test/functional/p2p_peer_logging.py
jnewbery,2020-08-06 10:40:29,"> Is there really a need to run functional tests without the other sources available?\n\nYes, it's an explicit usage pattern to build out of tree and be able to run tests separately from the source directory.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466323684,466323684,test/functional/p2p_peer_logging.py
theStack,2020-08-06 11:51:25,"Hm, so the usage pattern in this case is ""copy the `test/functional` folder somewhere"" and executing from there, decoupled from the repository, should still work? Still not convinced why anyone should ever want/do that (maybe I'm missing something there).",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466357165,466357165,test/functional/p2p_peer_logging.py
jnewbery,2020-08-06 12:32:17,"Search for ""out of tree builds"" in this repo. You'll see lots of issues/PRs for running tests out of tree.\n\n> I agree that the dependency on the contrib directory is a drawback, but then on the other hand we already have a test importing from contrib: feature_loadblock.py (uses contrib/linearize scripts).\n\nYes, and I think that's a terrible pattern that we shouldn't repeat. Importing code ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466377977,466377977,test/functional/p2p_peer_logging.py
troygiorshev,2020-08-06 12:58:39,"I imagine I did this because I had to, but you're right I see no reason for this cast (and clang++ agrees).  Thanks!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466392607,466392607,src/net_processing.cpp
troygiorshev,2020-08-06 13:02:08,"Thanks for catching this!  This ""command -> message type"" switch is a monumental effort that I'm happy to be a part of.\n\nI'm going to choose `msgtype` not `msg_type` for the same reasons you did in #18610 :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466394744,466394744,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-06 13:05:52,"It is, thanks!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466397116,466397116,contrib/peer-logging/peer-logging-parser.py
troygiorshev,2020-08-06 13:23:02,"I like this a lot, thanks",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466407938,466407938,contrib/peer-logging/peer-logging-parser.py
theStack,2020-08-06 16:15:27,"Sorry that I didn't noticed on the earlier review today, but: if you rebase on master, this will unlock you the nice `MakeUCharSpan` (see commit e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab, introduced with PR #19326 that was merged 3 days ago), not needing to cast anything anymore. :tada: ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466528085,466528085,src/net_processing.cpp
theStack,2020-08-07 11:43:51,"To my understanding the primary point of out of tree builds is separation between the _build artifacts_ (i.e. everything spit out by `make`, like binaries, manpages etc.) and the source folder. I guess our disagreement stems from the fact that in your view, `contrib` is part of the source folder, while in my view it isn't -- it only contains scripts and no compilation units, hence no ending up in ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466988386,466988386,test/functional/p2p_peer_logging.py
MarcoFalke,2020-08-07 11:47:58,"The functional test scripts itself live in the *source* directory. The build directory has a symlink to it. As long as the script in contrib is also symlinked to the build dir, this should not affect out-of-tree builds at all. And all ci scripts use out-of-tree builds, so if this lead to issues, it would be noticed immediately.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466989983,466989983,test/functional/p2p_peer_logging.py
troygiorshev,2020-08-07 20:40:08,"Thanks, I'll do this!  Another upcoming improvement is #19660, but I'll try and leave that for a follow-up as not to increase the scope too far here.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r467258687,467258687,src/net_processing.cpp
troygiorshev,2020-08-07 20:41:54,"I've elaborated on why I did this [below](https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669945057).  If anyone is still against this choice, please let me know!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r467259378,467259378,test/functional/p2p_peer_logging.py
adamjonas,2020-08-18 19:41:17,"```suggestion\n        # Connect and disconnect a node so that the handshake occurs\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472436516,472436516,test/functional/p2p_message_logging.py
amitiuttarwar,2020-08-18 23:18:18,conflicts with what? ,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472545184,472545184,contrib/message-logging/message-logging-parser.py
amitiuttarwar,2020-08-18 23:31:47,"I'm not following why this `disconnect_p2ps()` is needed here. The comment above says ""so that the handshake occurs"", but this doesn't clarify anything for me. do you mean the version handshake? why do we need to disconnect for the version handshake to occur?\n\nmy understanding of this test is that it parses through the sent & received data files to check the structure of each recorded message ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472549706,472549706,test/functional/p2p_message_logging.py
narula,2020-08-18 23:38:09,"Might you add something to this affect to the commit title so people know that? I didn't get that from reading ""Clean PushMessage and ProcessMessages"". Maybe ""Whitespace only changes in PushMessage and ProcessMessages""",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472551723,472551723,src/net.cpp
narula,2020-08-18 23:51:36,"I don't think "".dat"" is the right extension. These are logs, not data, and should end in "".log"".",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472555719,472555719,src/net.cpp
jonatack,2020-08-19 10:22:03,"at HEAD 4fc2e3906, there are still a number of misformatted inline comments and a few other nits that you would see by running the new python files through pycodestyle and black (with black, I tend to ignore the single-to-double quote changes and some of the newlines for brackets, but otherwise it's useful)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472923476,472923476,contrib/peer-logging/peer-logging-parser.py
practicalswift,2020-08-19 10:37:08,"Could this be moved to the start of the function right after the `LogPrint(BCLog::NET, …)` call to a.) avoid being run while we're holding `pnode->cs_vSend` (which we don't need for logging), and b.) make sure all `sending %s (%d bytes) peer=%d``BCLog::NET` debug log entries are guaranteed to have a corresponding entry in the message capture file (in the absence of fatal logging errors)?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472931626,472931626,src/net.cpp
jonatack,2020-08-19 10:38:06,"here and in `net.cpp::2834`, this may be somewhat more robust:\n\n```diff\n\n-    if (gArgs.IsArgSet(""-logmessages"")) {\n+    if (gArgs.GetBoolArg(""-logmessages"", false)) {\n```\n\nsee https://github.com/bitcoin/bitcoin/pull/19089/files#diff-321303fddcf725df060981d626a05df9R619 and tests at https://github.com/bitcoin/bitcoin/pull/19089/files#diff-ff77e31823822bc143e3113aaf85d4b9R64 that ii",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472932199,472932199,src/net_processing.cpp
practicalswift,2020-08-19 10:40:09,"To make it easier to reason about this function (and its locking requirements) from looking at the function signature, what about replacing `const CNode& node` with `const CAddress& address` since that is what is actually used (`node.addr`)?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472933214,472933214,src/net.cpp
practicalswift,2020-08-19 10:41:22,I think `.dat` is fine since this is a non-text binary file. Personally I expect files with the `.log` suffix to be enjoyable in `less` (more or less) :),https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472933882,472933882,src/net.cpp
jonatack,2020-08-19 11:42:17,"I think the help should specify the `message_logging` directory location and also mention the location of and need to use the `contrib/message-logging/message-logging-parser.py` script.\n\nPerhaps also add a markdown documentation file somewhere relevant that makes sense.\n\nAll of this, along with usage info, might also usefully be in the header docstring of the parser script and make sure it",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472965651,472965651,src/init.cpp
jonatack,2020-08-19 11:44:31,"There may be a better way to do it, but I found the stdout to be much more readable with:\n```diff\n import os\n+import pprint\n import sys\n...\n-        print(jsonrep)\n+        pprint.pprint(jsonrep)\n```\nThere seems to be a formatting issue due to unescaped double quotes, however.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472966785,472966785,contrib/message-logging/message-logging-parser.py
narula,2020-08-19 13:06:12,"Yes, please disregard my comment, I misunderstood!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473013742,473013742,src/net.cpp
glozow,2020-08-19 15:55:46,"I have the same question - [by default](https://github.com/bitcoin/bitcoin/blob/e9b30126545d6ddd8772363e4079d1e4908ad117/test/functional/test_framework/test_node.py#L515), `add_p2p_connection` waits for verack.\n\nMy initial guess was that disconnecting the peer closed the files or unlocked a mutex, but I don't think this is the case 🤔  ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473136113,473136113,test/functional/p2p_message_logging.py
FelixWeis,2020-08-19 17:52:07,"or just piping trough `jq`, gives you colors too",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473217347,473217347,contrib/message-logging/message-logging-parser.py
FelixWeis,2020-08-19 17:53:20,might be an issue on windows. `:` is not a valid file name char.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473218039,473218039,src/net.cpp
jonatack,2020-08-19 18:03:17,The docs could also helpfully mention that passing both send and recv files to the parser will interleave them in order.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473223806,473223806,src/init.cpp
ariard,2020-08-19 23:47:52,Each open file should have its fd so `nMaxConnections` * 2 ?,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473444931,473444931,src/net.h
ariard,2020-08-19 23:51:25,Have you tried to fit this call in `CConnman::SocketHandler` like when we iter to increment `nSizeAdded` ? I think it would be cleaner to avoid leaking more network-level processing in a p2p protocol processing function.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473447384,473447384,src/net_processing.cpp
theStack,2020-08-20 11:19:51,"For only advancing the file pointer, the `seek` method would probably be more appropriate (see e.g. https://code-maven.com/python-seek):\n```suggestion\n                f_in.seek(length, os.SEEK_CUR)\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473895565,473895565,contrib/message-logging/message-logging-parser.py
troygiorshev,2020-08-20 12:59:08,"This part of the parser recognizes a uint256 by the name of the member.  It doesn't take into account the name of the class.  In some classes (in messages.py), `self.hash` refers to one of these ""int-encoded"" uint256s, and in others it does not.\n\ne.g.\nCOutPoint, `self.hash` is an ""int-encoded"" uint256\nCTransaction, `self.hash` is a str\n\nThis is here to justify the `isinstance(val, int)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473949673,473949673,contrib/message-logging/message-logging-parser.py
troygiorshev,2020-08-20 13:11:49,"You're both right, it isn't needed.\n\nI thought it was just good form to disconnect the peers at the end of the test.  Makes it easier for someone to expand the test later.\n\nI'll fix the comment",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473957438,473957438,test/functional/p2p_message_logging.py
troygiorshev,2020-08-20 13:34:25,"thanks, fixed",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473978706,473978706,src/net_processing.cpp
troygiorshev,2020-08-20 13:41:55,"Yup, it can, and I agree with you that it should be.  The locking in PushMessage is a bit of a mess, which I fix up a little in #19673.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473986877,473986877,src/net.cpp
troygiorshev,2020-08-20 13:46:54,"I like this, thanks.  One day LogMessage may use other attributes of a CNode, but it can be easily changed back when the time comes.  Done.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473992333,473992333,src/net.cpp
troygiorshev,2020-08-20 14:27:29,"We open and close the file every time, so I think it is correct the way it is.  I intentionally didn't want to double or triple our fd usage.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474025412,474025412,src/net.h
troygiorshev,2020-08-20 14:33:08,Thanks.  Fixed,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474029818,474029818,test/functional/p2p_message_logging.py
amitiuttarwar,2020-08-20 19:11:50,"gotcha, sounds good ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474210703,474210703,contrib/message-logging/message-logging-parser.py
ariard,2020-08-20 20:19:35,"Right, performance not being an issue, we shouldn't bother opening/closing every time. ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474249437,474249437,src/net.h
troygiorshev,2020-08-21 16:39:34,"Thanks, fixed to use underscores instead",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474807738,474807738,src/net.cpp
fjahr,2020-09-01 12:08:04,nit: Put the default in a shared const,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481088231,481088231,src/net_processing.cpp
fjahr,2020-09-01 12:20:56,"nit\n```suggestion\n        if (optimisticSend) nBytesSent = SocketSendData(pnode);\n```\n\nor:\n```suggestion\n        if (node->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);\n```\nand remove the bool completely. The comment already clarifies what is happening.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481094927,481094927,src/net.cpp
fjahr,2020-09-01 12:40:04,nit: Add info on the default setting.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481106188,481106188,src/init.cpp
michaelfolkson,2020-09-27 15:22:48,All `test_framework.mininode` need to be replaced by `test_framework.p2p` as of https://github.com/bitcoin/bitcoin/pull/19760,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r495583680,495583680,contrib/message-logging/message-logging-parser.py
troygiorshev,2020-10-07 04:16:26,"For simplicity, and to avoid any race conditions, I've made sure to keep all calls to `LogMessage` in `MessageHandler`.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500727575,500727575,src/net_processing.cpp
troygiorshev,2020-10-07 04:59:33,I'm more than happy to do this!,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500737999,500737999,src/net.cpp
troygiorshev,2020-10-07 05:03:59,Thanks!,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500739219,500739219,contrib/message-logging/message-logging-parser.py
troygiorshev,2020-10-07 15:16:32,I think I'll leave formatting to the user!  I'll take the `jq` suggestion and add that as a note in the module docstring.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r501096593,501096593,contrib/message-logging/message-logging-parser.py
MarcoFalke,2020-10-14 07:51:54,Any reason for this behavior change?,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472499,504472499,src/net.cpp
MarcoFalke,2020-10-14 07:52:18,Probably causing the ci failures,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472745,504472745,src/net.cpp
promag,2020-10-14 13:34:37,"c2f62aefabc2b00ce0ed28901d80d636b600feef\n\nExactly, msg.data is pushed to `vSendMsg` right above.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504680940,504680940,src/net.cpp
promag,2020-10-14 13:40:10,"2dd63707380ae5cdf79a2a8d98e0133f881f9381\n\nI know this is a debugging feature, but file open/close for each message is kind of bad right, also because close flushes?",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504685058,504685058,src/net.cpp
troygiorshev,2020-10-14 22:24:09,I'll give this a look,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r505020396,505020396,src/net.cpp
troygiorshev,2020-10-16 02:10:22,"Yep this was silly of me, thanks for finding the bug!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r505984756,505984756,src/net.cpp
troygiorshev,2020-10-16 02:44:28,"I'm not sure that I see the disadvantage.  The alternative required using a greater number of file descriptors, which I thought was worse.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r506003646,506003646,src/net.cpp
practicalswift,2020-10-16 13:14:49,"If measurements show that this ever becomes a problem in practice it can be tackled in a follow-up.\n\nTBH I'm much more worried about the possible file descriptor DoS vector that we would risk open up if the file descriptor were kept open.\n\nSecurity first! :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r506402741,506402741,src/net.cpp
theStack,2020-11-15 20:10:48,"nit: I'd just drop the `python` command part and call the script directly (also because on some systems, `python` symlinks to `python2`, not `python3`! See also https://www.python.org/dev/peps/pep-0394/), thanks to the she-bang on top of the file the right python interpreter will be called.\n",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807168,523807168,contrib/message-capture/message-capture-docs.md
theStack,2020-11-15 20:13:55,"nit: Could simply use `jq out.json` here (see also the ""The Useless Use of Cat Award"" http://porkmail.org/era/unix/award.html#cat)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807480,523807480,contrib/message-capture/message-capture-docs.md
troygiorshev,2020-11-17 21:58:18,"Thanks for the link :)\n\n`cat foo.txt | less` is so common I once saw the suggestion to set a shell alias:\n`alias L='| less'`\nso that you can run `cat foo.txt L`!",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525552080,525552080,contrib/message-capture/message-capture-docs.md
troygiorshev,2020-11-17 22:12:30,"Thank you again for the link.  I'm so used to having python environment problems that I've always tried to be as explicit as possible when running python scripts.  Since switching to conda I haven't had any problems, and I'm sure other people have things figured out as well (Either they only have one python install or they use an environment manager too).  I'll make this change.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525559389,525559389,contrib/message-capture/message-capture-docs.md
MarcoFalke,2020-11-18 06:24:34,contrib/message-capture/message-capture-parser.py:20:1: F401 'test_framework.util.assert_equal' imported but unused,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525840678,525840678,contrib/message-capture/message-capture-parser.py
practicalswift,2021-01-19 21:26:53,"Nit: ""P2P"" is more commonly used.\n\n```\n$ git grep -E ' P2P ' | wc -l\n230\n$ git grep -E ' p2p ' | wc -l\n63\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560507013,560507013,src/init.cpp
practicalswift,2021-01-19 21:34:02,"This should be `-capturemessages` (with ending ""s"") :)",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560511017,560511017,contrib/message-capture/message-capture-docs.md
troygiorshev,2021-01-19 21:44:34,"Sounds good, and Wikipedia agrees.  Fixed",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560516632,560516632,src/init.cpp
troygiorshev,2021-01-19 21:44:54,Thank you!,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560516802,560516802,contrib/message-capture/message-capture-docs.md
jnewbery,2021-01-20 11:10:17,"There's no need to explicitly convert to a span from a vector since #18468 was merged.\n\n```suggestion\n        CaptureMessage(pnode->addr, msg.m_type, msg.data, /* incoming */ false);\n```\n\nNo need to change this unless you touch the branch for another reason.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560878242,560878242,src/net.cpp
jnewbery,2021-01-20 11:19:11,"No need to duplicate the process_file call:\n\n```suggestion\n    else:\n        progress_bar = None\n\n    for capture in capturepaths:\n        process_file(str(capture), messages, ""recv"" in capture.stem, progress_bar)\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560883409,560883409,contrib/message-capture/message-capture-parser.py
jnewbery,2021-01-20 11:20:13,Can you add `-n` as a short argument here?,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560883958,560883958,contrib/message-capture/message-capture-parser.py
jnewbery,2021-01-20 11:22:07,"This function is a bit of a wall of code. I'd suggest a few blank lines to split up different areas of functionality and make it a bit more readable.\n\nSomething like:\n\n```python\n        while True:\n            if progress_bar:\n                # Update progress bar\n                diff = f_in.tell() - bytes_read - 1\n                progress_bar.update(diff)\n                bytes",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560884968,560884968,contrib/message-capture/message-capture-parser.py
jnewbery,2021-01-20 11:27:41,"A few pep8 style suggestions:\n\n- surround arithmetic operators with spaces\n- no spaces around named argument parameters\n- align parameters with opening parens\n\n```suggestion\n        num_blocks = int(max_blocks * progress)\n        print('\r[ {}{} ] {:3.0f}%'.format('#' * num_blocks,\n                                           ' ' * (max_blocks - num_blocks),\n                     ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560888340,560888340,contrib/message-capture/message-capture-parser.py
jnewbery,2021-01-20 11:40:01,I'm not sure if we want this. You could imagine running this test inside some environment where the system time is not set correctly. That'd potentially cause this test to fail even though there's no problem with message capture.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560895332,560895332,test/functional/p2p_message_capture.py
jnewbery,2021-01-20 11:41:03,Perhaps also assert that there are no non-null characters after the first non-null character? i.e. the message type is a string of printable characters followed by just null characters.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560895909,560895909,test/functional/p2p_message_capture.py
jnewbery,2021-01-20 11:49:07,"We should also test that these files are non-empty. We may not know the exact sequence of messages, but there should be some messages during initial handshake, and we should capture them.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560900447,560900447,test/functional/p2p_message_capture.py
jnewbery,2021-01-20 12:03:42,"We don't have guidance on line length in the style guide, but anything over 100 columns is a bit long for my taste. Also consider adding a doxygen comment:\n\n```suggestion\n/** Dump timestamp and binary message to file */\nvoid CaptureMessage(const CAddress& addr, const std::string& msg_type,\n                    const Span<const unsigned char>& data, bool is_incoming);\n\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560908669,560908669,src/net.h
jnewbery,2021-01-20 12:04:12,maybe s/time/now/,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560908973,560908973,src/net.cpp
troygiorshev,2021-01-20 15:36:49,Fixed,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561060570,561060570,contrib/message-capture/message-capture-parser.py
practicalswift,2021-01-20 15:56:05,Since this is new code: consider running `black` all new `.py` files added in this PR :),https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561075800,561075800,contrib/message-capture/message-capture-parser.py
troygiorshev,2021-01-20 22:16:24,"Thanks, this is much more readable now.  I've broken it up slightly differently than you.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561343199,561343199,contrib/message-capture/message-capture-parser.py
troygiorshev,2021-01-20 22:19:01,"I'm fine to remove this, especially given your other suggestions that add other pieces to this test.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561344484,561344484,test/functional/p2p_message_capture.py
troygiorshev,2021-01-21 19:05:56,"Added the doxygen comment, but I think I'll leave the long line as it is.  Looking through the rest of net.h, I see many declarations longer than 100 characters, and I don't see any that have been broken up the way you're suggesting.\n\nI agree with you that it's not great, but I'm going to appeal to consistency in this case.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562128298,562128298,src/net.h
theStack,2021-01-21 21:27:30,"nit: sorry to be annoying with this command [again](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807480), but I just found out that it's mandatory to add a filter as second parameter (e.g. the dot `.` for _all_), otherwise the command fails.\n```\n$ jq out.json\njq: error: out/0 is not defined at <top-level>, line 1:\nout.json\njq: 1 compile error\n\n$ jq . out.json\n[\n  ",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562208110,562208110,contrib/message-capture/message-capture-docs.md
theStack,2021-01-21 21:29:08,yocto-nit: git shows some trailing whitespace in this line,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562209068,562209068,contrib/message-capture/message-capture-parser.py
sipa,2021-01-21 23:50:31,"Ultranit: ""to file"" is slightly confusing as it's not capturing all traffic into just a single file.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562272863,562272863,src/init.cpp
sipa,2021-01-21 23:52:20,"It's a bit strange that this happens in net_processing while the capture of outgoing messages is in net.\n\nAny reason why this can't be in net as well? I'd expect CNode::ReceiveMsgBytes to work well.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562273457,562273457,src/net_processing.cpp
sipa,2021-01-21 23:56:32,"A suggestion (possibly for a future PR):\n\nIt's unnecessary to have this script load the entire dump of all files into memory and then sort them, as we know that every individual file is internally sorted.\n\nSo an approach is possible where you have a loop in which you read one message for each file, and then loop {pick the one with the smallest timestamp; print that one; read one message fr",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562274872,562274872,contrib/message-capture/message-capture-parser.py
sipa,2021-01-22 00:03:22,"Why make this DEBUG_ONLY? It's certainly not a feature for all users, but it's also not just a development debugging tool.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562277332,562277332,src/init.cpp
sipa,2021-01-22 00:23:01,"Not sure this is what you want to do when an unparsable message is encountered. As each record has an overall length field, there should be no problem with skipping it.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562284378,562284378,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-22 09:53:55,Note to myself: Remove `MakeUCharSpan` after #20464 ,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562515326,562515326,src/net_processing.cpp
MarcoFalke,2021-01-22 10:06:28,"The difference would be that disconnected nodes may still have their messages captured and that the capture file will record a time closer to the receive time, as opposed to the process time of the message? No opinion on what to do, just asking about the difference.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562522841,562522841,src/net_processing.cpp
jnewbery,2021-01-22 10:06:41,That's fair!,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562522979,562522979,src/net.h
MarcoFalke,2021-01-22 10:09:54,"completely unrelated, but this seems fragile. Would be good to remove those ints and only use uint256`s",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562524979,562524979,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-22 10:21:16,"Tend to agree. The test framework can only deserialize a subset of messages than what Bitcoin Core can deserialize. This is expected to happen in practice, so should fail gracefully in some way. Probably like an unknown message type.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562531971,562531971,contrib/message-capture/message-capture-parser.py
jnewbery,2021-01-22 10:22:16,There was some discussion of that here: https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454190521.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562532549,562532549,src/net_processing.cpp
jnewbery,2021-01-22 10:24:05,Probably my suggestion as well. Making it DEBUG_ONLY allows this to be an experimental feature that we can alter/remove in future releases without disrupting users' workflow. We can always remove DEBUG_ONLY later if we're happy to make it more visible.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562533570,562533570,src/init.cpp
jnewbery,2021-01-22 10:26:28,"Yes, definitely a good suggestion. I agree this can wait for a future PR.\n\nSee the use of `heapq.merge()` in `test/functional/combine_logs.py` for one way to do this (although I never enhanced that to support streaming since there wasn't an immediate need).",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562535085,562535085,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-22 10:30:49,"nit\n\n```suggestion\n            msg_dict[""msgtype""] = msg.msgtype.decode()\n```\nor\n```suggestion\n            msg_dict[""msgtype""] = msg_type.decode()\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562537965,562537965,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-22 10:33:34,"nit\n\n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562539575,562539575,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-22 10:40:53,Just check that the message type is in `MESSAGEMAP`? I think we wouldn't ever want to add a message type that is not in `MESSAGEMAP`.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562543791,562543791,test/functional/p2p_message_capture.py
MarcoFalke,2021-01-22 10:43:13,That seems fragile. What if the payload happens to be printable? ,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562545025,562545025,test/functional/p2p_message_capture.py
sipa,2021-01-22 18:45:14,"Hmm, I don't think this functionality really belongs in the net_processing layer/thread in the first place. It's net that handles the connection and parsing/serializing of messages from/to a stream of bytes. So if that's the reason for having this weird split across modules, I'm not sure it's desirable.\n\nAnyway, no big deal - it just strikes me as ugly, but if it works, it works.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562835751,562835751,src/net_processing.cpp
troygiorshev,2021-01-22 20:45:42,"Ah you caught me, I still do `cat out.json | jq` :)\n\nThanks for checking this, I'll fix it in the docs.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562901181,562901181,contrib/message-capture/message-capture-docs.md
troygiorshev,2021-01-22 21:15:02,s/file/disk/,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562914700,562914700,src/init.cpp
troygiorshev,2021-01-22 21:20:21,"I think I'll keep DEBUG_ONLY unless having it is harmful for some reason.  I agree that it's very easy to remove later, and very difficult to add back.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562917209,562917209,src/init.cpp
jnewbery,2021-01-22 21:50:04,"I see this message dumping as a net_processing layer thing. It should be agnostic to the connection layer (eg if we eventually use BIP 151 or similar scheme, then the messages delivered to and sent from the net_processing layer shouldn't change). If you need the actual bytes sent on the wire, then tcpdump or similar might be more appropriate.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562933835,562933835,src/net_processing.cpp
troygiorshev,2021-01-22 21:52:51,"As it stands, message capture always happens in the MessageHandler thread.  Unfortunately, functions in this thread span both net and net_processing.\n\nI've responded more fully below, https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562934956,562934956,src/net_processing.cpp
troygiorshev,2021-01-22 22:19:04,I agree on all accounts: this is a naive solution but I'll leave an improvement for a future PR.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562945472,562945472,contrib/message-capture/message-capture-parser.py
troygiorshev,2021-01-22 22:38:26,"You're right.  Because of how the capture is done in net.cpp, the length field is guaranteed to be correct.  (We'll never have a misalignment)  I'll change this to just skip the single message, and I'll insert an informative placeholder into the JSON.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562954055,562954055,contrib/message-capture/message-capture-parser.py
sipa,2021-01-22 22:39:59,"You could still include the command name (if printable), and a hexdump of the payload.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562954574,562954574,contrib/message-capture/message-capture-parser.py
MarcoFalke,2021-01-23 06:17:14,"nit: Maybe add a small comment here that this function captures the message at process time, not socket receive/send time. Nothing fancy, just a oneline comment to sum up https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796\n\nNot only to document the expected behavior, but also to avoid people to ""optimize"" away this call to `GetTime` with the rationale that it doesn't matter an",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563025936,563025936,src/net.cpp
troygiorshev,2021-01-23 19:27:52,"I agree that this is fragile, but I'm not sure exactly what you mean about removing them.  We don't really have a uint256 object in python.  Adding one would unfortunately mean rewriting a LOT of our testing framework...",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563189778,563189778,contrib/message-capture/message-capture-parser.py
troygiorshev,2021-01-23 19:32:04,"Ah, `remainder` is actually just the remainder of the 12 msgtype bytes after the first null.  In most cases it's just a few null bytes.  I added this in response to a suggestion to check that after the first null byte in the msgtype, all further bytes are null.\n\nEffectively these few lines should do the same job as CMessageHeader::IsCommandValid.",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563190145,563190145,test/functional/p2p_message_capture.py
troygiorshev,2021-01-23 21:02:55,"Good idea, thanks",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563199123,563199123,test/functional/p2p_message_capture.py
MarcoFalke,2021-02-02 12:12:58,should probably just check that all are zero,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r568553627,568553627,test/functional/p2p_message_capture.py
flack,2021-02-06 16:26:49,"Not sure if this is the right place to ask, but when I'm running `vulture` against this file, it complains:\n\n```\nbitcoin/test/functional/p2p_message_capture.py:45: invalid syntax at ""int.from_bytes(tmp_header.read(TIME_SIZE), ""little"")      # type: int""\n```\n\nIs that a bug in `vulture` or a problem in the code? If I assign the return value of `from_bytes` to a variable, it passes",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571454691,571454691,test/functional/p2p_message_capture.py
brunoerg,2021-02-07 01:19:40,I think it is a problem in the code. The return value of `from_bytes` is not being used.,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571512679,571512679,test/functional/p2p_message_capture.py
jnewbery,2021-02-07 19:25:52,"I guess the fix is:\n\n```diff\n-            int.from_bytes(tmp_header.read(TIME_SIZE), ""little"")      # type: int\n+            tmp_header.read(TIME_SIZE)  # skip over the timestamp field\n```\n",https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571674446,571674446,test/functional/p2p_message_capture.py
MarcoFalke,2021-02-08 07:17:22,#21107 ,https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571822986,571822986,test/functional/p2p_message_capture.py
