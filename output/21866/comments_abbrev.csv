DrahtBot,2021-05-06 06:53:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22155 (wallet test: Add test for subtract fee from recipient behavior by ryanofsky)\n* #21789 (refactor: Remove ::Params(",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-833275860,833275860,
Sjors,2021-05-06 13:40:16,"In the description of a839078c20f4ac3d92e14af7b287f2f0fddbc61e:\n> 1. It fixes the erroneous use of Ensure*() in rest.cpp, which caused\n   crashes in REST contexts.\n\nCan you elaborate on this?",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-833531744,833531744,
dongcarl,2021-05-06 15:59:05,"@Sjors `EnsureAnyChainman` uses the `src/rpc` way of returning errors, by doing:\n\nhttps://github.com/bitcoin/bitcoin/blob/59869704c0fe0f105d9cbc193e3670917c618b83/src/rpc/blockchain.cpp#L85\n\nHowever from my understanding, in `src/rest`, the way to return errors is to call `RESTERR`, which will fill the `req` in-out param with the right HTTP error.\n\nIn other words, throwing a `JSONRPCEr",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-833638547,833638547,
Sjors,2021-05-06 18:11:40,"That makes sense, alright, I'll check out episode 6 first.",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-833747951,833747951,
dongcarl,2021-06-02 22:31:29,"Pushed 8135fd659bd1f068aecf4d0ad3f3862127bb0886 -> 509264117c30704c2f048c702aa0ee9ac9657e7a\n- Rebased over merge of #21767",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-853425266,853425266,
dongcarl,2021-06-09 15:03:08,"Pushed 509264117c...cc8cc9c4a2\n- Addressed https://github.com/bitcoin/bitcoin/pull/21866#discussion_r647844242",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-857773704,857773704,
jnewbery,2021-06-10 11:15:53,utACK cc8cc9c4a24bb638baa733c129a87346c66821ba,https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-858534414,858534414,
jnewbery,2021-06-10 11:18:23,This is a trivial rebase past #22084 (consecutive lines touched),https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-858535844,858535844,
jnewbery,2021-06-10 11:19:40,"Strong concept ACK for:\n\n> Over time, we should probably move these mutable global state variables\ninto ChainstateManager or CChainState so it's easier to reason about\ntheir lifecycles.\n\nI'd be happy to review any of those changes. Please tag me in PRs that implement those.",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-858536566,858536566,
dongcarl,2021-06-10 19:12:02,"Pushed cc8cc9c4a24bb638baa733c129a87346c66821ba...6f994882deafe62e97f0a889d8bdb8c96dcf913d\n- Rebased on top of master\n\n-----\n\n> I'd be happy to review any of those changes. Please tag me in PRs that implement those.\n\n@jnewbery will do! üòÅ I'm cleaning up my old branch right now which conflicts with Marco's `node/blockstorage` changes...",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-858934623,858934623,
jamesob,2021-06-11 00:02:16,"reACK https://github.com/bitcoin/bitcoin/pull/21866/commits/6f994882deafe62e97f0a889d8bdb8c96dcf913d based on the contents of \n`git range-diff master ackr/21866.1.dongcarl.bundle_7_7_validation_f ackr/21866.2.dongcarl.bundle_7_7_validation_f` and local build/test run.",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-859163927,859163927,
ariard,2021-06-11 16:01:46,"Code Review ACK 6f99488.\n\nDiff since last review is using `NodeImpl::chainman` method in `isInitialBlockDownload()` and rebase changes from #22084.",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-859682014,859682014,
jnewbery,2021-06-11 16:07:10,utACK 6f994882deafe62e97f0a889d8bdb8c96dcf913d,https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-859685469,859685469,
achow101,2021-06-11 18:52:10,Code Review ACK 6f994882deafe62e97f0a889d8bdb8c96dcf913d,https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-859775970,859775970,
MarcoFalke,2021-06-14 08:19:12,"Just noting that commit 972c5166ee685447a6d4bf5e501b07a0871fba85 causes a segmentation fault because the commits are in the wrong order:\n\n```\n$ valgrind ./src/qt/test/test_bitcoin-qt \n==1844015== Memcheck, a memory error detector\n==1844015== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1844015== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n=",https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-860487968,860487968,
MarcoFalke,2021-06-14 08:19:41,Otherwise looks good,https://github.com/bitcoin/bitcoin/pull/21866#issuecomment-860488307,860488307,
ariard,2021-06-08 22:43:24,I think you can directly rely on `NodeImpl::chainman()` method here.,https://github.com/bitcoin/bitcoin/pull/21866#discussion_r647844242,647844242,src/node/interfaces.cpp
dongcarl,2021-06-09 15:03:17,Nice catch!,https://github.com/bitcoin/bitcoin/pull/21866#discussion_r648401256,648401256,src/node/interfaces.cpp
jamesob,2021-06-10 16:34:27,"https://github.com/bitcoin/bitcoin/pull/21866/commits/1b21b6095a4deb9b88cbee27bb9f885565793741\n\nObligatory nit about using `ActiveTip()`",https://github.com/bitcoin/bitcoin/pull/21866#discussion_r649348768,649348768,src/test/util/mining.cpp
jamesob,2021-06-10 16:47:37,"https://github.com/bitcoin/bitcoin/pull/21866/commits/f172c8a220c29d1724c8c1a62cacc1ac8cbc2f17\n\nI don't mind it but is there the temporary scope necessary? (Also `ActiveTip()` nits)",https://github.com/bitcoin/bitcoin/pull/21866#discussion_r649358286,649358286,src/test/miner_tests.cpp
jamesob,2021-06-10 16:48:44,"https://github.com/bitcoin/bitcoin/pull/21866/commits/f172c8a220c29d1724c8c1a62cacc1ac8cbc2f17\n\n`ActiveTip()` nits here if you end up rebasing.",https://github.com/bitcoin/bitcoin/pull/21866#discussion_r649359092,649359092,src/test/miner_tests.cpp
