[
  {
    "sha": "464c313e304cef04a82e14f736e3c44ed5604a4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjRjMzEzZTMwNGNlZjA0YTgyZTE0ZjczNmUzYzQ0ZWQ1NjA0YTRl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T17:44:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "init: Use existing chainman",
      "tree": {
        "sha": "6f9588f29618b00883e754a7d6e39fd52d6c27c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f9588f29618b00883e754a7d6e39fd52d6c27c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/464c313e304cef04a82e14f736e3c44ed5604a4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464c313e304cef04a82e14f736e3c44ed5604a4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/464c313e304cef04a82e14f736e3c44ed5604a4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464c313e304cef04a82e14f736e3c44ed5604a4e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1704bbf2263f16c720604cfab4ccb775315df690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1704bbf2263f16c720604cfab4ccb775315df690",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1704bbf2263f16c720604cfab4ccb775315df690"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "904154cc06cab6364103bfc94e029c5a35a44927",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/464c313e304cef04a82e14f736e3c44ed5604a4e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/464c313e304cef04a82e14f736e3c44ed5604a4e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=464c313e304cef04a82e14f736e3c44ed5604a4e",
        "patch": "@@ -1384,8 +1384,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n+                assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n                 if (!chainman.BlockIndex().empty() &&\n-                        !g_chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1400,7 +1401,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !::ChainstateActive().LoadGenesisBlock(chainparams)) {\n+                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1549,21 +1550,21 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n-        if (!g_txindex->Start(::ChainstateActive())) {\n+        if (!g_txindex->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        if (!GetBlockFilterIndex(filter_type)->Start(::ChainstateActive())) {\n+        if (!GetBlockFilterIndex(filter_type)->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n \n     if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n         g_coin_stats_index = std::make_unique<CoinStatsIndex>(/* cache size */ 0, false, fReindex);\n-        if (!g_coin_stats_index->Start(::ChainstateActive())) {\n+        if (!g_coin_stats_index->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n@@ -1611,7 +1612,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n-    if (::ChainActive().Tip() == nullptr) {\n+    assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+    if (chainman.ActiveChain().Tip() == nullptr) {\n         block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {\n         fHaveGenesis = true;"
      }
    ]
  },
  {
    "sha": "f0dd5e6bb4b16e69d35b648b7ef973a732229873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGRkNWU2YmI0YjE2ZTY5ZDM1YjY0OGI3ZWY5NzNhNzMyMjI5ODcz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T21:00:00Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "test/util: Use existing chainman in ::PrepareBlock",
      "tree": {
        "sha": "a826c86bd8f6ad474a7d75205075e63602beec47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a826c86bd8f6ad474a7d75205075e63602beec47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0dd5e6bb4b16e69d35b648b7ef973a732229873",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dd5e6bb4b16e69d35b648b7ef973a732229873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0dd5e6bb4b16e69d35b648b7ef973a732229873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dd5e6bb4b16e69d35b648b7ef973a732229873/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "464c313e304cef04a82e14f736e3c44ed5604a4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464c313e304cef04a82e14f736e3c44ed5604a4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/464c313e304cef04a82e14f736e3c44ed5604a4e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f6a11bc02e2effcceacb43f064339bd9ec2522c5",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dd5e6bb4b16e69d35b648b7ef973a732229873/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dd5e6bb4b16e69d35b648b7ef973a732229873/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=f0dd5e6bb4b16e69d35b648b7ef973a732229873",
        "patch": "@@ -74,12 +74,12 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n {\n     auto block = std::make_shared<CBlock>(\n-        BlockAssembler{::ChainstateActive(), *Assert(node.mempool), Params()}\n+        BlockAssembler{Assert(node.chainman)->ActiveChainstate(), *Assert(node.mempool), Params()}\n             .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n \n     LOCK(cs_main);\n-    block->nTime = ::ChainActive().Tip()->GetMedianTimePast() + 1;\n+    block->nTime = Assert(node.chainman)->ActiveChain().Tip()->GetMedianTimePast() + 1;\n     block->hashMerkleRoot = BlockMerkleRoot(*block);\n \n     return block;"
      }
    ]
  },
  {
    "sha": "4d99b61014ba26eb1f3713df5528d2804edff165",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDk5YjYxMDE0YmEyNmViMWYzNzEzZGY1NTI4ZDI4MDRlZGZmMTY1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T21:03:18Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "test/miner_tests: Pass in chain tip to CreateBlockIndex",
      "tree": {
        "sha": "ecbac975f095e5cfce69c39014dddb6fb36062a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecbac975f095e5cfce69c39014dddb6fb36062a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d99b61014ba26eb1f3713df5528d2804edff165",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d99b61014ba26eb1f3713df5528d2804edff165",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d99b61014ba26eb1f3713df5528d2804edff165",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d99b61014ba26eb1f3713df5528d2804edff165/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0dd5e6bb4b16e69d35b648b7ef973a732229873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dd5e6bb4b16e69d35b648b7ef973a732229873",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0dd5e6bb4b16e69d35b648b7ef973a732229873"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5f6846e1053e28b27eeecf14526cc59e1ba85964",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d99b61014ba26eb1f3713df5528d2804edff165/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d99b61014ba26eb1f3713df5528d2804edff165/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4d99b61014ba26eb1f3713df5528d2804edff165",
        "patch": "@@ -82,11 +82,11 @@ constexpr static struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static CBlockIndex CreateBlockIndex(int nHeight, CBlockIndex* active_chain_tip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n-    index.pprev = ::ChainActive().Tip();\n+    index.pprev = active_chain_tip;\n     return index;\n }\n \n@@ -440,7 +440,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+\n+    {\n+        CBlockIndex* active_chain_tip = m_node.chainman->ActiveChain().Tip();\n+        BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(active_chain_tip->nHeight + 2, active_chain_tip))); // Sequence locks pass on 2nd block\n+    }\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n@@ -452,8 +456,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+\n+    {\n+        CBlockIndex* active_chain_tip = m_node.chainman->ActiveChain().Tip();\n+        BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(active_chain_tip->nHeight + 1, active_chain_tip))); // Sequence locks pass 512 seconds later\n+    }\n+\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n "
      }
    ]
  },
  {
    "sha": "e197076219e986ede6cf924e0ea36bd723503b2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTk3MDc2MjE5ZTk4NmVkZTZjZjkyNGUwZWEzNmJkNzIzNTAzYjJk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T20:46:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "test: Pass in CoinsTip to ValidateCheckInputsForAllFlags",
      "tree": {
        "sha": "fe80d73d97f983e2059e79da460aa17e6364201a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe80d73d97f983e2059e79da460aa17e6364201a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e197076219e986ede6cf924e0ea36bd723503b2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e197076219e986ede6cf924e0ea36bd723503b2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e197076219e986ede6cf924e0ea36bd723503b2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e197076219e986ede6cf924e0ea36bd723503b2d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d99b61014ba26eb1f3713df5528d2804edff165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d99b61014ba26eb1f3713df5528d2804edff165",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d99b61014ba26eb1f3713df5528d2804edff165"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4a77396bb25470d9461713b96a1b66d9977b0033",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e197076219e986ede6cf924e0ea36bd723503b2d/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e197076219e986ede6cf924e0ea36bd723503b2d/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=e197076219e986ede6cf924e0ea36bd723503b2d",
        "patch": "@@ -109,7 +109,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache, CCoinsViewCache& active_coins_tip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata;\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -126,7 +126,7 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret = CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputScripts should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -136,13 +136,13 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }\n@@ -218,7 +218,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false);\n+        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, ::ChainstateActive().CoinsTip());\n     }\n \n     // And if we produce a block with this tx, it should be valid (DERSIG not\n@@ -244,7 +244,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, ::ChainstateActive().CoinsTip());\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -267,7 +267,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, ::ChainstateActive().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -295,7 +295,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, ::ChainstateActive().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -324,11 +324,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, ::ChainstateActive().CoinsTip());\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, ::ChainstateActive().CoinsTip());\n     }\n \n     {\n@@ -353,7 +353,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, ::ChainstateActive().CoinsTip());\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached."
      }
    ]
  },
  {
    "sha": "0d61634c066a7102d539e85e2b1a4ca15be9660a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDYxNjM0YzA2NmE3MTAyZDUzOWU4NWUyYjFhNGNhMTViZTk2NjBh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T20:15:15Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "scripted-diff: test: Use existing chainman in unit tests\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- src/test \\\n    | grep -v '^src/test/fuzz' \\\n    | xargs sed -i -E \\\n            -e 's@g_chainman\\.m_blockman@m_node.chainman->m_blockman@g' \\\n            -e 's@([^:])(Chain(state|)Active)@\\1::\\2@g' \\\n            -e 's@::Chain(state|)Active\\(\\)@m_node.chainman->ActiveChain\\1()@g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7e59397f75cc7b96a236f1ec3478aa37090c977d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e59397f75cc7b96a236f1ec3478aa37090c977d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d61634c066a7102d539e85e2b1a4ca15be9660a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d61634c066a7102d539e85e2b1a4ca15be9660a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d61634c066a7102d539e85e2b1a4ca15be9660a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d61634c066a7102d539e85e2b1a4ca15be9660a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e197076219e986ede6cf924e0ea36bd723503b2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e197076219e986ede6cf924e0ea36bd723503b2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e197076219e986ede6cf924e0ea36bd723503b2d"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 93,
      "deletions": 93
    },
    "files": [
      {
        "sha": "2eb653e9ecd0cd28fc8a53ad9aa9f29aeaf70cd7",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -62,7 +62,7 @@ CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n     const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(::ChainstateActive(), *m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(m_node.chainman->ActiveChainstate(), *m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;\n@@ -117,9 +117,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         std::vector<BlockFilter> filters;\n         std::vector<uint256> filter_hashes;\n \n-        for (const CBlockIndex* block_index = ::ChainActive().Genesis();\n+        for (const CBlockIndex* block_index = m_node.chainman->ActiveChain().Genesis();\n              block_index != nullptr;\n-             block_index = ::ChainActive().Next(block_index)) {\n+             block_index = m_node.chainman->ActiveChain().Next(block_index)) {\n             BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n             BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n             BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n@@ -131,7 +131,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n     BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(filter_index.Start(::ChainstateActive()));\n+    BOOST_REQUIRE(filter_index.Start(m_node.chainman->ActiveChainstate()));\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n@@ -145,9 +145,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     {\n         LOCK(cs_main);\n         const CBlockIndex* block_index;\n-        for (block_index = ::ChainActive().Genesis();\n+        for (block_index = m_node.chainman->ActiveChain().Genesis();\n              block_index != nullptr;\n-             block_index = ::ChainActive().Next(block_index)) {\n+             block_index = m_node.chainman->ActiveChain().Next(block_index)) {\n             CheckFilterLookups(filter_index, block_index, last_header);\n         }\n     }\n@@ -156,7 +156,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n+        tip = m_node.chainman->ActiveChain().Tip();\n     }\n     CKey coinbase_key_A, coinbase_key_B;\n     coinbase_key_A.MakeNewKey(true);\n@@ -178,7 +178,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -196,7 +196,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -210,7 +210,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -231,14 +231,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n          {\n              LOCK(cs_main);\n-             block_index = g_chainman.m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n+             block_index = m_node.chainman->m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n-             block_index = g_chainman.m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n+             block_index = m_node.chainman->m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);\n@@ -250,7 +250,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n+        tip = m_node.chainman->ActiveChain().Tip();\n     }\n     BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n     BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));"
      },
      {
        "sha": "597d7a7340b515935b32e73b665127cb33fac56f",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -22,7 +22,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     const CBlockIndex* block_index;\n     {\n         LOCK(cs_main);\n-        block_index = ChainActive().Tip();\n+        block_index = m_node.chainman->ActiveChain().Tip();\n     }\n \n     // CoinStatsIndex should not be found before it is started.\n@@ -32,7 +32,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     // is started.\n     BOOST_CHECK(!coin_stats_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(coin_stats_index.Start(::ChainstateActive()));\n+    BOOST_REQUIRE(coin_stats_index.Start(m_node.chainman->ActiveChainstate()));\n \n     // Allow the CoinStatsIndex to catch up with the block index that is syncing\n     // in a background thread.\n@@ -46,7 +46,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     const CBlockIndex* genesis_block_index;\n     {\n         LOCK(cs_main);\n-        genesis_block_index = ChainActive().Genesis();\n+        genesis_block_index = m_node.chainman->ActiveChain().Genesis();\n     }\n     BOOST_CHECK(coin_stats_index.LookUpStats(genesis_block_index, coin_stats));\n \n@@ -64,7 +64,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     const CBlockIndex* new_block_index;\n     {\n         LOCK(cs_main);\n-        new_block_index = ChainActive().Tip();\n+        new_block_index = m_node.chainman->ActiveChain().Tip();\n     }\n     coin_stats_index.LookUpStats(new_block_index, new_coin_stats);\n "
      },
      {
        "sha": "46d4fa0c433b5755055200064d67dbae4ea6a379",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -83,8 +83,8 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // This test requires that we have a chain with non-zero work.\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip() != nullptr);\n-        BOOST_CHECK(::ChainActive().Tip()->nChainWork > 0);\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip() != nullptr);\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->nChainWork > 0);\n     }\n \n     // Test starts here"
      },
      {
        "sha": "42a7c7798c7524d3c48375b106c122220c2bb623",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n     auto* orig_tip = active.Tip();\n     for (int i = 0; i < 10; ++i) {\n         BlockValidationState state;\n-        ChainstateActive().InvalidateBlock(state, Params(), active.Tip());\n+        m_node.chainman->ActiveChainstate().InvalidateBlock(state, Params(), active.Tip());\n     }\n     BOOST_CHECK_EQUAL(active.Height(), orig_tip->nHeight - 10);\n     coinbaseKey.MakeNewKey(true);"
      },
      {
        "sha": "e20c5e4e8f14499de8331b196dd2285c13765644",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -45,7 +45,7 @@ BlockAssembler MinerTestingSetup::AssemblerForTest(const CChainParams& params)\n \n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n     options.blockMinFeeRate = blockMinFeeRate;\n-    return BlockAssembler(::ChainstateActive(), *m_node.mempool, params, options);\n+    return BlockAssembler(m_node.chainman->ActiveChainstate(), *m_node.mempool, params, options);\n }\n \n constexpr static struct {\n@@ -228,17 +228,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         {\n             LOCK(cs_main);\n             pblock->nVersion = 1;\n-            pblock->nTime = ::ChainActive().Tip()->GetMedianTimePast()+1;\n+            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n             CMutableTransaction txCoinbase(*pblock->vtx[0]);\n             txCoinbase.nVersion = 1;\n             txCoinbase.vin[0].scriptSig = CScript();\n             txCoinbase.vin[0].scriptSig.push_back(bi.extranonce);\n-            txCoinbase.vin[0].scriptSig.push_back(::ChainActive().Height());\n+            txCoinbase.vin[0].scriptSig.push_back(m_node.chainman->ActiveChain().Height());\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n             pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n             if (txFirst.size() == 0)\n-                baseheight = ::ChainActive().Height();\n+                baseheight = m_node.chainman->ActiveChain().Height();\n             if (txFirst.size() < 4)\n                 txFirst.push_back(pblock->vtx[0]);\n             pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n@@ -364,29 +364,29 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->clear();\n \n     // subsidy changing\n-    int nHeight = ::ChainActive().Height();\n+    int nHeight = m_node.chainman->ActiveChain().Height();\n     // Create an actual 209999-long block chain (without valid blocks).\n-    while (::ChainActive().Tip()->nHeight < 209999) {\n-        CBlockIndex* prev = ::ChainActive().Tip();\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = m_node.chainman->ActiveChain().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        m_node.chainman->ActiveChain().SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n-    while (::ChainActive().Tip()->nHeight < 210000) {\n-        CBlockIndex* prev = ::ChainActive().Tip();\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = m_node.chainman->ActiveChain().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        m_node.chainman->ActiveChain().SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n@@ -409,16 +409,16 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->clear();\n \n     // Delete the dummy blocks again.\n-    while (::ChainActive().Tip()->nHeight > nHeight) {\n-        CBlockIndex* del = ::ChainActive().Tip();\n-        ::ChainActive().SetTip(del->pprev);\n-        ::ChainstateActive().CoinsTip().SetBestBlock(del->pprev->GetBlockHash());\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = m_node.chainman->ActiveChain().Tip();\n+        m_node.chainman->ActiveChain().SetTip(del->pprev);\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;\n     }\n \n     // non-final txs in mempool\n-    SetMockTime(::ChainActive().Tip()->GetMedianTimePast()+1);\n+    SetMockTime(m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1);\n     int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n     // height map\n     std::vector<int> prevheights;\n@@ -430,15 +430,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = ::ChainActive().Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    tx.vin[0].nSequence = m_node.chainman->ActiveChain().Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n     prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     {\n@@ -448,11 +448,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((::ChainActive().Tip()->GetMedianTimePast()+1-::ChainActive()[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1-m_node.chainman->ActiveChain()[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -464,36 +464,36 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     prevheights[0] = baseheight + 3;\n-    tx.nLockTime = ::ChainActive().Tip()->nHeight + 1;\n+    tx.nLockTime = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+    BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n-    tx.nLockTime = ::ChainActive().Tip()->GetMedianTimePast();\n+    tx.nLockTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast();\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+    BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n     // mempool-dependent transactions (not added)\n     tx.vin[0].prevout.hash = hash;\n-    prevheights[0] = ::ChainActive().Tip()->nHeight + 1;\n+    prevheights[0] = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n@@ -511,14 +511,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3U);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    ::ChainActive().Tip()->nHeight++;\n-    SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    m_node.chainman->ActiveChain().Tip()->nHeight++;\n+    SetMockTime(m_node.chainman->ActiveChain().Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n-    ::ChainActive().Tip()->nHeight--;\n+    m_node.chainman->ActiveChain().Tip()->nHeight--;\n     SetMockTime(0);\n     m_node.mempool->clear();\n "
      },
      {
        "sha": "3ce7ecb5f28d50bbe3379b127e07165c2535d60b",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(txindex.Start(::ChainstateActive()));\n+    BOOST_REQUIRE(txindex.Start(m_node.chainman->ActiveChainstate()));\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "ade9e210f22149c2b1519fc1ec5b70c4b5050388",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -37,7 +37,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n-    const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, MakeTransactionRef(coinbaseTx),\n+    const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(coinbaseTx),\n                 true /* bypass_limits */);\n \n     BOOST_CHECK(result.m_result_type == MempoolAcceptResult::ResultType::INVALID);"
      },
      {
        "sha": "23195c0a26c5f9f60e97ce5ad99150a8af04f1fe",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -31,7 +31,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     const auto ToMemPool = [this](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, MakeTransactionRef(tx),\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(tx),\n             true /* bypass_limits */);\n         return result.m_result_type == MempoolAcceptResult::ResultType::VALID;\n     };\n@@ -63,15 +63,15 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[0]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n     m_node.mempool->clear();\n \n@@ -80,7 +80,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n     m_node.mempool->clear();\n \n@@ -91,7 +91,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() == block.GetHash());\n     }\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n@@ -205,20 +205,20 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         TxValidationState state;\n         PrecomputedTransactionData ptd_spend_tx;\n \n-        BOOST_CHECK(!CheckInputScripts(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+        BOOST_CHECK(!CheckInputScripts(CTransaction(spend_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n         // If we call again asking for scriptchecks (as happens in\n         // ConnectBlock), we should add a script check object for this -- we're\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(spend_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 1U);\n \n         // Test that CheckInputScripts returns true iff DERSIG-enforcing flags are\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     // And if we produce a block with this tx, it should be valid (DERSIG not\n@@ -227,8 +227,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n     LOCK(cs_main);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n-    BOOST_CHECK(::ChainstateActive().CoinsTip().GetBestBlock() == block.GetHash());\n+    BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() == block.GetHash());\n+    BOOST_CHECK(m_node.chainman->ActiveChainstate().CoinsTip().GetBestBlock() == block.GetHash());\n \n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n@@ -244,7 +244,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -267,13 +267,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_cltv_tx), state, ::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_cltv_tx), state, m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TEST CHECKSEQUENCEVERIFY\n@@ -295,13 +295,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_csv_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_csv_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TODO: add tests for remaining script flags\n@@ -324,11 +324,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     {\n@@ -353,7 +353,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached.\n@@ -363,12 +363,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n         // This transaction is now invalid under segwit, because of the second input.\n-        BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+        BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n \n         std::vector<CScriptCheck> scriptchecks;\n         // Make sure this transaction was not cached (ie because the first\n         // input was valid)\n-        BOOST_CHECK(CheckInputScripts(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 2U);\n     }"
      },
      {
        "sha": "fcccf3fc4979eae5323d096f5fb8fdce46da7950",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -180,17 +180,17 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     RegisterAllCoreRPCCommands(tableRPC);\n \n     m_node.chainman->InitializeChainstate(*m_node.mempool);\n-    ::ChainstateActive().InitCoinsDB(\n+    m_node.chainman->ActiveChainstate().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache(1 << 23);\n-    assert(::ChainstateActive().CanFlushToDisk());\n-    if (!::ChainstateActive().LoadGenesisBlock(chainparams)) {\n+    assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n+    m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n+    assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n+    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock(chainparams)) {\n         throw std::runtime_error(\"LoadGenesisBlock failed.\");\n     }\n \n     BlockValidationState state;\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams)) {\n+    if (!m_node.chainman->ActiveChainstate().ActivateBestChain(state, chainparams)) {\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n@@ -240,7 +240,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(::ChainstateActive(), empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n+    CBlock block = BlockAssembler(m_node.chainman->ActiveChainstate(), empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {\n@@ -299,7 +299,7 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     // If submit=true, add transaction to the mempool.\n     if (submit) {\n         LOCK(cs_main);\n-        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n         assert(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n     }\n "
      },
      {
        "sha": "e0bc10d66023f3f021705a4b171a746e206c78df",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d61634c066a7102d539e85e2b1a4ca15be9660a/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "patch": "@@ -84,8 +84,8 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> MinerTestingSetup::FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n-    LOCK(cs_main); // For g_chainman.m_blockman.LookupBlockIndex\n-    GenerateCoinbaseCommitment(*pblock, g_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n+    LOCK(cs_main); // For m_node.chainman->m_blockman.LookupBlockIndex\n+    GenerateCoinbaseCommitment(*pblock, m_node.chainman->m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n \n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n \n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     const CBlockIndex* initial_tip = nullptr;\n     {\n         LOCK(cs_main);\n-        initial_tip = ::ChainActive().Tip();\n+        initial_tip = m_node.chainman->ActiveChain().Tip();\n     }\n     auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n     RegisterSharedValidationInterface(sub);\n@@ -198,7 +198,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     UnregisterSharedValidationInterface(sub);\n \n     LOCK(cs_main);\n-    BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(sub->m_expected_tip, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n }\n \n /**\n@@ -232,7 +232,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n \n     // Run the test multiple times\n     for (int test_runs = 3; test_runs > 0; --test_runs) {\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n         // Later on split from here\n         const uint256 split_hash{last_mined->hashPrevBlock};\n@@ -273,7 +273,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         {\n             LOCK(cs_main);\n             for (const auto& tx : txs) {\n-                const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, tx, false /* bypass_limits */);\n+                const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, tx, false /* bypass_limits */);\n                 BOOST_REQUIRE(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n             }\n         }\n@@ -306,15 +306,15 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             }\n             LOCK(cs_main);\n             // We are done with the reorg, so the tip must have changed\n-            assert(tip_init != ::ChainActive().Tip()->GetBlockHash());\n+            assert(tip_init != m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }};\n \n         // Submit the reorg in this thread to invalidate and remove the txs from the tx pool\n         for (const auto& b : reorg) {\n             ProcessBlock(b);\n         }\n         // Check that the reorg was eventually successful\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n         // We can join the other thread, which returns when the reorg was successful\n         rpc_thread.join();"
      }
    ]
  },
  {
    "sha": "ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTBhYjFlOTU5ZTBlNzVlMDRkODdmYWJhZTgzMzRhZDQ2NTZmM2U1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-27T22:17:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "fuzz: Initialize a TestingSetup for test_one_input\n\nFor fuzz tests that need it.",
      "tree": {
        "sha": "e555d83206216c21ca2a3a4f77707d401bbb429b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e555d83206216c21ca2a3a4f77707d401bbb429b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d61634c066a7102d539e85e2b1a4ca15be9660a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d61634c066a7102d539e85e2b1a4ca15be9660a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "42f19d16c6c817b6a1fab0b3a4307abe88f631c6",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
        "patch": "@@ -27,6 +27,7 @@\n #include <vector>\n \n namespace {\n+const TestingSetup* g_setup;\n const Coin EMPTY_COIN{};\n \n bool operator==(const Coin& a, const Coin& b)\n@@ -39,6 +40,7 @@ bool operator==(const Coin& a, const Coin& b)\n void initialize_coins_view()\n {\n     static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n@@ -268,7 +270,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\n                 bool expected_code_path = false;\n                 try {\n-                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats);\n+                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_setup->m_node.chainman->m_blockman)), stats);\n                 } catch (const std::logic_error&) {\n                     expected_code_path = true;\n                 }"
      },
      {
        "sha": "a7770c90e8db519e6131375f68d7b5db89511407",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
        "patch": "@@ -13,9 +13,14 @@\n #include <cstdint>\n #include <vector>\n \n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n void initialize_load_external_block_file()\n {\n     static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n@@ -27,5 +32,5 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n         return;\n     }\n     FlatFilePos flat_file_pos;\n-    ::ChainstateActive().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n+    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n }"
      },
      {
        "sha": "c2aaf486c5d3319cb819fc418e5ee1ef3e2205fa",
        "filename": "src/test/fuzz/validation_load_mempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/validation_load_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5/src/test/fuzz/validation_load_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/validation_load_mempool.cpp?ref=ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
        "patch": "@@ -14,9 +14,14 @@\n #include <cstdint>\n #include <vector>\n \n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n void initialize_validation_load_mempool()\n {\n     static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(validation_load_mempool, initialize_validation_load_mempool)\n@@ -29,6 +34,6 @@ FUZZ_TARGET_INIT(validation_load_mempool, initialize_validation_load_mempool)\n     auto fuzzed_fopen = [&](const fs::path&, const char*) {\n         return fuzzed_file_provider.open();\n     };\n-    (void)LoadMempool(pool, ::ChainstateActive(), fuzzed_fopen);\n+    (void)LoadMempool(pool, g_setup->m_node.chainman->ActiveChainstate(), fuzzed_fopen);\n     (void)DumpMempool(pool, fuzzed_fopen, true);\n }"
      }
    ]
  },
  {
    "sha": "6c15de129cd645bf0547cb184003fae131b95b83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzE1ZGUxMjljZDY0NWJmMDU0N2NiMTg0MDAzZmFlMTMxYjk1Yjgz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:35:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "scripted-diff: wallet/test: Use existing chainman\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- src/wallet/test \\\n    | xargs sed -i -E \\\n            -e 's@g_chainman\\.m_blockman@m_node.chainman->m_blockman@g' \\\n            -e 's@([^:])(Chain(state|)Active)@\\1::\\2@g' \\\n            -e 's@::Chain(state|)Active\\(\\)@m_node.chainman->ActiveChain\\1()@g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "cda987a57054d8f7fecc54c25349e4e9463c8e8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda987a57054d8f7fecc54c25349e4e9463c8e8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c15de129cd645bf0547cb184003fae131b95b83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c15de129cd645bf0547cb184003fae131b95b83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c15de129cd645bf0547cb184003fae131b95b83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c15de129cd645bf0547cb184003fae131b95b83/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee0ab1e959e0e75e04d87fabae8334ad4656f3e5"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a0070b8dd321fad1a99f4c894025d5a417620016",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c15de129cd645bf0547cb184003fae131b95b83/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c15de129cd645bf0547cb184003fae131b95b83/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6c15de129cd645bf0547cb184003fae131b95b83",
        "patch": "@@ -83,17 +83,17 @@ static void AddKey(CWallet& wallet, const CKey& key)\n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* oldTip = ::ChainActive().Tip();\n+    CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = ::ChainActive().Tip();\n+    CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -112,7 +112,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -138,7 +138,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -163,7 +163,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -180,10 +180,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* oldTip = ::ChainActive().Tip();\n+    CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = ::ChainActive().Tip();\n+    CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\n \n     // Prune the older block file.\n     {\n@@ -242,7 +242,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n-    const int64_t BLOCK_TIME = ::ChainActive().Tip()->GetBlockTimeMax() + 5;\n+    const int64_t BLOCK_TIME = m_node.chainman->ActiveChain().Tip()->GetBlockTimeMax() + 5;\n     SetMockTime(BLOCK_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n@@ -265,7 +265,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n             spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n             AddWallet(wallet);\n-            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -286,7 +286,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n-        wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n         RemoveWallet(wallet, std::nullopt);\n \n@@ -313,9 +313,9 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n     LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n-    wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+    wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n-    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 0);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash(), 0);\n     wtx.m_confirm = confirm;\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n@@ -483,16 +483,16 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n-            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         wallet->LoadWallet();\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(m_node.chainman->ActiveChain().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n-        BOOST_CHECK_EQUAL(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n-        BOOST_CHECK_EQUAL(*result.last_scanned_height, ::ChainActive().Height());\n+        BOOST_CHECK_EQUAL(result.last_scanned_block, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(*result.last_scanned_height, m_node.chainman->ActiveChain().Height());\n         BOOST_CHECK(result.last_failed_block.IsNull());\n     }\n \n@@ -521,10 +521,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n \n         LOCK(wallet->cs_wallet);\n-        wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 1);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash(), 1);\n         it->second.m_confirm = confirm;\n         return it->second;\n     }"
      }
    ]
  },
  {
    "sha": "f323248aba5088c9630e5cdfe5ce980f21633fe8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzIzMjQ4YWJhNTA4OGM5NjMwZTVjZGZlNWNlOTgwZjIxNjMzZmU4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:35:27Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "qt/test: Use existing chainman in ::TestGUI (can be scripted-diff)",
      "tree": {
        "sha": "a757c8d4b38592b54e30ef3d72901a79fa383aad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a757c8d4b38592b54e30ef3d72901a79fa383aad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f323248aba5088c9630e5cdfe5ce980f21633fe8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f323248aba5088c9630e5cdfe5ce980f21633fe8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f323248aba5088c9630e5cdfe5ce980f21633fe8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f323248aba5088c9630e5cdfe5ce980f21633fe8/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c15de129cd645bf0547cb184003fae131b95b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c15de129cd645bf0547cb184003fae131b95b83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c15de129cd645bf0547cb184003fae131b95b83"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3e1a0e0fa915cde86356fd633865cba44d35c76b",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f323248aba5088c9630e5cdfe5ce980f21633fe8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f323248aba5088c9630e5cdfe5ce980f21633fe8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=f323248aba5088c9630e5cdfe5ce980f21633fe8",
        "patch": "@@ -146,14 +146,14 @@ void TestGUI(interfaces::Node& node)\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n         spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n-        wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(105, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n     }\n     {\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n-        QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n+        QCOMPARE(result.last_scanned_block, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());\n     }\n     wallet->SetBroadcastTransactions(true);"
      }
    ]
  },
  {
    "sha": "3e82abb8dd7e21ec918966105648be7ae077fd8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTgyYWJiOGRkN2UyMWVjOTE4OTY2MTA1NjQ4YmU3YWUwNzdmZDhj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-11-04T22:18:09Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:04:39Z"
      },
      "message": "tree-wide: Remove stray review-only assertion\n\nUnfortunately, these assertion don't fit the regex in the scripted-diff.\nTherefore, we remove it manually.",
      "tree": {
        "sha": "e06a808ce6e0b98b601084e70d5fddee67057ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e06a808ce6e0b98b601084e70d5fddee67057ef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e82abb8dd7e21ec918966105648be7ae077fd8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e82abb8dd7e21ec918966105648be7ae077fd8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e82abb8dd7e21ec918966105648be7ae077fd8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e82abb8dd7e21ec918966105648be7ae077fd8c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f323248aba5088c9630e5cdfe5ce980f21633fe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f323248aba5088c9630e5cdfe5ce980f21633fe8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f323248aba5088c9630e5cdfe5ce980f21633fe8"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 4,
      "deletions": 38
    },
    "files": [
      {
        "sha": "b83cde4e4b6eee62e5c3409e845fcb2bd8a5e723",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e82abb8dd7e21ec918966105648be7ae077fd8c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e82abb8dd7e21ec918966105648be7ae077fd8c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3e82abb8dd7e21ec918966105648be7ae077fd8c",
        "patch": "@@ -45,15 +45,7 @@ void RegenerateCommitments(CBlock& block, ChainstateManager& chainman)\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    CBlockIndex* prev_block;\n-    {\n-        // TODO: Temporary scope to check correctness of refactored code.\n-        // Should be removed manually after merge of\n-        // https://github.com/bitcoin/bitcoin/pull/20158\n-        LOCK(::cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n-        prev_block = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n-    }\n+    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n     GenerateCoinbaseCommitment(block, prev_block, Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);"
      },
      {
        "sha": "0c5fa419cfd5c10235141eee7ae52af391bb37b0",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 29,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e82abb8dd7e21ec918966105648be7ae077fd8c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e82abb8dd7e21ec918966105648be7ae077fd8c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=3e82abb8dd7e21ec918966105648be7ae077fd8c",
        "patch": "@@ -202,15 +202,7 @@ class NodeImpl : public Node\n     }\n     uint256 getBestBlockHash() override\n     {\n-        const CBlockIndex* tip;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n-            tip = chainman().ActiveChain().Tip();\n-        }\n+        const CBlockIndex* tip = WITH_LOCK(::cs_main, return chainman().ActiveChain().Tip());\n         return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n     }\n     int64_t getLastBlockTime() override\n@@ -233,16 +225,7 @@ class NodeImpl : public Node\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override {\n-        const CChainState* active_chainstate;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(::cs_main);\n-            active_chainstate = &m_context->chainman->ActiveChainstate();\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n-        }\n-        return active_chainstate->IsInitialBlockDownload();\n+        return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }\n@@ -647,16 +630,7 @@ class ChainImpl : public Chain\n     }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override {\n-        const CChainState* active_chainstate;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(::cs_main);\n-            active_chainstate = &chainman().ActiveChainstate();\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n-        }\n-        return active_chainstate->IsInitialBlockDownload();\n+        return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }"
      }
    ]
  },
  {
    "sha": "6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzNiNWRjMGMxM2MzYWM4YzZlODYyOThmOTI0YWJlOTlkOGQ2YmQx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:20:26Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:05:24Z"
      },
      "message": "scripted-diff: tree-wide: Remove all review-only assertions\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='((assert|CHECK_NONFATAL)\\(std::addressof|TODO: REVIEW-ONLY)' \\\n    && git grep -l -E \"$find_regex\" -- . \\\n        | xargs sed -i -E \"/${find_regex}/d\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "756ec8e7204730cbfe20bc3d5934bb1951a1e1b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/756ec8e7204730cbfe20bc3d5934bb1951a1e1b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e82abb8dd7e21ec918966105648be7ae077fd8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e82abb8dd7e21ec918966105648be7ae077fd8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e82abb8dd7e21ec918966105648be7ae077fd8c"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 0,
      "deletions": 81
    },
    "files": [
      {
        "sha": "8703a1cf942b6b91d5e4dbf39fa34fd7cf0772ba",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -25,7 +25,6 @@ static void DuplicateInputs(benchmark::Bench& bench)\n     CMutableTransaction naughtyTx{};\n \n     LOCK(cs_main);\n-    assert(std::addressof(::ChainActive()) == std::addressof(testing_setup->m_node.chainman->ActiveChain()));\n     CBlockIndex* pindexPrev = testing_setup->m_node.chainman->ActiveChain().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());"
      },
      {
        "sha": "6fd2701e2e8e30f4595ae67df1154ec0ab89a656",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -340,7 +340,6 @@ void BaseIndex::Interrupt()\n \n bool BaseIndex::Start(CChainState& active_chainstate)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     m_chainstate = &active_chainstate;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true."
      },
      {
        "sha": "dcc2a0ebcc82e1fc1d038839cedc0a9d9985d138",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -1384,7 +1384,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n                 if (!chainman.BlockIndex().empty() &&\n                         !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n@@ -1612,7 +1611,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n-    assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n     if (chainman.ActiveChain().Tip() == nullptr) {\n         block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {"
      },
      {
        "sha": "0cf303eb3c422ab5e23334ba6a67345f0f7a8836",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -116,7 +116,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*m_chainstate.m_chain.Tip()));\n     CBlockIndex* pindexPrev = m_chainstate.m_chain.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n@@ -176,7 +175,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(m_chainstate));\n     if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }"
      },
      {
        "sha": "5f68646af5405375c5aa3ce5f738c25ab7684917",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -1361,7 +1361,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n-    assert(std::addressof(g_chainman) == std::addressof(m_chainman));\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n "
      },
      {
        "sha": "013d61282b1fbec7bf0cd35f76a6c46e82a7661c",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -248,7 +248,6 @@ bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight,\n             // when the undo file is keeping up with the block file, we want to flush it explicitly\n             // when it is lagging behind (more blocks arrive than are being connected), we let the\n             // undo block write case handle it\n-            assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n             finalize_undo = (vinfoBlockFile[nFile].nHeightLast == (unsigned int)active_chain.Tip()->nHeight);\n             nFile++;\n             if (vinfoBlockFile.size() <= nFile) {"
      },
      {
        "sha": "50fddf3ab0dc3877a54615f68781906434457a6a",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -13,7 +13,6 @@ void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n     assert(node.mempool);\n     assert(node.chainman);\n     LOCK2(cs_main, node.mempool->cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     CCoinsViewCache& chain_view = node.chainman->ActiveChainstate().CoinsTip();\n     CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {"
      },
      {
        "sha": "67e497c218aaaedcac98fd5f9970759391f8870b",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -97,7 +97,6 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     if (!pindex) {\n         {\n             LOCK(cs_main);\n-            assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n             pindex = blockman.LookupBlockIndex(view->GetBestBlock());\n         }\n     }"
      },
      {
        "sha": "58889ee08ba95c374d75eb86eaa0ca46aed694b1",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -197,7 +197,6 @@ class NodeImpl : public Node\n     int getNumBlocks() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         return chainman().ActiveChain().Height();\n     }\n     uint256 getBestBlockHash() override\n@@ -208,7 +207,6 @@ class NodeImpl : public Node\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         if (chainman().ActiveChain().Tip()) {\n             return chainman().ActiveChain().Tip()->GetBlockTime();\n         }\n@@ -219,7 +217,6 @@ class NodeImpl : public Node\n         const CBlockIndex* tip;\n         {\n             LOCK(::cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n             tip = chainman().ActiveChain().Tip();\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n@@ -252,7 +249,6 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(chainman().ActiveChainstate()));\n         return chainman().ActiveChainstate().CoinsTip().GetCoin(output, coin);\n     }\n     WalletClient& walletClient() override\n@@ -459,14 +455,12 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         return CheckFinalTx(chainman().ActiveChain().Tip(), tx);\n     }\n     std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n@@ -476,7 +470,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return FillBlock(m_node.chainman->m_blockman.LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n@@ -489,7 +482,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -501,9 +493,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* ancestor = m_node.chainman->m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -512,9 +502,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block1 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash1);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block2 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n@@ -525,7 +513,6 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n         return GuessVerificationProgress(Params().TxData(), chainman().m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, std::optional<int> max_height) override\n@@ -538,7 +525,6 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n         if (CBlockIndex* block = chainman().m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {"
      },
      {
        "sha": "f21b3909150925f8a80a0db0366585f412159621",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -40,7 +40,6 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     { // cs_main scope\n     assert(node.chainman);\n     LOCK(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     // If the transaction is already confirmed in the chain, don't do anything\n     // and return early.\n     CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();"
      },
      {
        "sha": "63897e0e05b4da5f0aec9fc8d977e8f62966fd44",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -84,7 +84,6 @@ ChainstateManager& EnsureChainman(const NodeContext& node)\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n-    WITH_LOCK(::cs_main, CHECK_NONFATAL(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n "
      },
      {
        "sha": "327f9611960f23f65dc87d38a3d0a6805bd9a9ad",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -114,7 +114,6 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n \n     {\n         LOCK(cs_main);\n-        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);\n     }\n \n@@ -147,7 +146,6 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         nHeight = chainman.ActiveChain().Height();\n         nHeightEnd = nHeight+nGenerate;\n     }"
      },
      {
        "sha": "c5a4bbf1b002099f5fdce0f359e6f437068adfb1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -513,7 +513,6 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n         CCoinsViewMemPool view_mempool(&active_chainstate.CoinsTip(), *this);\n         if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags)\n@@ -638,10 +637,8 @@ void CTxMemPool::check(CChainState& active_chainstate) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache& active_coins_tip = active_chainstate.CoinsTip();\n-    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(active_coins_tip)); // TODO: REVIEW-ONLY, REMOVE IN FUTURE COMMIT\n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(&active_coins_tip));\n     const int64_t spendheight = active_chainstate.m_chain.Height() + 1;\n-    assert(g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate) == spendheight); // TODO: REVIEW-ONLY, REMOVE IN FUTURE COMMIT\n \n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      },
      {
        "sha": "8f2283e673573afb15eaeb1c2abc132d703e61d2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "patch": "@@ -161,7 +161,6 @@ void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false);\n CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash) const\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));\n     BlockMap::const_iterator it = m_block_index.find(hash);\n     return it == m_block_index.end() ? nullptr : it->second;\n }\n@@ -170,7 +169,6 @@ CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlo\n {\n     AssertLockHeld(cs_main);\n \n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n@@ -198,7 +196,6 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n {\n     AssertLockHeld(cs_main);\n     assert(active_chain_tip); // TODO: Make active_chain_tip a reference\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*active_chain_tip));\n \n     // By convention a negative value for flags indicates that the\n     // current network-enforced consensus rules should be used. In\n@@ -237,7 +234,6 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     if (lp->maxInputBlock) {\n         // Check whether ::ChainActive() is an extension of the block at which the LockPoints\n         // calculation was valid.  If not LockPoints are no longer valid\n-        assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n         if (!active_chain.Contains(lp->maxInputBlock)) {\n             return false;\n         }\n@@ -331,15 +327,13 @@ static void LimitMempoolSize(CTxMemPool& pool, CCoinsViewCache& coins_cache, siz\n \n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n-    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(coins_cache));\n     for (const COutPoint& removed : vNoSpendsRemaining)\n         coins_cache.Uncache(removed);\n }\n \n static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (active_chainstate.IsInitialBlockDownload())\n         return false;\n     if (active_chainstate.m_chain.Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n@@ -366,7 +360,6 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -433,7 +426,6 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n             assert(txFrom->vout.size() > txin.prevout.n);\n             assert(txFrom->vout[txin.prevout.n] == coin.out);\n         } else {\n-            assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(coins_tip));\n             const Coin& coinFromUTXOSet = coins_tip.AccessCoin(txin.prevout);\n             assert(!coinFromUTXOSet.IsSpent());\n             assert(coinFromUTXOSet.out == coin.out);\n@@ -454,7 +446,6 @@ class MemPoolAccept\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n         m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -607,7 +598,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n@@ -663,7 +653,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n \n-    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n     const CCoinsViewCache& coins_cache = m_active_chainstate.CoinsTip();\n     // do all inputs exist?\n     for (const CTxIn& txin : tx.vin) {\n@@ -701,18 +690,15 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // be mined yet.\n     // Pass in m_view which has all of the relevant inputs cached. Note that, since m_view's\n     // backend was removed, it no longer pulls coins from the mempool.\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n     if (!CheckSequenceLocks(m_active_chainstate.m_chain.Tip(), m_view, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_active_chainstate.m_blockman));\n     if (!Consensus::CheckTxInputs(tx, state, m_view, m_active_chainstate.m_blockman.GetSpendHeight(m_view), ws.m_base_fees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n-    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n     auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n     if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -739,7 +725,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n     entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, m_active_chainstate.m_chain.Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n     unsigned int nSize = entry->GetTxSize();\n@@ -992,9 +977,7 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, P\n     // There is a similar check in CreateNewBlock() to prevent creating\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n-    assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());\n-    assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n     if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, m_active_chainstate.CoinsTip())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n@@ -1035,15 +1018,13 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n     bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n@@ -1146,7 +1127,6 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n                                    test_accept, /* m_allow_bip125_replacement */ true };\n \n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling\n@@ -1166,7 +1146,6 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n@@ -1182,7 +1161,6 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n     const CChainParams& chainparams = Params();\n     MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n                                    test_accept, /* m_allow_bip125_replacement */ false };\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n \n     // Uncache coins pertaining to transactions that were not submitted to the mempool.\n@@ -1321,7 +1299,6 @@ static void AlertNotify(const std::string& strMessage)\n void CChainState::CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n \n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before finishing our initial sync)\n@@ -1340,7 +1317,6 @@ void CChainState::CheckForkWarningConditions()\n // Called both upon regular invalid block discovery *and* InvalidateBlock\n void CChainState::InvalidChainFound(CBlockIndex* pindexNew)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n     if (pindexBestHeader != nullptr && pindexBestHeader->GetAncestor(pindexNew->nHeight) == pindexNew) {\n@@ -1401,7 +1377,6 @@ bool CScriptCheck::operator()() {\n int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n@@ -2285,7 +2260,6 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (!active_chainstate.IsInitialBlockDownload()) {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n@@ -2301,7 +2275,6 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n             }\n         }\n     }\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n@@ -2561,7 +2534,6 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2661,7 +2633,6 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n             fInitialBlockDownload = chainstate.IsInitialBlockDownload();\n             pindexHeaderOld = pindexHeader;\n         }\n@@ -2872,7 +2843,6 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n         UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n@@ -3203,7 +3173,6 @@ CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n         CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n@@ -3236,7 +3205,6 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n         CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n@@ -3440,7 +3408,6 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n // Exposed wrapper for AcceptBlockHeader\n bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n     AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n@@ -3531,7 +3498,6 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n \n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n-    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n         FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, chainparams, dbp);\n         if (blockPos.IsNull()) {\n@@ -3553,7 +3519,6 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block)\n {\n     AssertLockNotHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n@@ -3598,7 +3563,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());\n     CCoinsViewCache viewNew(&chainstate.CoinsTip());\n     uint256 block_hash(block.GetHash());\n@@ -3608,7 +3572,6 @@ bool TestBlockValidity(BlockValidationState& state,\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainstate.m_blockman));\n     if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n@@ -3688,7 +3651,6 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (!active_chainstate.FlushStateToDisk(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n@@ -3842,7 +3804,6 @@ void BlockManager::Unload() {\n \n bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n     if (!m_blockman.LoadBlockIndex(\n             chainparams.GetConsensus(), *pblocktree,\n             setBlockIndexCandidates)) {\n@@ -3899,7 +3860,6 @@ bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams)\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n         ::LoadMempool(m_mempool, *this);\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n@@ -3951,7 +3911,6 @@ bool CVerifyDB::VerifyDB(\n {\n     AssertLockHeld(cs_main);\n \n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     if (chainstate.m_chain.Tip() == nullptr || chainstate.m_chain.Tip()->pprev == nullptr)\n         return true;\n \n@@ -4220,7 +4179,6 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n     if (m_blockman.m_block_index.count(chainparams.GenesisBlock().GetHash()))\n         return true;\n \n-    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n         FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, chainparams, nullptr);\n@@ -4284,7 +4242,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n@@ -4294,11 +4251,9 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                     }\n \n                     // process in case the block isn't known yet\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                       if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n@@ -4313,13 +4268,11 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                     if (!ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }\n \n-                assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                 NotifyHeaderTip(*this);\n \n                 // Recursively process earlier encountered successors of this block\n@@ -4338,7 +4291,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                             if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n@@ -4347,7 +4299,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                         NotifyHeaderTip(*this);\n                     }\n                 }\n@@ -4628,7 +4579,6 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n                 if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime, false /* bypass_limits */,\n                                                false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;"
      }
    ]
  },
  {
    "sha": "972c5166ee685447a6d4bf5e501b07a0871fba85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzJjNTE2NmVlNjg1NDQ3YTZkNGJmNWU1MDFiMDdhMDg3MWZiYTg1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:35:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:05:25Z"
      },
      "message": "qt/test: Reset chainman in ~ChainstateManager instead\n\nThere are some mutable, global state variables that are currently reset\nby UnloadBlockIndex such as pindexBestHeader which should be cleaned up\nwhenever the ChainstateManager is unloaded/reset/destructed/etc.\n\nNot cleaning them up leads to bugs like a use-after-free that happens\nlike so:\n\n1. At the end of a test, ChainstateManager is destructed, which also\n   destructs BlockManager, which calls BlockManager::Unload to free all\n   CBlockIndexes in its BlockMap\n2. Since pindexBestHeader is not cleaned up, it now points to an invalid\n   location\n3. Another test starts to init, and calls LoadGenesisBlock, which calls\n   AddToBlockIndex, which compares the genesis block with an invalid\n   location\n4. Cute puppies perish by the hundreds\n\nPreviously, for normal codepaths (e.g. bitcoind), we relied on the fact\nthat our program will be unloaded by the operating system which\neffectively resets these variables. The one exception is in QT tests,\nwhere these variables had to be manually reset.\n\nSince now ChainstateManager is no longer a global, we can just put this\nlogic in its destructor to make sure that callers are always correct.\n\nOver time, we should probably move these mutable global state variables\ninto ChainstateManager or CChainState so it's easier to reason about\ntheir lifecycles.",
      "tree": {
        "sha": "184980a731a42e4bee913efd40958ae6d114989e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/184980a731a42e4bee913efd40958ae6d114989e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/972c5166ee685447a6d4bf5e501b07a0871fba85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5166ee685447a6d4bf5e501b07a0871fba85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/972c5166ee685447a6d4bf5e501b07a0871fba85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5166ee685447a6d4bf5e501b07a0871fba85/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c3b5dc0c13c3ac8c6e86298f924abe99d8d6bd1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9c31cd50dfd7cfc022499643099b588d7287a255",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/972c5166ee685447a6d4bf5e501b07a0871fba85/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/972c5166ee685447a6d4bf5e501b07a0871fba85/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=972c5166ee685447a6d4bf5e501b07a0871fba85",
        "patch": "@@ -85,11 +85,6 @@ void AppTests::appTests()\n     // Reset global state to avoid interfering with later tests.\n     LogInstance().DisconnectTestLogger();\n     AbortShutdown();\n-    {\n-        LOCK(cs_main);\n-        UnloadBlockIndex(/* mempool */ nullptr, g_chainman);\n-        g_chainman.Reset();\n-    }\n }\n \n //! Entry point for BitcoinGUI tests."
      },
      {
        "sha": "a3ead9443ec66806d2c6c009a61fa973ced57bb6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/972c5166ee685447a6d4bf5e501b07a0871fba85/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/972c5166ee685447a6d4bf5e501b07a0871fba85/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=972c5166ee685447a6d4bf5e501b07a0871fba85",
        "patch": "@@ -1017,6 +1017,12 @@ class ChainstateManager\n     //! Check to see if caches are out of balance and if so, call\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    ~ChainstateManager() {\n+        LOCK(::cs_main);\n+        UnloadBlockIndex(/* mempool */ nullptr, *this);\n+        Reset();\n+    }\n };\n \n /** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */"
      }
    ]
  },
  {
    "sha": "6f994882deafe62e97f0a889d8bdb8c96dcf913d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjk5NDg4MmRlYWZlNjJlOTdmMGE4ODlkOGJkYjhjOTZkY2Y5MTNk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:35:11Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-10T19:05:25Z"
      },
      "message": "validation: Farewell, global Chainstate!",
      "tree": {
        "sha": "b7146c5915735a43da76340c665928441137bd49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7146c5915735a43da76340c665928441137bd49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f994882deafe62e97f0a889d8bdb8c96dcf913d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f994882deafe62e97f0a889d8bdb8c96dcf913d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f994882deafe62e97f0a889d8bdb8c96dcf913d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f994882deafe62e97f0a889d8bdb8c96dcf913d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "972c5166ee685447a6d4bf5e501b07a0871fba85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5166ee685447a6d4bf5e501b07a0871fba85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/972c5166ee685447a6d4bf5e501b07a0871fba85"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 8,
      "deletions": 35
    },
    "files": [
      {
        "sha": "58d3553e8a27552f4c760b4a038812824eef80a6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -283,7 +283,7 @@ void Shutdown(NodeContext& node)\n     init::UnsetGlobals();\n     node.mempool.reset();\n     node.fee_estimator.reset();\n-    node.chainman = nullptr;\n+    node.chainman.reset();\n     node.scheduler.reset();\n \n     try {\n@@ -1179,8 +1179,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n-    node.chainman = &g_chainman;\n-    ChainstateManager& chainman = *Assert(node.chainman);\n+    node.chainman = std::make_unique<ChainstateManager>();\n+    ChainstateManager& chainman = *node.chainman;\n \n     assert(!node.peerman);\n     node.peerman = PeerManager::make(chainparams, *node.connman, *node.addrman, node.banman.get(),"
      },
      {
        "sha": "9afadd09a97edfa1e3a741b3e0c24a94f231b96f",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -12,6 +12,7 @@\n #include <policy/fees.h>\n #include <scheduler.h>\n #include <txmempool.h>\n+#include <validation.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "135f9ea1c6a68d5866b9833a3c1fa1b2d1eb05c9",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -44,7 +44,7 @@ struct NodeContext {\n     std::unique_ptr<CTxMemPool> mempool;\n     std::unique_ptr<CBlockPolicyEstimator> fee_estimator;\n     std::unique_ptr<PeerManager> peerman;\n-    ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    std::unique_ptr<ChainstateManager> chainman;\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;"
      },
      {
        "sha": "d599f381e30eab79b82aaafc607696f2d16e08f3",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -125,7 +125,7 @@ static ChainstateManager* GetChainman(const std::any& context, HTTPRequest* req)\n                           __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));\n         return nullptr;\n     }\n-    return node_context->chainman;\n+    return node_context->chainman.get();\n }\n \n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)"
      },
      {
        "sha": "028d200bfd8e862e7d7029e9107d155421e7b9c8",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -145,7 +145,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     m_node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n     m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n-    m_node.chainman = &::g_chainman;\n+    m_node.chainman = std::make_unique<ChainstateManager>();\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n@@ -167,7 +167,7 @@ ChainTestingSetup::~ChainTestingSetup()\n     m_node.mempool.reset();\n     m_node.scheduler.reset();\n     m_node.chainman->Reset();\n-    m_node.chainman = nullptr;\n+    m_node.chainman.reset();\n     pblocktree.reset();\n }\n "
      },
      {
        "sha": "21785ba208a7a5547dd10cfd5b7fdd8783685e8d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -101,21 +101,6 @@ bool CBlockIndexWorkComparator::operator()(const CBlockIndex *pa, const CBlockIn\n     return false;\n }\n \n-ChainstateManager g_chainman;\n-\n-CChainState& ChainstateActive()\n-{\n-    LOCK(::cs_main);\n-    assert(g_chainman.m_active_chainstate);\n-    return *g_chainman.m_active_chainstate;\n-}\n-\n-CChain& ChainActive()\n-{\n-    LOCK(::cs_main);\n-    return ::ChainstateActive().m_chain;\n-}\n-\n /**\n  * Mutex to guard access to validation specific variables, such as reading\n  * or changing the chainstate."
      },
      {
        "sha": "5720ba8071c22881b349686aec96a32a5da928dc",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f994882deafe62e97f0a889d8bdb8c96dcf913d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6f994882deafe62e97f0a889d8bdb8c96dcf913d",
        "patch": "@@ -891,10 +891,6 @@ class ChainstateManager\n         CAutoFile& coins_file,\n         const SnapshotMetadata& metadata);\n \n-    // For access to m_active_chainstate.\n-    friend CChainState& ChainstateActive();\n-    friend CChain& ChainActive();\n-\n public:\n     std::thread m_load_block;\n     //! A single BlockManager instance is shared across each constructed\n@@ -1025,15 +1021,6 @@ class ChainstateManager\n     }\n };\n \n-/** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */\n-extern ChainstateManager g_chainman GUARDED_BY(::cs_main);\n-\n-/** Please prefer the identical ChainstateManager::ActiveChainstate */\n-CChainState& ChainstateActive();\n-\n-/** Please prefer the identical ChainstateManager::ActiveChain */\n-CChain& ChainActive();\n-\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n "
      }
    ]
  }
]