[
  {
    "sha": "78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGUzZGY2ZmEwZjYyODJmYmYwNzg1Y2E1YzllMTQ3YjBmNWM3N2Vh",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-19T23:43:11Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-20T21:31:18Z"
      },
      "message": "Move key derivation logic from GenerateNewKey to DeriveNewChildKey",
      "tree": {
        "sha": "8077bb863193a29ed8e97551f609b9e1458593e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8077bb863193a29ed8e97551f609b9e1458593e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 43,
      "deletions": 37
    },
    "files": [
      {
        "sha": "12ee46cab0e81d4b0094bd502d957553cfc47be2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 37,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
        "patch": "@@ -99,43 +99,7 @@ CPubKey CWallet::GenerateNewKey()\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (!hdChain.masterKeyID.IsNull()) {\n-        // for now we use a fixed keypath scheme of m/0'/0'/k\n-        CKey key;                      //master key seed (256bit)\n-        CExtKey masterKey;             //hd master key\n-        CExtKey accountKey;            //key at m/0'\n-        CExtKey externalChainChildKey; //key at m/0'/0'\n-        CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-        // try to get the master key\n-        if (!GetKey(hdChain.masterKeyID, key))\n-            throw std::runtime_error(\"CWallet::GenerateNewKey(): Master key not found\");\n-\n-        masterKey.SetMaster(key.begin(), key.size());\n-\n-        // derive m/0'\n-        // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n-        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-        // derive m/0'/0'\n-        accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-        // derive child key at next index, skip keys already known to the wallet\n-        do\n-        {\n-            // always derive hardened keys\n-            // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n-            // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n-            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath     = \"m/0'/0'/\"+std::to_string(hdChain.nExternalChainCounter)+\"'\";\n-            metadata.hdMasterKeyID = hdChain.masterKeyID;\n-            // increment childkey index\n-            hdChain.nExternalChainCounter++;\n-        } while(HaveKey(childKey.key.GetPubKey().GetID()));\n-        secret = childKey.key;\n-\n-        // update the chain model in the database\n-        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n-            throw std::runtime_error(\"CWallet::GenerateNewKey(): Writing HD chain model failed\");\n+        DeriveNewChildKey(metadata, secret);\n     } else {\n         secret.MakeNewKey(fCompressed);\n     }\n@@ -156,6 +120,47 @@ CPubKey CWallet::GenerateNewKey()\n     return pubkey;\n }\n \n+void CWallet::DeriveNewChildKey(CKeyMetadata &metadata, CKey &secret)\n+{\n+    // for now we use a fixed keypath scheme of m/0'/0'/k\n+    CKey key;                      //master key seed (256bit)\n+    CExtKey masterKey;             //hd master key\n+    CExtKey accountKey;            //key at m/0'\n+    CExtKey externalChainChildKey; //key at m/0'/0'\n+    CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+    // try to get the master key\n+    if (!GetKey(hdChain.masterKeyID, key))\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): Master key not found\");\n+\n+    masterKey.SetMaster(key.begin(), key.size());\n+\n+    // derive m/0'\n+    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+    // derive m/0'/0'\n+    accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+    // derive child key at next index, skip keys already known to the wallet\n+    do\n+    {\n+        // always derive hardened keys\n+        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+        externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+        metadata.hdKeypath     = \"m/0'/0'/\"+std::to_string(hdChain.nExternalChainCounter)+\"'\";\n+        metadata.hdMasterKeyID = hdChain.masterKeyID;\n+        // increment childkey index\n+        hdChain.nExternalChainCounter++;\n+    } while(HaveKey(childKey.key.GetPubKey().GetID()));\n+    secret = childKey.key;\n+\n+    // update the chain model in the database\n+    if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+        throw std::runtime_error(\"CWallet::DeriveNewChildKey(): Writing HD chain model failed\");\n+}\n+\n bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata"
      },
      {
        "sha": "62a2b9a7c51ed47d3890575a470f67f880102981",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=78e3df6fa0f6282fbf0785ca5c9e147b0f5c77ea",
        "patch": "@@ -683,6 +683,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Generate a new key\n      */\n     CPubKey GenerateNewKey();\n+    void DeriveNewChildKey(CKeyMetadata &metadata, CKey &secret);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)"
      }
    ]
  }
]