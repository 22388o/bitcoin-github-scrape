[
  {
    "sha": "faff3f35b778d9af3d649b303d7edab49bfe40b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZmM2YzNWI3NzhkOWFmM2Q2NDliMzAzZDdlZGFiNDliZmU0MGI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T10:57:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:38:10Z"
      },
      "message": "test: Add txin.sequence option to MiniWallet",
      "tree": {
        "sha": "9e8265498cfb61fc2f3b3f9f95829620473d7ca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e8265498cfb61fc2f3b3f9f95829620473d7ca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faff3f35b778d9af3d649b303d7edab49bfe40b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjU4gv/VvW4TNsO7Px8c8oLjxKlnB+9CZhnEg1nby/IkYxeVSnP7kT/zsj+FtaH\nlxvIwhkb9OSxeZTRkN1zS54htK5kGvKFC5YMQ9denQJLZCnrO0j/BOzKU/6De9BO\noAgcmHtSSo9t/ZnI+fh1pp33DpgR7HPHeWqX0qepXbrT/mf1bnls0HSpWTYfXoxK\nPnni/Ax/bblEfLcUORYOcmLVNxT5cKNH2lrs7W/WvT7IQCnXYERYSSnyjkdLO8Sl\nvasdL3ggFakoU8NaPjXcQIcyP0RWVg6ALzXGbPFgh2zOkcZm9b1jmDyATIuN0/wZ\nkze73WpapWm1FfUBK5I3xGCODH1KigzpoiFuChnN+/CyGwOo215jumjFPiUoBogZ\n4XVN7N+Up6o0y/7lCHV4rx0xsdBxe3Tsbf6wsH30naWgyjsJbHS0ZjnMokzmECvb\nLvUydrez+XZjMal4C4Y2f9Wf9ZPW4VCPB8taB84ly0NjY8d0LfolQVk5dzCjp53F\nUdF33zgc\n=yxuN\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e8265498cfb61fc2f3b3f9f95829620473d7ca5\nparent e87fbee4026b8896508dd47fbb04bb2994f52322\nauthor MarcoFalke <falke.marco@gmail.com> 1623322635 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623325090 +0200\n\ntest: Add txin.sequence option to MiniWallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faff3f35b778d9af3d649b303d7edab49bfe40b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faff3f35b778d9af3d649b303d7edab49bfe40b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faff3f35b778d9af3d649b303d7edab49bfe40b4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e87fbee4026b8896508dd47fbb04bb2994f52322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87fbee4026b8896508dd47fbb04bb2994f52322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e87fbee4026b8896508dd47fbb04bb2994f52322"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ad58a62e2864f3e8b4738c183f128fbc4ed624ce",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faff3f35b778d9af3d649b303d7edab49bfe40b4/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faff3f35b778d9af3d649b303d7edab49bfe40b4/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=faff3f35b778d9af3d649b303d7edab49bfe40b4",
        "patch": "@@ -124,13 +124,13 @@ def get_utxo(self, *, txid: Optional[str]='', mark_as_spent=True):\n         else:\n             return self._utxos[index]\n \n-    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, locktime=0):\n+    def send_self_transfer(self, **kwargs):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n-        tx = self.create_self_transfer(fee_rate=fee_rate, from_node=from_node, utxo_to_spend=utxo_to_spend)\n-        self.sendrawtransaction(from_node=from_node, tx_hex=tx['hex'])\n+        tx = self.create_self_transfer(**kwargs)\n+        self.sendrawtransaction(from_node=kwargs['from_node'], tx_hex=tx['hex'])\n         return tx\n \n-    def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0):\n+    def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0, sequence=0):\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n@@ -140,7 +140,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         assert send_value > 0\n \n         tx = CTransaction()\n-        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']), nSequence=sequence)]\n         tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n         tx.nLockTime = locktime\n         if not self._address:"
      }
    ]
  },
  {
    "sha": "fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI4NzFmNjQ5ZTNkYTRhNWE1ZjZjZmZhYzNmYzc0OGJiMWNhOTAw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T10:55:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:38:18Z"
      },
      "message": "test: Remove unused generate() from test\n\nThis is already done by the test framework in setup_nodes()",
      "tree": {
        "sha": "0cbc0d14e4fb204427de9a25cacf18653b84b0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cbc0d14e4fb204427de9a25cacf18653b84b0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi+HQv9Gtnle3Io96tEZKtMme4Q+RWx8jXR4r+DBtKVGk283uGDihnJrfuuyWpr\nh+WXPKRHeCNKFSjnGR/a3xGMsTjKC8FZhwcQh6gPzUoYabAhDQQ9gsnDsVFAS8JW\nUGc+7ogT3peR0nnOIWxf607c57xOI4NpKobPLYWaqK6t/Tgk37JoM3xAu4BIZsz6\ngpGrFUSdYPOPZ/COfGY0+z+l1dkjg0XzSWVu/qqfzmOEfd2l5xY957m3cXQo4+pF\nx3YDYPp5aZpdVlIq8iSAjVSv0B1HHwicBsyQFxgUL07kawTMlt8gpytCYGojsWwX\nca799EYI7tf+D2f9qfXZ3C6NMWp6CJOstbyA0Q1Wh1+B+dSFS87nhQFHDOkpif7T\nFwX51GLL2tU5dfkhduXv3JY0jDy7R5pggEVjxmRXGr2/AVN3RTqVRIpWgoIBT6dy\nflfU6M9IBqJbhNwd3wWo1AmplzaBXOeCpEzGxlZT7dTdFsTYmmmyLE0leuIj2C7v\nMPnZ8NkU\n=nnWL\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cbc0d14e4fb204427de9a25cacf18653b84b0a6\nparent faff3f35b778d9af3d649b303d7edab49bfe40b4\nauthor MarcoFalke <falke.marco@gmail.com> 1623322550 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623325098 +0200\n\ntest: Remove unused generate() from test\n\nThis is already done by the test framework in setup_nodes()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab871f649e3da4a5a5f6cffac3fc748bb1ca900/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faff3f35b778d9af3d649b303d7edab49bfe40b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faff3f35b778d9af3d649b303d7edab49bfe40b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faff3f35b778d9af3d649b303d7edab49bfe40b4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5cbbd60cad1de6a32dc4afe6f8a65d096b4a8b9d",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab871f649e3da4a5a5f6cffac3fc748bb1ca900/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab871f649e3da4a5a5f6cffac3fc748bb1ca900/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
        "patch": "@@ -78,9 +78,6 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        # Leave IBD\n-        self.nodes[0].generate(1)\n-\n         make_utxo(self.nodes[0], 1*COIN)\n \n         # Ensure nodes are synced"
      }
    ]
  },
  {
    "sha": "fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI3ZTk5YzJhNGIwMmE0MWI3NDQ4YjQ1ZjBlNmNkZmRiYjUzYWMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:32:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:38:56Z"
      },
      "message": "test: Use MiniWallet in test_no_inherited_signaling RBF test",
      "tree": {
        "sha": "85307694ef9851b49eafe5472bf595dbfb77126f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85307694ef9851b49eafe5472bf595dbfb77126f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUir6Qv+J+h5myJg0j9k+V8oBXs/jMwRwzKqULGpThPDpkGP1F1IBx1LTvtbaVSk\nu6QPw3NGL28JMI5KUFZBGyZEtB1Dtd0OLVTicRuYohuqdAOft2RwiajRCqjltxV3\nrGz50Nxp5zl27e8GeoWGyghtYIpig4H/dRJPzLeCMvT07Wu5aD8OaZ3j0cFGL1LM\nj8KJzc8xjPCzSBTmp6EswxQ9XkxLOb64ifsi6LalI6zimRzysEremtuRlgN3ezAS\ncHgpxnOpFsNzAj03TwtKcq/DYdbc9PcjaSA+9N/Sa34jy6RUYMxezQI9OuHmVERX\nuhY3Ue6PsgtVcWyoH2A0TNHYhKjnWwdjtbAonQAKVBITdQVU/7ruDtN9DyqH9jU/\ny/tfjAt9X3T8lJmdPKAerFgRugbCMMh+jXLkWaNmzTbjrc1AOeZOe0+FN3pGKJ1D\nVHzryHCa223lAK2XBV3pXOtB22o3fvRYNwz9Kc/QgF+svpP6mRU/4kcmTV2zIOC/\n4EnHBMq2\n=6tgH\n-----END PGP SIGNATURE-----",
        "payload": "tree 85307694ef9851b49eafe5472bf595dbfb77126f\nparent fab871f649e3da4a5a5f6cffac3fc748bb1ca900\nauthor MarcoFalke <falke.marco@gmail.com> 1623324754 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623325136 +0200\n\ntest: Use MiniWallet in test_no_inherited_signaling RBF test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab871f649e3da4a5a5f6cffac3fc748bb1ca900",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab871f649e3da4a5a5f6cffac3fc748bb1ca900"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 42,
      "deletions": 47
    },
    "files": [
      {
        "sha": "04f6681566039f58c92681f84cc0cd296167e3b3",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 41,
        "deletions": 46,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
        "patch": "@@ -7,14 +7,16 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, BIP125_SEQUENCE_NUMBER\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n from test_framework.script_util import DUMMY_P2WPKH_SCRIPT, DUMMY_2_P2WPKH_SCRIPT\n+from test_framework.wallet import MiniWallet\n \n MAX_REPLACEMENT_LIMIT = 100\n \n+\n def txToHex(tx):\n     return tx.serialize().hex()\n \n@@ -565,67 +567,60 @@ def test_rpc(self):\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)\n+        confirmed_utxo = wallet.get_utxo()\n \n         # Create an explicitly opt-in parent transaction\n-        optin_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99998\")})\n-\n-        optin_parent_tx = self.nodes[0].signrawtransactionwithwallet(optin_parent_tx)\n-\n-        # Broadcast parent tx\n-        optin_parent_txid = self.nodes[0].sendrawtransaction(hexstring=optin_parent_tx[\"hex\"], maxfeerate=0)\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.90000\")})\n-\n-        replacement_parent_tx = self.nodes[0].signrawtransactionwithwallet(replacement_parent_tx)\n+        optin_parent_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_parent_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.02'),\n+        )\n \n         # Test if parent tx can be replaced.\n-        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']], maxfeerate=0)[0]\n+        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']])[0]\n \n         # Parent can be replaced.\n         assert_equal(res['allowed'], True)\n \n         # Create an opt-out child tx spending the opt-in parent\n-        optout_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99990\")})\n-\n-        optout_child_tx = self.nodes[0].signrawtransactionwithwallet(optout_child_tx)\n-\n-        # Broadcast child tx\n-        optout_child_txid = self.nodes[0].sendrawtransaction(hexstring=optout_child_tx[\"hex\"], maxfeerate=0)\n-        assert optout_child_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.00000\")})\n-\n-        replacement_child_tx = self.nodes[0].signrawtransactionwithwallet(replacement_child_tx)\n+        parent_utxo = wallet.get_utxo(txid=optin_parent_tx['txid'])\n+        optout_child_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.01'),\n+        )\n+\n+        # Reports true due to inheritance\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_child_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.02'),\n+            mempool_valid=False,\n+        )\n \n         # Broadcast replacement child tx\n         # BIP 125 :\n         # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n         # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_txid`) does.\n+        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n         # See CVE-2021-31876 for further explanations.\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "3d791743565e5ae0f46ab8f9d236522b297c57ce",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
        "patch": "@@ -39,7 +39,7 @@\n COIN = 100000000  # 1 btc in satoshis\n MAX_MONEY = 21000000 * COIN\n \n-BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is BIP 125 opt-in and BIP 68-opt-out\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is rbf-opt-in (BIP 125) and csv-opt-out (BIP 68)\n \n MAX_PROTOCOL_MESSAGE_LENGTH = 4000000  # Maximum length of incoming protocol messages\n MAX_HEADERS_RESULTS = 2000  # Number of headers sent in one getheaders result"
      }
    ]
  },
  {
    "sha": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkNzFmMjcwYjg5YzlkMDYyMzBkNGZmMjYyNjQ2ZjllYTI5ZjRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:56:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-10T11:39:24Z"
      },
      "message": "test: Run pep-8 on touched test\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "23b069086d8c745d3fbad76f5b939e3a401e1f51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23b069086d8c745d3fbad76f5b939e3a401e1f51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhc+Qv/Tg3tH+ArDnA6h5BLr8SZt1ZbZFXxwYn0pgwHSVrUJKDjCo+DDA+Sw3Ce\naeosRrgJuJVaGInG7/DTCC3TY9HZKs8mV/3Q8pFxxeXLR3ywGYyYeEzY0WURj/WZ\n6MLU+306QHX6i38Tzfjk0JavFGgEBmTi/y8wJli8K15GlFKYWiN1YU9X4k6QoMx/\nHGwAvntQVdf8K2kGlgQc5f2fc52p4LHeCZOrAIxIdpYUc9JPdQyTG1rkB3NZ9IFL\nDzOh5hhj8jOujkSHnBlRwhMnTmYBHrKPPFIxqF7a+RMnOPgRlrBHUOZ1npfPBAo8\n9kFtU2fQMS9Q+yEBTt1Qpc1WUTWMg5lnZZ4AqlixIKXQlXs0Nwgh9R4ds7E5btbC\nTF67CzvkylA2MZiPVcDkENTRghGYYazWDMSREep0ToAlba6Z0PScWvU30fY3+rzw\nBKvjv7WZ26VgOL1v+fuZ7PZIMPjgrk6QCiHJTnnnPX5PEXKsDCMsemjS+dyzAtoh\nmk6LmN4J\n=Sh7e\n-----END PGP SIGNATURE-----",
        "payload": "tree 23b069086d8c745d3fbad76f5b939e3a401e1f51\nparent fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3\nauthor MarcoFalke <falke.marco@gmail.com> 1623326165 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623325164 +0200\n\ntest: Run pep-8 on touched test\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d71f270b89c9d06230d4ff262646f9ea29f4a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 41,
      "deletions": 39
    },
    "files": [
      {
        "sha": "b99b64e16d1586e51fa173c39604f714b713e25e",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 41,
        "deletions": 39,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7d71f270b89c9d06230d4ff262646f9ea29f4a/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7d71f270b89c9d06230d4ff262646f9ea29f4a/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
        "patch": "@@ -20,6 +20,7 @@\n def txToHex(tx):\n     return tx.serialize().hex()\n \n+\n def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n \n@@ -28,12 +29,12 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     confirmed - txouts created will be confirmed in the blockchain;\n                 unconfirmed otherwise.\n     \"\"\"\n-    fee = 1*COIN\n-    while node.getbalance() < satoshi_round((amount + fee)/COIN):\n+    fee = 1 * COIN\n+    while node.getbalance() < satoshi_round((amount + fee) / COIN):\n         node.generate(COINBASE_MATURITY)\n \n     new_addr = node.getnewaddress()\n-    txid = node.sendtoaddress(new_addr, satoshi_round((amount+fee)/COIN))\n+    txid = node.sendtoaddress(new_addr, satoshi_round((amount + fee) / COIN))\n     tx1 = node.getrawtransaction(txid, 1)\n     txid = int(txid, 16)\n     i, _ = next(filter(lambda vout: new_addr == vout[1]['scriptPubKey']['address'], enumerate(tx1['vout'])))\n@@ -80,7 +81,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        make_utxo(self.nodes[0], 1*COIN)\n+        make_utxo(self.nodes[0], 1 * COIN)\n \n         # Ensure nodes are synced\n         self.sync_all()\n@@ -122,7 +123,7 @@ def run_test(self):\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # make_utxo may have generated a bunch of blocks, so we need to sync\n         # before we can spend the coins generated, or else the resulting\n@@ -164,14 +165,14 @@ def test_simple_doublespend(self):\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n \n-        initial_nValue = 50*COIN\n+        initial_nValue = 50 * COIN\n         tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n \n         prevout = tx0_outpoint\n         remaining_value = initial_nValue\n         chain_txids = []\n-        while remaining_value > 10*COIN:\n-            remaining_value -= 1*COIN\n+        while remaining_value > 10 * COIN:\n+            remaining_value -= 1 * COIN\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n@@ -204,10 +205,10 @@ def test_doublespend_chain(self):\n     def test_doublespend_tree(self):\n         \"\"\"Doublespend of a big tree of transactions\"\"\"\n \n-        initial_nValue = 50*COIN\n+        initial_nValue = 50 * COIN\n         tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n \n-        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _total_txs=None):\n+        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _total_txs=None):\n             if _total_txs is None:\n                 _total_txs = [0]\n             if _total_txs[0] >= max_txs:\n@@ -238,7 +239,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n                                   _total_txs=_total_txs):\n                     yield x\n \n-        fee = int(0.0001*COIN)\n+        fee = int(0.0001 * COIN)\n         n = MAX_REPLACEMENT_LIMIT\n         tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n         assert_equal(len(tree_txs), n)\n@@ -266,8 +267,8 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n         # Try again, but with more total transactions than the \"max txs\n         # double-spent at once\" anti-DoS limit.\n-        for n in (MAX_REPLACEMENT_LIMIT+1, MAX_REPLACEMENT_LIMIT*2):\n-            fee = int(0.0001*COIN)\n+        for n in (MAX_REPLACEMENT_LIMIT + 1, MAX_REPLACEMENT_LIMIT * 2):\n+            fee = int(0.0001 * COIN)\n             tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n             tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n             assert_equal(len(tree_txs), n)\n@@ -285,7 +286,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n     def test_replacement_feeperkb(self):\n         \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -297,16 +298,16 @@ def test_replacement_feeperkb(self):\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*999000]))]\n+        tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 999000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n-        utxo1 = make_utxo(self.nodes[0], int(1.2*COIN))\n-        utxo2 = make_utxo(self.nodes[0], 3*COIN)\n+        utxo1 = make_utxo(self.nodes[0], int(1.2 * COIN))\n+        utxo2 = make_utxo(self.nodes[0], 3 * COIN)\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n@@ -345,8 +346,8 @@ def test_spends_of_conflicting_outputs(self):\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n-        confirmed_utxo = make_utxo(self.nodes[0], int(1.1*COIN))\n-        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1*COIN), False)\n+        confirmed_utxo = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1 * COIN), False)\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n@@ -368,13 +369,13 @@ def test_too_many_replacements(self):\n         # transactions\n \n         # Start by creating a single transaction with many outputs\n-        initial_nValue = 10*COIN\n+        initial_nValue = 10 * COIN\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n-        fee = int(0.0001*COIN)\n-        split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n+        fee = int(0.0001 * COIN)\n+        split_value = int((initial_nValue - fee) / (MAX_REPLACEMENT_LIMIT + 1))\n \n         outputs = []\n-        for _ in range(MAX_REPLACEMENT_LIMIT+1):\n+        for _ in range(MAX_REPLACEMENT_LIMIT + 1):\n             outputs.append(CTxOut(split_value, CScript([1])))\n \n         splitting_tx = CTransaction()\n@@ -386,7 +387,7 @@ def test_too_many_replacements(self):\n         txid = int(txid, 16)\n \n         # Now spend each of those outputs individually\n-        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+        for i in range(MAX_REPLACEMENT_LIMIT + 1):\n             tx_i = CTransaction()\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n             tx_i.vout = [CTxOut(split_value - fee, DUMMY_P2WPKH_SCRIPT)]\n@@ -396,9 +397,9 @@ def test_too_many_replacements(self):\n         # Now create doublespend of the whole lot; should fail.\n         # Need a big enough fee to cover all spending transactions and have\n         # a higher fee rate\n-        double_spend_value = (split_value-100*fee)*(MAX_REPLACEMENT_LIMIT+1)\n+        double_spend_value = (split_value - 100 * fee) * (MAX_REPLACEMENT_LIMIT + 1)\n         inputs = []\n-        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+        for i in range(MAX_REPLACEMENT_LIMIT + 1):\n             inputs.append(CTxIn(COutPoint(txid, i), nSequence=0))\n         double_tx = CTransaction()\n         double_tx.vin = inputs\n@@ -417,7 +418,7 @@ def test_too_many_replacements(self):\n \n     def test_opt_in(self):\n         \"\"\"Replacing should only work if orig tx opted in\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n@@ -438,7 +439,7 @@ def test_opt_in(self):\n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n@@ -466,7 +467,7 @@ def test_opt_in(self):\n         tx3a = CTransaction()\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n-        tx3a.vout = [CTxOut(int(0.9*COIN), CScript([b'c'])), CTxOut(int(0.9*COIN), CScript([b'd']))]\n+        tx3a.vout = [CTxOut(int(0.9 * COIN), CScript([b'c'])), CTxOut(int(0.9 * COIN), CScript([b'd']))]\n         tx3a_hex = txToHex(tx3a)\n \n         tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n@@ -494,7 +495,7 @@ def test_prioritised_transactions(self):\n         # correctly used by replacement logic\n \n         # 1. Check that feeperkb uses modified fees\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -505,22 +506,22 @@ def test_prioritised_transactions(self):\n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*740000]))]\n+        tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 740000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n-        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1 * COIN))\n \n         # Now tx1b should be able to replace tx1a\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n         assert tx1b_txid in self.nodes[0].getrawmempool()\n \n         # 2. Check that absolute fee checks use modified fee.\n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n@@ -539,7 +540,7 @@ def test_prioritised_transactions(self):\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n \n         # Now prioritise tx2b to have a higher modified fee\n-        self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1 * COIN))\n \n         # tx2b should now be accepted\n         tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, 0)\n@@ -549,20 +550,20 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n@@ -623,5 +624,6 @@ def test_no_inherited_signaling(self):\n         assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  }
]