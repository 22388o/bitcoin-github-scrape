[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/858539515",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#issuecomment-858539515",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22210",
    "id": 858539515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODUzOTUxNQ==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-10T11:24:47Z",
    "updated_at": "2021-06-10T11:24:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nNot strictly related to this PR, but: the parameter `locktime` is currently unused in `send_self_transfer`, i.e. it is not passed on to `create_self_transfer`. Now that this part is touched in this PR, this could also be addressed (e.g. in the first commit).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/858539515/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859777546",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#issuecomment-859777546",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22210",
    "id": 859777546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTc3NzU0Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-11T18:55:16Z",
    "updated_at": "2021-06-11T18:55:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK: `MiniWallet` good",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859777546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860063123",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#issuecomment-860063123",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22210",
    "id": 860063123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDA2MzEyMw==",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-12T14:46:15Z",
    "updated_at": "2021-06-12T14:46:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK fa7d71f270b89c9d06230d4ff262646f9ea29f4a thanks for the explanations, nicely done",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860063123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862135236",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#issuecomment-862135236",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22210",
    "id": 862135236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjEzNTIzNg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T07:48:38Z",
    "updated_at": "2021-06-16T15:45:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22257 (test: refactor: use `FromHex` helper for msg serialization from hex, remove `ToHex` helper by theStack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862135236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178263",
    "pull_request_review_id": 682101556,
    "id": 650178263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE3ODI2Mw==",
    "diff_hunk": "@@ -550,86 +550,80 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)",
    "path": "test/functional/feature_rbf.py",
    "position": 292,
    "original_position": 292,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Where does the hardcoded `76` come from? It seems to me you just need a mature utxo here? If that's the case and I'm not missing anything, could you do something like: `start=blockheight - COINBASE_MATURITY`?",
    "created_at": "2021-06-11T18:07:54Z",
    "updated_at": "2021-06-11T18:14:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650178263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650178263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 572,
    "original_line": 572,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178725",
    "pull_request_review_id": 682101556,
    "id": 650178725,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE3ODcyNQ==",
    "diff_hunk": "@@ -78,10 +81,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()",
    "path": "test/functional/feature_rbf.py",
    "position": 39,
    "original_position": 39,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Did you forget to remove this now that the test can be run without the wallet compiled?",
    "created_at": "2021-06-11T18:08:47Z",
    "updated_at": "2021-06-11T18:14:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650178725",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178725"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650178725"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650178725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650192257",
    "pull_request_review_id": 682119944,
    "id": 650192257,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE5MjI1Nw==",
    "diff_hunk": "@@ -550,86 +550,80 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)\n+        confirmed_utxo = wallet.get_utxo()\n \n         # Create an explicitly opt-in parent transaction\n-        optin_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99998\")})\n-\n-        optin_parent_tx = self.nodes[0].signrawtransactionwithwallet(optin_parent_tx)\n-\n-        # Broadcast parent tx\n-        optin_parent_txid = self.nodes[0].sendrawtransaction(hexstring=optin_parent_tx[\"hex\"], maxfeerate=0)\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.90000\")})\n-\n-        replacement_parent_tx = self.nodes[0].signrawtransactionwithwallet(replacement_parent_tx)\n+        optin_parent_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_parent_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.02'),\n+        )\n \n         # Test if parent tx can be replaced.\n-        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']], maxfeerate=0)[0]\n+        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']])[0]\n \n         # Parent can be replaced.\n         assert_equal(res['allowed'], True)\n \n         # Create an opt-out child tx spending the opt-in parent\n-        optout_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99990\")})\n-\n-        optout_child_tx = self.nodes[0].signrawtransactionwithwallet(optout_child_tx)\n-\n-        # Broadcast child tx\n-        optout_child_txid = self.nodes[0].sendrawtransaction(hexstring=optout_child_tx[\"hex\"], maxfeerate=0)\n-        assert optout_child_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.00000\")})\n-\n-        replacement_child_tx = self.nodes[0].signrawtransactionwithwallet(replacement_child_tx)\n+        parent_utxo = wallet.get_utxo(txid=optin_parent_tx['txid'])\n+        optout_child_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.01'),\n+        )\n+\n+        # Reports true due to inheritance\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_child_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.02'),\n+            mempool_valid=False,\n+        )\n \n         # Broadcast replacement child tx\n         # BIP 125 :\n         # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n         # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_txid`) does.\n+        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.",
    "path": "test/functional/feature_rbf.py",
    "position": 382,
    "original_position": 382,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is my understanding here correct?\r\n\r\na) `testmempoolaccept` returns that `replacement_child_tx` is allowed even though it is rejected w/ 'txn-mempool-conflict'\r\nb) `getmempoolentry` returns that `optout_child_tx` is 'bip125-replaceable' - as you descbribe in https://github.com/bitcoin/bitcoin/issues/22209 even though it is not\r\n\r\nSo does anything need to be done to fix a and b?\r\n\r\nAnother question I have (which maybe I should just try out). But, I wonder what would happen if you tried something like https://github.com/bitcoin/bitcoin/pull/22210/files#diff-260c479178e3e99a16798aeed39f400676894392864784eda6c207716704398dR584-R589 after `optout_child_tx` was already sent",
    "created_at": "2021-06-11T18:33:20Z",
    "updated_at": "2021-06-11T18:33:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650192257",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650192257"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650192257"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650192257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 622,
    "original_line": 622,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369638",
    "pull_request_review_id": 682311125,
    "id": 650369638,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDM2OTYzOA==",
    "diff_hunk": "@@ -550,86 +550,80 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)",
    "path": "test/functional/feature_rbf.py",
    "position": 292,
    "original_position": 292,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The constant is derived from https://github.com/bitcoin/bitcoin/blob/96f828ba4d69f8acadf335ee79fa8f06cd33c0a6/test/functional/test_framework/test_framework.py#L736-L748",
    "created_at": "2021-06-12T09:14:11Z",
    "updated_at": "2021-06-12T09:14:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650369638",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369638"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650369638"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369638/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 572,
    "original_line": 572,
    "side": "RIGHT",
    "in_reply_to_id": 650178263
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369656",
    "pull_request_review_id": 682311130,
    "id": 650369656,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDM2OTY1Ng==",
    "diff_hunk": "@@ -78,10 +81,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()",
    "path": "test/functional/feature_rbf.py",
    "position": 39,
    "original_position": 39,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can it?",
    "created_at": "2021-06-12T09:14:21Z",
    "updated_at": "2021-06-12T09:14:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650369656",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369656"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650369656"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650369656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 650178725
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650370016",
    "pull_request_review_id": 682311323,
    "id": 650370016,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDM3MDAxNg==",
    "diff_hunk": "@@ -550,86 +550,80 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)\n+        confirmed_utxo = wallet.get_utxo()\n \n         # Create an explicitly opt-in parent transaction\n-        optin_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99998\")})\n-\n-        optin_parent_tx = self.nodes[0].signrawtransactionwithwallet(optin_parent_tx)\n-\n-        # Broadcast parent tx\n-        optin_parent_txid = self.nodes[0].sendrawtransaction(hexstring=optin_parent_tx[\"hex\"], maxfeerate=0)\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.90000\")})\n-\n-        replacement_parent_tx = self.nodes[0].signrawtransactionwithwallet(replacement_parent_tx)\n+        optin_parent_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_parent_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.02'),\n+        )\n \n         # Test if parent tx can be replaced.\n-        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']], maxfeerate=0)[0]\n+        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']])[0]\n \n         # Parent can be replaced.\n         assert_equal(res['allowed'], True)\n \n         # Create an opt-out child tx spending the opt-in parent\n-        optout_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99990\")})\n-\n-        optout_child_tx = self.nodes[0].signrawtransactionwithwallet(optout_child_tx)\n-\n-        # Broadcast child tx\n-        optout_child_txid = self.nodes[0].sendrawtransaction(hexstring=optout_child_tx[\"hex\"], maxfeerate=0)\n-        assert optout_child_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.00000\")})\n-\n-        replacement_child_tx = self.nodes[0].signrawtransactionwithwallet(replacement_child_tx)\n+        parent_utxo = wallet.get_utxo(txid=optin_parent_tx['txid'])\n+        optout_child_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.01'),\n+        )\n+\n+        # Reports true due to inheritance\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_child_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.02'),\n+            mempool_valid=False,\n+        )\n \n         # Broadcast replacement child tx\n         # BIP 125 :\n         # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n         # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_txid`) does.\n+        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.",
    "path": "test/functional/feature_rbf.py",
    "position": 382,
    "original_position": 382,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "a) No, it is also rejected by testmempoolaccept, see `mempool_valid=False` for `replacement_child_tx` above.\r\nb) correct\r\n\r\n> So does anything need to be done to fix a and b?\r\n\r\nMaybe. But a fix should be done outside a test-only change.\r\n\r\n",
    "created_at": "2021-06-12T09:18:11Z",
    "updated_at": "2021-06-12T09:18:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650370016",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650370016"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650370016"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650370016/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 622,
    "original_line": 622,
    "side": "RIGHT",
    "in_reply_to_id": 650192257
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650399172",
    "pull_request_review_id": 682329974,
    "id": 650399172,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDM5OTE3Mg==",
    "diff_hunk": "@@ -78,10 +81,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()",
    "path": "test/functional/feature_rbf.py",
    "position": 39,
    "original_position": 39,
    "commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "original_commit_id": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nope \ud83d\udc4d",
    "created_at": "2021-06-12T14:34:05Z",
    "updated_at": "2021-06-12T14:34:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650399172",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650399172"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22210#discussion_r650399172"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22210"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650399172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 650178725
  }
]