[
  {
    "sha": "32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmI0MjM0YzkzY2UzZGEwMjc1ZTc5NDY4ZGYzZjZiODFiYThlYjRj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-02-10T12:41:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-02-10T12:41:54Z"
      },
      "message": "[WIP][RPC] Add createtransaction",
      "tree": {
        "sha": "0d03c9f76d41497490f218d9144b2a5e79ce13c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d03c9f76d41497490f218d9144b2a5e79ce13c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d007511ebdfa87f80d7218d8df06e781f4656c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d007511ebdfa87f80d7218d8df06e781f4656c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d007511ebdfa87f80d7218d8df06e781f4656c68"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 247,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca48047125ea3714aedba9f29a2145096adcf57b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
        "patch": "@@ -32,6 +32,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"generate\", 0 },\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n+    { \"createtransaction\", 0 },\n+    { \"createtransaction\", 1 },\n     { \"sendtoaddress\", 1 },\n     { \"sendtoaddress\", 4 },\n     { \"settxfee\", 0 },"
      },
      {
        "sha": "16292e5854f64fa1067b63afa4539bc0903dd03a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 228,
        "deletions": 0,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n+#include \"coincontrol.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -397,6 +398,232 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n }\n \n+UniValue createtransaction(const UniValue& params, bool fHelp)\n+{\n+  if (!EnsureWalletIsAvailable(fHelp))\n+      return NullUniValue;\n+\n+  if (fHelp || params.size() < 1 || params.size() > 2)\n+      throw runtime_error(\n+          \"createtransaction {\\\"address\\\":amount,...} ({ \\\"option\\\": value,...})\\n\"\n+          \"\\nCreate transaction. Amounts are double-precision floating point numbers.\"\n+          + HelpRequiringPassphrase() + \"\\n\"\n+\n+          \"\\nArguments:\\n\"\n+          \"1. \\\"amounts\\\"                  (string, required) A json object with addresses and amounts\\n\"\n+          \"    {\\n\"\n+          \"      \\\"address\\\":amount        (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n+          \"      ,...\\n\"\n+          \"    }\\n\"\n+          \"2. \\\"options\\\"                  (optional) A json object with options\\n\"\n+          \"    {\\n\"\n+          \"      \\\"allowWatchOnly\\\"        (boolean, optional, default=true) Includes watch only addresses.\\n\"\n+          \"      \\\"changeAddress\\\"         (string, optional) The bitcoin address to receive the change.\\n\"\n+          \"      \\\"comment\\\"               (string, optional, default=true) A comment.\\n\"\n+          \"      \\\"commit\\\"                (boolean, optional, default=true) The transaction will be commited.\\n\"\n+          \"      \\\"includeSpentOutputs\\\"   (boolean, optional, default=fales) Include scriptPubKey of spent outputs.\\n\"\n+          \"      \\\"sign\\\"                  (boolean, optional, default=true) The transaction will be signed.\\n\"\n+          \"      \\\"subtractfeefromamount\\\" (string, optional) A json array with addresses.\\n\"\n+          \"                                The fee will be equally deducted from the amount of each selected address.\\n\"\n+          \"                                Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+          \"                                If no addresses are specified here, the sender pays the fee.\\n\"\n+          \"    }\\n\"\n+\n+          \"\\nResult:\\n\"\n+          \"{\\n\"\n+          \"  \\\"hex\\\" : \\\"data\\\",                (string) The serialized, hex-encoded data for 'txid'\\n\"\n+          \"  \\\"txid\\\" : \\\"id\\\",                 (string) The transaction id (same as provided)\\n\"\n+          \"  \\\"size\\\" : n,                      (numeric) The transaction size\\n\"\n+          \"  \\\"version\\\" : n,                   (numeric) The version\\n\"\n+          \"  \\\"locktime\\\" : ttt,                (numeric) The lock time\\n\"\n+          \"  \\\"vin\\\" : [                        (array of json objects)\\n\"\n+          \"     {\\n\"\n+          \"       \\\"txid\\\": \\\"id\\\",             (string) The transaction id\\n\"\n+          \"       \\\"vout\\\": n,                  (numeric) \\n\"\n+          \"       \\\"scriptSig\\\": {              (json object) The script\\n\"\n+          \"         \\\"asm\\\": \\\"asm\\\",           (string) asm\\n\"\n+          \"         \\\"hex\\\": \\\"hex\\\"            (string) hex\\n\"\n+          \"       },\\n\"\n+          \"       \\\"sequence\\\": n               (numeric) The script sequence number\\n\"\n+          \"     }\\n\"\n+          \"     ,...\\n\"\n+          \"  ],\\n\"\n+          \"  \\\"vout\\\" : [                       (array of json objects)\\n\"\n+          \"     {\\n\"\n+          \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+          \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n+          \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+          \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+          \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+          \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+          \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+          \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n+          \"           \\\"bitcoinaddress\\\"        (string) bitcoin address\\n\"\n+          \"           ,...\\n\"\n+          \"         ]\\n\"\n+          \"       }\\n\"\n+          \"     }\\n\"\n+          \"     ,...\\n\"\n+          \"  ],\\n\"\n+          \"  \\\"blockhash\\\" : \\\"hash\\\",          (string) the block hash\\n\"\n+          \"  \\\"confirmations\\\" : n,             (numeric) The confirmations\\n\"\n+          \"  \\\"time\\\" : ttt,                    (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+          \"  \\\"blocktime\\\" : ttt                (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+          \"}\\n\"\n+      );\n+\n+  LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+  // Default options\n+  bool allowWatchOnly = false;\n+  CBitcoinAddress changeAddress;\n+  std::string comment;\n+  bool commit = true;\n+  bool includeSpentOutputs = false;\n+  // int nMinDepth = 1;\n+  bool sign = true;\n+  std::set<std::string> subtractFeeFromAmount;\n+\n+  UniValue sendTo = params[0].get_obj();\n+\n+  if (params.size() > 1) {\n+    UniValue options = params[1];\n+\n+    if (options.exists(\"allowWatchOnly\"))\n+      allowWatchOnly = options[\"allowWatchOnly\"].get_bool();\n+\n+    if (options.exists(\"changeAddress\"))\n+      changeAddress = CBitcoinAddress(options[\"changeAddress\"].get_str());\n+\n+    if (options.exists(\"comment\"))\n+      comment = options[\"comment\"].get_str();\n+\n+    if (options.exists(\"commit\"))\n+      commit = options[\"commit\"].get_bool();\n+\n+    if (options.exists(\"includeSpentOutputs\"))\n+      includeSpentOutputs = options[\"includeSpentOutputs\"].get_bool();\n+\n+    if (options.exists(\"sign\"))\n+      sign = options[\"sign\"].get_bool();\n+\n+    if (options.exists(\"subtractFeeFromAmount\"))\n+    {\n+      UniValue addresses = options[\"subtractFeeFromAmount\"].get_array();\n+\n+      for (unsigned int i = 0; i < addresses.size(); i++) {\n+        subtractFeeFromAmount.insert(addresses[i].get_str());\n+      }\n+    }\n+\n+    if (commit && !sign)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Unable to commit unsigned transactions\"));\n+  }\n+\n+  CWalletTx wtx;\n+  wtx.mapValue[\"comment\"] = comment;\n+\n+  std::set<CBitcoinAddress> setAddress;\n+  std::vector<CRecipient> vecSend;\n+\n+  vector<string> keys = sendTo.getKeys();\n+  BOOST_FOREACH(const string& name, keys)\n+  {\n+      CBitcoinAddress address(name);\n+      if (!address.IsValid())\n+          throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \")+name);\n+\n+      if (setAddress.count(address))\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \")+name);\n+      setAddress.insert(address);\n+\n+      CScript scriptPubKey = GetScriptForDestination(address.Get());\n+      CAmount nAmount = AmountFromValue(sendTo[name]);\n+      if (nAmount <= 0)\n+          throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n+\n+      CRecipient recipient = {scriptPubKey, nAmount, subtractFeeFromAmount.find(name) != subtractFeeFromAmount.end()};\n+      vecSend.push_back(recipient);\n+  }\n+\n+  EnsureWalletIsUnlocked();\n+\n+  // Send\n+  CReserveKey keyChange(pwalletMain);\n+  CAmount nFeeRequired = 0;\n+  int nChangePosRet = -1;\n+  string strFailReason;\n+  std::set<pair<const CWalletTx*,unsigned int> > coins;\n+\n+  CCoinControl coinControl;\n+  coinControl.fAllowWatchOnly = allowWatchOnly;\n+  if (changeAddress.IsValid())\n+    coinControl.destChange = changeAddress.Get();\n+\n+  if (!pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, coins, strFailReason, &coinControl, sign))\n+      throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n+\n+  if (commit && !pwalletMain->CommitTransaction(wtx, keyChange))\n+      throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n+\n+  string strHex = EncodeHexTx(wtx);\n+\n+  UniValue result(UniValue::VOBJ);\n+  result.push_back(Pair(\"hex\", strHex));\n+\n+  result.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n+  result.push_back(Pair(\"size\", (int)::GetSerializeSize(wtx, SER_NETWORK, PROTOCOL_VERSION)));\n+  result.push_back(Pair(\"version\", wtx.nVersion));\n+  result.push_back(Pair(\"locktime\", (int64_t)wtx.nLockTime));\n+  UniValue vin(UniValue::VARR);\n+  BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+      UniValue in(UniValue::VOBJ);\n+      if (wtx.IsCoinBase())\n+          in.push_back(Pair(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+      else {\n+          in.push_back(Pair(\"txid\", txin.prevout.hash.GetHex()));\n+          in.push_back(Pair(\"vout\", (int64_t)txin.prevout.n));\n+          UniValue o(UniValue::VOBJ);\n+          o.push_back(Pair(\"asm\", ScriptToAsmStr(txin.scriptSig, true)));\n+          o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+          in.push_back(Pair(\"scriptSig\", o));\n+\n+\n+          if (includeSpentOutputs)\n+          {\n+              BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) coin, coins)\n+              {\n+                  if (txin.prevout.hash == coin.first->GetHash())\n+                  {\n+                      UniValue value(UniValue::VOBJ);\n+                      const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n+                      ScriptPubKeyToUniv(scriptPubKey, value, true);\n+                      in.push_back(Pair(\"scriptPubKey\", value));\n+                      break;\n+                  }\n+              }\n+          }\n+      }\n+      in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n+      vin.push_back(in);\n+  }\n+  result.push_back(Pair(\"vin\", vin));\n+  UniValue vout(UniValue::VARR);\n+  for (unsigned int i = 0; i < wtx.vout.size(); i++) {\n+      const CTxOut& txout = wtx.vout[i];\n+      UniValue out(UniValue::VOBJ);\n+      out.push_back(Pair(\"value\", ValueFromAmount(txout.nValue)));\n+      out.push_back(Pair(\"n\", (int64_t)i));\n+      UniValue o(UniValue::VOBJ);\n+      ScriptPubKeyToUniv(txout.scriptPubKey, o, true);\n+      out.push_back(Pair(\"scriptPubKey\", o));\n+      vout.push_back(out);\n+  }\n+  result.push_back(Pair(\"vout\", vout));\n+\n+  return result;\n+}\n+\n UniValue sendtoaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n@@ -2512,6 +2739,7 @@ const CRPCCommand vWalletRPCCommands[] =\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true  },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true  },\n+    { \"wallet\",             \"createtransaction\",        &createtransaction,        false },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true  },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true  },"
      },
      {
        "sha": "ceeb108c15ae1f05e8baf1b21e8d680216451e23",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
        "patch": "@@ -1940,11 +1940,22 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n     return true;\n }\n \n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n+                        string& strFailReason, const CCoinControl *coinControl, bool sign)\n+{\n+    set<pair<const CWalletTx*,unsigned int> > setCoins;\n+\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, nChangePosRet, setCoins, strFailReason, coinControl, sign);\n+}\n+\n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosRet, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n     unsigned int nSubtractFeeFromAmount = 0;\n+\n+    setCoinsRet.clear();\n+\n     BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n         if (nValue < 0 || recipient.nAmount < 0)\n@@ -2216,7 +2227,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 }\n \n                 if (nFeeRet >= nFeeNeeded)\n+                {\n+                    setCoinsRet = setCoins;\n                     break; // Done, enough fee included.\n+                }\n \n                 // Include more fee and try again.\n                 nFeeRet = nFeeNeeded;"
      },
      {
        "sha": "1a07ccd13fbae52fd64afa70ccea21c1e5bee922",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32b4234c93ce3da0275e79468df3f6b81ba8eb4c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=32b4234c93ce3da0275e79468df3f6b81ba8eb4c",
        "patch": "@@ -742,6 +742,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * selected by SelectCoins(); Also create the change output, when needed\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n+                             std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n "
      }
    ]
  }
]