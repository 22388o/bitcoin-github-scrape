[
  {
    "sha": "6e8dd99ef1c147898bd06fee7014afdff6618f18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZThkZDk5ZWYxYzE0Nzg5OGJkMDZmZWU3MDE0YWZkZmY2NjE4ZjE4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T19:34:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T18:55:53Z"
      },
      "message": "[net processing] Add doxygen comments for orphan data and function",
      "tree": {
        "sha": "f5052508831bf47e477626cf20b948d199ec34d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5052508831bf47e477626cf20b948d199ec34d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e8dd99ef1c147898bd06fee7014afdff6618f18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8dd99ef1c147898bd06fee7014afdff6618f18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e8dd99ef1c147898bd06fee7014afdff6618f18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8dd99ef1c147898bd06fee7014afdff6618f18/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/147d50d63e07f600b414273a9f6b84f9f4ad9696"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c932062a2850a1ca18cd45e2a6edd3aee522070f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e8dd99ef1c147898bd06fee7014afdff6618f18/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e8dd99ef1c147898bd06fee7014afdff6618f18/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6e8dd99ef1c147898bd06fee7014afdff6618f18",
        "patch": "@@ -153,8 +153,14 @@ struct COrphanTx {\n     int64_t nTimeExpire;\n     size_t list_pos;\n };\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n RecursiveMutex g_cs_orphans;\n+/** Map from txid to orphan transaction record. Limited by\n+ *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+/** Index from wtxid into the mapOrphanTransactions to lookup orphan\n+ *  transactions using their witness ids. */\n std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n@@ -258,12 +264,19 @@ namespace {\n             return &(*a) < &(*b);\n         }\n     };\n-    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n \n-    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans); //! For random eviction\n+    /** Index from the parents' COutPoint into the mapOrphanTransactions. Used\n+     *  to remove orphan transactions from the mapOrphanTransactions */\n+    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+    /** Orphan transactions in vector for quick random eviction */\n+    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans);\n \n-    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n+    /** Orphan/conflicted/etc transactions that are kept for compact block reconstruction.\n+     *  The last -blockreconstructionextratxn/DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN of\n+     *  these are kept in a ring buffer */\n     static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n+    /** Offset into vExtraTxnForCompact to insert the next tx */\n+    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n } // namespace\n \n namespace {\n@@ -2021,6 +2034,16 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n     return;\n }\n \n+/**\n+ * Reconsider orphan transactions after a parent has been accepted to the mempool.\n+ *\n+ * @param[in/out]  orphan_work_set  The set of orphan transactions to reconsider. Generally only one\n+ *                                  orphan will be reconsidered on each call of this function. This set\n+ *                                  may be added to if accepting an orphan causes its children to be\n+ *                                  reconsidered.\n+ * @param[out]     removed_txn      Transactions that were removed from the mempool as a result of an\n+ *                                  orphan transaction being added.\n+ */\n void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn)\n {\n     AssertLockHeld(cs_main);"
      }
    ]
  },
  {
    "sha": "55c79a9cefb6c83cdebbf6c538c471607695b457",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWM3OWE5Y2VmYjZjODNjZGViYmY2YzUzOGM0NzE2MDc2OTViNDU3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T19:37:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T18:57:32Z"
      },
      "message": "ProcessOrphanTx: remove useless done variable\n\nThere is a keyword that allows us to break out of loops. Use it.\n\nThere's a small change in behaviour here: if we process multiple orphans\nthat are still orphans, then we'll only call mempool.check() once at the\nend, instead of after processing each tx.",
      "tree": {
        "sha": "d6a042f285f70e59b2dd11be0e553d298431fd45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a042f285f70e59b2dd11be0e553d298431fd45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55c79a9cefb6c83cdebbf6c538c471607695b457",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c79a9cefb6c83cdebbf6c538c471607695b457",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55c79a9cefb6c83cdebbf6c538c471607695b457",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c79a9cefb6c83cdebbf6c538c471607695b457/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e8dd99ef1c147898bd06fee7014afdff6618f18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e8dd99ef1c147898bd06fee7014afdff6618f18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e8dd99ef1c147898bd06fee7014afdff6618f18"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "45cb29065eb4a4ed6b57923cec770c9ef68e562d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c79a9cefb6c83cdebbf6c538c471607695b457/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c79a9cefb6c83cdebbf6c538c471607695b457/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=55c79a9cefb6c83cdebbf6c538c471607695b457",
        "patch": "@@ -2049,8 +2049,8 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n     std::set<NodeId> setMisbehaving;\n-    bool done = false;\n-    while (!done && !orphan_work_set.empty()) {\n+\n+    while (!orphan_work_set.empty()) {\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n@@ -2078,7 +2078,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 }\n             }\n             EraseOrphanTx(orphanHash);\n-            done = true;\n+            break;\n         } else if (orphan_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n             if (orphan_state.IsInvalid()) {\n                 // Punish peer that gave us an invalid orphan tx\n@@ -2124,10 +2124,10 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 }\n             }\n             EraseOrphanTx(orphanHash);\n-            done = true;\n+            break;\n         }\n-        m_mempool.check(&::ChainstateActive().CoinsTip());\n     }\n+    m_mempool.check(&::ChainstateActive().CoinsTip());\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "4763b51bca86fb9e49175619a47cdbef34feaf99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzYzYjUxYmNhODZmYjllNDkxNzU2MTlhNDdjZGJlZjM0ZmVhZjk5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T19:39:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T19:07:43Z"
      },
      "message": "ProcessOrphanTx: remove useless setMisbehaving set\n\nThis starts empty, and is only added to if we're about to\nexit the function (so we never read from it).",
      "tree": {
        "sha": "1d28e8e7f0aebcdf9fe8c9e834ce1796129c385a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d28e8e7f0aebcdf9fe8c9e834ce1796129c385a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4763b51bca86fb9e49175619a47cdbef34feaf99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4763b51bca86fb9e49175619a47cdbef34feaf99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4763b51bca86fb9e49175619a47cdbef34feaf99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4763b51bca86fb9e49175619a47cdbef34feaf99/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55c79a9cefb6c83cdebbf6c538c471607695b457",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c79a9cefb6c83cdebbf6c538c471607695b457",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55c79a9cefb6c83cdebbf6c538c471607695b457"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "40783e210ce1cb611b845ac5f7078170aa1aaa9c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4763b51bca86fb9e49175619a47cdbef34feaf99/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4763b51bca86fb9e49175619a47cdbef34feaf99/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4763b51bca86fb9e49175619a47cdbef34feaf99",
        "patch": "@@ -2048,7 +2048,6 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n-    std::set<NodeId> setMisbehaving;\n \n     while (!orphan_work_set.empty()) {\n         const uint256 orphanHash = *orphan_work_set.begin();\n@@ -2065,7 +2064,6 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n         // that relayed the previous transaction).\n         TxValidationState orphan_state;\n \n-        if (setMisbehaving.count(fromPeer)) continue;\n         if (AcceptToMemoryPool(m_mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n@@ -2081,14 +2079,12 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n             break;\n         } else if (orphan_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n             if (orphan_state.IsInvalid()) {\n-                // Punish peer that gave us an invalid orphan tx\n-                if (MaybePunishNodeForTx(fromPeer, orphan_state)) {\n-                    setMisbehaving.insert(fromPeer);\n-                }\n                 LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s from peer=%d. %s\\n\",\n                     orphanHash.ToString(),\n                     fromPeer,\n                     orphan_state.ToString());\n+                // Maybe punish peer that gave us an invalid orphan tx\n+                MaybePunishNodeForTx(fromPeer, orphan_state);\n             }\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee"
      }
    ]
  },
  {
    "sha": "e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDdjNWQ5NDIzMWNlZmI3NDhmOTUzNGFiOGZmMGIzZTJiMDRjNGQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T19:47:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T19:08:43Z"
      },
      "message": "ProcessOrphanTx: Remove outdated commented\n\nAlso rename orphan_state to state. Both the comment and the variable\nname are leftover from when this logic was part of ProcessMessage().",
      "tree": {
        "sha": "bcb8dbe98cc7a317fc1e54a216bafcec376fa935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcb8dbe98cc7a317fc1e54a216bafcec376fa935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4763b51bca86fb9e49175619a47cdbef34feaf99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4763b51bca86fb9e49175619a47cdbef34feaf99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4763b51bca86fb9e49175619a47cdbef34feaf99"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e28775d84c403ee79348c89990adb0a208350031",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
        "patch": "@@ -2059,12 +2059,9 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n         const CTransactionRef porphanTx = orphan_it->second.tx;\n         const CTransaction& orphanTx = *porphanTx;\n         NodeId fromPeer = orphan_it->second.fromPeer;\n-        // Use a new TxValidationState because orphans come from different peers (and we call\n-        // MaybePunishNodeForTx based on the source peer from the orphan map, not based on the peer\n-        // that relayed the previous transaction).\n-        TxValidationState orphan_state;\n+        TxValidationState state;\n \n-        if (AcceptToMemoryPool(m_mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -2077,19 +2074,19 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n             }\n             EraseOrphanTx(orphanHash);\n             break;\n-        } else if (orphan_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (orphan_state.IsInvalid()) {\n+        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+            if (state.IsInvalid()) {\n                 LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s from peer=%d. %s\\n\",\n                     orphanHash.ToString(),\n                     fromPeer,\n-                    orphan_state.ToString());\n+                    state.ToString());\n                 // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(fromPeer, orphan_state);\n+                MaybePunishNodeForTx(fromPeer, state);\n             }\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee\n             LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-            if (orphan_state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n+            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n                 // We can add the wtxid of this transaction to our reject filter.\n                 // Do not add txids of witness transactions or witness-stripped\n                 // transactions to the filter, as they can have been malleated;\n@@ -2113,7 +2110,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 // processing of this transaction in the event that child\n                 // transactions are later received (resulting in\n                 // parent-fetching by txid via the orphan-handling logic).\n-                if (orphan_state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && orphanTx.GetWitnessHash() != orphanTx.GetHash()) {\n+                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && orphanTx.GetWitnessHash() != orphanTx.GetHash()) {\n                     // We only add the txid if it differs from the wtxid, to\n                     // avoid wasting entries in the rolling bloom filter.\n                     recentRejects->insert(orphanTx.GetHash());"
      }
    ]
  },
  {
    "sha": "4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmNlNzI2YmQxZTM1YTY4NmNkOWQ0OGFkZDVkYTIyYjFiNWUyNWUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T20:15:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T19:10:17Z"
      },
      "message": "ProcessOrphanTx: Remove aliases",
      "tree": {
        "sha": "e4b62054ab7a9ad61b756cbaf49b871cc3653699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4b62054ab7a9ad61b756cbaf49b871cc3653699"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fce726bd1e35a686cd9d48add5da22b1b5e25e1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e07c5d94231cefb748f9534ab8ff0b3e2b04c4d8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5c3b71faa2cdd6553dc74ee5416a61c47a609931",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fce726bd1e35a686cd9d48add5da22b1b5e25e1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fce726bd1e35a686cd9d48add5da22b1b5e25e1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
        "patch": "@@ -2057,14 +2057,12 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n         if (orphan_it == mapOrphanTransactions.end()) continue;\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n-        const CTransaction& orphanTx = *porphanTx;\n-        NodeId fromPeer = orphan_it->second.fromPeer;\n         TxValidationState state;\n \n         if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n-            for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n+            for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n@@ -2078,10 +2076,10 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n             if (state.IsInvalid()) {\n                 LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s from peer=%d. %s\\n\",\n                     orphanHash.ToString(),\n-                    fromPeer,\n+                    orphan_it->second.fromPeer,\n                     state.ToString());\n                 // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(fromPeer, state);\n+                MaybePunishNodeForTx(orphan_it->second.fromPeer, state);\n             }\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee\n@@ -2101,7 +2099,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 // for concerns around weakening security of unupgraded nodes\n                 // if we start doing this too early.\n                 assert(recentRejects);\n-                recentRejects->insert(orphanTx.GetWitnessHash());\n+                recentRejects->insert(porphanTx->GetWitnessHash());\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n                 // then we know that the witness was irrelevant to the policy\n                 // failure, since this check depends only on the txid\n@@ -2110,10 +2108,10 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 // processing of this transaction in the event that child\n                 // transactions are later received (resulting in\n                 // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && orphanTx.GetWitnessHash() != orphanTx.GetHash()) {\n+                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n                     // We only add the txid if it differs from the wtxid, to\n                     // avoid wasting entries in the rolling bloom filter.\n-                    recentRejects->insert(orphanTx.GetHash());\n+                    recentRejects->insert(porphanTx->GetHash());\n                 }\n             }\n             EraseOrphanTx(orphanHash);"
      }
    ]
  },
  {
    "sha": "001343f4bc8b22fa9e313bd2867756eb9d614fa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDEzNDNmNGJjOGIyMmZhOWUzMTNiZDI4Njc3NTZlYjlkNjE0ZmEz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-25T21:26:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T19:12:02Z"
      },
      "message": "ProcessOrphanTx: Move AddToCompactExtraTransactions call into ProcessOrphanTx",
      "tree": {
        "sha": "15afc4131cf0b4bb160c2c9e080c643919f8f7a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15afc4131cf0b4bb160c2c9e080c643919f8f7a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/001343f4bc8b22fa9e313bd2867756eb9d614fa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/001343f4bc8b22fa9e313bd2867756eb9d614fa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/001343f4bc8b22fa9e313bd2867756eb9d614fa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/001343f4bc8b22fa9e313bd2867756eb9d614fa3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fce726bd1e35a686cd9d48add5da22b1b5e25e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fce726bd1e35a686cd9d48add5da22b1b5e25e1"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c82574c4f648e41d9e4665eae8c80b85bfd898cf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/001343f4bc8b22fa9e313bd2867756eb9d614fa3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/001343f4bc8b22fa9e313bd2867756eb9d614fa3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=001343f4bc8b22fa9e313bd2867756eb9d614fa3",
        "patch": "@@ -2041,10 +2041,8 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n  *                                  orphan will be reconsidered on each call of this function. This set\n  *                                  may be added to if accepting an orphan causes its children to be\n  *                                  reconsidered.\n- * @param[out]     removed_txn      Transactions that were removed from the mempool as a result of an\n- *                                  orphan transaction being added.\n  */\n-void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn)\n+void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n@@ -2058,6 +2056,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n         TxValidationState state;\n+        std::list<CTransactionRef> removed_txn;\n \n         if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n@@ -2071,6 +2070,9 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\n                 }\n             }\n             EraseOrphanTx(orphanHash);\n+            for (const CTransactionRef& removedTx : removed_txn) {\n+                AddToCompactExtraTransactions(removedTx);\n+            }\n             break;\n         } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n             if (state.IsInvalid()) {\n@@ -3034,8 +3036,12 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 tx.GetHash().ToString(),\n                 m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n \n+            for (const CTransactionRef& removedTx : lRemovedTxn) {\n+                AddToCompactExtraTransactions(removedTx);\n+            }\n+\n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(pfrom.orphan_work_set, lRemovedTxn);\n+            ProcessOrphanTx(pfrom.orphan_work_set);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -3138,9 +3144,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             }\n         }\n \n-        for (const CTransactionRef& removedTx : lRemovedTxn)\n-            AddToCompactExtraTransactions(removedTx);\n-\n         // If a tx has been detected by recentRejects, we will have reached\n         // this point and the tx will have been ignored. Because we haven't run\n         // the tx through AcceptToMemoryPool, we won't have computed a DoS\n@@ -3853,12 +3856,8 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n         ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n \n     if (!pfrom->orphan_work_set.empty()) {\n-        std::list<CTransactionRef> removed_txn;\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(pfrom->orphan_work_set, removed_txn);\n-        for (const CTransactionRef& removedTx : removed_txn) {\n-            AddToCompactExtraTransactions(removedTx);\n-        }\n+        ProcessOrphanTx(pfrom->orphan_work_set);\n     }\n \n     if (pfrom->fDisconnect)"
      },
      {
        "sha": "f7afddda23a3d2c6b94a9992e8ad6bf5d65873e8",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/001343f4bc8b22fa9e313bd2867756eb9d614fa3/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/001343f4bc8b22fa9e313bd2867756eb9d614fa3/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=001343f4bc8b22fa9e313bd2867756eb9d614fa3",
        "patch": "@@ -121,8 +121,7 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn)\n-        EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block);\n "
      }
    ]
  }
]