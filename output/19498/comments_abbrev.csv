jnewbery,2020-07-12 10:32:39,@jonatack @troygiorshev - you both concept ACKed this branch in #19364.,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-657203897,657203897,
DrahtBot,2020-07-12 17:14:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20025 (validation/util: add GetTransactionFee by gzhao408)\n* #19911 (net: guard vRecvGetData with cs_vRecv and orphan_wo",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-657250971,657250971,
jnewbery,2020-07-12 17:15:57,"> are the behavior changes desirable in themselves or ignorable side effects\n\nThere are no observable functional changes. The behavior changes are simply in the timing of how items are popped off the orphan_work_set list. They make the control flow of the function much easier to follow. After these changes either:\n- orphan_work_set is empty and the function does nothing; or\n- the function ",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-657251121,657251121,
jnewbery,2020-07-15 09:48:57,rebased,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-658668490,658668490,
jnewbery,2020-07-16 09:36:06,rebased,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-659297029,659297029,
jnewbery,2020-07-23 10:07:37,rebased,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-662924153,662924153,
jnewbery,2020-07-24 08:12:44,Thanks for the review @troygiorshev . I've addressed your comment in the lastest force-push:  https://github.com/bitcoin/bitcoin/compare/eb30f87e0972faae78df7c6116bc18f6fad7b353..833bccc522703f87d0d46b190a9a29bcb633c615,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-663402394,663402394,
troygiorshev,2020-07-24 11:26:20,tACK 833bccc via `git range-diff master eb30f87 833bccc`,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-663493644,663493644,
jnewbery,2020-07-27 08:55:22,"Thanks for the review @amitiuttarwar . I've addressed your review comments.\n\n> is my understanding correct that there is a v. small change in behavior in ProcessOrphanTx- previously, if an orphan taken off the orphan_work_set was not accepted to mempool bc of missing additional parents & there are more orphans in the work set, the while loop would continue & process the next one. with these ch",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-664212733,664212733,
troygiorshev,2020-07-27 12:30:40,"reACK c5b4c02ee2e423dbcccc985b4f573f8ed9aafa0a via `git range-diff master 833bccc c5b4c02`, only comment changes",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-664367104,664367104,
amitiuttarwar,2020-07-27 19:18:38,"> I've seen multiple bugs in these auxiliary work queues where ... created a livelock with network peers\n\nwoah interesting, any you could point me towards? \n\n> See the commit log from ProcessOrphanTx: Only ever reprocess one orphan tx\n\noops sorry, I don't know how I missed that. thanks for the explanation.\n\nalright, I've been considering possible ways this difference could be explo",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-664588368,664588368,
sipa,2020-07-27 19:27:13,"I'm not worried about the only-reprocess-one-at-a-time as an attack vector - at worst, a peer could make his own transactions be processed slower. As long as there is no impact on what one peer can do w.r.t. processing of things arriving from other peers, there is no such concern.\n\nHowever, I'm slightly concerned that there could be innocent transaction patterns that result in orphan transacti",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-664592293,664592293,
jnewbery,2020-07-28 07:21:50,"> I'm not worried about the only-reprocess-one-at-a-time as an attack vector - at worst, a peer could make his own transactions be processed slower. As long as there is no impact on what one peer can do w.r.t. processing of things arriving from other peers, there is no such concern.\n\nIf this is the case, then should we process the entire `orphan_work_set` in one pass? I'm happy to remove the _",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-664825767,664825767,
sipa,2020-07-28 18:14:55,"@jnewbery It currently iterates until either one orphan is actually accepted or actually rejected, or the work set is empty.\n\nSo it continues until it does some ""real work"", as anything else (reconsidering things that still have missing inputs) is presumably fast.",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-665196224,665196224,
jnewbery,2020-07-29 10:45:39,"I don't see how this could cause orphans to be processed significantly slower. We always make progress through the peer's orphan_work_set on each ProcessMessages call, and we tell the message handler thread that there's more work to do if the work set isn't empty, so we'll never sleep between calls.\n\nIn the absolute pessimal case, all orphans start in orphan_work_set, the first 99 are still or",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-665591011,665591011,
ajtowns,2020-07-31 01:09:08,"Wow, big approach NACK on ""tidy up"" PRs that do behaviour changes.\n\nI think a better mental model for this sort of work queue is ""always make real progress every time you look at the queue"", and the main benefit of the tidy up here is moving the ""make real progress"" out of the while loop, since we're not doing many of them we're only doing one, so having it in the loop is misleading. But we ca",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-666853816,666853816,
jnewbery,2020-07-31 09:31:52,"> Wow, big approach NACK on ""tidy up"" PRs that do behaviour changes.\n\nI don't understand. You've NACKed a behaviour change and then suggested a different behaviour change. What's the difference?\n\nI agree that if a PR claimed to not change behaviour but did unintentionally, that'd be very bad, but all the behaviour changes in this PR have been fully documented and justified in the commit lo",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-667030111,667030111,
jnewbery,2020-08-07 10:43:24,"@sipa @ajtowns - you've both expressed reservations about this PR. Before I go ahead and rebase, can you answer the questions above:\n\n@sipa \n\n>> I'm slightly concerned that there could be innocent transaction patterns that result in orphan transactions being processed significantly slower.\n\n> I don't see how this could cause orphans to be processed significantly slower. [...] Are you t",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-670454824,670454824,
ajtowns,2020-08-11 14:56:33,"> @sipa @ajtowns - you've both expressed reservations about this PR. Before I go ahead and rebase, can you answer the questions above:\n> > > Wow, big approach NACK on ""tidy up"" PRs that do behaviour changes.\n> > all the behaviour changes in this PR have been fully documented and justified in the commit logs since the PR was opened. They're observationally equivalent to the peers, and no peer c",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-671996780,671996780,
jnewbery,2020-08-11 20:42:50,"Thanks @ajtowns . A few questions/observations about your scenario:\n\n- _""which is reduced to 0.1sec away due to fMoreWork being set""_. I think it's the other way round. We wait for up to 0.1s if there's no more work to do. If there _is_ work to do, then we immediately reiterate through vNodes again.\n- _""Node X provides A1..A100, and then B provides tx A""_. I think the B is a typo here and No",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-672268872,672268872,
amitiuttarwar,2020-08-11 21:53:56,"since its the only point of contention, maybe the _ProcessOrphanTx: Only ever reprocess one orphan tx_ commit can be broken out into a separate PR to separate review from the rest of the changes? \n\nin regards to this change, I'm not sure I currently have much insight to offer on this nuanced discussion, I'm mostly trying to learn and make sure I understand the concerns/tradeoffs. this comment ",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-672298680,672298680,
jnewbery,2020-08-12 08:47:47,rebased (https://github.com/bitcoin/bitcoin/compare/c5b4c02ee2e423dbcccc985b4f573f8ed9aafa0a..a264e1465d942d48e096ef5d0a61e5f94c3e8106),https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-672741731,672741731,
jnewbery,2020-08-12 09:04:33,"Thanks @amitiuttarwar . Great summary.\n\nI've done as you've suggested and removed the _ProcessOrphanTx: Only ever reprocess one orphan tx_ commit. I think this PR by itself is a marginal improvement, but not including #19364 and the _ProcessOrphanTx: Only ever reprocess one orphan tx_ commit limits the benefits. The fact that @ajtowns and I can't agree on whether node Y can interfere with node",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-672751156,672751156,
jnewbery,2020-08-24 14:12:10,rebased,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-679151512,679151512,
amitiuttarwar,2020-08-24 21:53:38,"utACK 82396bb897\n\norphan processing is complex & I appreciate the efforts to simplify & document. thank you! \n\nas before, I still think simplifying the while loop to have a clearer definition of ""forward progress"" would be nice, but given the review strugs, I understand dropping from this PR. ",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-679385784,679385784,
jnewbery,2020-08-25 09:02:46,Fixed a bad intermediate commit (no changes to final code),https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-679900925,679900925,
amitiuttarwar,2020-08-25 16:35:45,re utACK e59bbcd06f - checked that nothing changed about final state & that commits build ,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-680136413,680136413,
MarcoFalke,2020-09-07 07:14:58,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-688091382,688091382,
DrahtBot,2020-09-07 17:40:10,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-688451919,688451919,
jnewbery,2020-09-07 19:13:09,Rebased,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-688479795,688479795,
troygiorshev,2020-09-23 02:50:35,"ACK 001343f4bc8b22fa9e313bd2867756eb9d614fa3\n\nThis is a rather straightforward PR now.",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-697099076,697099076,
sipa,2020-09-30 01:08:09,utACK 001343f4bc8b22fa9e313bd2867756eb9d614fa3,https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-701100118,701100118,
MarcoFalke,2020-09-30 13:53:07,"ACK 001343f4bc8b22fa9e313bd2867756eb9d614fa3 🌮\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 001343f4bc8b22fa9e313bd2867756eb9d614fa3 🌮\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhi8gv+MYMSOeIoSOoTXDVzdEvq7uZMWyFQwE9JWb+4Gf7ArKX7dLYmeI",https://github.com/bitcoin/bitcoin/pull/19498#issuecomment-701405328,701405328,
jonatack,2020-07-12 14:53:51,"2ec4eeadb nit, can mention ""Reference to"" here as well",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453326299,453326299,src/net_processing.cpp
jonatack,2020-07-12 15:16:28,9c954f4 it looks like `connman` can be reference to const?,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453329191,453329191,src/net_processing.cpp
jonatack,2020-07-12 15:18:36,2ec4eead [in/out]? (`mempool` needs to be mutable),https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453329442,453329442,src/net_processing.cpp
jnewbery,2020-07-12 17:16:14,"hmmm I'm not sure. mempool isn't used by the caller after the function returns, so I'm not sure I'd call it an 'out param'. Just because an argument is non-const, I don't think that automatically makes it an out-param.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453341350,453341350,src/net_processing.cpp
jnewbery,2020-07-12 17:16:17,sure. Done,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453341355,453341355,src/net_processing.cpp
jnewbery,2020-07-12 17:16:19,"Meh. I think I'd prefer to remove ""Reference to"" from the others than add this.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r453341357,453341357,src/net_processing.cpp
troygiorshev,2020-07-23 20:44:42,"This is now unused and can be removed.\n\nThis is the only thing blocking my ACK.\n\n+1 to the removal of an out param! 👏 ",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459717381,459717381,src/net_processing.cpp
troygiorshev,2020-07-23 20:47:13,"non-blocking personal-opinion nit:\nI would prefer the docs to be wrapped to 80 💻 ",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459718641,459718641,src/net_processing.cpp
troygiorshev,2020-07-23 20:59:26,"Looks like the same can be done at for AcceptToMemoryPool, [here](https://github.com/jnewbery/bitcoin/blob/eb30f87e0972faae78df7c6116bc18f6fad7b353/src/net_processing.cpp#L2957) and [here](https://github.com/jnewbery/bitcoin/blob/2020-07-orphan-tidy/src/net_processing.cpp#L2972).\n\nI've checked all of AcceptToMemoryPool's call sites, I think we can do the same thing and remove two more out para",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459724743,459724743,src/net_processing.cpp
jnewbery,2020-07-24 07:39:14,"We don't have a project-wide style for this, although I try to keep my lines under 120 chars. 80 feels is a bit stingy to me.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459897258,459897258,src/net_processing.cpp
jnewbery,2020-07-24 07:51:24,"Thanks. Removed `removed_txn`\n\nThose out params are still needed in AcceptToMemoryPool. They're used to add the removed transactions to the compact block extra transactions here: https://github.com/jnewbery/bitcoin/blob/66ae250195ab7c5c94f72fa9cf222992e1ac46c1/src/net_processing.cpp#L2946-L2947",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459902407,459902407,src/net_processing.cpp
troygiorshev,2020-07-24 11:23:56,"I'm suggesting that calls to AddtoCompactExtraTransactions be moved into AcceptToMemoryPoolWithTime, in a similar manner to how you moved it into ProcessOrphanTx.  I'm pretty sure this is possible, whether it's a good idea or not is something I'm less sure about.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r459995200,459995200,src/net_processing.cpp
jnewbery,2020-07-24 12:10:38,"That would be a layer violation. `AddToCompactExtraTransactions()` is a net_processing function, adding data to a net_processing data structure. `AcceptToMemoryPool()` and the functions it calls are validation functions and shouldn't call into net_processing.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460013880,460013880,src/net_processing.cpp
amitiuttarwar,2020-07-25 02:50:50,would be nice if this mentioned that it's the _parents_ COutPoint ,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460355142,460355142,src/net_processing.cpp
amitiuttarwar,2020-07-25 03:02:04,"1/3 nit on this comment, 2/3 for my understanding- \nthese orphans aren't listed exactly random right? `AddOrphanTx` adds the entries to in the order they are seen, but `EraseOrphanTx` introduces some randomness bc it deletes an entry by swapping out the last element (which I'm still trying to understand the point of). \n\nseems the point of this data structure is to enable `LimitOrphanTxSize` ",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460356050,460356050,src/net_processing.cpp
amitiuttarwar,2020-07-25 03:07:34,"while adding comments, consider one here too? meybe: Index from wtxid into the mapOrphanTransactions to lookup orphan transactions using their witness ids.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460356486,460356486,src/net_processing.cpp
amitiuttarwar,2020-07-25 03:13:30,"after this PR, isn't it a max of one orphan that will be reconsidered on each run of the function?",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460356964,460356964,src/net_processing.cpp
jnewbery,2020-07-27 08:05:03,done,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460715036,460715036,src/net_processing.cpp
jnewbery,2020-07-27 08:16:51,"> these orphans aren't listed exactly random right?\n\n> if my understanding is correct, I think it'd be clearer to say ""List of orphan transactions to enable random eviction""\n\nYou're correct. I've now fixed the comment. Thank you!\n\n> it deletes an entry by swapping out the last element (which I'm still trying to understand the point of)\n\nThis is because `g_orphan_list` is a std::vec",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460721088,460721088,src/net_processing.cpp
jnewbery,2020-07-27 08:20:23,Thanks. I missed this in the rebase. Added.,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460723077,460723077,src/net_processing.cpp
jnewbery,2020-07-27 08:25:32,Yes. Fixed!,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r460726031,460726031,src/net_processing.cpp
amitiuttarwar,2020-07-27 19:05:17,"does this sound right: \n\nit seems to me that `list_pos` is tracked _for this reason_. so the alternative would be if we removed `list_pos` & used in the built in vector erase function. the tradeoff would be less efficiency. \n\nthe current design choice is to store this additional field on every `COrphanTx` to reduce an O(n) operation on the `g_orphan_list` vector, where n <= 100 | `-maxorph",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r461106310,461106310,src/net_processing.cpp
jnewbery,2020-07-28 07:03:53,"Yes, this is the only reason we store `list_pos`. Without it, we'd have to do a (relatively) expensive erase from the middle of the vector.",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r461362446,461362446,src/net_processing.cpp
MarcoFalke,2020-08-25 07:37:21,"in commit f98ffeb4323111f214234ef33:\n\nI'd be surprised if this commit compiles. Especially L2094",https://github.com/bitcoin/bitcoin/pull/19498#discussion_r476239594,476239594,src/net_processing.cpp
jnewbery,2020-08-25 09:02:16,Good catch Marco. This was a bad rebase. I've fixed it and verified that all commits compile.,https://github.com/bitcoin/bitcoin/pull/19498#discussion_r476293722,476293722,src/net_processing.cpp
