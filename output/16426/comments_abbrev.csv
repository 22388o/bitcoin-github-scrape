DrahtBot,2019-07-20 06:53:23,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18699 (wallet: Avoid translating RPC errors by MarcoFalke)\n* #18698 (Make g_chainman internal to validation by MarcoFalk",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-513442866,513442866,
ryanofsky,2019-07-20 11:17:38,"Great work! I'd suggest changing the PR title to something like ""Reverse cs_main, cs_wallet lock order and reduce cs_main locking"" to motivate it better and describe the change.\n\nThe current title ""Remove Chain::Lock interface"" and starting sentence ""Follow-up in the set of Chain interface refactoring"" make this sound mostly like a refactoring. But this is more of a locking change, and a chang",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-513459089,513459089,
practicalswift,2019-07-22 11:00:58,"Concept ACK\n\nExcellent work!",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-513745160,513745160,
MarcoFalke,2019-07-22 20:43:47,"Concept ACK. This might help IBD, because `cs_main` had to be acquired due to the lock order requirement. If it doesn't help IBD, the change will hopefully still speed up the `msghand` thread because the wallets take the main lock less.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-513946565,513946565,
jnewbery,2019-07-22 21:32:58,Big concept ACK! Thanks @ariard ,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-513963292,513963292,
promag,2019-07-25 02:58:15,"Concept ACK, mother of god, not locking `cs_main`!",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-514875510,514875510,
ariard,2019-11-11 19:33:32,"Finally rebased after merge of #15931, PR should be ready for review. \n\nApart of 3efe38d which use the new `m_last_block_processed_height` to avoid querying the chainstate and introduce some modifications, other commits are pretty straight-forward. It's just taking `cs_main` inside the `Chain` implementation instead of using `Chain::lock`. Lock order is reversed only in last commit f057aed to ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-552582365,552582365,
ryanofsky,2019-11-11 20:41:37,"Approach ACK. Code changes here are very simple after #15931.\n\nAll the changes before the last commit f057aedf80d8bd6083c2227e42d4887be4c2933b seem straightforward and don't change behavior other than locking `cs_main` in new places recursively, so all the new locks are no-ops.\n\nOnly the last commit f057aedf80d8bd6083c2227e42d4887be4c2933b is the big scary change that removes `cs_main` loc",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-552606573,552606573,
jnewbery,2019-11-11 21:01:13,"Restating my concept ACK. I plan to review this fully soon.\n\nThanks for rebasing this so quickly",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-552613910,552613910,
ariard,2019-11-11 22:03:16,"> Only the last commit f057aed is the big scary change that removes cs_main locks all over the wallet, leaving us to hope that remaining locking is sufficient and that stretches of wallet code that used to run under cs_main aren't making assumptions about the tip not changing and other wallet threads not running.\n\nMost of the code making assumptions about the tip is confined in the rescan logi",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-552637188,552637188,
meshcollider,2019-11-22 19:56:50,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-557672181,557672181,
jkczyz,2019-12-04 16:07:25,"When compiling with these changes, I get a new compilation warning related to holding `cs_wallet`:\n\n```\n  CXX      bitcoin_wallet-bitcoin-wallet.o\nwallet/wallet.cpp:2528:61: warning: reading variable 'm_last_block_processed_height' requires holding mutex\n      'cs_wallet' [-Wthread-safety-analysis]\n    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), m_last_block_processed_heigh",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561713099,561713099,
jonatack,2019-12-04 16:35:46,"@jkczyz, what platform, compiler, and configure flags did you use so I can try to reproduce? My build (Debian, gcc 8.3, --enable-debug, --enable-bench) didn't show that warning. Perhaps I should use clang -c -Wthread-safety.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561725952,561725952,
jkczyz,2019-12-04 16:55:51,"> @jkczyz, what platform, compiler, and configure flags did you use so I can try to reproduce? My build (Debian, gcc 8.3, --enable-debug, --enable-bench) didn't show that warning. Perhaps I should use clang -c -Wthread-safety.\n\n@jonatack Built on MacOS using clang-1001.0.46.4. No special configuration flags. I performed `make clean && make` at a7aec7ad9 followed by `make` at 24f40fc1a to confi",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561734875,561734875,
jkczyz,2019-12-04 17:09:03,"> > @jkczyz, what platform, compiler, and configure flags did you use so I can try to reproduce? My build (Debian, gcc 8.3, --enable-debug, --enable-bench) didn't show that warning. Perhaps I should use clang -c -Wthread-safety.\n> \n> @jonatack Built on MacOS using clang-1001.0.46.4. No special configuration flags. I performed `make clean && make` at [a7aec7a](https://github.com/bitcoin/bitcoin",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561740382,561740382,
ariard,2019-12-04 17:17:22,"Thanks for reviews,\n\n@jkczyz it should be good now on df508be, following Russ remark I switchted `GetLocktimeForNewTransaction` to use `m_last_block_processed_height` but without remembering the reason I avoid to do it at first, which was to avoid tweaking lock order issue. I just changed `GetLocktimeForNewTransaction` after lock taking in `CreateTransaction`, it shouldn't change anything.\n",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561743673,561743673,
jonatack,2019-12-04 17:17:50,> @jonatack Built on MacOS using clang-1001.0.46.4. No special configuration flags. I performed `make clean && make` at [a7aec7a](https://github.com/bitcoin/bitcoin/commit/a7aec7ad97949a82f870c033d8fd8b65d772eacb) followed by `make` at [24f40fc](https://github.com/bitcoin/bitcoin/commit/24f40fc1afa9d25e5032ba4f8d1c0161e81dce3f) to confirm the warning only appeared at the latter commit. I haven't t,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561743874,561743874,
jonatack,2019-12-04 17:37:31,"> it should be good now on [df508be](https://github.com/bitcoin/bitcoin/commit/df508be1368e72a77b9ad50280a5a1c5d2e983b1)\n> \n> IIRC clang thread safety detection only works on Mac for now\n\nYes, rebuilt and the warning is now gone in df508be. As commented just above, I reproduced the warning on 24f40fc with Debian and Clang (passing --enable-debug).\n\n```\n~/projects/bitcoin/bitcoin/src ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561758337,561758337,
practicalswift,2019-12-04 17:37:48,Would be interesting to see the impact (if any) on IBD :),https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561758447,561758447,
ariard,2019-12-04 19:54:49,@jonatack that's a compiler warning and `--enable-debug` is about turning on our deadlock detection with conditional compilation they are not related.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561812904,561812904,
jkczyz,2019-12-04 21:15:46,I'm getting the warning at df508be on MacOS using clang as before.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561841975,561841975,
ariard,2019-12-04 21:34:25,"@jkczyz  at 3773b41, add a `AssertLockHeld` in `CreateTransaction` after taking `cs_wallet`, it should avoid clang false positive warning according to documentation ""utility class for indicating to compiler thread analysis that a mutex is locked (when it couldn't be determined otherwise)""",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561849240,561849240,
jkczyz,2019-12-04 22:10:56,"> @jkczyz at [3773b41](https://github.com/bitcoin/bitcoin/commit/3773b4159c37db993b9bb7c3f5d7dd7a51a39b09), add a `AssertLockHeld` in `CreateTransaction` after taking `cs_wallet`, it should avoid clang false positive warning according to documentation ""utility class for indicating to compiler thread analysis that a mutex is locked (when it couldn't be determined otherwise)""\n\nLooks like I had a",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561862498,561862498,
jonatack,2019-12-04 22:40:52,"> @jonatack that's a compiler warning and `--enable-debug` is about turning on our deadlock detection with conditional compilation they are not related.\n\nThanks. Agreed. Verified locally: warning present on 24f40fc with Debian+Clang without passing --enable-debug.\n```\n  CC            = /usr/bin/ccache clang\n  CFLAGS        = -g -O2\n  CPPFLAGS      =   -U_FORTIFY_SOURCE  -D_FORTIFY_SOUR",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561872913,561872913,
jonatack,2019-12-04 22:43:28,@ariard what changed from df508be to df17e36 to 3773b41?,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561873798,561873798,
ariard,2019-12-04 23:36:12,@jonatack Adding the `AssertLockHeld` to be sure to not raise false positive warning from the compiler.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-561892216,561892216,
ariard,2019-12-05 19:27:50,@jonatack src/wallet/wallet.cpp L2553 on head commit. But you should really recompile latest git to get `git range-diff` it changes your life!,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-562277913,562277913,
instagibbs,2019-12-05 19:33:05,could you update the OP? It's slightly outdated due to dependent PRs being merged,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-562281219,562281219,
ariard,2019-12-06 16:38:32,"OP updated, see also for more context https://bitcoincore.reviews/16426.html",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-562645739,562645739,
ariard,2019-12-10 23:46:11,"Thanks for review @promag, corrected some nits on f87558b.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-564311349,564311349,
ariard,2019-12-12 19:25:54,"@practicalswift after a run on bitcoinperf, there is no seen performance change on IBD. It still may be an improvement with a heavy workload on wallet RPCs (but harder to simulate).",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-565148815,565148815,
ryanofsky,2019-12-17 20:06:27,"I was reading the review club discussion, and it sounded like there was some confusion about what motivated the PR. I think it would help to simplify the PR description. If I were describing this PR, I would write something like:\n\n<dl><dd><p>This change is intended to make the bitcoin node and its rpc, network, and gui interfaces more responsive while the wallet is in use. Currently, because t",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-566727654,566727654,
ryanofsky,2019-12-18 18:05:56,"A suggestion for other reviewers might be to review last commit first: ""Remove locked_chain from CWallet, its RPCs and tests"" (f87558b49bc63922a70c9ff02c33c0b1ed1f44b1), since this is the commit that actually changes behavior, while other commits are moving and refactoring code.\n\nNote to Antoine: If it would make it easier to update the PR, I think it'd be fine to squash it into just one or tw",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-567145477,567145477,
ariard,2019-12-19 01:13:54,"Thanks one thousands times @ryanofsky for review and advices. Implemented most of them, including updating OP and tracking TODO in `interfaces/chain.h`. Also squash a bunch of commits, only non-squashed are the ones doing refactor. \n\nI'm still looking for low-hanging fruits to dry-up the interface like dropping `checkFinalTx` to ease review.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-567284634,567284634,
ariard,2020-01-04 00:20:50,"Updated e4da874. Picked up Russ's last review suggestions/findings, thanks.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-570737229,570737229,
ariard,2020-01-08 05:28:53,"Thanks @kallewoof for review, took most of the suggestions on ac05c8b, some of them were already fixed in latter commits anyway, I can squash commits more if it suits more (not my feeling but if it fits reviewers better let's go for it)",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-571897200,571897200,
ryanofsky,2020-01-17 19:53:42,"re: https://github.com/bitcoin/bitcoin/pull/16426#pullrequestreview-343566228\n\n> I think I can break some pieces out of that commit to smaller PRs that remove `Chain::Lock` usages\n\nI started doing this in draft PR #17954. Will continue to update",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-575771590,575771590,
laanwj,2020-02-26 16:40:02,This needs rebase and addressing @ryanofsky's comments.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-591522854,591522854,
ryanofsky,2020-02-27 17:07:28,"> This needs rebase and addressing @ryanofsky's comments.\n\nThis is basically just blocked on #17954.\n\nAntoine has a rebased version of this PR on top of #17954 and #17443, which both simplify this PR in a working branch https://github.com/bitcoin/bitcoin/compare/master...ariard:2020-02-wallet-standalone\n\nThe relevant commits in that branch make a smaller version of this PR:\n\n- 23c4",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-592070721,592070721,
ariard,2020-02-28 21:12:23,"@laanwj Thanks for the push-up, we agreed with Russ to get #17954 first, almost of all of his comments are related in way #17954 do it better if rebased on top. Also it would let me remove few commits. Updated PR description. ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-592730559,592730559,
ryanofsky,2020-04-15 17:28:53,"@ariard, it would be great to rebase this now that #17954 is merged. It should be simpler now, but good to merge early in the release cycle since it changes wallet locking in a big way",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-614174529,614174529,
ariard,2020-04-17 01:09:01,"@ryanofsky Thanks for the push-up after #17954, it simplifies this PR so much. Let me know if you think I should split/aggregate commits.\n\nNote, I removed `findPruned` and `findFork` as they were useless after your PR.  ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-614978409,614978409,
MarcoFalke,2020-04-17 11:54:44,"https://travis-ci.org/github/bitcoin/bitcoin/jobs/676012190#L7078\n\n```\n2020-04-17T04:31:03.393017Z POTENTIAL DEADLOCK DETECTED\n\n2020-04-17T04:31:03.393067Z Previous lock order was:\n\n2020-04-17T04:31:03.393091Z  (1) cs_wallet wallet/wallet.cpp:1667 (in thread )\n\n2020-04-17T04:31:03.393138Z  (2) cs_main interfaces/chain.cpp:218 (in thread )\n\n2020-04-17T04:31:03.393211Z Current ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-615203738,615203738,
ariard,2020-04-23 01:01:09,"Rebased at d6d6632, with some Russ suggestions. Test failure was due to deadlock in test framework introduced by a new `LOCK2` and not cached at last rebae.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-618116319,618116319,
MarcoFalke,2020-04-23 10:56:34,Tests are still failing,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-618333788,618333788,
MarcoFalke,2020-04-27 15:50:42,needs rebase,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620071947,620071947,
fjahr,2020-04-27 16:32:22,"re-ACK 0716c9cb68de74cd6e3f791dbe2aec103f70e292\n\nDid another full review of the code and built and ran tests locally.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620095471,620095471,
kallewoof,2020-04-28 04:56:05,Typo in commit 4509c05eab82dda405b4265838a61ed7ca302bf7 message: `chain acces` → `chain access`.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620380397,620380397,
ariard,2020-04-28 06:23:52,"Rebased 49ecec4. Thanks a lot @promag @fjahr @kallewoof for reviews! If you can re-ACK there should be no change apart of dropping locks added in `importdescripotrs` in the meanwhile.\n\n> So loading an old wallet (that needs rescan) still freezes the node until the wallet catches up. Maybe it could try to register as late as possible? Like before the last rescanned block?\n\nIt's planned in f",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620405959,620405959,
ryanofsky,2020-04-28 13:41:54,"re: https://github.com/bitcoin/bitcoin/pull/16426#pullrequestreview-400824121\n\n> So loading an old wallet (that needs rescan) still freezes the node until the wallet catches up.\n\n@promag is this comment saying the PR is introducing a new freeze which is not in master, or is this talking about an existing freeze? Either way I think #15719 may address it, but it would be good to know what th",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620615847,620615847,
jonatack,2020-04-28 22:21:14,"Finishing up review of Signet PR, I'll try to review this tomorrow @ariard",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-620885747,620885747,
MarcoFalke,2020-04-29 14:57:09,"Approach ACK 49ecec42ea 🛒\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nApproach ACK 49ecec42ea 🛒\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgcNgwAp3x7yEnzet/P74Z6x4BR0H3RIBb2n+oW1iOR8i1kkCEMviMketbAha8S\nvziSxJJ45p7uQBEvetTRb3jlErpB6/tNk",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621265861,621265861,
fjahr,2020-04-29 19:40:08,Re-ACK 49ecec42ea81e9cbf3970416ead79e18863dea87 but agree with https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417374233 and https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417555069 as worthwhile updates before merging.,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621421348,621421348,
jonatack,2020-04-29 19:48:57,"Handy to have #18727 merged in. Concept ACK, agree with @fjahr above, will re-look after rebase.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621425538,621425538,
MarcoFalke,2020-04-29 23:00:35,Tests fail. Needs rebase,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621512598,621512598,
kallewoof,2020-04-30 07:18:02,"Re-ACK based on the diff below (derived by rebasing the old commit on master and the git diffing this against the resulting state):\n\n```diff\ndiff --git a/src/interfaces/chain.h b/src/interfaces/chain.h\nindex ec256d7b2..e33fe54ac 100644\n--- a/src/interfaces/chain.h\n+++ b/src/interfaces/chain.h\n@@ -72,7 +72,7 @@ public:\n //!   wallet cache it, fee estimation being driven by node memp",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621658749,621658749,
ryanofsky,2020-04-30 14:11:33,"Note: after #18727 the last commit here will cause https://github.com/bitcoin/bitcoin/blob/a66ba6d029b3948dec0cf092bb844f70c16b07dc/src/wallet/test/wallet_tests.cpp#L729 to fail.\n\nBut I previously posted a version of that test which works with this PR in 25651aad58b1f6e543f1ad565d821de46268e724 ([branch](https://github.com/ryanofsky/bitcoin/commits/review.16426.5-edit)) in https://github.com/b",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621878031,621878031,
ryanofsky,2020-04-30 14:36:11,"Rebased 49ecec42ea81e9cbf3970416ead79e18863dea87 -> c524664df16057763eaf2e5805af9bf8975ac3f8 ([`pr/rev.1`](https://github.com/ryanofsky/bitcoin/commits/pr/rev.1) -> [`pr/rev.2`](https://github.com/ryanofsky/bitcoin/commits/pr/rev.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/rev.1-rebase..pr/rev.2)). No conflicts and no changes other than adding back getBlockHash assert to resolve ",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621893911,621893911,
MarcoFalke,2020-04-30 14:39:50,Thanks @ryanofsky ,https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-621896030,621896030,
ariard,2020-04-30 19:03:38,"Whaao thanks @ryanofsky for rebase! Took your branch at 6a72f26 while fixing @MarcoFalke 's https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417374233.\n\n",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622043477,622043477,
MarcoFalke,2020-04-30 22:43:22,"re-ACK 6a72f26968 🔏\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 6a72f26968 🔏\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhtVAwAprBpnjBnEpN+ACT69Dfo+rp5Gz1Ew6sRxvJr88Zkc/GSfZ9rCTlcrKIH\nTXRD5CR4ba8Cj9zQSF4wo/LmlqwqJlgEZnhil5qRi+Cpo",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622156632,622156632,
fjahr,2020-04-30 22:58:16,"re-ACK 6a72f26968cf931c985d8d4797b6264274cabd06\n\nReviewed latest changes, built and ran tests locally.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622162463,622162463,
ariard,2020-04-30 23:08:36,"There is a stale test on some disk I/O issue, other are valid. If you can relaunch.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622166085,622166085,
jonatack,2020-05-01 13:00:07,"Congrats on the merge @ariard! Sorry, I was still reviewing the BIP324 PR.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622378297,622378297,
MarcoFalke,2020-05-01 13:23:16,"Review still welcome :) \n\nThis had three explicit ACKs, one implicit re-ACK and a bunch of Concept ACKs. So beside being ready for merge, and also in light of the rebase hell this went through in the past, with the risk of (silent) merge conflicts putting it back in there, I went ahead and merged it.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622386121,622386121,
ryanofsky,2020-05-01 13:46:36,"> Review still welcome :)\n\nTesting is useful too because all the wallet code that was originally written assuming cs_main was locked and state couldn't change in the background is now in an a more asynchronous world.\n\nI'm also still curious about @promag's comment in https://github.com/bitcoin/bitcoin/pull/16426#pullrequestreview-400824121 and possible effects on the GUI. (Unclear if the c",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622395135,622395135,
jonatack,2020-05-01 19:54:02,"All good, I agree!",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-622538885,622538885,
promag,2020-05-03 23:59:31,"> I'm also still curious about @promag's comment in #16426 (review) and possible effects on the GUI.\n\n@ryanofsky missed this, AFAICT this doesn't add new issues to the GUI.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-623205314,623205314,
hebasto,2020-09-19 21:25:10,"FWIW, this PR causes the issue #19049.",https://github.com/bitcoin/bitcoin/pull/16426#issuecomment-695357573,695357573,
ryanofsky,2019-11-05 18:18:14,"Instead of adding an `interfaces::Chain::checkFinalTx` method, it might be better to call [`IsFinalTx`](https://github.com/bitcoin/bitcoin/blob/50591f6ec61b802cf4193cdbefcc85ad75716e8d/src/consensus/tx_verify.cpp#L17-L28) directly with the wallet's height and time, avoiding going through [`CheckFinalTx`](https://github.com/bitcoin/bitcoin/blob/50591f6ec61b802cf4193cdbefcc85ad75716e8d/src/validatio",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r342719832,342719832,src/wallet/wallet.cpp
ryanofsky,2019-12-02 21:31:03,Why use chain height instead of wallet height here and other places? Anywhere the wallet is locked and the chain isn't locked it would seem safer to use the wallet height.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r352868751,352868751,src/wallet/rpcdump.cpp
ariard,2019-12-03 19:13:01,"I think I can switch for the one in `CreateTransaction`, all left are tied to the rescan logic which doesn't call `BlockConnected` and so doesn't update `m_last_block_processed` accurately. I can rework a bit the rescan logic to make it work on m_last_block_processed_height but I felt it was a bit of scope and an increased burden for reviewers.\n\nAs you know I plan to rework the rescan logic af",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r353369610,353369610,src/wallet/rpcdump.cpp
ryanofsky,2019-12-03 19:27:13,"Thanks, chain height seems fine for rescan logic, and is what I'd expect there. I think the other places should use wallet height if there isn't an explicit reason not to.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r353376692,353376692,src/wallet/rpcdump.cpp
ariard,2019-12-03 19:57:05,"Corrected on 24f40fc, there was only one occurrence in `CreateTransaction`. All others are tied to rescan logic, including ones in `rpcdump`/`rpcwallet`.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r353391359,353391359,src/wallet/rpcdump.cpp
promag,2019-12-08 23:29:58,"b844282ba6539954e6ad9ba899497e28fed60d91\n\nIMO drop this comment, or adjust and move to L3412.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r355223947,355223947,src/wallet/wallet.cpp
promag,2019-12-08 23:30:44,"b844282ba6539954e6ad9ba899497e28fed60d91\n\nnit, const?",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r355223993,355223993,src/wallet/wallet.h
promag,2019-12-08 23:31:37,"b844282ba6539954e6ad9ba899497e28fed60d91\n\nnit, since this line is no longer different add braces?",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r355224044,355224044,src/wallet/wallet.cpp
promag,2019-12-08 23:36:40,"e64f0909c66e39896c1e41df77576cccc3001088\n\nnit, I'm aware this goes away later in 6b4d68ec25f024f009efc79b99816fa9ff6d89de but maybe the `interfaces::Chain::Lock& locked_chain` arg should be dropped later instead - so this commit would keep `locked_chain` and just adde `block_height`.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r355224375,355224375,src/wallet/wallet.cpp
promag,2019-12-09 00:17:34,"3773b4159c37db993b9bb7c3f5d7dd7a51a39b09\n\nIs this going to change in a follow up? Maybe add a comment explaining this lock?",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r355227118,355227118,src/interfaces/chain.cpp
ariard,2019-12-10 23:38:52,Is this a style requirement? IMO don't find code easier to read doing so.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r356336742,356336742,src/wallet/wallet.cpp
ariard,2019-12-10 23:42:15,"Going to let it like this, one of both commits have to clean it anyway unless adding a temporary one line is really gross..",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r356337755,356337755,src/wallet/wallet.cpp
ariard,2019-12-10 23:44:24,"Adding a comment only for this method would seem obscure compare to other methods for future reviewers after refactoring, that's why it's in commit message ""Lock cs_main in handleNotifications as it was relaying on its caller to do  so before"", or do you have a different opinion ?",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r356338388,356338388,src/interfaces/chain.cpp
ryanofsky,2019-12-13 17:52:49,"For getBlockHash, getBlockTime, and getBlockMedianTimePast, I don't think it safe anymore for these methods to abort when an invalid height is passed. Previously it was possible to guarantee that an invalid height would never be passed because `cs_main` would be held before calling these (and if an invalid height was passed it indicated a bug). But now that cs_main isn't held, there could be a rac",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357761094,357761094,src/interfaces/chain.h
ryanofsky,2019-12-13 17:58:00,"Is behavior changing here? Does this need need to be changed to continue returning `std::numeric_limits<int>::max()` in the case of an abandoned or unconfirmed transaction, or does it not matter?",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357762993,357762993,src/interfaces/wallet.cpp
ryanofsky,2019-12-13 20:56:15,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r356338388\n\n> Adding a comment only for this method would seem obscure compare to other methods for future reviewers after refactoring\n\nI think this lock is a little different than the locks in the other Chain methods because it is not obvious why locking is needed for something that appears to just be a memory allocation. If thi",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357829493,357829493,src/interfaces/chain.cpp
ryanofsky,2019-12-13 21:18:25,"I think to avoid the race condition mentioned https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357761094, where there is a block reorg between the `CWallet::GetLastBlockHeight` and `Chain::getBlockTime` calls, it would be safer to avoid triggering asserts by getting the time by hash rather than height. You could tweak `GetLastBlock` to optionally return the block hash:\n\n```c++\nint G",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357836647,357836647,src/interfaces/wallet.cpp
ryanofsky,2019-12-16 17:12:46,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r342719832\n\n> Instead of adding an `interfaces::Chain::checkFinalTx` method, it might be better to call [`IsFinalTx`](https://github.com/bitcoin/bitcoin/blob/50591f6ec61b802cf4193cdbefcc85ad75716e8d/src/consensus/tx_verify.cpp#L17-L28)\n\n#17443 is a step in this direction (https://github.com/bitcoin/bitcoin/pull/17443#pullrequestr",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r358357704,358357704,src/wallet/wallet.cpp
ryanofsky,2019-12-17 19:40:08,"I think the `LOCK(pwallet->cs_wallet);` line below should move above this `getBlockHeight()` call. Otherwise there could be a race condition if there is a reorg and the transaction is no longer confirmed by the time AddToWallet is called below, but the wallet considers it confirmed anyway.\n\nI'm not sure if it would be a good idea, but perhaps the `CWallet::chain()` method should be annotated `",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r358990449,358990449,src/wallet/rpcdump.cpp
fjahr,2019-12-18 11:19:08,"nit: This is already asserted in `GetLastBlockHeight`, so this check could be removed",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359289852,359289852,src/interfaces/wallet.cpp
fjahr,2019-12-18 11:25:05,nit: check not needed; see above,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359292213,359292213,src/wallet/rpcwallet.cpp
fjahr,2019-12-18 11:25:13,nit: check not needed; see above,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359292259,359292259,src/wallet/rpcwallet.cpp
fjahr,2019-12-18 12:04:16,"nit: `tip_height` checks not needed here, see above",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359307787,359307787,src/wallet/rpcdump.cpp
ariard,2019-12-18 19:53:36,"I think it doesn't matter, and maybe even confusing to display `std::numeric_limit<int>::max()` as block height. An abandoned one will have `is_abandoned` sets to true. An unconfirmed one will have `depth_in_main_chain` sets to 0. It seems to me meaningful enough for end user but I can still do a ternary and if `hashBlock` is null set it to fallback value if you think so.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359538719,359538719,src/interfaces/wallet.cpp
ryanofsky,2019-12-18 20:09:37,"> I think it doesn't matter, and maybe even confusing to display `std::numeric_limit<int>::max()` as block height. An abandoned one will have `is_abandoned` sets to true. An unconfirmed one will have `depth_in_main_chain` sets to 0. It seems to me meaningful enough for end user but I can still do a ternary and if `hashBlock` is null set it to fallback value if you think so.\n\nI think anything t",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359545876,359545876,src/interfaces/wallet.cpp
ariard,2019-12-19 01:00:13,"Okay after thinking about this, by removing lock, we may miss block connections between end of rescan and registering with validation interface. That was the meaning of the comment I think, which is about consistency of chain viewed by the wallet. To avoid that I moved `handleNotifications` before rescan and after `cs_wallet` lock taking. That's way block connections notifications are going to be ",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359643234,359643234,src/interfaces/chain.cpp
ariard,2019-12-19 01:05:21,"You're right, even if you need bad-timed reorgs to trigger them. After thinking about this, I picked the option to return `Optional<>` because that's one giving us more control. Throwing exception don't fit everywhere where an absent block isn't fatal. Return boolean would mean to pass pointer to values which is a bit different than other interface methods (like `getHeight`). \n\nOn dropping the",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359644487,359644487,src/interfaces/chain.h
ariard,2019-12-19 01:08:18,"Thanks, I've modified it, but didn't add `EXCLUSIVE_LOCKS_REQUIRED` to the `CWallet::chain()` as it would change lock assumptions for RPC calls like `bumpfee` or `fundtransaction`..",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359645093,359645093,src/wallet/rpcdump.cpp
ariard,2019-12-19 01:10:50,"Changed it in cbd2c1a, covered with other reorg mitigations.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r359645574,359645574,src/interfaces/wallet.cpp
ryanofsky,2019-12-26 19:09:47,"""this function will abort"" comments are out of date now and could be updated\n\nJust to clarify my earlier suggestion about dropping these methods, I wasn't trying to suggest caching more block information in the wallet (though this could be nice). I was just trying to suggest looking up block information by hash instead of height, because heights aren't a stable way of identifying blocks if `cs",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r361515468,361515468,src/interfaces/chain.h
ryanofsky,2019-12-26 19:16:24,It looks like getBlockTime and getBlockMedianTimePast are still aborting instead of returning nullopt if the block isn't found. Unintended change?,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r361516436,361516436,src/interfaces/chain.cpp
ryanofsky,2019-12-26 19:22:03,"Haven't tested, but it looks like this change might cause unconfirmed transaction to sort to the bottom instead of the top:\n\nhttps://github.com/bitcoin/bitcoin/blob/1dbf3350c683f93d7fc9b861400724f6fd2b2f1d/src/qt/transactionrecord.cpp#L169-L174\n\nCould fix by updating qt code to handle block height -1, or preserving max int behavior here.\n",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r361517278,361517278,src/interfaces/wallet.cpp
ariard,2020-01-04 00:09:20,"Ooops, my bad, thanks should be corrected on latest tip.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r362999187,362999187,src/interfaces/chain.cpp
ariard,2020-01-04 00:12:56,"Back to `result.block_height = wtx.m_confirm.block_height > 0 ? wtx.m_confirm.block_height std::numeric_limits<int>::max();`\n\nShould avoid to break qt code, without further digging into it.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r362999615,362999615,src/interfaces/wallet.cpp
ariard,2020-01-04 00:17:36,"I've been through function triplet callsites again and I think using hash instead of height wouldn't make code safer that much. \n\n`getBlockHash` is always called by rescan code which making the assumption of chain lock not being held.\n\n`getBlockTime`/`getBlockMedianTimePast`, given than block time must always be higher than parent MTP and not to be more than 2h in the future by consensus r",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363000179,363000179,src/interfaces/chain.h
kallewoof,2020-01-05 01:51:51,"If `tip_height < 0` ever occurs, `locked_chain->getBlockHash(tip_height)` above will crash. `pwallet->GetLastBlockHeight()` will also never return a value `< 0`, so not sure why the `tip_height >= 0 ?` part is necessary.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363064572,363064572,src/wallet/rpcdump.cpp
kallewoof,2020-01-05 01:53:21,"Behavior change as `tip_height` can now be `0` for a chain with only the genesis block, which before would give truth here but now will give false. I would just remove the ternary part as it makes no sense anymore (I think?).",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363064606,363064606,src/wallet/rpcdump.cpp
kallewoof,2020-01-05 01:59:39,"Slightly prefer the two line version here:\n```C++\nint lastheight = tip_height + 1 - target_confirms;\nuint256 lastblock = lastheight >= 0 ? locked_chain->getBlockHash(lastheight) : uint256();\n```",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363064790,363064790,src/wallet/rpcwallet.cpp
kallewoof,2020-01-05 02:14:29,"Yes, it is a style requirement. Same line or add `{}`.\n\nFrom https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\n> If an `if` only has a single-statement `then`-clause, it can appear on the same line as the `if`, without braces. In every other case, braces are required, and the `then` and `else` clauses must appear correctly indented on a new line.\n",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363065195,363065195,src/wallet/wallet.cpp
promag,2020-01-05 23:43:14,Move this up and remove the lock in L2922.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r363125902,363125902,src/wallet/rpcwallet.cpp
ariard,2020-01-08 05:30:47,You mean the main wallet lock just after ? I think some other wallet locks can also be removed in other places and that would be better to do it in a follow-up PR with dedicated thinking.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r364069290,364069290,src/wallet/rpcwallet.cpp
jnewbery,2020-01-14 23:09:01,s/guesVerificationProgress/guessVerificationProgress,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r366620870,366620870,src/interfaces/chain.h
jnewbery,2020-01-14 23:11:39,S/Acquire the locks/Acquire the wallet lock,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r366621805,366621805,src/wallet/wallet.cpp
jnewbery,2020-01-14 23:24:22,"This comment is a bit difficult to parse. My suggested wording:\n\n> Register wallet with validationinterface. We do this before rescan so there isn't a window between the end of the rescan and subscribing to the validation interface where the wallet could miss block connections.\n> \n> Because the wallet lock is held, block connection notifications will be queued in the validation interface u",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r366625752,366625752,src/wallet/wallet.cpp
ryanofsky,2020-01-15 22:29:34,"> It's better to avoid adding code comments which say what you want to do in future work.\n\nI kind of have the opposite reaction, but maybe a compromise would be to phrase it more like ""here is a limitation of the current code, and how it could be overcome"" instead of ""this is temporary and will be fixed later""\n\n",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r367141600,367141600,src/wallet/wallet.cpp
ryanofsky,2020-02-05 20:58:29,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote #17954 takes a different approach, returning the actual block time of the last wallet block processed instead of trying to call `locked_chain->getBlockTime` which could return a different block time or even assert false if the height is too big.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375503980,375503980,src/interfaces/wallet.cpp
ryanofsky,2020-02-05 21:02:01,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote #17954 takes a different approach, using block time of the last wallet block processed, which should give a more correct rescan time",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375505616,375505616,src/wallet/rpcdump.cpp
ryanofsky,2020-02-05 21:05:59,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote #17954 takes a different approach, using block hash and time of the last wallet block processed, which gives more correct information and avoids possibility of getBlockHash and getBlockTime asserting false",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375507428,375507428,src/wallet/rpcdump.cpp
ryanofsky,2020-02-05 21:10:02,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote #17954 takes a different approach, using block hash and time of the last wallet block processed, which should choose a better rescan time and avoid possibility of getBlockMedianTimePast asserting false",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375509194,375509194,src/wallet/rpcdump.cpp
ryanofsky,2020-02-05 21:17:12,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote: #17954 takes a different approach here, setting lastblock to the ancestor block of the last wallet block processed, which should be more correct and avoid the possibility of getBlockHash asserting false",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375512368,375512368,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-05 21:21:41,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote: #17954 takes a different approach here, using the height of the last wallet block processed, which gives better error feedback if the wallet sync is behind and avoids the possibility of getBlockHash asserting false below",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375514397,375514397,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-05 21:27:43,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote: #17954 is pretty similar but adds SetLastBlockProcessed in slightly different places and uses `WITH_LOCK` shorthand",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375517384,375517384,src/wallet/test/wallet_tests.cpp
ryanofsky,2020-02-05 21:36:04,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote: #17954 takes a different approach here, using the last wallet processed height as the tip height which I think makes the log statement more technically correct (even though it's kind of a weird number to print since the eventual number of blocks scanned could be different).",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375521230,375521230,src/wallet/wallet.cpp
ryanofsky,2020-02-05 21:48:08,"In commit ""Move getHeight from Chain::Lock interface to simple Chain"" (45703bee7e368f4d32676b8b22541c9fdf962181):\n\nNote: #17954 takes a different approach here, using the block time of the last wallet processed block, instead of calling getBlockTime with an out of sync height number which potentially return a strange value or assert false",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375526935,375526935,src/wallet/wallet.cpp
ryanofsky,2020-02-05 21:54:52,"In commit ""Move getBlockHeight from Chain::Lock interface to simple Chain"" (4ac9330ad5d61e63983e2cf749e365389cef15c9)\n\nNote: #17954 takes a slightly different approach and is a little more strict, raising an error if merkle block is not an ancestor of the wallet last processed block (even if it is an ancestor of the node tip)",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r375530001,375530001,src/wallet/rpcdump.cpp
ryanofsky,2020-02-06 19:54:31,"In commit ""Move getBlockHeight from Chain::Lock interface to simple Chain"" (4ac9330ad5d61e63983e2cf749e365389cef15c9)\n\nThere doesn't seem to be anything here excluding conflicted transactions now that getBlockHeight is called. Also it seems like getBlockTime call below could assert false if the wallet is behind sync and height is out of bounds. #17954 takes a different approach here just stick",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376048912,376048912,src/wallet/wallet.cpp
ryanofsky,2020-02-06 19:58:11,"In commit ""Move getBlockHash from Chain::Lock interface to simple Chain"" (51addd56eccda4dd91843920ae7a929af4ba8d60)\n\nWould prefer not to have to add this method. It just seems inherently racy to be looking up a block based on height with no lock held. #17954 avoids the need to add this by changing more wallet code to use hashes instead of heights",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376050681,376050681,src/interfaces/chain.h
ryanofsky,2020-02-06 20:01:15,"In commit ""Move getBlockHash from Chain::Lock interface to simple Chain"" (51addd56eccda4dd91843920ae7a929af4ba8d60)\n\nCould write `block_hash->` instead of `(*block_hash).` #17954 also takes a different approach of using wallet last processed block hash, which I think is more consistent",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376052137,376052137,src/wallet/rpcdump.cpp
ryanofsky,2020-02-06 20:05:52,"In commit ""Move getBlockHash from Chain::Lock interface to simple Chain"" (51addd56eccda4dd91843920ae7a929af4ba8d60)\n\nI don't think this is going to do the right thing after Chain::Lock is removed from the code. This is going to return last black hash relative to the node tip, which can vary while this code is running, instead of relative to the wallet last block processed tip, which should be ",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376054419,376054419,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-06 20:07:50,"In commit ""Move getBlockHash from Chain::Lock interface to simple Chain"" (51addd56eccda4dd91843920ae7a929af4ba8d60)\n\nIMO would be better to just continuing using the height value passed, rather than throwing an error if the node tip changes in the background. Implementing this actually makes things simpler since it doesn't require these extra checks. This is done in #17954",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376055297,376055297,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-06 20:39:44,"In commit ""Move getBlockHash from Chain::Lock interface to simple Chain"" (51addd56eccda4dd91843920ae7a929af4ba8d60)\n\nIt's not right to completely stop scanning the entire chain just because the tip block happened to be reorged away, and returning success as if the scan completed. I'm pretty sure rescan code is already somewhat broken and returning success in cases where it should return failur",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376069677,376069677,src/wallet/wallet.cpp
ryanofsky,2020-02-06 20:42:38,"In commit ""Move getBlockTime from Chain::Lock interface to simple Chain"" (998597bfc4ca8fd0e205f261e79509fa999565a0)\n\nAgain would prefer not to add this method, because it seems inherently racy to look up block data by height when no lock is held and the active chain can change at any time. #17954 avoids the need for this by using findBlock and looking up blocks by hash. It makes all the getBlo",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376070928,376070928,src/interfaces/chain.cpp
ryanofsky,2020-02-06 20:47:14,"In commit ""Move getBlockTime from Chain::Lock interface to simple Chain"" (998597bfc4ca8fd0e205f261e79509fa999565a0)\n\n#17954 handles this differently by looking up blocks by hash and not setting 0 times when there is a reorg",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376073059,376073059,src/wallet/wallet.cpp
ryanofsky,2020-02-06 20:53:54,"In commit ""Move getBlockMedianTimePast from Chain::Lock interface to simple Chain"" (b61867bd11bf797555c486223b6d4ce7dd290152)\n\nThis seems like it could result in rescanning the entire chain if there's a reorg between get height and get time calls. It's be really unlikely, but this just seems unnecessarily fragile. #17954 avoids this using block hashes",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376076085,376076085,src/wallet/rpcdump.cpp
ryanofsky,2020-02-06 20:58:42,"In commit ""Move multiple methods from Chain::Lock interface to simple Chain"" (afa43f9560b57ae2b45b725ba80bd68f191bd690)\n\nWould prefer not to add these methods returning only heights instead of hashes. With the locks removed in the next commit ""Remove locked_chain from CWallet"", the heights returned by these methods will not uniquely identify blocks and code will be inherently racy. #17954 does",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r376078404,376078404,src/interfaces/chain.h
ryanofsky,2020-04-21 20:15:32,"In commit ""[wallet] Remove locked_chain from CWallet, its RPCs and tests"" (ef8c6ca60767cac589d98ca57ee33179608ccda8)\n\nNote I wrote a test to detect the race condition this early `handleNotifications` call prevents: 25651aad58b1f6e543f1ad565d821de46268e724 ([branch](https://github.com/ryanofsky/bitcoin/commits/review.16426.5-edit)). Most of the test works on master so I made a separate PR #1872",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412461100,412461100,src/wallet/wallet.cpp
ryanofsky,2020-04-21 20:35:43,"In commit ""[wallet] Move getHeight from Chain::Lock interface to simple Chain"" (b4eb6aee0d259c3586894694a67928759503c823)\n\nNote: After this commit there's just a single Chain::getHeight() call remaining in CreateWalletFromFile, which #15719 then removes. I expect this PR will get merged before #15719, so just making a note about that.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412473216,412473216,src/interfaces/chain.h
ryanofsky,2020-04-21 20:49:00,"In commit ""[wallet] Move getHeight from Chain::Lock interface to simple Chain"" (b4eb6aee0d259c3586894694a67928759503c823)\n\nNote: This change should just cause a very minor change behavior. Even more minor than other num_blocks changes previously discussed. The GUI isn't using the num_blocks value for polling, just for display in transaction html status",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412481261,412481261,src/interfaces/wallet.cpp
ryanofsky,2020-04-21 20:59:41,"In commit ""[wallet] Move getBlockHeight from Chain::Lock interface to simple Chain"" (58f0deef83d82b8f132bab80999e60af6adde55f)\n\nFeel free to ignore this suggestion, but instead of adding a new getBlockHeight method, code could call the existing `Chain::findBlock` method, and the returned `FoundBlock` could have a new `inChain(bool& in_chain)` output slot. This should save a little code, maybe ",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412487403,412487403,src/interfaces/chain.h
ryanofsky,2020-04-21 21:10:31,"In commit ""[wallet] Move getBlockHash from Chain::Lock interface to simple Chain"" (c6fa030ca8a282a7906260186e93d8c8902aa5a4)\n\nre: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r362999187\n\n> Ooops, my bad, thanks should be corrected on latest tip.\n\nAssert is still present (maybe added back again)",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412493917,412493917,src/interfaces/chain.cpp
ryanofsky,2020-04-21 21:11:20,"In commit ""[wallet] Move getBlockHash from Chain::Lock interface to simple Chain"" (c6fa030ca8a282a7906260186e93d8c8902aa5a4)\n\nNote: After this commit, the only remaining Chain::getBlockHash() calls are in CreateWalletFromFile and are removed in #15719. I expect this PR will get merged before #15719, so just making a note about this.\n",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412494509,412494509,src/interfaces/chain.h
ryanofsky,2020-04-21 21:17:03,"In commit ""[wallet] Move getHeight from Chain::Lock interface to simple Chain"" (b4eb6aee0d259c3586894694a67928759503c823)\n\nThis is fine, but in this commit and other commits throughout this PR could simplify `WAIT_LOCK(cs_main, lock)` to just `LOCK(cs_main)` since `lock` object is unused",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412497779,412497779,src/interfaces/chain.cpp
ryanofsky,2020-04-21 21:25:12,"In commit ""[wallet] Move methods from Chain::Lock interface to simple Chain"" (22d0fb127e99d6cdcaa003785a7278f58038b465)\n\nNote: After this commit, the only remaining Chain::haveBlockOnDisk, findFirstBlockWithTimeAndHeight, getTipLocator, and findLocatorFork calls are in CreateWalletFromFile and are removed in #15719. I expect this PR will get merged before #15719, so just making a note about th",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412502556,412502556,src/interfaces/chain.h
ariard,2020-04-23 00:26:54,"Okay looking through #15719, this solve the issue by doing wallet rescan on the server-side so you don't need to get current tip.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413422671,413422671,src/interfaces/chain.h
ariard,2020-04-23 00:29:11,"`m_last_block_processed_height` is already initialized at `-1`, so behavior change is in case wallet isn't at tip right ? If yes, it should be more accurate.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413423393,413423393,src/interfaces/wallet.cpp
ariard,2020-04-23 00:36:34,"Corrected, effectively that's a rebase error. It's still present on master but removing `locked_chain` means you may have a reorg while calling `getBlockHash` in wallet creation rescan.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413425853,413425853,src/interfaces/chain.cpp
ariard,2020-04-23 00:38:57,"Yes I have also #17484, #17443 which remove more interface methods to skim in after.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413426579,413426579,src/interfaces/chain.h
ariard,2020-04-23 00:45:52,"Right, only difference between them is what is logged for debug, attributing a name for the lock for `WAIT_LOCK(cs_main, lock)`? They both declare `DebugLock<decltype>`. Updating",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413428872,413428872,src/interfaces/chain.cpp
ariard,2020-04-23 00:58:31,"Okay going to let it as it is, given it would need an extension of FoundBlock, and this being gauged by other reviewers. Let's keep diff straight.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r413433156,413433156,src/interfaces/chain.h
kallewoof,2020-04-28 04:59:28,"This is added here and then removed 2 commits later, and looks like a rebase error. I would love to have a comment pointing out that this is temporary to fix tests in between commits (assuming that's what it is). If you end up rebasing, adding would be great.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r416327356,416327356,src/wallet/test/wallet_tests.cpp
kallewoof,2020-04-28 05:08:45,This typo is still present in current code.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r416330331,416330331,src/interfaces/chain.h
ariard,2020-04-28 06:23:46,"Yeah was a rebase error due to lock being added in between in another PR. Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r416358377,416358377,src/wallet/test/wallet_tests.cpp
MarcoFalke,2020-04-29 14:37:42,"why remove the assert and make it undefined behavior?\n\n27b1af965e",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417366808,417366808,src/interfaces/chain.cpp
MarcoFalke,2020-04-29 14:46:48,Why is this needed? 7c73c4888f,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417374233,417374233,src/wallet/test/wallet_tests.cpp
MarcoFalke,2020-04-29 14:49:12,what is the risk of this getting out-of-sync with `result.block_height` or other members like `result.is_trusted`? 9229faa752,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417376070,417376070,src/interfaces/wallet.cpp
ryanofsky,2020-04-29 18:05:20,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417366808\n\n> why remove the assert and make it undefined behavior?\n> \n> [27b1af9](https://github.com/bitcoin/bitcoin/commit/27b1af965ed9272496787663ea2869f05c2e5342)\n\nI think it came from a suggestion I made https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412493917 that wasn't clear  about a desire not to crash :sm",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417510374,417510374,src/interfaces/chain.cpp
ryanofsky,2020-04-29 18:05:26,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417376070\n\n> what is the risk of this getting out-of-sync with `result.block_height` or other members like `result.is_trusted`? [9229faa](https://github.com/bitcoin/bitcoin/commit/9229faa752cdd7bc778a67a638effb273ad7de19)\n\nI think only risk is gui briefly displaying transaction as final in the transaction HTML description before",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417510422,417510422,src/interfaces/wallet.cpp
ryanofsky,2020-04-29 18:06:48,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417374233\n\n> Why is this needed? [7c73c48](https://github.com/bitcoin/bitcoin/commit/7c73c4888f5c4c3f24a180f2841429318463db7d)\n\nIt does seem not to be needed anymore. Test passes for me with it commented out.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417511169,417511169,src/wallet/test/wallet_tests.cpp
MarcoFalke,2020-04-29 19:22:48,"> But this is only called one place where it's extremely unlikely to trigger\n\nSounds like an excellent use-case for `assert` instead of extremely unlikely undefined behavior. Especially given that the assert was there in the fist place.\n\nI don't see why removing the assert can simply wait until #15719 ",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417555069,417555069,src/interfaces/chain.cpp
jonatack,2020-04-29 19:32:01,Agree with @MarcoFalke here.,https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417560272,417560272,src/interfaces/chain.cpp
ryanofsky,2020-04-29 20:15:41,"re: https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417555069\n\n> I don't see why removing the assert can simply wait until #15719\n\nOf course. My suggestion was never to remove the assert by segfaulting instead. Originally the suggestion was to return Optional https://github.com/bitcoin/bitcoin/pull/16426#discussion_r357761094. Just pointing out what's done here isn't too importan",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r417584250,417584250,src/interfaces/chain.cpp
MarcoFalke,2020-04-30 14:39:32,"Oh, I wasn't aware this is only used for the gui",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r418060885,418060885,src/interfaces/wallet.cpp
ariard,2020-04-30 18:28:06,"By removing `cs_main` lock taking you may have now a block nullptr in the case where between `getHeight`/`findFirstBlockWithTimeAndHeight` and `getBlockHash` calls you have a thread taking `cs_main` lock, a reorg happening while at same time wallet loading. It's really unlikely but glad #15719 is cleaning this as a follow-up.",https://github.com/bitcoin/bitcoin/pull/16426#discussion_r418206922,418206922,src/interfaces/chain.cpp
