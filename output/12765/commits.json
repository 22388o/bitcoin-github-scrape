[
  {
    "sha": "63594c32e9619c41e4a46b7eaa7a6196737f78cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzU5NGMzMmU5NjE5YzQxZTRhNDZiN2VhYTdhNjE5NjczN2Y3OGNi",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-03-23T11:23:48Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-31T00:03:51Z"
      },
      "message": "Store the current config file at read time\n\nAnd return it from GetConfigFile if set.\n\nThis maintains accuracy in the context of datadirectory changes.\n\nNote this drops the argument GetConfigFile, which is consistent\nwith other ArgsManager methods which read their own configuration\nvariable, e.g. GetDebugLogPath.",
      "tree": {
        "sha": "0cd0ee7c793b065ff8a4e64eee0b4f12344f92a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cd0ee7c793b065ff8a4e64eee0b4f12344f92a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63594c32e9619c41e4a46b7eaa7a6196737f78cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlsPO+cACgkQTYykuhgE\nCQZ1bhAAk0nfo6iWcf75j2NSG7n7sDGXJBdL/GaLz6S3saYoMzSLuSPpd21NCAyJ\nEoHX0CKA2p585v5DWtWNBe4E4dBVpjAs/CWOXlwg/+F4k2pCDkLgT/9/RyNM1DEz\nay1WW+Jmmgwi7LoCnyULc4FY31cP2vyNquKxCxaKBghlPmKVMDYQDgd0Vr7N8PAk\nLgzHZZTuJI74Ao+h8pgb+iDVmFA6IsueHypMM7f65lvZAKj5nhAedbTo6d2S+RfR\nu2vgOpE/c9DvAlmwyns6Fib7jTNu6sGh5GJnPLeHJ8oSmzLxx2XpdMISjs5iVZVE\nMUu03QJnaSxFaoCr7n7dFLbV0BeEYEylDxUqylxqKY+ODLzX4YoctWxweQV0f5e+\ngE/DmlFcy10YykHz9nzlMZu8MoldPdJePSnBjabJ1o6Hf8VEsJlaMm2UM3SJ2umc\ndK2BgYBgJWtLEhhkQRnvFK46ceS52Y7eS1xyFdxwdgcEWbtckpmvxf6N8uBCAkYi\naRk8pHCh3lc4byO20TbXhli0n9jlv+Q6Und+9GKGkiuPODlwx2z5rwc+nOj6Km4w\nLE4LnVfclSN0z7WKrO9TQHf3L0iLCDzruY0iMtJEPzB8NGpTUwHph1i5pRBAe/v8\nrmewJNtH2800o3ib5fGRs7iRAvQLF9PriYpN2P8i/shuy27zAW0=\n=y3d8\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cd0ee7c793b065ff8a4e64eee0b4f12344f92a8\nparent 472fe8a2ce9f08f0311e4a04eef996eba19ff985\nauthor Ben Woosley <ben.woosley@gmail.com> 1521804228 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1527725031 -0700\n\nStore the current config file at read time\n\nAnd return it from GetConfigFile if set.\n\nThis maintains accuracy in the context of datadirectory changes.\n\nNote this drops the argument GetConfigFile, which is consistent\nwith other ArgsManager methods which read their own configuration\nvariable, e.g. GetDebugLogPath.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63594c32e9619c41e4a46b7eaa7a6196737f78cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63594c32e9619c41e4a46b7eaa7a6196737f78cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63594c32e9619c41e4a46b7eaa7a6196737f78cb/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "472fe8a2ce9f08f0311e4a04eef996eba19ff985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/472fe8a2ce9f08f0311e4a04eef996eba19ff985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/472fe8a2ce9f08f0311e4a04eef996eba19ff985"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 89,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4515a88a20bb4fc6046bf1a8922acf8f6cc72a7f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -16,7 +16,8 @@ JSON_TEST_FILES = \\\n   test/data/tx_invalid.json \\\n   test/data/tx_valid.json\n \n-RAW_TEST_FILES =\n+RAW_TEST_FILES = \\\n+  test/data/conf.raw\n \n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n "
      },
      {
        "sha": "0028320181dd12749224fce8bd56c6fb8dcbe98f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -372,7 +372,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n                 \"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\",\n-                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n+                gArgs.GetConfigFile().string().c_str()));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");\n         }"
      },
      {
        "sha": "e0ded0619d57307edc5bc5cb0261d455af9ba195",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -1240,7 +1240,7 @@ bool AppInitMain()\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Using config file %s\\n\", gArgs.GetConfigFile().string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path."
      },
      {
        "sha": "04ffa1799861be8bf839b40fca7b6d76f47feafb",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -403,7 +403,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    boost::filesystem::path pathConfig = gArgs.GetConfigFile();\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      },
      {
        "sha": "8e08613aed4d55a81519556dcd3db46816c323c6",
        "filename": "src/test/data/conf.raw",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/test/data/conf.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/test/data/conf.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/conf.raw?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -0,0 +1,10 @@\n+##\n+## bitcoin.conf test configuration file. Lines beginning with # are comments.\n+##\n+\n+foo=\n+bar=false\n+baz=11\n+qux=eleven\n+quux=\n+noquux="
      },
      {
        "sha": "8ef77f6b91605acc49246e103dab277d1f0a804d",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -5,6 +5,7 @@\n #include <util.h>\n #include <test/test_bitcoin.h>\n \n+#include <fstream>\n #include <string>\n #include <vector>\n \n@@ -13,6 +14,11 @@\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n \n+namespace conf_tests\n+{\n+#include <test/data/conf.raw.h>\n+}\n+\n static void ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n@@ -39,6 +45,58 @@ static void SetupArgs(const std::vector<std::string>& args)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(configfile)\n+{\n+    const fs::path configPath = fs::temp_directory_path() / \"bitcoin.conf\";\n+\n+    std::ofstream file(configPath.string().c_str());\n+    file << std::string(conf_tests::conf, conf_tests::conf + sizeof(conf_tests::conf));\n+    file.close();\n+\n+    ClearDatadirCache();\n+    ResetArgs(strprintf(\"-datadir=%s\", fs::temp_directory_path().string()));\n+    BOOST_CHECK_EQUAL(gArgs.GetConfigFile(), configPath);\n+    gArgs.ReadConfigFiles();\n+\n+    // boolarg\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-bar\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-bar\", true));\n+\n+    // stringarg\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-baz\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-baz\", \"eleven\"), \"11\");\n+\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-qux\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-qux\", \"eleven\"), \"eleven\");\n+\n+    // intarg\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-baz\", 0), 11);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-qux\", 11), 0);\n+\n+    // boolargno\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-quux\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-quux\", false));\n+\n+    // command line settings override bitcoin.conf\n+    ResetArgs(strprintf(\"-nofoo -datadir=%s\", fs::temp_directory_path().string()));\n+    gArgs.ReadConfigFiles();\n+\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+\n+    // throws when the config file sets the datadir to a non-directory\n+    // note we can't set test the missing datadir via a config file itself because\n+    // we must set the datadir arg in order to access a test config file, and the\n+    // arg will override the config file setting.\n+    // We can not rely on the default config file location due to the test binary\n+    // being independently distributable.\n+    ResetArgs(strprintf(\"-datadir=%s\", (fs::path(\"test\") / \"data\" / \"nonexistent\").string()));\n+    BOOST_CHECK_THROW(gArgs.ReadConfigFiles(), std::runtime_error);\n+}\n+\n BOOST_AUTO_TEST_CASE(boolarg)\n {\n     SetupArgs({\"-foo\"});"
      },
      {
        "sha": "51897548ef0542658c5b236a1011908d84026d12",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -799,11 +799,20 @@ void ClearDatadirCache()\n     g_blocks_path_cache_net_specific = fs::path();\n }\n \n-fs::path GetConfigFile(const std::string& confPath)\n+static fs::path PathForConfigFile(const std::string& confPath)\n {\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n+fs::path ArgsManager::GetConfigFile() const\n+{\n+    if (!m_current_config_path.empty()) {\n+        return m_current_config_path;\n+    } else {\n+        return PathForConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    }\n+}\n+\n bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n@@ -838,8 +847,8 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         m_config_args.clear();\n     }\n \n-    const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n-    fs::ifstream stream(GetConfigFile(confPath));\n+    m_current_config_path = GetConfigFile();\n+    fs::ifstream stream(m_current_config_path);\n \n     // ok to not have a config file\n     if (stream.good()) {\n@@ -866,7 +875,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             for (const std::string& to_include : includeconf) {\n-                fs::ifstream include_config(GetConfigFile(to_include));\n+                fs::ifstream include_config(PathForConfigFile(to_include));\n                 if (include_config.good()) {\n                     if (!ReadConfigStream(include_config, error, ignore_invalid_keys)) {\n                         return false;"
      },
      {
        "sha": "59f30ccb8f893dba5e5fde3b6cf51cffd094bf9f",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63594c32e9619c41e4a46b7eaa7a6196737f78cb/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=63594c32e9619c41e4a46b7eaa7a6196737f78cb",
        "patch": "@@ -89,7 +89,6 @@ fs::path GetDefaultDataDir();\n const fs::path &GetBlocksDir(bool fNetSpecific = true);\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-fs::path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n fs::path GetPidFile();\n void CreatePidFile(const fs::path &path, pid_t pid);\n@@ -156,6 +155,7 @@ class ArgsManager\n     std::string m_network;\n     std::set<std::string> m_network_only_args;\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args;\n+    fs::path m_current_config_path;\n \n     bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n \n@@ -170,6 +170,8 @@ class ArgsManager\n     bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n+    fs::path GetConfigFile() const;\n+\n     /**\n      * Log warnings for options in m_section_only_args when\n      * they are specified in the default section but not overridden"
      }
    ]
  }
]