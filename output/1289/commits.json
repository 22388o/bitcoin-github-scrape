[
  {
    "sha": "ff0ee876bb66b572921087fcd3775fc2602138c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjBlZTg3NmJiNjZiNTcyOTIxMDg3ZmNkMzc3NWZjMjYwMjEzOGMy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-05-13T14:09:14Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-05-18T21:13:58Z"
      },
      "message": "change strings to Bitcoin (uppercase), where it is used as a noun and update strings to use \"Qt\" (and not qt or QT) / update initialisation of notificator to use qApp->applicationName() instead of a static string",
      "tree": {
        "sha": "8d2a7099558df03355a66c245626c9cd48172410",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d2a7099558df03355a66c245626c9cd48172410"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff0ee876bb66b572921087fcd3775fc2602138c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff0ee876bb66b572921087fcd3775fc2602138c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff0ee876bb66b572921087fcd3775fc2602138c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff0ee876bb66b572921087fcd3775fc2602138c2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d6615a54c6146728717ad0f8819f32f002613f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6615a54c6146728717ad0f8819f32f002613f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6615a54c6146728717ad0f8819f32f002613f5c"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 30,
      "deletions": 31
    },
    "files": [
      {
        "sha": "1391a13e0efdb838e2b4dccb2a5fde4954105384",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -252,7 +252,7 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-/** base58-encoded bitcoin addresses.\n+/** base58-encoded Bitcoin addresses.\n  * Public-key-hash-addresses have version 0 (or 111 testnet).\n  * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n  * Script-hash-addresses have version 5 (or 196 testnet)."
      },
      {
        "sha": "c1c58ce9353940396f2057c221a090de2a8f2f02",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -418,10 +418,10 @@ Value stop(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"stop\\n\"\n-            \"Stop bitcoin server.\");\n+            \"Stop Bitcoin server.\");\n     // Shutdown will take long enough that the response should get back\n     QueueShutdown();\n-    return \"bitcoin server stopping\";\n+    return \"Bitcoin server stopping\";\n }\n \n \n@@ -562,7 +562,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"getnewaddress [account]\\n\"\n-            \"Returns a new bitcoin address for receiving payments.  \"\n+            \"Returns a new Bitcoin address for receiving payments.  \"\n             \"If [account] is specified (recommended), it is added to the address book \"\n             \"so payments received with the address will be credited to [account].\");\n \n@@ -629,7 +629,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress <account>\\n\"\n-            \"Returns the current bitcoin address for receiving payments to this account.\");\n+            \"Returns the current Bitcoin address for receiving payments to this account.\");\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n@@ -652,7 +652,7 @@ Value setaccount(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n \n \n     string strAccount;\n@@ -682,7 +682,7 @@ Value getaccount(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n@@ -743,7 +743,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n \n     // Amount\n     int64 nAmount = AmountFromValue(params[1]);\n@@ -841,7 +841,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     CScript scriptPubKey;\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n     scriptPubKey.SetBitcoinAddress(address);\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n@@ -1067,7 +1067,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n     int64 nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n@@ -1128,7 +1128,7 @@ Value sendmany(const Array& params, bool fHelp)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+s.name_);\n+            throw JSONRPCError(-5, string(\"Invalid Bitcoin address:\")+s.name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);\n@@ -1172,7 +1172,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     {\n         string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n             \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n-            \"each key is a bitcoin address or hex-encoded public key\\n\"\n+            \"each key is a Bitcoin address or hex-encoded public key\\n\"\n             \"If [account] is specified, assign address to [account].\";\n         throw runtime_error(msg);\n     }\n@@ -1196,7 +1196,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     {\n         const std::string& ks = keys[i].get_str();\n \n-        // Case 1: bitcoin address and we have full public key:\n+        // Case 1: Bitcoin address and we have full public key:\n         CBitcoinAddress address(ks);\n         if (address.IsValid())\n         {\n@@ -1933,7 +1933,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys.  So:\n     QueueShutdown();\n-    return \"wallet encrypted; bitcoin server stopping, restart to run with encrypted wallet\";\n+    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n "
      },
      {
        "sha": "829600a4fd22d926706b8920de7d83a2af48c335",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -162,7 +162,6 @@ bool static InitError(const std::string &str)\n {\n     ThreadSafeMessageBox(str, _(\"Bitcoin\"), wxOK | wxMODAL);\n     return false;\n-\n }\n \n bool static InitWarning(const std::string &str)\n@@ -352,7 +351,7 @@ bool AppInit2()\n         return false;\n     }\n \n-    // Make sure only a single bitcoin process is using the data directory.\n+    // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n@@ -365,7 +364,7 @@ bool AppInit2()\n     // Load data files\n     //\n     if (fDaemon)\n-        fprintf(stdout, \"bitcoin server starting\\n\");\n+        fprintf(stdout, \"Bitcoin server starting\\n\");\n     int64 nStart;\n \n     InitMessage(_(\"Loading addresses...\"));\n@@ -498,7 +497,7 @@ bool AppInit2()\n     // Add wallet transactions that aren't already in a block to mapTransactions\n     pwalletMain->ReacceptWalletTransactions();\n \n-    // Note: Bitcoin-QT stores several settings in the wallet, so we want\n+    // Note: Bitcoin-Qt stores several settings in the wallet, so we want\n     // to load the wallet BEFORE parsing command-line arguments, so\n     // the command-line/bitcoin.conf settings override GUI setting.\n "
      },
      {
        "sha": "7070e59444b4703a849fa221ff696c6a7305a204",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -207,7 +207,7 @@ void BitcoinGUI::createActions()\n     tabGroup->addAction(receiveCoinsAction);\n \n     sendCoinsAction = new QAction(QIcon(\":/icons/send\"), tr(\"&Send coins\"), this);\n-    sendCoinsAction->setToolTip(tr(\"Send coins to a bitcoin address\"));\n+    sendCoinsAction->setToolTip(tr(\"Send coins to a Bitcoin address\"));\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n@@ -243,7 +243,7 @@ void BitcoinGUI::createActions()\n     aboutQtAction->setToolTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n-    optionsAction->setToolTip(tr(\"Modify configuration options for bitcoin\"));\n+    optionsAction->setToolTip(tr(\"Modify configuration options for Bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n     toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"Show/Hide &Bitcoin\"), this);\n     toggleHideAction->setToolTip(tr(\"Show or hide the Bitcoin window\"));\n@@ -426,15 +426,15 @@ void BitcoinGUI::createTrayIcon()\n     trayIconMenu->addAction(quitAction);\n #endif\n \n-    notificator = new Notificator(tr(\"bitcoin-qt\"), trayIcon);\n+    notificator = new Notificator(qApp->applicationName(), trayIcon);\n }\n \n #ifndef Q_WS_MAC\n void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)\n {\n     if(reason == QSystemTrayIcon::Trigger)\n     {\n-        // Click on system tray icon triggers \"show/hide bitcoin\"\n+        // Click on system tray icon triggers \"show/hide Bitcoin\"\n         toggleHideAction->trigger();\n     }\n }"
      },
      {
        "sha": "0d88aa47cb3ae76a910903ace8cd10b94d731ce5",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -93,7 +93,7 @@ void EditAddressDialog::accept()\n             break;\n         case AddressTableModel::INVALID_ADDRESS:\n             QMessageBox::warning(this, windowTitle(),\n-                tr(\"The entered address \\\"%1\\\" is not a valid bitcoin address.\").arg(ui->addressEdit->text()),\n+                tr(\"The entered address \\\"%1\\\" is not a valid Bitcoin address.\").arg(ui->addressEdit->text()),\n                 QMessageBox::Ok, QMessageBox::Ok);\n             return;\n         case AddressTableModel::WALLET_UNLOCK_FAILURE:"
      },
      {
        "sha": "c5f9aae511053421ac97485c471b7bda8699863c",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -22,7 +22,7 @@ namespace GUIUtil\n     QString dateTimeStr(const QDateTime &datetime);\n     QString dateTimeStr(qint64 nTime);\n \n-    // Render bitcoin addresses in monospace font\n+    // Render Bitcoin addresses in monospace font\n     QFont bitcoinAddressFont();\n \n     // Set up widgets for address and amounts"
      },
      {
        "sha": "9f1c6447aef71a844e34c08455e1a644aac7c7ba",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -24,7 +24,7 @@ void OptionsModel::Init()\n     nTransactionFee = settings.value(\"nTransactionFee\").toLongLong();\n     language = settings.value(\"language\", \"\").toString();\n \n-    // These are shared with core bitcoin; we want\n+    // These are shared with core Bitcoin; we want\n     // command-line options to override the GUI settings:\n     if (settings.contains(\"fUseUPnP\"))\n         SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool());"
      },
      {
        "sha": "c0374689c6ced8adfcea60b5cccd63193e63e07c",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -3,8 +3,8 @@\n \n #include <QAbstractListModel>\n \n-/** Interface from QT to configuration data structure for bitcoin client.\n-   To QT, the options are presented as a list with the different options\n+/** Interface from Qt to configuration data structure for Bitcoin client.\n+   To Qt, the options are presented as a list with the different options\n    laid out vertically.\n    This can be changed to a tree once the settings become sufficiently\n    complex."
      },
      {
        "sha": "c64ea5710c8e0ef89fea616e927774415b99f06c",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -8,7 +8,7 @@ namespace Ui {\n }\n class ClientModel;\n \n-/** Local bitcoin RPC console. */\n+/** Local Bitcoin RPC console. */\n class RPCConsole: public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "1119aeaf75271b9ea8682ad1b9a94ebf00fc767b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -88,7 +88,7 @@ Value dumpprivkey(const Array& params, bool fHelp)\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n-        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n     CSecret vchSecret;\n     bool fCompressed;\n     if (!pwalletMain->GetSecret(address, vchSecret, fCompressed))"
      },
      {
        "sha": "2bfda61675b40023e723e832674d4bfecb418540",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n {\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 0), \"01/01/70 00:00:00\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 0x7FFFFFFF), \"01/19/38 03:14:07\");\n-    // Formats used within bitcoin\n+    // Formats used within Bitcoin\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M:%S\", 1317425777), \"09/30/11 23:36:17\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%x %H:%M\", 1317425777), \"09/30/11 23:36\");\n }"
      },
      {
        "sha": "768f9f85ead7e2c50f1f7b6f0479c6598a419c01",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff0ee876bb66b572921087fcd3775fc2602138c2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff0ee876bb66b572921087fcd3775fc2602138c2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ff0ee876bb66b572921087fcd3775fc2602138c2",
        "patch": "@@ -1251,7 +1251,7 @@ string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64\n     if (nValue + nTransactionFee > GetBalance())\n         return _(\"Insufficient funds\");\n \n-    // Parse bitcoin address\n+    // Parse Bitcoin address\n     CScript scriptPubKey;\n     scriptPubKey.SetBitcoinAddress(address);\n "
      }
    ]
  }
]