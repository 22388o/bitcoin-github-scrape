[
  {
    "sha": "778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzhjZDBkODhkOGQ2ZGQyMmQ3ZjBmYjc0MGYzY2EzZGJiMjI4MGEx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-28T10:14:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-28T10:18:09Z"
      },
      "message": "[tests] Remove getnettotals/getpeerinfo consistency test\n\nWe make no guarantees about consistency between RPC calls.",
      "tree": {
        "sha": "a46f9cc97c8927f335b0cb2ee0bc34dab26253b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a46f9cc97c8927f335b0cb2ee0bc34dab26253b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db26eeba71fb07caae8c4c8a59a80c4ebe0b5797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db26eeba71fb07caae8c4c8a59a80c4ebe0b5797",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db26eeba71fb07caae8c4c8a59a80c4ebe0b5797"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 9,
      "deletions": 23
    },
    "files": [
      {
        "sha": "034827b2b887c8b0f6ef1a7252a56ee681ae815c",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 9,
        "deletions": 23,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=778cd0d88d8d6dd22d7f0fb740f3ca3dbb2280a1",
        "patch": "@@ -104,32 +104,18 @@ def test_getpeerinfo(self):\n \n     def test_getnettotals(self):\n         self.log.info(\"Test getnettotals\")\n-        # getnettotals totalbytesrecv and totalbytessent should be\n-        # consistent with getpeerinfo. Since the RPC calls are not atomic,\n-        # and messages might have been recvd or sent between RPC calls, call\n-        # getnettotals before and after and verify that the returned values\n-        # from getpeerinfo are bounded by those values.\n+        # Test getnettotals and getpeerinfo by doing a ping. The bytes\n+        # sent/received should increase by at least the size of one ping (32\n+        # bytes) and one pong (32 bytes).\n         net_totals_before = self.nodes[0].getnettotals()\n-        peer_info = self.nodes[0].getpeerinfo()\n-        net_totals_after = self.nodes[0].getnettotals()\n-        assert_equal(len(peer_info), 2)\n-        peers_recv = sum([peer['bytesrecv'] for peer in peer_info])\n-        peers_sent = sum([peer['bytessent'] for peer in peer_info])\n-\n-        assert_greater_than_or_equal(peers_recv, net_totals_before['totalbytesrecv'])\n-        assert_greater_than_or_equal(net_totals_after['totalbytesrecv'], peers_recv)\n-        assert_greater_than_or_equal(peers_sent, net_totals_before['totalbytessent'])\n-        assert_greater_than_or_equal(net_totals_after['totalbytessent'], peers_sent)\n-\n-        # test getnettotals and getpeerinfo by doing a ping\n-        # the bytes sent/received should change\n-        # note ping and pong are 32 bytes each\n+        peer_info_before = self.nodes[0].getpeerinfo()\n+\n         self.nodes[0].ping()\n-        self.wait_until(lambda: (self.nodes[0].getnettotals()['totalbytessent'] >= net_totals_after['totalbytessent'] + 32 * 2), timeout=1)\n-        self.wait_until(lambda: (self.nodes[0].getnettotals()['totalbytesrecv'] >= net_totals_after['totalbytesrecv'] + 32 * 2), timeout=1)\n+        self.wait_until(lambda: (self.nodes[0].getnettotals()['totalbytessent'] >= net_totals_before['totalbytessent'] + 32 * 2), timeout=1)\n+        self.wait_until(lambda: (self.nodes[0].getnettotals()['totalbytesrecv'] >= net_totals_before['totalbytesrecv'] + 32 * 2), timeout=1)\n \n-        peer_info_after_ping = self.nodes[0].getpeerinfo()\n-        for before, after in zip(peer_info, peer_info_after_ping):\n+        peer_info_after = self.nodes[0].getpeerinfo()\n+        for before, after in zip(peer_info_before, peer_info_after):\n             assert_greater_than_or_equal(after['bytesrecv_per_msg'].get('pong', 0), before['bytesrecv_per_msg'].get('pong', 0) + 32)\n             assert_greater_than_or_equal(after['bytessent_per_msg'].get('ping', 0), before['bytessent_per_msg'].get('ping', 0) + 32)\n "
      }
    ]
  }
]