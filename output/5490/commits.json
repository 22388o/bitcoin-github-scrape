[
  {
    "sha": "5d3064bc44e0b608a428e230f384bd3f846dedca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDMwNjRiYzQ0ZTBiNjA4YTQyOGUyMzBmMzg0YmQzZjg0NmRlZGNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:05:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:14:47Z"
      },
      "message": "Temporarily add SetNull/IsNull/GetCheapHash to base_uint\n\nAlso add a stub for arith_uint256 and its conversion functions,\nfor now completely based on uint256.\n\nEases step-by-step migration to blob.",
      "tree": {
        "sha": "ac2c58dcc7e4d4a49b8a8c8871cd4c570a79c4b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac2c58dcc7e4d4a49b8a8c8871cd4c570a79c4b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d3064bc44e0b608a428e230f384bd3f846dedca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3064bc44e0b608a428e230f384bd3f846dedca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3064bc44e0b608a428e230f384bd3f846dedca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3064bc44e0b608a428e230f384bd3f846dedca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a043facf5a8b75eb15547ed788296b6c3df2c586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a043facf5a8b75eb15547ed788296b6c3df2c586",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a043facf5a8b75eb15547ed788296b6c3df2c586"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bb384ca8aedd3369b435d0109064cf77ddf4a70",
        "filename": "src/arith_uint256.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d3064bc44e0b608a428e230f384bd3f846dedca/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d3064bc44e0b608a428e230f384bd3f846dedca/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=5d3064bc44e0b608a428e230f384bd3f846dedca",
        "patch": "@@ -0,0 +1,19 @@\n+#ifndef BITCOIN_ARITH_UINT256_H\n+#define BITCOIN_ARITH_UINT256_H\n+\n+// Temporary for migration to opaque uint160/256\n+#include \"uint256.h\"\n+\n+class arith_uint256 : public uint256 {\n+public:\n+    arith_uint256() {}\n+    arith_uint256(const base_uint<256>& b) : uint256(b) {}\n+    arith_uint256(uint64_t b) : uint256(b) {}\n+    explicit arith_uint256(const std::string& str) : uint256(str) {}\n+    explicit arith_uint256(const std::vector<unsigned char>& vch) : uint256(vch) {}\n+};\n+\n+#define ArithToUint256(x) (x)\n+#define UintToArith256(x) (x)\n+\n+#endif // BITCOIN_UINT256_H"
      },
      {
        "sha": "8189b27cb3c88c23f72b887c55f93394f7cbb0a1",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d3064bc44e0b608a428e230f384bd3f846dedca/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d3064bc44e0b608a428e230f384bd3f846dedca/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=5d3064bc44e0b608a428e230f384bd3f846dedca",
        "patch": "@@ -283,6 +283,23 @@ class base_uint\n     {\n         s.read((char*)pn, sizeof(pn));\n     }\n+\n+    // Temporary for migration to opaque uint160/256\n+    uint64_t GetCheapHash() const\n+    {\n+        return GetLow64();\n+    }\n+    void SetNull()\n+    {\n+        memset(pn, 0, sizeof(pn));\n+    }\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (pn[i] != 0)\n+                return false;\n+        return true;\n+    }\n };\n \n /** 160-bit unsigned big integer. */\n@@ -330,4 +347,7 @@ class uint256 : public base_uint<256> {\n     uint64_t GetHash(const uint256& salt) const;\n };\n \n+// Temporary for migration to opaque uint160/256\n+inline uint256 uint256S(const std::string &x) { return uint256(x); }\n+\n #endif // BITCOIN_UINT256_H"
      }
    ]
  },
  {
    "sha": "4f1524966a99c83db8c0c9f1ff74789253a1171e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjE1MjQ5NjZhOTljODNkYjhjMGM5ZjFmZjc0Nzg5MjUzYTExNzFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:11:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:34Z"
      },
      "message": "Replace direct use of 0 with SetNull and IsNull\n\nReplace x=0 with .SetNull(),\nx==0 with IsNull(), x!=0 with !IsNull().\nReplace uses of uint256(0) with uint256().",
      "tree": {
        "sha": "9107f58fdd2c91af6c82e9b2e09a8af36c3d6ca6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9107f58fdd2c91af6c82e9b2e09a8af36c3d6ca6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f1524966a99c83db8c0c9f1ff74789253a1171e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f1524966a99c83db8c0c9f1ff74789253a1171e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f1524966a99c83db8c0c9f1ff74789253a1171e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f1524966a99c83db8c0c9f1ff74789253a1171e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d3064bc44e0b608a428e230f384bd3f846dedca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3064bc44e0b608a428e230f384bd3f846dedca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3064bc44e0b608a428e230f384bd3f846dedca"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 68,
      "deletions": 68
    },
    "files": [
      {
        "sha": "f095551c48e93125b1a652feab813e05527c2105",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -315,7 +315,7 @@ static bool findSighashFlags(int& flags, const string& flagStr)\n uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n {\n     if (!o.count(strKey))\n-        return 0;\n+        return uint256();\n     return ParseHashUV(o[strKey], strKey);\n }\n \n@@ -485,7 +485,7 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n static void OutputTxJSON(const CTransaction& tx)\n {\n     UniValue entry(UniValue::VOBJ);\n-    TxToUniv(tx, 0, entry);\n+    TxToUniv(tx, uint256(), entry);\n \n     string jsonOutput = entry.write(4);\n     fprintf(stdout, \"%s\\n\", jsonOutput.c_str());"
      },
      {
        "sha": "d7741762c758b31f6222802e791e278c7a79c2ef",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -150,14 +150,14 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        nChainWork = 0;\n+        nChainWork = uint256();\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n         nSequenceId = 0;\n \n         nVersion       = 0;\n-        hashMerkleRoot = 0;\n+        hashMerkleRoot = uint256();\n         nTime          = 0;\n         nBits          = 0;\n         nNonce         = 0;\n@@ -282,11 +282,11 @@ class CDiskBlockIndex : public CBlockIndex\n     uint256 hashPrev;\n \n     CDiskBlockIndex() {\n-        hashPrev = 0;\n+        hashPrev = uint256();\n     }\n \n     explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {\n-        hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n+        hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n     }\n \n     ADD_SERIALIZE_METHODS;"
      },
      {
        "sha": "7e76a0bfa2df7ed93e775eb70c9148d559976ef2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -141,7 +141,7 @@ class CMainParams : public CChainParams {\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n         genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock = 0;\n+        genesis.hashPrevBlock.SetNull();\n         genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n         genesis.nVersion = 1;\n         genesis.nTime    = 1231006505;"
      },
      {
        "sha": "ef4f96fdeecf54010062a31800afe5fbcb1722fa",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -42,7 +42,7 @@ bool CCoins::Spend(uint32_t nPos)\n \n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n-uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n+uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n@@ -57,7 +57,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {\n@@ -128,7 +128,7 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n-    if (hashBlock == uint256(0))\n+    if (hashBlock.IsNull())\n         hashBlock = base->GetBestBlock();\n     return hashBlock;\n }"
      },
      {
        "sha": "fe2eaa08e523e1b68b1878c66f5f39320ebbfeea",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -297,7 +297,7 @@ struct CCoinsStats\n     uint256 hashSerialized;\n     CAmount nTotalAmount;\n \n-    CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n+    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n "
      },
      {
        "sha": "c3babec2fc0a1ce56492fd6fd15ceef696af0cac",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -127,7 +127,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n     }\n     entry.pushKV(\"vout\", vout);\n \n-    if (hashBlock != 0)\n+    if (!hashBlock.IsNull())\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n \n     entry.pushKV(\"hex\", EncodeHexTx(tx)); // the hex-encoded transaction. used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\"."
      },
      {
        "sha": "50ccb09213c6c1e8dba6c5a75689d34d2d329237",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -84,7 +84,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n         nonce += test_case;\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = 0;\n+        nonce = uint256();\n         if (ret) {\n             vchSig.resize(nSigLen);\n             return true;\n@@ -116,7 +116,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         uint256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n         int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = 0;\n+        nonce = uint256();\n         if (ret)\n             break;\n     } while(true);"
      },
      {
        "sha": "c392138ff38c4e3636cf4e52652f09a3239386dc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -261,7 +261,7 @@ struct CNodeState {\n         nMisbehavior = 0;\n         fShouldBan = false;\n         pindexBestKnownBlock = NULL;\n-        hashLastUnknownBlock = uint256(0);\n+        hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = NULL;\n         fSyncStarted = false;\n         nStallingSince = 0;\n@@ -349,12 +349,12 @@ void ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n-    if (state->hashLastUnknownBlock != 0) {\n+    if (!state->hashLastUnknownBlock.IsNull()) {\n         BlockMap::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n         if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == NULL || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n                 state->pindexBestKnownBlock = itOld->second;\n-            state->hashLastUnknownBlock = uint256(0);\n+            state->hashLastUnknownBlock.SetNull();\n         }\n     }\n }\n@@ -1712,7 +1712,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n-    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256(0) : pindex->pprev->GetBlockHash();\n+    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n@@ -2835,7 +2835,7 @@ boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char\n \n CBlockIndex * InsertBlockIndex(uint256 hash)\n {\n-    if (hash == 0)\n+    if (hash.IsNull())\n         return NULL;\n \n     // Return existing\n@@ -3369,7 +3369,7 @@ void static ProcessGetData(CNode* pfrom)\n                         vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n                         pfrom->PushMessage(\"inv\", vInv);\n-                        pfrom->hashContinue = 0;\n+                        pfrom->hashContinue.SetNull();\n                     }\n                 }\n             }\n@@ -3604,7 +3604,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // Use deterministic randomness to send to the same nodes for 24 hours\n                     // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n                     static uint256 hashSalt;\n-                    if (hashSalt == 0)\n+                    if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint64_t hashAddr = addr.GetHash();\n                     uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n@@ -3738,7 +3738,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex)\n             pindex = chainActive.Next(pindex);\n         int nLimit = 500;\n-        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n@@ -3954,7 +3954,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n-            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256(0));\n+            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n         }\n     }\n \n@@ -4452,7 +4452,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 nSyncStarted++;\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n-                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256(0));\n+                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n \n@@ -4483,7 +4483,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 {\n                     // 1/4 of tx invs blast to all immediately\n                     static uint256 hashSalt;\n-                    if (hashSalt == 0)\n+                    if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint256 hashRand = inv.hash ^ hashSalt;\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));"
      },
      {
        "sha": "b51b002b954f7d7225d845b3eed9735389f4ffe4",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -76,15 +76,15 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n     if (nBitsUsed >= vBits.size()) {\n         // overflowed the bits array - failure\n         fBad = true;\n-        return 0;\n+        return uint256();\n     }\n     bool fParentOfMatch = vBits[nBitsUsed++];\n     if (height==0 || !fParentOfMatch) {\n         // if at height 0, or nothing interesting below, use stored hash and do not descend\n         if (nHashUsed >= vHash.size()) {\n             // overflowed the hash array - failure\n             fBad = true;\n-            return 0;\n+            return uint256();\n         }\n         const uint256 &hash = vHash[nHashUsed++];\n         if (height==0 && fParentOfMatch) // in case of height 0, we have a matched txid\n@@ -128,16 +128,16 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n-        return 0;\n+        return uint256();\n     // check for excessively high numbers of transactions\n     if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n-        return 0;\n+        return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)\n-        return 0;\n+        return uint256();\n     // there must be at least one bit per node in the partial tree, and at least one node per hash\n     if (vBits.size() < vHash.size())\n-        return 0;\n+        return uint256();\n     // calculate height of tree\n     int nHeight = 0;\n     while (CalcTreeWidth(nHeight) > 1)\n@@ -147,12 +147,12 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n     // verify that no problems occured during the tree traversal\n     if (fBad)\n-        return 0;\n+        return uint256();\n     // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)\n     if ((nBitsUsed+7)/8 != (vBits.size()+7)/8)\n-        return 0;\n+        return uint256();\n     // verify that all hashes were consumed\n     if (nHashUsed != vHash.size())\n-        return 0;\n+        return uint256();\n     return hashMerkleRoot;\n }"
      },
      {
        "sha": "0548468714216a6784d791d953cdafb95e101c4a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -1949,7 +1949,7 @@ CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fIn\n     nRefCount = 0;\n     nSendSize = 0;\n     nSendOffset = 0;\n-    hashContinue = 0;\n+    hashContinue = uint256();\n     nStartingHeight = -1;\n     fGetAddr = false;\n     fRelayTxes = false;"
      },
      {
        "sha": "3b4a360395fbbb63caff98ef62135d98f0514cde",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -74,7 +74,7 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     if (fMutated) {\n         *fMutated = mutated;\n     }\n-    return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n+    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n }\n \n std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n@@ -96,7 +96,7 @@ std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n {\n     if (nIndex == -1)\n-        return 0;\n+        return uint256();\n     for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)"
      },
      {
        "sha": "53fcd104ad1e95212292e557fcd8b9b71725e311",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -53,8 +53,8 @@ class CBlockHeader\n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n-        hashPrevBlock = 0;\n-        hashMerkleRoot = 0;\n+        hashPrevBlock.SetNull();\n+        hashMerkleRoot.SetNull();\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;"
      },
      {
        "sha": "848d4d3e60cc24911a87baa6361aa5a23ef5320a",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -72,7 +72,7 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n     UpdateHash();"
      },
      {
        "sha": "1b5a47e0da9d7305ebdebb7b724a19067b9d7020",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -28,8 +28,8 @@ class COutPoint\n         READWRITE(FLATDATA(*this));\n     }\n \n-    void SetNull() { hash = 0; n = (uint32_t) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n+    void SetNull() { hash.SetNull(); n = (uint32_t) -1; }\n+    bool IsNull() const { return (hash.IsNull() && n == (uint32_t) -1); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {"
      },
      {
        "sha": "2dfded43bea35fbeb59ce14fbeda7b11e94a625c",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -96,7 +96,7 @@ void CAddress::Init()\n CInv::CInv()\n {\n     type = 0;\n-    hash = 0;\n+    hash.SetNull();\n }\n \n CInv::CInv(int typeIn, const uint256& hashIn)"
      },
      {
        "sha": "b0768d4f476f7c770c269c542e45f702ba804ff1",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -27,7 +27,7 @@\n class CKeyID : public uint160\n {\n public:\n-    CKeyID() : uint160(0) {}\n+    CKeyID() : uint160() {}\n     CKeyID(const uint160& in) : uint160(in) {}\n };\n "
      },
      {
        "sha": "1ee1d5291269b2966db1c4eb2a34fabf177e0f29",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -240,7 +240,7 @@ static bool rest_tx(AcceptedConnection* conn,\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CTransaction tx;\n-    uint256 hashBlock = 0;\n+    uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n "
      },
      {
        "sha": "4705c07b8c028b2c41fb2dcbb9ed5f4e912456bf",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -70,7 +70,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDe\n         if(txDetails)\n         {\n             Object objTx;\n-            TxToJSON(tx, uint256(0), objTx);\n+            TxToJSON(tx, uint256(), objTx);\n             txs.push_back(objTx);\n         }\n         else"
      },
      {
        "sha": "10dc2ca93e997d84410c694c870751a814443da1",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -89,7 +89,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n     entry.push_back(Pair(\"vout\", vout));\n \n-    if (hashBlock != 0) {\n+    if (!hashBlock.IsNull()) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n@@ -178,7 +178,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n         fVerbose = (params[1].get_int() != 0);\n \n     CTransaction tx;\n-    uint256 hashBlock = 0;\n+    uint256 hashBlock;\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n \n@@ -438,7 +438,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     Object result;\n-    TxToJSON(tx, 0, result);\n+    TxToJSON(tx, uint256(), result);\n \n     return result;\n }"
      },
      {
        "sha": "21f6bcae3d726a45422710bb16a3ae9ecc1a88a0",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -1477,7 +1477,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     if (params.size() > 0)\n     {\n-        uint256 blockId = 0;\n+        uint256 blockId;\n \n         blockId.SetHex(params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n@@ -1510,7 +1510,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n-    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : 0;\n+    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     Object ret;\n     ret.push_back(Pair(\"transactions\", transactions));"
      },
      {
        "sha": "dbeeace4d9b7f5259ec914020bef4dae77b919f5",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -20,7 +20,7 @@ class CScript;\n class CScriptID : public uint160\n {\n public:\n-    CScriptID() : uint160(0) {}\n+    CScriptID() : uint160() {}\n     CScriptID(const CScript& in);\n     CScriptID(const uint160& in) : uint160(in) {}\n };"
      },
      {
        "sha": "af3d90f2eb142ce5d0a9f5ac0d66bdfec8a361cb",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n         // calculate actual merkle root and height\n         uint256 merkleRoot1 = block.BuildMerkleTree();\n-        std::vector<uint256> vTxid(nTx, 0);\n+        std::vector<uint256> vTxid(nTx, uint256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();\n         int nHeight = 1, nTx_ = nTx;\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n-            BOOST_CHECK(merkleRoot2 != 0);\n+            BOOST_CHECK(!merkleRoot2.IsNull());\n \n             // check that it contains the matched transactions (in the same order!)\n             BOOST_CHECK(vMatchTxid1 == vMatchTxid2);\n@@ -112,7 +112,7 @@ BOOST_AUTO_TEST_CASE(pmt_malleability)\n \n     CPartialMerkleTree tree(vTxid, vMatch);\n     std::vector<uint256> vTxid2;\n-    BOOST_CHECK(tree.ExtractMatches(vTxid) == 0);\n+    BOOST_CHECK(tree.ExtractMatches(vTxid).IsNull());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "77e70022df9cb9bb856128ab223bae524f558f39",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(set)\n BOOST_AUTO_TEST_CASE(is)\n {\n     // Test CScript::IsPayToScriptHash()\n-    uint160 dummy(0);\n+    uint160 dummy;\n     CScript p2sh;\n     p2sh << OP_HASH160 << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(p2sh.IsPayToScriptHash());"
      },
      {
        "sha": "3c8264d89d1f628504e483c705ceeac7a4abe301",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -32,7 +32,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0U);\n \n-    uint160 dummy(0);\n+    uint160 dummy;\n     s1 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2U);\n     s1 << OP_IF << OP_CHECKSIG << OP_ENDIF;"
      },
      {
        "sha": "4467cdce70760fe306cbb8b6fd1ed02517363931",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -39,7 +39,7 @@ bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n     if (!db.Read('B', hashBestChain))\n-        return uint256(0);\n+        return uint256();\n     return hashBestChain;\n }\n \n@@ -56,7 +56,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n-    if (hashBlock != uint256(0))\n+    if (!hashBlock.IsNull())\n         BatchWriteHashBestChain(batch, hashBlock);\n \n     LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n@@ -179,7 +179,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256(0));\n+    ssKeySet << make_pair('b', uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex"
      },
      {
        "sha": "6c5af3bdc7dccce3aa9153c9c782fbd4384cb27d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -579,7 +579,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n             wtx.nOrderPos = IncOrderPosNext();\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (wtxIn.hashBlock != 0)\n+            if (!wtxIn.hashBlock.IsNull())\n             {\n                 if (mapBlockIndex.count(wtxIn.hashBlock))\n                 {\n@@ -630,7 +630,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         if (!fInsertedNew)\n         {\n             // Merge\n-            if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != wtx.hashBlock)\n+            if (!wtxIn.hashBlock.IsNull() && wtxIn.hashBlock != wtx.hashBlock)\n             {\n                 wtx.hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n@@ -795,7 +795,7 @@ int CWalletTx::GetRequestCount() const\n         if (IsCoinBase())\n         {\n             // Generated block\n-            if (hashBlock != 0)\n+            if (!hashBlock.IsNull())\n             {\n                 map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                 if (mi != pwallet->mapRequestCount.end())\n@@ -811,7 +811,7 @@ int CWalletTx::GetRequestCount() const\n                 nRequests = (*mi).second;\n \n                 // How about the block it's in?\n-                if (nRequests == 0 && hashBlock != 0)\n+                if (nRequests == 0 && !hashBlock.IsNull())\n                 {\n                     map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                     if (mi != pwallet->mapRequestCount.end())\n@@ -2317,7 +2317,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock == 0 || nIndex == -1)\n+    if (hashBlock.IsNull() || nIndex == -1)\n         return 0;\n     AssertLockHeld(cs_main);\n "
      },
      {
        "sha": "1d0dc97c6cffd90fb2307c48c0eaaba5495c7a1b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -519,7 +519,7 @@ class CMerkleTx : public CTransaction\n \n     void Init()\n     {\n-        hashBlock = 0;\n+        hashBlock = uint256();\n         nIndex = -1;\n         fMerkleVerified = false;\n     }"
      },
      {
        "sha": "0ec83e7b323286e97fc02a43dd0fefa5ad873621",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f1524966a99c83db8c0c9f1ff74789253a1171e/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "patch": "@@ -439,7 +439,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             CKey key;\n             CPrivKey pkey;\n-            uint256 hash = 0;\n+            uint256 hash;\n \n             if (strType == \"key\")\n             {\n@@ -464,7 +464,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             bool fSkipCheck = false;\n \n-            if (hash != 0)\n+            if (!hash.IsNull())\n             {\n                 // hash pubkey/privkey to accelerate wallet load\n                 std::vector<unsigned char> vchKey;"
      }
    ]
  },
  {
    "sha": "807658549c61d1fb0da3138ea0ca749ecba61723",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDc2NTg1NDljNjFkMWZiMGRhMzEzOGVhMGNhNzQ5ZWNiYTYxNzIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:12:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:34Z"
      },
      "message": "Replace GetLow64 with GetCheapHash",
      "tree": {
        "sha": "b6df872f110b43a75a65f4d8408172a048bb82c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6df872f110b43a75a65f4d8408172a048bb82c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/807658549c61d1fb0da3138ea0ca749ecba61723",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807658549c61d1fb0da3138ea0ca749ecba61723",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/807658549c61d1fb0da3138ea0ca749ecba61723",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807658549c61d1fb0da3138ea0ca749ecba61723/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f1524966a99c83db8c0c9f1ff74789253a1171e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f1524966a99c83db8c0c9f1ff74789253a1171e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1e08ae772ea0b37e75d7c7c6e756ba20d73ebd0b",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807658549c61d1fb0da3138ea0ca749ecba61723/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807658549c61d1fb0da3138ea0ca749ecba61723/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=807658549c61d1fb0da3138ea0ca749ecba61723",
        "patch": "@@ -15,12 +15,12 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char>& nKey) const\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n     ss1 << nKey << vchKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetCheapHash();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetCheapHash();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n@@ -30,11 +30,11 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char>& nKey, const CNetAd\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n     ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetCheapHash();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetCheapHash();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n "
      },
      {
        "sha": "1e00114768dc81ab67b2a8a243d4a9c81cf265ad",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807658549c61d1fb0da3138ea0ca749ecba61723/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807658549c61d1fb0da3138ea0ca749ecba61723/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=807658549c61d1fb0da3138ea0ca749ecba61723",
        "patch": "@@ -106,7 +106,7 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n struct BlockHasher\n {\n-    size_t operator()(const uint256& hash) const { return hash.GetLow64(); }\n+    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n };\n \n extern CScript COINBASE_FLAGS;"
      }
    ]
  },
  {
    "sha": "2eae3157f65197109d7745ea3926d086de812f7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWFlMzE1N2Y2NTE5NzEwOWQ3NzQ1ZWEzOTI2ZDA4NmRlODEyZjdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:17:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:34Z"
      },
      "message": "Replace uint256(1) with static constant\n\nSignatureHash and its test function SignatureHashOld\nreturn uint256(1) as a special error signaling value.\nReturn a local static constant with the same value instead.",
      "tree": {
        "sha": "821cd51543ee0d9fca91cb4ffb7261d47b3d68bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/821cd51543ee0d9fca91cb4ffb7261d47b3d68bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eae3157f65197109d7745ea3926d086de812f7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eae3157f65197109d7745ea3926d086de812f7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eae3157f65197109d7745ea3926d086de812f7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eae3157f65197109d7745ea3926d086de812f7b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "807658549c61d1fb0da3138ea0ca749ecba61723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807658549c61d1fb0da3138ea0ca749ecba61723",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/807658549c61d1fb0da3138ea0ca749ecba61723"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7f8b371d605d34eac85456dfc1d5badb7600c42f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eae3157f65197109d7745ea3926d086de812f7b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eae3157f65197109d7745ea3926d086de812f7b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2eae3157f65197109d7745ea3926d086de812f7b",
        "patch": "@@ -1030,16 +1030,17 @@ class CTransactionSignatureSerializer {\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n+    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n-        return 1;\n+        return one;\n     }\n \n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n         if (nIn >= txTo.vout.size()) {\n             //  nOut out of range\n-            return 1;\n+            return one;\n         }\n     }\n "
      },
      {
        "sha": "036f70ec0f6f51e8f3ba5e6e2b26facbce552caa",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eae3157f65197109d7745ea3926d086de812f7b/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eae3157f65197109d7745ea3926d086de812f7b/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=2eae3157f65197109d7745ea3926d086de812f7b",
        "patch": "@@ -24,10 +24,11 @@ extern Array read_json(const std::string& jsondata);\n // Old script.cpp SignatureHash function\n uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n+    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size())\n     {\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n-        return 1;\n+        return one;\n     }\n     CMutableTransaction txTmp(txTo);\n \n@@ -58,7 +59,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         if (nOut >= txTmp.vout.size())\n         {\n             printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n-            return 1;\n+            return one;\n         }\n         txTmp.vout.resize(nOut+1);\n         for (unsigned int i = 0; i < nOut; i++)"
      }
    ]
  },
  {
    "sha": "34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGNkYzQxMTI4ZWVlNWRhMGJlOWM1ZTE3YjNjMjRiMWY5MWExOTU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T13:50:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:35Z"
      },
      "message": "String conversions uint256 -> uint256S\n\nIf uint256() constructor takes a string, uint256(0) will become\ndangerous when uint256 does not take integers anymore (it will go\nthrough std::string(const char*) making a NULL string, and the explicit\nkeyword is no help).",
      "tree": {
        "sha": "a50f942739a5eace5be0d012a5fe127b800449bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a50f942739a5eace5be0d012a5fe127b800449bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eae3157f65197109d7745ea3926d086de812f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eae3157f65197109d7745ea3926d086de812f7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eae3157f65197109d7745ea3926d086de812f7b"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 66,
      "deletions": 66
    },
    "files": [
      {
        "sha": "e9dac9ffb95a983b1136a878113aa3ac30183e51",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -191,7 +191,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     string strTxid = strInput.substr(0, pos);\n     if ((strTxid.size() != 64) || !IsHex(strTxid))\n         throw runtime_error(\"invalid TX input txid\");\n-    uint256 txid(strTxid);\n+    uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;"
      },
      {
        "sha": "844640061e88dc0bea25abf6ca5b027ad6003e78",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -54,19 +54,19 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n  */\n static Checkpoints::MapCheckpoints mapCheckpoints =\n         boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+        (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+        (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+        (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+        (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+        (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+        (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+        (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n         ;\n static const Checkpoints::CCheckpointData data = {\n         &mapCheckpoints,\n@@ -78,7 +78,7 @@ static const Checkpoints::CCheckpointData data = {\n \n static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n+        ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n static const Checkpoints::CCheckpointData dataTestnet = {\n         &mapCheckpointsTestnet,\n@@ -89,7 +89,7 @@ static const Checkpoints::CCheckpointData dataTestnet = {\n \n static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n         boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n         ;\n static const Checkpoints::CCheckpointData dataRegtest = {\n         &mapCheckpointsRegtest,\n@@ -149,8 +149,8 @@ class CMainParams : public CChainParams {\n         genesis.nNonce   = 2083236893;\n \n         hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n-        assert(genesis.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        assert(hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\"));\n@@ -208,7 +208,7 @@ class CTestNetParams : public CMainParams {\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n         hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -265,7 +265,7 @@ class CRegTestParams : public CTestNetParams {\n         genesis.nNonce = 2;\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds."
      },
      {
        "sha": "77d2dcb20481ae042c49722affb0c0845285e2c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -1738,8 +1738,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n     // initial block download.\n     bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n+                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());"
      },
      {
        "sha": "8422f316f98db64c4efa42b6f1cd8b0e5148e0dc",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -213,7 +213,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         if (item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n         {\n             copyTransactionHashAction->setEnabled(true);\n-            if (model->isLockedCoin(uint256(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n+            if (model->isLockedCoin(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n             {\n                 lockAction->setEnabled(false);\n                 unlockAction->setEnabled(true);\n@@ -272,7 +272,7 @@ void CoinControlDialog::lockCoin()\n     if (contextMenuItem->checkState(COLUMN_CHECKBOX) == Qt::Checked)\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-    COutPoint outpt(uint256(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n+    COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n@@ -282,7 +282,7 @@ void CoinControlDialog::lockCoin()\n // context menu action: unlock coin\n void CoinControlDialog::unlockCoin()\n {\n-    COutPoint outpt(uint256(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n+    COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->unlockCoin(outpt);\n     contextMenuItem->setDisabled(false);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, QIcon());\n@@ -388,7 +388,7 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n {\n     if (column == COLUMN_CHECKBOX && item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n     {\n-        COutPoint outpt(uint256(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n+        COutPoint outpt(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n             coinControl->UnSelect(outpt);"
      },
      {
        "sha": "cfc559d19866ad417a9e7afe9b1d31cfeb5ff4fc",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -278,7 +278,7 @@ Value getblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n     if (params.size() > 1)\n@@ -383,7 +383,7 @@ Value gettxout(const Array& params, bool fHelp)\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    uint256 hash(uint256S(strHash));\n     int n = params[1].get_int();\n     bool fMempool = true;\n     if (params.size() > 2)\n@@ -619,7 +619,7 @@ Value invalidateblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    uint256 hash(uint256S(strHash));\n     CValidationState state;\n \n     {\n@@ -658,7 +658,7 @@ Value reconsiderblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    uint256 hash(uint256S(strHash));\n     CValidationState state;\n \n     {"
      },
      {
        "sha": "470a48e4fb4350ea019178fbdf9b91d0694db023",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -1902,7 +1902,7 @@ Value lockunspent(const Array& params, bool fHelp)\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n-        COutPoint outpt(uint256(txid), nOutput);\n+        COutPoint outpt(uint256S(txid), nOutput);\n \n         if (fUnlock)\n             pwalletMain->UnlockCoin(outpt);"
      },
      {
        "sha": "e979f61f6e7278d675237aafc333c295a865d49b",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -1030,7 +1030,7 @@ class CTransactionSignatureSerializer {\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+    static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n         return one;"
      },
      {
        "sha": "a9b6cd44a87206736f1db673deb1951db1a289aa",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -18,8 +18,8 @@ BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    uint256 p11111 = uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n-    uint256 p134444 = uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n+    uint256 p11111 = uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n+    uint256 p134444 = uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n     BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n     BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n "
      },
      {
        "sha": "f9cbcb0d9e544cc2ce2926b7b047cd242e413954",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     spendStream >> spendingTx;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n+    filter.insert(uint256S(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -151,11 +151,11 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match output address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    filter.insert(COutPoint(uint256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n+    COutPoint prevOutPoint(uint256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n         vector<unsigned char> data(32 + sizeof(unsigned int));\n         memcpy(&data[0], prevOutPoint.hash.begin(), 32);\n@@ -165,19 +165,19 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n+    filter.insert(uint256S(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n+    filter.insert(COutPoint(uint256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    filter.insert(COutPoint(uint256S(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n }\n \n@@ -191,15 +191,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n-    filter.insert(uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    filter.insert(uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n     vector<uint256> vMatched;\n@@ -209,15 +209,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 8th transaction\n-    filter.insert(uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    filter.insert(uint256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -236,15 +236,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the first transaction\n-    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n@@ -265,13 +265,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n \n     BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S(\"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 2);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -290,15 +290,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n     // Match the first transaction\n-    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n@@ -319,10 +319,10 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n \n     BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -341,14 +341,14 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the only transaction\n-    filter.insert(uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    filter.insert(uint256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n@@ -379,15 +379,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n-    filter.insert(uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    filter.insert(uint256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n     vector<uint256> vMatched;\n@@ -397,13 +397,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 4th transaction\n-    filter.insert(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    filter.insert(uint256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 3);\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n@@ -432,9 +432,9 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     // We should match the generation outpoint\n-    BOOST_CHECK(filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    BOOST_CHECK(filter.contains(COutPoint(uint256S(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n     // ... but not the 4th transaction's output (its not pay-2-pubkey)\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n }\n \n BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n@@ -455,8 +455,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     // We shouldn't match any outpoints (UPDATE_NONE)\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256S(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "662f765a0bd996f79fc0ea819d36b62fbbc9140a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -24,7 +24,7 @@ extern Array read_json(const std::string& jsondata);\n // Old script.cpp SignatureHash function\n uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+    static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);"
      },
      {
        "sha": "efa2af917e66fe2e626269f7f7eada4e280de21e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34cdc41128eee5da0be9c5e17b3c24b1f91a1957/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "patch": "@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n-                mapprevOutScriptPubKeys[COutPoint(uint256(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n             }\n             if (!fValid)\n             {\n@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n \n-                mapprevOutScriptPubKeys[COutPoint(uint256(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                mapprevOutScriptPubKeys[COutPoint(uint256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n             }\n             if (!fValid)\n             {"
      }
    ]
  },
  {
    "sha": "734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzRmODVjNGYwYjQwZWZkM2Y2YzAzNjc2ODNjMWJhYjFhMmE3YjE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T14:43:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:35Z"
      },
      "message": "Use arith_uint256 where necessary\n\nAlso add conversion from/to uint256 where needed.",
      "tree": {
        "sha": "664e41303a76e2154972af1347f18f4de3368473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/664e41303a76e2154972af1347f18f4de3368473"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34cdc41128eee5da0be9c5e17b3c24b1f91a1957",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34cdc41128eee5da0be9c5e17b3c24b1f91a1957"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 44,
      "deletions": 33
    },
    "files": [
      {
        "sha": "004e87ab527a2a44caf26da9dd9c79d8396fd102",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CHAIN_H\n #define BITCOIN_CHAIN_H\n \n+#include \"arith_uint256.h\"\n #include \"primitives/block.h\"\n #include \"pow.h\"\n #include \"tinyformat.h\"\n@@ -117,7 +118,7 @@ class CBlockIndex\n     unsigned int nUndoPos;\n \n     //! (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n-    uint256 nChainWork;\n+    arith_uint256 nChainWork;\n \n     //! Number of transactions in this block.\n     //! Note: in a potential headers-first mode, this number cannot be relied upon\n@@ -150,7 +151,7 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        nChainWork = uint256();\n+        nChainWork = arith_uint256();\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;"
      },
      {
        "sha": "3abc569dcd7cfbe3a9f70c2632a42c985abc9f83",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -114,7 +114,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        bnProofOfWorkLimit = ~uint256(0) >> 32;\n+        bnProofOfWorkLimit = ~arith_uint256(0) >> 32;\n         nSubsidyHalvingInterval = 210000;\n         nEnforceBlockUpgradeMajority = 750;\n         nRejectBlockOutdatedMajority = 950;\n@@ -259,7 +259,7 @@ class CRegTestParams : public CTestNetParams {\n         nMinerThreads = 1;\n         nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n         nTargetSpacing = 10 * 60;\n-        bnProofOfWorkLimit = ~uint256(0) >> 1;\n+        bnProofOfWorkLimit = ~arith_uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;"
      },
      {
        "sha": "f1ef6a11f19acd5de005202d4f594680d34519de",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -10,7 +10,7 @@\n #include \"checkpoints.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n-#include \"uint256.h\"\n+#include \"arith_uint256.h\"\n \n #include <vector>\n \n@@ -45,7 +45,7 @@ class CChainParams\n     const MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n+    const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n     int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n     /** Used to check majorities for block version upgrade */\n     int EnforceBlockUpgradeMajority() const { return nEnforceBlockUpgradeMajority; }\n@@ -87,7 +87,7 @@ class CChainParams\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    uint256 bnProofOfWorkLimit;\n+    arith_uint256 bnProofOfWorkLimit;\n     int nSubsidyHalvingInterval;\n     int nEnforceBlockUpgradeMajority;\n     int nRejectBlockOutdatedMajority;"
      },
      {
        "sha": "2235c271d18bff0f52c64b26c5828a78ec692451",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"key.h\"\n \n+#include \"arith_uint256.h\"\n #include \"crypto/hmac_sha512.h\"\n #include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"eccryptoverify.h\"\n@@ -81,7 +82,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     do {\n         uint256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n-        nonce += test_case;\n+        nonce = ArithToUint256(UintToArith256(nonce) + test_case);\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n         nonce = uint256();"
      },
      {
        "sha": "d115f763f664233d903e0187115ad21c5e2957e3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"main.h\"\n \n+#include \"arith_uint256.h\"\n #include \"addrman.h\"\n #include \"alert.h\"\n #include \"chainparams.h\"\n@@ -3607,7 +3608,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint64_t hashAddr = addr.GetHash();\n-                    uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n+                    uint256 hashRand = ArithToUint256(UintToArith256(hashSalt) ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60)));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<uint256, CNode*> mapMix;\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -3616,7 +3617,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             continue;\n                         unsigned int nPointer;\n                         memcpy(&nPointer, &pnode, sizeof(nPointer));\n-                        uint256 hashKey = hashRand ^ nPointer;\n+                        uint256 hashKey = ArithToUint256(UintToArith256(hashRand) ^ nPointer);\n                         hashKey = Hash(BEGIN(hashKey), END(hashKey));\n                         mapMix.insert(make_pair(hashKey, pnode));\n                     }\n@@ -4485,9 +4486,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     static uint256 hashSalt;\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n-                    uint256 hashRand = inv.hash ^ hashSalt;\n+                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((hashRand & 3) != 0);\n+                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n \n                     if (fTrickleWait)\n                     {"
      },
      {
        "sha": "87cb158333e1aaa1113cc7cb9bde308ef63282f4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -481,7 +481,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n+            arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n             uint256 hash;\n             uint32_t nNonce = 0;\n             uint32_t nOldNonce = 0;\n@@ -493,7 +493,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Check if something found\n                 if (fFound)\n                 {\n-                    if (hash <= hashTarget)\n+                    if (UintToArith256(hash) <= hashTarget)\n                     {\n                         // Found a solution\n                         pblock->nNonce = nNonce;"
      },
      {
        "sha": "90bbff0a33a4b65c75f1899a3a8b16f6d6196a4e",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"pow.h\"\n \n+#include \"arith_uint256.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"primitives/block.h\"\n@@ -56,8 +57,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         nActualTimespan = Params().TargetTimespan()*4;\n \n     // Retarget\n-    uint256 bnNew;\n-    uint256 bnOld;\n+    arith_uint256 bnNew;\n+    arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n@@ -79,7 +80,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n {\n     bool fNegative;\n     bool fOverflow;\n-    uint256 bnTarget;\n+    arith_uint256 bnTarget;\n \n     if (Params().SkipProofOfWorkCheck())\n        return true;\n@@ -91,22 +92,22 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n         return error(\"CheckProofOfWork() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n-    if (hash > bnTarget)\n+    if (UintToArith256(hash) > bnTarget)\n         return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n \n     return true;\n }\n \n-uint256 GetBlockProof(const CBlockIndex& block)\n+arith_uint256 GetBlockProof(const CBlockIndex& block)\n {\n-    uint256 bnTarget;\n+    arith_uint256 bnTarget;\n     bool fNegative;\n     bool fOverflow;\n     bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a uint256. However, as 2**256 is at least as large\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;"
      },
      {
        "sha": "3337a30a5e88d56bfc7a2724e58e92eedd97cc9b",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -11,11 +11,12 @@\n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n+class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n-uint256 GetBlockProof(const CBlockIndex& block);\n+arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "603e2935dd9cce4d75ab8317cede261a2994335f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -64,7 +64,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n     if (minTime == maxTime)\n         return 0;\n \n-    uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n+    arith_uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n     int64_t timeDiff = maxTime - minTime;\n \n     return (int64_t)(workDiff.getdouble() / timeDiff);\n@@ -562,7 +562,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     Object aux;\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n-    uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n+    arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n     static Array aMutable;\n     if (aMutable.empty())"
      },
      {
        "sha": "372cf3b306e7c9b6d5aa398a6b2fd109c172ec13",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -6,6 +6,7 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"uint256.h\"\n+#include \"arith_uint256.h\"\n #include \"version.h\"\n \n #include <vector>\n@@ -22,8 +23,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     void Damage() {\n         unsigned int n = rand() % vHash.size();\n         int bit = rand() % 256;\n-        uint256 &hash = vHash[n];\n-        hash ^= ((uint256)1 << bit);\n+        *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n \n@@ -107,7 +107,13 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n BOOST_AUTO_TEST_CASE(pmt_malleability)\n {\n-    std::vector<uint256> vTxid = boost::assign::list_of(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(9)(10);\n+    std::vector<uint256> vTxid = boost::assign::list_of\n+        (ArithToUint256(1))(ArithToUint256(2))\n+        (ArithToUint256(3))(ArithToUint256(4))\n+        (ArithToUint256(5))(ArithToUint256(6))\n+        (ArithToUint256(7))(ArithToUint256(8))\n+        (ArithToUint256(9))(ArithToUint256(10))\n+        (ArithToUint256(9))(ArithToUint256(10));\n     std::vector<bool> vMatch = boost::assign::list_of(false)(false)(false)(false)(false)(false)(false)(false)(false)(true)(true)(false);\n \n     CPartialMerkleTree tree(vTxid, vMatch);"
      },
      {
        "sha": "c75e21a2adf2a619e3c6d3202a6f080d1f84b6bb",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "patch": "@@ -49,25 +49,25 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     std::vector<uint256> vHashMain(100000);\n     std::vector<CBlockIndex> vBlocksMain(100000);\n     for (unsigned int i=0; i<vBlocksMain.size(); i++) {\n-        vHashMain[i] = i; // Set the hash equal to the height, so we can quickly check the distances.\n+        vHashMain[i] = ArithToUint256(i); // Set the hash equal to the height, so we can quickly check the distances.\n         vBlocksMain[i].nHeight = i;\n         vBlocksMain[i].pprev = i ? &vBlocksMain[i - 1] : NULL;\n         vBlocksMain[i].phashBlock = &vHashMain[i];\n         vBlocksMain[i].BuildSkip();\n-        BOOST_CHECK_EQUAL((int)vBlocksMain[i].GetBlockHash().GetLow64(), vBlocksMain[i].nHeight);\n+        BOOST_CHECK_EQUAL((int)UintToArith256(vBlocksMain[i].GetBlockHash()).GetLow64(), vBlocksMain[i].nHeight);\n         BOOST_CHECK(vBlocksMain[i].pprev == NULL || vBlocksMain[i].nHeight == vBlocksMain[i].pprev->nHeight + 1);\n     }\n \n     // Build a branch that splits off at block 49999, 50000 blocks long.\n     std::vector<uint256> vHashSide(50000);\n     std::vector<CBlockIndex> vBlocksSide(50000);\n     for (unsigned int i=0; i<vBlocksSide.size(); i++) {\n-        vHashSide[i] = i + 50000 + (uint256(1) << 128); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\n+        vHashSide[i] = ArithToUint256(i + 50000 + (arith_uint256(1) << 128)); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\n         vBlocksSide[i].nHeight = i + 50000;\n         vBlocksSide[i].pprev = i ? &vBlocksSide[i - 1] : &vBlocksMain[49999];\n         vBlocksSide[i].phashBlock = &vHashSide[i];\n         vBlocksSide[i].BuildSkip();\n-        BOOST_CHECK_EQUAL((int)vBlocksSide[i].GetBlockHash().GetLow64(), vBlocksSide[i].nHeight);\n+        BOOST_CHECK_EQUAL((int)UintToArith256(vBlocksSide[i].GetBlockHash()).GetLow64(), vBlocksSide[i].nHeight);\n         BOOST_CHECK(vBlocksSide[i].pprev == NULL || vBlocksSide[i].nHeight == vBlocksSide[i].pprev->nHeight + 1);\n     }\n \n@@ -87,13 +87,13 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n \n         // Entries 1 through 11 (inclusive) go back one step each.\n         for (unsigned int i = 1; i < 12 && i < locator.vHave.size() - 1; i++) {\n-            BOOST_CHECK_EQUAL(locator.vHave[i].GetLow64(), tip->nHeight - i);\n+            BOOST_CHECK_EQUAL(UintToArith256(locator.vHave[i]).GetLow64(), tip->nHeight - i);\n         }\n \n         // The further ones (excluding the last one) go back with exponential steps.\n         unsigned int dist = 2;\n         for (unsigned int i = 12; i < locator.vHave.size() - 1; i++) {\n-            BOOST_CHECK_EQUAL(locator.vHave[i - 1].GetLow64() - locator.vHave[i].GetLow64(), dist);\n+            BOOST_CHECK_EQUAL(UintToArith256(locator.vHave[i - 1]).GetLow64() - UintToArith256(locator.vHave[i]).GetLow64(), dist);\n             dist *= 2;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmM2MDcwMzQyYjlmNDNiY2YxMjU1MjZlNmEzYzhlZDM0ZTI5YTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:22:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:35Z"
      },
      "message": "uint256->arith_uint256 blob256->uint256\n\nIntroduce new opaque implementation of `uint256`, move old\n\"arithmetic\" implementation to `arith_uint256.",
      "tree": {
        "sha": "8e6665341afc799f922f8b011e2659f02682cdbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e6665341afc799f922f8b011e2659f02682cdbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/734f85c4f0b40efd3f6c0367683c1bab1a2a7b19"
      }
    ],
    "stats": {
      "total": 1686,
      "additions": 985,
      "deletions": 701
    },
    "files": [
      {
        "sha": "bc2b1aff963c7e0e6ca01c9b626da69cd8a63ba2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -74,11 +74,12 @@ BITCOIN_CORE_H = \\\n   alert.h \\\n   allocators.h \\\n   amount.h \\\n+  arith_uint256.h \\\n   base58.h \\\n   bloom.h \\\n   chain.h \\\n-  chainparams.h \\\n   chainparamsbase.h \\\n+  chainparams.h \\\n   chainparamsseeds.h \\\n   checkpoints.h \\\n   checkqueue.h \\\n@@ -87,8 +88,6 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n-  primitives/block.h \\\n-  primitives/transaction.h \\\n   core_io.h \\\n   crypter.h \\\n   db.h \\\n@@ -108,18 +107,20 @@ BITCOIN_CORE_H = \\\n   net.h \\\n   noui.h \\\n   pow.h \\\n+  primitives/block.h \\\n+  primitives/transaction.h \\\n   protocol.h \\\n   pubkey.h \\\n   random.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n   script/interpreter.h \\\n+  script/script_error.h \\\n   script/script.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  script/script_error.h \\\n   serialize.h \\\n   streams.h \\\n   sync.h \\\n@@ -132,13 +133,13 @@ BITCOIN_CORE_H = \\\n   uint256.h \\\n   undo.h \\\n   util.h \\\n-  utilstrencodings.h \\\n   utilmoneystr.h \\\n+  utilstrencodings.h \\\n   utiltime.h \\\n   version.h \\\n+  walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n-  walletdb.h \\\n   compat/sanity.h\n \n JSON_H = \\\n@@ -261,18 +262,19 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n-  compat/strnlen.cpp \\\n-  compat/glibc_sanity.cpp \\\n-  compat/glibcxx_sanity.cpp \\\n+  arith_uint256.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n+  compat/glibc_sanity.cpp \\\n+  compat/glibcxx_sanity.cpp \\\n+  compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\\n-  utilstrencodings.cpp \\\n   utilmoneystr.cpp \\\n+  utilstrencodings.cpp \\\n   utiltime.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -352,19 +354,20 @@ bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n-  primitives/transaction.cpp \\\n+  arith_uint256.cpp \\\n   crypto/hmac_sha512.cpp \\\n+  crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n-  crypto/ripemd160.cpp \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n   hash.cpp \\\n+  primitives/transaction.cpp \\\n   pubkey.cpp \\\n-  script/script.cpp \\\n-  script/interpreter.cpp \\\n   script/bitcoinconsensus.cpp \\\n+  script/interpreter.cpp \\\n+  script/script.cpp \\\n   uint256.cpp \\\n   utilstrencodings.cpp\n "
      },
      {
        "sha": "21d91acc6a72c6ee42a65c7ef3aed6e5d9ab962a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -34,6 +34,7 @@ RAW_TEST_FILES = test/data/alertTests.raw\n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TESTS =\\\n+  test/arith_uint256_tests.cpp \\\n   test/bignum.h \\\n   test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\\n@@ -67,7 +68,6 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n-  test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp\n "
      },
      {
        "sha": "0dba429a8d51993e3e1772067cf894d805bd2bdb",
        "filename": "src/arith_uint256.cpp",
        "status": "added",
        "additions": 357,
        "deletions": 0,
        "changes": 357,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -0,0 +1,357 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"arith_uint256.h\"\n+\n+#include \"utilstrencodings.h\"\n+\n+#include <stdio.h>\n+#include <string.h>\n+\n+template <unsigned int BITS>\n+base_uint<BITS>::base_uint(const std::string& str)\n+{\n+    SetHex(str);\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>::base_uint(const std::vector<unsigned char>& vch)\n+{\n+    if (vch.size() != sizeof(pn))\n+        throw uint_error(\"Converting vector of wrong size to base_uint\");\n+    memcpy(pn, &vch[0], sizeof(pn));\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n+{\n+    base_uint<BITS> a(*this);\n+    for (int i = 0; i < WIDTH; i++)\n+        pn[i] = 0;\n+    int k = shift / 32;\n+    shift = shift % 32;\n+    for (int i = 0; i < WIDTH; i++) {\n+        if (i + k + 1 < WIDTH && shift != 0)\n+            pn[i + k + 1] |= (a.pn[i] >> (32 - shift));\n+        if (i + k < WIDTH)\n+            pn[i + k] |= (a.pn[i] << shift);\n+    }\n+    return *this;\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n+{\n+    base_uint<BITS> a(*this);\n+    for (int i = 0; i < WIDTH; i++)\n+        pn[i] = 0;\n+    int k = shift / 32;\n+    shift = shift % 32;\n+    for (int i = 0; i < WIDTH; i++) {\n+        if (i - k - 1 >= 0 && shift != 0)\n+            pn[i - k - 1] |= (a.pn[i] << (32 - shift));\n+        if (i - k >= 0)\n+            pn[i - k] |= (a.pn[i] >> shift);\n+    }\n+    return *this;\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n+{\n+    uint64_t carry = 0;\n+    for (int i = 0; i < WIDTH; i++) {\n+        uint64_t n = carry + (uint64_t)b32 * pn[i];\n+        pn[i] = n & 0xffffffff;\n+        carry = n >> 32;\n+    }\n+    return *this;\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n+{\n+    base_uint<BITS> a = *this;\n+    *this = 0;\n+    for (int j = 0; j < WIDTH; j++) {\n+        uint64_t carry = 0;\n+        for (int i = 0; i + j < WIDTH; i++) {\n+            uint64_t n = carry + pn[i + j] + (uint64_t)a.pn[j] * b.pn[i];\n+            pn[i + j] = n & 0xffffffff;\n+            carry = n >> 32;\n+        }\n+    }\n+    return *this;\n+}\n+\n+template <unsigned int BITS>\n+base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n+{\n+    base_uint<BITS> div = b;     // make a copy, so we can shift.\n+    base_uint<BITS> num = *this; // make a copy, so we can subtract.\n+    *this = 0;                   // the quotient.\n+    int num_bits = num.bits();\n+    int div_bits = div.bits();\n+    if (div_bits == 0)\n+        throw uint_error(\"Division by zero\");\n+    if (div_bits > num_bits) // the result is certainly 0.\n+        return *this;\n+    int shift = num_bits - div_bits;\n+    div <<= shift; // shift so that div and num align.\n+    while (shift >= 0) {\n+        if (num >= div) {\n+            num -= div;\n+            pn[shift / 32] |= (1 << (shift & 31)); // set a bit of the result.\n+        }\n+        div >>= 1; // shift back.\n+        shift--;\n+    }\n+    // num now contains the remainder of the division.\n+    return *this;\n+}\n+\n+template <unsigned int BITS>\n+int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n+{\n+    for (int i = WIDTH - 1; i >= 0; i--) {\n+        if (pn[i] < b.pn[i])\n+            return -1;\n+        if (pn[i] > b.pn[i])\n+            return 1;\n+    }\n+    return 0;\n+}\n+\n+template <unsigned int BITS>\n+bool base_uint<BITS>::EqualTo(uint64_t b) const\n+{\n+    for (int i = WIDTH - 1; i >= 2; i--) {\n+        if (pn[i])\n+            return false;\n+    }\n+    if (pn[1] != (b >> 32))\n+        return false;\n+    if (pn[0] != (b & 0xfffffffful))\n+        return false;\n+    return true;\n+}\n+\n+template <unsigned int BITS>\n+double base_uint<BITS>::getdouble() const\n+{\n+    double ret = 0.0;\n+    double fact = 1.0;\n+    for (int i = 0; i < WIDTH; i++) {\n+        ret += fact * pn[i];\n+        fact *= 4294967296.0;\n+    }\n+    return ret;\n+}\n+\n+template <unsigned int BITS>\n+std::string base_uint<BITS>::GetHex() const\n+{\n+    char psz[sizeof(pn) * 2 + 1];\n+    for (unsigned int i = 0; i < sizeof(pn); i++)\n+        sprintf(psz + i * 2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n+    return std::string(psz, psz + sizeof(pn) * 2);\n+}\n+\n+template <unsigned int BITS>\n+void base_uint<BITS>::SetHex(const char* psz)\n+{\n+    memset(pn, 0, sizeof(pn));\n+\n+    // skip leading spaces\n+    while (isspace(*psz))\n+        psz++;\n+\n+    // skip 0x\n+    if (psz[0] == '0' && tolower(psz[1]) == 'x')\n+        psz += 2;\n+\n+    // hex string to uint\n+    const char* pbegin = psz;\n+    while (::HexDigit(*psz) != -1)\n+        psz++;\n+    psz--;\n+    unsigned char* p1 = (unsigned char*)pn;\n+    unsigned char* pend = p1 + WIDTH * 4;\n+    while (psz >= pbegin && p1 < pend) {\n+        *p1 = ::HexDigit(*psz--);\n+        if (psz >= pbegin) {\n+            *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\n+            p1++;\n+        }\n+    }\n+}\n+\n+template <unsigned int BITS>\n+void base_uint<BITS>::SetHex(const std::string& str)\n+{\n+    SetHex(str.c_str());\n+}\n+\n+template <unsigned int BITS>\n+std::string base_uint<BITS>::ToString() const\n+{\n+    return (GetHex());\n+}\n+\n+template <unsigned int BITS>\n+unsigned int base_uint<BITS>::bits() const\n+{\n+    for (int pos = WIDTH - 1; pos >= 0; pos--) {\n+        if (pn[pos]) {\n+            for (int bits = 31; bits > 0; bits--) {\n+                if (pn[pos] & 1 << bits)\n+                    return 32 * pos + bits + 1;\n+            }\n+            return 32 * pos + 1;\n+        }\n+    }\n+    return 0;\n+}\n+\n+// Explicit instantiations for base_uint<160>\n+template base_uint<160>::base_uint(const std::string&);\n+template base_uint<160>::base_uint(const std::vector<unsigned char>&);\n+template base_uint<160>& base_uint<160>::operator<<=(unsigned int);\n+template base_uint<160>& base_uint<160>::operator>>=(unsigned int);\n+template base_uint<160>& base_uint<160>::operator*=(uint32_t b32);\n+template base_uint<160>& base_uint<160>::operator*=(const base_uint<160>& b);\n+template base_uint<160>& base_uint<160>::operator/=(const base_uint<160>& b);\n+template int base_uint<160>::CompareTo(const base_uint<160>&) const;\n+template bool base_uint<160>::EqualTo(uint64_t) const;\n+template double base_uint<160>::getdouble() const;\n+template std::string base_uint<160>::GetHex() const;\n+template std::string base_uint<160>::ToString() const;\n+template void base_uint<160>::SetHex(const char*);\n+template void base_uint<160>::SetHex(const std::string&);\n+template unsigned int base_uint<160>::bits() const;\n+\n+// Explicit instantiations for base_uint<256>\n+template base_uint<256>::base_uint(const std::string&);\n+template base_uint<256>::base_uint(const std::vector<unsigned char>&);\n+template base_uint<256>& base_uint<256>::operator<<=(unsigned int);\n+template base_uint<256>& base_uint<256>::operator>>=(unsigned int);\n+template base_uint<256>& base_uint<256>::operator*=(uint32_t b32);\n+template base_uint<256>& base_uint<256>::operator*=(const base_uint<256>& b);\n+template base_uint<256>& base_uint<256>::operator/=(const base_uint<256>& b);\n+template int base_uint<256>::CompareTo(const base_uint<256>&) const;\n+template bool base_uint<256>::EqualTo(uint64_t) const;\n+template double base_uint<256>::getdouble() const;\n+template std::string base_uint<256>::GetHex() const;\n+template std::string base_uint<256>::ToString() const;\n+template void base_uint<256>::SetHex(const char*);\n+template void base_uint<256>::SetHex(const std::string&);\n+template unsigned int base_uint<256>::bits() const;\n+\n+// This implementation directly uses shifts instead of going\n+// through an intermediate MPI representation.\n+arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)\n+{\n+    int nSize = nCompact >> 24;\n+    uint32_t nWord = nCompact & 0x007fffff;\n+    if (nSize <= 3) {\n+        nWord >>= 8 * (3 - nSize);\n+        *this = nWord;\n+    } else {\n+        *this = nWord;\n+        *this <<= 8 * (nSize - 3);\n+    }\n+    if (pfNegative)\n+        *pfNegative = nWord != 0 && (nCompact & 0x00800000) != 0;\n+    if (pfOverflow)\n+        *pfOverflow = nWord != 0 && ((nSize > 34) ||\n+                                     (nWord > 0xff && nSize > 33) ||\n+                                     (nWord > 0xffff && nSize > 32));\n+    return *this;\n+}\n+\n+uint32_t arith_uint256::GetCompact(bool fNegative) const\n+{\n+    int nSize = (bits() + 7) / 8;\n+    uint32_t nCompact = 0;\n+    if (nSize <= 3) {\n+        nCompact = GetLow64() << 8 * (3 - nSize);\n+    } else {\n+        arith_uint256 bn = *this >> 8 * (nSize - 3);\n+        nCompact = bn.GetLow64();\n+    }\n+    // The 0x00800000 bit denotes the sign.\n+    // Thus, if it is already set, divide the mantissa by 256 and increase the exponent.\n+    if (nCompact & 0x00800000) {\n+        nCompact >>= 8;\n+        nSize++;\n+    }\n+    assert((nCompact & ~0x007fffff) == 0);\n+    assert(nSize < 256);\n+    nCompact |= nSize << 24;\n+    nCompact |= (fNegative && (nCompact & 0x007fffff) ? 0x00800000 : 0);\n+    return nCompact;\n+}\n+\n+static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n+{\n+    // Taken from lookup3, by Bob Jenkins.\n+    a -= c;\n+    a ^= ((c << 4) | (c >> 28));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 6) | (a >> 26));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 8) | (b >> 24));\n+    b += a;\n+    a -= c;\n+    a ^= ((c << 16) | (c >> 16));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 19) | (a >> 13));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 4) | (b >> 28));\n+    b += a;\n+}\n+\n+static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n+{\n+    // Taken from lookup3, by Bob Jenkins.\n+    c ^= b;\n+    c -= ((b << 14) | (b >> 18));\n+    a ^= c;\n+    a -= ((c << 11) | (c >> 21));\n+    b ^= a;\n+    b -= ((a << 25) | (a >> 7));\n+    c ^= b;\n+    c -= ((b << 16) | (b >> 16));\n+    a ^= c;\n+    a -= ((c << 4) | (c >> 28));\n+    b ^= a;\n+    b -= ((a << 14) | (a >> 18));\n+    c ^= b;\n+    c -= ((b << 24) | (b >> 8));\n+}\n+\n+uint64_t arith_uint256::GetHash(const arith_uint256& salt) const\n+{\n+    uint32_t a, b, c;\n+    a = b = c = 0xdeadbeef + (WIDTH << 2);\n+\n+    a += pn[0] ^ salt.pn[0];\n+    b += pn[1] ^ salt.pn[1];\n+    c += pn[2] ^ salt.pn[2];\n+    HashMix(a, b, c);\n+    a += pn[3] ^ salt.pn[3];\n+    b += pn[4] ^ salt.pn[4];\n+    c += pn[5] ^ salt.pn[5];\n+    HashMix(a, b, c);\n+    a += pn[6] ^ salt.pn[6];\n+    b += pn[7] ^ salt.pn[7];\n+    HashFinal(a, b, c);\n+\n+    return ((((uint64_t)b) << 32) | c);\n+}"
      },
      {
        "sha": "9e32b124c250eca32e0df6571135b99a4128d18e",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 341,
        "deletions": 10,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -1,19 +1,350 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_ARITH_UINT256_H\n #define BITCOIN_ARITH_UINT256_H\n \n-// Temporary for migration to opaque uint160/256\n-#include \"uint256.h\"\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n \n-class arith_uint256 : public uint256 {\n+class uint_error : public std::runtime_error {\n public:\n-    arith_uint256() {}\n-    arith_uint256(const base_uint<256>& b) : uint256(b) {}\n-    arith_uint256(uint64_t b) : uint256(b) {}\n-    explicit arith_uint256(const std::string& str) : uint256(str) {}\n-    explicit arith_uint256(const std::vector<unsigned char>& vch) : uint256(vch) {}\n+    explicit uint_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n+/** Template base class for unsigned big integers. */\n+template<unsigned int BITS>\n+class base_uint\n+{\n+protected:\n+    enum { WIDTH=BITS/32 };\n+    uint32_t pn[WIDTH];\n+public:\n+\n+    base_uint()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = 0;\n+    }\n+\n+    base_uint(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = b.pn[i];\n+    }\n+\n+    base_uint& operator=(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = b.pn[i];\n+        return *this;\n+    }\n+\n+    base_uint(uint64_t b)\n+    {\n+        pn[0] = (unsigned int)b;\n+        pn[1] = (unsigned int)(b >> 32);\n+        for (int i = 2; i < WIDTH; i++)\n+            pn[i] = 0;\n+    }\n+\n+    explicit base_uint(const std::string& str);\n+    explicit base_uint(const std::vector<unsigned char>& vch);\n+\n+    bool operator!() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (pn[i] != 0)\n+                return false;\n+        return true;\n+    }\n+\n+    const base_uint operator~() const\n+    {\n+        base_uint ret;\n+        for (int i = 0; i < WIDTH; i++)\n+            ret.pn[i] = ~pn[i];\n+        return ret;\n+    }\n+\n+    const base_uint operator-() const\n+    {\n+        base_uint ret;\n+        for (int i = 0; i < WIDTH; i++)\n+            ret.pn[i] = ~pn[i];\n+        ret++;\n+        return ret;\n+    }\n+\n+    double getdouble() const;\n+\n+    base_uint& operator=(uint64_t b)\n+    {\n+        pn[0] = (unsigned int)b;\n+        pn[1] = (unsigned int)(b >> 32);\n+        for (int i = 2; i < WIDTH; i++)\n+            pn[i] = 0;\n+        return *this;\n+    }\n+\n+    base_uint& operator^=(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] ^= b.pn[i];\n+        return *this;\n+    }\n+\n+    base_uint& operator&=(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] &= b.pn[i];\n+        return *this;\n+    }\n+\n+    base_uint& operator|=(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] |= b.pn[i];\n+        return *this;\n+    }\n+\n+    base_uint& operator^=(uint64_t b)\n+    {\n+        pn[0] ^= (unsigned int)b;\n+        pn[1] ^= (unsigned int)(b >> 32);\n+        return *this;\n+    }\n+\n+    base_uint& operator|=(uint64_t b)\n+    {\n+        pn[0] |= (unsigned int)b;\n+        pn[1] |= (unsigned int)(b >> 32);\n+        return *this;\n+    }\n+\n+    base_uint& operator<<=(unsigned int shift);\n+    base_uint& operator>>=(unsigned int shift);\n+\n+    base_uint& operator+=(const base_uint& b)\n+    {\n+        uint64_t carry = 0;\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            uint64_t n = carry + pn[i] + b.pn[i];\n+            pn[i] = n & 0xffffffff;\n+            carry = n >> 32;\n+        }\n+        return *this;\n+    }\n+\n+    base_uint& operator-=(const base_uint& b)\n+    {\n+        *this += -b;\n+        return *this;\n+    }\n+\n+    base_uint& operator+=(uint64_t b64)\n+    {\n+        base_uint b;\n+        b = b64;\n+        *this += b;\n+        return *this;\n+    }\n+\n+    base_uint& operator-=(uint64_t b64)\n+    {\n+        base_uint b;\n+        b = b64;\n+        *this += -b;\n+        return *this;\n+    }\n+\n+    base_uint& operator*=(uint32_t b32);\n+    base_uint& operator*=(const base_uint& b);\n+    base_uint& operator/=(const base_uint& b);\n+\n+    base_uint& operator++()\n+    {\n+        // prefix operator\n+        int i = 0;\n+        while (++pn[i] == 0 && i < WIDTH-1)\n+            i++;\n+        return *this;\n+    }\n+\n+    const base_uint operator++(int)\n+    {\n+        // postfix operator\n+        const base_uint ret = *this;\n+        ++(*this);\n+        return ret;\n+    }\n+\n+    base_uint& operator--()\n+    {\n+        // prefix operator\n+        int i = 0;\n+        while (--pn[i] == (uint32_t)-1 && i < WIDTH-1)\n+            i++;\n+        return *this;\n+    }\n+\n+    const base_uint operator--(int)\n+    {\n+        // postfix operator\n+        const base_uint ret = *this;\n+        --(*this);\n+        return ret;\n+    }\n+\n+    int CompareTo(const base_uint& b) const;\n+    bool EqualTo(uint64_t b) const;\n+\n+    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }\n+    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }\n+    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }\n+    friend inline const base_uint operator/(const base_uint& a, const base_uint& b) { return base_uint(a) /= b; }\n+    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }\n+    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }\n+    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }\n+    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n+    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n+    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n+    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n+    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n+    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n+    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n+    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n+    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n+    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return (unsigned char*)&pn[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return (unsigned char*)&pn[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return (unsigned char*)&pn[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return (unsigned char*)&pn[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(pn);\n+    }\n+\n+    /**\n+     * Returns the position of the highest bit set plus one, or zero if the\n+     * value is zero.\n+     */\n+    unsigned int bits() const;\n+\n+    uint64_t GetLow64() const\n+    {\n+        assert(WIDTH >= 2);\n+        return pn[0] | (uint64_t)pn[1] << 32;\n+    }\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(pn);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)pn, sizeof(pn));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)pn, sizeof(pn));\n+    }\n+\n+    // Temporary for migration to blob160/256\n+    uint64_t GetCheapHash() const\n+    {\n+        return GetLow64();\n+    }\n+    void SetNull()\n+    {\n+        memset(pn, 0, sizeof(pn));\n+    }\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (pn[i] != 0)\n+                return false;\n+        return true;\n+    }\n };\n \n-#define ArithToUint256(x) (x)\n-#define UintToArith256(x) (x)\n+/** 160-bit unsigned big integer. */\n+class arith_uint160 : public base_uint<160> {\n+public:\n+    arith_uint160() {}\n+    arith_uint160(const base_uint<160>& b) : base_uint<160>(b) {}\n+    arith_uint160(uint64_t b) : base_uint<160>(b) {}\n+    explicit arith_uint160(const std::string& str) : base_uint<160>(str) {}\n+    explicit arith_uint160(const std::vector<unsigned char>& vch) : base_uint<160>(vch) {}\n+};\n+\n+/** 256-bit unsigned big integer. */\n+class arith_uint256 : public base_uint<256> {\n+public:\n+    arith_uint256() {}\n+    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n+    arith_uint256(uint64_t b) : base_uint<256>(b) {}\n+    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}\n+    explicit arith_uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n+\n+    /**\n+     * The \"compact\" format is a representation of a whole\n+     * number N using an unsigned 32bit number similar to a\n+     * floating point format.\n+     * The most significant 8 bits are the unsigned exponent of base 256.\n+     * This exponent can be thought of as \"number of bytes of N\".\n+     * The lower 23 bits are the mantissa.\n+     * Bit number 24 (0x800000) represents the sign of N.\n+     * N = (-1^sign) * mantissa * 256^(exponent-3)\n+     *\n+     * Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n+     * MPI uses the most significant bit of the first byte as sign.\n+     * Thus 0x1234560000 is compact (0x05123456)\n+     * and  0xc0de000000 is compact (0x0600c0de)\n+     *\n+     * Bitcoin only uses this \"compact\" format for encoding difficulty\n+     * targets, which are unsigned 256bit quantities.  Thus, all the\n+     * complexities of the sign bit and using base 256 are probably an\n+     * implementation accident.\n+     */\n+    arith_uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n+    uint32_t GetCompact(bool fNegative = false) const;\n+\n+    uint64_t GetHash(const arith_uint256& salt) const;\n+};\n \n #endif // BITCOIN_UINT256_H"
      },
      {
        "sha": "f5f71da6147db242b9e48b21b2ccd9901e961713",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "renamed",
        "additions": 162,
        "deletions": 163,
        "changes": 325,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -8,65 +8,65 @@\n #include <iomanip>\n #include <limits>\n #include <cmath>\n-#include \"uint256.h\"\n+#include \"arith_uint256.h\"\n #include <string>\n #include \"version.h\"\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n- \n-const unsigned char R1Array[] = \n+BOOST_AUTO_TEST_SUITE(arith_uint256_tests)\n+\n+const unsigned char R1Array[] =\n     \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n     \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n const double R1Ldouble = 0.4887374590559308955; // R1L equals roughly R1Ldouble * 2^256\n-const double R1Sdouble = 0.7096329412477836074; \n-const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n-const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n+const double R1Sdouble = 0.7096329412477836074;\n+const arith_uint256 R1L = arith_uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n+const arith_uint160 R1S = arith_uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;\n \n-const unsigned char R2Array[] = \n+const unsigned char R2Array[] =\n     \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n     \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n-const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n-const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n+const arith_uint256 R2L = arith_uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n+const arith_uint160 R2S = arith_uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n \n const char R1LplusR2L[] = \"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\";\n \n-const unsigned char ZeroArray[] = \n+const unsigned char ZeroArray[] =\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n-const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n-const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n-                             \n-const unsigned char OneArray[] = \n+const arith_uint256 ZeroL = arith_uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n+const arith_uint160 ZeroS = arith_uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n+\n+const unsigned char OneArray[] =\n     \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n-const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n-const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n+const arith_uint256 OneL = arith_uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n+const arith_uint160 OneS = arith_uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n \n-const unsigned char MaxArray[] = \n+const unsigned char MaxArray[] =\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n-const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n-const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n+const arith_uint256 MaxL = arith_uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n+const arith_uint160 MaxS = arith_uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n \n-const uint256 HalfL = (OneL << 255);\n-const uint160 HalfS = (OneS << 159);\n+const arith_uint256 HalfL = (OneL << 255);\n+const arith_uint160 HalfS = (OneS << 159);\n std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n     Stream << std::hex;\n-    for (unsigned int i = 0; i < width; ++i) \n+    for (unsigned int i = 0; i < width; ++i)\n     {\n         Stream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n-    }       \n+    }\n     return Stream.str();\n }\n \n BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n     BOOST_CHECK(1 == 0+1);\n-    // constructor uint256(vector<char>):\n+    // constructor arith_uint256(vector<char>):\n     BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n     BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n     BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n@@ -88,104 +88,104 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n     BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n     BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n-    \n+\n     uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n-    for (unsigned int i = 0; i < 256; ++i) \n+    for (unsigned int i = 0; i < 256; ++i)\n     {\n-        BOOST_CHECK(ZeroL != (OneL << i)); \n-        BOOST_CHECK((OneL << i) != ZeroL); \n+        BOOST_CHECK(ZeroL != (OneL << i));\n+        BOOST_CHECK((OneL << i) != ZeroL);\n         BOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n-        BOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+        BOOST_CHECK(((arith_uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n     }\n-    BOOST_CHECK(ZeroL == (OneL << 256)); \n+    BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    for (unsigned int i = 0; i < 160; ++i) \n+    for (unsigned int i = 0; i < 160; ++i)\n     {\n-        BOOST_CHECK(ZeroS != (OneS << i)); \n-        BOOST_CHECK((OneS << i) != ZeroS); \n+        BOOST_CHECK(ZeroS != (OneS << i));\n+        BOOST_CHECK((OneS << i) != ZeroS);\n         BOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n-        BOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+        BOOST_CHECK(((arith_uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n     }\n-    BOOST_CHECK(ZeroS == (OneS << 256)); \n+    BOOST_CHECK(ZeroS == (OneS << 256));\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n-    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n-    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n-    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n-    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n-    BOOST_CHECK(uint256(\"\") == ZeroL);\n-    BOOST_CHECK(R1L == uint256(R1ArrayHex));\n-    BOOST_CHECK(uint256(R1L) == R1L);\n-    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n-    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n-    BOOST_CHECK(uint256(OneL) == OneL);\n-\n-    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n-    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n-    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n-    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n-    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n-    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n-    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n-    BOOST_CHECK(uint160(\"\") == ZeroS);\n-    BOOST_CHECK(R1S == uint160(R1ArrayHex));\n-\n-    BOOST_CHECK(uint160(R1S) == R1S);\n-    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n-    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n-    BOOST_CHECK(uint160(OneS) == OneS);\n+    BOOST_CHECK(arith_uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(arith_uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(arith_uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(arith_uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(arith_uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(arith_uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(arith_uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(arith_uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == arith_uint256(R1ArrayHex));\n+    BOOST_CHECK(arith_uint256(R1L) == R1L);\n+    BOOST_CHECK((arith_uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(arith_uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(arith_uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(arith_uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(arith_uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(arith_uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(arith_uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(arith_uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(arith_uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(arith_uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S);\n+    BOOST_CHECK(arith_uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == arith_uint160(R1ArrayHex));\n+\n+    BOOST_CHECK(arith_uint160(R1S) == R1S);\n+    BOOST_CHECK((arith_uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(arith_uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(arith_uint160(OneS) == OneS);\n \n     // uint64_t constructor\n-    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(R1LLow64));\n-    BOOST_CHECK(ZeroL == uint256(0));\n-    BOOST_CHECK(OneL == uint256(1));\n-    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n-    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(R1LLow64));\n-    BOOST_CHECK(ZeroS == uint160(0));\n-    BOOST_CHECK(OneS == uint160(1));\n-    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1L & arith_uint256(\"0xffffffffffffffff\")) == arith_uint256(R1LLow64));\n+    BOOST_CHECK(ZeroL == arith_uint256(0));\n+    BOOST_CHECK(OneL == arith_uint256(1));\n+    BOOST_CHECK(arith_uint256(\"0xffffffffffffffff\") = arith_uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & arith_uint160(\"0xffffffffffffffff\")) == arith_uint160(R1LLow64));\n+    BOOST_CHECK(ZeroS == arith_uint160(0));\n+    BOOST_CHECK(OneS == arith_uint160(1));\n+    BOOST_CHECK(arith_uint160(\"0xffffffffffffffff\") = arith_uint160(0xffffffffffffffffULL));\n \n     // Assignment (from base_uint)\n-    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    arith_uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n     tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n     tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n     tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n     tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n-    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    arith_uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n     tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n     tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n     tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n     tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n \n     // Wrong length must throw exception.\n-    BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n-    BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n-    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+32)), uint_error);\n-    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+19)), uint_error);\n+    BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n+    BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n+    BOOST_CHECK_THROW(arith_uint160(std::vector<unsigned char>(OneArray,OneArray+32)), uint_error);\n+    BOOST_CHECK_THROW(arith_uint160(std::vector<unsigned char>(OneArray,OneArray+19)), uint_error);\n }\n \n-void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n {\n-    for (unsigned int T=0; T < arrayLength; ++T) \n+    for (unsigned int T=0; T < arrayLength; ++T)\n     {\n         unsigned int F = (T+bitsToShift/8);\n-        if (F < arrayLength) \n+        if (F < arrayLength)\n             to[T]  = from[F] >> (bitsToShift%8);\n         else\n             to[T] = 0;\n-        if (F + 1 < arrayLength) \n+        if (F + 1 < arrayLength)\n             to[T] |= from[(F+1)] << (8-bitsToShift%8);\n     }\n }\n \n-void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n {\n-    for (unsigned int T=0; T < arrayLength; ++T) \n+    for (unsigned int T=0; T < arrayLength; ++T)\n     {\n-        if (T >= bitsToShift/8) \n+        if (T >= bitsToShift/8)\n         {\n             unsigned int F = T-bitsToShift/8;\n             to[T]  = from[F] << (bitsToShift%8);\n@@ -200,79 +200,79 @@ void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int a\n \n BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n     unsigned char TmpArray[32];\n-    uint256 TmpL;\n+    arith_uint256 TmpL;\n     for (unsigned int i = 0; i < 256; ++i)\n     {\n         shiftArrayLeft(TmpArray, OneArray, 32, i);\n-        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (OneL << i));\n+        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (OneL << i));\n         TmpL = OneL; TmpL <<= i;\n         BOOST_CHECK(TmpL == (OneL << i));\n         BOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n         TmpL = HalfL; TmpL >>= (255-i);\n         BOOST_CHECK(TmpL == (OneL << i));\n-                    \n+\n         shiftArrayLeft(TmpArray, R1Array, 32, i);\n-        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L << i));\n+        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L << i));\n         TmpL = R1L; TmpL <<= i;\n         BOOST_CHECK(TmpL == (R1L << i));\n \n         shiftArrayRight(TmpArray, R1Array, 32, i);\n-        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L >> i)); \n+        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L >> i));\n         TmpL = R1L; TmpL >>= i;\n         BOOST_CHECK(TmpL == (R1L >> i));\n \n         shiftArrayLeft(TmpArray, MaxArray, 32, i);\n-        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL << i));\n+        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL << i));\n         TmpL = MaxL; TmpL <<= i;\n         BOOST_CHECK(TmpL == (MaxL << i));\n \n         shiftArrayRight(TmpArray, MaxArray, 32, i);\n-        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL >> i));\n+        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL >> i));\n         TmpL = MaxL; TmpL >>= i;\n         BOOST_CHECK(TmpL == (MaxL >> i));\n     }\n-    uint256 c1L = uint256(0x0123456789abcdefULL);\n-    uint256 c2L = c1L << 128;\n+    arith_uint256 c1L = arith_uint256(0x0123456789abcdefULL);\n+    arith_uint256 c2L = c1L << 128;\n     for (unsigned int i = 0; i < 128; ++i) {\n         BOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n     }\n     for (unsigned int i = 128; i < 256; ++i) {\n         BOOST_CHECK((c1L << i) == (c2L << (i-128)));\n     }\n \n-    uint160 TmpS;\n+    arith_uint160 TmpS;\n     for (unsigned int i = 0; i < 160; ++i)\n     {\n         shiftArrayLeft(TmpArray, OneArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (OneS << i));\n+        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (OneS << i));\n         TmpS = OneS; TmpS <<= i;\n         BOOST_CHECK(TmpS == (OneS << i));\n         BOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n         TmpS = HalfS; TmpS >>= (159-i);\n         BOOST_CHECK(TmpS == (OneS << i));\n-                    \n+\n         shiftArrayLeft(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S << i));\n+        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S << i));\n         TmpS = R1S; TmpS <<= i;\n         BOOST_CHECK(TmpS == (R1S << i));\n \n         shiftArrayRight(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S >> i)); \n+        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S >> i));\n         TmpS = R1S; TmpS >>= i;\n         BOOST_CHECK(TmpS == (R1S >> i));\n \n         shiftArrayLeft(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS << i));\n+        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS << i));\n         TmpS = MaxS; TmpS <<= i;\n         BOOST_CHECK(TmpS == (MaxS << i));\n \n         shiftArrayRight(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS >> i));\n+        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS >> i));\n         TmpS = MaxS; TmpS >>= i;\n         BOOST_CHECK(TmpS == (MaxS >> i));\n     }\n-    uint160 c1S = uint160(0x0123456789abcdefULL);\n-    uint160 c2S = c1S << 80;\n+    arith_uint160 c1S = arith_uint160(0x0123456789abcdefULL);\n+    arith_uint160 c2S = c1S << 80;\n     for (unsigned int i = 0; i < 80; ++i) {\n         BOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n     }\n@@ -285,47 +285,47 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n {\n     BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n     BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n-    for (unsigned int i = 0; i < 256; ++i) \n+    for (unsigned int i = 0; i < 256; ++i)\n         BOOST_CHECK(!(!(OneL<<i)));\n-    for (unsigned int i = 0; i < 160; ++i) \n+    for (unsigned int i = 0; i < 160; ++i)\n         BOOST_CHECK(!(!(OneS<<i)));\n     BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n-    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S));\n     BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n \n     BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n \n     unsigned char TmpArray[32];\n-    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n-    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (~R1S));\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; }\n+    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n+    BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (~R1S));\n \n     BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n     BOOST_CHECK(-R1L == (~R1L)+1);\n     BOOST_CHECK(-R1S == (~R1S)+1);\n-    for (unsigned int i = 0; i < 256; ++i) \n+    for (unsigned int i = 0; i < 256; ++i)\n         BOOST_CHECK(-(OneL<<i) == (MaxL << i));\n-    for (unsigned int i = 0; i < 160; ++i) \n+    for (unsigned int i = 0; i < 160; ++i)\n         BOOST_CHECK(-(OneS<<i) == (MaxS << i));\n }\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n-// element of Aarray and Barray, and then converting the result into a uint256.\n+// element of Aarray and Barray, and then converting the result into a arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L)); \\\n+    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L)); \\\n     for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (_A_##S _OP_ _B_##S));\n+    BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (_A_##S _OP_ _B_##S));\n \n #define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\\n     TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n     TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n \n-BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+BOOST_AUTO_TEST_CASE( bitwiseOperators )\n {\n     unsigned char TmpArray[32];\n-    \n+\n     CHECKBITWISEOPERATOR(R1,R2,|)\n     CHECKBITWISEOPERATOR(R1,R2,^)\n     CHECKBITWISEOPERATOR(R1,R2,&)\n@@ -342,8 +342,8 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n     CHECKBITWISEOPERATOR(Max,R1,^)\n     CHECKBITWISEOPERATOR(Max,R1,&)\n \n-    uint256 TmpL;\n-    uint160 TmpS;\n+    arith_uint256 TmpL;\n+    arith_uint160 TmpS;\n     CHECKASSIGNMENTOPERATOR(R1,R2,|)\n     CHECKASSIGNMENTOPERATOR(R1,R2,^)\n     CHECKASSIGNMENTOPERATOR(R1,R2,&)\n@@ -360,20 +360,20 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n     CHECKASSIGNMENTOPERATOR(Max,R1,^)\n     CHECKASSIGNMENTOPERATOR(Max,R1,&)\n \n-    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n-    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n-    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL;\n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | arith_uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | arith_uint160(Tmp64)));\n     TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n     TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n     TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n     TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n-    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n-    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ arith_uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ arith_uint160(Tmp64)));\n }\n \n BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n {\n-    uint256 TmpL;\n+    arith_uint256 TmpL;\n     for (unsigned int i = 0; i < 256; ++i) {\n         TmpL= OneL<< i;\n         BOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n@@ -383,7 +383,7 @@ BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n         BOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n         BOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n     }\n-    uint160 TmpS;\n+    arith_uint160 TmpS;\n     for (unsigned int i = 0; i < 160; ++i) {\n         TmpS= OneS<< i;\n         BOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n@@ -395,10 +395,10 @@ BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n     }\n }\n \n-BOOST_AUTO_TEST_CASE( plusMinus ) \n+BOOST_AUTO_TEST_CASE( plusMinus )\n {\n-    uint256 TmpL = 0;\n-    BOOST_CHECK(R1L+R2L == uint256(R1LplusR2L));\n+    arith_uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == arith_uint256(R1LplusR2L));\n     TmpL += R1L;\n     BOOST_CHECK(TmpL == R1L);\n     TmpL += R2L;\n@@ -412,13 +412,13 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n         BOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n         TmpL = (MaxL>>i); TmpL += 1;\n         BOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n-        TmpL = (MaxL>>i); \n+        TmpL = (MaxL>>i);\n         BOOST_CHECK( TmpL++ == (MaxL>>i) );\n         BOOST_CHECK( TmpL == (HalfL >> (i-1)));\n     }\n-    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n-    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n-    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    BOOST_CHECK(arith_uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == arith_uint256(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n+    TmpL = arith_uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == arith_uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n     TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n     TmpL = R1L;\n     BOOST_CHECK(++TmpL == R1L+1);\n@@ -439,8 +439,8 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n     BOOST_CHECK(--TmpL == R1L-1);\n \n     // 160-bit; copy-pasted\n-    uint160 TmpS = 0;\n-    BOOST_CHECK(R1S+R2S == uint160(R1LplusR2L));\n+    arith_uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == arith_uint160(R1LplusR2L));\n     TmpS += R1S;\n     BOOST_CHECK(TmpS == R1S);\n     TmpS += R2S;\n@@ -454,13 +454,13 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n         BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n         TmpS = (MaxS>>i); TmpS += 1;\n         BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); \n+        TmpS = (MaxS>>i);\n         BOOST_CHECK( TmpS++ == (MaxS>>i) );\n         BOOST_CHECK( TmpS == (HalfS >> (i-1)));\n     }\n-    BOOST_CHECK(uint160(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint160(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n-    TmpS = uint160(0xbedc77e27940a7ULL); TmpS += 0xee8d836fce66fbULL;\n-    BOOST_CHECK(TmpS == uint160(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    BOOST_CHECK(arith_uint160(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == arith_uint160(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n+    TmpS = arith_uint160(0xbedc77e27940a7ULL); TmpS += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpS == arith_uint160(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n     TmpS -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpS == 0xbedc77e27940a7ULL);\n     TmpS = R1S;\n     BOOST_CHECK(++TmpS == R1S+1);\n@@ -521,8 +521,8 @@ BOOST_AUTO_TEST_CASE( multiply )\n \n BOOST_AUTO_TEST_CASE( divide )\n {\n-    uint256 D1L(\"AD7133AC1977FA2B7\");\n-    uint256 D2L(\"ECD751716\");\n+    arith_uint256 D1L(\"AD7133AC1977FA2B7\");\n+    arith_uint256 D2L(\"ECD751716\");\n     BOOST_CHECK((R1L / D1L).ToString() == \"00000000000000000b8ac01106981635d9ed112290f8895545a7654dde28fb3a\");\n     BOOST_CHECK((R1L / D2L).ToString() == \"000000000873ce8efec5b67150bad3aa8c5fcb70e947586153bf2cec7c37c57a\");\n     BOOST_CHECK(R1L / OneL == R1L);\n@@ -536,8 +536,8 @@ BOOST_AUTO_TEST_CASE( divide )\n     BOOST_CHECK(MaxL / R2L == 1);\n     BOOST_CHECK_THROW(R2L / ZeroL, uint_error);\n \n-    uint160 D1S(\"D3C5EDCDEA54EB92679F0A4B4\");\n-    uint160 D2S(\"13037\");\n+    arith_uint160 D1S(\"D3C5EDCDEA54EB92679F0A4B4\");\n+    arith_uint160 D2S(\"13037\");\n     BOOST_CHECK((R1S / D1S).ToString() == \"0000000000000000000000000db9af3beade6c02\");\n     BOOST_CHECK((R1S / D2S).ToString() == \"000098dfb6cc40ca592bf74366794f298ada205c\");\n     BOOST_CHECK(R1S / OneS == R1S);\n@@ -553,7 +553,7 @@ BOOST_AUTO_TEST_CASE( divide )\n }\n \n \n-bool almostEqual(double d1, double d2) \n+bool almostEqual(double d1, double d2)\n {\n     return fabs(d1-d2) <= 4*fabs(d1)*std::numeric_limits<double>::epsilon();\n }\n@@ -564,7 +564,7 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(R2L.GetHex() == R2L.ToString());\n     BOOST_CHECK(OneL.GetHex() == OneL.ToString());\n     BOOST_CHECK(MaxL.GetHex() == MaxL.ToString());\n-    uint256 TmpL(R1L);\n+    arith_uint256 TmpL(R1L);\n     BOOST_CHECK(TmpL == R1L);\n     TmpL.SetHex(R2L.ToString());   BOOST_CHECK(TmpL == R2L);\n     TmpL.SetHex(ZeroL.ToString()); BOOST_CHECK(TmpL == 0);\n@@ -612,7 +612,7 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n     BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n     BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n-    uint160 TmpS(R1S);\n+    arith_uint160 TmpS(R1S);\n     BOOST_CHECK(TmpS == R1S);\n     TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n     TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == 0);\n@@ -634,7 +634,7 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n     BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n     BOOST_CHECK(R1S.GetLow64()  == R1LLow64);\n-    BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL); \n+    BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL);\n     BOOST_CHECK(OneS.GetLow64() ==0x0000000000000001ULL);\n     BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n     BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n@@ -654,17 +654,17 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n     BOOST_CHECK(MaxS == TmpS);\n     ss.str(\"\");\n-    \n-    for (unsigned int i = 0; i < 255; ++i) \n+\n+    for (unsigned int i = 0; i < 255; ++i)\n     {\n         BOOST_CHECK((OneL << i).getdouble() == ldexp(1.0,i));\n         if (i < 160) BOOST_CHECK((OneS << i).getdouble() == ldexp(1.0,i));\n     }\n     BOOST_CHECK(ZeroL.getdouble() == 0.0);\n     BOOST_CHECK(ZeroS.getdouble() == 0.0);\n-    for (int i = 256; i > 53; --i) \n+    for (int i = 256; i > 53; --i)\n         BOOST_CHECK(almostEqual((R1L>>(256-i)).getdouble(), ldexp(R1Ldouble,i)));\n-    for (int i = 160; i > 53; --i) \n+    for (int i = 160; i > 53; --i)\n         BOOST_CHECK(almostEqual((R1S>>(160-i)).getdouble(), ldexp(R1Sdouble,i)));\n     uint64_t R1L64part = (R1L>>192).GetLow64();\n     uint64_t R1S64part = (R1S>>96).GetLow64();\n@@ -677,7 +677,7 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n \n BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n {\n-    uint256 num;\n+    arith_uint256 num;\n     bool fNegative;\n     bool fOverflow;\n     num.SetCompact(0, &fNegative, &fOverflow);\n@@ -809,21 +809,21 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     // ~R1L give a base_uint<256>\n     BOOST_CHECK((~~R1L >> 10) == (R1L >> 10)); BOOST_CHECK((~~R1S >> 10) == (R1S >> 10));\n     BOOST_CHECK((~~R1L << 10) == (R1L << 10)); BOOST_CHECK((~~R1S << 10) == (R1S << 10));\n-    BOOST_CHECK(!(~~R1L < R1L)); BOOST_CHECK(!(~~R1S < R1S)); \n-    BOOST_CHECK(~~R1L <= R1L); BOOST_CHECK(~~R1S <= R1S); \n-    BOOST_CHECK(!(~~R1L > R1L)); BOOST_CHECK(!(~~R1S > R1S)); \n-    BOOST_CHECK(~~R1L >= R1L); BOOST_CHECK(~~R1S >= R1S); \n-    BOOST_CHECK(!(R1L < ~~R1L)); BOOST_CHECK(!(R1S < ~~R1S)); \n-    BOOST_CHECK(R1L <= ~~R1L); BOOST_CHECK(R1S <= ~~R1S); \n-    BOOST_CHECK(!(R1L > ~~R1L)); BOOST_CHECK(!(R1S > ~~R1S)); \n-    BOOST_CHECK(R1L >= ~~R1L); BOOST_CHECK(R1S >= ~~R1S); \n-    \n+    BOOST_CHECK(!(~~R1L < R1L)); BOOST_CHECK(!(~~R1S < R1S));\n+    BOOST_CHECK(~~R1L <= R1L); BOOST_CHECK(~~R1S <= R1S);\n+    BOOST_CHECK(!(~~R1L > R1L)); BOOST_CHECK(!(~~R1S > R1S));\n+    BOOST_CHECK(~~R1L >= R1L); BOOST_CHECK(~~R1S >= R1S);\n+    BOOST_CHECK(!(R1L < ~~R1L)); BOOST_CHECK(!(R1S < ~~R1S));\n+    BOOST_CHECK(R1L <= ~~R1L); BOOST_CHECK(R1S <= ~~R1S);\n+    BOOST_CHECK(!(R1L > ~~R1L)); BOOST_CHECK(!(R1S > ~~R1S));\n+    BOOST_CHECK(R1L >= ~~R1L); BOOST_CHECK(R1S >= ~~R1S);\n+\n     BOOST_CHECK(~~R1L + R2L == R1L + ~~R2L);\n     BOOST_CHECK(~~R1S + R2S == R1S + ~~R2S);\n     BOOST_CHECK(~~R1L - R2L == R1L - ~~R2L);\n     BOOST_CHECK(~~R1S - R2S == R1S - ~~R2S);\n-    BOOST_CHECK(~R1L != R1L); BOOST_CHECK(R1L != ~R1L); \n-    BOOST_CHECK(~R1S != R1S); BOOST_CHECK(R1S != ~R1S); \n+    BOOST_CHECK(~R1L != R1L); BOOST_CHECK(R1L != ~R1L);\n+    BOOST_CHECK(~R1S != R1S); BOOST_CHECK(R1S != ~R1S);\n     unsigned char TmpArray[32];\n     CHECKBITWISEOPERATOR(~R1,R2,|)\n     CHECKBITWISEOPERATOR(~R1,R2,^)\n@@ -834,4 +834,3 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n-",
        "previous_filename": "src/test/uint256_tests.cpp"
      },
      {
        "sha": "3b1334a032438e57483cbb569f2f1e3c0fa4f831",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 246,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -11,158 +11,25 @@\n #include <string.h>\n \n template <unsigned int BITS>\n-base_uint<BITS>::base_uint(const std::string& str)\n+base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n {\n-    SetHex(str);\n+    assert(vch.size() == sizeof(data));\n+    memcpy(data, &vch[0], sizeof(data));\n }\n \n template <unsigned int BITS>\n-base_uint<BITS>::base_uint(const std::vector<unsigned char>& vch)\n+std::string base_blob<BITS>::GetHex() const\n {\n-    if (vch.size() != sizeof(pn))\n-        throw uint_error(\"Converting vector of wrong size to base_uint\");\n-    memcpy(pn, &vch[0], sizeof(pn));\n+    char psz[sizeof(data) * 2 + 1];\n+    for (unsigned int i = 0; i < sizeof(data); i++)\n+        sprintf(psz + i * 2, \"%02x\", data[sizeof(data) - i - 1]);\n+    return std::string(psz, psz + sizeof(data) * 2);\n }\n \n template <unsigned int BITS>\n-base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n+void base_blob<BITS>::SetHex(const char* psz)\n {\n-    base_uint<BITS> a(*this);\n-    for (int i = 0; i < WIDTH; i++)\n-        pn[i] = 0;\n-    int k = shift / 32;\n-    shift = shift % 32;\n-    for (int i = 0; i < WIDTH; i++) {\n-        if (i + k + 1 < WIDTH && shift != 0)\n-            pn[i + k + 1] |= (a.pn[i] >> (32 - shift));\n-        if (i + k < WIDTH)\n-            pn[i + k] |= (a.pn[i] << shift);\n-    }\n-    return *this;\n-}\n-\n-template <unsigned int BITS>\n-base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n-{\n-    base_uint<BITS> a(*this);\n-    for (int i = 0; i < WIDTH; i++)\n-        pn[i] = 0;\n-    int k = shift / 32;\n-    shift = shift % 32;\n-    for (int i = 0; i < WIDTH; i++) {\n-        if (i - k - 1 >= 0 && shift != 0)\n-            pn[i - k - 1] |= (a.pn[i] << (32 - shift));\n-        if (i - k >= 0)\n-            pn[i - k] |= (a.pn[i] >> shift);\n-    }\n-    return *this;\n-}\n-\n-template <unsigned int BITS>\n-base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n-{\n-    uint64_t carry = 0;\n-    for (int i = 0; i < WIDTH; i++) {\n-        uint64_t n = carry + (uint64_t)b32 * pn[i];\n-        pn[i] = n & 0xffffffff;\n-        carry = n >> 32;\n-    }\n-    return *this;\n-}\n-\n-template <unsigned int BITS>\n-base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n-{\n-    base_uint<BITS> a = *this;\n-    *this = 0;\n-    for (int j = 0; j < WIDTH; j++) {\n-        uint64_t carry = 0;\n-        for (int i = 0; i + j < WIDTH; i++) {\n-            uint64_t n = carry + pn[i + j] + (uint64_t)a.pn[j] * b.pn[i];\n-            pn[i + j] = n & 0xffffffff;\n-            carry = n >> 32;\n-        }\n-    }\n-    return *this;\n-}\n-\n-template <unsigned int BITS>\n-base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n-{\n-    base_uint<BITS> div = b;     // make a copy, so we can shift.\n-    base_uint<BITS> num = *this; // make a copy, so we can subtract.\n-    *this = 0;                   // the quotient.\n-    int num_bits = num.bits();\n-    int div_bits = div.bits();\n-    if (div_bits == 0)\n-        throw uint_error(\"Division by zero\");\n-    if (div_bits > num_bits) // the result is certainly 0.\n-        return *this;\n-    int shift = num_bits - div_bits;\n-    div <<= shift; // shift so that div and num align.\n-    while (shift >= 0) {\n-        if (num >= div) {\n-            num -= div;\n-            pn[shift / 32] |= (1 << (shift & 31)); // set a bit of the result.\n-        }\n-        div >>= 1; // shift back.\n-        shift--;\n-    }\n-    // num now contains the remainder of the division.\n-    return *this;\n-}\n-\n-template <unsigned int BITS>\n-int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n-{\n-    for (int i = WIDTH - 1; i >= 0; i--) {\n-        if (pn[i] < b.pn[i])\n-            return -1;\n-        if (pn[i] > b.pn[i])\n-            return 1;\n-    }\n-    return 0;\n-}\n-\n-template <unsigned int BITS>\n-bool base_uint<BITS>::EqualTo(uint64_t b) const\n-{\n-    for (int i = WIDTH - 1; i >= 2; i--) {\n-        if (pn[i])\n-            return false;\n-    }\n-    if (pn[1] != (b >> 32))\n-        return false;\n-    if (pn[0] != (b & 0xfffffffful))\n-        return false;\n-    return true;\n-}\n-\n-template <unsigned int BITS>\n-double base_uint<BITS>::getdouble() const\n-{\n-    double ret = 0.0;\n-    double fact = 1.0;\n-    for (int i = 0; i < WIDTH; i++) {\n-        ret += fact * pn[i];\n-        fact *= 4294967296.0;\n-    }\n-    return ret;\n-}\n-\n-template <unsigned int BITS>\n-std::string base_uint<BITS>::GetHex() const\n-{\n-    char psz[sizeof(pn) * 2 + 1];\n-    for (unsigned int i = 0; i < sizeof(pn); i++)\n-        sprintf(psz + i * 2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n-    return std::string(psz, psz + sizeof(pn) * 2);\n-}\n-\n-template <unsigned int BITS>\n-void base_uint<BITS>::SetHex(const char* psz)\n-{\n-    memset(pn, 0, sizeof(pn));\n+    memset(data, 0, sizeof(data));\n \n     // skip leading spaces\n     while (isspace(*psz))\n@@ -177,7 +44,7 @@ void base_uint<BITS>::SetHex(const char* psz)\n     while (::HexDigit(*psz) != -1)\n         psz++;\n     psz--;\n-    unsigned char* p1 = (unsigned char*)pn;\n+    unsigned char* p1 = (unsigned char*)data;\n     unsigned char* pend = p1 + WIDTH * 4;\n     while (psz >= pbegin && p1 < pend) {\n         *p1 = ::HexDigit(*psz--);\n@@ -189,110 +56,30 @@ void base_uint<BITS>::SetHex(const char* psz)\n }\n \n template <unsigned int BITS>\n-void base_uint<BITS>::SetHex(const std::string& str)\n+void base_blob<BITS>::SetHex(const std::string& str)\n {\n     SetHex(str.c_str());\n }\n \n template <unsigned int BITS>\n-std::string base_uint<BITS>::ToString() const\n+std::string base_blob<BITS>::ToString() const\n {\n     return (GetHex());\n }\n \n-template <unsigned int BITS>\n-unsigned int base_uint<BITS>::bits() const\n-{\n-    for (int pos = WIDTH - 1; pos >= 0; pos--) {\n-        if (pn[pos]) {\n-            for (int bits = 31; bits > 0; bits--) {\n-                if (pn[pos] & 1 << bits)\n-                    return 32 * pos + bits + 1;\n-            }\n-            return 32 * pos + 1;\n-        }\n-    }\n-    return 0;\n-}\n-\n-// Explicit instantiations for base_uint<160>\n-template base_uint<160>::base_uint(const std::string&);\n-template base_uint<160>::base_uint(const std::vector<unsigned char>&);\n-template base_uint<160>& base_uint<160>::operator<<=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator>>=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator*=(uint32_t b32);\n-template base_uint<160>& base_uint<160>::operator*=(const base_uint<160>& b);\n-template base_uint<160>& base_uint<160>::operator/=(const base_uint<160>& b);\n-template int base_uint<160>::CompareTo(const base_uint<160>&) const;\n-template bool base_uint<160>::EqualTo(uint64_t) const;\n-template double base_uint<160>::getdouble() const;\n-template std::string base_uint<160>::GetHex() const;\n-template std::string base_uint<160>::ToString() const;\n-template void base_uint<160>::SetHex(const char*);\n-template void base_uint<160>::SetHex(const std::string&);\n-template unsigned int base_uint<160>::bits() const;\n+// Explicit instantiations for base_blob<160>\n+template base_blob<160>::base_blob(const std::vector<unsigned char>&);\n+template std::string base_blob<160>::GetHex() const;\n+template std::string base_blob<160>::ToString() const;\n+template void base_blob<160>::SetHex(const char*);\n+template void base_blob<160>::SetHex(const std::string&);\n \n-// Explicit instantiations for base_uint<256>\n-template base_uint<256>::base_uint(const std::string&);\n-template base_uint<256>::base_uint(const std::vector<unsigned char>&);\n-template base_uint<256>& base_uint<256>::operator<<=(unsigned int);\n-template base_uint<256>& base_uint<256>::operator>>=(unsigned int);\n-template base_uint<256>& base_uint<256>::operator*=(uint32_t b32);\n-template base_uint<256>& base_uint<256>::operator*=(const base_uint<256>& b);\n-template base_uint<256>& base_uint<256>::operator/=(const base_uint<256>& b);\n-template int base_uint<256>::CompareTo(const base_uint<256>&) const;\n-template bool base_uint<256>::EqualTo(uint64_t) const;\n-template double base_uint<256>::getdouble() const;\n-template std::string base_uint<256>::GetHex() const;\n-template std::string base_uint<256>::ToString() const;\n-template void base_uint<256>::SetHex(const char*);\n-template void base_uint<256>::SetHex(const std::string&);\n-template unsigned int base_uint<256>::bits() const;\n-\n-// This implementation directly uses shifts instead of going\n-// through an intermediate MPI representation.\n-uint256& uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)\n-{\n-    int nSize = nCompact >> 24;\n-    uint32_t nWord = nCompact & 0x007fffff;\n-    if (nSize <= 3) {\n-        nWord >>= 8 * (3 - nSize);\n-        *this = nWord;\n-    } else {\n-        *this = nWord;\n-        *this <<= 8 * (nSize - 3);\n-    }\n-    if (pfNegative)\n-        *pfNegative = nWord != 0 && (nCompact & 0x00800000) != 0;\n-    if (pfOverflow)\n-        *pfOverflow = nWord != 0 && ((nSize > 34) ||\n-                                     (nWord > 0xff && nSize > 33) ||\n-                                     (nWord > 0xffff && nSize > 32));\n-    return *this;\n-}\n-\n-uint32_t uint256::GetCompact(bool fNegative) const\n-{\n-    int nSize = (bits() + 7) / 8;\n-    uint32_t nCompact = 0;\n-    if (nSize <= 3) {\n-        nCompact = GetLow64() << 8 * (3 - nSize);\n-    } else {\n-        uint256 bn = *this >> 8 * (nSize - 3);\n-        nCompact = bn.GetLow64();\n-    }\n-    // The 0x00800000 bit denotes the sign.\n-    // Thus, if it is already set, divide the mantissa by 256 and increase the exponent.\n-    if (nCompact & 0x00800000) {\n-        nCompact >>= 8;\n-        nSize++;\n-    }\n-    assert((nCompact & ~0x007fffff) == 0);\n-    assert(nSize < 256);\n-    nCompact |= nSize << 24;\n-    nCompact |= (fNegative && (nCompact & 0x007fffff) ? 0x00800000 : 0);\n-    return nCompact;\n-}\n+// Explicit instantiations for base_blob<256>\n+template base_blob<256>::base_blob(const std::vector<unsigned char>&);\n+template std::string base_blob<256>::GetHex() const;\n+template std::string base_blob<256>::ToString() const;\n+template void base_blob<256>::SetHex(const char*);\n+template void base_blob<256>::SetHex(const std::string&);\n \n static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n {\n@@ -339,18 +126,20 @@ static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n uint64_t uint256::GetHash(const uint256& salt) const\n {\n     uint32_t a, b, c;\n+    const uint32_t *pn = (const uint32_t*)data;\n+    const uint32_t *salt_pn = (const uint32_t*)salt.data;\n     a = b = c = 0xdeadbeef + (WIDTH << 2);\n \n-    a += pn[0] ^ salt.pn[0];\n-    b += pn[1] ^ salt.pn[1];\n-    c += pn[2] ^ salt.pn[2];\n+    a += pn[0] ^ salt_pn[0];\n+    b += pn[1] ^ salt_pn[1];\n+    c += pn[2] ^ salt_pn[2];\n     HashMix(a, b, c);\n-    a += pn[3] ^ salt.pn[3];\n-    b += pn[4] ^ salt.pn[4];\n-    c += pn[5] ^ salt.pn[5];\n+    a += pn[3] ^ salt_pn[3];\n+    b += pn[4] ^ salt_pn[4];\n+    c += pn[5] ^ salt_pn[5];\n     HashMix(a, b, c);\n-    a += pn[6] ^ salt.pn[6];\n-    b += pn[7] ^ salt.pn[7];\n+    a += pn[6] ^ salt_pn[6];\n+    b += pn[7] ^ salt_pn[7];\n     HashFinal(a, b, c);\n \n     return ((((uint64_t)b) << 32) | c);"
      },
      {
        "sha": "6d016ab164867096e0e9b59ce89b6e8ec17f76aa",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 72,
        "deletions": 267,
        "changes": 339,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc6070342b9f43bcf125526e6a3c8ed34e29a71/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "patch": "@@ -13,217 +13,37 @@\n #include <string>\n #include <vector>\n \n-class uint_error : public std::runtime_error {\n-public:\n-    explicit uint_error(const std::string& str) : std::runtime_error(str) {}\n-};\n-\n-/** Template base class for unsigned big integers. */\n+/** Template base class for fixed-sized opaque blobs. */\n template<unsigned int BITS>\n-class base_uint\n+class base_blob\n {\n protected:\n-    enum { WIDTH=BITS/32 };\n-    uint32_t pn[WIDTH];\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n public:\n-\n-    base_uint()\n+    base_blob()\n     {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = 0;\n+        memset(data, 0, sizeof(data));\n     }\n \n-    base_uint(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-    }\n-\n-    base_uint& operator=(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-        return *this;\n-    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n \n-    base_uint(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-    }\n-\n-    explicit base_uint(const std::string& str);\n-    explicit base_uint(const std::vector<unsigned char>& vch);\n-\n-    bool operator!() const\n+    bool IsNull() const\n     {\n         for (int i = 0; i < WIDTH; i++)\n-            if (pn[i] != 0)\n+            if (data[i] != 0)\n                 return false;\n         return true;\n     }\n \n-    const base_uint operator~() const\n-    {\n-        base_uint ret;\n-        for (int i = 0; i < WIDTH; i++)\n-            ret.pn[i] = ~pn[i];\n-        return ret;\n-    }\n-\n-    const base_uint operator-() const\n-    {\n-        base_uint ret;\n-        for (int i = 0; i < WIDTH; i++)\n-            ret.pn[i] = ~pn[i];\n-        ret++;\n-        return ret;\n-    }\n-\n-    double getdouble() const;\n-\n-    base_uint& operator=(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-        return *this;\n-    }\n-\n-    base_uint& operator^=(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] ^= b.pn[i];\n-        return *this;\n-    }\n-\n-    base_uint& operator&=(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] &= b.pn[i];\n-        return *this;\n-    }\n-\n-    base_uint& operator|=(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] |= b.pn[i];\n-        return *this;\n-    }\n-\n-    base_uint& operator^=(uint64_t b)\n-    {\n-        pn[0] ^= (unsigned int)b;\n-        pn[1] ^= (unsigned int)(b >> 32);\n-        return *this;\n-    }\n-\n-    base_uint& operator|=(uint64_t b)\n-    {\n-        pn[0] |= (unsigned int)b;\n-        pn[1] |= (unsigned int)(b >> 32);\n-        return *this;\n-    }\n-\n-    base_uint& operator<<=(unsigned int shift);\n-    base_uint& operator>>=(unsigned int shift);\n-\n-    base_uint& operator+=(const base_uint& b)\n-    {\n-        uint64_t carry = 0;\n-        for (int i = 0; i < WIDTH; i++)\n-        {\n-            uint64_t n = carry + pn[i] + b.pn[i];\n-            pn[i] = n & 0xffffffff;\n-            carry = n >> 32;\n-        }\n-        return *this;\n-    }\n-\n-    base_uint& operator-=(const base_uint& b)\n-    {\n-        *this += -b;\n-        return *this;\n-    }\n-\n-    base_uint& operator+=(uint64_t b64)\n-    {\n-        base_uint b;\n-        b = b64;\n-        *this += b;\n-        return *this;\n-    }\n-\n-    base_uint& operator-=(uint64_t b64)\n-    {\n-        base_uint b;\n-        b = b64;\n-        *this += -b;\n-        return *this;\n-    }\n-\n-    base_uint& operator*=(uint32_t b32);\n-    base_uint& operator*=(const base_uint& b);\n-    base_uint& operator/=(const base_uint& b);\n-\n-    base_uint& operator++()\n-    {\n-        // prefix operator\n-        int i = 0;\n-        while (++pn[i] == 0 && i < WIDTH-1)\n-            i++;\n-        return *this;\n-    }\n-\n-    const base_uint operator++(int)\n-    {\n-        // postfix operator\n-        const base_uint ret = *this;\n-        ++(*this);\n-        return ret;\n-    }\n-\n-    base_uint& operator--()\n-    {\n-        // prefix operator\n-        int i = 0;\n-        while (--pn[i] == (uint32_t)-1 && i < WIDTH-1)\n-            i++;\n-        return *this;\n-    }\n-\n-    const base_uint operator--(int)\n+    void SetNull()\n     {\n-        // postfix operator\n-        const base_uint ret = *this;\n-        --(*this);\n-        return ret;\n+        memset(data, 0, sizeof(data));\n     }\n \n-    int CompareTo(const base_uint& b) const;\n-    bool EqualTo(uint64_t b) const;\n-\n-    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }\n-    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }\n-    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }\n-    friend inline const base_uint operator/(const base_uint& a, const base_uint& b) { return base_uint(a) /= b; }\n-    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }\n-    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }\n-    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }\n-    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n-    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n-    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n-    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n-    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n-    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) < 0; }\n \n     std::string GetHex() const;\n     void SetHex(const char* psz);\n@@ -232,122 +52,107 @@ class base_uint\n \n     unsigned char* begin()\n     {\n-        return (unsigned char*)&pn[0];\n+        return &data[0];\n     }\n \n     unsigned char* end()\n     {\n-        return (unsigned char*)&pn[WIDTH];\n+        return &data[WIDTH];\n     }\n \n     const unsigned char* begin() const\n     {\n-        return (unsigned char*)&pn[0];\n+        return &data[0];\n     }\n \n     const unsigned char* end() const\n     {\n-        return (unsigned char*)&pn[WIDTH];\n+        return &data[WIDTH];\n     }\n \n     unsigned int size() const\n     {\n-        return sizeof(pn);\n-    }\n-\n-    /**\n-     * Returns the position of the highest bit set plus one, or zero if the\n-     * value is zero.\n-     */\n-    unsigned int bits() const;\n-\n-    uint64_t GetLow64() const\n-    {\n-        assert(WIDTH >= 2);\n-        return pn[0] | (uint64_t)pn[1] << 32;\n+        return sizeof(data);\n     }\n \n     unsigned int GetSerializeSize(int nType, int nVersion) const\n     {\n-        return sizeof(pn);\n+        return sizeof(data);\n     }\n \n     template<typename Stream>\n     void Serialize(Stream& s, int nType, int nVersion) const\n     {\n-        s.write((char*)pn, sizeof(pn));\n+        s.write((char*)data, sizeof(data));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s, int nType, int nVersion)\n     {\n-        s.read((char*)pn, sizeof(pn));\n-    }\n-\n-    // Temporary for migration to opaque uint160/256\n-    uint64_t GetCheapHash() const\n-    {\n-        return GetLow64();\n-    }\n-    void SetNull()\n-    {\n-        memset(pn, 0, sizeof(pn));\n-    }\n-    bool IsNull() const\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            if (pn[i] != 0)\n-                return false;\n-        return true;\n+        s.read((char*)data, sizeof(data));\n     }\n };\n \n-/** 160-bit unsigned big integer. */\n-class uint160 : public base_uint<160> {\n+/** 160-bit opaque blob.\n+ * @note This type is called uint160 for historical reasons only. It is an opaque\n+ * blob of 160 bits and has no integer operations.\n+ */\n+class uint160 : public base_blob<160> {\n public:\n     uint160() {}\n-    uint160(const base_uint<160>& b) : base_uint<160>(b) {}\n-    uint160(uint64_t b) : base_uint<160>(b) {}\n-    explicit uint160(const std::string& str) : base_uint<160>(str) {}\n-    explicit uint160(const std::vector<unsigned char>& vch) : base_uint<160>(vch) {}\n+    uint160(const base_blob<160>& b) : base_blob<160>(b) {}\n+    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n };\n \n-/** 256-bit unsigned big integer. */\n-class uint256 : public base_uint<256> {\n+/** 256-bit opaque blob.\n+ * @note This type is called uint256 for historical reasons only. It is an\n+ * opaque blob of 256 bits and has no integer operations. Use arith_uint256 if\n+ * those are required.\n+ */\n+class uint256 : public base_blob<256> {\n public:\n     uint256() {}\n-    uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n-    uint256(uint64_t b) : base_uint<256>(b) {}\n-    explicit uint256(const std::string& str) : base_uint<256>(str) {}\n-    explicit uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n-    \n-    /**\n-     * The \"compact\" format is a representation of a whole\n-     * number N using an unsigned 32bit number similar to a\n-     * floating point format.\n-     * The most significant 8 bits are the unsigned exponent of base 256.\n-     * This exponent can be thought of as \"number of bytes of N\".\n-     * The lower 23 bits are the mantissa.\n-     * Bit number 24 (0x800000) represents the sign of N.\n-     * N = (-1^sign) * mantissa * 256^(exponent-3)\n-     * \n-     * Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n-     * MPI uses the most significant bit of the first byte as sign.\n-     * Thus 0x1234560000 is compact (0x05123456)\n-     * and  0xc0de000000 is compact (0x0600c0de)\n-     * \n-     * Bitcoin only uses this \"compact\" format for encoding difficulty\n-     * targets, which are unsigned 256bit quantities.  Thus, all the\n-     * complexities of the sign bit and using base 256 are probably an\n-     * implementation accident.\n+    uint256(const base_blob<256>& b) : base_blob<256>(b) {}\n+    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n      */\n-    uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n-    uint32_t GetCompact(bool fNegative = false) const;\n+    uint64_t GetCheapHash() const\n+    {\n+        uint64_t result;\n+        memcpy((void*)&result, (void*)data, 8);\n+        return result;\n+    }\n \n+    /** A more secure, salted hash function.\n+     * @note This hash is not stable between little and big endian.\n+     */\n     uint64_t GetHash(const uint256& salt) const;\n };\n \n-// Temporary for migration to opaque uint160/256\n-inline uint256 uint256S(const std::string &x) { return uint256(x); }\n+/* uint256 from const char *.\n+ * This is a separate function because the constructor uint256(const char*) can result\n+ * in dangerously catching uint256(0).\n+ */\n+inline uint256 uint256S(const char *str)\n+{\n+    uint256 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+/* uint256 from std::string.\n+ * This is a separate function because the constructor uint256(const std::string &str) can result\n+ * in dangerously catching uint256(0) via std::string(const char*).\n+ */\n+inline uint256 uint256S(const std::string& str)\n+{\n+    uint256 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n \n #endif // BITCOIN_UINT256_H"
      }
    ]
  },
  {
    "sha": "92cdb1aace3c7343e9c9472061508d3b01d9883d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmNkYjFhYWNlM2M3MzQzZTljOTQ3MjA2MTUwOGQzYjAxZDk4ODNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T16:29:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:35Z"
      },
      "message": "Add conversion functions arith_uint256<->uint_256",
      "tree": {
        "sha": "19856b0e429cd7f5a166c3767e814f61f8a654f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19856b0e429cd7f5a166c3767e814f61f8a654f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92cdb1aace3c7343e9c9472061508d3b01d9883d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92cdb1aace3c7343e9c9472061508d3b01d9883d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92cdb1aace3c7343e9c9472061508d3b01d9883d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92cdb1aace3c7343e9c9472061508d3b01d9883d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc6070342b9f43bcf125526e6a3c8ed34e29a71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc6070342b9f43bcf125526e6a3c8ed34e29a71"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0b6a6a3bdef3753fb1b5609fb84c065aa2d7c76",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92cdb1aace3c7343e9c9472061508d3b01d9883d/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92cdb1aace3c7343e9c9472061508d3b01d9883d/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=92cdb1aace3c7343e9c9472061508d3b01d9883d",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"arith_uint256.h\"\n \n+#include \"uint256.h\"\n #include \"utilstrencodings.h\"\n \n #include <stdio.h>\n@@ -355,3 +356,18 @@ uint64_t arith_uint256::GetHash(const arith_uint256& salt) const\n \n     return ((((uint64_t)b) << 32) | c);\n }\n+\n+uint256 ArithToUint256(const arith_uint256 &a)\n+{\n+    uint256 b;\n+    // TODO: needs bswap32 on big-endian\n+    memcpy(b.begin(), a.pn, a.size());\n+    return b;\n+}\n+arith_uint256 UintToArith256(const uint256 &a)\n+{\n+    arith_uint256 b;\n+    // TODO: needs bswap32 on big-endian\n+    memcpy(b.pn, a.begin(), a.size());\n+    return b;\n+}"
      },
      {
        "sha": "5cb04f3c3caf249c92ebba7df03e90f00e6b53f7",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92cdb1aace3c7343e9c9472061508d3b01d9883d/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92cdb1aace3c7343e9c9472061508d3b01d9883d/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=92cdb1aace3c7343e9c9472061508d3b01d9883d",
        "patch": "@@ -13,6 +13,8 @@\n #include <string>\n #include <vector>\n \n+class uint256;\n+\n class uint_error : public std::runtime_error {\n public:\n     explicit uint_error(const std::string& str) : std::runtime_error(str) {}\n@@ -345,6 +347,12 @@ class arith_uint256 : public base_uint<256> {\n     uint32_t GetCompact(bool fNegative = false) const;\n \n     uint64_t GetHash(const arith_uint256& salt) const;\n+\n+    friend uint256 ArithToUint256(const arith_uint256 &);\n+    friend arith_uint256 UintToArith256(const uint256 &);\n };\n \n+uint256 ArithToUint256(const arith_uint256 &);\n+arith_uint256 UintToArith256(const uint256 &);\n+\n #endif // BITCOIN_UINT256_H"
      }
    ]
  },
  {
    "sha": "dba2e9141a4f07154829bdaed35adaf7af7908d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmEyZTkxNDFhNGYwNzE1NDgyOWJkYWVkMzVhZGFmN2FmNzkwOGQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T14:50:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:35Z"
      },
      "message": "Add tests for new uint256",
      "tree": {
        "sha": "4ee4fcf07d394f7dba3072cca2ae1ee3b4fc70f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ee4fcf07d394f7dba3072cca2ae1ee3b4fc70f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba2e9141a4f07154829bdaed35adaf7af7908d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba2e9141a4f07154829bdaed35adaf7af7908d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba2e9141a4f07154829bdaed35adaf7af7908d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba2e9141a4f07154829bdaed35adaf7af7908d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92cdb1aace3c7343e9c9472061508d3b01d9883d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92cdb1aace3c7343e9c9472061508d3b01d9883d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92cdb1aace3c7343e9c9472061508d3b01d9883d"
      }
    ],
    "stats": {
      "total": 269,
      "additions": 269,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f10702d86fb835ac82ecf389c272da4a99c2f16",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba2e9141a4f07154829bdaed35adaf7af7908d3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba2e9141a4f07154829bdaed35adaf7af7908d3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=dba2e9141a4f07154829bdaed35adaf7af7908d3",
        "patch": "@@ -68,6 +68,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp\n "
      },
      {
        "sha": "5b33846ba94679930d4fc9f086d8550f25b96331",
        "filename": "src/test/uint256_tests.cpp",
        "status": "added",
        "additions": 268,
        "deletions": 0,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba2e9141a4f07154829bdaed35adaf7af7908d3/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba2e9141a4f07154829bdaed35adaf7af7908d3/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=dba2e9141a4f07154829bdaed35adaf7af7908d3",
        "patch": "@@ -0,0 +1,268 @@\n+// Copyright (c) 2011-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"arith_uint256.h\"\n+#include \"uint256.h\"\n+#include \"version.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n+#include <string>\n+#include <stdio.h>\n+\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n+\n+const unsigned char R1Array[] =\n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n+\n+const unsigned char R2Array[] =\n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n+\n+const unsigned char ZeroArray[] =\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n+\n+const unsigned char OneArray[] =\n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n+\n+const unsigned char MaxArray[] =\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n+\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i)\n+    {\n+        Stream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }\n+    return Stream.str();\n+}\n+\n+inline uint160 uint160S(const char *str)\n+{\n+    uint160 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+inline uint160 uint160S(const std::string& str)\n+{\n+    uint160 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n+{\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256S(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256S(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256S(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256S(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256S(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256S(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256S(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256S(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256S(R1ArrayHex));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160S(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160S(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160S(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160S(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160S(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160S(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160S(\"   0x\"+R1S.ToString()+\"   \") == R1S);\n+    BOOST_CHECK(uint160S(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160S(R1ArrayHex));\n+\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 LastL;\n+    for (int i = 255; i >= 0; --i) {\n+        uint256 TmpL;\n+        *(TmpL.begin() + (i>>3)) |= 1<<(7-(i&7));\n+        BOOST_CHECK( LastL < TmpL );\n+        LastL = TmpL;\n+    }\n+\n+    BOOST_CHECK( ZeroL < R1L );\n+    BOOST_CHECK( R2L < R1L );\n+    BOOST_CHECK( ZeroL < OneL );\n+    BOOST_CHECK( OneL < MaxL );\n+    BOOST_CHECK( R1L < MaxL );\n+    BOOST_CHECK( R2L < MaxL );\n+\n+    uint160 LastS;\n+    for (int i = 159; i >= 0; --i) {\n+        uint160 TmpS;\n+        *(TmpS.begin() + (i>>3)) |= 1<<(7-(i&7));\n+        BOOST_CHECK( LastS < TmpS );\n+        LastS = TmpS;\n+    }\n+    BOOST_CHECK( ZeroS < R1S );\n+    BOOST_CHECK( R2S < R1S );\n+    BOOST_CHECK( ZeroS < OneS );\n+    BOOST_CHECK( OneS < MaxS );\n+    BOOST_CHECK( R1S < MaxS );\n+    BOOST_CHECK( R2S < MaxS );\n+}\n+\n+BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize\n+{\n+    BOOST_CHECK(R1L.GetHex() == R1L.ToString());\n+    BOOST_CHECK(R2L.GetHex() == R2L.ToString());\n+    BOOST_CHECK(OneL.GetHex() == OneL.ToString());\n+    BOOST_CHECK(MaxL.GetHex() == MaxL.ToString());\n+    uint256 TmpL(R1L);\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL.SetHex(R2L.ToString());   BOOST_CHECK(TmpL == R2L);\n+    TmpL.SetHex(ZeroL.ToString()); BOOST_CHECK(TmpL == uint256());\n+\n+    TmpL.SetHex(R1L.ToString());\n+    BOOST_CHECK(memcmp(R1L.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(TmpL.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n+    BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n+    BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n+    BOOST_CHECK(R1L.size() == sizeof(R1L));\n+    BOOST_CHECK(sizeof(R1L) == 32);\n+    BOOST_CHECK(R1L.size() == 32);\n+    BOOST_CHECK(R2L.size() == 32);\n+    BOOST_CHECK(ZeroL.size() == 32);\n+    BOOST_CHECK(MaxL.size() == 32);\n+    BOOST_CHECK(R1L.begin() + 32 == R1L.end());\n+    BOOST_CHECK(R2L.begin() + 32 == R2L.end());\n+    BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n+    BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n+    BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n+    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+\n+    std::stringstream ss;\n+    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1L == TmpL);\n+    ss.str(\"\");\n+    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroL == TmpL);\n+    ss.str(\"\");\n+    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxL == TmpL);\n+    ss.str(\"\");\n+\n+    BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n+    BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n+    BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n+    BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n+    uint160 TmpS(R1S);\n+    BOOST_CHECK(TmpS == R1S);\n+    TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n+    TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == uint160());\n+\n+    TmpS.SetHex(R1S.ToString());\n+    BOOST_CHECK(memcmp(R1S.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(TmpS.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n+    BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n+    BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n+    BOOST_CHECK(R1S.size() == sizeof(R1S));\n+    BOOST_CHECK(sizeof(R1S) == 20);\n+    BOOST_CHECK(R1S.size() == 20);\n+    BOOST_CHECK(R2S.size() == 20);\n+    BOOST_CHECK(ZeroS.size() == 20);\n+    BOOST_CHECK(MaxS.size() == 20);\n+    BOOST_CHECK(R1S.begin() + 20 == R1S.end());\n+    BOOST_CHECK(R2S.begin() + 20 == R2S.end());\n+    BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n+    BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n+    BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n+    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+\n+    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1S == TmpS);\n+    ss.str(\"\");\n+    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroS == TmpS);\n+    ss.str(\"\");\n+    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxS == TmpS);\n+    ss.str(\"\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( conversion )\n+{\n+    BOOST_CHECK(ArithToUint256(UintToArith256(ZeroL)) == ZeroL);\n+    BOOST_CHECK(ArithToUint256(UintToArith256(OneL)) == OneL);\n+    BOOST_CHECK(ArithToUint256(UintToArith256(R1L)) == R1L);\n+    BOOST_CHECK(ArithToUint256(UintToArith256(R2L)) == R2L);\n+    BOOST_CHECK(UintToArith256(ZeroL) == 0);\n+    BOOST_CHECK(UintToArith256(OneL) == 1);\n+    BOOST_CHECK(ArithToUint256(0) == ZeroL);\n+    BOOST_CHECK(ArithToUint256(1) == OneL);\n+    BOOST_CHECK(arith_uint256(R1L.GetHex()) == UintToArith256(R1L));\n+    BOOST_CHECK(arith_uint256(R2L.GetHex()) == UintToArith256(R2L));\n+    BOOST_CHECK(R1L.GetHex() == UintToArith256(R1L).GetHex());\n+    BOOST_CHECK(R2L.GetHex() == UintToArith256(R2L).GetHex());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "edc720479d0749a000d5a6970da6d2d72657cf38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGM3MjA0NzlkMDc0OWEwMDBkNWE2OTcwZGE2ZDJkNzI2NTdjZjM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T14:44:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:36Z"
      },
      "message": "Remove arith_uint160\n\nWe never do 160-bit arithmetic.",
      "tree": {
        "sha": "7651a205bbb676828ec16eb11050aeb9a4cd7a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7651a205bbb676828ec16eb11050aeb9a4cd7a44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc720479d0749a000d5a6970da6d2d72657cf38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc720479d0749a000d5a6970da6d2d72657cf38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edc720479d0749a000d5a6970da6d2d72657cf38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc720479d0749a000d5a6970da6d2d72657cf38/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dba2e9141a4f07154829bdaed35adaf7af7908d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba2e9141a4f07154829bdaed35adaf7af7908d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dba2e9141a4f07154829bdaed35adaf7af7908d3"
      }
    ],
    "stats": {
      "total": 317,
      "additions": 23,
      "deletions": 294
    },
    "files": [
      {
        "sha": "12f9e7d1b18d8db7ab6981ac8372837848330d36",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc720479d0749a000d5a6970da6d2d72657cf38/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc720479d0749a000d5a6970da6d2d72657cf38/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=edc720479d0749a000d5a6970da6d2d72657cf38",
        "patch": "@@ -216,23 +216,6 @@ unsigned int base_uint<BITS>::bits() const\n     return 0;\n }\n \n-// Explicit instantiations for base_uint<160>\n-template base_uint<160>::base_uint(const std::string&);\n-template base_uint<160>::base_uint(const std::vector<unsigned char>&);\n-template base_uint<160>& base_uint<160>::operator<<=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator>>=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator*=(uint32_t b32);\n-template base_uint<160>& base_uint<160>::operator*=(const base_uint<160>& b);\n-template base_uint<160>& base_uint<160>::operator/=(const base_uint<160>& b);\n-template int base_uint<160>::CompareTo(const base_uint<160>&) const;\n-template bool base_uint<160>::EqualTo(uint64_t) const;\n-template double base_uint<160>::getdouble() const;\n-template std::string base_uint<160>::GetHex() const;\n-template std::string base_uint<160>::ToString() const;\n-template void base_uint<160>::SetHex(const char*);\n-template void base_uint<160>::SetHex(const std::string&);\n-template unsigned int base_uint<160>::bits() const;\n-\n // Explicit instantiations for base_uint<256>\n template base_uint<256>::base_uint(const std::string&);\n template base_uint<256>::base_uint(const std::vector<unsigned char>&);"
      },
      {
        "sha": "b69eef676990afb498197aa37fd420beb0415127",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc720479d0749a000d5a6970da6d2d72657cf38/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc720479d0749a000d5a6970da6d2d72657cf38/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=edc720479d0749a000d5a6970da6d2d72657cf38",
        "patch": "@@ -304,16 +304,6 @@ class base_uint\n     }\n };\n \n-/** 160-bit unsigned big integer. */\n-class arith_uint160 : public base_uint<160> {\n-public:\n-    arith_uint160() {}\n-    arith_uint160(const base_uint<160>& b) : base_uint<160>(b) {}\n-    arith_uint160(uint64_t b) : base_uint<160>(b) {}\n-    explicit arith_uint160(const std::string& str) : base_uint<160>(str) {}\n-    explicit arith_uint160(const std::vector<unsigned char>& vch) : base_uint<160>(vch) {}\n-};\n-\n /** 256-bit unsigned big integer. */\n class arith_uint256 : public base_uint<256> {\n public:"
      },
      {
        "sha": "e0c4b272599bdab10db970f22d2335e95eb7fa00",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 267,
        "changes": 290,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc720479d0749a000d5a6970da6d2d72657cf38/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc720479d0749a000d5a6970da6d2d72657cf38/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=edc720479d0749a000d5a6970da6d2d72657cf38",
        "patch": "@@ -19,39 +19,32 @@ const unsigned char R1Array[] =\n     \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n const double R1Ldouble = 0.4887374590559308955; // R1L equals roughly R1Ldouble * 2^256\n-const double R1Sdouble = 0.7096329412477836074;\n const arith_uint256 R1L = arith_uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n-const arith_uint160 R1S = arith_uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;\n \n const unsigned char R2Array[] =\n     \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n     \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n const arith_uint256 R2L = arith_uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n-const arith_uint160 R2S = arith_uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n \n const char R1LplusR2L[] = \"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\";\n \n const unsigned char ZeroArray[] =\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n const arith_uint256 ZeroL = arith_uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n-const arith_uint160 ZeroS = arith_uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n \n const unsigned char OneArray[] =\n     \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n const arith_uint256 OneL = arith_uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n-const arith_uint160 OneS = arith_uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n \n const unsigned char MaxArray[] =\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n const arith_uint256 MaxL = arith_uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n-const arith_uint160 MaxS = arith_uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n \n const arith_uint256 HalfL = (OneL << 255);\n-const arith_uint160 HalfS = (OneS << 159);\n std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n@@ -68,26 +61,19 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(1 == 0+1);\n     // constructor arith_uint256(vector<char>):\n     BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n-    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n     BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n-    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n     BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n-    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n     BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n-    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n     BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n-    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n     BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n-    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n \n     // == and !=\n-    BOOST_CHECK(R1L != R2L && R1S != R2S);\n-    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n-    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n-    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n-    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK(R1L != R2L);\n+    BOOST_CHECK(ZeroL != OneL);\n+    BOOST_CHECK(OneL != ZeroL);\n+    BOOST_CHECK(MaxL != ZeroL);\n+    BOOST_CHECK(~MaxL == ZeroL);\n     BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n-    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n \n     uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n     for (unsigned int i = 0; i < 256; ++i)\n@@ -99,15 +85,6 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    for (unsigned int i = 0; i < 160; ++i)\n-    {\n-        BOOST_CHECK(ZeroS != (OneS << i));\n-        BOOST_CHECK((OneS << i) != ZeroS);\n-        BOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n-        BOOST_CHECK(((arith_uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n-    }\n-    BOOST_CHECK(ZeroS == (OneS << 256));\n-\n     // String Constructor and Copy Constructor\n     BOOST_CHECK(arith_uint256(\"0x\"+R1L.ToString()) == R1L);\n     BOOST_CHECK(arith_uint256(\"0x\"+R2L.ToString()) == R2L);\n@@ -123,48 +100,22 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(arith_uint256(ZeroL) == ZeroL);\n     BOOST_CHECK(arith_uint256(OneL) == OneL);\n \n-    BOOST_CHECK(arith_uint160(\"0x\"+R1S.ToString()) == R1S);\n-    BOOST_CHECK(arith_uint160(\"0x\"+R2S.ToString()) == R2S);\n-    BOOST_CHECK(arith_uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n-    BOOST_CHECK(arith_uint160(\"0x\"+OneS.ToString()) == OneS);\n-    BOOST_CHECK(arith_uint160(\"0x\"+MaxS.ToString()) == MaxS);\n-    BOOST_CHECK(arith_uint160(R1S.ToString()) == R1S);\n-    BOOST_CHECK(arith_uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S);\n-    BOOST_CHECK(arith_uint160(\"\") == ZeroS);\n-    BOOST_CHECK(R1S == arith_uint160(R1ArrayHex));\n-\n-    BOOST_CHECK(arith_uint160(R1S) == R1S);\n-    BOOST_CHECK((arith_uint160(R1S^R2S)^R2S) == R1S);\n-    BOOST_CHECK(arith_uint160(ZeroS) == ZeroS);\n-    BOOST_CHECK(arith_uint160(OneS) == OneS);\n-\n     // uint64_t constructor\n     BOOST_CHECK( (R1L & arith_uint256(\"0xffffffffffffffff\")) == arith_uint256(R1LLow64));\n     BOOST_CHECK(ZeroL == arith_uint256(0));\n     BOOST_CHECK(OneL == arith_uint256(1));\n     BOOST_CHECK(arith_uint256(\"0xffffffffffffffff\") = arith_uint256(0xffffffffffffffffULL));\n-    BOOST_CHECK( (R1S & arith_uint160(\"0xffffffffffffffff\")) == arith_uint160(R1LLow64));\n-    BOOST_CHECK(ZeroS == arith_uint160(0));\n-    BOOST_CHECK(OneS == arith_uint160(1));\n-    BOOST_CHECK(arith_uint160(\"0xffffffffffffffff\") = arith_uint160(0xffffffffffffffffULL));\n \n     // Assignment (from base_uint)\n     arith_uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n     tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n     tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n     tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n     tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n-    arith_uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n-    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n-    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n-    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n-    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n \n     // Wrong length must throw exception.\n     BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n     BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n-    BOOST_CHECK_THROW(arith_uint160(std::vector<unsigned char>(OneArray,OneArray+32)), uint_error);\n-    BOOST_CHECK_THROW(arith_uint160(std::vector<unsigned char>(OneArray,OneArray+19)), uint_error);\n }\n \n void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n@@ -239,88 +190,38 @@ BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n     for (unsigned int i = 128; i < 256; ++i) {\n         BOOST_CHECK((c1L << i) == (c2L << (i-128)));\n     }\n-\n-    arith_uint160 TmpS;\n-    for (unsigned int i = 0; i < 160; ++i)\n-    {\n-        shiftArrayLeft(TmpArray, OneArray, 20, i);\n-        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (OneS << i));\n-        TmpS = OneS; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (OneS << i));\n-        BOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n-        TmpS = HalfS; TmpS >>= (159-i);\n-        BOOST_CHECK(TmpS == (OneS << i));\n-\n-        shiftArrayLeft(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S << i));\n-        TmpS = R1S; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (R1S << i));\n-\n-        shiftArrayRight(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S >> i));\n-        TmpS = R1S; TmpS >>= i;\n-        BOOST_CHECK(TmpS == (R1S >> i));\n-\n-        shiftArrayLeft(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS << i));\n-        TmpS = MaxS; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (MaxS << i));\n-\n-        shiftArrayRight(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS >> i));\n-        TmpS = MaxS; TmpS >>= i;\n-        BOOST_CHECK(TmpS == (MaxS >> i));\n-    }\n-    arith_uint160 c1S = arith_uint160(0x0123456789abcdefULL);\n-    arith_uint160 c2S = c1S << 80;\n-    for (unsigned int i = 0; i < 80; ++i) {\n-        BOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n-    }\n-    for (unsigned int i = 80; i < 160; ++i) {\n-        BOOST_CHECK((c1S << i) == (c2S << (i-80)));\n-    }\n }\n \n BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n {\n-    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n-    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    BOOST_CHECK(!ZeroL);\n+    BOOST_CHECK(!(!OneL));\n     for (unsigned int i = 0; i < 256; ++i)\n         BOOST_CHECK(!(!(OneL<<i)));\n-    for (unsigned int i = 0; i < 160; ++i)\n-        BOOST_CHECK(!(!(OneS<<i)));\n-    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n-    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S));\n-    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+    BOOST_CHECK(!(!R1L));\n+    BOOST_CHECK(!(!MaxL));\n \n-    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+    BOOST_CHECK(~ZeroL == MaxL);\n \n     unsigned char TmpArray[32];\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; }\n     BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n-    BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (~R1S));\n \n-    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-ZeroL == ZeroL);\n     BOOST_CHECK(-R1L == (~R1L)+1);\n-    BOOST_CHECK(-R1S == (~R1S)+1);\n     for (unsigned int i = 0; i < 256; ++i)\n         BOOST_CHECK(-(OneL<<i) == (MaxL << i));\n-    for (unsigned int i = 0; i < 160; ++i)\n-        BOOST_CHECK(-(OneS<<i) == (MaxS << i));\n }\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n // element of Aarray and Barray, and then converting the result into a arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L)); \\\n-    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(arith_uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (_A_##S _OP_ _B_##S));\n+    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));\n \n #define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\\n-    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n-    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L));\n \n BOOST_AUTO_TEST_CASE( bitwiseOperators )\n {\n@@ -343,7 +244,6 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n     CHECKBITWISEOPERATOR(Max,R1,&)\n \n     arith_uint256 TmpL;\n-    arith_uint160 TmpS;\n     CHECKASSIGNMENTOPERATOR(R1,R2,|)\n     CHECKASSIGNMENTOPERATOR(R1,R2,^)\n     CHECKASSIGNMENTOPERATOR(R1,R2,&)\n@@ -362,13 +262,9 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n \n     uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL;\n     TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | arith_uint256(Tmp64)));\n-    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | arith_uint160(Tmp64)));\n     TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n-    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n     TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n-    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n     TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ arith_uint256(Tmp64)));\n-    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ arith_uint160(Tmp64)));\n }\n \n BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n@@ -383,16 +279,6 @@ BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n         BOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n         BOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n     }\n-    arith_uint160 TmpS;\n-    for (unsigned int i = 0; i < 160; ++i) {\n-        TmpS= OneS<< i;\n-        BOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n-        BOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n-        TmpS |= R1S;\n-        BOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n-        BOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n-        BOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n-    }\n }\n \n BOOST_AUTO_TEST_CASE( plusMinus )\n@@ -437,49 +323,6 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n     }\n     TmpL = R1L;\n     BOOST_CHECK(--TmpL == R1L-1);\n-\n-    // 160-bit; copy-pasted\n-    arith_uint160 TmpS = 0;\n-    BOOST_CHECK(R1S+R2S == arith_uint160(R1LplusR2L));\n-    TmpS += R1S;\n-    BOOST_CHECK(TmpS == R1S);\n-    TmpS += R2S;\n-    BOOST_CHECK(TmpS == R1S + R2S);\n-    BOOST_CHECK(OneS+MaxS == ZeroS);\n-    BOOST_CHECK(MaxS+OneS == ZeroS);\n-    for (unsigned int i = 1; i < 160; ++i) {\n-        BOOST_CHECK( (MaxS >> i) + OneS == (HalfS >> (i-1)) );\n-        BOOST_CHECK( OneS + (MaxS >> i) == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); TmpS += OneS;\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); TmpS += 1;\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i);\n-        BOOST_CHECK( TmpS++ == (MaxS>>i) );\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)));\n-    }\n-    BOOST_CHECK(arith_uint160(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == arith_uint160(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n-    TmpS = arith_uint160(0xbedc77e27940a7ULL); TmpS += 0xee8d836fce66fbULL;\n-    BOOST_CHECK(TmpS == arith_uint160(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n-    TmpS -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpS == 0xbedc77e27940a7ULL);\n-    TmpS = R1S;\n-    BOOST_CHECK(++TmpS == R1S+1);\n-\n-    BOOST_CHECK(R1S -(-R2S) == R1S+R2S);\n-    BOOST_CHECK(R1S -(-OneS) == R1S+OneS);\n-    BOOST_CHECK(R1S - OneS == R1S+(-OneS));\n-    for (unsigned int i = 1; i < 160; ++i) {\n-        BOOST_CHECK((MaxS>>i) - (-OneS)  == (HalfS >> (i-1)));\n-        BOOST_CHECK((HalfS >> (i-1)) - OneS == (MaxS>>i));\n-        TmpS = (HalfS >> (i-1));\n-        BOOST_CHECK(TmpS-- == (HalfS >> (i-1)));\n-        BOOST_CHECK(TmpS == (MaxS >> i));\n-        TmpS = (HalfS >> (i-1));\n-        BOOST_CHECK(--TmpS == (MaxS >> i));\n-    }\n-    TmpS = R1S;\n-    BOOST_CHECK(--TmpS == R1S-1);\n-\n }\n \n BOOST_AUTO_TEST_CASE( multiply )\n@@ -495,28 +338,12 @@ BOOST_AUTO_TEST_CASE( multiply )\n     BOOST_CHECK((R2L * OneL) == R2L);\n     BOOST_CHECK((R2L * MaxL) == -R2L);\n \n-    BOOST_CHECK((R1S * R1S).ToString() == \"a7761bf30d5237e9873f9bff3642a732c4d84f10\");\n-    BOOST_CHECK((R1S * R2S).ToString() == \"ba51c008df851987d9dd323f0e5de07760529c40\");\n-    BOOST_CHECK((R1S * ZeroS) == ZeroS);\n-    BOOST_CHECK((R1S * OneS) == R1S);\n-    BOOST_CHECK((R1S * MaxS) == -R1S);\n-    BOOST_CHECK((R2S * R1S) == (R1S * R2S));\n-    BOOST_CHECK((R2S * R2S).ToString() == \"c28bb2b45a1d85ab7996ccd3e102a650f74ff100\");\n-    BOOST_CHECK((R2S * ZeroS) == ZeroS);\n-    BOOST_CHECK((R2S * OneS) == R2S);\n-    BOOST_CHECK((R2S * MaxS) == -R2S);\n-\n     BOOST_CHECK(MaxL * MaxL == OneL);\n-    BOOST_CHECK(MaxS * MaxS == OneS);\n \n     BOOST_CHECK((R1L * 0) == 0);\n     BOOST_CHECK((R1L * 1) == R1L);\n     BOOST_CHECK((R1L * 3).ToString() == \"7759b1c0ed14047f961ad09b20ff83687876a0181a367b813634046f91def7d4\");\n     BOOST_CHECK((R2L * 0x87654321UL).ToString() == \"23f7816e30c4ae2017257b7a0fa64d60402f5234d46e746b61c960d09a26d070\");\n-    BOOST_CHECK((R1S * 0) == 0);\n-    BOOST_CHECK((R1S * 1) == R1S);\n-    BOOST_CHECK((R1S * 7).ToString() == \"f7a987f3c3bf758d927f202d7e795faeff084244\");\n-    BOOST_CHECK((R2S * 0xFFFFFFFFUL).ToString() == \"1c6f6c930353e17f7d6127213bb18d2883e2cd90\");\n }\n \n BOOST_AUTO_TEST_CASE( divide )\n@@ -535,21 +362,6 @@ BOOST_AUTO_TEST_CASE( divide )\n     BOOST_CHECK(R2L / MaxL == ZeroL);\n     BOOST_CHECK(MaxL / R2L == 1);\n     BOOST_CHECK_THROW(R2L / ZeroL, uint_error);\n-\n-    arith_uint160 D1S(\"D3C5EDCDEA54EB92679F0A4B4\");\n-    arith_uint160 D2S(\"13037\");\n-    BOOST_CHECK((R1S / D1S).ToString() == \"0000000000000000000000000db9af3beade6c02\");\n-    BOOST_CHECK((R1S / D2S).ToString() == \"000098dfb6cc40ca592bf74366794f298ada205c\");\n-    BOOST_CHECK(R1S / OneS == R1S);\n-    BOOST_CHECK(R1S / MaxS == ZeroS);\n-    BOOST_CHECK(MaxS / R1S == 1);\n-    BOOST_CHECK_THROW(R1S / ZeroS, uint_error);\n-    BOOST_CHECK((R2S / D1S).ToString() == \"0000000000000000000000000c5608e781182047\");\n-    BOOST_CHECK((R2S / D2S).ToString() == \"00008966751b7187c3c67c1fda5cea7db2c1c069\");\n-    BOOST_CHECK(R2S / OneS == R2S);\n-    BOOST_CHECK(R2S / MaxS == ZeroS);\n-    BOOST_CHECK(MaxS / R2S == 1);\n-    BOOST_CHECK_THROW(R2S / ZeroS, uint_error);\n }\n \n \n@@ -608,70 +420,17 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(MaxL == TmpL);\n     ss.str(\"\");\n \n-    BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n-    BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n-    BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n-    BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n-    arith_uint160 TmpS(R1S);\n-    BOOST_CHECK(TmpS == R1S);\n-    TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n-    TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == 0);\n-    TmpS.SetHex(HalfS.ToString()); BOOST_CHECK(TmpS == HalfS);\n-\n-    TmpS.SetHex(R1S.ToString());\n-    BOOST_CHECK(memcmp(R1S.begin(), R1Array, 20)==0);\n-    BOOST_CHECK(memcmp(TmpS.begin(), R1Array, 20)==0);\n-    BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n-    BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n-    BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n-    BOOST_CHECK(R1S.size() == 20);\n-    BOOST_CHECK(R2S.size() == 20);\n-    BOOST_CHECK(ZeroS.size() == 20);\n-    BOOST_CHECK(MaxS.size() == 20);\n-    BOOST_CHECK(R1S.begin() + 20 == R1S.end());\n-    BOOST_CHECK(R2S.begin() + 20 == R2S.end());\n-    BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n-    BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n-    BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(R1S.GetLow64()  == R1LLow64);\n-    BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL);\n-    BOOST_CHECK(OneS.GetLow64() ==0x0000000000000001ULL);\n-    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-\n-    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(R1S == TmpS);\n-    ss.str(\"\");\n-    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ZeroS == TmpS);\n-    ss.str(\"\");\n-    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(MaxS == TmpS);\n-    ss.str(\"\");\n-\n     for (unsigned int i = 0; i < 255; ++i)\n     {\n         BOOST_CHECK((OneL << i).getdouble() == ldexp(1.0,i));\n-        if (i < 160) BOOST_CHECK((OneS << i).getdouble() == ldexp(1.0,i));\n     }\n     BOOST_CHECK(ZeroL.getdouble() == 0.0);\n-    BOOST_CHECK(ZeroS.getdouble() == 0.0);\n     for (int i = 256; i > 53; --i)\n         BOOST_CHECK(almostEqual((R1L>>(256-i)).getdouble(), ldexp(R1Ldouble,i)));\n-    for (int i = 160; i > 53; --i)\n-        BOOST_CHECK(almostEqual((R1S>>(160-i)).getdouble(), ldexp(R1Sdouble,i)));\n     uint64_t R1L64part = (R1L>>192).GetLow64();\n-    uint64_t R1S64part = (R1S>>96).GetLow64();\n     for (int i = 53; i > 0; --i) // doubles can store all integers in {0,...,2^54-1} exactly\n     {\n         BOOST_CHECK((R1L>>(256-i)).getdouble() == (double)(R1L64part >> (64-i)));\n-        BOOST_CHECK((R1S>>(160-i)).getdouble() == (double)(R1S64part >> (64-i)));\n     }\n }\n \n@@ -807,23 +566,20 @@ BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% coverage\n {\n     // ~R1L give a base_uint<256>\n-    BOOST_CHECK((~~R1L >> 10) == (R1L >> 10)); BOOST_CHECK((~~R1S >> 10) == (R1S >> 10));\n-    BOOST_CHECK((~~R1L << 10) == (R1L << 10)); BOOST_CHECK((~~R1S << 10) == (R1S << 10));\n-    BOOST_CHECK(!(~~R1L < R1L)); BOOST_CHECK(!(~~R1S < R1S));\n-    BOOST_CHECK(~~R1L <= R1L); BOOST_CHECK(~~R1S <= R1S);\n-    BOOST_CHECK(!(~~R1L > R1L)); BOOST_CHECK(!(~~R1S > R1S));\n-    BOOST_CHECK(~~R1L >= R1L); BOOST_CHECK(~~R1S >= R1S);\n-    BOOST_CHECK(!(R1L < ~~R1L)); BOOST_CHECK(!(R1S < ~~R1S));\n-    BOOST_CHECK(R1L <= ~~R1L); BOOST_CHECK(R1S <= ~~R1S);\n-    BOOST_CHECK(!(R1L > ~~R1L)); BOOST_CHECK(!(R1S > ~~R1S));\n-    BOOST_CHECK(R1L >= ~~R1L); BOOST_CHECK(R1S >= ~~R1S);\n+    BOOST_CHECK((~~R1L >> 10) == (R1L >> 10));\n+    BOOST_CHECK((~~R1L << 10) == (R1L << 10));\n+    BOOST_CHECK(!(~~R1L < R1L));\n+    BOOST_CHECK(~~R1L <= R1L);\n+    BOOST_CHECK(!(~~R1L > R1L));\n+    BOOST_CHECK(~~R1L >= R1L);\n+    BOOST_CHECK(!(R1L < ~~R1L));\n+    BOOST_CHECK(R1L <= ~~R1L);\n+    BOOST_CHECK(!(R1L > ~~R1L));\n+    BOOST_CHECK(R1L >= ~~R1L);\n \n     BOOST_CHECK(~~R1L + R2L == R1L + ~~R2L);\n-    BOOST_CHECK(~~R1S + R2S == R1S + ~~R2S);\n     BOOST_CHECK(~~R1L - R2L == R1L - ~~R2L);\n-    BOOST_CHECK(~~R1S - R2S == R1S - ~~R2S);\n     BOOST_CHECK(~R1L != R1L); BOOST_CHECK(R1L != ~R1L);\n-    BOOST_CHECK(~R1S != R1S); BOOST_CHECK(R1S != ~R1S);\n     unsigned char TmpArray[32];\n     CHECKBITWISEOPERATOR(~R1,R2,|)\n     CHECKBITWISEOPERATOR(~R1,R2,^)"
      }
    ]
  },
  {
    "sha": "30007fda76aa7ba4e4090f7a16298874a7722926",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDAwN2ZkYTc2YWE3YmE0ZTQwOTBmN2ExNjI5ODg3NGE3NzIyOTI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T14:47:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:36Z"
      },
      "message": "Remove now-unused methods from arith_uint256 and base_uint\n\n- Methods that access the guts of arith_uint256 are removed,\nas these are incompatible between endians. Use uint256 instead\n\n- Serialization is no longer needed as arith_uint256's are never\nread or written\n\n- GetHash is never used on arith_uint256",
      "tree": {
        "sha": "9b2a2e70e0ac9169aac94ea70a8d539d467c7874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b2a2e70e0ac9169aac94ea70a8d539d467c7874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30007fda76aa7ba4e4090f7a16298874a7722926",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30007fda76aa7ba4e4090f7a16298874a7722926",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30007fda76aa7ba4e4090f7a16298874a7722926",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30007fda76aa7ba4e4090f7a16298874a7722926/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edc720479d0749a000d5a6970da6d2d72657cf38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc720479d0749a000d5a6970da6d2d72657cf38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edc720479d0749a000d5a6970da6d2d72657cf38"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 1,
      "deletions": 148
    },
    "files": [
      {
        "sha": "11df3b05c0576b0e8db3c06a0bb89dd21ad42b5c",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30007fda76aa7ba4e4090f7a16298874a7722926/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30007fda76aa7ba4e4090f7a16298874a7722926/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=30007fda76aa7ba4e4090f7a16298874a7722926",
        "patch": "@@ -278,68 +278,6 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n     return nCompact;\n }\n \n-static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n-{\n-    // Taken from lookup3, by Bob Jenkins.\n-    a -= c;\n-    a ^= ((c << 4) | (c >> 28));\n-    c += b;\n-    b -= a;\n-    b ^= ((a << 6) | (a >> 26));\n-    a += c;\n-    c -= b;\n-    c ^= ((b << 8) | (b >> 24));\n-    b += a;\n-    a -= c;\n-    a ^= ((c << 16) | (c >> 16));\n-    c += b;\n-    b -= a;\n-    b ^= ((a << 19) | (a >> 13));\n-    a += c;\n-    c -= b;\n-    c ^= ((b << 4) | (b >> 28));\n-    b += a;\n-}\n-\n-static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n-{\n-    // Taken from lookup3, by Bob Jenkins.\n-    c ^= b;\n-    c -= ((b << 14) | (b >> 18));\n-    a ^= c;\n-    a -= ((c << 11) | (c >> 21));\n-    b ^= a;\n-    b -= ((a << 25) | (a >> 7));\n-    c ^= b;\n-    c -= ((b << 16) | (b >> 16));\n-    a ^= c;\n-    a -= ((c << 4) | (c >> 28));\n-    b ^= a;\n-    b -= ((a << 14) | (a >> 18));\n-    c ^= b;\n-    c -= ((b << 24) | (b >> 8));\n-}\n-\n-uint64_t arith_uint256::GetHash(const arith_uint256& salt) const\n-{\n-    uint32_t a, b, c;\n-    a = b = c = 0xdeadbeef + (WIDTH << 2);\n-\n-    a += pn[0] ^ salt.pn[0];\n-    b += pn[1] ^ salt.pn[1];\n-    c += pn[2] ^ salt.pn[2];\n-    HashMix(a, b, c);\n-    a += pn[3] ^ salt.pn[3];\n-    b += pn[4] ^ salt.pn[4];\n-    c += pn[5] ^ salt.pn[5];\n-    HashMix(a, b, c);\n-    a += pn[6] ^ salt.pn[6];\n-    b += pn[7] ^ salt.pn[7];\n-    HashFinal(a, b, c);\n-\n-    return ((((uint64_t)b) << 32) | c);\n-}\n-\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;"
      },
      {
        "sha": "ec8e15997fa05b6dfc84a9d1e3d9a2cafddceaec",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30007fda76aa7ba4e4090f7a16298874a7722926/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30007fda76aa7ba4e4090f7a16298874a7722926/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=30007fda76aa7ba4e4090f7a16298874a7722926",
        "patch": "@@ -232,26 +232,6 @@ class base_uint\n     void SetHex(const std::string& str);\n     std::string ToString() const;\n \n-    unsigned char* begin()\n-    {\n-        return (unsigned char*)&pn[0];\n-    }\n-\n-    unsigned char* end()\n-    {\n-        return (unsigned char*)&pn[WIDTH];\n-    }\n-\n-    const unsigned char* begin() const\n-    {\n-        return (unsigned char*)&pn[0];\n-    }\n-\n-    const unsigned char* end() const\n-    {\n-        return (unsigned char*)&pn[WIDTH];\n-    }\n-\n     unsigned int size() const\n     {\n         return sizeof(pn);\n@@ -268,40 +248,6 @@ class base_uint\n         assert(WIDTH >= 2);\n         return pn[0] | (uint64_t)pn[1] << 32;\n     }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return sizeof(pn);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n-    {\n-        s.write((char*)pn, sizeof(pn));\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n-    {\n-        s.read((char*)pn, sizeof(pn));\n-    }\n-\n-    // Temporary for migration to blob160/256\n-    uint64_t GetCheapHash() const\n-    {\n-        return GetLow64();\n-    }\n-    void SetNull()\n-    {\n-        memset(pn, 0, sizeof(pn));\n-    }\n-    bool IsNull() const\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            if (pn[i] != 0)\n-                return false;\n-        return true;\n-    }\n };\n \n /** 256-bit unsigned big integer. */\n@@ -336,8 +282,6 @@ class arith_uint256 : public base_uint<256> {\n     arith_uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n     uint32_t GetCompact(bool fNegative = false) const;\n \n-    uint64_t GetHash(const arith_uint256& salt) const;\n-\n     friend uint256 ArithToUint256(const arith_uint256 &);\n     friend arith_uint256 UintToArith256(const uint256 &);\n };"
      },
      {
        "sha": "68953675318808ffbb504fbc1b1c5723b630fc3e",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 30,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30007fda76aa7ba4e4090f7a16298874a7722926/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30007fda76aa7ba4e4090f7a16298874a7722926/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=30007fda76aa7ba4e4090f7a16298874a7722926",
        "patch": "@@ -370,7 +370,7 @@ bool almostEqual(double d1, double d2)\n     return fabs(d1-d2) <= 4*fabs(d1)*std::numeric_limits<double>::epsilon();\n }\n \n-BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize\n+BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize\n {\n     BOOST_CHECK(R1L.GetHex() == R1L.ToString());\n     BOOST_CHECK(R2L.GetHex() == R2L.ToString());\n@@ -383,42 +383,13 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     TmpL.SetHex(HalfL.ToString()); BOOST_CHECK(TmpL == HalfL);\n \n     TmpL.SetHex(R1L.ToString());\n-    BOOST_CHECK(memcmp(R1L.begin(), R1Array, 32)==0);\n-    BOOST_CHECK(memcmp(TmpL.begin(), R1Array, 32)==0);\n-    BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n-    BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n-    BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n     BOOST_CHECK(R1L.size() == 32);\n     BOOST_CHECK(R2L.size() == 32);\n     BOOST_CHECK(ZeroL.size() == 32);\n     BOOST_CHECK(MaxL.size() == 32);\n-    BOOST_CHECK(R1L.begin() + 32 == R1L.end());\n-    BOOST_CHECK(R2L.begin() + 32 == R2L.end());\n-    BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n-    BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n-    BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n     BOOST_CHECK(R1L.GetLow64()  == R1LLow64);\n     BOOST_CHECK(HalfL.GetLow64() ==0x0000000000000000ULL);\n     BOOST_CHECK(OneL.GetLow64() ==0x0000000000000001ULL);\n-    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-\n-    std::stringstream ss;\n-    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(R1L == TmpL);\n-    ss.str(\"\");\n-    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ZeroL == TmpL);\n-    ss.str(\"\");\n-    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(MaxL == TmpL);\n-    ss.str(\"\");\n \n     for (unsigned int i = 0; i < 255; ++i)\n     {"
      }
    ]
  },
  {
    "sha": "6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmQwZGMyYTg0NWI0ZDE3ZDVmZmFiYmRhZGRhODBkNDdkNmMyZGMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T12:07:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-05T14:45:36Z"
      },
      "message": "arith_uint256: remove initialization from byte vector\n\nRemove initialization from vector (as this is only used in the tests).\n\nAlso implement SetHex and GetHex in terms of uint256, to avoid\nduplicate code as well as avoid endianness issues (as they\nwork in term of bytes).",
      "tree": {
        "sha": "0a9d27e397e15c0e7bcbe8f3eff95c5285a2d7ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a9d27e397e15c0e7bcbe8f3eff95c5285a2d7ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30007fda76aa7ba4e4090f7a16298874a7722926",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30007fda76aa7ba4e4090f7a16298874a7722926",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30007fda76aa7ba4e4090f7a16298874a7722926"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 21,
      "deletions": 55
    },
    "files": [
      {
        "sha": "1243823da522840309d3f0df80161a95af07f57c",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 37,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
        "patch": "@@ -17,14 +17,6 @@ base_uint<BITS>::base_uint(const std::string& str)\n     SetHex(str);\n }\n \n-template <unsigned int BITS>\n-base_uint<BITS>::base_uint(const std::vector<unsigned char>& vch)\n-{\n-    if (vch.size() != sizeof(pn))\n-        throw uint_error(\"Converting vector of wrong size to base_uint\");\n-    memcpy(pn, &vch[0], sizeof(pn));\n-}\n-\n template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n {\n@@ -154,39 +146,13 @@ double base_uint<BITS>::getdouble() const\n template <unsigned int BITS>\n std::string base_uint<BITS>::GetHex() const\n {\n-    char psz[sizeof(pn) * 2 + 1];\n-    for (unsigned int i = 0; i < sizeof(pn); i++)\n-        sprintf(psz + i * 2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n-    return std::string(psz, psz + sizeof(pn) * 2);\n+    return ArithToUint256(*this).GetHex();\n }\n \n template <unsigned int BITS>\n void base_uint<BITS>::SetHex(const char* psz)\n {\n-    memset(pn, 0, sizeof(pn));\n-\n-    // skip leading spaces\n-    while (isspace(*psz))\n-        psz++;\n-\n-    // skip 0x\n-    if (psz[0] == '0' && tolower(psz[1]) == 'x')\n-        psz += 2;\n-\n-    // hex string to uint\n-    const char* pbegin = psz;\n-    while (::HexDigit(*psz) != -1)\n-        psz++;\n-    psz--;\n-    unsigned char* p1 = (unsigned char*)pn;\n-    unsigned char* pend = p1 + WIDTH * 4;\n-    while (psz >= pbegin && p1 < pend) {\n-        *p1 = ::HexDigit(*psz--);\n-        if (psz >= pbegin) {\n-            *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\n-            p1++;\n-        }\n-    }\n+    *this = UintToArith256(uint256S(psz));\n }\n \n template <unsigned int BITS>\n@@ -218,7 +184,6 @@ unsigned int base_uint<BITS>::bits() const\n \n // Explicit instantiations for base_uint<256>\n template base_uint<256>::base_uint(const std::string&);\n-template base_uint<256>::base_uint(const std::vector<unsigned char>&);\n template base_uint<256>& base_uint<256>::operator<<=(unsigned int);\n template base_uint<256>& base_uint<256>::operator>>=(unsigned int);\n template base_uint<256>& base_uint<256>::operator*=(uint32_t b32);"
      },
      {
        "sha": "b6ba3a10874c8ee42c00b988848a9eb5cfaab0a3",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
        "patch": "@@ -57,7 +57,6 @@ class base_uint\n     }\n \n     explicit base_uint(const std::string& str);\n-    explicit base_uint(const std::vector<unsigned char>& vch);\n \n     bool operator!() const\n     {\n@@ -257,7 +256,6 @@ class arith_uint256 : public base_uint<256> {\n     arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n     arith_uint256(uint64_t b) : base_uint<256>(b) {}\n     explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}\n-    explicit arith_uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n \n     /**\n      * The \"compact\" format is a representation of a whole"
      },
      {
        "sha": "565b02ae64291342d06ef47bfe759c3b97bf2aa2",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=6bd0dc2a845b4d17d5ffabbdadda80d47d6c2dc3",
        "patch": "@@ -8,41 +8,48 @@\n #include <iomanip>\n #include <limits>\n #include <cmath>\n+#include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include <string>\n #include \"version.h\"\n \n BOOST_AUTO_TEST_SUITE(arith_uint256_tests)\n \n+/// Convert vector to arith_uint256, via uint256 blob\n+inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)\n+{\n+    return UintToArith256(uint256(vch));\n+}\n+\n const unsigned char R1Array[] =\n     \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n     \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n const double R1Ldouble = 0.4887374590559308955; // R1L equals roughly R1Ldouble * 2^256\n-const arith_uint256 R1L = arith_uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n+const arith_uint256 R1L = arith_uint256V(std::vector<unsigned char>(R1Array,R1Array+32));\n const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;\n \n const unsigned char R2Array[] =\n     \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n     \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n-const arith_uint256 R2L = arith_uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n+const arith_uint256 R2L = arith_uint256V(std::vector<unsigned char>(R2Array,R2Array+32));\n \n const char R1LplusR2L[] = \"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\";\n \n const unsigned char ZeroArray[] =\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n-const arith_uint256 ZeroL = arith_uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n+const arith_uint256 ZeroL = arith_uint256V(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n \n const unsigned char OneArray[] =\n     \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n-const arith_uint256 OneL = arith_uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n+const arith_uint256 OneL = arith_uint256V(std::vector<unsigned char>(OneArray,OneArray+32));\n \n const unsigned char MaxArray[] =\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n-const arith_uint256 MaxL = arith_uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n+const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));\n \n const arith_uint256 HalfL = (OneL << 255);\n std::string ArrayToString(const unsigned char A[], unsigned int width)\n@@ -112,10 +119,6 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n     tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n     tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n-\n-    // Wrong length must throw exception.\n-    BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n-    BOOST_CHECK_THROW(arith_uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n }\n \n void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\n@@ -155,30 +158,30 @@ BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n     for (unsigned int i = 0; i < 256; ++i)\n     {\n         shiftArrayLeft(TmpArray, OneArray, 32, i);\n-        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (OneL << i));\n+        BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (OneL << i));\n         TmpL = OneL; TmpL <<= i;\n         BOOST_CHECK(TmpL == (OneL << i));\n         BOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n         TmpL = HalfL; TmpL >>= (255-i);\n         BOOST_CHECK(TmpL == (OneL << i));\n \n         shiftArrayLeft(TmpArray, R1Array, 32, i);\n-        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L << i));\n+        BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L << i));\n         TmpL = R1L; TmpL <<= i;\n         BOOST_CHECK(TmpL == (R1L << i));\n \n         shiftArrayRight(TmpArray, R1Array, 32, i);\n-        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L >> i));\n+        BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L >> i));\n         TmpL = R1L; TmpL >>= i;\n         BOOST_CHECK(TmpL == (R1L >> i));\n \n         shiftArrayLeft(TmpArray, MaxArray, 32, i);\n-        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL << i));\n+        BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL << i));\n         TmpL = MaxL; TmpL <<= i;\n         BOOST_CHECK(TmpL == (MaxL << i));\n \n         shiftArrayRight(TmpArray, MaxArray, 32, i);\n-        BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL >> i));\n+        BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL >> i));\n         TmpL = MaxL; TmpL >>= i;\n         BOOST_CHECK(TmpL == (MaxL >> i));\n     }\n@@ -205,7 +208,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n \n     unsigned char TmpArray[32];\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; }\n-    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n+    BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n \n     BOOST_CHECK(-ZeroL == ZeroL);\n     BOOST_CHECK(-R1L == (~R1L)+1);\n@@ -218,7 +221,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n // element of Aarray and Barray, and then converting the result into a arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(arith_uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));\n+    BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));\n \n #define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\\n     TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L));"
      }
    ]
  }
]