[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39120314",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-39120314",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 39120314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTIwMzE0",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?u=db313a954a318b81f5283d34908397d1ea3aeba3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-03-31T18:00:39Z",
    "updated_at": "2014-03-31T18:00:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased on master, and tweaked to address Mike's comments (thanks for the review!).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39120314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39208091",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-39208091",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 39208091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjA4MDkx",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?u=db313a954a318b81f5283d34908397d1ea3aeba3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-04-01T13:58:27Z",
    "updated_at": "2014-04-03T15:34:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pull-tester errors were with the regression test:\n\npull-tester is running python 2.6  (fixed by using subprocess.check_call instead of python2.7 subprocess.check_output).\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39208091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/42456554",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-42456554",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 42456554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDU2NTU0",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?u=f32bbe8d8d0f9e10b1387f0aa582b1ee83b8aac5&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-07T17:23:54Z",
    "updated_at": "2014-05-07T17:23:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "What's the status of this work? Does it need more review or testing or what?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/42456554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/42457936",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-42457936",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 42457936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDU3OTM2",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-07T17:34:56Z",
    "updated_at": "2014-05-07T17:34:56Z",
    "author_association": "MEMBER",
    "body": "It's queued to be merged for 0.10, so after the 0.9.2 branch split-off.\nBut more review and testing is always welcome.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/42457936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44032969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44032969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44032969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDMyOTY5",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?u=db313a954a318b81f5283d34908397d1ea3aeba3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-23T16:33:50Z",
    "updated_at": "2014-05-23T16:33:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nit-picked : replace GetFee(1000) with inline GetFeePerK() method.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44032969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44553040",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44553040",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44553040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTUzMDQw",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?u=db313a954a318b81f5283d34908397d1ea3aeba3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-29T16:35:45Z",
    "updated_at": "2014-05-29T16:35:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased on master.\n\nI'm very happy with how quickly this generates good estimates; after just three or four blocks it has a good idea of what priority or fee is needed to get into the next couple of blocks.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44553040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44558034",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44558034",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44558034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTU4MDM0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-29T17:18:38Z",
    "updated_at": "2014-05-29T17:18:38Z",
    "author_association": "MEMBER",
    "body": "Save/restore of the mempool seems quite dangerous in making some unconfirmed transactions potentially live forever in the network...\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44558034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44558446",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44558446",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44558446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTU4NDQ2",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-29T17:22:02Z",
    "updated_at": "2014-05-29T17:22:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nod -- you only want to save/restore once we have transactions expiring from the mempool (janitor etc.) after X blocks.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44558446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44621083",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44621083",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44621083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjIxMDgz",
    "user": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?u=57b50a05caa63fb86d8f910668719907e9ecf667&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-30T07:06:26Z",
    "updated_at": "2014-05-30T07:06:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa Yup. Even with expiration it makes many DoS attacks and similar vulnerabilities much more effective. For instance OOM crashes are hard to exploit right now because the txs are hard to propagate; not true with save restore. \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44621083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44622117",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44622117",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44622117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjIyMTE3",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-30T07:23:21Z",
    "updated_at": "2014-05-30T07:23:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "In general, lacking other tools, clearing the mempool [implicitly] at startup is a valuable tool.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44622117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44649634",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44649634",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 44649634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjQ5NjM0",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?u=db313a954a318b81f5283d34908397d1ea3aeba3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-05-30T13:22:57Z",
    "updated_at": "2014-05-30T13:22:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Consensus is saving/restoring memory pool is dangerous, so I've removed that functionality.\n\nFee estimates ARE saved/restored, to datadir fee_estimates.dat file.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/44649634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45346289",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-45346289",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 45346289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzQ2Mjg5",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-06T15:00:23Z",
    "updated_at": "2014-06-06T15:00:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK.  Speaking conservatively, appears to be low impact as implemented at first glance.\n\nThe largest impact is to existing operations is the hook that is executed when a block appears, necessitating the removal of TXs from the mempool.  At a quick glance, it was difficult to discern the big-O() of this operation, but at least it is all in CPU/RAM, and only executed once per incoming new block.\n\nOne nit (perhaps for post merge):  I don't like the mempool itself doing the reading.  Would prefer a helper function outside the mempool class that perform the necessary I/O.  Our normal pattern is a pure implement-serialize chain until actual file I/O is needed.  This seems to mix metaphors a bit more than usual.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45346289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45358992",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-45358992",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 45358992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzU4OTky",
    "user": {
      "login": "BitcoinPullTester",
      "id": 2110907,
      "node_id": "MDQ6VXNlcjIxMTA5MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinPullTester",
      "html_url": "https://github.com/BitcoinPullTester",
      "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
      "following_url": "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
      "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
      "events_url": "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-06T16:50:51Z",
    "updated_at": "2014-06-06T16:50:51Z",
    "author_association": "NONE",
    "body": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/171ca7745e77c9f78f26556457fe64e5b2004a75 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45358992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/63845974",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-63845974",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3959",
    "id": 63845974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQ1OTc0",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-20T17:28:36Z",
    "updated_at": "2014-11-20T17:28:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "If mempool saving ever comes back as a proposal we should keep in mind that doing so presents a pretty strong watermarking attack. (... not that we don't have many other watermarking attacks.)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/63845974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032046",
    "pull_request_review_id": null,
    "id": 11032046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyMDQ2",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1\n+\n+def gather_inputs(from_node, amount_needed):",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 30,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A lot of this stuff looks like it should be in a utility library (the main function too), otherwise it's getting copy/pasted everywhere.\n",
    "created_at": "2014-03-27T16:49:05Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032085",
    "pull_request_review_id": null,
    "id": 11032085,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyMDg1",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1\n+\n+def gather_inputs(from_node, amount_needed):\n+    utxo = from_node.listunspent(1)\n+    random.shuffle(utxo)\n+    inputs = []\n+    total_in = Decimal(\"0.00000000\")\n+    while total_in < amount_needed and len(utxo) > 0:\n+        t = utxo.pop()\n+        total_in += t[\"amount\"]\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+    if total_in < amount_needed:\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee*2, total_in))\n+    return (total_in, inputs)\n+\n+def make_change(from_node, amount_in, amount_out, fee):\n+    outputs = {}\n+    amount = amount_out+fee\n+    change = amount_in - amount\n+    if change > amount*2:\n+        # Create an extra change output to break up big inputs",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 48,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this actually needed for the tests? It seems a bit odd to have it here.\n",
    "created_at": "2014-03-27T16:49:44Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032085",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032085"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032085"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032174",
    "pull_request_review_id": null,
    "id": 11032174,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyMTc0",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 28,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The error case is never checked by the caller. Better to throw, I think.\n",
    "created_at": "2014-03-27T16:51:12Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032174",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032174"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032174"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032254",
    "pull_request_review_id": null,
    "id": 11032254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyMjU0",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1\n+\n+def gather_inputs(from_node, amount_needed):\n+    utxo = from_node.listunspent(1)\n+    random.shuffle(utxo)\n+    inputs = []\n+    total_in = Decimal(\"0.00000000\")\n+    while total_in < amount_needed and len(utxo) > 0:\n+        t = utxo.pop()\n+        total_in += t[\"amount\"]\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+    if total_in < amount_needed:\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee*2, total_in))\n+    return (total_in, inputs)\n+\n+def make_change(from_node, amount_in, amount_out, fee):\n+    outputs = {}\n+    amount = amount_out+fee\n+    change = amount_in - amount\n+    if change > amount*2:\n+        # Create an extra change output to break up big inputs\n+        outputs[from_node.getnewaddress()] = float(change/2)\n+        change = change/2\n+    if change > 0:\n+        outputs[from_node.getnewaddress()] = float(change)\n+    return outputs\n+\n+def send_zeropri_transaction(from_node, to_node, amount, fee):\n+    \"\"\"\n+    Create&broadcast a zero-priority transaction, returns fee-per-kilobyte\n+    Ensures transaction is zero-priority by first creating a send-to-self,\n+    then using it's output\n+    \"\"\"\n+\n+    # Create a send-to-self with confirmed inputs:\n+    self_address = from_node.getnewaddress()\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee*2)\n+    outputs = make_change(from_node, total_in, amount+fee, fee)\n+    outputs[self_address] = float(amount+fee)\n+\n+    self_rawtx = from_node.createrawtransaction(inputs, outputs)\n+    self_signresult = from_node.signrawtransaction(self_rawtx)\n+    self_txid = from_node.sendrawtransaction(self_signresult[\"hex\"], True)\n+\n+    vout = find_output(from_node, self_txid, amount+fee)\n+    # Now immediately spend the output to create a 1-input, 1-output \n+    # zero-priority transaction:\n+    inputs = [ { \"txid\" : self_txid, \"vout\" : vout } ]\n+    outputs = { to_node.getnewaddress() : float(amount) }\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    tx_kbytes = (len(signresult[\"hex\"])/2)/1000.0\n+    return float(fee) / tx_kbytes\n+\n+def random_zeropri_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+    fee_per_kb = send_zeropri_transaction(from_node, to_node, amount, fee)\n+    return fee_per_kb\n+\n+def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee)\n+    outputs = make_change(from_node, total_in, amount, fee)\n+    outputs[to_node.getnewaddress()] = float(amount)\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    tx_kbytes = (len(signresult[\"hex\"])/2)/1000.0\n+    return float(fee) / tx_kbytes\n+\n+def run_test(nodes, test_dir):\n+    nodes.append(start_node(0, test_dir, \n+                            [\"-debug=mempool\", \"-debug=estimatefee\"]))\n+    # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n+    # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n+    # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n+    # 6 or 7 transactions)\n+    nodes.append(start_node(1, test_dir, \n+                            [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n+                             \"-debug=mempool\", \"-debug=estimatefee\"]))\n+    connect_nodes(nodes[1], 0)\n+\n+    # Node2 is a stingy miner, that\n+    # produces very small blocks (room for only 3 or so transactions)\n+    node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\" ]",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 122,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "But no debug flags here?\n",
    "created_at": "2014-03-27T16:52:39Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 122,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032406",
    "pull_request_review_id": null,
    "id": 11032406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyNDA2",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1\n+\n+def gather_inputs(from_node, amount_needed):\n+    utxo = from_node.listunspent(1)\n+    random.shuffle(utxo)\n+    inputs = []\n+    total_in = Decimal(\"0.00000000\")\n+    while total_in < amount_needed and len(utxo) > 0:\n+        t = utxo.pop()\n+        total_in += t[\"amount\"]\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+    if total_in < amount_needed:\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee*2, total_in))\n+    return (total_in, inputs)\n+\n+def make_change(from_node, amount_in, amount_out, fee):\n+    outputs = {}\n+    amount = amount_out+fee\n+    change = amount_in - amount\n+    if change > amount*2:\n+        # Create an extra change output to break up big inputs\n+        outputs[from_node.getnewaddress()] = float(change/2)\n+        change = change/2\n+    if change > 0:\n+        outputs[from_node.getnewaddress()] = float(change)\n+    return outputs\n+\n+def send_zeropri_transaction(from_node, to_node, amount, fee):\n+    \"\"\"\n+    Create&broadcast a zero-priority transaction, returns fee-per-kilobyte\n+    Ensures transaction is zero-priority by first creating a send-to-self,\n+    then using it's output\n+    \"\"\"\n+\n+    # Create a send-to-self with confirmed inputs:\n+    self_address = from_node.getnewaddress()\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee*2)\n+    outputs = make_change(from_node, total_in, amount+fee, fee)\n+    outputs[self_address] = float(amount+fee)\n+\n+    self_rawtx = from_node.createrawtransaction(inputs, outputs)\n+    self_signresult = from_node.signrawtransaction(self_rawtx)\n+    self_txid = from_node.sendrawtransaction(self_signresult[\"hex\"], True)\n+\n+    vout = find_output(from_node, self_txid, amount+fee)\n+    # Now immediately spend the output to create a 1-input, 1-output \n+    # zero-priority transaction:\n+    inputs = [ { \"txid\" : self_txid, \"vout\" : vout } ]\n+    outputs = { to_node.getnewaddress() : float(amount) }\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    tx_kbytes = (len(signresult[\"hex\"])/2)/1000.0\n+    return float(fee) / tx_kbytes\n+\n+def random_zeropri_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+    fee_per_kb = send_zeropri_transaction(from_node, to_node, amount, fee)\n+    return fee_per_kb\n+\n+def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+    from_node = random.choice(nodes)\n+    to_node = random.choice(nodes)\n+    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+\n+    (total_in, inputs) = gather_inputs(from_node, amount+fee)\n+    outputs = make_change(from_node, total_in, amount, fee)\n+    outputs[to_node.getnewaddress()] = float(amount)\n+\n+    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    signresult = from_node.signrawtransaction(rawtx)\n+    from_node.sendrawtransaction(signresult[\"hex\"], True)\n+\n+    tx_kbytes = (len(signresult[\"hex\"])/2)/1000.0\n+    return float(fee) / tx_kbytes\n+\n+def run_test(nodes, test_dir):\n+    nodes.append(start_node(0, test_dir, \n+                            [\"-debug=mempool\", \"-debug=estimatefee\"]))\n+    # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n+    # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n+    # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n+    # 6 or 7 transactions)\n+    nodes.append(start_node(1, test_dir, \n+                            [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n+                             \"-debug=mempool\", \"-debug=estimatefee\"]))\n+    connect_nodes(nodes[1], 0)\n+\n+    # Node2 is a stingy miner, that\n+    # produces very small blocks (room for only 3 or so transactions)\n+    node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\" ]\n+    nodes.append(start_node(2, test_dir, node2args))\n+    connect_nodes(nodes[2], 0)\n+\n+    sync_blocks(nodes)\n+\n+    # Prime the memory pool with pairs of transactions\n+    # (high-priority, random fee and zero-priority, random fee)\n+    min_fee = Decimal(\"0.001\")\n+    fees_per_kb = [];\n+    for i in range(12):\n+        fees_per_kb.append(random_zeropri_transaction(nodes, Decimal(\"1.1\"),\n+                                                      min_fee, min_fee, 20))\n+\n+    # Mine blocks until the memory pool clears:\n+    count_start = nodes[2].getblockcount()\n+    while len(nodes[2].getrawmempool()) > 0:\n+        nodes[2].setgenerate(True, 1)\n+        sync_blocks(nodes)        \n+\n+    all_estimates = [ nodes[0].estimatefee(i) for i in range(1,12) ]\n+    print(\"Fee estimates, super-stingy miner: \"+str([str(e) for e in all_estimates]))\n+\n+    # Estimates should be within the bounds of what transactions fees actually were:\n+    delta = 1.0e-6 # account for rounding error\n+    for e in filter(lambda x: x >= 0, all_estimates):\n+        if float(e)+delta < min(fees_per_kb) or float(e)-delta > max(fees_per_kb):\n+            raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"%(float(e), min_fee_kb, max_fee_kb))\n+\n+    # Generate transactions while mining 30 more blocks\n+    for i in range(30):\n+        for j in range(random.randrange(6-4,6+4)):\n+            fees_per_kb.append(random_transaction(nodes, Decimal(\"1.1\"),\n+                                                  Decimal(\"0.0\"), min_fee, 20))\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+\n+    all_estimates = [ nodes[0].estimatefee(i) for i in range(1,12) ]\n+    print(\"Fee estimates, more generous miner: \"+str([ str(e) for e in all_estimates]))",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 160,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Don't understand this bit about more generous miner: mining behaviour didn't change in the step between the test being repeated?\n",
    "created_at": "2014-03-27T16:55:14Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 160,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032445",
    "pull_request_review_id": null,
    "id": 11032445,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyNDQ1",
    "diff_hunk": "@@ -906,6 +907,22 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return false;\n     }\n \n+    // It is OK if mempool.Read() fails; starting out with an empty memory pool is not\n+    // a problem, it gets filled quickly.\n+    list<CTxMemPoolEntry> mempoolEntries;\n+    if (mempool.Read(mempoolEntries) && !empty(mempoolEntries))\n+    {\n+        CValidationState valState;\n+        bool fMissingInputs;\n+        BOOST_FOREACH(CTxMemPoolEntry& mempoolEntry, mempoolEntries)\n+        {\n+            AcceptToMemoryPool(mempool, valState, mempoolEntry.GetTx(), false,\n+                               &fMissingInputs, false);\n+        }\n+        LogPrintf(\"Accepted %lu mempool transactions\\n\", mempool.size());\n+    }",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No log that loading failed?\n",
    "created_at": "2014-03-27T16:55:54Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032445",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032445"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032445"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 923,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032722",
    "pull_request_review_id": null,
    "id": 11032722,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyNzIy",
    "diff_hunk": "@@ -35,12 +39,280 @@\n     return dResult;\n }\n \n+//\n+// Keep track of fee/priority for transactions confirmed within N blocks\n+//\n+class CBlockAverage\n+{\n+private:\n+    boost::circular_buffer<double> feePerKilobyteSamples;\n+    boost::circular_buffer<double> prioritySamples;\n+\n+    std::vector<double> buf2vec(boost::circular_buffer<double> buf) const\n+    {\n+        std::vector<double> vec(buf.begin(), buf.end());\n+        return vec;\n+    }\n+\n+public:\n+    CBlockAverage() : feePerKilobyteSamples(100), prioritySamples(100) { }\n+\n+    void RecordFee(double feePerKilobyte) {\n+        feePerKilobyteSamples.push_back(feePerKilobyte);\n+    }\n+\n+    void RecordPriority(double priority) {\n+        prioritySamples.push_back(priority);\n+    }\n+\n+    size_t FeeSamples() const { return feePerKilobyteSamples.size(); }\n+    size_t FeeSamples(std::vector<double>& insertInto) const\n+    {\n+        BOOST_FOREACH(double d, feePerKilobyteSamples)\n+            insertInto.push_back(d);\n+        return feePerKilobyteSamples.size();\n+    }\n+    size_t PrioritySamples() const { return prioritySamples.size(); }\n+    size_t PrioritySamples(std::vector<double>& insertInto) const\n+    {\n+        BOOST_FOREACH(double d, prioritySamples)\n+            insertInto.push_back(d);\n+        return prioritySamples.size();\n+    }\n+\n+    void Write(CAutoFile& fileout) const\n+    {\n+        std::vector<double> vec = buf2vec(feePerKilobyteSamples);\n+        fileout << vec;\n+        vec = buf2vec(prioritySamples);\n+        fileout << vec;\n+    }\n+\n+    void Read(CAutoFile& filein) {\n+        std::vector<double> vec;\n+        filein >> vec;\n+        feePerKilobyteSamples.insert(feePerKilobyteSamples.end(), vec.begin(), vec.end());\n+        vec.clear();\n+        filein >> vec;\n+        prioritySamples.insert(prioritySamples.end(), vec.begin(), vec.end());\n+        if (feePerKilobyteSamples.size() + prioritySamples.size() > 0)\n+            LogPrint(\"estimatefee\", \"Read %d fee samples and %d priority samples\\n\",\n+                     feePerKilobyteSamples.size(), prioritySamples.size());\n+    }\n+};\n+\n+class CMinerPolicyEstimator\n+{\n+private:\n+    // Records observed averages transactions that confirmed within one block, two blocks,\n+    // three blocks etc.\n+    std::vector<CBlockAverage> history;\n+    std::vector<double> sortedFeeSamples;\n+    std::vector<double> sortedPrioritySamples;\n+\n+    int nBestSeenHeight;\n+\n+    // nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n+    // nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n+    void seenTxConfirm(double dFeePerKilobyte, double dPriority, int nBlocksAgo)\n+    {\n+        // Last entry records \"everything else\".\n+        int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n+        assert(nBlocksTruncated >= 0);\n+\n+        // We need to guess why the transaction was included in a block-- either\n+        // because it is high-priority or because it has sufficient fees.\n+        bool sufficientFee = (dFeePerKilobyte >= (CTransaction::nMinRelayTxFee/1.0e8));\n+        bool sufficientPriority = AllowFree(dPriority);\n+        const char* assignedTo = \"unassigned\";\n+        if (sufficientFee && !sufficientPriority)\n+        {\n+            history[nBlocksTruncated].RecordFee(dFeePerKilobyte);\n+            assignedTo = \"fee\";\n+        }\n+        else if (sufficientPriority && !sufficientFee)\n+        {\n+            history[nBlocksTruncated].RecordPriority(dPriority);\n+            assignedTo = \"priority\";\n+        }\n+        else\n+        {\n+            // Neither or both fee and priority sufficient to get confirmed:\n+            // don't know why they got confirmed.\n+        }\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %g fee per kilobyte/%g priority, took %d blocks\\n\",\n+                 assignedTo, dFeePerKilobyte, dPriority, nBlocksAgo);\n+    }\n+\n+public:\n+    CMinerPolicyEstimator(int nEntries) : nBestSeenHeight(0)\n+    {\n+        history.resize(nEntries);\n+    }\n+\n+    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight)\n+    {\n+        if (nBlockHeight <= nBestSeenHeight)\n+        {\n+            // Ignore side chains and re-orgs; assuming they are random\n+            // they don't affect the estimate.\n+            // And if an attacker can re-org the chain at will, then\n+            // you've got much bigger problems than \"attacker can influence\n+            // transaction fees.\"\n+            return;\n+        }\n+        nBestSeenHeight = nBlockHeight;\n+\n+        // Fill up the history buckets based on how long transactions took\n+        // to confirm.\n+        std::vector<std::vector<const CTxMemPoolEntry*> > entriesByConfirmations;\n+        entriesByConfirmations.resize(history.size());\n+        BOOST_FOREACH(const CTxMemPoolEntry& entry, entries)\n+        {\n+            // How many blocks did it take for miners to include this transaction?\n+            int delta = nBlockHeight - entry.GetHeight();\n+            if (delta <= 0)\n+            {\n+                // Re-org made us lose height, this should only happen if we happen\n+                // to re-org on a difficulty transition point: very rare!\n+                continue;\n+            }\n+            if ((delta-1) >= history.size())\n+                delta = history.size(); // Last bucket is catch-all\n+            entriesByConfirmations[delta-1].push_back(&entry);\n+        }\n+        for (size_t i = 0; i < entriesByConfirmations.size(); i++)\n+        {\n+            std::vector<const CTxMemPoolEntry*> &e = entriesByConfirmations.at(i);\n+            // Insert at most 10 random entries per bucket, otherwise a single block\n+            // can dominate an estimate:\n+            if (e.size() > 10) {\n+                std::random_shuffle(e.begin(), e.end());\n+                e.resize(10);\n+            }\n+            BOOST_FOREACH(const CTxMemPoolEntry* entry, e)\n+            {\n+                // Fees are stored and reported as BTC-per-kb:\n+                double dFee = entry->GetFee() / 1.0e8; // convert satoshis to BTC\n+                double dKb = entry->GetTxSize()/1.0e3; // bytes to kilobytes\n+                double dFeePerKb = dFee/dKb;\n+                double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n+                seenTxConfirm(dFeePerKb, dPriority, i);\n+            }\n+        }\n+        for (size_t i = 0; i < history.size(); i++) {\n+            if (history[i].FeeSamples() + history[i].PrioritySamples() > 0)\n+// TODO: REMOVE ME",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 180,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "// TODO: save me :)\n",
    "created_at": "2014-03-27T17:00:59Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032722",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032722"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032722"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 205,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032962",
    "pull_request_review_id": null,
    "id": 11032962,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMyOTYy",
    "diff_hunk": "@@ -35,12 +39,280 @@\n     return dResult;\n }\n \n+//\n+// Keep track of fee/priority for transactions confirmed within N blocks\n+//\n+class CBlockAverage\n+{\n+private:\n+    boost::circular_buffer<double> feePerKilobyteSamples;\n+    boost::circular_buffer<double> prioritySamples;\n+\n+    std::vector<double> buf2vec(boost::circular_buffer<double> buf) const\n+    {\n+        std::vector<double> vec(buf.begin(), buf.end());\n+        return vec;\n+    }\n+\n+public:\n+    CBlockAverage() : feePerKilobyteSamples(100), prioritySamples(100) { }\n+\n+    void RecordFee(double feePerKilobyte) {\n+        feePerKilobyteSamples.push_back(feePerKilobyte);\n+    }\n+\n+    void RecordPriority(double priority) {\n+        prioritySamples.push_back(priority);\n+    }\n+\n+    size_t FeeSamples() const { return feePerKilobyteSamples.size(); }\n+    size_t FeeSamples(std::vector<double>& insertInto) const\n+    {\n+        BOOST_FOREACH(double d, feePerKilobyteSamples)\n+            insertInto.push_back(d);\n+        return feePerKilobyteSamples.size();\n+    }\n+    size_t PrioritySamples() const { return prioritySamples.size(); }\n+    size_t PrioritySamples(std::vector<double>& insertInto) const\n+    {\n+        BOOST_FOREACH(double d, prioritySamples)\n+            insertInto.push_back(d);\n+        return prioritySamples.size();\n+    }\n+\n+    void Write(CAutoFile& fileout) const\n+    {\n+        std::vector<double> vec = buf2vec(feePerKilobyteSamples);\n+        fileout << vec;\n+        vec = buf2vec(prioritySamples);\n+        fileout << vec;\n+    }\n+\n+    void Read(CAutoFile& filein) {\n+        std::vector<double> vec;\n+        filein >> vec;\n+        feePerKilobyteSamples.insert(feePerKilobyteSamples.end(), vec.begin(), vec.end());\n+        vec.clear();\n+        filein >> vec;\n+        prioritySamples.insert(prioritySamples.end(), vec.begin(), vec.end());\n+        if (feePerKilobyteSamples.size() + prioritySamples.size() > 0)\n+            LogPrint(\"estimatefee\", \"Read %d fee samples and %d priority samples\\n\",\n+                     feePerKilobyteSamples.size(), prioritySamples.size());\n+    }\n+};\n+\n+class CMinerPolicyEstimator\n+{\n+private:\n+    // Records observed averages transactions that confirmed within one block, two blocks,\n+    // three blocks etc.\n+    std::vector<CBlockAverage> history;\n+    std::vector<double> sortedFeeSamples;\n+    std::vector<double> sortedPrioritySamples;\n+\n+    int nBestSeenHeight;\n+\n+    // nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n+    // nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n+    void seenTxConfirm(double dFeePerKilobyte, double dPriority, int nBlocksAgo)\n+    {\n+        // Last entry records \"everything else\".\n+        int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n+        assert(nBlocksTruncated >= 0);\n+\n+        // We need to guess why the transaction was included in a block-- either\n+        // because it is high-priority or because it has sufficient fees.\n+        bool sufficientFee = (dFeePerKilobyte >= (CTransaction::nMinRelayTxFee/1.0e8));\n+        bool sufficientPriority = AllowFree(dPriority);\n+        const char* assignedTo = \"unassigned\";\n+        if (sufficientFee && !sufficientPriority)\n+        {\n+            history[nBlocksTruncated].RecordFee(dFeePerKilobyte);\n+            assignedTo = \"fee\";\n+        }\n+        else if (sufficientPriority && !sufficientFee)\n+        {\n+            history[nBlocksTruncated].RecordPriority(dPriority);\n+            assignedTo = \"priority\";\n+        }\n+        else\n+        {\n+            // Neither or both fee and priority sufficient to get confirmed:\n+            // don't know why they got confirmed.\n+        }\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %g fee per kilobyte/%g priority, took %d blocks\\n\",\n+                 assignedTo, dFeePerKilobyte, dPriority, nBlocksAgo);\n+    }\n+\n+public:\n+    CMinerPolicyEstimator(int nEntries) : nBestSeenHeight(0)\n+    {\n+        history.resize(nEntries);\n+    }\n+\n+    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight)\n+    {\n+        if (nBlockHeight <= nBestSeenHeight)\n+        {\n+            // Ignore side chains and re-orgs; assuming they are random\n+            // they don't affect the estimate.\n+            // And if an attacker can re-org the chain at will, then\n+            // you've got much bigger problems than \"attacker can influence\n+            // transaction fees.\"\n+            return;\n+        }\n+        nBestSeenHeight = nBlockHeight;\n+\n+        // Fill up the history buckets based on how long transactions took\n+        // to confirm.\n+        std::vector<std::vector<const CTxMemPoolEntry*> > entriesByConfirmations;\n+        entriesByConfirmations.resize(history.size());\n+        BOOST_FOREACH(const CTxMemPoolEntry& entry, entries)\n+        {\n+            // How many blocks did it take for miners to include this transaction?\n+            int delta = nBlockHeight - entry.GetHeight();\n+            if (delta <= 0)\n+            {\n+                // Re-org made us lose height, this should only happen if we happen\n+                // to re-org on a difficulty transition point: very rare!\n+                continue;\n+            }\n+            if ((delta-1) >= history.size())\n+                delta = history.size(); // Last bucket is catch-all\n+            entriesByConfirmations[delta-1].push_back(&entry);\n+        }\n+        for (size_t i = 0; i < entriesByConfirmations.size(); i++)\n+        {\n+            std::vector<const CTxMemPoolEntry*> &e = entriesByConfirmations.at(i);\n+            // Insert at most 10 random entries per bucket, otherwise a single block\n+            // can dominate an estimate:\n+            if (e.size() > 10) {\n+                std::random_shuffle(e.begin(), e.end());\n+                e.resize(10);\n+            }\n+            BOOST_FOREACH(const CTxMemPoolEntry* entry, e)\n+            {\n+                // Fees are stored and reported as BTC-per-kb:\n+                double dFee = entry->GetFee() / 1.0e8; // convert satoshis to BTC\n+                double dKb = entry->GetTxSize()/1.0e3; // bytes to kilobytes\n+                double dFeePerKb = dFee/dKb;\n+                double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n+                seenTxConfirm(dFeePerKb, dPriority, i);\n+            }\n+        }\n+        for (size_t i = 0; i < history.size(); i++) {\n+            if (history[i].FeeSamples() + history[i].PrioritySamples() > 0)\n+// TODO: REMOVE ME\n+                LogPrint(\"estimatefee\", \"estimates: for confirming within %d blocks based on %d/%d samples, fee=%g per kilobyte, prio=%g\\n\", \n+                         i,\n+                         history[i].FeeSamples(), history[i].PrioritySamples(),\n+                         estimateFee(i+1), estimatePriority(i+1));\n+        }\n+        sortedFeeSamples.clear();\n+        sortedPrioritySamples.clear();\n+    }\n+\n+    // Can return -1 if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n+    double estimateFee(int nBlocksToConfirm)\n+    {\n+        nBlocksToConfirm--;\n+\n+        if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n+            return -1;\n+\n+        if (sortedFeeSamples.size() == 0)\n+        {\n+            for (size_t i = 0; i < history.size(); i++)\n+                history.at(i).FeeSamples(sortedFeeSamples);\n+            std::sort(sortedFeeSamples.begin(), sortedFeeSamples.end(),\n+                      std::greater<double>());\n+        }\n+        if (sortedFeeSamples.size() == 0)\n+            return -1.0;\n+\n+        int nBucketSize = history.at(nBlocksToConfirm).FeeSamples();\n+\n+        // Estimates should not increase as number of confirmations goes up,\n+        // but the estimates are noisy because confirmations happen discretely\n+        // in blocks. To smooth out the estimates, use all samples in the history\n+        // and use the nth highest where n is (number of samples in previous bucket +\n+        // half the samples in nBlocksToConfirm bucket):\n+        size_t nPrevSize = 0;\n+        for (size_t i = 0; i < nBlocksToConfirm; i++)\n+            nPrevSize += history.at(i).FeeSamples();\n+        size_t index = min(nPrevSize + nBucketSize/2, sortedFeeSamples.size()-1);\n+        return sortedFeeSamples[index];\n+    }\n+    double estimatePriority(int nBlocksToConfirm)\n+    {\n+        nBlocksToConfirm--;\n+\n+        if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n+            return -1;\n+\n+        if (sortedPrioritySamples.size() == 0)\n+        {\n+            for (size_t i = 0; i < history.size(); i++)\n+                history.at(i).PrioritySamples(sortedPrioritySamples);\n+            std::sort(sortedPrioritySamples.begin(), sortedPrioritySamples.end(),\n+                      std::greater<double>());\n+        }\n+        if (sortedPrioritySamples.size() == 0)\n+            return -1.0;\n+\n+        int nBucketSize = history.at(nBlocksToConfirm).PrioritySamples();\n+\n+        // Estimates should not increase as number of confirmations needed goes up,\n+        // but the estimates are noisy because confirmations happen discretely\n+        // in blocks. To smooth out the estimates, use all samples in the history\n+        // and use the nth highest where n is (number of samples in previous buckets +\n+        // half the samples in nBlocksToConfirm bucket).\n+        size_t nPrevSize = 0;\n+        for (size_t i = 0; i < nBlocksToConfirm; i++)\n+            nPrevSize += history.at(i).PrioritySamples();\n+        size_t index = min(nPrevSize + nBucketSize/2, sortedFeeSamples.size()-1);\n+        return sortedPrioritySamples[index];\n+    }\n+\n+    void Write(CAutoFile& fileout) const\n+    {\n+        fileout << nBestSeenHeight;\n+        fileout << history.size();\n+        BOOST_FOREACH(const CBlockAverage& entry, history)\n+        {\n+            entry.Write(fileout);\n+        }\n+    }\n+\n+    void Read(CAutoFile& filein)\n+    {\n+        filein >> nBestSeenHeight;\n+        size_t numEntries;\n+        filein >> numEntries;\n+        history.clear();\n+        for (size_t i = 0; i < numEntries; i++)\n+        {\n+            CBlockAverage entry;\n+            entry.Read(filein);\n+            history.push_back(entry);\n+        }\n+    }\n+};\n+\n+\n CTxMemPool::CTxMemPool()\n {\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n+\n+    minerPolicyEstimator = new CMinerPolicyEstimator(25);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 285,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "// 25 blocks was determined empirically to give the best performance as of March 2014.\n",
    "created_at": "2014-03-27T17:05:36Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032962",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032962"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032962"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11032962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127357",
    "pull_request_review_id": null,
    "id": 11127357,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI3MzU3",
    "diff_hunk": "@@ -906,6 +907,22 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return false;\n     }\n \n+    // It is OK if mempool.Read() fails; starting out with an empty memory pool is not\n+    // a problem, it gets filled quickly.\n+    list<CTxMemPoolEntry> mempoolEntries;\n+    if (mempool.Read(mempoolEntries) && !empty(mempoolEntries))\n+    {\n+        CValidationState valState;\n+        bool fMissingInputs;\n+        BOOST_FOREACH(CTxMemPoolEntry& mempoolEntry, mempoolEntries)\n+        {\n+            AcceptToMemoryPool(mempool, valState, mempoolEntry.GetTx(), false,\n+                               &fMissingInputs, false);\n+        }\n+        LogPrintf(\"Accepted %lu mempool transactions\\n\", mempool.size());\n+    }",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, logging of failures happens in mempool.Read(), no need to log a specific error and then a generic \"read failed\" error.\n",
    "created_at": "2014-03-31T17:46:03Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127357",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127357"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127357"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 923,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127668",
    "pull_request_review_id": null,
    "id": 11127668,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI3NjY4",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test fee estimation code\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import random\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def find_output(node, txid, amount):\n+    txdata = node.getrawtransaction(txid, 1)\n+    for i in range(len(txdata[\"vout\"])):\n+        if txdata[\"vout\"][i][\"value\"] == amount:\n+            return i\n+    return -1\n+\n+def gather_inputs(from_node, amount_needed):",
    "path": "qa/rpc-tests/smartfees.py",
    "position": null,
    "original_position": 30,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "8a826e675c9c16ba933b1d6d41f10fca1b1fd023",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Moving useful functions to util.py, but am going to hold off on moving main; there's another pull request that bundles everything up into a framework...\n",
    "created_at": "2014-03-31T17:52:15Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127668",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127668"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127668"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/11127668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/12897156",
    "pull_request_review_id": null,
    "id": 12897156,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODk3MTU2",
    "diff_hunk": "@@ -610,19 +595,19 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     // tool tips\n     QString toolTip1 = tr(\"This label turns red, if the transaction size is greater than 1000 bytes.\") + \"<br /><br />\";\n-    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CTransaction::nMinTxFee)) + \"<br /><br />\";\n+    toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CTransaction::minTxFee.GetFee(1000))) + \"<br /><br />\";",
    "path": "src/qt/coincontroldialog.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "eae89281cec5e5d12b0b06654edb7e1105047286",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: There are a lot of getFee(1000)'s. I don't have an objection to them, although on first reading I was confused ('what is this magic 1000 number'). But instead of suggesting defining a constant BYTES_PER_KB :p I think it would be nicer to have a function getFeePerKB() that's simply an inline for getFee(1000).\n",
    "created_at": "2014-05-21T14:02:26Z",
    "updated_at": "2014-06-06T14:45:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r12897156",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/12897156"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r12897156"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/12897156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 598,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13494256",
    "pull_request_review_id": null,
    "id": 13494256,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk0MjU2",
    "diff_hunk": "@@ -536,26 +536,11 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             nChange = nAmount - nPayFee - nPayAmount;\n \n-            // if sub-cent change is required, the fee must be raised to at least CTransaction::nMinTxFee",
    "path": "src/qt/coincontroldialog.cpp",
    "position": 22,
    "original_position": 22,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Wouldn't we want to keep this block, but do it to prevent dust change rather than subcent change?\n",
    "created_at": "2014-06-06T15:08:12Z",
    "updated_at": "2014-06-06T15:08:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13494256",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13494256"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13494256"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13494256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 539,
    "original_line": 539,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13495549",
    "pull_request_review_id": null,
    "id": 13495549,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk1NTQ5",
    "diff_hunk": "@@ -536,26 +536,11 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             nChange = nAmount - nPayFee - nPayAmount;\n \n-            // if sub-cent change is required, the fee must be raised to at least CTransaction::nMinTxFee",
    "path": "src/qt/coincontroldialog.cpp",
    "position": 22,
    "original_position": 22,
    "commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "original_commit_id": "171ca7745e77c9f78f26556457fe64e5b2004a75",
    "user": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Dust change is handled at line 543.\n",
    "created_at": "2014-06-06T15:34:18Z",
    "updated_at": "2014-06-06T15:34:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13495549",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13495549"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13495549"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3959"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13495549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 539,
    "original_line": 539,
    "side": "RIGHT"
  }
]