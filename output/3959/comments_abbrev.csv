gavinandresen,2014-03-31T18:00:39Z,"Rebased on master, and tweaked to address Mike's comments (thanks for the review!).\n",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-39120314,39120314,
gavinandresen,2014-04-01T13:58:27Z,Pull-tester errors were with the regression test:\n\npull-tester is running python 2.6  (fixed by using subprocess.check_call instead of python2.7 subprocess.check_output).\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-39208091,39208091,
mikehearn,2014-05-07T17:23:54Z,What's the status of this work? Does it need more review or testing or what?\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-42456554,42456554,
laanwj,2014-05-07T17:34:56Z,"It's queued to be merged for 0.10, so after the 0.9.2 branch split-off.\nBut more review and testing is always welcome.\n",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-42457936,42457936,
gavinandresen,2014-05-23T16:33:50Z,Nit-picked : replace GetFee(1000) with inline GetFeePerK() method.\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44032969,44032969,
gavinandresen,2014-05-29T16:35:45Z,Rebased on master.\n\nI'm very happy with how quickly this generates good estimates; after just three or four blocks it has a good idea of what priority or fee is needed to get into the next couple of blocks.\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44553040,44553040,
sipa,2014-05-29T17:18:38Z,Save/restore of the mempool seems quite dangerous in making some unconfirmed transactions potentially live forever in the network...\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44558034,44558034,
jgarzik,2014-05-29T17:22:02Z,Nod -- you only want to save/restore once we have transactions expiring from the mempool (janitor etc.) after X blocks.\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44558446,44558446,
petertodd,2014-05-30T07:06:26Z,@sipa Yup. Even with expiration it makes many DoS attacks and similar vulnerabilities much more effective. For instance OOM crashes are hard to exploit right now because the txs are hard to propagate; not true with save restore. \n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44621083,44621083,
jgarzik,2014-05-30T07:23:21Z,"In general, lacking other tools, clearing the mempool [implicitly] at startup is a valuable tool.\n",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44622117,44622117,
gavinandresen,2014-05-30T13:22:57Z,"Consensus is saving/restoring memory pool is dangerous, so I've removed that functionality.\n\nFee estimates ARE saved/restored, to datadir fee_estimates.dat file.\n",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-44649634,44649634,
jgarzik,2014-06-06T15:00:23Z,"ACK.  Speaking conservatively, appears to be low impact as implemented at first glance.\n\nThe largest impact is to existing operations is the hook that is executed when a block appears, necessitating the removal of TXs from the mempool.  At a quick glance, it was difficult to discern the big-O() of this operation, but at least it is all in CPU/RAM, and only executed once per incoming new block.\n",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-45346289,45346289,
BitcoinPullTester,2014-06-06T16:50:51Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/171ca7745e77c9f78f26556457fe64e5b2004a75 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-45358992,45358992,
gmaxwell,2014-11-20T17:28:36Z,If mempool saving ever comes back as a proposal we should keep in mind that doing so presents a pretty strong watermarking attack. (... not that we don't have many other watermarking attacks.)\n,https://github.com/bitcoin/bitcoin/pull/3959#issuecomment-63845974,63845974,
mikehearn,2014-03-27T16:49:05Z,"A lot of this stuff looks like it should be in a utility library (the main function too), otherwise it's getting copy/pasted everywhere.\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032046,11032046,qa/rpc-tests/smartfees.py
mikehearn,2014-03-27T16:49:44Z,Is this actually needed for the tests? It seems a bit odd to have it here.\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032085,11032085,qa/rpc-tests/smartfees.py
mikehearn,2014-03-27T16:51:12Z,"The error case is never checked by the caller. Better to throw, I think.\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032174,11032174,qa/rpc-tests/smartfees.py
mikehearn,2014-03-27T16:52:39Z,But no debug flags here?\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032254,11032254,qa/rpc-tests/smartfees.py
mikehearn,2014-03-27T16:55:14Z,Don't understand this bit about more generous miner: mining behaviour didn't change in the step between the test being repeated?\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032406,11032406,qa/rpc-tests/smartfees.py
mikehearn,2014-03-27T16:55:54Z,No log that loading failed?\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032445,11032445,src/init.cpp
mikehearn,2014-03-27T17:00:59Z,// TODO: save me :)\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032722,11032722,src/txmempool.cpp
mikehearn,2014-03-27T17:05:36Z,// 25 blocks was determined empirically to give the best performance as of March 2014.\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11032962,11032962,src/txmempool.cpp
gavinandresen,2014-03-31T17:46:03Z,"No, logging of failures happens in mempool.Read(), no need to log a specific error and then a generic ""read failed"" error.\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127357,11127357,src/init.cpp
gavinandresen,2014-03-31T17:52:15Z,"Moving useful functions to util.py, but am going to hold off on moving main; there's another pull request that bundles everything up into a framework...\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r11127668,11127668,qa/rpc-tests/smartfees.py
laanwj,2014-05-21T14:02:26Z,"Nit: There are a lot of getFee(1000)'s. I don't have an objection to them, although on first reading I was confused ('what is this magic 1000 number'). But instead of suggesting defining a constant BYTES_PER_KB :p I think it would be nicer to have a function getFeePerKB() that's simply an inline for getFee(1000).\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r12897156,12897156,src/qt/coincontroldialog.cpp
sipa,2014-06-06T15:08:12Z,"Wouldn't we want to keep this block, but do it to prevent dust change rather than subcent change?\n",https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13494256,13494256,src/qt/coincontroldialog.cpp
gavinandresen,2014-06-06T15:34:18Z,Dust change is handled at line 543.\n,https://github.com/bitcoin/bitcoin/pull/3959#discussion_r13495549,13495549,src/qt/coincontroldialog.cpp
