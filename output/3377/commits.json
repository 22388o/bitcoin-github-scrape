[
  {
    "sha": "962b1cf441ceb1de7791d89951a79a54a2fefcd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjJiMWNmNDQxY2ViMWRlNzc5MWQ4OTk1MWE3OWE1NGEyZmVmY2Q0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-10T01:34:28Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-10T01:34:28Z"
      },
      "message": "Fix infinite loop with LogPrint on Windows\n\nRunning -printtodebugger -debug (or -debug=lock),\ncompiled with -DDEBUG_LOCKORDER would infinite loop\non Windows because every critical section lock/unlock\ntriggers a LogPrint.\n\nSolution is to use the raw boost mutex instead of a CCriticalSection.",
      "tree": {
        "sha": "59909d2f6aac84c197f2ecf0440f0159ad294b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59909d2f6aac84c197f2ecf0440f0159ad294b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/962b1cf441ceb1de7791d89951a79a54a2fefcd4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/962b1cf441ceb1de7791d89951a79a54a2fefcd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/962b1cf441ceb1de7791d89951a79a54a2fefcd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/962b1cf441ceb1de7791d89951a79a54a2fefcd4/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "955787f83f49dab298763a3a119766494dede30f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955787f83f49dab298763a3a119766494dede30f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/955787f83f49dab298763a3a119766494dede30f"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 14,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d975cc9bfb6b2acdc18e63e6bf95635f046c6a4f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/962b1cf441ceb1de7791d89951a79a54a2fefcd4/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/962b1cf441ceb1de7791d89951a79a54a2fefcd4/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=962b1cf441ceb1de7791d89951a79a54a2fefcd4",
        "patch": "@@ -299,27 +299,24 @@ int LogPrint(const char* category, const char* pszFormat, ...)\n #ifdef WIN32\n     if (fPrintToDebugger)\n     {\n-        static CCriticalSection cs_OutputDebugStringF;\n-\n         // accumulate and output a line at a time\n-        {\n-            LOCK(cs_OutputDebugStringF);\n-            static std::string buffer;\n+        static std::string buffer;\n \n-            va_list arg_ptr;\n-            va_start(arg_ptr, pszFormat);\n-            buffer += vstrprintf(pszFormat, arg_ptr);\n-            va_end(arg_ptr);\n+        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-            int line_start = 0, line_end;\n-            while((line_end = buffer.find('\\n', line_start)) != -1)\n-            {\n-                OutputDebugStringA(buffer.substr(line_start, line_end - line_start).c_str());\n-                line_start = line_end + 1;\n-                ret += line_end-line_start;\n-            }\n-            buffer.erase(0, line_start);\n+        va_list arg_ptr;\n+        va_start(arg_ptr, pszFormat);\n+        buffer += vstrprintf(pszFormat, arg_ptr);\n+        va_end(arg_ptr);\n+\n+        int line_start = 0, line_end;\n+        while((line_end = buffer.find('\\n', line_start)) != -1)\n+        {\n+            OutputDebugStringA(buffer.substr(line_start, line_end - line_start).c_str());\n+            line_start = line_end + 1;\n+            ret += line_end-line_start;\n         }\n+        buffer.erase(0, line_start);\n     }\n #endif\n     return ret;"
      }
    ]
  },
  {
    "sha": "0b238b278686f8e0c6609b7c9360d36c3198105c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjIzOGIyNzg2ODZmOGUwYzY2MDliN2M5MzYwZDM2YzMxOTgxMDVj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-10T03:19:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-10T03:19:18Z"
      },
      "message": "Use thread-local storage for LogPrint(category...)\n\nThis prevents crashes at shutdown where a global destructor\ncalls LogPrint(category...) after mapMultiArgs has been\ndeleted.",
      "tree": {
        "sha": "f7e4e2b07029d7c87c28d4e050454dc6b848fca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7e4e2b07029d7c87c28d4e050454dc6b848fca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b238b278686f8e0c6609b7c9360d36c3198105c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b238b278686f8e0c6609b7c9360d36c3198105c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b238b278686f8e0c6609b7c9360d36c3198105c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b238b278686f8e0c6609b7c9360d36c3198105c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "962b1cf441ceb1de7791d89951a79a54a2fefcd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/962b1cf441ceb1de7791d89951a79a54a2fefcd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/962b1cf441ceb1de7791d89951a79a54a2fefcd4"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 15,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bedf59767b1f8ff58550ffc030c75ae47e1737f1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b238b278686f8e0c6609b7c9360d36c3198105c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b238b278686f8e0c6609b7c9360d36c3198105c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0b238b278686f8e0c6609b7c9360d36c3198105c",
        "patch": "@@ -242,17 +242,23 @@ int LogPrint(const char* category, const char* pszFormat, ...)\n         if (!fDebug)\n             return 0;\n \n-        const vector<string>& categories = mapMultiArgs[\"-debug\"];\n-        bool allCategories = count(categories.begin(), categories.end(), string(\"\"));\n-\n-        // Only look for categories, if not -debug/-debug=1 was passed,\n-        // as that implies every category should be logged.\n-        if (!allCategories)\n+        // Give each thread quick access to -debug settings.\n+        // This helps prevent issues debugging global destructors,\n+        // where mapMultiArgs might be deleted before another\n+        // global destructor calls LogPrint()\n+        static boost::thread_specific_ptr<set<string> > ptrCategory;\n+        if (ptrCategory.get() == NULL)\n         {\n-            // Category was not found (not supplied via -debug=<category>)\n-            if (find(categories.begin(), categories.end(), string(category)) == categories.end())\n-                return 0;\n+            const vector<string>& categories = mapMultiArgs[\"-debug\"];\n+            ptrCategory.reset(new set<string>(categories.begin(), categories.end()));\n+            // thread_specific_ptr automatically deletes the set when the thread ends.\n         }\n+        const set<string>& setCategories = *ptrCategory.get();\n+\n+        // if not debugging everything and not debugging specific category, LogPrint does nothing.\n+        if (setCategories.count(string(\"\")) == 0 &&\n+            setCategories.count(string(category)) == 0)\n+            return 0;\n     }\n \n     int ret = 0; // Returns total number of characters written"
      }
    ]
  }
]