gavinandresen,2011-05-13T00:09:55Z,"Nice!  I'll have to find some time to try to break it...\nrpc.cpp is getting way too big; maybe this would be a good time to start breaking it up into separate .cpp files with related functions (most of this code could be rpcimport.cpp, maybe....)\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1150172,1150172,
rnavarro,2011-05-14T04:55:23Z,Another feature that would be really really handy would be the ability to specify an account for the importprivkey command\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1160577,1160577,
sipa,2011-05-22T16:49:45Z,Discussion is here: http://forum.bitcoin.org/index.php?topic=8091.0\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1217795,1217795,
jgarzik,2011-06-20T05:51:42Z,"I think this is useful for wallet security (print out a private key, stick in safety deposit box), so prioritizing a rebase for this would be appreciated.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1400743,1400743,
sipa,2011-06-25T17:06:04Z,"Rebased against master, a few bugs fixed, and split off into separate source file.\n\nTODO: known wrong balance cached when importing keys\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1438452,1438452,
EricJ2190,2011-07-05T23:21:47Z,"Since this uses the ifstream class, it needs to include fstream in headers.h to build in MSVC.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1508261,1508261,
sipa,2011-07-11T13:37:46Z,"I've rebased the code against Matt's newenc, plus some other refactorings. I'll close the pull request until those are merged.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1546463,1546463,
sipa,2011-07-13T10:37:46Z,"Ok, reopened because github doesn't seem to track updates to the branch while the pullreq is closed, but this still depends on #403. Also, i'm not convinced how stable the wallet dump format is yet, so I've split the last commit in two, allowing merging of only key import/export.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1561703,1561703,
lachesis,2011-07-16T22:56:11Z,Didn't build for me:\nwallet.cpp:273:65: error: ‘PubKeyToAddress’ was not declared in this scope\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1588405,1588405,
sipa,2011-07-17T16:15:02Z,@lachesis: should be fixed\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1590491,1590491,
gmaxwell,2011-07-18T23:09:55Z,"I noticed some weird behavior with transactions heard over the network on imported keys:\n\n```\n{\n    ""account"" : """",\n    ""address"" : ""1Wh4bh"",\n    ""category"" : ""send"",\n    ""amount"" : -0.49500000,\n    ""fee"" : -0.00500000,\n    ""confirmations"" : 0,\n    ""txid"" : ""275d51ed81ae359cffe3728f6c7de8246b2b3c147b9dce316a5e952db5d76991"",\n    ""time"" : 1310993846\n}\n```\n\nKind of a short address ther",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1603335,1603335,
gmaxwell,2011-07-18T23:16:27Z,"It's really slow to import addresses one at a time— giving a rescan for each.  If someone feels adventurous, deferred lazy rescan in a thread,  and/or an import that call that takes many would be nice.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1603381,1603381,
sipa,2011-08-03T19:51:57Z,"Rebased against master, and now includes a feature-complete 'removeprivkey' call (should remove the private key, the address book entry, redundant transactions, and account information). I don't have time to test this the coming weeks, but if  people want to try it, be my guest.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1721111,1721111,
sipa,2011-09-03T17:26:19Z,"rebased against 0.4.0rc1, not tested after rebase\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-1987636,1987636,
gmaxwell,2011-09-18T06:37:15Z,I think the existence of http://www.bitaddress.org/  is a strong argument against this functionality— the feature isn't done yet and people are already creating websites which compromise bitcoin user's security.\n\nOfficial import/export functionality will increase the apparent legitimacy of attacks exploiting the functionality and bitcoin will suffer the bad PR when users hurt themselves using it,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2125614,2125614,
casascius,2011-09-20T21:46:15Z,"@gmaxwell: What part of this functionality constitutes an exploit?  The idea that one should be able to have their own private keys on paper, or on bitbills, or on physical bitcoins, etc. should be something that enhances security, not detracts from it.  Please explain how security is compromised.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2150228,2150228,
enmaku,2011-09-21T19:40:18Z,"@sipa: Nice mod!\n@gavinandresen re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly.\n@casascius: +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem @gmaxwell was addressing is that scammers can generate ""secure"" keypairs for their victims and then never relinquish control of the private ",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2160082,2160082,
casascius,2011-09-21T19:56:38Z,"@enmaku,@gmaxwell: I wasn't sure if keeping the private key was the concern here, because bitaddress.org appears to have been created with that concern in mind.  The generator at bitaddress.org is actually quite novel from a security perspective: the generation is entirely client-side and implemented in javascript in easy-to-read code in a single self-contained html file that contains no reference",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2160269,2160269,
enmaku,2011-09-21T20:00:46Z,"@casascius: I think the concern is that while you and I might check the source, 99% of folks won't and eventually one will crop up that phones home and makes a big database of privkeys ripe for exploitation. Realistically though this isn't our problem any more than any other product or service whose userbase is regularly phished. We can put the info out there, but people want this feature and if i",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2160324,2160324,
casascius,2011-09-21T20:10:07Z,"@enmaku: I share the concern, and am appreciative of the fact that the author of this website makes no attempt to explain what his website does to newbies.  You have to know why you're there and what the number means, otherwise it is just a gibberish generator.  And the part I appreciate the most is simply that he has released functional code that can be clipped and put into other environments whe",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2160427,2160427,
casascius,2011-09-22T06:56:28Z,"One more thing... the bigger the block chain gets, the longer importprivkey takes to run, mainly because of the calls to rescan the wallet.  I want this in the main client badly because I use it all the time and believe that keys on paper will help solve the black eye Bitcoin has received over security incidents, but it occurs to me that there is no way that this would be taken seriously as accept",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2164700,2164700,
sipa,2011-09-22T10:21:46Z,"Keeping a database of all addresses and all outputs to them would be a massive cost that isn't justified for just somewhat faster importing of addresses. Take into account that when more complex scripts are supported, this becomes even harder, as there could be outputs with several possible addresses or even combinations thereof.\n\nThe solution is using importwallet instead of importprivkey. It s",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2165944,2165944,
casascius,2011-09-22T13:04:16Z,"With respect to the massive database of addresses... I could see myself trying to implement that down the road as my familiarity with the code gets better, but possibly in the form of a patch or an option that is turned off by most people because it's only useful to a specific audience: server operators.\n\nThe specific real-world everyday application it would support would be so that websites (e.",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2166885,2166885,
casascius,2011-09-23T22:56:23Z,"OK, here are the goods.  Revised mini private key support that consists of adding two SetSecret functions to CBitcoinSecret to override the ones in its base class  and no modifications anywhere else.  I suppose this is a lot cleaner, and it requires only modifying base58.h and not rpcdump.cpp.\n\n```\nbool SetString(const std::string& strAddress) \n{\n    return SetString(strAddress.c_str());\n}\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2183678,2183678,
sipa,2011-09-23T23:27:42Z,What do other people think about support for @casascius' mini private keys?\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2183844,2183844,
enmaku,2011-09-23T23:39:05Z,"I think it could be a useful standard for short keys, though as a contributor on casascius' deterministic wallet generator I may be a bit biased ;)\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2183902,2183902,
gmaxwell,2011-09-24T00:04:02Z,"I'm not super-keen on the reduction in collision resistance compared to 160-bit addresses (keep in mind, general any-any ""birthday paradox"" collision is sqrt(brute force), so only 61.5 bits— but it's actually lower than that, the ""CRC"" check reduces the keyspace by another 16 bits— so only 53.5 bits of collision resistance.\n\nIf these are widely used the chances of two people accidental ending up",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184029,2184029,
gmaxwell,2011-09-24T00:25:08Z,"(ah, I'd missed on my initial read that the iterated hash is only used for the 'CRC' check— this makes the colissions in the hash less serious, but it also means that collision attacks on the 22 character version are probably practical (or at least would be under wide usage) owing to the size of the space and the fairly low cost of checking them)\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184146,2184146,
enmaku,2011-09-24T00:33:51Z,"It's a reduction to be sure, but a namespace of 22^58 possible keys is still pretty massive. That's what, about an 8.7e-63 chance of finding a specific collision at 200 MH/s running for a year? Even if a million addressed existed to potentially collide with that's still ~8.7e-57 for a single 5830, and I'm pretty sure mining is still more profitable.\n\nBesides, these addresses aren't intended for ",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184173,2184173,
sipa,2011-09-24T01:04:45Z,"The total keyspace is 58^21/2^16 keys: 21 characters with 58 possibilities each, and of this total one key in 65536 will pass the validity check.\n\nIt requires (65536_1 + 256_716 + 1)*58^21/2^16 = 2^124.94 SHA256 steps to generate all minikeys.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184308,2184308,
sipa,2011-09-24T01:25:02Z,"On the other hand, I'm not sure why we are giving up any level of security at all. A 29x29 pixel QR code can encode 56 base36 characters, which is equivalent to a full 289 bits (256 + 33 bits crc) of information. Printing 22 base58 requires a similar number of pixels, i believe.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184386,2184386,
casascius,2011-09-24T01:33:28Z,"First, let me comment on the ""birthday paradox"" argument.  I believe this is a good argument that has been misapplied.  If this were a hashing algorithm that had 21^58 possible outputs for 21^58 possible inputs, then it would definitely apply.  But we are using SHA256.  We are mapping 21^58 possible inputs into a keyspace of 2^256 outputs.  To suggest that SHA256 will only give 2^61.5 unique outpu",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184416,2184416,
casascius,2011-09-24T02:02:28Z,"@sipa: Do you suggest that a 56-character private key format that uses only uppercase be implemented instead of, versus in addition to, the 22 character format I propose?  You make a very good point, in that with such a scheme, a smaller QR code becomes possible without any question as to whether a reduction is lessening security.\n\nMy physical bitcoins aside, I believe a short-to-type private ke",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184519,2184519,
sipa,2011-09-24T02:04:59Z,"- I misunderstood one thing: the 0-byte tests are OR'ed; that means indeed 7 bits of error correction instead of 16. This does mean that if I were to attack, I'd just try those strings that hash to a 0 byte after 1 step first. Otherwise said, I can calculate half of all minikeys by only doing 256*58^21 SHA256 steps. That's not really a problem, but it makes the 717 rounds more or less pointless.\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184526,2184526,
gmaxwell,2011-09-24T02:14:28Z,"The ec multiply is just slow on our existing cpu implementations.  Gate count wise it's _much_ faster than sha256. (of course, you'll still also need  1x sha256+ripemd160 to get an address)\n\nI think you've missed the point on the birthday paradox issue: I'm not proposing that this somehow makes it easier to find the private key from the address or anything like that. There are N=58^21 possible k",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184557,2184557,
casascius,2011-09-24T02:19:12Z,"@sipa:  If you calculated half of all the minikeys and ignored all the ones that needed 717 rounds to generate, you'd only victimize those who elected to use the ones that passed on the first round.  Those who follow the best practice of only using only the ones that pass on round 717, and not on round 1, where able, are not going to be affected.  On the other hand, if you're a javascript and you ",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184564,2184564,
casascius,2011-09-24T03:00:41Z,"@gmaxwell: I used the ""either or"" check so that there would be a means to generate a crappy key if you only need it for a short time for a crappy purpose.  In other words, if you have the means to select a key that passes the 717 check and not the 1st check, then by all means do that.  That means, to generate a ""better"" key, explicitly discard all the candidates that pass on the 1st check.\n\nI ag",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184680,2184680,
casascius,2011-09-24T04:22:45Z,"Example: use PBKDF2 whenever SHA256(code + '?')[0]==0x01, and further, use the next byte (sha256()[1]) to encode the number of iterations needed to derive the key, exponentially (2^n), so that its difficulty is easily scaled (or 2^(n/4) to increase the useful range of choices).  So a code whose sha256(code+'?') starts with 0x01 0x28 would derive the key with 1024 (2^(40/4)) rounds, and one whose c",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2184920,2184920,
casascius,2011-09-24T06:00:32Z,"OK, there it is.  Proof of concept with PBKDF2, at least, at casascius/bitcoin.  For testing purposes, I have commented out the wallet scanning, so all the delay experienced can be attributed to PBKDF2 and not the wallet scanning.\n\nI also got rid of the 717-round stuff.  I haven't used any such codes on physical bitcoins so it can be scrapped right now.\n\nSo my submission either accepts a 1-rou",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2185128,2185128,
T-X,2011-11-10T02:01:32Z,"@sipa: ""What do other people think about support for @casascius' mini private keys?""\n\nSounds like an extra feature which will need extra attention. Maybe it should be added as an additional commit on top later and should be further discussed under a separate pull request after the ""straightforward"" 51-character base58-encoded import/export version got added?\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2690578,2690578,
runeksvendsen,2011-11-13T14:39:13Z,"**EDIT: I got rid of the below error by adding an include in bitcoinrpc.cpp for boost/filesystem.hpp**\n\nI get the following error when I try to build the showwallet branch with gcc 4.6:\n\n```\ng++ -c -pthread -Wno-invalid-offsetof -Wformat -g -DNOPCH  -DUSE_SSL -fno-stack-protector -fstack-protector-all -Wstack-protector -Wl,-z,relro -Wl,-z,now -D_FORTIFY_SOURCE=2 -O2 -MMD -o obj/nogui/bitcoinr",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2722546,2722546,
sipa,2011-11-13T14:59:23Z,Thanks for reporting - an include was missing. It should be fixed now.\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2722622,2722622,
runeksvendsen,2011-11-13T15:53:56Z,"Thank _you_ for adding this feature. I just tried importing a private key using this version of bitcoind on an offline computer, running Linuxcoin from a USB stick. I am now back in my everyday OS, Ubuntu, and everything seems to have worked fine - and I received no errors when importing the key, although it took a while.\nSo consider it a thumbs up for the importprivkey command from here!\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-2722857,2722857,
gavinandresen,2011-12-19T15:28:30Z,I just pulled the other dumpprivkey; is this one now obsolete?\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-3204437,3204437,
sipa,2011-12-19T15:43:47Z,"No, this one still contains removeprivkey and dumpwallet/importwallet. I've rebased them against current master now, but I'll close the request until it's more clear what dumpwallet/importwallet should do (there's talk of including addresses, for example).\n",https://github.com/bitcoin/bitcoin/pull/220#issuecomment-3204692,3204692,
sipa,2011-12-19T15:44:11Z,closing\n,https://github.com/bitcoin/bitcoin/pull/220#issuecomment-3204699,3204699,
casascius,2011-09-20T22:01:13Z,"I would like to request an addition here to support the <a href=""https://en.bitcoin.it/wiki/Mini_private_key_format"">Mini Private Key format</a> as described in the Wiki.  Basically, importing using this format would be exactly the same as the existing (51-character) string, but a 22-character mini private key could be provided instead.  This would probably fit right here as a different SetSecret ",https://github.com/bitcoin/bitcoin/pull/220#discussion_r133149,133149,src/base58.h
casascius,2011-09-22T05:50:51Z,"Here is some code I wrote - AND TESTED =) - that enables full support for mini private key imports, including proper rejection of codes failing the typo check.  Regular 51-character private keys still work like normal.  Simply replace, removing 5 lines starting from ""string strLabel = """";"" thru ""bool fGood = vchSecret..."" and inserting the following.  Sorry I am new to developing with git, learnin",https://github.com/bitcoin/bitcoin/pull/220#discussion_r135629,135629,src/rpcdump.cpp
sipa,2011-09-22T10:19:00Z,"I'm not opposed to adding other private key formats if they are useful, but I don't think just any format should be added to the main client (as opposed to eg. shipping a small script to do the conversion). That said, the mini private key format sounds useful. What do other people think about supporting this format?\n\nSecond, importprivkey is the wrong place to implement it, as CBitcoinSecrets ar",https://github.com/bitcoin/bitcoin/pull/220#discussion_r135840,135840,src/rpcdump.cpp
casascius,2011-09-22T12:46:44Z,"I had originally penciled it in to base58.h but it threw a fit seemingly because I had created a dependency on ""string"" within the header file that wasn't resolved at compile time with the order it was included, and since this was my first venture into the code (and I haven't used the STL much recently, I'll bet vector&lt;char&gt; might have gotten me further), I was not quite sure how to make it ",https://github.com/bitcoin/bitcoin/pull/220#discussion_r135992,135992,src/rpcdump.cpp
sipa,2011-09-22T17:46:35Z,"The std namespace is not included in header files, to prevent namespace pollution. Use std::string and std::vector there instead of string and vector.\n",https://github.com/bitcoin/bitcoin/pull/220#discussion_r136575,136575,src/rpcdump.cpp
casascius,2011-09-22T18:04:06Z,"Excellent suggestion, I will do that.  (Sorry, C++ semantics rusty for me, otherwise that's something that should otherwise be clear).\n\nMy intent is to just make sure that the CBitcoinSecret has a SetString override that can handle either kind of key.  (I believe the base class already has a SetString).  I can do it in the constructor, but as far as I can tell, that will require a new member (a ",https://github.com/bitcoin/bitcoin/pull/220#discussion_r136626,136626,src/rpcdump.cpp
