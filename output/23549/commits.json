[
  {
    "sha": "608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
    "node_id": "C_kwDOABII59oAKDYwOGQ4YjRhNjJiODc3MDg1ZTNlZjVkZTNkMDBjMzdlMTM2MGExYmY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-18T20:44:59Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-18T20:46:49Z"
      },
      "message": "rpc: move-only: consolidate blockchain scan args\n\nFor later reuse in `scanblocks`.",
      "tree": {
        "sha": "0a8b43a4fc0bf0197fea5334a2be8cb46944cc81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a8b43a4fc0bf0197fea5334a2be8cb46944cc81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGWu7kACgkQepNdrbLE\nTwUEVBAAhKUI7IQeySDpDN42j8TOXVhRBNkh/CR89a4DWt3ohnllDlF+dTWiQQ9G\nle9M9zDN3AXHV9VbEpp3TgrP8xTwQoK0x01lh0nS38mPrroyfioq1TQsWw9PTe6d\nQR7nFYPXAM6TnaWV4afleuSGSROZJKbMIoxulv4sQRSgSTlPXYcRSRKYhetXnOKv\n5gDh0sPdNUWct+j5aAk048oUmpV1OhEYzWoP1+9kF3x9ViklzQYqJsNkzDgG2eDa\nhPrazwVcyaQGZENjEeudba07aXTVHdZGNkmz/zIVKApzNDm179mETqvlfHk1pvyB\nmgBkmpmzbA2Y8hV6H94XDW8RoRxJQFwzU3WNoFpz16yq9s4mCXDAqRYDTrafLxu7\nvc7GnSK0ypuQIUnYRfBNvANR/JpOd7n4Ky8KSTNTHsW2RPsH3c/jpOArWd0Tx1eF\n8y1U9C3/dRnVYIQfp5Dh2CPzVcGXE10lRYf7C1ae8B+qIeeNPheYgoMEBr9o9yeq\n6sgHS5sTm6S2zVOtB7Rgf8G4vfELHVprnpqQgJh42CY6i8CBq9IlOiQQ9NNailps\nuuKK5O2POnDOHLMt4yASrYmSoF4yAcKa/hbid+vU1hdhR30j9gwczIjM01rX/MmW\ndMnOvHynVxdJsWXdIrFp1gf1hwjLxsXpPL8j1LUuSPlilUxVSuc=\n=MLZm\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a8b43a4fc0bf0197fea5334a2be8cb46944cc81\nparent 2ef186a1400c1c7f498549dd97c227819456245e\nauthor James O'Beirne <james.obeirne@pm.me> 1637268299 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1637268409 -0500\n\nrpc: move-only: consolidate blockchain scan args\n\nFor later reuse in `scanblocks`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608d8b4a62b877085e3ef5de3d00c37e1360a1bf/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ef186a1400c1c7f498549dd97c227819456245e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef186a1400c1c7f498549dd97c227819456245e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef186a1400c1c7f498549dd97c227819456245e"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 34,
      "deletions": 21
    },
    "files": [
      {
        "sha": "053207b0cd5e48655a2ad7daed0e2a6bb5a0ce4c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 21,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/608d8b4a62b877085e3ef5de3d00c37e1360a1bf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/608d8b4a62b877085e3ef5de3d00c37e1360a1bf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
        "patch": "@@ -2294,6 +2294,35 @@ class CoinsViewScanReserver\n     }\n };\n \n+static const auto scan_action_arg_desc = RPCArg{\n+    \"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+        \"\\\"start\\\" for starting a scan\\n\"\n+        \"\\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+        \"\\\"status\\\" for progress report (in %) of the current scan\"\n+};\n+\n+static const auto scan_objects_arg_desc = RPCArg{\n+    \"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n+        \"Every scan object is either a string descriptor or an object:\",\n+    {\n+        {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+        {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+            {\n+                {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                {\"range\", RPCArg::Type::RANGE, RPCArg::Default{1000}, \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+            }},\n+    },\n+    \"[scanobjects,...]\"\n+};\n+\n+static const auto scan_result_abort = RPCResult{\"When action=='abort'\", RPCResult::Type::BOOL, \"\", \"\"};\n+static const auto scan_result_status_none = RPCResult{\"When action=='status' and no scan is in progress\", RPCResult::Type::NONE, \"\", \"\"};\n+static const auto scan_result_status_some = RPCResult{\n+    \"When action=='status' and scan is in progress\", RPCResult::Type::OBJ, \"\", \"\",\n+    {{RPCResult::Type::NUM, \"progress\", \"The scan progress\"},}\n+};\n+\n+\n static RPCHelpMan scantxoutset()\n {\n     return RPCHelpMan{\"scantxoutset\",\n@@ -2310,29 +2339,13 @@ static RPCHelpMan scantxoutset()\n         \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n         \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n         {\n-            {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n-                \"\\\"start\\\" for starting a scan\\n\"\n-                \"\\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-                \"\\\"status\\\" for progress report (in %) of the current scan\"},\n-            {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n-                \"Every scan object is either a string descriptor or an object:\",\n-            {\n-                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n-                {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n-                {\n-                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                    {\"range\", RPCArg::Type::RANGE, RPCArg::Default{1000}, \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n-                }},\n-            },\n-                        \"[scanobjects,...]\"},\n+            scan_action_arg_desc,\n+            scan_objects_arg_desc,\n         },\n         {\n-            RPCResult{\"When action=='abort'\", RPCResult::Type::BOOL, \"\", \"\"},\n-            RPCResult{\"When action=='status' and no scan is in progress\", RPCResult::Type::NONE, \"\", \"\"},\n-            RPCResult{\"When action=='status' and scan is in progress\", RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::NUM, \"progress\", \"The scan progress\"},\n-            }},\n+            scan_result_abort,\n+            scan_result_status_none,\n+            scan_result_status_some,\n             RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n                 {RPCResult::Type::BOOL, \"success\", \"Whether the scan was completed\"},\n                 {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs scanned\"},"
      }
    ]
  },
  {
    "sha": "d836ce3f2f9b6d22ae9cf20611ad46177045f838",
    "node_id": "C_kwDOABII59oAKGQ4MzZjZTNmMmY5YjZkMjJhZTljZjIwNjExYWQ0NjE3NzA0NWY4Mzg",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-01-08T10:40:49Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-18T21:14:16Z"
      },
      "message": "rpc: add scanblocks - scan for relevant blocks with descriptors\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>",
      "tree": {
        "sha": "98168b5c66ce1267e9af60b933480cc734b919b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98168b5c66ce1267e9af60b933480cc734b919b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d836ce3f2f9b6d22ae9cf20611ad46177045f838",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGWwioACgkQepNdrbLE\nTwWwMw/+OmiXOK5h9ss8jvSWYScIbvOxmlqxY7efeV1nKHsclAngfVlewIVLHFZO\n4yL+RDx4Hg28T5ULKchqpoI66dW08X8CFDsDzaGZNkvsK2zvGtJTQQa8dn2INPoN\npYYetD6lg/oNueezIS99KcozDf0WLCXXubEzJleTqAiqiNSXsGvT+wLhtyJvrVcb\ne7dugLQB3jdrN2bkukS7UqcbZgVag+dWQ4v6RN9/smch1sqtoAxNe3cpN2mnQrE/\nQLkIHq6otiO2VNDzV+GyitJClTEq5Iv2dal9TOapvHzY0FazxGSl+TjbjDdvrgzd\nhLw3CwPN1luTz5kO79wMCDaksCbxvH/WVRND0ZixvlcN0CUhuXcWusqH2G+TYsU2\nIkV6iNwkzlymr2vMp9APNRqS18MQTssM71eNuYnzMptrPH3XNfF3vtnVzyG6RfBK\nat8Ac9ppUq+i4GVxZMYJFRfMfZdfMbXV6TU2zKovDCZ0zYVNz1OhEdkZwzRmUm/m\njVIhH5M7qNud2v2te7ZMdNhYqO1p0uKfPwLzLMzH/A8Q9J1Q1uYwV0d8bXZ2qfT+\n1pVuF9v7KxnlbBrtrzGH5oV2IyggTcE0mtZg1iSVvnw79K2r5D/5Z+1egum1zJX3\nC9r1/duJEbS7MfWey36qii6CAVs1N897efWkkomXsj+XyeDnz0c=\n=7Lz8\n-----END PGP SIGNATURE-----",
        "payload": "tree 98168b5c66ce1267e9af60b933480cc734b919b7\nparent 608d8b4a62b877085e3ef5de3d00c37e1360a1bf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1610102449 +0100\ncommitter James O'Beirne <james.obeirne@pm.me> 1637270056 -0500\n\nrpc: add scanblocks - scan for relevant blocks with descriptors\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d836ce3f2f9b6d22ae9cf20611ad46177045f838",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d836ce3f2f9b6d22ae9cf20611ad46177045f838",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d836ce3f2f9b6d22ae9cf20611ad46177045f838/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608d8b4a62b877085e3ef5de3d00c37e1360a1bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/608d8b4a62b877085e3ef5de3d00c37e1360a1bf"
      }
    ],
    "stats": {
      "total": 193,
      "additions": 193,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c37caaaf93666cc984c007afea28c853f2b1e5f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 190,
        "deletions": 0,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d836ce3f2f9b6d22ae9cf20611ad46177045f838/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d836ce3f2f9b6d22ae9cf20611ad46177045f838/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d836ce3f2f9b6d22ae9cf20611ad46177045f838",
        "patch": "@@ -2466,6 +2466,195 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+        \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+        \"This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            scan_action_arg_desc,\n+            scan_objects_arg_desc,\n+            RPCArg{\"start_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"0\"}, \"Height to start to scan from\"},\n+            RPCArg{\"stop_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"chain tip\"}, \"Height to stop to scan\"},\n+            RPCArg{\"filtertype\", RPCArg::Type::STR, RPCArg::DefaultHint{\"basic\"}, \"The type name of the filter\"}\n+        },\n+        {\n+            scan_result_abort,\n+            scan_result_status_none,\n+            scan_result_status_some,\n+            RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::NUM, \"from_height\", \"The height we started the scan from\"},\n+                {RPCResult::Type::NUM, \"to_height\", \"The height we ended the scan at\"},\n+                {RPCResult::Type::ARR, \"relevant_blocks\", \"\", {{RPCResult::Type::STR_HEX, \"blockhash\", \"A relevant blockhash\"},}},\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+            HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n+        ChainstateManager& chainman = EnsureChainman(node);\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            CChain& active_chain = chainman.ActiveChain();\n+            block = active_chain.Genesis();\n+            stop_block = active_chain.Tip();\n+            if (!request.params[2].isNull()) {\n+                block = active_chain[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = active_chain[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                LogPrintf(\"scanblocks RPC aborted at height %d.\\n\", block->nHeight);\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                CChain& active_chain = chainman.ActiveChain();\n+                next = active_chain.Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", g_scanfilter_progress_height);\n+        ret.pushKV(\"relevant_blocks\", blocks);\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n+    }\n+    return ret;\n+},\n+    };\n+}\n+\n static RPCHelpMan getblockfilter()\n {\n     return RPCHelpMan{\"getblockfilter\",\n@@ -2690,6 +2879,7 @@ static const CRPCCommand commands[] =\n \n     { \"blockchain\",         &preciousblock,                      },\n     { \"blockchain\",         &scantxoutset,                       },\n+    { \"blockchain\",         &scanblocks,                         },\n     { \"blockchain\",         &getblockfilter,                     },\n \n     /* Not shown in help */"
      },
      {
        "sha": "7713a053fdb5ab05803efb297fc3ce893f135796",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d836ce3f2f9b6d22ae9cf20611ad46177045f838/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d836ce3f2f9b6d22ae9cf20611ad46177045f838/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d836ce3f2f9b6d22ae9cf20611ad46177045f838",
        "patch": "@@ -77,6 +77,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 8, \"fee_rate\"},\n     { \"sendmany\", 9, \"verbose\" },\n     { \"deriveaddresses\", 1, \"range\" },\n+    { \"scanblocks\", 1, \"scanobjects\" },\n+    { \"scanblocks\", 2, \"start_height\" },\n+    { \"scanblocks\", 3, \"stop_height\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      }
    ]
  },
  {
    "sha": "a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
    "node_id": "C_kwDOABII59oAKGE0ZGE2ZWU2YTEyNTlmYzIxOGZmMmZlZTAwYTc0NzdlNTVhZDZmMDc",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-04T09:53:24Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-18T21:14:22Z"
      },
      "message": "Unify \"invalid action argument\" error (fix scantxoutset)",
      "tree": {
        "sha": "3ae99d8530be0bd52fa11e319395322fc6d081b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ae99d8530be0bd52fa11e319395322fc6d081b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGWwi4ACgkQepNdrbLE\nTwU15hAAjQrk1GpesoeioNsRg0rk9S68fk9XWCvvSRmwYsVM6f5DyiqHbmxCD0cW\n7WrtPMI3kGcdCFRmhx2xdPhSu5e5rcRlxwiK7VaktUX4gj/YMSrsLF8U9ZIoXpL0\nLe6zopuroUYaAFhDysWwSf7zqUMRUpGiSPVm8AQfDQi06QvIkXa/e6g40wuiZivR\nEafTK+bqdEXqiUnkZptvJgWLOQDY2Yj05TDE2FaAFgrUsH5RXXXFjHJfYLw0Ptpd\n8YKm517OAOjfg+XRfPM4W+anSw0/CZErZcRmY//oZUCuL7WP9WriBk77DqGHHiDo\ncl+NjBOPsx/CKGySh1r/GIlh/lEMqO0ZC4BaJwJDoHz+3JnFNyYxq9+RtebDjvGy\n9WjWNVrRGAibvV5jSeKmpiURZLBs6ofqbWhps8YfGs3duDMwNRGO5SJ7MB4sHZC4\nTFs9WfLX5A1VeC40SMc6xcIs2HvQnN+qpvhm+nMDTdnFfVMIEc3MZXiMRLE9+usj\nCxJmiErVANPU4AaEJeTgHIG7SnNzIzpaRb5Tp4IxdWlJdWLEmpI6dOgEuo40d0Bc\npKQkZVY0uH8r+JEPuFD2jGfQNXcxIvJEl7zwPrZXhrtZ2mnJsLkCz1cBXWyHguKb\nVoZy2bZlsFBX2dNWV47bWZ9NdICRrfnbFBWoAst4xe5owLVgQH8=\n=qeeX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ae99d8530be0bd52fa11e319395322fc6d081b4\nparent d836ce3f2f9b6d22ae9cf20611ad46177045f838\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1614851604 +0100\ncommitter James O'Beirne <james.obeirne@pm.me> 1637270062 -0500\n\nUnify \"invalid action argument\" error (fix scantxoutset)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d836ce3f2f9b6d22ae9cf20611ad46177045f838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d836ce3f2f9b6d22ae9cf20611ad46177045f838",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d836ce3f2f9b6d22ae9cf20611ad46177045f838"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1f1c4d9d6c3a35c9329dedc4d46e864760671a7c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
        "patch": "@@ -2459,7 +2459,7 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },"
      }
    ]
  },
  {
    "sha": "1e5ec5f9157bcbb99745f798db6a7416d11497e9",
    "node_id": "C_kwDOABII59oAKDFlNWVjNWY5MTU3YmNiYjk5NzQ1Zjc5OGRiNmE3NDE2ZDExNDk3ZTk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-01-08T10:41:25Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-18T22:01:08Z"
      },
      "message": "test: rpc: add scanblocks functional test\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>",
      "tree": {
        "sha": "d9e8e1a2d7006f761ffe9f62b00cd4d0dd68bb16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9e8e1a2d7006f761ffe9f62b00cd4d0dd68bb16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e5ec5f9157bcbb99745f798db6a7416d11497e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGWzSYACgkQepNdrbLE\nTwVa0Q//cZB654Q9UhAhgWTJYcX9YKwtZ4xmgU1Nl2OIu/RHwJn603ll/nF2B69+\ncJSQw3sNfSF52nYXkwSHB6Ugm9dZRdksMm8jJ8VvYeEuYGYuwvK6pG4MxNAJOIF8\nqHtmhSxuEnl51dxtRiv/iaTpQLCmyZsS60SPex/g7illHv1PAZCU+8hJRQ78uAEU\nlJqhpzk2T2wHHS4VSuv5PRKB5AaSJ8E4b2fRU+I4OcGkdROJBfVp2vIVFPX3+CpM\noJdL9XGZKGJLeCR2pBC6r3n+0qnzYi5H9nCqKkh75RCGf5DOUj0NlhDM4g5bs0+Y\nP/kocL8j3YlMfn/TAtqDJZuX55oCEsZRq4vFLRTCrgu5HdnK4OGEQvMRAVluofLy\nbgETwcQ81+CPmyWD6/y/+N1aNCKMk4yHPCMAhtfXKivUJxVJuj+xqyJYvT750anz\nerBZEkKDJyB+BIjlaoFHO+3xCIdsseoMrvS+Sg6xquFiBjv8lvIMkyO3dLJbq6zI\nLV72hucvZ1YSzCifN2XuAbtySRA887tq+IHz3O9NVI59JPfLPHmjDerDFPtKqsJt\n2Gvcv8lt7Ns4tgLjQzmbDnQSnwj7MM46Nkokik9jC77GdAYrzVEjHUL3fyIolMM6\n/1ldG5s6SQVZnrh/T+ZGS+noaghDzbIAgZvdtFvfDoNkQHV3ZuI=\n=TtYk\n-----END PGP SIGNATURE-----",
        "payload": "tree d9e8e1a2d7006f761ffe9f62b00cd4d0dd68bb16\nparent a4da6ee6a1259fc218ff2fee00a7477e55ad6f07\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1610102485 +0100\ncommitter James O'Beirne <james.obeirne@pm.me> 1637272868 -0500\n\ntest: rpc: add scanblocks functional test\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5ec5f9157bcbb99745f798db6a7416d11497e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5ec5f9157bcbb99745f798db6a7416d11497e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5ec5f9157bcbb99745f798db6a7416d11497e9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4da6ee6a1259fc218ff2fee00a7477e55ad6f07"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 94,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c097c982f9c04b27a7f0f4333cf404b01e21131c",
        "filename": "test/functional/rpc_scanblocks.py",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5ec5f9157bcbb99745f798db6a7416d11497e9/test/functional/rpc_scanblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5ec5f9157bcbb99745f798db6a7416d11497e9/test/functional/rpc_scanblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scanblocks.py?ref=1e5ec5f9157bcbb99745f798db6a7416d11497e9",
        "patch": "@@ -0,0 +1,93 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks RPC call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+\n+class ScanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"], []]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        # send 1.0, mempool only\n+        addr_1 = node.getnewaddress()\n+        node.sendtoaddress(addr_1, 1.0)\n+\n+        parent_key = \"tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\"\n+        # send 1.0, mempool only\n+        # childkey 5 of `parent_key`\n+        node.sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0)\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.generate(node, 1)[0]\n+        height = node.getblockheader(blockhash)['height']\n+        self.wait_until(lambda: all(i[\"synced\"] for i in node.getindexinfo().values()))\n+\n+        out = node.scanblocks(\"start\", [f\"addr({addr_1})\"])\n+        assert(blockhash in out['relevant_blocks'])\n+        assert_equal(node.getblockheader(blockhash)['height'], out['to_height'])\n+        assert_equal(0, out['from_height'])\n+\n+        # mine another block\n+        blockhash_new = self.generate(node, 1)[0]\n+        height_new = node.getblockheader(blockhash_new)['height']\n+\n+        # make sure the blockhash is not in the filter result if we set the start_height\n+        # to the just mined block (unlikely to hit a false positive)\n+        assert(blockhash not in node.scanblocks(\n+            \"start\", [f\"addr({addr_1})\"], height_new)['relevant_blocks'])\n+\n+        # make sure the blockhash is present when using the first mined block as start_height\n+        assert(blockhash in node.scanblocks(\n+            \"start\", [f\"addr({addr_1})\"], height)['relevant_blocks'])\n+\n+        # also test the stop height\n+        assert(blockhash in node.scanblocks(\n+            \"start\", [f\"addr({addr_1})\"], height, height)['relevant_blocks'])\n+\n+        # use the stop_height to exclude the relevant block\n+        assert(blockhash not in node.scanblocks(\n+            \"start\", [f\"addr({addr_1})\"], 0, height - 1)['relevant_blocks'])\n+\n+        # make sure the blockhash is present when using the first mined block as start_height\n+        assert(blockhash in node.scanblocks(\n+            \"start\", [{\"desc\": f\"pkh({parent_key}/*)\", \"range\": [0, 100]}], height)['relevant_blocks'])\n+\n+        # test node with disabled blockfilterindex\n+        assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\",\n+                                self.nodes[1].scanblocks, \"start\", [f\"addr({addr_1})\"])\n+\n+        # test unknown filtertype\n+        assert_raises_rpc_error(-5, \"Unknown filtertype\",\n+                                node.scanblocks, \"start\", [f\"addr({addr_1})\"], 0, 10, \"extended\")\n+\n+        # test invalid start_height\n+        assert_raises_rpc_error(-1, \"Invalid start_height\",\n+                                node.scanblocks, \"start\", [f\"addr({addr_1})\"], 100000000)\n+\n+        # test invalid stop_height\n+        assert_raises_rpc_error(-1, \"Invalid stop_height\",\n+                                node.scanblocks, \"start\", [f\"addr({addr_1})\"], 10, 0)\n+        assert_raises_rpc_error(-1, \"Invalid stop_height\",\n+                                node.scanblocks, \"start\", [f\"addr({addr_1})\"], 10, 100000000)\n+\n+        # test accessing the status (must be empty)\n+        assert_equal(node.scanblocks(\"status\"), None)\n+\n+        # test aborting the current scan (there is no, must return false)\n+        assert_equal(node.scanblocks(\"abort\"), False)\n+\n+        # test invalid command\n+        assert_raises_rpc_error(-8, \"Invalid action argument\", node.scanblocks, \"foobar\")\n+\n+\n+if __name__ == '__main__':\n+    ScanblocksTest().main()"
      },
      {
        "sha": "59e6d64ce56255a906d57aacbbedd17dfd3ff24c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5ec5f9157bcbb99745f798db6a7416d11497e9/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5ec5f9157bcbb99745f798db6a7416d11497e9/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1e5ec5f9157bcbb99745f798db6a7416d11497e9",
        "patch": "@@ -295,6 +295,7 @@\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'p2p_ping.py',\n+    'rpc_scanblocks.py',\n     'rpc_scantxoutset.py',\n     'feature_txindex_compatibility.py',\n     'feature_logging.py',"
      }
    ]
  },
  {
    "sha": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "node_id": "C_kwDOABII59oAKGMxZTcxZmJjMzljOWZlMDgxNjhlOGIwNDBiYjE0Y2EyOWEyZWJiZGU",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-19T18:22:29Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-19T18:22:29Z"
      },
      "message": "fuzz: add scanblocks as safe for fuzzing",
      "tree": {
        "sha": "b6d598c606281050d82b1ed0e65db092ded366ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6d598c606281050d82b1ed0e65db092ded366ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGX624ACgkQepNdrbLE\nTwXGYA/9GImmKxG9v2Ca1yCtvYoxmlQpUzdpTnP4WGaVX7Qt4+6fgy2UPmasJuBS\nuCM5KvaOU+QX0n3GaumcgZHiXpz+CkQVxmHnHoIpbMJCAxsOjbE526B7leH/r/fT\n6gqzo1sYvEyc/tYFJB3H/mR32kVd//8iTJGFJ3Jr///OImdGR+CkkjET9r8b1fHi\nJW2e8WUbcHQ1HH17IgH91f6VL0XD987fZuTt2RA5APX0hvz/Je10xBfIclMjdR2S\nO1FVVfz72nHQNrKOqrlUYkDBy2VdydcW2vBkc6LuHLXcfXMW+02A+w6/v40hEcdX\nSdPvUiSr/OqvkyDHoAmWsUC8mdmMEwOq5dLt5nyYgCFe1mlf3SsTQiBZjbcGUhjT\nypSZ21feLgbVm6Ls0v+/rc4xvBdY4bUSiLt9Xz+L4Gm/bN1Vp/j1+6ixkPZeJeoW\nei/6TfyAXgtKWVPv3DI+A7+t/+FJF1bEIU4y2dcWBiHj7Cj01bwq86lrBJTybJDn\nFw9WVm2kB8gEAKP5xfYqMmRN5kdLmmrl0iSaNcRGWXmV49G4rOrsJrM678EO/4Fr\nTjz1VOtWX74KRW9D+9DVlfFvSHYAItOugWQUrH+UX7krmtLhhld3bFzA3AV4BBYM\n+ytrqqaw8M2zFdXxkTfoUXqAwC0fAz3APdnMziDc5rLKh0zNhXg=\n=BMEO\n-----END PGP SIGNATURE-----",
        "payload": "tree b6d598c606281050d82b1ed0e65db092ded366ec\nparent 1e5ec5f9157bcbb99745f798db6a7416d11497e9\nauthor James O'Beirne <james.obeirne@pm.me> 1637346149 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1637346149 -0500\n\nfuzz: add scanblocks as safe for fuzzing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e5ec5f9157bcbb99745f798db6a7416d11497e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5ec5f9157bcbb99745f798db6a7416d11497e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5ec5f9157bcbb99745f798db6a7416d11497e9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9760af0ddfee203e057e37bbecf5c122aa6cc873",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
        "patch": "@@ -144,6 +144,7 @@ const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n     \"preciousblock\",\n     \"pruneblockchain\",\n     \"reconsiderblock\",\n+    \"scanblocks\",\n     \"scantxoutset\",\n     \"sendrawtransaction\",\n     \"setmocktime\","
      }
    ]
  }
]