[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973316074",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-973316074",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 973316074,
    "node_id": "IC_kwDOABII5846A5_q",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T22:14:31Z",
    "updated_at": "2021-11-18T22:14:31Z",
    "author_association": "MEMBER",
    "body": "Previously involved:\r\n- @Sjors: Concept ACK, tested\r\n- @jonatack: Concept ACK, tested\r\n- @luke-jr: Rebased, tested\r\n- @fjahr: Concept ACK\r\n- @felipsoarez: Concept ACK\r\n- @chrisguida: Tested ACK\r\n- @prayank23: Concept ACK, tested\r\n- @kiminuo: Reviewed\r\n- @achow101: Reviewed\r\n- @theStack: Concept ACK\r\n- @darosior: Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973316074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973318872",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-973318872",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 973318872,
    "node_id": "IC_kwDOABII5846A6rY",
    "user": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?u=03240c7cca7b55e5b9239eeab7a5914663a42b91&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T22:18:47Z",
    "updated_at": "2021-11-18T22:18:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for reviving 20664. There are many interesting PRs by _jonasschnelli_ which never got merged for different reasons.\r\n\r\nWill test it this weekend.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973318872/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973377879",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-973377879",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 973377879,
    "node_id": "IC_kwDOABII5846BJFX",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T23:02:34Z",
    "updated_at": "2021-11-18T23:02:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20664](https://github.com/bitcoin/bitcoin/pull/20664) (Add scanblocks RPC call by jonasschnelli)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973377879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974901017",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-974901017",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 974901017,
    "node_id": "IC_kwDOABII5846G88Z",
    "user": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?u=03240c7cca7b55e5b9239eeab7a5914663a42b91&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-21T21:43:29Z",
    "updated_at": "2021-11-21T21:44:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tried the syntax based on example mentioned in PR description and it gives me an error:\r\n\r\n```\r\n$ bitcoin-cli scanblocks start '[\"addr(mzrj4QmPhk98vc2yQw42uCsgwfBjVzPPLM)\"]' 1000000\r\nerror code: -1\r\nerror message:\r\nIndex is not enabled for filtertype basic\r\n```\r\n\r\nI checked the code for RPC help but don't understand what exactly should be enabled and how are filters used in this RPC",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974901017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974918039",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-974918039",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 974918039,
    "node_id": "IC_kwDOABII5846HBGX",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-21T23:21:14Z",
    "updated_at": "2021-11-21T23:21:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I tried the syntax based on example mentioned in PR description and it gives me an error:\r\n> \r\n> ```\r\n> $ bitcoin-cli scanblocks start '[\"addr(mzrj4QmPhk98vc2yQw42uCsgwfBjVzPPLM)\"]' 1000000\r\n> error code: -1\r\n> error message:\r\n> Index is not enabled for filtertype basic\r\n> ```\r\n> \r\n> I checked the code for RPC help but don't understand what exactly should be enabled and how are filters used in this RPC\r\n\r\nYou probably did not run `bitcoind` with `-blockfilterindex=1`?\r\n\r\nI guess that issue could be caught earlier and use a better error message :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974918039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975009211",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-975009211",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 975009211,
    "node_id": "IC_kwDOABII5846HXW7",
    "user": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?u=03240c7cca7b55e5b9239eeab7a5914663a42b91&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T02:14:59Z",
    "updated_at": "2021-11-22T02:14:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You probably did not run bitcoind with -blockfilterindex=1?\r\n\r\nThanks for the help @fjahr. Tried running `bitcoind` with `-blockfilterindex=1`:\r\n\r\n```\r\n2021-11-22T01:44:23Z basic block filter index is enabled at height 2104934\r\n2021-11-22T01:44:23Z basic block filter index thread exit\r\n```\r\n\r\n```\r\n$ bitcoin-cli scanblocks start '[\"addr(mzrj4QmPhk98vc2yQw42uCsgwfBjVzPPLM)\"]' 1000000\r\n```\r\n\r\n\r\nGot response after few minutes with lot of block hashes. I was expecting a quick response based on concept of this PR and time it took for `-blockfilterindex=1` so not sure what exactly did we achieve but will check others things later. Will sleep now as its morning here already.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975009211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978145226",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#issuecomment-978145226",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23549",
    "id": 978145226,
    "node_id": "IC_kwDOABII5846TU_K",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?u=eab48576b7831944b8ce7f04fcdff4154a853d50&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T19:00:44Z",
    "updated_at": "2021-11-24T19:00:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nIs there plans to add functionality similiar to `rescanblockchain` so it does it for your wallets, without having to enter in the descriptors manually?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978145226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753534449",
    "pull_request_review_id": 811679526,
    "id": 753534449,
    "node_id": "PRRC_kwDOABII584s6gXx",
    "diff_hunk": "@@ -2446,13 +2459,202 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+        \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+        \"This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            scan_action_arg_desc,\n+            scan_objects_arg_desc,\n+            RPCArg{\"start_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"0\"}, \"Height to start to scan from\"},\n+            RPCArg{\"stop_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"chain tip\"}, \"Height to stop to scan\"},\n+            RPCArg{\"filtertype\", RPCArg::Type::STR, RPCArg::DefaultHint{\"basic\"}, \"The type name of the filter\"}\n+        },\n+        {\n+            scan_result_abort,\n+            scan_result_status_none,\n+            scan_result_status_some,\n+            RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::NUM, \"from_height\", \"The height we started the scan from\"},\n+                {RPCResult::Type::NUM, \"to_height\", \"The height we ended the scan at\"},\n+                {RPCResult::Type::ARR, \"relevant_blocks\", \"\", {{RPCResult::Type::STR_HEX, \"blockhash\", \"A relevant blockhash\"},}},\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+            HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n+        ChainstateManager& chainman = EnsureChainman(node);\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            CChain& active_chain = chainman.ActiveChain();\n+            block = active_chain.Genesis();\n+            stop_block = active_chain.Tip();\n+            if (!request.params[2].isNull()) {\n+                block = active_chain[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = active_chain[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                LogPrintf(\"scanblocks RPC aborted at height %d.\\n\", block->nHeight);\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                CChain& active_chain = chainman.ActiveChain();\n+                next = active_chain.Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());",
    "path": "src/rpc/blockchain.cpp",
    "position": 242,
    "original_position": 242,
    "commit_id": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "original_commit_id": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think all the scanning functionality makes more sense somewhere, not in the rpc folder",
    "created_at": "2021-11-19T21:11:12Z",
    "updated_at": "2021-11-19T21:11:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r753534449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753534449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r753534449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753534449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2628,
    "original_line": 2628,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753561619",
    "pull_request_review_id": 811715899,
    "id": 753561619,
    "node_id": "PRRC_kwDOABII584s6nAT",
    "diff_hunk": "@@ -2446,13 +2459,202 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+        \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+        \"This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            scan_action_arg_desc,\n+            scan_objects_arg_desc,\n+            RPCArg{\"start_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"0\"}, \"Height to start to scan from\"},\n+            RPCArg{\"stop_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"chain tip\"}, \"Height to stop to scan\"},\n+            RPCArg{\"filtertype\", RPCArg::Type::STR, RPCArg::DefaultHint{\"basic\"}, \"The type name of the filter\"}\n+        },\n+        {\n+            scan_result_abort,\n+            scan_result_status_none,\n+            scan_result_status_some,\n+            RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::NUM, \"from_height\", \"The height we started the scan from\"},\n+                {RPCResult::Type::NUM, \"to_height\", \"The height we ended the scan at\"},\n+                {RPCResult::Type::ARR, \"relevant_blocks\", \"\", {{RPCResult::Type::STR_HEX, \"blockhash\", \"A relevant blockhash\"},}},\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+            HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n+        ChainstateManager& chainman = EnsureChainman(node);\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            CChain& active_chain = chainman.ActiveChain();\n+            block = active_chain.Genesis();\n+            stop_block = active_chain.Tip();\n+            if (!request.params[2].isNull()) {\n+                block = active_chain[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = active_chain[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                LogPrintf(\"scanblocks RPC aborted at height %d.\\n\", block->nHeight);\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                CChain& active_chain = chainman.ActiveChain();\n+                next = active_chain.Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());",
    "path": "src/rpc/blockchain.cpp",
    "position": 242,
    "original_position": 242,
    "commit_id": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "original_commit_id": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623127",
    "created_at": "2021-11-19T22:08:41Z",
    "updated_at": "2021-11-19T22:08:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r753561619",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753561619"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r753561619"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/753561619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2628,
    "original_line": 2628,
    "side": "RIGHT",
    "in_reply_to_id": 753534449
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758487290",
    "pull_request_review_id": 817972541,
    "id": 758487290,
    "node_id": "PRRC_kwDOABII584tNZj6",
    "diff_hunk": "@@ -2466,6 +2466,195 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+        \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+        \"This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            scan_action_arg_desc,\n+            scan_objects_arg_desc,\n+            RPCArg{\"start_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"0\"}, \"Height to start to scan from\"},\n+            RPCArg{\"stop_height\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"chain tip\"}, \"Height to stop to scan\"},\n+            RPCArg{\"filtertype\", RPCArg::Type::STR, RPCArg::DefaultHint{\"basic\"}, \"The type name of the filter\"}\n+        },\n+        {\n+            scan_result_abort,\n+            scan_result_status_none,\n+            scan_result_status_some,\n+            RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::NUM, \"from_height\", \"The height we started the scan from\"},\n+                {RPCResult::Type::NUM, \"to_height\", \"The height we ended the scan at\"},\n+                {RPCResult::Type::ARR, \"relevant_blocks\", \"\", {{RPCResult::Type::STR_HEX, \"blockhash\", \"A relevant blockhash\"},}},\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +",
    "path": "src/rpc/blockchain.cpp",
    "position": 135,
    "original_position": 56,
    "commit_id": "c1e71fbc39c9fe08168e8b040bb14ca29a2ebbde",
    "original_commit_id": "d836ce3f2f9b6d22ae9cf20611ad46177045f838",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The examples are missing the action argument, and the descriptors list should be surrounded by single quotes to work on the CLI (didn't check what changes are needed for the RPC example below): \r\n```suggestion\r\n            HelpExampleCli(\"scanblocks\", \"start \\'[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\' 300000\") +\r\n```-",
    "created_at": "2021-11-29T15:43:25Z",
    "updated_at": "2021-11-29T16:01:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r758487290",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758487290"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23549#discussion_r758487290"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23549"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758487290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2521,
    "original_line": 2521,
    "side": "RIGHT"
  }
]