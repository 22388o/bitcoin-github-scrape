[
  {
    "sha": "2b175d4b018be432e333bf8a343b85c5f284264f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjE3NWQ0YjAxOGJlNDMyZTMzM2JmOGEzNDNiODVjNWYyODQyNjRm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-02T22:56:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-03T14:50:20Z"
      },
      "message": "Clean up bctest.py and bitcoin-util-test.py\n\n- remove newlines\n- change tabs for spaces, to align with convention in other py files\n- add comments\n- add 'Bitcoin Core Developers' copyright notice",
      "tree": {
        "sha": "a1a021d94cb8efebc6b6d4435467f8d6656d0ee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1a021d94cb8efebc6b6d4435467f8d6656d0ee1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b175d4b018be432e333bf8a343b85c5f284264f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b175d4b018be432e333bf8a343b85c5f284264f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b175d4b018be432e333bf8a343b85c5f284264f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b175d4b018be432e333bf8a343b85c5f284264f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "47cff98bca2edc15667e2a7ff97dae967af412d1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 96,
        "deletions": 79,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=2b175d4b018be432e333bf8a343b85c5f284264f",
        "patch": "@@ -1,4 +1,5 @@\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -11,94 +12,110 @@\n import logging\n \n def parse_output(a, fmt):\n-\tif fmt == 'json': # json: compare parsed data\n-\t\treturn json.loads(a)\n-\telif fmt == 'hex': # hex: parse and compare binary data\n-\t\treturn binascii.a2b_hex(a.strip())\n-\telse:\n-\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n+    \"\"\"Parse the output according to specified format.\n+\n+    Raise an error if the output can't be parsed.\"\"\"\n+    if fmt == 'json': # json: compare parsed data\n+        return json.loads(a)\n+    elif fmt == 'hex': # hex: parse and compare binary data\n+        return binascii.a2b_hex(a.strip())\n+    else:\n+        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n+    \"\"\"Runs a single test, comparing output and RC to expected output and RC.\n \n-\texecprog = testObj['exec'] + exeext\n-\texecargs = testObj['args']\n-\texecrun = [execprog] + execargs\n-\tstdinCfg = None\n-\tinputData = None\n-\tif \"input\" in testObj:\n-\t\tfilename = testDir + \"/\" + testObj['input']\n-\t\tinputData = open(filename).read()\n-\t\tstdinCfg = subprocess.PIPE\n+    Raises an error if input can't be read, executable fails, or output/RC\n+    are not as expected. Error is caught by bctester() and reported.\n+    \"\"\"\n+    # Get the exec names and arguments\n+    execprog = testObj['exec'] + exeext\n+    execargs = testObj['args']\n+    execrun = [execprog] + execargs\n \n-\toutputFn = None\n-\toutputData = None\n-\tif \"output_cmp\" in testObj:\n-\t\toutputFn = testObj['output_cmp']\n-\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\ttry:\n-\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n-\t\texcept:\n-\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n-\t\t\traise\n-\t\tif not outputData:\n-\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n-\t\t\traise Exception\n+    # Read the input data (if there is any)\n+    stdinCfg = None\n+    inputData = None\n+    if \"input\" in testObj:\n+        filename = testDir + \"/\" + testObj['input']\n+        inputData = open(filename).read()\n+        stdinCfg = subprocess.PIPE\n \n-\tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n-\ttry:\n-\t\touts = proc.communicate(input=inputData)\n-\texcept OSError:\n-\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n-\t\traise\n+    # Read the expected output data (if there is any)\n+    outputFn = None\n+    outputData = None\n+    if \"output_cmp\" in testObj:\n+        outputFn = testObj['output_cmp']\n+        outputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n+        try:\n+            outputData = open(testDir + \"/\" + outputFn).read()\n+        except:\n+            logging.error(\"Output file \" + outputFn + \" can not be opened\")\n+            raise\n+        if not outputData:\n+            logging.error(\"Output data missing for \" + outputFn)\n+            raise Exception\n \n-\tif outputData:\n-\t\ttry:\n-\t\t\ta_parsed = parse_output(outs[0], outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\traise\n-\t\ttry:\n-\t\t\tb_parsed = parse_output(outputData, outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\traise\n-\t\tif a_parsed != b_parsed:\n-\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\traise Exception\n-\t\tif outs[0] != outputData:\n-\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n-\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n-\t\t\t\t                                          outs[0].splitlines(True),\n-\t\t\t\t                                          fromfile=outputFn,\n-\t\t\t\t                                          tofile=\"returned\"))\n-\t\t\tlogging.error(error_message)\n-\t\t\traise Exception\n+    # Run the test\n+    proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n+    try:\n+        outs = proc.communicate(input=inputData)\n+    except OSError:\n+        logging.error(\"OSError, Failed to execute \" + execprog)\n+        raise\n \n-\twantRC = 0\n-\tif \"return_code\" in testObj:\n-\t\twantRC = testObj['return_code']\n-\tif proc.returncode != wantRC:\n-\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n-\t\traise Exception\n+    if outputData:\n+        # Parse command output and expected output\n+        try:\n+            a_parsed = parse_output(outs[0], outputType)\n+        except Exception as e:\n+            logging.error('Error parsing command output as %s: %s' % (outputType,e))\n+            raise\n+        try:\n+            b_parsed = parse_output(outputData, outputType)\n+        except Exception as e:\n+            logging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+            raise\n+        # Compare data\n+        if a_parsed != b_parsed:\n+            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+            raise Exception\n+        # Compare formatting\n+        if outs[0] != outputData:\n+            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+            error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+                                                          outs[0].splitlines(True),\n+                                                          fromfile=outputFn,\n+                                                          tofile=\"returned\"))\n+            logging.error(error_message)\n+            raise Exception\n \n-def bctester(testDir, input_basename, buildenv):\n-\tinput_filename = testDir + \"/\" + input_basename\n-\traw_data = open(input_filename).read()\n-\tinput_data = json.loads(raw_data)\n+    # Compare the return code to the expected return code\n+    wantRC = 0\n+    if \"return_code\" in testObj:\n+        wantRC = testObj['return_code']\n+    if proc.returncode != wantRC:\n+        logging.error(\"Return code mismatch for \" + outputFn)\n+        raise Exception\n \n-\tfailed_testcases = []\n+def bctester(testDir, input_basename, buildenv):\n+    \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n+    input_filename = testDir + \"/\" + input_basename\n+    raw_data = open(input_filename).read()\n+    input_data = json.loads(raw_data)\n \n-\tfor testObj in input_data:\n-\t\ttry:\n-\t\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n-\t\texcept:\n-\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n-\t\t\tfailed_testcases.append(testObj[\"description\"])\n+    failed_testcases = []\n \n-\tif failed_testcases:\n-\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n-\t\tsys.exit(1)\n-\telse:\n-\t\tsys.exit(0)\n+    for testObj in input_data:\n+        try:\n+            bctest(testDir, testObj, buildenv.exeext)\n+            logging.info(\"PASSED: \" + testObj[\"description\"])\n+        except:\n+            logging.info(\"FAILED: \" + testObj[\"description\"])\n+            failed_testcases.append(testObj[\"description\"])\n \n+    if failed_testcases:\n+        logging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+        sys.exit(1)\n+    else:\n+        sys.exit(0)"
      },
      {
        "sha": "eeb05c0b889a3d49ad6a7ffe8d3155981b933d0f",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=2b175d4b018be432e333bf8a343b85c5f284264f",
        "patch": "@@ -1,5 +1,6 @@\n #!/usr/bin/env python\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -16,11 +17,13 @@\n \n Can also be run manually from the src directory by specifiying the source directory:\n \n-test/bitcoin-util-test.py --src=[srcdir]\n+test/bitcoin-util-test.py --srcdir='srcdir' [--verbose]\n \"\"\"\n \n-\n if __name__ == '__main__':\n+    # Try to get the source directory from the environment variables. This will\n+    # be set for `make check` automated runs. If environment variable is not set,\n+    # then get the source directory from command line args.\n     try:\n         srcdir = os.environ[\"srcdir\"]\n         verbose = False"
      }
    ]
  }
]