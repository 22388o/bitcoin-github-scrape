[
  {
    "sha": "42c6d6c8f40d772452ad6afa6c949cecceb240b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmM2ZDZjOGY0MGQ3NzI0NTJhZDZhZmE2Yzk0OWNlY2NlYjI0MGIz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-02-11T12:01:33Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-02-13T08:29:05Z"
      },
      "message": "Optionally return HTTP_OK for RPC errors\n\nThis adds a new boolean option -rpcerrorhttpok (off by default).  If it is\nturned on, then the HTTP server returns HTTP_OK (code 200) also for errors\nwith JSON-RPC calls.\n\nThe rationale is this:  Some JSON-RPC libraries (e.g. Python jsonrpclib)\ndo not expose the response body at all if HTTP already sets an error code.\nIn that situation, it is hard to properly handle or debug the actual\nunderlying error.  In such a situation, the new option can be used to\nbypass this problem.",
      "tree": {
        "sha": "5826cb5dfecb52b431f3ef28123d0ebcc7ab6275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5826cb5dfecb52b431f3ef28123d0ebcc7ab6275"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42c6d6c8f40d772452ad6afa6c949cecceb240b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42c6d6c8f40d772452ad6afa6c949cecceb240b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42c6d6c8f40d772452ad6afa6c949cecceb240b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42c6d6c8f40d772452ad6afa6c949cecceb240b3/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 40,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a6877927f9393f12467110d6a3b6342f4d40effc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c6d6c8f40d772452ad6afa6c949cecceb240b3/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c6d6c8f40d772452ad6afa6c949cecceb240b3/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=42c6d6c8f40d772452ad6afa6c949cecceb240b3",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -78,6 +78,9 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     else if (code == RPC_METHOD_NOT_FOUND)\n         nStatus = HTTP_NOT_FOUND;\n \n+    if (gArgs.GetBoolArg(\"-rpcerrorhttpok\", false))\n+        nStatus = HTTP_OK;\n+\n     std::string strReply = JSONRPCReply(NullUniValue, objError, id);\n \n     req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "726f770f03914e3a75af99a369a668ad70bf1d2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c6d6c8f40d772452ad6afa6c949cecceb240b3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c6d6c8f40d772452ad6afa6c949cecceb240b3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=42c6d6c8f40d772452ad6afa6c949cecceb240b3",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -515,6 +515,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcerrorhttpok\", \"Return HTTP OK (200) for JSON-RPC errors\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n \n #if HAVE_DECL_DAEMON"
      },
      {
        "sha": "7a815089435dd0d0df4254e07d795f57b9eb654d",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c6d6c8f40d772452ad6afa6c949cecceb240b3/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c6d6c8f40d772452ad6afa6c949cecceb240b3/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=42c6d6c8f40d772452ad6afa6c949cecceb240b3",
        "patch": "@@ -1,12 +1,22 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests some generic aspects of the RPC interface.\"\"\"\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_greater_than_or_equal\n \n+def expect_http_status(expected_http_status, expected_rpc_code,\n+                       fcn, *args):\n+    try:\n+        fcn(*args)\n+        raise AssertionError(\"Expected RPC error %d, got none\" % expected_rpc_code)\n+    except JSONRPCException as exc:\n+        assert_equal(exc.error[\"code\"], expected_rpc_code)\n+        assert_equal(exc.http_status, expected_http_status)\n+\n class RPCInterfaceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -48,9 +58,21 @@ def test_batch_request(self):\n         assert_equal(result_by_id[3]['error'], None)\n         assert result_by_id[3]['result'] is not None\n \n+    def test_http_status_codes(self):\n+        self.log.info(\"Testing HTTP status codes for JSON-RPC requests...\")\n+\n+        self.restart_node(0, [\"-rpcerrorhttpok\"])\n+        expect_http_status(200, -32601, self.nodes[0].invalidmethod)\n+        expect_http_status(200, -8, self.nodes[0].getblockhash, 42)\n+\n+        self.restart_node(0, [\"-norpcerrorhttpok\"])\n+        expect_http_status(404, -32601, self.nodes[0].invalidmethod)\n+        expect_http_status(500, -8, self.nodes[0].getblockhash, 42)\n+\n     def run_test(self):\n         self.test_getrpcinfo()\n         self.test_batch_request()\n+        self.test_http_status_codes()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "55e1ade905a9406ef13779d9dab5bbcf6bbcb9c9",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c6d6c8f40d772452ad6afa6c949cecceb240b3/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c6d6c8f40d772452ad6afa6c949cecceb240b3/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=42c6d6c8f40d772452ad6afa6c949cecceb240b3",
        "patch": "@@ -49,13 +49,14 @@\n log = logging.getLogger(\"BitcoinRPC\")\n \n class JSONRPCException(Exception):\n-    def __init__(self, rpc_error):\n+    def __init__(self, rpc_error, http_status=None):\n         try:\n             errmsg = '%(message)s (%(code)i)' % rpc_error\n         except (KeyError, TypeError):\n             errmsg = ''\n         super().__init__(errmsg)\n         self.error = rpc_error\n+        self.http_status = http_status\n \n \n def EncodeDecimal(o):\n@@ -131,19 +132,20 @@ def get_request(self, *args, **argsn):\n \n     def __call__(self, *args, **argsn):\n         postdata = json.dumps(self.get_request(*args, **argsn), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n-        response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n-            raise JSONRPCException(response['error'])\n+            raise JSONRPCException(response['error'], status)\n         elif 'result' not in response:\n             raise JSONRPCException({\n-                'code': -343, 'message': 'missing JSON-RPC result'})\n+                'code': -343, 'message': 'missing JSON-RPC result'}, status)\n         else:\n             return response['result']\n \n     def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \" + postdata)\n-        return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        response, _ = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        return response\n \n     def _get_response(self):\n         req_start_time = time.time()\n@@ -162,8 +164,9 @@ def _get_response(self):\n \n         content_type = http_response.getheader('Content-Type')\n         if content_type != 'application/json':\n-            raise JSONRPCException({\n-                'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)})\n+            raise JSONRPCException(\n+                {'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)},\n+                http_response.status)\n \n         responsedata = http_response.read().decode('utf8')\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n@@ -172,7 +175,7 @@ def _get_response(self):\n             log.debug(\"<-%s- [%.6f] %s\" % (response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n             log.debug(\"<-- [%.6f] %s\" % (elapsed, responsedata))\n-        return response\n+        return response, http_response.status\n \n     def __truediv__(self, relative_uri):\n         return AuthServiceProxy(\"{}/{}\".format(self.__service_url, relative_uri), self._service_name, connection=self.__conn)"
      }
    ]
  }
]