promag,2019-02-11T18:58:15Z,"NAK the flag, I don't think there should be a flag to tolerate bad client libraries. I think it's one of those flags that can be easily left enabled just because..\n\nI don't know `jsonrpclib` but after a quick google search you can find a [workaround](https://github.com/PacktPublishing/Mastering-Python-Networking/blob/727b3bb6f44433a12acf2841f38539f137672f74/Chapter03/Arista/eapi_2_acl.py#L133-",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-462450212,462450212,
laanwj,2019-02-11T19:37:15Z,"I'm also skeptical about this, doesn't seem like something that should be solved at the server side. It complicates our code even more.\n\nI mean, I could have understood this 5 years ago but our RPC implementation has been around so long that for every language there's something to interface with `bitcoind`.\n\nCertainly from python. Check our own functional tests for an example.",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-462464350,462464350,
luke-jr,2019-02-12T18:42:18Z,Agree that we shouldn't need to workaround JSON library bugs.,https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-462882464,462882464,
kristapsk,2019-02-12T18:48:21Z,I also agree Bitcoin Core should not have ugly hacks just because of buggy JSON-RPC libraries.,https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-462884737,462884737,
domob1812,2019-02-13T08:28:22Z,"I understand that we shouldn't work around bad libraries (and I have no strong need for that in my own application), but I wonder if especially the 500 error codes are really correct to return.  In [RFC 2616](https://www.ietf.org/rfc/rfc2616.txt), it says that 5xx codes are meant for ""Server Error - The server failed to fulfill an apparently valid request"".  To me, that sounds like it certainly do",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463105073,463105073,
domob1812,2019-02-13T08:30:23Z,"Independent of the actual change in HTTP response codes:  Do you think just the new test code for the returned status codes is useful, e.g. to split out into a separate PR (just for the status quo without the new flag)?",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463105698,463105698,
promag,2019-02-13T15:20:13Z,"> The JSON-RPC 2.0 spec doesn't say anything about HTTP\n\nIIUC HTTP is only the transport, so you only apply HTTP rules there. For instance, an invalid JSON-RPC request, like passing a wrong argument type, should not be 500 or 400, but 200 with the JSON-RPC error -32600.",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463238730,463238730,
domob1812,2019-02-13T17:58:10Z,"> > The JSON-RPC 2.0 spec doesn't say anything about HTTP\n> \n> IIUC HTTP is only the transport, so you only apply HTTP rules there. For instance, an invalid JSON-RPC request, like passing a wrong argument type, should not be 500 or 400, but 200 with the JSON-RPC error -32600.\n\nThat's exactly what my intuitive opinion (without being an expert) also is - that's what I tried to express with m",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463301095,463301095,
promag,2019-02-13T20:11:27Z,@domob1812 maybe the implementation followed https://www.jsonrpc.org/historical/json-rpc-over-http.html,https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463349868,463349868,
domob1812,2019-02-14T07:11:12Z,"> @domob1812 maybe the implementation followed https://www.jsonrpc.org/historical/json-rpc-over-http.html\n\nYes, I saw that (and linked to the doc in my post).  I'm not sure how relevant / authoritative that document is, since it is linked as ""historical"" and not really states what formal status (if any) it has.",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463517556,463517556,
laanwj,2019-02-15T08:15:47Z,"> Although, of course, even if that's correct, then we may still not want to simply change the behaviour after a couple years.\n\nThis is kind of my point. Even though some things about the RPC interface are kooky in some sense, over the last 10 years, many have adopted libraries to specifically how it works (thus far that `btcd` has a `bitcoind` compatibility mode!)\n\nIn the long term is mig",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-463947560,463947560,
DrahtBot,2019-02-26T21:51:45Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15495](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15495.html) (Add regtests for HTTP status codes by domob",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-467628806,467628806,
domob1812,2019-04-08T07:56:56Z,"With #15495 merged, we can close this now.",https://github.com/bitcoin/bitcoin/pull/15381#issuecomment-480725347,480725347,
practicalswift,2019-02-11T20:33:22Z,"`status` is unused. If that is intentional then use the more idiomatic form: `response, _ = â€¦`.",https://github.com/bitcoin/bitcoin/pull/15381#discussion_r255681638,255681638,test/functional/test_framework/authproxy.py
domob1812,2019-02-13T08:29:25Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15381#discussion_r256287781,256287781,test/functional/test_framework/authproxy.py
