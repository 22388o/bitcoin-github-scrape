ryanofsky,2021-06-15 21:52:31,> This looks like some benign plumbing for capnpnp IPC. I tried looking ahead at the parent PR ([#10102 (files)](https://github.com/bitcoin/bitcoin/pull/10102/files#diff-ab470dae240c184802de8bbc39f63116f54c11e2dff50ef90421aecc50b04284)) but I have to admit I can't totally tell where or how this `Context` is being used. Maybe some additional details from @ryanofsky would help here. But there's noth,https://github.com/bitcoin/bitcoin/pull/22218#issuecomment-861857887,861857887,
ariard,2021-07-12 14:26:16,"Code Review ACK 3e33d170\n\nThanks for taking the comment improvements suggestions, either here or on #10102 ",https://github.com/bitcoin/bitcoin/pull/22218#issuecomment-878325211,878325211,
ryanofsky,2021-07-21 19:09:20,"Possible this could be ready for merge. It just has two ACKs, but it's only adding two empty structs and a method to access them",https://github.com/bitcoin/bitcoin/pull/22218#issuecomment-884427319,884427319,
ariard,2021-07-08 14:04:48,nit: duplicated that,https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666224745,666224745,src/ipc/context.h
ariard,2021-07-08 15:11:15,"I think this virtual method definition would gain to be more documented.\n\nAFAIU, it allows a controlling process to access spawned process own `IpcImpl.context()` and as such trigger callback like `init_process`  you're pointing to in 2516d39.\n\nSo as suggestions, maybe comment could be ""Allow to access spawned process context from controlling process flow"" and the high-level documentation ",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666285480,666285480,src/interfaces/ipc.h
ariard,2021-07-08 15:42:22,"Should we prefix this structure to avoid reviewers confusion with process specific contexts i.e `NodeContext`, `WalletContext` ?\n\nFor e.g, `IpcState` or `LowLevelContext` ?",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666311810,666311810,src/ipc/context.h
ryanofsky,2021-07-09 15:55:20,"re: https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666285480\n\n> I think this virtual method definition would gain to be more documented.\n\nThanks, updated this comment. The use of the context struct is already documented in the struct definition so I just referenced the struct definition here to not repeat the same information two places. Also the purpose of the struct becomes mo",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r667052818,667052818,src/interfaces/ipc.h
ryanofsky,2021-07-09 15:55:32,"re: https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666224745\n\n> nit: duplicated that\n\nThanks, fixed",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r667053001,667053001,src/ipc/context.h
ryanofsky,2021-07-09 16:13:13,"re: https://github.com/bitcoin/bitcoin/pull/22218#discussion_r666311810\n\n> Should we prefix this structure to avoid reviewers confusion with process specific contexts i.e `NodeContext`, `WalletContext` ?\n> \n> For e.g, `IpcState` or `LowLevelContext` ?\n\nIt would help to know a specific example of how someone might interpret the current names and make a mistake or a wrong assumption, bec",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r667063993,667063993,src/ipc/context.h
ariard,2021-07-12 14:16:40,"> Thanks, updated this comment. The use of the context struct is already documented in the struct definition so I just referenced the struct definition here to not repeat the same information two places. \n\nWell I think it's more personal preference, but I like when the documentation on how to use an interface and its related methods are near to the code. In the present case, explain to a lambd",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r667970648,667970648,src/interfaces/ipc.h
ariard,2021-07-12 14:24:54,"> I am using the word ""context"" in the same way in wallet, node, and IPC code. I think ""context"" is different than ""state"" because can ""state"" refer can refer to any type of data including temporary data, while ""context"" refers to longer lasting environmental data. Like data from a high-level outer environment that is is passed through low level code, but the low level code just treats as opaque. ",https://github.com/bitcoin/bitcoin/pull/22218#discussion_r667978063,667978063,src/ipc/context.h
