[
  {
    "sha": "3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTMzZDE3MGNjMGE4ZjM4Njc5MTc3N2YzY2M1OTdlMmJkMGJmMmVl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-10T14:58:45Z"
      },
      "message": "Add ipc::Context and ipc::capnp::Context structs\n\nThese are currently empty structs but they will be used to pass some\nfunction and object pointers from bitcoin application code to IPC hooks\nthat run, for example, when a remote object is created or destroyed, or\na new process is created.",
      "tree": {
        "sha": "88d34d1b4d5e2fd12e011be49b0aa9651eac224f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88d34d1b4d5e2fd12e011be49b0aa9651eac224f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1704bbf2263f16c720604cfab4ccb775315df690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1704bbf2263f16c720604cfab4ccb775315df690",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1704bbf2263f16c720604cfab4ccb775315df690"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 62,
      "deletions": 2
    },
    "files": [
      {
        "sha": "93e059bc5e877abdd4470c1576b97a8ad7ee0bf6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -840,9 +840,11 @@ EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n+  ipc/context.h \\\n   ipc/exception.h \\\n   ipc/interfaces.cpp \\\n   ipc/process.cpp \\"
      },
      {
        "sha": "963649fc9ab2e3152261a3b7275ffc4f24b2dffb",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -9,6 +9,10 @@\n #include <memory>\n #include <typeindex>\n \n+namespace ipc {\n+struct Context;\n+} // namespace ipc\n+\n namespace interfaces {\n class Init;\n \n@@ -58,6 +62,9 @@ class Ipc\n         addCleanup(typeid(Interface), &iface, std::move(cleanup));\n     }\n \n+    //! IPC context struct accessor (see struct definition for more description).\n+    virtual ipc::Context& context() = 0;\n+\n protected:\n     //! Internal implementation of public addCleanup method (above) as a\n     //! type-erased virtual function, since template functions can't be virtual."
      },
      {
        "sha": "06e16144941baec8dcc4dce7d371f023ff8a8056",
        "filename": "src/ipc/capnp/context.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/capnp/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/capnp/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/context.h?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_CONTEXT_H\n+#define BITCOIN_IPC_CAPNP_CONTEXT_H\n+\n+#include <ipc/context.h>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Cap'n Proto context struct. Generally the parent ipc::Context struct should\n+//! be used instead of this struct to give all IPC protocols access to\n+//! application state, so there aren't unnecessary differences between IPC\n+//! protocols. But this specialized struct can be used to pass capnp-specific\n+//! function and object types to capnp hooks.\n+struct Context : ipc::Context\n+{\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_CONTEXT_H"
      },
      {
        "sha": "37b57a95251bd99092642e4868bd4c8d498a308c",
        "filename": "src/ipc/capnp/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/capnp/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/capnp/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/protocol.cpp?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <interfaces/init.h>\n+#include <ipc/capnp/context.h>\n #include <ipc/capnp/init.capnp.h>\n #include <ipc/capnp/init.capnp.proxy.h>\n #include <ipc/capnp/protocol.h>\n@@ -54,7 +55,7 @@ class CapnpProtocol : public Protocol\n     {\n         assert(!m_loop);\n         mp::g_thread_context.thread_name = mp::ThreadName(exe_name);\n-        m_loop.emplace(exe_name, &IpcLogFn, nullptr);\n+        m_loop.emplace(exe_name, &IpcLogFn, &m_context);\n         mp::ServeStream<messages::Init>(*m_loop, fd, init);\n         m_loop->loop();\n         m_loop.reset();\n@@ -63,13 +64,14 @@ class CapnpProtocol : public Protocol\n     {\n         mp::ProxyTypeRegister::types().at(type)(iface).cleanup.emplace_back(std::move(cleanup));\n     }\n+    Context& context() override { return m_context; }\n     void startLoop(const char* exe_name)\n     {\n         if (m_loop) return;\n         std::promise<void> promise;\n         m_loop_thread = std::thread([&] {\n             util::ThreadRename(\"capnp-loop\");\n-            m_loop.emplace(exe_name, &IpcLogFn, nullptr);\n+            m_loop.emplace(exe_name, &IpcLogFn, &m_context);\n             {\n                 std::unique_lock<std::mutex> lock(m_loop->m_mutex);\n                 m_loop->addClient(lock);\n@@ -80,6 +82,7 @@ class CapnpProtocol : public Protocol\n         });\n         promise.get_future().wait();\n     }\n+    Context m_context;\n     std::thread m_loop_thread;\n     std::optional<mp::EventLoop> m_loop;\n };"
      },
      {
        "sha": "924d7d7450f202de04986fd76ffa207149ee798c",
        "filename": "src/ipc/context.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/context.h?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CONTEXT_H\n+#define BITCOIN_IPC_CONTEXT_H\n+\n+namespace ipc {\n+//! Context struct used to give IPC protocol implementations or implementation\n+//! hooks access to application state, in case they need to run extra code that\n+//! isn't needed within a single process, like code copying global state from an\n+//! existing process to a new process when it's initialized, or code dealing\n+//! with shared objects that are created or destroyed remotely.\n+struct Context\n+{\n+};\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CONTEXT_H"
      },
      {
        "sha": "580590fde93e1825d7068f83e9643303e0380bc6",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -60,6 +60,7 @@ class IpcImpl : public interfaces::Ipc\n     {\n         m_protocol->addCleanup(type, iface, std::move(cleanup));\n     }\n+    Context& context() override { return m_protocol->context(); }\n     const char* m_exe_name;\n     const char* m_process_argv0;\n     interfaces::Init& m_init;"
      },
      {
        "sha": "4cd892e411786c87f65f59ebb3699de70bb09751",
        "filename": "src/ipc/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e33d170cc0a8f386791777f3cc597e2bd0bf2ee/src/ipc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/protocol.h?ref=3e33d170cc0a8f386791777f3cc597e2bd0bf2ee",
        "patch": "@@ -12,6 +12,8 @@\n #include <typeindex>\n \n namespace ipc {\n+struct Context;\n+\n //! IPC protocol interface for calling IPC methods over sockets.\n //!\n //! There may be different implementations of this interface for different IPC\n@@ -33,6 +35,9 @@ class Protocol\n     //! Add cleanup callback to interface that will run when the interface is\n     //! deleted.\n     virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n+\n+    //! Context accessor.\n+    virtual Context& context() = 0;\n };\n } // namespace ipc\n "
      }
    ]
  }
]