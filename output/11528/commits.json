[
  {
    "sha": "e026c21ee62b4da28e042c0ae2028650fb33d495",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDI2YzIxZWU2MmI0ZGEyOGUwNDJjMGFlMjAyODY1MGZiMzNkNDk1",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-10-19T13:58:32Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2017-10-19T13:58:32Z"
      },
      "message": "Minimal code changes to allow msvc compilation.",
      "tree": {
        "sha": "c2eb9b16ef8d8c0a06572b1fdbabc26334f6ed32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2eb9b16ef8d8c0a06572b1fdbabc26334f6ed32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e026c21ee62b4da28e042c0ae2028650fb33d495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e026c21ee62b4da28e042c0ae2028650fb33d495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e026c21ee62b4da28e042c0ae2028650fb33d495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e026c21ee62b4da28e042c0ae2028650fb33d495/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca"
      }
    ],
    "stats": {
      "total": 510,
      "additions": 499,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7d2a74add79dcde26486a0228f4e22c5ff25308d",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -22,7 +22,11 @@ static void Base58Encode(benchmark::State& state)\n         }\n     };\n     while (state.KeepRunning()) {\n+#ifndef _MSC_VER\n         EncodeBase58(buff.begin(), buff.end());\n+#else\n+\t\tEncodeBase58(buff.begin()._Ptr, buff.end()._Ptr);\n+#endif\n     }\n }\n "
      },
      {
        "sha": "34f1de5bb8723931ab0a11e2b3a36f1ad15f7272",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -8,7 +8,40 @@\n #include <assert.h>\n #include <iostream>\n #include <iomanip>\n-#include <sys/time.h>\n+\n+#ifndef _MSC_VER\r\n+#include <sys/time.h>\r\n+#else\r\n+#define WIN32_LEAN_AND_MEAN\r\n+#include <Windows.h>\r\n+\r\n+typedef struct timeval {\r\n+    long tv_sec;\r\n+    long tv_usec;\r\n+} timeval;\r\n+\r\n+// Substitute function for use with Microsoft's MSVC compiler.\r\n+int gettimeofday(struct timeval * tp, struct timezone * tzp)\r\n+{\r\n+    // Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's\r\n+    // This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)\r\n+    // until 00:00:00 January 1, 1970 \r\n+    static const uint64_t EPOCH = ((uint64_t)116444736000000000ULL);\r\n+\r\n+    SYSTEMTIME  system_time;\r\n+    FILETIME    file_time;\r\n+    uint64_t    time;\r\n+\r\n+    GetSystemTime(&system_time);\r\n+    SystemTimeToFileTime(&system_time, &file_time);\r\n+    time = ((uint64_t)file_time.dwLowDateTime);\r\n+    time += ((uint64_t)file_time.dwHighDateTime) << 32;\r\n+\r\n+    tp->tv_sec = (long)((time - EPOCH) / 10000000L);\r\n+    tp->tv_usec = (long)(system_time.wMilliseconds * 1000);\r\n+    return 0;\r\n+}\r\n+#endif\n \n benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n     static std::map<std::string, benchmark::BenchFunction> benchmarks_map;"
      },
      {
        "sha": "94064c9ca67c9b57736009ed151d608d1c725b0f",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -19,7 +19,7 @@ static const int MIN_CORES = 2;\n static const size_t BATCHES = 101;\n static const size_t BATCH_SIZE = 30;\n static const int PREVECTOR_SIZE = 28;\n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n static void CCheckQueueSpeed(benchmark::State& state)\n {\n     struct FakeJobNoWork {"
      },
      {
        "sha": "6e280528c54c2212320c22cee8c3d6dcfc1a0736",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -145,7 +145,7 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n                 { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n@@ -246,7 +246,7 @@ class CTestNetParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n \n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n             }\n@@ -316,7 +316,7 @@ class CRegTestParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n \n-        checkpointData = (CCheckpointData) {\n+        checkpointData = {\n             {\n                 {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n             }"
      },
      {
        "sha": "1ee3281d7b6e12e7a3c9008b0132b5a6eefece3d",
        "filename": "src/config/bitcoin-config.h",
        "status": "added",
        "additions": 428,
        "deletions": 0,
        "changes": 428,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/config/bitcoin-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/config/bitcoin-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/config/bitcoin-config.h?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -0,0 +1,428 @@\n+/* src/config/bitcoin-config.h.  Generated from bitcoin-config.h.in by configure.  */\n+/* src/config/bitcoin-config.h.in.  Generated from configure.ac by autoheader.  */\n+\n+#ifndef BITCOIN_CONFIG_H\n+\n+#define BITCOIN_CONFIG_H\n+\n+/* Define if building universal (internal helper macro) */\n+/* #undef AC_APPLE_UNIVERSAL_BUILD */\n+\n+/* Version Build */\n+#define CLIENT_VERSION_BUILD 0\n+\n+/* Version is release */\n+#define CLIENT_VERSION_IS_RELEASE false\n+\n+/* Major version */\n+#define CLIENT_VERSION_MAJOR 1\n+\n+/* Minor version */\n+#define CLIENT_VERSION_MINOR 15\n+\n+/* Build revision */\n+#define CLIENT_VERSION_REVISION 99\n+\n+/* Copyright holder(s) before %s replacement */\n+#define COPYRIGHT_HOLDERS \"The %s developers\"\n+\n+/* Copyright holder(s) */\n+#define COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\"\n+\n+/* Replacement for %s in copyright holders string */\n+#define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Core\"\n+\n+/* Copyright year */\n+#define COPYRIGHT_YEAR 2017\n+\n+/* Define to 1 to enable wallet functions */\n+#define ENABLE_WALLET 1\n+\n+/* Define to 1 to enable ZMQ functions */\n+#define ENABLE_ZMQ 1\n+\n+/* parameter and return value type for __fdelt_chk */\n+/* #undef FDELT_TYPE */\n+\n+/* define if the Boost library is available */\n+#define HAVE_BOOST /**/\n+\n+/* define if the Boost::Chrono library is available */\n+#define HAVE_BOOST_CHRONO /**/\n+\n+/* define if the Boost::Filesystem library is available */\n+#define HAVE_BOOST_FILESYSTEM /**/\n+\n+/* define if the Boost::PROGRAM_OPTIONS library is available */\n+#define HAVE_BOOST_PROGRAM_OPTIONS /**/\n+\n+/* define if the Boost::System library is available */\n+#define HAVE_BOOST_SYSTEM /**/\n+\n+/* define if the Boost::Thread library is available */\n+#define HAVE_BOOST_THREAD /**/\n+\n+/* define if the Boost::Unit_Test_Framework library is available */\n+#define HAVE_BOOST_UNIT_TEST_FRAMEWORK /**/\n+\n+/* Define to 1 if you have the <byteswap.h> header file. */\n+/* #undef HAVE_BYTESWAP_H */\n+\n+/* Define this symbol if the consensus lib has been built */\n+#define HAVE_CONSENSUS_LIB 1\n+\n+/* define if the compiler supports basic C++11 syntax */\n+#define HAVE_CXX11 1\n+\n+/* Define to 1 if you have the declaration of `be16toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BE16TOH 0\n+\n+/* Define to 1 if you have the declaration of `be32toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BE32TOH 0\n+\n+/* Define to 1 if you have the declaration of `be64toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BE64TOH 0\n+\n+/* Define to 1 if you have the declaration of `bswap_16', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BSWAP_16 0\n+\n+/* Define to 1 if you have the declaration of `bswap_32', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BSWAP_32 0\n+\n+/* Define to 1 if you have the declaration of `bswap_64', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_BSWAP_64 0\n+\n+/* Define to 1 if you have the declaration of `daemon', and to 0 if you don't.\n+   */\n+#define HAVE_DECL_DAEMON 0\n+\n+/* Define to 1 if you have the declaration of `EVP_MD_CTX_new', and to 0 if\n+   you don't. */\n+//#define HAVE_DECL_EVP_MD_CTX_NEW 1\n+\n+/* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOBE16 0\n+\n+/* Define to 1 if you have the declaration of `htobe32', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOBE32 0\n+\n+/* Define to 1 if you have the declaration of `htobe64', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOBE64 0\n+\n+/* Define to 1 if you have the declaration of `htole16', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOLE16 0\n+\n+/* Define to 1 if you have the declaration of `htole32', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOLE32 0\n+\n+/* Define to 1 if you have the declaration of `htole64', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_HTOLE64 0\n+\n+/* Define to 1 if you have the declaration of `le16toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_LE16TOH 0\n+\n+/* Define to 1 if you have the declaration of `le32toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_LE32TOH 0\n+\n+/* Define to 1 if you have the declaration of `le64toh', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_LE64TOH 0\n+\n+/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_STRERROR_R 0\n+\n+/* Define to 1 if you have the declaration of `strnlen', and to 0 if you\n+   don't. */\n+#define HAVE_DECL_STRNLEN 1\n+\n+/* Define to 1 if you have the declaration of `__builtin_clz', and to 0 if you\n+   don't. */\n+//#define HAVE_DECL___BUILTIN_CLZ 1\n+\n+/* Define to 1 if you have the declaration of `__builtin_clzl', and to 0 if\n+   you don't. */\n+//#define HAVE_DECL___BUILTIN_CLZL 1\n+\n+/* Define to 1 if you have the declaration of `__builtin_clzll', and to 0 if\n+   you don't. */\n+//#define HAVE_DECL___BUILTIN_CLZLL 1\n+\n+/* Define to 1 if you have the <dlfcn.h> header file. */\n+/* #undef HAVE_DLFCN_H */\n+\n+/* Define to 1 if you have the <endian.h> header file. */\n+/* #undef HAVE_ENDIAN_H */\n+\n+/* Define to 1 if the system has the `dllexport' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_DLLEXPORT 1\n+\n+/* Define to 1 if the system has the `dllimport' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_DLLIMPORT 1\n+\n+/* Define to 1 if the system has the `visibility' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_VISIBILITY 1\n+\n+/* Define this symbol if the BSD getentropy system call is available */\n+/* #undef HAVE_GETENTROPY */\n+\n+/* Define this symbol if the BSD getentropy system call is available with\n+   sys/random.h */\n+/* #undef HAVE_GETENTROPY_RAND */\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#define HAVE_INTTYPES_H 1\n+\n+/* Define to 1 if you have the `advapi32' library (-ladvapi32). */\n+#define HAVE_LIBADVAPI32 1\n+\n+/* Define to 1 if you have the `comctl32' library (-lcomctl32). */\n+#define HAVE_LIBCOMCTL32 1\n+\n+/* Define to 1 if you have the `comdlg32' library (-lcomdlg32). */\n+#define HAVE_LIBCOMDLG32 1\n+\n+/* Define to 1 if you have the `crypt32' library (-lcrypt32). */\n+#define HAVE_LIBCRYPT32 1\n+\n+/* Define to 1 if you have the `gdi32' library (-lgdi32). */\n+#define HAVE_LIBGDI32 1\n+\n+/* Define to 1 if you have the `imm32' library (-limm32). */\n+#define HAVE_LIBIMM32 1\n+\n+/* Define to 1 if you have the `iphlpapi' library (-liphlpapi). */\n+#define HAVE_LIBIPHLPAPI 1\n+\n+/* Define to 1 if you have the `kernel32' library (-lkernel32). */\n+#define HAVE_LIBKERNEL32 1\n+\n+/* Define to 1 if you have the `mingwthrd' library (-lmingwthrd). */\n+#define HAVE_LIBMINGWTHRD 1\n+\n+/* Define to 1 if you have the `mswsock' library (-lmswsock). */\n+#define HAVE_LIBMSWSOCK 1\n+\n+/* Define to 1 if you have the `ole32' library (-lole32). */\n+#define HAVE_LIBOLE32 1\n+\n+/* Define to 1 if you have the `oleaut32' library (-loleaut32). */\n+#define HAVE_LIBOLEAUT32 1\n+\n+/* Define to 1 if you have the `rpcrt4' library (-lrpcrt4). */\n+#define HAVE_LIBRPCRT4 1\n+\n+/* Define to 1 if you have the `rt' library (-lrt). */\n+/* #undef HAVE_LIBRT */\n+\n+/* Define to 1 if you have the `shell32' library (-lshell32). */\n+#define HAVE_LIBSHELL32 1\n+\n+/* Define to 1 if you have the `shlwapi' library (-lshlwapi). */\n+#define HAVE_LIBSHLWAPI 1\n+\n+/* Define to 1 if you have the `ssp' library (-lssp). */\n+#define HAVE_LIBSSP 1\n+\n+/* Define to 1 if you have the `user32' library (-luser32). */\n+#define HAVE_LIBUSER32 1\n+\n+/* Define to 1 if you have the `uuid' library (-luuid). */\n+#define HAVE_LIBUUID 1\n+\n+/* Define to 1 if you have the `winmm' library (-lwinmm). */\n+#define HAVE_LIBWINMM 1\n+\n+/* Define to 1 if you have the `winspool' library (-lwinspool). */\n+#define HAVE_LIBWINSPOOL 1\n+\n+/* Define to 1 if you have the `ws2_32' library (-lws2_32). */\n+#define HAVE_LIBWS2_32 1\n+\n+/* Define to 1 if you have the `z ' library (-lz ). */\n+#define HAVE_LIBZ_ 1\n+\n+/* Define this symbol if you have malloc_info */\n+/* #undef HAVE_MALLOC_INFO */\n+\n+/* Define this symbol if you have mallopt with M_ARENA_MAX */\n+/* #undef HAVE_MALLOPT_ARENA_MAX */\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#define HAVE_MEMORY_H 1\n+\n+/* Define to 1 if you have the <miniupnpc/miniupnpc.h> header file. */\n+#define HAVE_MINIUPNPC_MINIUPNPC_H 1\n+\n+/* Define to 1 if you have the <miniupnpc/miniwget.h> header file. */\n+#define HAVE_MINIUPNPC_MINIWGET_H 1\n+\n+/* Define to 1 if you have the <miniupnpc/upnpcommands.h> header file. */\n+#define HAVE_MINIUPNPC_UPNPCOMMANDS_H 1\n+\n+/* Define to 1 if you have the <miniupnpc/upnperrors.h> header file. */\n+#define HAVE_MINIUPNPC_UPNPERRORS_H 1\n+\n+/* Define this symbol if you have MSG_DONTWAIT */\n+/* #undef HAVE_MSG_DONTWAIT */\n+\n+/* Define this symbol if you have MSG_NOSIGNAL */\n+/* #undef HAVE_MSG_NOSIGNAL */\n+\n+/* Define if you have POSIX threads libraries and header files. */\n+//#define HAVE_PTHREAD 1\n+\n+/* Have PTHREAD_PRIO_INHERIT. */\n+//#define HAVE_PTHREAD_PRIO_INHERIT 1\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#define HAVE_STDINT_H 1\n+\n+/* Define to 1 if you have the <stdio.h> header file. */\n+#define HAVE_STDIO_H 1\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#define HAVE_STDLIB_H 1\n+\n+/* Define to 1 if you have the `strerror_r' function. */\n+/* #undef HAVE_STRERROR_R */\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#define HAVE_STRINGS_H 1\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#define HAVE_STRING_H 1\n+\n+/* Define this symbol if the BSD sysctl(KERN_ARND) is available */\n+/* #undef HAVE_SYSCTL_ARND */\n+\n+/* Define to 1 if you have the <sys/endian.h> header file. */\n+/* #undef HAVE_SYS_ENDIAN_H */\n+\n+/* Define this symbol if the Linux getrandom system call is available */\n+/* #undef HAVE_SYS_GETRANDOM */\n+\n+/* Define to 1 if you have the <sys/prctl.h> header file. */\n+/* #undef HAVE_SYS_PRCTL_H */\n+\n+/* Define to 1 if you have the <sys/select.h> header file. */\n+/* #undef HAVE_SYS_SELECT_H */\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#define HAVE_SYS_STAT_H 1\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#define HAVE_SYS_TYPES_H 1\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+//#define HAVE_UNISTD_H 1\n+\n+/* Define if the visibility attribute is supported. */\n+#define HAVE_VISIBILITY_ATTRIBUTE 1\n+\n+/* Define this symbol if boost sleep works */\n+/* #undef HAVE_WORKING_BOOST_SLEEP */\n+\n+/* Define this symbol if boost sleep_for works */\n+#define HAVE_WORKING_BOOST_SLEEP_FOR 1\n+\n+/* Define to the sub-directory where libtool stores uninstalled libraries. */\n+#define LT_OBJDIR \".libs/\"\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#define PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\"\n+\n+/* Define to the full name of this package. */\n+#define PACKAGE_NAME \"Bitcoin Core\"\n+\n+/* Define to the full name and version of this package. */\n+#define PACKAGE_STRING \"Bitcoin Core 0.15.99\"\n+\n+/* Define to the one symbol short name of this package. */\n+#define PACKAGE_TARNAME \"bitcoin\"\n+\n+/* Define to the home page for this package. */\n+#define PACKAGE_URL \"https://bitcoincore.org/\"\n+\n+/* Define to the version of this package. */\n+#define PACKAGE_VERSION \"0.15.99\"\n+\n+/* Define to necessary symbol if this constant uses a non-standard name on\n+   your system. */\n+/* #undef PTHREAD_CREATE_JOINABLE */\n+\n+/* Define this symbol if the qt platform is cocoa */\n+/* #undef QT_QPA_PLATFORM_COCOA */\n+\n+/* Define this symbol if the minimal qt platform exists */\n+#define QT_QPA_PLATFORM_MINIMAL 1\n+\n+/* Define this symbol if the qt platform is windows */\n+#define QT_QPA_PLATFORM_WINDOWS 1\n+\n+/* Define this symbol if the qt platform is xcb */\n+/* #undef QT_QPA_PLATFORM_XCB */\n+\n+/* Define this symbol if qt plugins are static */\n+#define QT_STATICPLUGIN 1\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#define STDC_HEADERS 1\n+\n+/* Define to 1 if strerror_r returns char *. */\n+/* #undef STRERROR_R_CHAR_P */\n+\n+/* Define this symbol to build in assembly routines */\n+//#define USE_ASM 1\n+\n+/* Define this symbol if coverage is enabled */\n+/* #undef USE_COVERAGE */\n+\n+/* Define if dbus support should be compiled in */\n+/* #undef USE_DBUS */\n+\n+/* Define if QR support should be compiled in */\n+//#define USE_QRCODE 1\n+\n+/* UPnP support not compiled if undefined, otherwise value (0 or 1) determines\n+   default state */\n+//#define USE_UPNP 0\n+\n+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n+   significant byte first (like Motorola and SPARC, unlike Intel). */\n+#if defined AC_APPLE_UNIVERSAL_BUILD\n+# if defined __BIG_ENDIAN__\n+#  define WORDS_BIGENDIAN 1\n+# endif\n+#else\n+# ifndef WORDS_BIGENDIAN\n+/* #  undef WORDS_BIGENDIAN */\n+# endif\n+#endif\n+\n+/* Enable large inode numbers on Mac OS X 10.5.  */\n+#ifndef _DARWIN_USE_64_BIT_INODE\n+# define _DARWIN_USE_64_BIT_INODE 1\n+#endif\n+\n+/* Number of bits in a file offset, on hosts where this is settable. */\n+#define _FILE_OFFSET_BITS 64\n+\n+/* Define for large files, on AIX-style hosts. */\n+/* #undef _LARGE_FILES */\n+\n+#endif //BITCOIN_CONFIG_H"
      },
      {
        "sha": "b23e3dcc9d06a1d854152b245de6918297026072",
        "filename": "src/leveldb/db/c.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/db/c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/db/c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/c.cc?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -5,7 +5,9 @@\n #include \"leveldb/c.h\"\n \n #include <stdlib.h>\n+#ifndef WIN32\n #include <unistd.h>\n+#endif\n #include \"leveldb/cache.h\"\n #include \"leveldb/comparator.h\"\n #include \"leveldb/db.h\""
      },
      {
        "sha": "6fdf030410093c574709e3f10c143b6746157988",
        "filename": "src/leveldb/port/port_win.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/port/port_win.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/port/port_win.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.h?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -32,9 +32,15 @@\n #define STORAGE_LEVELDB_PORT_PORT_WIN_H_\n \n #ifdef _MSC_VER\n-#define snprintf _snprintf\n+//#define snprintf _snprintf\n #define close _close\n #define fread_unlocked _fread_nolock\n+#include <stdint.h>\n+#ifdef _WIN64\r\n+typedef int64_t ssize_t;\r\n+#else\r\n+typedef int32_t ssize_t;\r\n+#endif\n #endif\n \n #include <string>"
      },
      {
        "sha": "b51e5b52d60512563edd5b1e0740ca7ed8a8e6b9",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -761,14 +761,16 @@ uint64_t Win32Env::NowMicros()\n static Status CreateDirInner( const std::string& dirname )\n {\n     Status sRet;\n-    DWORD attr = ::GetFileAttributes(dirname.c_str());\n+\tstd::wstring dirnameW;\n+\tToWidePath(dirname, dirnameW);\n+    DWORD attr = ::GetFileAttributes(dirnameW.c_str());\n     if (attr == INVALID_FILE_ATTRIBUTES) { // doesn't exist:\n       std::size_t slash = dirname.find_last_of(\"\\\\\");\n       if (slash != std::string::npos){\n \tsRet = CreateDirInner(dirname.substr(0, slash));\n \tif (!sRet.ok()) return sRet;\n       }\n-      BOOL result = ::CreateDirectory(dirname.c_str(), NULL);\n+      BOOL result = ::CreateDirectory(dirnameW.c_str(), NULL);\n       if (result == FALSE) {\n \tsRet = Status::IOError(dirname, \"Could not create directory.\");\n \treturn sRet;"
      },
      {
        "sha": "bd38b149f31e088c3f168e3f6054142e9c57c652",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -40,7 +40,7 @@ std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of\n struct IteratorComparator\n {\n     template<typename I>\n-    bool operator()(const I& a, const I& b)\n+    bool operator()(const I& a, const I& b) const\n     {\n         return &(*a) < &(*b);\n     }"
      },
      {
        "sha": "deb28b3798181ab2f88cf43cc1f7c251c79769ed",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -12,6 +12,14 @@\n \n #include <stdint.h>\n \n+#ifdef _MSC_VER\n+#ifdef _WIN64\n+typedef int64_t ssize_t;\n+#else\n+typedef int32_t ssize_t;\n+#endif\n+#endif\n+\n /* Seed OpenSSL PRNG with additional entropy data */\n void RandAddSeed();\n "
      },
      {
        "sha": "30b257e456c5c1660144cac79cb026e831dc4dd1",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <cstring>\n \n+#if defined(_MSC_VER)\r\n+#include <Windows.h>\t// For SecureZeroMemory.\r\n+#endif\n+\n /* Compilers have a bad habit of removing \"superfluous\" memset calls that\n  * are trying to zero memory. For example, when memset()ing a buffer and\n  * then free()ing it, the compiler might decide that the memset is\n@@ -32,7 +36,8 @@ void memory_cleanse(void *ptr, size_t len)\n        might try to eliminate \"superfluous\" memsets. If there's an easy way to\n        detect memset_s, it would be better to use that. */\n #if defined(_MSC_VER)\n-    __asm;\n+    //__asm;\n+    SecureZeroMemory(ptr, len);\n #else\n     __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n #endif"
      },
      {
        "sha": "162c597c30ef2f2080dc3ad1e8e97e0b7b2878b7",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e026c21ee62b4da28e042c0ae2028650fb33d495/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e026c21ee62b4da28e042c0ae2028650fb33d495/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=e026c21ee62b4da28e042c0ae2028650fb33d495",
        "patch": "@@ -24,7 +24,7 @@\n // otherwise.\n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n \n-static const int QUEUE_BATCH_SIZE = 128;\n+static const unsigned int QUEUE_BATCH_SIZE = 128;\n \n struct FakeCheck {\n     bool operator()()"
      }
    ]
  }
]