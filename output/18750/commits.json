[
  {
    "sha": "ba8950ee0134a7958e3e9b041cd54d222feb09a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTg5NTBlZTAxMzRhNzk1OGUzZTliMDQxY2Q1NGQyMjJmZWIwOWEx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-04-23T19:09:46Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-12T16:18:24Z"
      },
      "message": "build: optionally skip external warnings\n\nAdd an option to `./configure` to suppress compilation warnings from\nexternal headers. The option is off by default (no change in behavior,\nshow warnings from external headers).\n\nThis option is useful if e.g. Boost or Qt is installed outside of\n`/usr/include` (warnings from headers in `/usr/include` are already\nsuppressed by default) and those warnings stand in the way of compiling\nBitcoin Core with `-Werror[=...]` or they just clutter the build output\ntoo much and make our own warnings hard to spot.",
      "tree": {
        "sha": "45593645a4c345ac48928a6a8f147df087f617ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45593645a4c345ac48928a6a8f147df087f617ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba8950ee0134a7958e3e9b041cd54d222feb09a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+EgdIACgkQVN8G9ktV\ny7/wHx/+PW952v5e8BFEaGHp9LR6viFcJ7x1OE+LzOrgQH6TOOIw5TrM7YzZo+NL\nVX8KuPHgpV+x0ekYcQm0+DIua+1bgW0LxUxK5LyU7AvZTtzEjQZrt+arilSREHjS\n/E1e8OCNnw0owXWDhmDT+DT7u+LUihBMHVkG4doys3kSB3ShMEe/GPv0YarhzOMq\nhqFdec4nBYdAhUHrE+xf+aMIdw2tlb8A28qVrDYKjsvNB2e0/r+A9qPOlm5q65l5\n5Htlvi5k2Kpi8v2p34ryyirw648n3Q9HpKmQgxz0kmj4xA/CYIC/kHre8PzX34V7\nOZlwHgSfrD/47Fy/DFKJ015Pk7DKRYmFt0g0TZPUk/85F92+XfnWJY/iwOqoFuOQ\nIYs3lGdjKOL8NzqgSEa0cj/ytFaPKm1muyZ6wlJnJ/BTUd/LgrataGoNTXczFeVO\nLITtYbKzbdBNpYCs8y4ZgJk3Uff/KAJX/92sLKeY0FiEjWBUlKzIlXIHnohx+1o2\npi4AUdufDACVcQkkESXl1Ro5YAzaXFojLCLBfD4l6fM1SeT/wdYhsu7zg2ynzbmL\n3tr0vkPBmtYV/imrBq30IoRPYgwZz64tWS7rzH4BCCe0t74gs9YWb1BDV+5egxvD\n+UXd5q/0Ixe9u/z6H56cXrHEtVwNqDrKuMYnGZqVQvhBJf3kE2pMWwqGvQdgMLSt\nY2K4MEFqBOz6v83v/zLHFaOIPHnvRjcW3t3SwpMdyfqfa77S5eeKa3jdzkh9eO+G\nL3BYGBgppqcrf7sfI4b1wpC2QMcfirVSW9J2M0AXUA/uceQz4cnC8JmndzELyo+i\nOYZAxETbDpLzZ/Ms+SpS5A+XcPnwjzS2YuWPtgA+++VmML2iXBlADQChu8Z4Qc6n\nUiG7di71pxhIg0JVDNAfKOFXrV2l7hspJgh0w/Opdx9gG0a8gNZWYOw3u/KAlPME\nHizmm5EUcC6sGVfH2KDMC1W6GzqkG6212bxDGHqGCr6DNQNRchnJhlaZIKVKAJ3s\nyJWhNGFhmoSLSV8tSoKU6WvCpxPlurcxc3NhYEgRPlbusNM5E81prO9wdAmuTJYd\nVXcC+0ztK1lqa6VhUBk20NhlMaNfxn+U6p4D1MNGmLK5o8V9aL8no/YwV6CtIy8h\nFBJUFtDAJmMGr6BOQZP8Y/MlIu8lo1I97SiD7/CAlEKheZtZm1Awg1tHm3REIsGM\n7xDKEvOdpE8K0zBEwsPJQ1zDb/PiaJTY2n7OqXMWRxBQYY9DlmbQ1a9Z1wCJ+GGH\nh2UR6kDc0skkDHjn2SdzZlnv6btLx85GGfFnyGTvnZFJaB0ZPtIFNyVKKpkAudPH\nLYlKqw5vgFkDgCEgW0EG5knjGd3E7A==\n=zjif\n-----END PGP SIGNATURE-----",
        "payload": "tree 45593645a4c345ac48928a6a8f147df087f617ca\nparent bab4cce1b0eedc1a51692aaf83ba54dd0a9d17e6\nauthor Vasil Dimov <vd@FreeBSD.org> 1587668986 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1602519504 +0200\n\nbuild: optionally skip external warnings\n\nAdd an option to `./configure` to suppress compilation warnings from\nexternal headers. The option is off by default (no change in behavior,\nshow warnings from external headers).\n\nThis option is useful if e.g. Boost or Qt is installed outside of\n`/usr/include` (warnings from headers in `/usr/include` are already\nsuppressed by default) and those warnings stand in the way of compiling\nBitcoin Core with `-Werror[=...]` or they just clutter the build output\ntoo much and make our own warnings hard to spot.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba8950ee0134a7958e3e9b041cd54d222feb09a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba8950ee0134a7958e3e9b041cd54d222feb09a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba8950ee0134a7958e3e9b041cd54d222feb09a1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bab4cce1b0eedc1a51692aaf83ba54dd0a9d17e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bab4cce1b0eedc1a51692aaf83ba54dd0a9d17e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bab4cce1b0eedc1a51692aaf83ba54dd0a9d17e6"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 39,
      "deletions": 2
    },
    "files": [
      {
        "sha": "babf5da4cd91a909242206c58d567aba3eaa7b63",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8950ee0134a7958e3e9b041cd54d222feb09a1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8950ee0134a7958e3e9b041cd54d222feb09a1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ba8950ee0134a7958e3e9b041cd54d222feb09a1",
        "patch": "@@ -190,6 +190,16 @@ AC_ARG_ENABLE([ccache],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n \n+dnl Suppress warnings from external headers (e.g. Boost, Qt).\n+dnl May be useful if warnings from external headers clutter the build output\n+dnl too much, so that it becomes difficult to spot Bitcoin Core warnings\n+dnl or if they cause a build failure with --enable-werror.\n+AC_ARG_ENABLE([suppress-external-warnings],\n+  [AS_HELP_STRING([--enable-suppress-external-warnings],\n+                  [Suppress warnings from external headers (default is no)])],\n+  [suppress_external_warnings=$enableval],\n+  [suppress_external_warnings=no])\n+\n AC_ARG_ENABLE([lcov],\n   [AS_HELP_STRING([--enable-lcov],\n   [enable lcov testing (default is no)])],\n@@ -1149,6 +1159,18 @@ AC_SUBST(LEVELDB_CPPFLAGS)\n AC_SUBST(LIBLEVELDB)\n AC_SUBST(LIBMEMENV)\n \n+dnl SUPPRESSED_CPPFLAGS=SUPPRESS_WARNINGS([$SOME_CPPFLAGS])\n+dnl Replace -I with -isystem in $SOME_CPPFLAGS to suppress warnings from\n+dnl headers from its include directories and return the result.\n+dnl See -isystem documentation:\n+dnl https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html\n+dnl https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-isystem-directory\n+dnl Do not change \"-I/usr/include\" to \"-isystem /usr/include\" because that\n+dnl is not necessary (/usr/include is already a system directory) and because\n+dnl it would break GCC's #include_next.\n+AC_DEFUN([SUPPRESS_WARNINGS],\n+         [$(echo $1 |${SED} -E -e 's/(^| )-I/\\1-isystem /g' -e 's;-isystem /usr/include([/ ]|$);-I/usr/include\\1;g')])\n+\n dnl enable-fuzz should disable all other targets\n if test \"x$enable_fuzz\" = \"xyes\"; then\n   AC_MSG_WARN(enable-fuzz will disable all other targets)\n@@ -1170,11 +1192,22 @@ else\n \n   dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n   BITCOIN_QT_CONFIGURE([5.5.1])\n+\n+  dnl Keep a copy of the original $QT_INCLUDES and use it when invoking qt's moc\n+  QT_INCLUDES_UNSUPPRESSED=$QT_INCLUDES\n+  if test x$suppress_external_warnings != xno ; then\n+    QT_INCLUDES=SUPPRESS_WARNINGS($QT_INCLUDES)\n+    QT_DBUS_INCLUDES=SUPPRESS_WARNINGS($QT_DBUS_INCLUDES)\n+    QT_TEST_INCLUDES=SUPPRESS_WARNINGS($QT_TEST_INCLUDES)\n+  fi\n fi\n \n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+    if test x$suppress_external_warnings != xno ; then\n+        BDB_CPPFLAGS=SUPPRESS_WARNINGS($BDB_CPPFLAGS)\n+    fi\n fi\n \n dnl Check for libminiupnpc (optional)\n@@ -1229,6 +1262,10 @@ AX_BOOST_THREAD\n dnl Opt-in to boost-process\n AS_IF([ test x$with_boost_process != x ], [ AX_BOOST_PROCESS ], [ ax_cv_boost_process=no ] )\n \n+if test x$suppress_external_warnings != xno; then\n+    BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n+fi\n+\n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro"
      },
      {
        "sha": "cf048ca25a7acea688283d0dad6e30a30523c986",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8950ee0134a7958e3e9b041cd54d222feb09a1/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8950ee0134a7958e3e9b041cd54d222feb09a1/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=ba8950ee0134a7958e3e9b041cd54d222feb09a1",
        "patch": "@@ -379,11 +379,11 @@ ui_%.h: %.ui\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(UIC) -o $@ $< || (echo \"Error creating $@\"; false)\n \n %.moc: %.cpp\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES_UNSUPPRESSED) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n moc_%.cpp: %.h\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES_UNSUPPRESSED) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n %.qm: %.ts"
      }
    ]
  }
]