[
  {
    "sha": "2c448d6bc7b2ac98da5171cf8f31c38a6324fb81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzQ0OGQ2YmM3YjJhYzk4ZGE1MTcxY2Y4ZjMxYzM4YTYzMjRmYjgx",
    "commit": {
      "author": {
        "name": "Jordan Baczuk",
        "email": "jordan.baczuk@gmail.com",
        "date": "2019-05-21T02:36:31Z"
      },
      "committer": {
        "name": "Jordan Baczuk",
        "email": "jordan.baczuk@gmail.com",
        "date": "2019-05-21T02:36:31Z"
      },
      "message": "parameterize hard coded numbers referring to miner conf window",
      "tree": {
        "sha": "2e88909a50ba2b3e57d4b66f58ff563042360476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e88909a50ba2b3e57d4b66f58ff563042360476"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81/comments",
    "author": {
      "login": "JBaczuk",
      "id": 8162417,
      "node_id": "MDQ6VXNlcjgxNjI0MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8162417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JBaczuk",
      "html_url": "https://github.com/JBaczuk",
      "followers_url": "https://api.github.com/users/JBaczuk/followers",
      "following_url": "https://api.github.com/users/JBaczuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/JBaczuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JBaczuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JBaczuk/subscriptions",
      "organizations_url": "https://api.github.com/users/JBaczuk/orgs",
      "repos_url": "https://api.github.com/users/JBaczuk/repos",
      "events_url": "https://api.github.com/users/JBaczuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JBaczuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JBaczuk",
      "id": 8162417,
      "node_id": "MDQ6VXNlcjgxNjI0MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8162417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JBaczuk",
      "html_url": "https://github.com/JBaczuk",
      "followers_url": "https://api.github.com/users/JBaczuk/followers",
      "following_url": "https://api.github.com/users/JBaczuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/JBaczuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JBaczuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JBaczuk/subscriptions",
      "organizations_url": "https://api.github.com/users/JBaczuk/orgs",
      "repos_url": "https://api.github.com/users/JBaczuk/repos",
      "events_url": "https://api.github.com/users/JBaczuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JBaczuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93c360eec4de77af8aaa74d9140dba57160e30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93c360eec4de77af8aaa74d9140dba57160e30d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93c360eec4de77af8aaa74d9140dba57160e30d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "692247ea88a5956a444a9bab87402cc551cf2073",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c448d6bc7b2ac98da5171cf8f31c38a6324fb81/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=2c448d6bc7b2ac98da5171cf8f31c38a6324fb81",
        "patch": "@@ -271,35 +271,35 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // Before MedianTimePast of the chain has crossed nStartTime, the bit\n     // should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(2016, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n-    // Mine 2011 more blocks at the old time, and check that CBV isn't setting the bit yet.\n-    for (int i=1; i<2012; i++) {\n-        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n+    for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n+        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n         // to be 4, and the bit we're testing happens to be bit 28.\n         BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n     }\n     // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n     // CBV should still not yet set the bit.\n     nTime = nStartTime;\n-    for (int i=2012; i<=2016; i++) {\n-        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n+        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n     }\n \n     // Advance to the next period and transition to STARTED,\n-    lastBlock = firstChain.Mine(6048, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n-    int blocksToMine = 4032; // test blocks for up to 2 time periods\n-    int nHeight = 6048;\n+    uint32_t blocksToMine = mainnetParams.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n+    uint32_t nHeight = mainnetParams.nMinerConfirmationWindow * 3;\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n@@ -313,7 +313,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     nTime = nTimeout;\n     // FAILED is only triggered at the end of a period, so CBV should be setting\n     // the bit until the period transition.\n-    for (int i=0; i<2015; i++) {\n+    for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n         nHeight += 1;\n@@ -329,20 +329,20 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n \n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n-    lastBlock = secondChain.Mine(2016, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n-    lastBlock = secondChain.Mine(4032, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n-    lastBlock = secondChain.Mine(6047, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-    lastBlock = secondChain.Mine(6048, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n+    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses"
      }
    ]
  }
]