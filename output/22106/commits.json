[
  {
    "sha": "610151f5b076d4b1ab90c0dd2717e5410aba6b19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTAxNTFmNWIwNzZkNGIxYWI5MGMwZGQyNzE3ZTU0MTBhYmE2YjE5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-05-31T05:54:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-05-31T06:36:46Z"
      },
      "message": "validation: change ProcessNewBlock() to take a CBlock reference\n\nUpdate ProcessNewBlock arguments to newer style.",
      "tree": {
        "sha": "5371ddd462bd21154e545d178746f1879380de03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5371ddd462bd21154e545d178746f1879380de03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/610151f5b076d4b1ab90c0dd2717e5410aba6b19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmC0g/4ACgkQLuufXMCV\nJsHcpw//QwEGwTITGgkTSQ/WgPhIVvTEXhgE8/1B8eKiQECe84pq0NTooN0Sz1YG\nWbf0/u/6VvoOoColjy4i8PfxSCpMGL4WfLG/GpmDJjnZIUilv5s/IIqhLhvLODlK\n92bYZ7amjOlGE14pB0RSqBwrAb4iCQD7cvO9sDDO6yd4Ttnsj9FE+nPgPmkuM26P\n5Y2rJROT0qTtk2q24jMf0CJW2Jgxc7yiH0xJCIiaWISvDcCYCiPCAz6I873y7Cxv\nWJRcX7so+7LtuX+m4v4tFT3Lel9ghvmHTESfcbxZVas4HNf7HgG7cPiMRTq/ymId\nMhmJOGe1gsIvx3Ga+04g2FWJWUZpc6RvhmO8fCoRtGPNlg2w2Y3bFCqf4uLkw1x3\nPw3I6/vtP5FU55AqzfuNM9dThS0d16PqnSHCWuH1buTr8wrBW/TfBaPi55cqI4k8\nmoY8xrxuPI7DkbZDCV4GF+jXBd1Tj7JoFRfJz5BKPJuXXcmFX5wFVKTieWlGvecB\n+40gdlY+X+EYpceYSJHWoeM0I+3P/FMPdNQzN6javHlLq9QEJedH3CkCOVmjfdrB\n7iHkhgf6zB18mT1z43kNo2NKu39G0vaYFozjFAFxghqJXNJH6ZAZgqfnsaN2wU08\nNfbYsxZRQu4z6LfumVOMEqpTOXkN4ilI0avIHNigdHAQGj2jaaE=\n=wua2\n-----END PGP SIGNATURE-----",
        "payload": "tree 5371ddd462bd21154e545d178746f1879380de03\nparent d7a6bba94935a26e303e1c99eb2d4cb5f8f97f5b\nauthor fanquake <fanquake@gmail.com> 1622440498 +0800\ncommitter fanquake <fanquake@gmail.com> 1622443006 +0800\n\nvalidation: change ProcessNewBlock() to take a CBlock reference\n\nUpdate ProcessNewBlock arguments to newer style.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610151f5b076d4b1ab90c0dd2717e5410aba6b19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/610151f5b076d4b1ab90c0dd2717e5410aba6b19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610151f5b076d4b1ab90c0dd2717e5410aba6b19/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7a6bba94935a26e303e1c99eb2d4cb5f8f97f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7a6bba94935a26e303e1c99eb2d4cb5f8f97f5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7a6bba94935a26e303e1c99eb2d4cb5f8f97f5b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4c861599fd3b79806df3855649e036a437f4cb13",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610151f5b076d4b1ab90c0dd2717e5410aba6b19/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610151f5b076d4b1ab90c0dd2717e5410aba6b19/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=610151f5b076d4b1ab90c0dd2717e5410aba6b19",
        "patch": "@@ -3591,14 +3591,14 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n+bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block)\n {\n     AssertLockNotHeld(cs_main);\n     assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n-        if (fNewBlock) *fNewBlock = false;\n+        if (new_block) *new_block = false;\n         BlockValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n@@ -3607,21 +3607,21 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*block, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ActiveChainstate().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ActiveChainstate().AcceptBlock(block, state, chainparams, &pindex, force_processing, nullptr, new_block);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n+            GetMainSignals().BlockChecked(*block, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n     NotifyHeaderTip(ActiveChainstate());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActiveChainstate().ActivateBestChain(state, chainparams, pblock))\n+    if (!ActiveChainstate().ActivateBestChain(state, chainparams, block))\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n     return true;"
      },
      {
        "sha": "9c718b3d63ff7342598e6bad8ea3b6024a886acf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610151f5b076d4b1ab90c0dd2717e5410aba6b19/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610151f5b076d4b1ab90c0dd2717e5410aba6b19/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=610151f5b076d4b1ab90c0dd2717e5410aba6b19",
        "patch": "@@ -970,22 +970,21 @@ class ChainstateManager\n      * block is made active. Note that it does not, however, guarantee that the\n      * specific block passed to it has been checked for validity!\n      *\n-     * If you want to *possibly* get feedback on whether pblock is valid, you must\n+     * If you want to *possibly* get feedback on whether block is valid, you must\n      * install a CValidationInterface (see validationinterface.h) - this will have\n      * its BlockChecked method called whenever *any* block completes validation.\n      *\n-     * Note that we guarantee that either the proof-of-work is valid on pblock, or\n+     * Note that we guarantee that either the proof-of-work is valid on block, or\n      * (and possibly also) BlockChecked will have been called.\n      *\n-     * May not be called in a\n-     * validationinterface callback.\n+     * May not be called in a validationinterface callback.\n      *\n-     * @param[in]   pblock  The block we want to process.\n-     * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources.\n-     * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n+     * @param[in]   block The block we want to process.\n+     * @param[in]   force_processing Process this block even if unrequested; used for non-network block sources.\n+     * @param[out]  new_block A boolean which is set to indicate if the block was first received via this call\n      * @returns     If the block was processed, independently of block validity\n      */\n-    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block) LOCKS_EXCLUDED(cs_main);\n \n     /**\n      * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "e12f287498e5836bb5e32de5abaef02f3d20d868",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTJmMjg3NDk4ZTU4MzZiYjVlMzJkZTVhYmFlZjAyZjNkMjBkODY4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-05-31T06:36:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-05-31T06:36:46Z"
      },
      "message": "net: cleanup newly added PeerManagerImpl::ProcessNewBlock\n\nAddresses some post-merge comments.",
      "tree": {
        "sha": "8aeab073e95c3501bbf9e737e81250d5fe2d93d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aeab073e95c3501bbf9e737e81250d5fe2d93d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12f287498e5836bb5e32de5abaef02f3d20d868",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmC0g/4ACgkQLuufXMCV\nJsHh4g/+IOlHXIuY4yYhpdiRVvIyKWRXf0r+zbTCTy9c1JkBJ+IJWMa5TvdyID1M\nveZLy697hPi0IeY3JXUmXN3N8wgiYi9lWzW6CaUOux5jKTKd8VSE5lPTmafPCzG+\nFHKJiFtzVEXcLvyPxfXtP9tF7/15Gy6vIB0T7EIPdfR2Xb56KNDXZ2/2/0dYqANu\neylOkqVCA67c3z9u3wKvw8akLD6RNcMLcuwP8fbxqL08rEsO3Sox4P1S2W4BAVVp\nW5lIHuRKpuK3cfeVZPW/I3G/5tmwue8tc0c0/3uQFlPEvvqaxAAnVDs7U3LkKEUU\nX0KkjCDCndO9PLoNXcY6fam8CxB5yMdMRHWKYSjkx64xkXiV1n/VPQKgV0GgKCGy\n8PL75txNu66YPUFrchz5AxG8Ep/4xPQJpHiWjEAII6Jfy51dVcON3L7boChyxXEK\n68aiY/yZQv6FtlYWsIFzqB1SFJylmx/X9lW7p0EKG5Q/PkguNkTR08pvaFS77ikj\ndkH8K73HfRmcA6kyW1Ju+LB3xmkXs1KFfhGS5BqRx/HmUvMtsaJ6XZ+V4pDU4Hez\nAmxNs4foQO2D8TROBXeXXWbK+nynAjxjNI3LrgyAe8O76Pt7uS6Vie78aKLKFBYl\nPDZaGnmQDOwUrs1/LeFdQLAnI0zkMUIvJruYHJS1UD85agpoiC4=\n=ADKX\n-----END PGP SIGNATURE-----",
        "payload": "tree 8aeab073e95c3501bbf9e737e81250d5fe2d93d4\nparent 610151f5b076d4b1ab90c0dd2717e5410aba6b19\nauthor fanquake <fanquake@gmail.com> 1622443000 +0800\ncommitter fanquake <fanquake@gmail.com> 1622443006 +0800\n\nnet: cleanup newly added PeerManagerImpl::ProcessNewBlock\n\nAddresses some post-merge comments.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12f287498e5836bb5e32de5abaef02f3d20d868",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e12f287498e5836bb5e32de5abaef02f3d20d868",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12f287498e5836bb5e32de5abaef02f3d20d868/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610151f5b076d4b1ab90c0dd2717e5410aba6b19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610151f5b076d4b1ab90c0dd2717e5410aba6b19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610151f5b076d4b1ab90c0dd2717e5410aba6b19"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "65224b4259b2117de214febd8ee33bf10bf81105",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e12f287498e5836bb5e32de5abaef02f3d20d868/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e12f287498e5836bb5e32de5abaef02f3d20d868/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e12f287498e5836bb5e32de5abaef02f3d20d868",
        "patch": "@@ -491,7 +491,8 @@ class PeerManagerImpl final : public PeerManager\n \n     void ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(peer.m_getdata_requests_mutex) LOCKS_EXCLUDED(::cs_main);\n \n-    void ProcessBlock(CNode& pfrom, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing);\n+    /** Process a new block. Perform any post-processing housekeeping */\n+    void ProcessBlock(CNode& node, const std::shared_ptr<const CBlock>& block, bool force_processing);\n \n     /** Relay map (txid or wtxid -> CTransactionRef) */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n@@ -2384,15 +2385,15 @@ void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv)\n     m_connman.PushMessage(&peer, std::move(msg));\n }\n \n-void PeerManagerImpl::ProcessBlock(CNode& pfrom, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing)\n+void PeerManagerImpl::ProcessBlock(CNode& node, const std::shared_ptr<const CBlock>& block, bool force_processing)\n {\n-    bool fNewBlock = false;\n-    m_chainman.ProcessNewBlock(m_chainparams, pblock, fForceProcessing, &fNewBlock);\n-    if (fNewBlock) {\n-        pfrom.nLastBlockTime = GetTime();\n+    bool new_block{false};\n+    m_chainman.ProcessNewBlock(m_chainparams, block, force_processing, &new_block);\n+    if (new_block) {\n+        node.nLastBlockTime = GetTime();\n     } else {\n         LOCK(cs_main);\n-        mapBlockSource.erase(pblock->GetHash());\n+        mapBlockSource.erase(block->GetHash());\n     }\n }\n \n@@ -3475,7 +3476,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 LOCK(cs_main);\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom.GetId(), false));\n             }\n-            // Setting fForceProcessing to true means that we bypass some of\n+            // Setting force_processing to true means that we bypass some of\n             // our anti-DoS protections in AcceptBlock, which filters\n             // unrequested blocks that might be trying to waste our resources\n             // (eg disk space). Because we only try to reconstruct blocks when\n@@ -3484,7 +3485,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessBlock(pfrom, pblock, /*fForceProcessing=*/true);\n+            ProcessBlock(pfrom, pblock, /*force_processing=*/true);\n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n                 // Clear download state for this block, which is in\n@@ -3567,7 +3568,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessBlock(pfrom, pblock, /*fForceProcessing=*/true);\n+            ProcessBlock(pfrom, pblock, /*force_processing=*/true);\n         }\n         return;\n     }"
      }
    ]
  }
]