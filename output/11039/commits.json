[
  {
    "sha": "8f2f1e0458d263dc9b51caad0adc0246e3580114",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjJmMWUwNDU4ZDI2M2RjOWI1MWNhYWQwYWRjMDI0NmUzNTgwMTE0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-08-13T14:04:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-08-14T22:06:06Z"
      },
      "message": "wallet: Avoid second mapWallet lookup",
      "tree": {
        "sha": "80ea20ea2e2de84259af0d6486dae3084cb07e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80ea20ea2e2de84259af0d6486dae3084cb07e65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f2f1e0458d263dc9b51caad0adc0246e3580114",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2f1e0458d263dc9b51caad0adc0246e3580114",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f2f1e0458d263dc9b51caad0adc0246e3580114",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2f1e0458d263dc9b51caad0adc0246e3580114/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeb31756276034dd506fdf97c8aaade0e7e584f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb31756276034dd506fdf97c8aaade0e7e584f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb31756276034dd506fdf97c8aaade0e7e584f5"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 44,
      "deletions": 31
    },
    "files": [
      {
        "sha": "d29b5c92a834fb28af58ccbb3f721a82254c0805",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=8f2f1e0458d263dc9b51caad0adc0246e3580114",
        "patch": "@@ -577,10 +577,11 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n     LOCK2(cs_main, wallet->cs_wallet);\n     for (const COutPoint& outpoint : vOutpoints)\n     {\n-        if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n+        auto it = wallet->mapWallet.find(outpoint.hash);\n+        if (it == wallet->mapWallet.end()) continue;\n+        int nDepth = it->second.GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n+        COutput out(&it->second, outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n         vOutputs.push_back(out);\n     }\n }"
      },
      {
        "sha": "5e84597f04e734dacd7a00b2f4905ba0b0e64437",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=8f2f1e0458d263dc9b51caad0adc0246e3580114",
        "patch": "@@ -76,12 +76,12 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n     vErrors.clear();\n     bumpedTxid.SetNull();\n     AssertLockHeld(pWallet->cs_wallet);\n-    if (!pWallet->mapWallet.count(txid)) {\n+    auto it = pWallet->mapWallet.find(txid);\n+    if (it == pWallet->mapWallet.end()) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n         return;\n     }\n-    auto it = pWallet->mapWallet.find(txid);\n     const CWalletTx& wtx = it->second;\n \n     if (!preconditionChecks(pWallet, wtx)) {\n@@ -241,12 +241,13 @@ bool CFeeBumper::commit(CWallet *pWallet)\n     if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n         return false;\n     }\n-    if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n+    auto it = txid.IsNull() ? pWallet->mapWallet.end() : pWallet->mapWallet.find(txid);\n+    if (it == pWallet->mapWallet.end()) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::MISC_ERROR;\n         return false;\n     }\n-    CWalletTx& oldWtx = pWallet->mapWallet[txid];\n+    CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n     if (!preconditionChecks(pWallet, oldWtx)) {"
      },
      {
        "sha": "e04b6f7cab618d8e4591eec9c845ee8f0b82c659",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8f2f1e0458d263dc9b51caad0adc0246e3580114",
        "patch": "@@ -1874,10 +1874,11 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n         }\n         for (const CTransactionRef& tx : block.vtx) {\n-            if (pwallet->mapWallet.count(tx->GetHash()) > 0) {\n+            auto it = pwallet->mapWallet.find(tx->GetHash());\n+            if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, pwallet->mapWallet[tx->GetHash()], \"*\", -100000000, true, removed, filter);\n+                ListTransactions(pwallet, it->second, \"*\", -100000000, true, removed, filter);\n             }\n         }\n         paltindex = paltindex->pprev;\n@@ -1957,10 +1958,11 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n-    if (!pwallet->mapWallet.count(hash)) {\n+    auto it = pwallet->mapWallet.find(hash);\n+    if (it == pwallet->mapWallet.end()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     }\n-    const CWalletTx& wtx = pwallet->mapWallet[hash];\n+    const CWalletTx& wtx = it->second;\n \n     CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);"
      },
      {
        "sha": "d839c9a821f73a577cc4049567b98e439032cadb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 20,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2f1e0458d263dc9b51caad0adc0246e3580114/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8f2f1e0458d263dc9b51caad0adc0246e3580114",
        "patch": "@@ -590,8 +590,9 @@ void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n \n void CWallet::AddToSpends(const uint256& wtxid)\n {\n-    assert(mapWallet.count(wtxid));\n-    CWalletTx& thisTx = mapWallet[wtxid];\n+    auto it = mapWallet.find(wtxid);\n+    assert(it != mapWallet.end());\n+    CWalletTx& thisTx = it->second;\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n@@ -974,8 +975,9 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n     AddToSpends(hash);\n     for (const CTxIn& txin : wtx.tx->vin) {\n-        if (mapWallet.count(txin.prevout.hash)) {\n-            CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+        auto it = mapWallet.find(txin.prevout.hash);\n+        if (it != mapWallet.end()) {\n+            CWalletTx& prevtx = it->second;\n             if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n                 MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n             }\n@@ -1050,8 +1052,9 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     std::set<uint256> done;\n \n     // Can't mark abandoned if confirmed or in mempool\n-    assert(mapWallet.count(hashTx));\n-    CWalletTx& origtx = mapWallet[hashTx];\n+    auto it = mapWallet.find(hashTx);\n+    assert(it != mapWallet.end());\n+    CWalletTx& origtx = it->second;\n     if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n         return false;\n     }\n@@ -1062,8 +1065,9 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n         uint256 now = *todo.begin();\n         todo.erase(now);\n         done.insert(now);\n-        assert(mapWallet.count(now));\n-        CWalletTx& wtx = mapWallet[now];\n+        auto it = mapWallet.find(now);\n+        assert(it != mapWallet.end());\n+        CWalletTx& wtx = it->second;\n         int currentconfirm = wtx.GetDepthInMainChain();\n         // If the orig tx was not in block, none of its spends can be\n         assert(currentconfirm <= 0);\n@@ -1088,8 +1092,10 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             // available of the outputs it spends. So force those to be recomputed\n             for (const CTxIn& txin : wtx.tx->vin)\n             {\n-                if (mapWallet.count(txin.prevout.hash))\n-                    mapWallet[txin.prevout.hash].MarkDirty();\n+                auto it = mapWallet.find(txin.prevout.hash);\n+                if (it != mapWallet.end()) {\n+                    it->second.MarkDirty();\n+                }\n             }\n         }\n     }\n@@ -1127,8 +1133,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n         uint256 now = *todo.begin();\n         todo.erase(now);\n         done.insert(now);\n-        assert(mapWallet.count(now));\n-        CWalletTx& wtx = mapWallet[now];\n+        auto it = mapWallet.find(now);\n+        assert(it != mapWallet.end());\n+        CWalletTx& wtx = it->second;\n         int currentconfirm = wtx.GetDepthInMainChain();\n         if (conflictconfirms < currentconfirm) {\n             // Block is 'more conflicted' than current confirm; update.\n@@ -1147,10 +1154,11 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            for (const CTxIn& txin : wtx.tx->vin)\n-            {\n-                if (mapWallet.count(txin.prevout.hash))\n-                    mapWallet[txin.prevout.hash].MarkDirty();\n+            for (const CTxIn& txin : wtx.tx->vin) {\n+                auto it = mapWallet.find(txin.prevout.hash);\n+                if (it != mapWallet.end()) {\n+                    it->second.MarkDirty();\n+                }\n             }\n         }\n     }\n@@ -1165,10 +1173,11 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     // If a transaction changes 'conflicted' state, that changes the balance\n     // available of the outputs it spends. So force those to be\n     // recomputed, also:\n-    for (const CTxIn& txin : tx.vin)\n-    {\n-        if (mapWallet.count(txin.prevout.hash))\n-            mapWallet[txin.prevout.hash].MarkDirty();\n+    for (const CTxIn& txin : tx.vin) {\n+        auto it = mapWallet.find(txin.prevout.hash);\n+        if (it != mapWallet.end()) {\n+            it->second.MarkDirty();\n+        }\n     }\n }\n "
      }
    ]
  }
]