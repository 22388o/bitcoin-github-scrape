[
  {
    "sha": "af61d9f78bec62ff3688d88409a53df9ff5bc591",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjYxZDlmNzhiZWM2MmZmMzY4OGQ4ODQwOWE1M2RmOWZmNWJjNTkx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-23T16:20:16Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-10T05:11:10Z"
      },
      "message": "Add COutput::fSafe member for safe handling of unconfirmed outputs\n\nThis exposes a value computed in CWallet::AvailableCoins so it can used for\nother things, like inclusion in listunspent output.",
      "tree": {
        "sha": "4d808ec76cd86bbeaeab7473a6527b9d8aeacfaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d808ec76cd86bbeaeab7473a6527b9d8aeacfaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af61d9f78bec62ff3688d88409a53df9ff5bc591",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af61d9f78bec62ff3688d88409a53df9ff5bc591",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af61d9f78bec62ff3688d88409a53df9ff5bc591",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af61d9f78bec62ff3688d88409a53df9ff5bc591/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8910b4717e5bb946ee6988f7fe9fd461f53a5935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8910b4717e5bb946ee6988f7fe9fd461f53a5935",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8910b4717e5bb946ee6988f7fe9fd461f53a5935"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "06882f15143b21b2149174223447d568c3a45405",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "patch": "@@ -20,7 +20,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n     CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n \n     int nAge = 6 * 24;\n-    COutput output(wtx, nInput, nAge, true, true);\n+    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n }\n "
      },
      {
        "sha": "878b7d58aeffc76608624114cc2d4428baa7e48c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "patch": "@@ -580,7 +580,7 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true, true);\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n         vOutputs.push_back(out);\n     }\n }\n@@ -607,7 +607,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true, true);\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n         if (outpoint.n < out.tx->tx->vout.size() && wallet->IsMine(out.tx->tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n             vCoins.push_back(out);\n     }\n@@ -619,7 +619,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         while (wallet->IsChange(cout.tx->tx->vout[cout.i]) && cout.tx->tx->vin.size() > 0 && wallet->IsMine(cout.tx->tx->vin[0]))\n         {\n             if (!wallet->mapWallet.count(cout.tx->tx->vin[0].prevout.hash)) break;\n-            cout = COutput(&wallet->mapWallet[cout.tx->tx->vin[0].prevout.hash], cout.tx->tx->vin[0].prevout.n, 0, true, true);\n+            cout = COutput(&wallet->mapWallet[cout.tx->tx->vin[0].prevout.hash], cout.tx->tx->vin[0].prevout.n, 0 /* depth */, true /* spendable */, true /* solvable */, true /* safe */);\n         }\n \n         CTxDestination address;"
      },
      {
        "sha": "67e5e9022446759539e88b1e02bb02709ec7bd85",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "patch": "@@ -54,7 +54,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx.get(), nInput, nAge, true, true);\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "9e3c8be3f28696725c49ee958e3366c2d0629274",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "patch": "@@ -1946,7 +1946,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n+void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n {\n     vCoins.clear();\n \n@@ -1960,9 +1960,6 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n             if (!CheckFinalTx(*pcoin))\n                 continue;\n \n-            if (fOnlyConfirmed && !pcoin->IsTrusted())\n-                continue;\n-\n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n                 continue;\n \n@@ -1975,6 +1972,8 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            bool safeTx = pcoin->IsTrusted();\n+\n             // We should not consider coins from transactions that are replacing\n             // other transactions.\n             //\n@@ -1990,8 +1989,8 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n             // be a 1-block reorg away from the chain where transactions A and C\n             // were accepted to another chain where B, B', and C were all\n             // accepted.\n-            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaces_txid\")) {\n-                continue;\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+                safeTx = false;\n             }\n \n             // Similarly, we should not consider coins from transactions that\n@@ -2002,7 +2001,11 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n             // intending to replace A', but potentially resulting in a scenario\n             // where A, A', and D could all be accepted (instead of just B and\n             // D, or just A and A' like the user would want).\n-            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+                safeTx = false;\n+            }\n+\n+            if (fOnlySafe && !safeTx) {\n                 continue;\n             }\n \n@@ -2014,7 +2017,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n                         vCoins.push_back(COutput(pcoin, i, nDepth,\n                                                  ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n                                                   (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO),\n-                                                 (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO));\n+                                                 (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO, safeTx));\n             }\n         }\n     }"
      },
      {
        "sha": "80201e8ce0106b96b7bf8fb2260d4b9b7e7ffd65",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af61d9f78bec62ff3688d88409a53df9ff5bc591/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "patch": "@@ -466,12 +466,23 @@ class COutput\n     const CWalletTx *tx;\n     int i;\n     int nDepth;\n+\n+    /** Whether we have the private keys to spend this output */\n     bool fSpendable;\n+\n+    /** Whether we know how to spend this output, ignoring the lack of keys */\n     bool fSolvable;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn)\n+    /**\n+     * Whether this output is considered safe to spend. Unconfirmed transactions\n+     * from outside keys and unconfirmed replacement transactions are considered\n+     * unsafe and will not be used to fund new spending transactions.\n+     */\n+    bool fSafe;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn;\n     }\n \n     std::string ToString() const;\n@@ -740,7 +751,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n \n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding"
      }
    ]
  },
  {
    "sha": "dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2YyMTEyZGU2ZWM1YTdhNWU5NzA3NmQxY2U4MjZlYjIzM2ExMDQy",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-02-23T05:58:31Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-10T05:11:10Z"
      },
      "message": "Add safe flag to listunspent result",
      "tree": {
        "sha": "1c09808546a37b22058534fa9e7bb1b3f5c64b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c09808546a37b22058534fa9e7bb1b3f5c64b94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcf2112de6ec5a7a5e97076d1ce826eb233a1042/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af61d9f78bec62ff3688d88409a53df9ff5bc591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af61d9f78bec62ff3688d88409a53df9ff5bc591"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "68d14093cebfa4bde350fcaaa571699e77fe68fc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf2112de6ec5a7a5e97076d1ce826eb233a1042/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf2112de6ec5a7a5e97076d1ce826eb233a1042/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
        "patch": "@@ -126,7 +126,11 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx2 will build off txid_1, still not opting in to RBF.\n+        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_1)\n+        assert_equal(utxo_to_use[\"safe\"], True)\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n+        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n+        assert_equal(utxo_to_use[\"safe\"], False)\n \n         # Create tx2 using createrawtransaction\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]"
      },
      {
        "sha": "84e7eb60d70d9fae3bdaae7f04f9f08fecaf2052",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf2112de6ec5a7a5e97076d1ce826eb233a1042/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf2112de6ec5a7a5e97076d1ce826eb233a1042/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dcf2112de6ec5a7a5e97076d1ce826eb233a1042",
        "patch": "@@ -2506,9 +2506,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      ,...\\n\"\n             \"    ]\\n\"\n             \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n-            \"                  because they come from unconfirmed untrusted transactions or unconfirmed\\n\"\n-            \"                  replacement transactions (cases where we are less sure that a conflicting\\n\"\n-            \"                  transaction won't be mined).\\n\"\n+            \"                  See description of \\\"safe\\\" attribute below.\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -2521,7 +2519,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n-            \"    \\\"solvable\\\" : xxx          (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+            \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n+            \"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n@@ -2606,6 +2607,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n         entry.push_back(Pair(\"confirmations\", out.nDepth));\n         entry.push_back(Pair(\"spendable\", out.fSpendable));\n         entry.push_back(Pair(\"solvable\", out.fSolvable));\n+        entry.push_back(Pair(\"safe\", out.fSafe));\n         results.push_back(entry);\n     }\n "
      }
    ]
  }
]