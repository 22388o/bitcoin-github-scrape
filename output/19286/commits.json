[
  {
    "sha": "67bb7be864f38ef5afc731aa427146cb2af500dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2JiN2JlODY0ZjM4ZWY1YWZjNzMxYWE0MjcxNDZjYjJhZjUwMGRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-15T17:20:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-15T18:14:50Z"
      },
      "message": "tests: Add fuzzing harness for CHash{160,256}, C{HMAC_,}SHA{1,256,512}, CRIPEMD160, CSipHasher, etc.",
      "tree": {
        "sha": "bcd2ad66288998e261986f15aa27481f988ddb83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcd2ad66288998e261986f15aa27481f988ddb83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67bb7be864f38ef5afc731aa427146cb2af500dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67bb7be864f38ef5afc731aa427146cb2af500dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67bb7be864f38ef5afc731aa427146cb2af500dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67bb7be864f38ef5afc731aa427146cb2af500dd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c86ed41483471929840eec09b93d7de3a4aeacf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c86ed41483471929840eec09b93d7de3a4aeacf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c86ed41483471929840eec09b93d7de3a4aeacf"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 131,
      "deletions": 0
    },
    "files": [
      {
        "sha": "472382c7d252f4ca162e4dd5a9ad3a07e7a4864e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67bb7be864f38ef5afc731aa427146cb2af500dd/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67bb7be864f38ef5afc731aa427146cb2af500dd/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=67bb7be864f38ef5afc731aa427146cb2af500dd",
        "patch": "@@ -32,6 +32,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n   test/fuzz/coins_view \\\n+  test/fuzz/crypto \\\n   test/fuzz/crypto_common \\\n   test/fuzz/cuckoocache \\\n   test/fuzz/decode_tx \\\n@@ -479,6 +480,12 @@ test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_view_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n \n+test_fuzz_crypto_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_crypto_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_crypto_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_crypto_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_crypto_SOURCES = test/fuzz/crypto.cpp\n+\n test_fuzz_crypto_common_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_crypto_common_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_crypto_common_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "595cdf9abb6853178868b73ad7e7300f253b47fb",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67bb7be864f38ef5afc731aa427146cb2af500dd/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67bb7be864f38ef5afc731aa427146cb2af500dd/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=67bb7be864f38ef5afc731aa427146cb2af500dd",
        "patch": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/hmac_sha256.h>\n+#include <crypto/hmac_sha512.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha1.h>\n+#include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n+#include <hash.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<uint8_t> data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    if (data.empty()) {\n+        data.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    CHash160 hash160;\n+    CHash256 hash256;\n+    CHMAC_SHA256 hmac_sha256{data.data(), data.size()};\n+    CHMAC_SHA512 hmac_sha512{data.data(), data.size()};\n+    CRIPEMD160 ripemd160;\n+    CSHA1 sha1;\n+    CSHA256 sha256;\n+    CSHA512 sha512;\n+    CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 2)) {\n+        case 0: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+                if (data.empty()) {\n+                    data.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+                }\n+            }\n+\n+            (void)hash160.Write(data.data(), data.size());\n+            (void)hash256.Write(data.data(), data.size());\n+            (void)hmac_sha256.Write(data.data(), data.size());\n+            (void)hmac_sha512.Write(data.data(), data.size());\n+            (void)ripemd160.Write(data.data(), data.size());\n+            (void)sha1.Write(data.data(), data.size());\n+            (void)sha256.Write(data.data(), data.size());\n+            (void)sha512.Write(data.data(), data.size());\n+            (void)sip_hasher.Write(data.data(), data.size());\n+\n+            (void)Hash(data.begin(), data.end());\n+            (void)Hash160(data);\n+            (void)Hash160(data.begin(), data.end());\n+            (void)sha512.Size();\n+            break;\n+        }\n+        case 1: {\n+            (void)hash160.Reset();\n+            (void)hash256.Reset();\n+            (void)ripemd160.Reset();\n+            (void)sha1.Reset();\n+            (void)sha256.Reset();\n+            (void)sha512.Reset();\n+            break;\n+        }\n+        case 2: {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 8)) {\n+            case 0: {\n+                data.resize(CHash160::OUTPUT_SIZE);\n+                hash160.Finalize(data.data());\n+                break;\n+            }\n+            case 1: {\n+                data.resize(CHash256::OUTPUT_SIZE);\n+                hash256.Finalize(data.data());\n+                break;\n+            }\n+            case 2: {\n+                data.resize(CHMAC_SHA256::OUTPUT_SIZE);\n+                hmac_sha256.Finalize(data.data());\n+                break;\n+            }\n+            case 3: {\n+                data.resize(CHMAC_SHA512::OUTPUT_SIZE);\n+                hmac_sha512.Finalize(data.data());\n+                break;\n+            }\n+            case 4: {\n+                data.resize(CRIPEMD160::OUTPUT_SIZE);\n+                ripemd160.Finalize(data.data());\n+                break;\n+            }\n+            case 5: {\n+                data.resize(CSHA1::OUTPUT_SIZE);\n+                sha1.Finalize(data.data());\n+                break;\n+            }\n+            case 6: {\n+                data.resize(CSHA256::OUTPUT_SIZE);\n+                sha256.Finalize(data.data());\n+                break;\n+            }\n+            case 7: {\n+                data.resize(CSHA512::OUTPUT_SIZE);\n+                sha512.Finalize(data.data());\n+                break;\n+            }\n+            case 8: {\n+                data.resize(1);\n+                data[0] = sip_hasher.Finalize() % 256;\n+                break;\n+            }\n+            }\n+            break;\n+        }\n+        }\n+    }\n+}"
      }
    ]
  }
]