sipa,2014-11-12T20:41:04Z,"Would it be possible to use the `dumpwallet` RPC output instead, it's much easier to parse and likely to remain usable in more software longer. On the downside, it's not natively encrypted.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62789467,62789467,
jonasschnelli,2014-11-12T20:51:11Z,"@sipa hmm... it would be more open to other wallets. correct. On the other hand; how easy would it be for endusers to restore a backup? I think there is no easy way to import a RPC dumped wallet.\nIMO, endusers should just have <n> valid file(s) where they can restore. But a reasonable question is, how users could load a bitcoin-core wallet into other wallet-apps. But this might be out of scope fo",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62791001,62791001,
sipa,2014-11-12T20:54:00Z,"Yes there is a way to import it, using `importwallet`.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62791452,62791452,
jonasschnelli,2014-11-12T21:01:41Z,@sipa: ah. right. Somebody should update https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list :)\nBut the enduser then could not just restore the wallet.dat file... or we could detect if the wallet.dat is RPC dumped file and import it straight.\nI would prefer to have a restore possibility on file level.\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62792680,62792680,
sipa,2014-11-12T21:04:27Z,"@jonasschnelli the GUI has no way to restore a backup at all - whether it's done using backupwallet or dumpwallet. That definitely needs fixing, but I would really advise against using the BDB-based format for anything but legacy.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62793121,62793121,
jonasschnelli,2014-11-12T21:33:01Z,@sipa i just thought through the whole thing again. Your right. Restore per file won't work anyway without rescan everything.\nI'll change it to use RPC walletdumped format.\nEnduser with limited IT understanding should import it through the Qt client (where i will focus on as soon as the basic things are sorted out).\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62798248,62798248,
jonasschnelli,2014-11-13T07:28:10Z,"@sipa i only see a huge drawback when using the walletdumps-txt: encryption. Unencrypted wallet dumps is IMO very risky. Of course we could encrypt the dumps before the go to the filesystem. But this lead to the question what passphrase/key we use for encrypting the backups dumps. Maybe adding a ""backup-key"" to the wallet would be a overhead?\nAny ideas how we could solve that in a nice way?\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62851679,62851679,
laanwj,2014-11-13T09:52:23Z,"Good point about `dumpwallet` format not being encrypted. We should definitely support that. \n\nFor example Schildback's Bitcoin Wallet uses a format similar to our dumpwallet format, one line per key, but encrypts the file before writing. This can be decrypted from the command line using `openssl enc -d -aes-256-cbc -a -in` (see https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/REA",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62866550,62866550,
jonasschnelli,2014-11-13T15:34:31Z,"I think we should encrypt the dumps with a key derived from the same password the wallet is encrypted.\n\nAdditional to that, for experience users, we could allow to set a base64 encoded EC PubKey in the bitcoinconf. The dumps then could be encrypted aes-256-cbc creating a random key with EVP_Seal. The encrypted key length and data will be stored in the dump.\nWith that, experience users could do ",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62908118,62908118,
gmaxwell,2014-11-13T23:03:09Z,"Please don't introduce yet another encryption format in the system if it can all be avoided, analyizing and maintaining two is additional work I'd rather avoid.   The simpler thing is to just backup the existing files, then we're sure to get all the data, sure that it's already encrypted and not creating additional exposure, etc.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-62982835,62982835,
jonasschnelli,2014-11-14T07:53:08Z,@gmaxwell agreed. Than i keep the pull request as it is. For now we backup just the wallet.dat. Dumping is IMO not a backup because it lacks of metadata (dump != backup). A backup should be somehow a 1:1 copy.\nIf a user enables `-backupsdumps` AND `-backupsallowunencrypted` he can do unencrypted dumps as backups.\n\nBefore working on encrypted dumps as backup possibilities i would prefer to imple,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-63021148,63021148,
jonasschnelli,2014-11-14T13:08:28Z,"@Diapolo okay, did overhaul the code, added some comments, etc.\nYou might check it again.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-63062159,63062159,
jonasschnelli,2014-12-16T21:05:50Z,Any NACKs ACKs?\nI would like to extend this to the GUI.\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-67231788,67231788,
laanwj,2014-12-17T10:59:31Z,"@jonasschnelli Concept ACK, haven't looked at the code. I promise I will, but right now I cannot keep up with the number of pulls anymore.\n",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-67307021,67307021,
jonasschnelli,2015-03-05T08:07:35Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-77322533,77322533,
jonasschnelli,2015-03-12T13:11:36Z,rebased.\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-78476159,78476159,
jonasschnelli,2015-04-16T08:59:35Z,I'm no longer convinced that this PRs solution is going into the right direction. As example: what means a encrypted wallet? Why are metadata like labels and comments (which could harm privacy) not encrypted in a encrypted wallet?\nHow would this perform after there is support for Bip32?\n,https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-93683298,93683298,
gmaxwell,2015-04-16T12:09:17Z,"@jonasschnelli   Things other than private keys are not encrypted because otherwise the user is forced to enter their key at every startup or use, which is inconvenient and would punish users for using encryption and would leave their key more vulnerable to observation by malware or people around them. The entry of the key also becomes an important consent point: a user of an encrypted wallet can ",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-93718490,93718490,
jgarzik,2015-07-23T18:36:44Z,"Closing for this older PR.  It sounds like there is general agreement that something like this is a good direction, but it's doesn't seem to be coalescing into a specific solution that is liked.\n\nMy own criticism:   I don't think this low level functionality is needed at all for non-GUI daemon.  It can be implemented with a simple, external cron script that applies well to the local site.\n\nSug",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-124203383,124203383,
jonasschnelli,2015-07-23T18:41:35Z,"Agree with @jgarzik in general.\nWhat made me stop woking on this: as long as an ""encrypted wallet"" contains unencrypted sensitive data  (like transactions [unencrypted], labels [unencrypted] and wtx comments [unencrypted]) it is to risky to auto-backup a wallet.\nUsers might start to think they can store the backup in a insecure space (like dropbox, etc.) because they are assuming the backup is e",https://github.com/bitcoin/bitcoin/pull/5266#issuecomment-124206119,124206119,
Diapolo,2014-11-14T09:03:28Z,"By ""Bitcoin Core"" :)?\n",https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20348410,20348410,src/wallet.cpp
Diapolo,2014-11-14T09:04:56Z,"You were missing a few months here, so this will be my only nit for you ;). Can you please try to use alphabetical ordering for such includes (see e.g. most other files). This belongs to the top of the boost includes.\n",https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20348474,20348474,src/walletdb.cpp
Diapolo,2014-11-14T09:06:55Z,IMHO the default path could be set as the second parameter here and directly converted to a boost::path perhaps?\nThat could remove the if-else below.\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20348561,20348561,src/walletdb.cpp
Diapolo,2014-11-14T09:07:30Z,Nit: Some comments in the code would be nice.\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20348585,20348585,src/walletdb.cpp
Diapolo,2014-11-14T09:08:16Z,Is this return needed or will we reach the function end after the catch anyway?\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20348609,20348609,src/walletdb.cpp
jonasschnelli,2014-11-14T13:00:02Z,"hmm.. the `GetDataDir()` (which must be part of the default backup path) returns a `boost::filesystem::path` instance which is not compatible with `GetArg`'s default argument. Converting the GetDataDir into a std::string first would probably end up in the same ""mess"".\nOr do you see a other solution?\n",https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20357188,20357188,src/walletdb.cpp
jonasschnelli,2014-11-14T13:07:01Z,I would say it's needed. When calling `GetAvailableBackups` you then can expect a empty hash-map even when there was a error.\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20357442,20357442,src/walletdb.cpp
luke-jr,2014-11-14T13:10:11Z,"""absolute""\n",https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20357551,20357551,src/init.cpp
luke-jr,2014-11-14T13:10:37Z,So I need to specify two options to enable backups (assuming an unencrypted wallet)? Why?\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20357568,20357568,src/init.cpp
jonasschnelli,2014-11-14T13:20:10Z,I've started it very restrained. Maybe once the `-backup` feature could be enabled by default.\nI think enabling two options for making unencrypted backups is okay because it's somehow bad practice.\n,https://github.com/bitcoin/bitcoin/pull/5266#discussion_r20357899,20357899,src/init.cpp
