[
  {
    "sha": "1023f8662695f3048123922e1ccb488bc32bbd2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDIzZjg2NjI2OTVmMzA0ODEyMzkyMmUxY2NiNDg4YmMzMmJiZDJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-11-12T07:39:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-12T13:08:55Z"
      },
      "message": "[backups] Automatic backups basics\n\n- allow to do automatic backups (wallet.dat copy or dumps) when keypool gets refilled\n- by default backups are turned off\n- by default only encrypted wallets are allowed for backup\n- user can choose to backup dumps instead of the wallet.dat file",
      "tree": {
        "sha": "526e4d381c933c4e9d5adb155f836684bf9d4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/526e4d381c933c4e9d5adb155f836684bf9d4270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1023f8662695f3048123922e1ccb488bc32bbd2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1023f8662695f3048123922e1ccb488bc32bbd2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1023f8662695f3048123922e1ccb488bc32bbd2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1023f8662695f3048123922e1ccb488bc32bbd2d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 253,
      "deletions": 53
    },
    "files": [
      {
        "sha": "1d5d99746df77b96caa8f6018876c01c52930c0d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -412,6 +412,15 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n     strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n+#ifdef ENABLE_WALLET\n+    strUsage += HelpMessageGroup(_(\"Backup options:\"));\n+    strUsage += HelpMessageOpt(\"-backups\", strprintf(_(\"Enable auto creation of UNENCRYPTED backups (dumps) (default: %u)\"), DEFAULT_BACKUPS_ENABLED));\n+    strUsage += HelpMessageOpt(\"-backupsallowunencrypted\", strprintf(_(\"Allow backups of unencrypted wallets (default: %u)\"), DEFAULT_ALLOW_UNENCRYPTED_BACKUPS));\n+    strUsage += HelpMessageOpt(\"-backupspath=<dir> \", strprintf(_(\"Specify absolut path to backups directory (default: %s)\"), strprintf(\"<datadir>/%s\", DEFAULT_BACKUPS_DIR)));\n+    strUsage += HelpMessageOpt(\"-backupsmax=<n>\", strprintf(_(\"Set the number of maximal kept backups (default: %d)\"), DEFAULT_BACKUPS_MAX));\n+    strUsage += HelpMessageOpt(\"-backupsdumps=0|1\", strprintf(_(\"If set, walletdumps are created instead of a wallet.dat copy (default: %u)\"), DEFAULT_BACKUPS_DUMP));\n+#endif\n+    \n     if (mode == HMM_BITCOIN_QT)\n     {\n         strUsage += HelpMessageGroup(_(\"UI Options:\"));\n@@ -424,7 +433,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n     }\n-\n+    \n     return strUsage;\n }\n \n@@ -1219,6 +1228,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n             pwalletMain->SetBestChain(chainActive.GetLocator());\n         }\n+        \n+        // create a backup when no backup is yet created\n+        if(CWalletDB::GetAvailableBackups().size() == 0)\n+            CWalletDB::CreateNewBackup(*pwalletMain);\n \n         LogPrintf(\"%s\", strErrors.str());\n         LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);"
      },
      {
        "sha": "7ac059e49fd4c84f2107051cfaf8efbe63ad709e",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 52,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -26,10 +26,6 @@ using namespace std;\n \n void EnsureWalletIsUnlocked();\n \n-std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n-}\n-\n int64_t static DecodeDumpTime(const std::string &str) {\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     static const std::locale loc(std::locale::classic(),\n@@ -43,18 +39,6 @@ int64_t static DecodeDumpTime(const std::string &str) {\n     return (ptime - epoch).total_seconds();\n }\n \n-std::string static EncodeDumpString(const std::string &str) {\n-    std::stringstream ret;\n-    BOOST_FOREACH(unsigned char c, str) {\n-        if (c <= 32 || c >= 128 || c == '%') {\n-            ret << '%' << HexStr(&c, &c + 1);\n-        } else {\n-            ret << c;\n-        }\n-    }\n-    return ret.str();\n-}\n-\n std::string DecodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n@@ -368,42 +352,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n-    std::set<CKeyID> setKeyPool;\n-    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n-    pwalletMain->GetAllReserveKeys(setKeyPool);\n-\n-    // sort time/key pairs\n-    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n-    }\n-    mapKeyBirth.clear();\n-    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n-\n-    // produce output\n-    file << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n-    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n-    file << \"\\n\";\n-    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n-        const CKeyID &keyid = it->second;\n-        std::string strTime = EncodeDumpTime(it->first);\n-        std::string strAddr = CBitcoinAddress(keyid).ToString();\n-        CKey key;\n-        if (pwalletMain->GetKey(keyid, key)) {\n-            if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, EncodeDumpString(pwalletMain->mapAddressBook[keyid].name), strAddr);\n-            } else if (setKeyPool.count(keyid)) {\n-                file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n-            } else {\n-                file << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n-            }\n-        }\n-    }\n-    file << \"\\n\";\n-    file << \"# End of dump\\n\";\n+    pwalletMain->DumpToStream(file);\n+    \n     file.close();\n     return Value::null;\n }"
      },
      {
        "sha": "efbd0be6d5dd84e6131570f3bd454f5e026aa590",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -22,6 +22,22 @@\n \n using namespace std;\n \n+std::string static EncodeDumpTime(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+std::string static EncodeDumpString(const std::string &str) {\n+    std::stringstream ret;\n+    BOOST_FOREACH(unsigned char c, str) {\n+        if (c <= 32 || c >= 128 || c == '%') {\n+            ret << '%' << HexStr(&c, &c + 1);\n+        } else {\n+            ret << c;\n+        }\n+    }\n+    return ret.str();\n+}\n+\n /**\n  * Settings\n  */\n@@ -421,6 +437,8 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     if (IsCrypted())\n         return false;\n \n+    CWalletDB::CreateNewBackup(*this);\n+    \n     CKeyingMaterial vMasterKey;\n     RandAddSeedPerfmon();\n \n@@ -506,6 +524,8 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     }\n     NotifyStatusChanged(this);\n \n+    CWalletDB::CreateNewBackup(*this);\n+    \n     return true;\n }\n \n@@ -1979,6 +1999,7 @@ bool CWallet::NewKeyPool()\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n+    bool keysAdded = false;\n     {\n         LOCK(cs_wallet);\n \n@@ -2003,8 +2024,13 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n+            keysAdded = true;\n         }\n     }\n+    \n+    if(keysAdded)\n+        CWalletDB::CreateNewBackup(*this);\n+    \n     return true;\n }\n \n@@ -2461,6 +2487,48 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     return false;\n }\n \n+bool CWallet::DumpToStream(std::ostream& stream)\n+{\n+    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::set<CKeyID> setKeyPool;\n+    this->GetKeyBirthTimes(mapKeyBirth);\n+    this->GetAllReserveKeys(setKeyPool);\n+\n+    // sort time/key pairs\n+    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n+    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    }\n+    mapKeyBirth.clear();\n+    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+    // produce output\n+    stream << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n+    stream << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+    stream << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n+    stream << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+    stream << \"\\n\";\n+    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+        const CKeyID &keyid = it->second;\n+        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strAddr = CBitcoinAddress(keyid).ToString();\n+        CKey key;\n+        if (this->GetKey(keyid, key)) {\n+            if (this->mapAddressBook.count(keyid)) {\n+                stream << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, EncodeDumpString(this->mapAddressBook[keyid].name), strAddr);\n+            } else if (setKeyPool.count(keyid)) {\n+                stream << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+            } else {\n+                stream << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+            }\n+        }\n+    }\n+    stream << \"\\n\";\n+    stream << \"# End of dump\\n\";\n+    \n+    return true;\n+}\n+\n CKeyPool::CKeyPool()\n {\n     nTime = GetTime();"
      },
      {
        "sha": "067335f40bb9d941ddccb00e8f9cf333aa38f2f1",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -736,6 +736,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n+    //! dump wallet to a stream\n+    bool DumpToStream(std::ostream& stream);\n+    \n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n "
      },
      {
        "sha": "b9a1b36e1807abe4137a873fd7ac1d89c6db16ea",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -13,10 +13,14 @@\n #include \"utiltime.h\"\n #include \"wallet.h\"\n \n+#include <fstream>\n+\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n \n using namespace std;\n \n@@ -888,6 +892,157 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n     return false;\n }\n \n+std::map<std::time_t, filesystem::path> CWalletDB::GetAvailableBackups()\n+{\n+    filesystem::path backupDir;\n+    std::string strBackupsDir   = GetArg(\"-backupspath\", \"\");\n+    if(strBackupsDir != \"\")\n+        backupDir = boost::filesystem::path(strBackupsDir);\n+    else\n+    {\n+        backupDir = GetDataDir() / DEFAULT_BACKUPS_DIR;\n+    }\n+    \n+    std::map<std::time_t, filesystem::path> backupFiles;\n+    \n+    try {\n+        if(!filesystem::is_directory(backupDir))\n+            return backupFiles;\n+        \n+        filesystem::directory_iterator it(backupDir), eod;\n+        BOOST_FOREACH(filesystem::path const &p, std::make_pair(it, eod))\n+        {\n+            if(is_regular_file(p) && (ends_with(p.string(), BACKUP_BDB_EXTENSION) || ends_with(p.string(), BACKUP_DUMP_EXTENSION)))\n+                backupFiles.insert(std::pair<std::time_t, filesystem::path>(filesystem::last_write_time( p ), p));\n+        }\n+    }\n+    catch(const filesystem::filesystem_error &e) {\n+        LogPrintf(\"error retrieving available backups (%s)\\n\", e.what());\n+        return backupFiles;\n+    }\n+    \n+    return backupFiles;\n+}\n+\n+bool CWalletDB::CreateNewBackup(CWallet& wallet)\n+{\n+    bool useDumpsInstedOfBDBFiles = GetBoolArg(\"-backupsdumps\", DEFAULT_BACKUPS_DUMP);\n+    \n+    if(!GetBoolArg(\"-backups\", DEFAULT_BACKUPS_ENABLED))\n+        return false;\n+    \n+    if(!wallet.IsCrypted() && !GetBoolArg(\"-backupsallowunencrypted\", DEFAULT_ALLOW_UNENCRYPTED_BACKUPS))\n+        return false;\n+    \n+    if (!wallet.fFileBacked)\n+        return false;\n+    \n+    if(!GetBoolArg(\"-backupsallowunencrypted\", DEFAULT_ALLOW_UNENCRYPTED_BACKUPS) && useDumpsInstedOfBDBFiles)\n+    {\n+        LogPrintf(\"dumping wallet as backup is only allowed when enabling -backupsallowunencrypted\\n\");\n+        return false;\n+    }\n+    \n+    if(useDumpsInstedOfBDBFiles && wallet.IsLocked())\n+    {\n+        LogPrintf(\"cannot create backup: wallet is locked\\n\");\n+        return false;\n+    }\n+    \n+    while (true)\n+    {\n+        {\n+            LOCK(bitdb.cs_db);\n+            if (!bitdb.mapFileUseCount.count(wallet.strWalletFile) || bitdb.mapFileUseCount[wallet.strWalletFile] == 0) {\n+                // Flush log data to the dat file\n+                bitdb.CloseDb(wallet.strWalletFile);\n+                bitdb.CheckpointLSN(wallet.strWalletFile);\n+                bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n+                \n+                filesystem::path pathSrc    = GetDataDir() / wallet.strWalletFile;\n+                filesystem::path backupDir;\n+                std::string strBackupsDir   = GetArg(\"-backupspath\", \"\");\n+                if(strBackupsDir != \"\")\n+                    backupDir = boost::filesystem::path(strBackupsDir);\n+                else\n+                {\n+                    backupDir = GetDataDir() / DEFAULT_BACKUPS_DIR;\n+                }\n+                \n+                try {\n+                    TryCreateDirectory(backupDir);\n+                }\n+                catch(const filesystem::filesystem_error &e) {\n+                    LogPrintf(\"error creating backups directory %s - %s\\n\", backupDir.string(), e.what());\n+                    return false;\n+                }\n+                \n+                // delete backups over the set trashold\n+                int keepMaxBackups = GetArg(\"-backupsmax\", DEFAULT_BACKUPS_MAX);\n+                std::map<std::time_t, filesystem::path> backupFiles = GetAvailableBackups();\n+                int cnt  = 0;\n+                \n+                try {\n+                    for (std::map<std::time_t, filesystem::path>::reverse_iterator i = backupFiles.rbegin(); i != backupFiles.rend(); ++i) {\n+                        \n+                        // now we might end up having less then keepMaxBackups in dir because it could be possible that a wallet file gets overwritten when making a backup during the same second (=same filename)\n+                        if(cnt+1 >= keepMaxBackups)\n+                            filesystem::remove(i->second);\n+\n+                        cnt++;\n+                    }\n+                }\n+                catch(const filesystem::filesystem_error &e) {\n+                    LogPrintf(\"error removing old backups (%s)\\n\", e.what());\n+                    return false;\n+                }\n+                \n+                // copy or dump wallet\n+                \n+                if(useDumpsInstedOfBDBFiles) {\n+                    std::string newFilename = strprintf(\"%s.%s%s\", wallet.strWalletFile, DateTimeStrFormat(\"%Y-%m-%d_%H-%M-%S\", GetTime()), BACKUP_DUMP_EXTENSION);\n+                    replace_last(newFilename, \".dat\", \"\");\n+                    filesystem::path pathDest = backupDir / newFilename;\n+                    try {\n+                        ofstream file;\n+                        file.open(pathDest.string().c_str());\n+                        if (!file.is_open()) {\n+                            LogPrintf(\"error opening wallet backup file to write %s\\n\", pathDest.string());\n+                            return false;\n+                        }\n+                        wallet.DumpToStream(file);\n+                        file.close();\n+                        \n+                        LogPrintf(\"backing up wallet as dump to %s\\n\", pathDest.string());\n+                        return true;\n+                    } catch(ifstream::failure e) {\n+                        LogPrintf(\"error dumping wallet to %s\\n\", pathDest.string());\n+                        return false;\n+                    }\n+                }\n+                else {\n+                    std::string newFilename = strprintf(\"%s.%s%s\", wallet.strWalletFile, DateTimeStrFormat(\"%Y-%m-%d_%H-%M-%S\", GetTime()), BACKUP_BDB_EXTENSION);\n+                    filesystem::path pathDest = backupDir / newFilename;\n+                    try {\n+#if BOOST_VERSION >= 104000\n+                        filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+#else\n+                        filesystem::copy_file(pathSrc, pathDest);\n+#endif\n+                        LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n+                        return true;\n+                    } catch(const filesystem::filesystem_error &e) {\n+                        LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+        MilliSleep(100);\n+    }\n+    return false;\n+}\n+\n //\n // Try to (very carefully!) recover wallet.dat if there is a problem.\n //"
      },
      {
        "sha": "2e960da45b11d37c90d0c4a5621c2426ef33f626",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1023f8662695f3048123922e1ccb488bc32bbd2d/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1023f8662695f3048123922e1ccb488bc32bbd2d/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=1023f8662695f3048123922e1ccb488bc32bbd2d",
        "patch": "@@ -17,6 +17,15 @@\n #include <utility>\n #include <vector>\n \n+//\n+static const std::string    DEFAULT_BACKUPS_DIR                 = \"backups\";\n+static const std::string    BACKUP_BDB_EXTENSION                = \".bak\";\n+static const std::string    BACKUP_DUMP_EXTENSION               = \".dump\";\n+static const int            DEFAULT_BACKUPS_MAX                 = 10;\n+static const bool           DEFAULT_BACKUPS_ENABLED             = false;\n+static const bool           DEFAULT_ALLOW_UNENCRYPTED_BACKUPS   = false;\n+static const bool           DEFAULT_BACKUPS_DUMP                = false;\n+\n class CAccount;\n class CAccountingEntry;\n struct CBlockLocator;\n@@ -129,6 +138,8 @@ class CWalletDB : public CDB\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n+    static bool CreateNewBackup(CWallet& wallet);\n+    static std::map<std::time_t, boost::filesystem::path> GetAvailableBackups();\n \n private:\n     CWalletDB(const CWalletDB&);"
      }
    ]
  },
  {
    "sha": "c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWQ1ZTQwYzE5YzBmYmY1YmNjZmRhMTEyNWJlZGI1MTk3YjY5MjJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-11-14T13:07:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-12T13:09:34Z"
      },
      "message": "[backups] some code cleaning and comments",
      "tree": {
        "sha": "14a513fbeacc00389949fe939afe4c62fb82a54a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14a513fbeacc00389949fe939afe4c62fb82a54a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1023f8662695f3048123922e1ccb488bc32bbd2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1023f8662695f3048123922e1ccb488bc32bbd2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1023f8662695f3048123922e1ccb488bc32bbd2d"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 40,
      "deletions": 27
    },
    "files": [
      {
        "sha": "66bd1d4de7917a7fadb345cef3cd297a8015bcd9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
        "patch": "@@ -2503,7 +2503,7 @@ bool CWallet::DumpToStream(std::ostream& stream)\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n \n     // produce output\n-    stream << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n+    stream << strprintf(\"# Wallet dump created by Bitcoin Core %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n     stream << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n     stream << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n     stream << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));"
      },
      {
        "sha": "af9da6fe5536c807f115ac46190ca0e41fd4e1d0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 25,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
        "patch": "@@ -15,12 +15,12 @@\n \n #include <fstream>\n \n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n-#include <boost/algorithm/string.hpp>\n-#include <boost/algorithm/string/predicate.hpp>\n \n using namespace std;\n \n@@ -892,9 +892,9 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n     return false;\n }\n \n-std::map<std::time_t, filesystem::path> CWalletDB::GetAvailableBackups()\n+std::map<std::time_t, boost::filesystem::path> CWalletDB::GetAvailableBackups()\n {\n-    filesystem::path backupDir;\n+    boost::filesystem::path backupDir;\n     std::string strBackupsDir   = GetArg(\"-backupspath\", \"\");\n     if(strBackupsDir != \"\")\n         backupDir = boost::filesystem::path(strBackupsDir);\n@@ -903,20 +903,22 @@ std::map<std::time_t, filesystem::path> CWalletDB::GetAvailableBackups()\n         backupDir = GetDataDir() / DEFAULT_BACKUPS_DIR;\n     }\n     \n-    std::map<std::time_t, filesystem::path> backupFiles;\n-    \n+    // now search after available backups\n+    std::map<std::time_t, boost::filesystem::path> backupFiles;\n     try {\n-        if(!filesystem::is_directory(backupDir))\n+        if(!boost::filesystem::is_directory(backupDir))\n             return backupFiles;\n         \n-        filesystem::directory_iterator it(backupDir), eod;\n-        BOOST_FOREACH(filesystem::path const &p, std::make_pair(it, eod))\n+        boost::filesystem::directory_iterator it(backupDir), eod;\n+        BOOST_FOREACH(boost::filesystem::path const &p, std::make_pair(it, eod))\n         {\n-            if(is_regular_file(p) && (ends_with(p.string(), BACKUP_BDB_EXTENSION) || ends_with(p.string(), BACKUP_DUMP_EXTENSION)))\n-                backupFiles.insert(std::pair<std::time_t, filesystem::path>(filesystem::last_write_time( p ), p));\n+            // only add a file to the backup-hashlist when they match a possible file extension\n+            if(is_regular_file(p) && (boost::ends_with(p.string(), BACKUP_BDB_EXTENSION) || boost::ends_with(p.string(), BACKUP_DUMP_EXTENSION)))\n+                backupFiles.insert(std::pair<std::time_t, boost::filesystem::path>(boost::filesystem::last_write_time( p ), p));\n         }\n     }\n-    catch(const filesystem::filesystem_error &e) {\n+    catch(const boost::filesystem::filesystem_error &e) {\n+        // in case of a invalid backup path\n         LogPrintf(\"error retrieving available backups (%s)\\n\", e.what());\n         return backupFiles;\n     }\n@@ -926,23 +928,27 @@ std::map<std::time_t, filesystem::path> CWalletDB::GetAvailableBackups()\n \n bool CWalletDB::CreateNewBackup(CWallet& wallet)\n {\n+    // check for the possibility if the users whishes dumps instead of wallet.dat copies\n     bool useDumpsInstedOfBDBFiles = GetBoolArg(\"-backupsdumps\", DEFAULT_BACKUPS_DUMP);\n     \n     if(!GetBoolArg(\"-backups\", DEFAULT_BACKUPS_ENABLED))\n         return false;\n     \n+    // don't allow backups of unencrypted wallet when -backupsallowunencrypted is not set\n     if(!wallet.IsCrypted() && !GetBoolArg(\"-backupsallowunencrypted\", DEFAULT_ALLOW_UNENCRYPTED_BACKUPS))\n         return false;\n     \n     if (!wallet.fFileBacked)\n         return false;\n     \n+    // dumps are not allowed when -backupsallowunencrypted is unset\n     if(!GetBoolArg(\"-backupsallowunencrypted\", DEFAULT_ALLOW_UNENCRYPTED_BACKUPS) && useDumpsInstedOfBDBFiles)\n     {\n         LogPrintf(\"dumping wallet as backup is only allowed when enabling -backupsallowunencrypted\\n\");\n         return false;\n     }\n     \n+    // locked wallets result in empty dumps, avoid that:\n     if(useDumpsInstedOfBDBFiles && wallet.IsLocked())\n     {\n         LogPrintf(\"cannot create backup: wallet is locked\\n\");\n@@ -959,8 +965,8 @@ bool CWalletDB::CreateNewBackup(CWallet& wallet)\n                 bitdb.CheckpointLSN(wallet.strWalletFile);\n                 bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n                 \n-                filesystem::path pathSrc    = GetDataDir() / wallet.strWalletFile;\n-                filesystem::path backupDir;\n+                boost::filesystem::path pathSrc    = GetDataDir() / wallet.strWalletFile;\n+                boost::filesystem::path backupDir;\n                 std::string strBackupsDir   = GetArg(\"-backupspath\", \"\");\n                 if(strBackupsDir != \"\")\n                     backupDir = boost::filesystem::path(strBackupsDir);\n@@ -969,30 +975,31 @@ bool CWalletDB::CreateNewBackup(CWallet& wallet)\n                     backupDir = GetDataDir() / DEFAULT_BACKUPS_DIR;\n                 }\n                 \n+                // try to create the backupdir\n                 try {\n                     TryCreateDirectory(backupDir);\n                 }\n-                catch(const filesystem::filesystem_error &e) {\n+                catch(const boost::filesystem::filesystem_error &e) {\n                     LogPrintf(\"error creating backups directory %s - %s\\n\", backupDir.string(), e.what());\n                     return false;\n                 }\n                 \n                 // delete backups over the set trashold\n                 int keepMaxBackups = GetArg(\"-backupsmax\", DEFAULT_BACKUPS_MAX);\n-                std::map<std::time_t, filesystem::path> backupFiles = GetAvailableBackups();\n+                std::map<std::time_t, boost::filesystem::path> backupFiles = GetAvailableBackups();\n                 int cnt  = 0;\n                 \n                 try {\n-                    for (std::map<std::time_t, filesystem::path>::reverse_iterator i = backupFiles.rbegin(); i != backupFiles.rend(); ++i) {\n+                    for (std::map<std::time_t, boost::filesystem::path>::reverse_iterator i = backupFiles.rbegin(); i != backupFiles.rend(); ++i) {\n                         \n                         // now we might end up having less then keepMaxBackups in dir because it could be possible that a wallet file gets overwritten when making a backup during the same second (=same filename)\n                         if(cnt+1 >= keepMaxBackups)\n-                            filesystem::remove(i->second);\n+                            boost::filesystem::remove(i->second);\n \n                         cnt++;\n                     }\n                 }\n-                catch(const filesystem::filesystem_error &e) {\n+                catch(const boost::filesystem::filesystem_error &e) {\n                     LogPrintf(\"error removing old backups (%s)\\n\", e.what());\n                     return false;\n                 }\n@@ -1001,8 +1008,10 @@ bool CWalletDB::CreateNewBackup(CWallet& wallet)\n                 \n                 if(useDumpsInstedOfBDBFiles) {\n                     std::string newFilename = strprintf(\"%s.%s%s\", wallet.strWalletFile, DateTimeStrFormat(\"%Y-%m-%d_%H-%M-%S\", GetTime()), BACKUP_DUMP_EXTENSION);\n-                    replace_last(newFilename, \".dat\", \"\");\n-                    filesystem::path pathDest = backupDir / newFilename;\n+                    \n+                    // remove the unsexy .dat fileextension from the backup (because it's a dump!)\n+                    boost::replace_last(newFilename, \".dat\", \"\");\n+                    boost::filesystem::path pathDest = backupDir / newFilename;\n                     try {\n                         ofstream file;\n                         file.open(pathDest.string().c_str());\n@@ -1022,16 +1031,16 @@ bool CWalletDB::CreateNewBackup(CWallet& wallet)\n                 }\n                 else {\n                     std::string newFilename = strprintf(\"%s.%s%s\", wallet.strWalletFile, DateTimeStrFormat(\"%Y-%m-%d_%H-%M-%S\", GetTime()), BACKUP_BDB_EXTENSION);\n-                    filesystem::path pathDest = backupDir / newFilename;\n+                    boost::filesystem::path pathDest = backupDir / newFilename;\n                     try {\n #if BOOST_VERSION >= 104000\n-                        filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+                        boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n #else\n-                        filesystem::copy_file(pathSrc, pathDest);\n+                        boost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n                         LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n                         return true;\n-                    } catch(const filesystem::filesystem_error &e) {\n+                    } catch(const boost::filesystem::filesystem_error &e) {\n                         LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n                         return false;\n                     }"
      },
      {
        "sha": "9b33a0c1dd0247fa088d2d3b8652846b0105690f",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d5e40c19c0fbf5bccfda1125bedb5197b6922d/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=c5d5e40c19c0fbf5bccfda1125bedb5197b6922d",
        "patch": "@@ -17,7 +17,7 @@\n #include <utility>\n #include <vector>\n \n-//\n+// define default values for backups\n static const std::string    DEFAULT_BACKUPS_DIR                 = \"backups\";\n static const std::string    BACKUP_BDB_EXTENSION                = \".bak\";\n static const std::string    BACKUP_DUMP_EXTENSION               = \".dump\";\n@@ -138,7 +138,11 @@ class CWalletDB : public CDB\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n+    \n+    //! create a new backup or dump (configurable through args)\n     static bool CreateNewBackup(CWallet& wallet);\n+    \n+    //! resturn a list of available backups\n     static std::map<std::time_t, boost::filesystem::path> GetAvailableBackups();\n \n private:"
      }
    ]
  }
]