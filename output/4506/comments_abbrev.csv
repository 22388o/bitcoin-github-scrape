jtimon,2014-07-11T17:07:56Z,"I got some feedback on #4377 and other places, I'm closing since this is not acceptable for bitcoind and people have already seen it. I will reopen it with new version still uses a class but without polymorphism.\nFeedback is still welcomed.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48756802,48756802,
jtimon,2014-07-11T21:47:53Z,"It is not completely encapsulated because the attributes are public.\nNo polymorphism now. Less interesting for experimentation because there's no factory, but it should still be useful and in my opinion makes the POW code more clear.\nFor those who may want to see it, I left the polymorphic version here: https://github.com/jtimon/bitcoin/tree/old_proof \n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48786881,48786881,
jgarzik,2014-07-11T21:55:39Z,"In general cleaning things up is pretty nice, and POW class seems to do that.  Specific comments:\n- some places seem to get less clean, not more:\n\n```\n-            if (GenerateProof(pblock, pindexPrev))\n+            if (pblock->proof.GenerateProof(pblock, pindexPrev))\n```\n- The Hash(block header) code appears to be slower and more complex.  Not the right direction for such a speed-sensitive",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48787529,48787529,
jtimon,2014-07-11T22:07:29Z,"Updated removing a bunch of unnecessary #include ""pow.h""\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48788551,48788551,
jtimon,2014-07-11T22:51:30Z,"Updated CBlockHeader::GetHash() with @sipa 's suggestion, which removes the extra complexity concern. I haven't measured the performance hit, but I expect it to be small.\n@jgarzik I agree the call to GenerateProof is quite ugly, but nothing comes to mind to make it prettier...\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48792008,48792008,
sipa,2014-07-11T23:27:20Z,CBlockIndex could gain a CheckWork() method that just calls proof.CheckWork(GetBlockHash()).\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48794142,48794142,
jtimon,2014-07-14T20:32:35Z,"I created the CheckProof() method for CBlockHeader and CBlockIndex.\nI could have also added GenerateProof to CBlockHeader or CBlock, but the ugly call is only on miner.cpp (which could disappear in the future, who knows) so I don't think it's worth it. It doesn't feel like it belongs to a core library since it is only for the miner (which is only used for testing). \n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-48955479,48955479,
jtimon,2014-07-29T23:01:44Z,"Commits reordered so that the PR is easier to read (by creating the Proof class early on and then slowly encapsulating things).\nI left the proof generation part (mining) for later, so GetChallengeUint() method is needed for now SetSolutionUint()  is also used in miner.cpp, but that was already used miner_tests.cpp.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-50551396,50551396,
jtimon,2014-08-28T14:13:49Z,"I have left the last two commits with multiple small changes for later, after I know what's the most acceptable way to encapsulate the pow around miner. I will continue that discussion in #4423. But the ""final touches"" will depend on that, so there's no reason to include them before or stop this PR until that is resolved. Also the last commit was quite noisy.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-53725321,53725321,
jtimon,2014-08-28T18:29:53Z,"mhmm, I wonder if nBits and nNonce should be uint32_t instead of unsigned int... \n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-53773358,53773358,
sipa,2014-08-28T20:42:48Z,"Yes, I believe all integers being serialized anywhere should eventually be turned into (u)intN_t's, but let's do that separately. There may already have been some PR for (part of) that.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-53795161,53795161,
jtimon,2014-08-30T08:54:01Z,It needed rebase because #4180 was merged so I just changed unsigned int to unit32_t too.\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-53952973,53952973,
jtimon,2014-09-13T19:23:48Z,"Rebased.\nSince timedata was moved from core to server, I needed to decouple pow from timedata to be able to move pow from server to core.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-55503983,55503983,
sipa,2014-09-16T02:39:36Z,"Needs rebase.\n\nAlso, can you replace the error messages with the function name in them with `__func__`? \n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-55687930,55687930,
jtimon,2014-09-16T18:23:51Z,"Done, should I squash the `__func__` commit somewhere?\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-55789424,55789424,
laanwj,2014-09-25T09:36:34Z,"> Done, should I squash the **func** commit somewhere?\n\nIt's fine as a separate one.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-56795539,56795539,
jtimon,2014-09-29T22:22:11Z,Should I divide this further to make it easier to review?\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-57239809,57239809,
BitcoinPullTester,2014-09-29T22:35:03Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4506_e67e9f7d7651405f45e11df8416eaf9fe2101cff/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-57241121,57241121,
jtimon,2014-10-06T16:02:01Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-58040221,58040221,
gmaxwell,2014-10-07T00:20:27Z,"I like the changes, I did have a thought that maybe CProof is at slight risk of ambiguity (E.g. SPV proof vs block proof).\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-58120133,58120133,
sipa,2014-10-09T02:08:38Z,"I think CProof should be split in its core data structure (which can go in core, or be included by it), and validation functions that take a CProof and perform the various checks on them (which can be in server). Not doing that will for example result in libscript contain block PoW validation...\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-58454768,58454768,
jtimon,2014-10-15T03:29:59Z,"Having the class in core with only the serialization and using it with the functions is incompatible with making the fields private/protected, which is the final goal of this series of PRs.\nAfter thinking about this a lot there's doesn't seem to be any solution compatible with both goals that isn't ugly one way or another.\nI guess I should just keep moving functions here first and leave the clas",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-59153196,59153196,
jtimon,2014-10-15T03:35:29Z,"""Not doing that will for example result in libscript contain block PoW validation""\nNot necessarily, only if you want to put Transaction and BlockHeader in the same module, script doesn't need BlockHeader's at all.\nThere could be a xxx.o with only COutPoint, CTxIn, CTxOut and CTransaction, which is everything script/interpreter needs. \n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-59153515,59153515,
sipa,2014-10-15T03:38:42Z,"I'm fine with splitting core into a transaction and a block part, and that would indeed suffice for now, but it would still mean that anything that uses block headers will depend on its validation code to. I don't like it, but I can't immediately come up with an example of something that would use headers parsing, but not need the ability to verify proofs.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-59153674,59153674,
jtimon,2014-10-21T19:37:10Z,I reduced the scope of the PR again.\nNow it only creates a minimal CProof class independent from pow.o.\nIt's built on top of #5100 and #4793.\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-59985418,59985418,
jtimon,2014-10-27T15:43:52Z,Rebased on top of the latest #5100 and without depending on #4793 (if that get merged first I can update this with the older version).\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-60614699,60614699,
jtimon,2014-10-28T13:34:30Z,Rebased to make it more readable.\n,https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-60755227,60755227,
jtimon,2014-10-29T20:26:24Z,"Closing in favor of  #5171, without a class.\n",https://github.com/bitcoin/bitcoin/pull/4506#issuecomment-60998368,60998368,
sipa,2014-07-11T22:09:40Z,"Just use ""return SerializeHash(*this);"" here, and have its IMPLEMENT_SERIALIZE contain a ""READWRITE(proof);"".\n",https://github.com/bitcoin/bitcoin/pull/4506#discussion_r14846559,14846559,src/core.cpp
sipa,2014-07-11T23:24:02Z,Maybe GetWork() is a better name?\n,https://github.com/bitcoin/bitcoin/pull/4506#discussion_r14848743,14848743,src/pow.cpp
