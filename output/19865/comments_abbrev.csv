DrahtBot,2020-09-04 01:57:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19980 (refactor: Some wallet cleanups by promag)\n* #19979 (Use proper TSA attributes (attempt two) by hebasto)\n* #19970",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686854361,686854361,
ajtowns,2020-09-04 03:28:39,"-0.5 on concept, I don't think dropping the runtime checks has any advantage.\n\nFor approach, I think just doing `git grep -l AssertLockHeld src | grep -v 'sync.h$' | xargs sed -i '/^ *AssertLockHeld(.*);/d'` would be better. The current code has `AssertLockHeld` and `AssertLockNotHeld` behave in the same way (a runtime check that the mutex is held by this thread or not), which is worth preserv",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686879830,686879830,
hebasto,2020-09-04 08:02:28,"I agree with @ajtowns' [comment](https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483287210):\n> We have three types of assertions related for locking:\n> \n>  - marking a function as `EXCLUSIVE_LOCKS_REQUIRED` has a compile time check with clang that the caller has already obtained the lock\n> \n>  - declaring a `LockAssertion` instance overrides the clang compile time checks by say",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686986462,686986462,
ryanofsky,2020-09-04 14:46:57,"If a function definition is placed in a `*.cpp` file, using `AssertLockHeld` has the following benefits (besides a run time check):\n> \n> * it shows to a code reader the expected state of lock without referencing to a header file\n> * it will warn about missed proper `EXCLUSIVE_LOCKS_REQUIRED` annotation\n\nYou are literally talking about adding an annotation to check for the presence of ano",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687192979,687192979,
hebasto,2020-09-04 14:58:50,"> You are literally talking about adding an annotation to check for the presence of another annotation.\n\nThis is one benefit among others (run time check is the main purpose of `AssertLockHeld`).\n\n> This is an absurd idea to me...\n\nAnnotations that was missed and added in 3ddc150857178bfb1c854c05bf9b526777876f56 and 2ee7743fe723227f2ea1b031eddb14fc6863f4c8 justify the #19668 approach.",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687201826,687201826,
ryanofsky,2020-09-04 15:06:21,"Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687207072,687207072,
hebasto,2020-09-04 15:10:38,"> Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?\n\nNo. It is based on thread safety.\n\nWhile migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\n\n> Try to remove confusing and no longer useful lock asserts.\n\nAt least, could thi",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687209825,687209825,
ryanofsky,2020-09-04 15:56:50,"> While migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\n\nIf it is annotated with EXCLUSIVE_LOCKS_REQUIRED, it seems you should be confident either that the mutex is actually locked or that LockAssertion was used earlier and would have triggered a runtime error where it was used. This PR isn't removing",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687236976,687236976,
jonatack,2020-09-04 16:33:55,I need to review this PR just for what I'll learn. üê≥,https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687255914,687255914,
MarcoFalke,2020-09-05 10:19:03,"I think by default `./configure` will pick up gcc, which does not check lock annotations, so the current `AssertLockHeld` in master have a slight benefit of telling `./configure --enable-debug` devs (with gcc) who run the tests before creating a pull that something with their locks is wrong. Though, you correctly say that travis will compile with clang and fail if there is an inconsistency.\n\nT",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687585243,687585243,
ryanofsky,2020-09-05 12:23:34,"> At least that would make me feel more comfortable removing them.\n\nCan you clarify what is uncomfortable? If a function is annotated with EXCLUSIVE_LOCKS_REQUIRED(mutex), and the developer is not using clang, and the developer makes a change that calls the function without locking `mutex`, having a redundant AssertLockHeld(mutex) isn't going to impact the thread safety of the codebase, becaus",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687603455,687603455,
MarcoFalke,2020-09-05 12:28:42,"I simply wouldn't put too much trust into clang, since it may have bugs.",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687604066,687604066,
vasild,2020-09-07 10:28:29,"We managed to misuse the compiler directives:\n\n* Our `AssertLockHeldInternal()` does a runtime check and would not return (aka `abort()`) if it fails. There is an attribute exactly for that: [ASSERT_EXCLUSIVE_LOCK](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability), but we don't use it. We use [EXCLUSIVE_LOCKS_REQUIRED](https://clang.llvm.org/",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688232331,688232331,
hebasto,2020-09-07 10:57:05,"@vasild \n> The compiler does not issue a compile-time warning for line 9 because it knows line 9 is unreachable at run-time if `cs_main` is not held - `AssertLockHeld()` from line 6 would not return in that case.\n\nBut it is not known for a code reader.",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688248222,688248222,
ajtowns,2020-09-07 17:39:17,"> The compiler does not issue a compile-time warning for line 9 because it knows line 9 is unreachable at run-time if `cs_main` is not held\n\nLine 9 is reachable at run-time if `cs_main` is not held and `DEBUG_LOCKORDER` is not specified. If there is not a test that exercises that code path, CI will not detect the bug and prevent the merge.",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688451585,688451585,
vasild,2020-09-07 18:38:22,"@ajtowns this is because of another misuse (or ""trying to fool the compiler"") - in `master` before #19668 in the non-`DEBUG_LOCKORDER` case `AssertLockHeldInternal()` was defined like this:\n\n```cpp\nvoid static inline AssertLockHeldInternal(...) ASSERT_EXCLUSIVE_LOCK(cs) {}\n```\n\nSo, we lied the compiler that we will check and `abort()`, but we did not do that.\n\nIn this case, IMO `AS",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688469149,688469149,
hebasto,2020-09-08 12:32:50,"@vasild \n> @ajtowns this is because of another misuse (or ""trying to fool the compiler"") - in `master` before #19668 in the non-`DEBUG_LOCKORDER` case `AssertLockHeldInternal()` was defined like this:\n> \n> ```c++\n> void static inline AssertLockHeldInternal(...) ASSERT_EXCLUSIVE_LOCK(cs) {}\n> ```\n> \n> So, we lied the compiler that we will check and `abort()`, but we did not do that.\",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688835841,688835841,
vasild,2020-09-08 12:42:09,23d71d1 contains 2 changes. IMO the first one should be reverted and the second change should stay.,https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688840395,688840395,
ajtowns,2020-09-14 05:47:07,"> So, we lied the compiler that we will check and `abort()`, but we did not do that.\n\nI don't think it's useful to put this in moral terms. We're trying to prevent buggy code, by in order of preference, (a) making it impossible to write (eg RAII so locks are free automatically); (b) making the compiler complain about it (eg thread safety annotations); (c) getting predictable safe errors at run",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-691825920,691825920,
DrahtBot,2020-09-23 16:15:02,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-697622315,697622315,
MarcoFalke,2020-10-19 09:54:40,Can be closed?,https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-711958576,711958576,
MarcoFalke,2020-10-25 13:41:38,Let me know if I should reopen,https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-716150347,716150347,
