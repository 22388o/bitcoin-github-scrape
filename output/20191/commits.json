[
  {
    "sha": "181181019c5baa3e2d5b675d1843a45aa028781c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODExODEwMTljNWJhYTNlMmQ1YjY3NWQxODQzYTQ1YWEwMjg3ODFj",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-29T06:29:25Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-30T06:37:50Z"
      },
      "message": "refactor: remove m_internal from DescriptorSPKman\n\nDescriptor in itself is neither internal or external.\nIt's responsibility of a wallet to assign and manage descriptors\nfor a specific purpose. Duplicating such information could lead to\ninconsistencies and unexpected behaviour.",
      "tree": {
        "sha": "f673dbc4f7784f9d0a216987f0d60e2b13abc243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f673dbc4f7784f9d0a216987f0d60e2b13abc243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/181181019c5baa3e2d5b675d1843a45aa028781c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181181019c5baa3e2d5b675d1843a45aa028781c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/181181019c5baa3e2d5b675d1843a45aa028781c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181181019c5baa3e2d5b675d1843a45aa028781c/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 19,
      "deletions": 40
    },
    "files": [
      {
        "sha": "61df3d0015470152d5ad3e19a837eb6a156fde68",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -15,8 +15,8 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n   ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n       :   DescriptorScriptPubKeyMan(storage, descriptor)\n       {}\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage, bool internal)\n-      :   DescriptorScriptPubKeyMan(storage, internal)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage)\n+      :   DescriptorScriptPubKeyMan(storage)\n       {}\n \n   /** Provide a descriptor at setup time"
      },
      {
        "sha": "5467495ffff55644f887b41934440484a147f506",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -1613,12 +1613,10 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-void LegacyScriptPubKeyMan::SetInternal(bool internal) {}\n-\n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n     // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n-    if (!CanGetAddresses(m_internal)) {\n+    if (!CanGetAddresses()) {\n         error = \"No addresses available\";\n         return false;\n     }\n@@ -1894,7 +1892,7 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n {\n     if (addr_type == OutputType::BECH32M) {\n         // Don't allow setting up taproot descriptors yet\n@@ -1942,7 +1940,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix += \"/0'\";\n     }\n \n-    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n     std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n \n     // Make the descriptor\n@@ -1997,13 +1995,6 @@ int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n     return 0;\n }\n \n-size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n-{\n-    if (m_internal) {\n-        return 0;\n-    }\n-    return GetKeyPoolSize();\n-}\n \n unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n {\n@@ -2205,11 +2196,6 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetInternal(bool internal)\n-{\n-    this->m_internal = internal;\n-}\n-\n void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "128197e567cce71707abae17698753ad20a930b2",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -216,7 +216,6 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetOldestKeyPoolTime() const { return GetTime(); }\n \n-    virtual size_t KeypoolCountExternalKeys() const { return 0; }\n     virtual unsigned int GetKeyPoolSize() const { return 0; }\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n@@ -239,8 +238,6 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n-    virtual void SetInternal(bool internal) {}\n-\n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n     void WalletLogPrintf(std::string fmt, Params... parameters) const {\n@@ -386,7 +383,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void RewriteDB() override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n+    size_t KeypoolCountExternalKeys() const;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -405,8 +402,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n@@ -533,8 +528,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    bool m_internal = false;\n-\n     KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n     CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n \n@@ -560,9 +553,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n         :   ScriptPubKeyMan(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, bool internal)\n-        :   ScriptPubKeyMan(storage),\n-            m_internal(internal)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage)\n+        :   ScriptPubKeyMan(storage)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;\n@@ -587,7 +579,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type);\n+    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     /** Provide a descriptor at setup time\n     * Returns false if already setup or setup fails, true if setup is successful\n@@ -597,7 +589,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -616,8 +607,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     void SetCache(const DescriptorCache& cache);\n \n     bool AddKey(const CKeyID& key_id, const CKey& key);"
      },
      {
        "sha": "5b108a50694aa8dc96e4c493d0dba548d6b52338",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -2079,9 +2079,14 @@ size_t CWallet::KeypoolCountExternalKeys() const\n {\n     AssertLockHeld(cs_wallet);\n \n+    auto legacy_spk_man = GetLegacyScriptPubKeyMan();\n+    if (legacy_spk_man) {\n+        return legacy_spk_man->KeypoolCountExternalKeys();\n+    }\n+\n     unsigned int count = 0;\n-    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n-        count += spk_man->KeypoolCountExternalKeys();\n+    for (auto spk_man : m_external_spk_managers) {\n+        count += spk_man.second->GetKeyPoolSize();\n     }\n \n     return count;\n@@ -3097,7 +3102,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     // TODO: Setup taproot (bech32m) descriptors by default\n                     continue;\n                 }\n-                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {\n                         throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -3106,7 +3111,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                         throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                     }\n                 }\n-                spk_manager->SetupDescriptorGeneration(master_key, t);\n+                spk_manager->SetupDescriptorGeneration(master_key, t, internal);\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n                 AddActiveScriptPubKeyMan(id, t, internal);\n@@ -3132,7 +3137,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     continue;\n                 }\n                 OutputType t =  *desc->GetOutputType();\n-                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this));\n                 spk_manager->SetupDescriptor(std::move(desc));\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n@@ -3156,7 +3161,6 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n-    spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n     NotifyCanGetAddressesChanged();"
      }
    ]
  }
]