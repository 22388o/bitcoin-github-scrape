[
  {
    "sha": "09dc4064aca45a544a22e28e016cc3064985f25a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWRjNDA2NGFjYTQ1YTU0NGEyMmUyOGUwMTZjYzMwNjQ5ODVmMjVh",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-11-21T21:29:22Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-11-21T21:30:53Z"
      },
      "message": "Make test constant consistent with consensus.h",
      "tree": {
        "sha": "a1c4e5051380cf08b5c0e5a0c1f2b57055a36966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1c4e5051380cf08b5c0e5a0c1f2b57055a36966"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09dc4064aca45a544a22e28e016cc3064985f25a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09dc4064aca45a544a22e28e016cc3064985f25a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09dc4064aca45a544a22e28e016cc3064985f25a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09dc4064aca45a544a22e28e016cc3064985f25a/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c577f2638b7f701e4b4b96c4c8df39dc097cf2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c577f2638b7f701e4b4b96c4c8df39dc097cf2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c577f2638b7f701e4b4b96c4c8df39dc097cf2f"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e4b889d761bec3cfee105bbec7b0759a24bf43f0",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=09dc4064aca45a544a22e28e016cc3064985f25a",
        "patch": "@@ -351,32 +351,32 @@ def update_block(block_number, new_transactions):\n         block(22, spend=out[5])\n         yield rejected()\n \n-        # Create a block on either side of MAX_BLOCK_SIZE and make sure its accepted/rejected\n+        # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n         #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6)\n         #                                                                           \\-> b24 (6) -> b25 (7)\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n         b23 = block(23, spend=out[6])\n         tx = CTransaction()\n-        script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n+        script_length = MAX_BLOCK_BASE_SIZE - len(b23.serialize()) - 69\n         script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 0)))\n         b23 = update_block(23, [tx])\n         # Make sure the math above worked out to produce a max-sized block\n-        assert_equal(len(b23.serialize()), MAX_BLOCK_SIZE)\n+        assert_equal(len(b23.serialize()), MAX_BLOCK_BASE_SIZE)\n         yield accepted()\n         save_spendable_output()\n \n         # Make the next block one byte bigger and check that it fails\n         tip(15)\n         b24 = block(24, spend=out[6])\n-        script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n+        script_length = MAX_BLOCK_BASE_SIZE - len(b24.serialize()) - 69\n         script_output = CScript([b'\\x00' * (script_length+1)])\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = update_block(24, [tx])\n-        assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n+        assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE+1)\n         yield rejected(RejectResult(16, b'bad-blk-length'))\n \n         block(25, spend=out[7])\n@@ -523,12 +523,12 @@ def update_block(block_number, new_transactions):\n         tx_new = None\n         tx_last = tx\n         total_size=len(b39.serialize())\n-        while(total_size < MAX_BLOCK_SIZE):\n+        while(total_size < MAX_BLOCK_BASE_SIZE):\n             tx_new = create_tx(tx_last, 1, 1, p2sh_script)\n             tx_new.vout.append(CTxOut(tx_last.vout[1].nValue - 1, CScript([OP_TRUE])))\n             tx_new.rehash()\n             total_size += len(tx_new.serialize())\n-            if total_size >= MAX_BLOCK_SIZE:\n+            if total_size >= MAX_BLOCK_BASE_SIZE:\n                 break\n             b39.vtx.append(tx_new) # add tx to block\n             tx_last = tx_new\n@@ -877,7 +877,7 @@ def update_block(block_number, new_transactions):\n \n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n-        #  the block is > MAX_BLOCK_SIZE with the bloated varint, but <= MAX_BLOCK_SIZE without the bloated varint,\n+        #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n         #  does not cause a subsequent, identical block with canonical encoding to be rejected.  The test does not\n         #  care whether the bloated block is accepted or rejected; it only cares that the second block is accepted.\n         #\n@@ -901,12 +901,12 @@ def update_block(block_number, new_transactions):\n         tx = CTransaction()\n \n         # use canonical serialization to calculate size\n-        script_length = MAX_BLOCK_SIZE - len(b64a.normal_serialize()) - 69\n+        script_length = MAX_BLOCK_BASE_SIZE - len(b64a.normal_serialize()) - 69\n         script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = update_block(\"64a\", [tx])\n-        assert_equal(len(b64a.serialize()), MAX_BLOCK_SIZE + 8)\n+        assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n         yield TestInstance([[self.tip, None]])\n \n         # comptool workaround: to make sure b64 is delivered, manually erase b64a from blockstore\n@@ -916,7 +916,7 @@ def update_block(block_number, new_transactions):\n         b64 = CBlock(b64a)\n         b64.vtx = copy.deepcopy(b64a.vtx)\n         assert_equal(b64.hash, b64a.hash)\n-        assert_equal(len(b64.serialize()), MAX_BLOCK_SIZE)\n+        assert_equal(len(b64.serialize()), MAX_BLOCK_BASE_SIZE)\n         self.blocks[64] = b64\n         update_block(64, [])\n         yield accepted()\n@@ -1250,12 +1250,12 @@ def update_block(block_number, new_transactions):\n             for i in range(89, LARGE_REORG_SIZE + 89):\n                 b = block(i, spend)\n                 tx = CTransaction()\n-                script_length = MAX_BLOCK_SIZE - len(b.serialize()) - 69\n+                script_length = MAX_BLOCK_BASE_SIZE - len(b.serialize()) - 69\n                 script_output = CScript([b'\\x00' * script_length])\n                 tx.vout.append(CTxOut(0, script_output))\n                 tx.vin.append(CTxIn(COutPoint(b.vtx[1].sha256, 0)))\n                 b = update_block(i, [tx])\n-                assert_equal(len(b.serialize()), MAX_BLOCK_SIZE)\n+                assert_equal(len(b.serialize()), MAX_BLOCK_BASE_SIZE)\n                 test1.blocks_and_transactions.append([self.tip, True])\n                 save_spendable_output()\n                 spend = get_spendable_output()"
      },
      {
        "sha": "62969aed648054ed911e34861aec916c2da901ea",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=09dc4064aca45a544a22e28e016cc3064985f25a",
        "patch": "@@ -498,7 +498,7 @@ def test_block_malleability(self):\n         block.solve()\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n-        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+        assert(get_virtual_size(block) > MAX_BLOCK_BASE_SIZE)\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n@@ -507,7 +507,7 @@ def test_block_malleability(self):\n         assert(self.nodes[0].getbestblockhash() != block.hash)\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n-        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        assert(get_virtual_size(block) < MAX_BLOCK_BASE_SIZE)\n         self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n \n         assert(self.nodes[0].getbestblockhash() == block.hash)\n@@ -572,10 +572,10 @@ def test_witness_block_size(self):\n         self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n \n         vsize = get_virtual_size(block)\n-        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        additional_bytes = (MAX_BLOCK_BASE_SIZE - vsize)*4\n         i = 0\n         while additional_bytes > 0:\n-            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            # Add some more bytes to each input until we hit MAX_BLOCK_BASE_SIZE+1\n             extra_bytes = min(additional_bytes+1, 55)\n             block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n             additional_bytes -= extra_bytes\n@@ -585,7 +585,7 @@ def test_witness_block_size(self):\n         add_witness_commitment(block)\n         block.solve()\n         vsize = get_virtual_size(block)\n-        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        assert_equal(vsize, MAX_BLOCK_BASE_SIZE + 1)\n         # Make sure that our test case would exceed the old max-network-message\n         # limit\n         assert(len(block.serialize(True)) > 2*1024*1024)\n@@ -598,7 +598,7 @@ def test_witness_block_size(self):\n         block.vtx[0].vout.pop()\n         add_witness_commitment(block)\n         block.solve()\n-        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+        assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n         self.test_node.test_witness_block(block, accepted=True)\n \n@@ -1433,7 +1433,7 @@ def test_signature_version_1(self):\n             block.vtx.append(tx)\n \n             # Test the block periodically, if we're close to maxblocksize\n-            if (get_virtual_size(block) > MAX_BLOCK_SIZE - 1000):\n+            if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n                 self.test_node.test_witness_block(block, accepted=True)\n                 block = self.build_next_block()"
      },
      {
        "sha": "85afeab2e3eb62c01d533682d93c3f0d5a81b79d",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=09dc4064aca45a544a22e28e016cc3064985f25a",
        "patch": "@@ -9,7 +9,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import COIN, MAX_BLOCK_SIZE\n+from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n \n@@ -42,15 +42,15 @@ def run_test(self):\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[start_range:end_range], (i+1)*base_fee)\n \n         # Make sure that the size of each group of transactions exceeds\n-        # MAX_BLOCK_SIZE -- otherwise the test needs to be revised to create\n+        # MAX_BLOCK_BASE_SIZE -- otherwise the test needs to be revised to create\n         # more transactions.\n         mempool = self.nodes[0].getrawmempool(True)\n         sizes = [0, 0, 0]\n         for i in range(3):\n             for j in txids[i]:\n                 assert(j in mempool)\n                 sizes[i] += mempool[j]['size']\n-            assert(sizes[i] > MAX_BLOCK_SIZE) # Fail => raise utxo_count\n+            assert(sizes[i] > MAX_BLOCK_BASE_SIZE) # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined (lower"
      },
      {
        "sha": "91daa4ab1f585d56c8556fecd792a8f181d4e500",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09dc4064aca45a544a22e28e016cc3064985f25a/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=09dc4064aca45a544a22e28e016cc3064985f25a",
        "patch": "@@ -44,7 +44,7 @@\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n \n MAX_INV_SZ = 50000\n-MAX_BLOCK_SIZE = 1000000\n+MAX_BLOCK_BASE_SIZE = 1000000\n \n COIN = 100000000 # 1 btc in satoshis\n "
      }
    ]
  }
]