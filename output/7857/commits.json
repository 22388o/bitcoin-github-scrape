[
  {
    "sha": "f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2RjMWQzMmJiZDIzZmY1OTNlNjNmNTc1YTJkNDQ2YTk2ZTFlYTE1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-03-29T23:59:29Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-11T09:26:24Z"
      },
      "message": "Add strict flag to RPCTypeCheckObj\n\nStrict flag forces type check on all object keys.",
      "tree": {
        "sha": "76b1831d33f79793dd514b79bc8f093853b82393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b1831d33f79793dd514b79bc8f093853b82393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "065c6b443f3e9864b1b4231208b49e3cef99cef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/065c6b443f3e9864b1b4231208b49e3cef99cef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/065c6b443f3e9864b1b4231208b49e3cef99cef3"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d06a9142b6819a07d592cb781c683a58479a0b16",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
        "patch": "@@ -89,7 +89,8 @@ void RPCTypeCheck(const UniValue& params,\n \n void RPCTypeCheckObj(const UniValue& o,\n                   const map<string, UniValue::VType>& typesExpected,\n-                  bool fAllowNull)\n+                  bool fAllowNull,\n+                  bool fStrict)\n {\n     BOOST_FOREACH(const PAIRTYPE(string, UniValue::VType)& t, typesExpected)\n     {\n@@ -104,6 +105,18 @@ void RPCTypeCheckObj(const UniValue& o,\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n     }\n+\n+    if (fStrict)\n+    {\n+        BOOST_FOREACH(const string& k, o.getKeys())\n+        {\n+            if (typesExpected.count(k) == 0)\n+            {\n+                string err = strprintf(\"Unexpected key %s\", k);\n+                throw JSONRPCError(RPC_TYPE_ERROR, err);\n+            }\n+        }\n+    }\n }\n \n CAmount AmountFromValue(const UniValue& value)"
      },
      {
        "sha": "b4713366172aeb2c3777d152dc50573c39d0722e",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
        "patch": "@@ -70,7 +70,7 @@ void RPCTypeCheck(const UniValue& params,\n   Use like: RPCTypeCheckObj(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n */\n void RPCTypeCheckObj(const UniValue& o,\n-                  const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false);\n+                  const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false, bool fStrict=false);\n \n /** Opaque base class for timers returned by NewTimerFunc.\n  * This provides no methods at the moment, but makes sure that delete"
      }
    ]
  },
  {
    "sha": "db992eadbcbde0ca14df66c120a5868938e61e83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjk5MmVhZGJjYmRlMGNhMTRkZjY2YzEyMGE1ODY4OTM4ZTYxZTgz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-03-30T01:04:22Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-11T09:26:24Z"
      },
      "message": "Add change options to fundrawtransaction",
      "tree": {
        "sha": "93fe62653cbb57afd506bc3e04d8a6fdb383dfb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93fe62653cbb57afd506bc3e04d8a6fdb383dfb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db992eadbcbde0ca14df66c120a5868938e61e83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db992eadbcbde0ca14df66c120a5868938e61e83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db992eadbcbde0ca14df66c120a5868938e61e83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db992eadbcbde0ca14df66c120a5868938e61e83/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 153,
      "deletions": 24
    },
    "files": [
      {
        "sha": "03dc1516c037a55bc6a22c7388777e8bc5258e27",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 79,
        "deletions": 1,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db992eadbcbde0ca14df66c120a5868938e61e83/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db992eadbcbde0ca14df66c120a5868938e61e83/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=db992eadbcbde0ca14df66c120a5868938e61e83",
        "patch": "@@ -179,6 +179,83 @@ def run_test(self):\n \n \n \n+        ####################################################\n+        # test a fundrawtransaction with an invalid option #\n+        ####################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        try:\n+            self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n+            raise AssertionError(\"Accepted invalid option foo\")\n+        except JSONRPCException,e:\n+            assert(\"Unexpected key foo\" in e.error['message'])\n+\n+\n+        ############################################################\n+        # test a fundrawtransaction with an invalid change address #\n+        ############################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        try:\n+            self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n+            raise AssertionError(\"Accepted invalid bitcoin address\")\n+        except JSONRPCException,e:\n+            assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n+\n+\n+\n+        ############################################################\n+        # test a fundrawtransaction with a provided change address #\n+        ############################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        change = self.nodes[2].getnewaddress()\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        out = dec_tx['vout'][0];\n+        assert_equal(change, out['scriptPubKey']['addresses'][0])\n+\n+\n+\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -571,7 +648,7 @@ def run_test(self):\n         outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n-        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        result = self.nodes[3].fundrawtransaction(rawtx, {'includeWatching': True })\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 1)\n         assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n@@ -587,6 +664,7 @@ def run_test(self):\n         outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n+        # Backward compatibility test (2nd param is includeWatching)\n         result = self.nodes[3].fundrawtransaction(rawtx, True)\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 2)"
      },
      {
        "sha": "1f83527f2e4eae5eda52a37be31e488eff26d931",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 10,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db992eadbcbde0ca14df66c120a5868938e61e83",
        "patch": "@@ -2441,7 +2441,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\" includeWatching\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n@@ -2451,8 +2451,14 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n                             \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"     (string, required) The hex string of the raw transaction\\n\"\n-                            \"2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\\n\"\n+                            \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n+                            \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n+                            \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n+                            \"   }\\n\"\n+                            \"                         for backward compatibility: passing in a true instzead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2471,7 +2477,40 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+\n+    CTxDestination changeAddress = CNoDestination();\n+    int changePosition = -1;\n+    bool includeWatching = false;\n+\n+    if (params.size() > 1) {\n+      if (params[1].type() == UniValue::VBOOL) {\n+        // backward compatibility bool only fallback\n+        includeWatching = params[1].get_bool();\n+      }\n+      else {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+\n+        UniValue options = params[1];\n+\n+        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL), true, true);\n+\n+        if (options.exists(\"changeAddress\")) {\n+            CBitcoinAddress address(options[\"changeAddress\"].get_str());\n+\n+            if (!address.IsValid())\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+\n+            changeAddress = address.Get();\n+        }\n+\n+        if (options.exists(\"changePosition\"))\n+            changePosition = options[\"changePosition\"].get_int();\n+\n+        if (options.exists(\"includeWatching\"))\n+            includeWatching = options[\"includeWatching\"].get_bool();\n+      }\n+    }\n \n     // parse hex string from parameter\n     CTransaction origTx;\n@@ -2481,20 +2520,19 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (origTx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n-    bool includeWatching = false;\n-    if (params.size() > 1)\n-        includeWatching = params[1].get_bool();\n+    if (changePosition != -1 && (changePosition < 0 || changePosition > origTx.vout.size()))\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n \n     CMutableTransaction tx(origTx);\n     CAmount nFee;\n     string strFailReason;\n-    int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason, includeWatching))\n+\n+    if(!pwalletMain->FundTransaction(tx, nFee, changePosition, strFailReason, includeWatching, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", nChangePos));\n+    result.push_back(Pair(\"changepos\", changePosition));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n \n     return result;"
      },
      {
        "sha": "ee92552168b4335abc086db2c97c6c4be8ca1a4e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=db992eadbcbde0ca14df66c120a5868938e61e83",
        "patch": "@@ -1932,7 +1932,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1944,18 +1944,19 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n     }\n \n     CCoinControl coinControl;\n+    coinControl.destChange = destChange;\n     coinControl.fAllowOtherInputs = true;\n     coinControl.fAllowWatchOnly = includeWatching;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosRet, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n         return false;\n \n-    if (nChangePosRet != -1)\n-        tx.vout.insert(tx.vout.begin() + nChangePosRet, wtx.vout[nChangePosRet]);\n+    if (nChangePosInOut != -1)\n+        tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.vout[nChangePosInOut]);\n \n     // Add new txins (keeping original txin scriptSig/order)\n     BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n@@ -1968,9 +1969,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n }\n \n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n+    int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n     BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n@@ -2036,10 +2038,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n+                nChangePosInOut = nChangePosRequest;\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n-                nChangePosRet = -1;\n                 bool fFirst = true;\n \n                 CAmount nValueToSelect = nValue;\n@@ -2159,14 +2161,24 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     // add the dust to the fee.\n                     if (newTxOut.IsDust(::minRelayTxFee))\n                     {\n+                        nChangePosInOut = -1;\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();\n                     }\n                     else\n                     {\n-                        // Insert change txn at random position:\n-                        nChangePosRet = GetRandInt(txNew.vout.size()+1);\n-                        vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosRet;\n+                        if (nChangePosInOut == -1)\n+                        {\n+                            // Insert change txn at random position:\n+                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+                        }\n+                        else if (nChangePosInOut > txNew.vout.size())\n+                        {\n+                            strFailReason = _(\"Change index out of range\");\n+                            return false;\n+                        }\n+\n+                        vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 }\n@@ -2842,13 +2854,13 @@ void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n     script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n }\n \n-void CWallet::LockCoin(COutPoint& output)\n+void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.insert(output);\n }\n \n-void CWallet::UnlockCoin(COutPoint& output)\n+void CWallet::UnlockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.erase(output);"
      },
      {
        "sha": "b0781e917b917761d96fb4fbee63e804bc2eaed9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db992eadbcbde0ca14df66c120a5868938e61e83/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=db992eadbcbde0ca14df66c120a5868938e61e83",
        "patch": "@@ -739,13 +739,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed\n+     * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n "
      }
    ]
  },
  {
    "sha": "18be394cd8cf5b021e25fff34066f1a3a002858c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGJlMzk0Y2Q4Y2Y1YjAyMWUyNWZmZjM0MDY2ZjFhM2EwMDI4NThj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-06T14:56:14Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-11T09:26:24Z"
      },
      "message": "Add lockUnspents option to fundrawtransaction",
      "tree": {
        "sha": "9f3a0358a82c73ef013cd607f8f1b1205fe2385e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f3a0358a82c73ef013cd607f8f1b1205fe2385e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18be394cd8cf5b021e25fff34066f1a3a002858c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18be394cd8cf5b021e25fff34066f1a3a002858c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18be394cd8cf5b021e25fff34066f1a3a002858c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18be394cd8cf5b021e25fff34066f1a3a002858c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db992eadbcbde0ca14df66c120a5868938e61e83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db992eadbcbde0ca14df66c120a5868938e61e83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db992eadbcbde0ca14df66c120a5868938e61e83"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "327799c223608ac1bfa0830f2acd9a5f022202c1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=18be394cd8cf5b021e25fff34066f1a3a002858c",
        "patch": "@@ -2457,6 +2457,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n+                            \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instzead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2482,6 +2483,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n     bool includeWatching = false;\n+    bool lockUnspents = false;\n \n     if (params.size() > 1) {\n       if (params[1].type() == UniValue::VBOOL) {\n@@ -2493,7 +2495,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n         UniValue options = params[1];\n \n-        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL), true, true);\n+        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL)(\"lockUnspents\", UniValue::VBOOL), true, true);\n \n         if (options.exists(\"changeAddress\")) {\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n@@ -2509,6 +2511,9 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n         if (options.exists(\"includeWatching\"))\n             includeWatching = options[\"includeWatching\"].get_bool();\n+\n+        if (options.exists(\"lockUnspents\"))\n+            lockUnspents = options[\"lockUnspents\"].get_bool();\n       }\n     }\n \n@@ -2527,7 +2532,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     CAmount nFee;\n     string strFailReason;\n \n-    if(!pwalletMain->FundTransaction(tx, nFee, changePosition, strFailReason, includeWatching, changeAddress))\n+    if(!pwalletMain->FundTransaction(tx, nFee, changePosition, strFailReason, includeWatching, lockUnspents, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "8161c659ab3695f20026fd0abc3666a4ee8697cc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=18be394cd8cf5b021e25fff34066f1a3a002858c",
        "patch": "@@ -1932,7 +1932,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1962,7 +1962,15 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n     {\n         if (!coinControl.IsSelected(txin.prevout))\n+        {\n             tx.vin.push_back(txin);\n+\n+            if (lockUnspents)\n+            {\n+              LOCK2(cs_main, cs_wallet);\n+              LockCoin(txin.prevout);\n+            }\n+        }\n     }\n \n     return true;"
      },
      {
        "sha": "aab4b217caa874d155d3baf218fc7deddaebfa2e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18be394cd8cf5b021e25fff34066f1a3a002858c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=18be394cd8cf5b021e25fff34066f1a3a002858c",
        "patch": "@@ -667,8 +667,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n-    void LockCoin(COutPoint& output);\n-    void UnlockCoin(COutPoint& output);\n+    void LockCoin(const COutPoint& output);\n+    void UnlockCoin(const COutPoint& output);\n     void UnlockAllCoins();\n     void ListLockedCoins(std::vector<COutPoint>& vOutpts);\n \n@@ -739,7 +739,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  },
  {
    "sha": "7e658ddf23ba0b71506e5c27ec2eb17318e93998",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTY1OGRkZjIzYmEwYjcxNTA2ZTVjMjdlYzJlYjE3MzE4ZTkzOTk4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-11T07:15:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@uphold.com",
        "date": "2016-04-11T09:27:04Z"
      },
      "message": "Add fee option to fundrawtransaction",
      "tree": {
        "sha": "a264f030454d8d64c34a91e56a34e8136b1321d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a264f030454d8d64c34a91e56a34e8136b1321d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e658ddf23ba0b71506e5c27ec2eb17318e93998",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e658ddf23ba0b71506e5c27ec2eb17318e93998",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e658ddf23ba0b71506e5c27ec2eb17318e93998",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e658ddf23ba0b71506e5c27ec2eb17318e93998/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18be394cd8cf5b021e25fff34066f1a3a002858c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18be394cd8cf5b021e25fff34066f1a3a002858c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18be394cd8cf5b021e25fff34066f1a3a002858c"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 37,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4abdd65f3b0c04d48e2e8361e9ff98fa1509ed80",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7e658ddf23ba0b71506e5c27ec2eb17318e93998",
        "patch": "@@ -268,7 +268,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n \n         transaction.newPossibleKeyChange(wallet);\n \n-        CAmount nFeeRequired = 0;\n+        CAmount nFeeRequired = -1;\n         int nChangePosRet = -1;\n         std::string strFailReason;\n "
      },
      {
        "sha": "6d2eb9944c0d95fb6aa8160e3bf79a844bbe1b6d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7e658ddf23ba0b71506e5c27ec2eb17318e93998",
        "patch": "@@ -382,7 +382,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n-    CAmount nFeeRequired;\n+    CAmount nFeeRequired = -1;\n     std::string strError;\n     vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n@@ -1036,7 +1036,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    CAmount nFeeRequired = 0;\n+    CAmount nFeeRequired = -1;\n     int nChangePosRet = -1;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n@@ -2456,6 +2456,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             \"   {\\n\"\n                             \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n+                            \"     \\\"fee\\\"               (numeric, optional, default minimum value) The transaction fee\\n\"\n                             \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n                             \"   }\\n\"\n@@ -2482,6 +2483,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n+    CAmount nFee = -1;\n     bool includeWatching = false;\n     bool lockUnspents = false;\n \n@@ -2495,7 +2497,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n         UniValue options = params[1];\n \n-        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL)(\"lockUnspents\", UniValue::VBOOL), true, true);\n+        RPCTypeCheckObj(options, boost::assign::map_list_of(\"changeAddress\", UniValue::VSTR)(\"changePosition\", UniValue::VNUM)(\"fee\", UniValue::VNUM)(\"includeWatching\", UniValue::VBOOL)(\"lockUnspents\", UniValue::VBOOL), true, true);\n \n         if (options.exists(\"changeAddress\")) {\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n@@ -2512,6 +2514,9 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n         if (options.exists(\"includeWatching\"))\n             includeWatching = options[\"includeWatching\"].get_bool();\n \n+        if (options.exists(\"fee\"))\n+            nFee = AmountFromValue(options[\"fee\"]);\n+\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n       }\n@@ -2529,7 +2534,6 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n \n     CMutableTransaction tx(origTx);\n-    CAmount nFee;\n     string strFailReason;\n \n     if(!pwalletMain->FundTransaction(tx, nFee, changePosition, strFailReason, includeWatching, lockUnspents, changeAddress))"
      },
      {
        "sha": "7931c4059dcf0bc4c706f20f8aca7ad984e14701",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 12,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7e658ddf23ba0b71506e5c27ec2eb17318e93998",
        "patch": "@@ -1932,7 +1932,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1952,7 +1952,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeInOut, nChangePosInOut, strFailReason, &coinControl, false))\n         return false;\n \n     if (nChangePosInOut != -1)\n@@ -1976,7 +1976,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n@@ -2042,8 +2042,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n-            nFeeRet = 0;\n-            // Start with no fee and loop until there is enough fee\n+            CAmount nFee = nFeeInOut == -1 ? 0 : nFeeInOut;\n+            // If fee is undefined, start with no fee and loop until there is enough fee,\n+            // otherwise set the fee to the requested value.\n             while (true)\n             {\n                 nChangePosInOut = nChangePosRequest;\n@@ -2054,7 +2055,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+                    nValueToSelect += nFee;\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)\n@@ -2063,18 +2064,18 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     if (recipient.fSubtractFeeFromAmount)\n                     {\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+                        txout.nValue -= nFee / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n \n                         if (fFirst) // first receiver pays the remainder not divisible by output count\n                         {\n                             fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                            txout.nValue -= nFee % nSubtractFeeFromAmount;\n                         }\n                     }\n \n                     if (txout.IsDust(::minRelayTxFee))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                        if (recipient.fSubtractFeeFromAmount && nFee > 0)\n                         {\n                             if (txout.nValue < 0)\n                                 strFailReason = _(\"The transaction amount is too small to pay the fee\");\n@@ -2170,7 +2171,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     if (newTxOut.IsDust(::minRelayTxFee))\n                     {\n                         nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        nFee += nChange;\n                         reservekey.ReturnKey();\n                     }\n                     else\n@@ -2249,7 +2250,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n                     // Require at least hard-coded AllowFree.\n                     if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n+                    {\n+                        nFeeInOut = nFee;\n                         break;\n+                    }\n                 }\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n@@ -2265,11 +2269,20 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     return false;\n                 }\n \n-                if (nFeeRet >= nFeeNeeded)\n+                if (nFee >= nFeeNeeded)\n+                {\n+                    nFeeInOut = nFee;\n                     break; // Done, enough fee included.\n+                }\n+\n+                if (nFeeInOut != -1)\n+                {\n+                    strFailReason = _(\"Requested fee not enough for fee policy\");\n+                    return false;\n+                }\n \n                 // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n+                nFee = nFeeNeeded;\n                 continue;\n             }\n         }"
      },
      {
        "sha": "a5fade56c0ce888ff3ebf1f94b36a15524476dd8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e658ddf23ba0b71506e5c27ec2eb17318e93998/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7e658ddf23ba0b71506e5c27ec2eb17318e93998",
        "patch": "@@ -739,14 +739,15 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed\n+     * @note passing nFeeInOut as -1 will result in minimum fee calculation\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n "
      }
    ]
  }
]