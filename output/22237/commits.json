[
  {
    "sha": "0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjhhNWE0ZGQ1MzA1NDlkMzdjNDNkYTUyYzkyM2FjM2IyYWYxYTAz",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-18T18:14:15Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-18T18:14:15Z"
      },
      "message": "move-only(ish): don't expose CCoinsViewDBCursor\n\nNo need for this to be a part of the header anymore.\n\nIncludes a small reference type style change.",
      "tree": {
        "sha": "a945e825a5a1ff3faa098e2f4f83d2a2792cbe99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a945e825a5a1ff3faa098e2f4f83d2a2792cbe99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDM4qgACgkQepNdrbLE\nTwX7TxAAhy7COuN0YQagzzZ18v2zZPrCgpPkKx9XWoA2lKg7qapbNGREChVO9LBc\nuzjWSColVXCt65D89KyYaCWKPwJlD6BPsywkpTPZR25AzSoLpiCBZSkYIbKLNi/3\nvMg2U1VjAe5y+b/sRqreqUfj2ILWU9GWnfEOS7yzJ4kJ/2ipSnYLKxD0DIqwRFIP\nECbTBRnX82UULTfucHKmPdq8vEu0M1w8fn+1Z3Bqcw16JPrbLLx1MWYnTaRUrVUq\n5qKk3JmDTSYmTksNoBqxVBv+Wtm9eW36nJYKZ3Y0G6+9ZaSpSOyQXkq1qReNW+GR\nWLxLEMwN2spCVVff/IHZzo37Bd5Wh4P+niXgVnwxdw/JhQJoeeco7Qo9k5yMlzbv\nJXYbpjtiyLpK2yEpCV2WkGLyZTiRwRqILTY3JWetQqar0UEJ+Mpzh23l59aO0f3Z\nLrl/xNsExwOArB7CJ8penPoR5aehUbbNLbNDshZB0O8bd+WY0MeenLlg/DmuSMpl\nASS+yBQIs56I0e907bS5LD//tms0jrUfDfyL+Qs6K5k1mn5jGvQQ5J2xWjEkwsKO\nCvz3xTfJoBcP9BJEAJccpAyzxw0+gTs2bu9y/n7LVfl3bK+Vn6MIsZCWOi35B135\nCEqdj5PJATchAYWJMfnCB4aa4rUss28eH1C6nEVTanIKg88YvKU=\n=4X7S\n-----END PGP SIGNATURE-----",
        "payload": "tree a945e825a5a1ff3faa098e2f4f83d2a2792cbe99\nparent 615c1adfb07b9b466173166dc2e53ace540e4b32\nauthor James O'Beirne <james.obeirne@pm.me> 1624040055 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1624040055 -0400\n\nmove-only(ish): don't expose CCoinsViewDBCursor\n\nNo need for this to be a part of the header anymore.\n\nIncludes a small reference type style change.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8a5a4dd530549d37c43da52c923ac3b2af1a03/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "615c1adfb07b9b466173166dc2e53ace540e4b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615c1adfb07b9b466173166dc2e53ace540e4b32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/615c1adfb07b9b466173166dc2e53ace540e4b32"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "e6469ee1599a508e851a7697464a0814259c30a4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8a5a4dd530549d37c43da52c923ac3b2af1a03/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8a5a4dd530549d37c43da52c923ac3b2af1a03/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
        "patch": "@@ -168,6 +168,28 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n+/** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n+class CCoinsViewDBCursor: public CCoinsViewCursor\n+{\n+public:\n+    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256&hashBlockIn):\n+        CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n+    ~CCoinsViewDBCursor() {}\n+\n+    bool GetKey(COutPoint &key) const override;\n+    bool GetValue(Coin &coin) const override;\n+    unsigned int GetValueSize() const override;\n+\n+    bool Valid() const override;\n+    void Next() override;\n+\n+private:\n+    std::unique_ptr<CDBIterator> pcursor;\n+    std::pair<char, COutPoint> keyTmp;\n+\n+    friend class CCoinsViewDB;\n+};\n+\n std::unique_ptr<CCoinsViewCursor> CCoinsViewDB::Cursor() const\n {\n     auto i = std::make_unique<CCoinsViewDBCursor>("
      },
      {
        "sha": "845d80788f255974e33b2441896c72002cda9354",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8a5a4dd530549d37c43da52c923ac3b2af1a03/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8a5a4dd530549d37c43da52c923ac3b2af1a03/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
        "patch": "@@ -70,28 +70,6 @@ class CCoinsViewDB final : public CCoinsView\n     void ResizeCache(size_t new_cache_size) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n-/** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n-class CCoinsViewDBCursor: public CCoinsViewCursor\n-{\n-public:\n-    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):\n-        CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n-    ~CCoinsViewDBCursor() {}\n-\n-    bool GetKey(COutPoint &key) const override;\n-    bool GetValue(Coin &coin) const override;\n-    unsigned int GetValueSize() const override;\n-\n-    bool Valid() const override;\n-    void Next() override;\n-\n-private:\n-    std::unique_ptr<CDBIterator> pcursor;\n-    std::pair<char, COutPoint> keyTmp;\n-\n-    friend class CCoinsViewDB;\n-};\n-\n /** Access to the block database (blocks/index/) */\n class CBlockTreeDB : public CDBWrapper\n {"
      }
    ]
  },
  {
    "sha": "7ad414f4bfa74595ee5726e66f3527045c02a977",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWQ0MTRmNGJmYTc0NTk1ZWU1NzI2ZTY2ZjM1MjcwNDVjMDJhOTc3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-18T18:15:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-18T18:15:39Z"
      },
      "message": "doc: add comment about CCoinsViewDBCursor constructor",
      "tree": {
        "sha": "96549e8a100f419d2d23f876279ce94886335efd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96549e8a100f419d2d23f876279ce94886335efd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ad414f4bfa74595ee5726e66f3527045c02a977",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDM4tcACgkQepNdrbLE\nTwVMGhAAlCwdwtq2CyDrQFjGviP76+W+iOYdI2gWRyxh/H3NQuXrFG8C/sP2ZVIw\n50SoRWKx23il0j4a7X61tPOqcRVkdu2BgQ95gC/FTYcoGbymDZvvnKqUT/iU2bYE\nsFzPBuG4JXmsBwr5Zcf5zK+3NvwvrIE1bsqsPJeCszMqVHF+ssB7T9hP3Jq6rxeW\ngv/eRBqazoq1O95hXu/M19B6VC2zjbXI/iWdraeEBNUb3u+61RK3o6q3G8Pqc61K\nZiU+XWF8M+kKGYHdV3fCi6t5KR/nEem4OlQPs8sIMgf55G793/ApJmNi1GZbTMJH\ny1l8wfOjk19lqV3xJyySZ7GEeDrrqH2KF6w6uCjZg+58BFKI/OixsyMVFub6W6l8\njzHDLzWkW68gx7sruzPKRCR98UDbLQoPCIbY9Ri8lcZWej2mng4KEzsMXD4kzKat\nCYZ22zEDqiOc0ZZm7cb8qF3NWWz3Scg/cNjyokw+FWXpap0OulOwZpCBUu/vQu+v\nK1RcmlDqSSyJpqJ3d0o4jrMob7EVfQCvyWg5UTaN97Y5abgP7iUiNhNzkBTVu0pm\nuoY9ISYDoY3eNuDyNoiCWXEauv50JfftLZzu/U6iygB7OK2To9kGFOAIdDOmbm75\nt6Ln/vPZTgxasr4MEWX2xoewfYdDBY72F6MtzF00mgKhWhtQBC8=\n=gHJT\n-----END PGP SIGNATURE-----",
        "payload": "tree 96549e8a100f419d2d23f876279ce94886335efd\nparent 0f8a5a4dd530549d37c43da52c923ac3b2af1a03\nauthor James O'Beirne <james.obeirne@pm.me> 1624040139 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1624040139 -0400\n\ndoc: add comment about CCoinsViewDBCursor constructor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ad414f4bfa74595ee5726e66f3527045c02a977",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ad414f4bfa74595ee5726e66f3527045c02a977",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ad414f4bfa74595ee5726e66f3527045c02a977/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8a5a4dd530549d37c43da52c923ac3b2af1a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8a5a4dd530549d37c43da52c923ac3b2af1a03"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4b76bee5ab8816088c846c392aad3e4cfbd4fd5b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ad414f4bfa74595ee5726e66f3527045c02a977/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ad414f4bfa74595ee5726e66f3527045c02a977/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=7ad414f4bfa74595ee5726e66f3527045c02a977",
        "patch": "@@ -172,6 +172,8 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n class CCoinsViewDBCursor: public CCoinsViewCursor\n {\n public:\n+    // Prefer using CCoinsViewDB::Cursor() since we want to perform some\n+    // cache warmup on instantiation.\n     CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256&hashBlockIn):\n         CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n     ~CCoinsViewDBCursor() {}"
      }
    ]
  },
  {
    "sha": "29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWU1ZGQxYTViOWExODc5ZTZjM2M3ZTE1M2IyZTZmMzNhNzllOTA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-05T22:29:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-18T18:23:17Z"
      },
      "message": "consensus refactor: extract ComputeTapleafHash, ComputeTaprootMerkleRoot",
      "tree": {
        "sha": "8aaa158d145dc0f23b4316f85c9b86ca17eace12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aaa158d145dc0f23b4316f85c9b86ca17eace12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f47e01d7d491fd240f4b14302bf9edf4f05142c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 28,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8cebbc5d1088bd1e96aeaa59162fe627b9ab2b88",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
        "patch": "@@ -1847,16 +1847,14 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n-static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script)\n+{\n+    return (CHashWriter(HASHER_TAPLEAF) << leaf_version << script).GetSHA256();\n+}\n+\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n-    //! The internal pubkey (x-only, so no Y coordinate parity).\n-    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n-    //! The output pubkey (taken from the scriptPubKey).\n-    const XOnlyPubKey q{uint256(program)};\n-    // Compute the tapleaf hash.\n-    tapleaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n-    // Compute the Merkle root from the leaf and the provided path.\n     uint256 k = tapleaf_hash;\n     for (int i = 0; i < path_len; ++i) {\n         CHashWriter ss_branch{HASHER_TAPBRANCH};\n@@ -1868,8 +1866,21 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         }\n         k = ss_branch.GetSHA256();\n     }\n+    return k;\n+}\n+\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const uint256& tapleaf_hash)\n+{\n+    assert(control.size() >= TAPROOT_CONTROL_BASE_SIZE);\n+    assert(program.size() >= uint256::size());\n+    //! The internal pubkey (x-only, so no Y coordinate parity).\n+    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    //! The output pubkey (taken from the scriptPubKey).\n+    const XOnlyPubKey q{uint256(program)};\n+    // Compute the Merkle root from the leaf and the provided path.\n+    const uint256 merkle_root = ComputeTaprootMerkleRoot(control, tapleaf_hash);\n     // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n-    return q.CheckTapTweak(p, k, control[0] & 1);\n+    return q.CheckTapTweak(p, merkle_root, control[0] & 1);\n }\n \n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n@@ -1929,7 +1940,8 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n                 return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n             }\n-            if (!VerifyTaprootCommitment(control, program, exec_script, execdata.m_tapleaf_hash)) {\n+            execdata.m_tapleaf_hash = ComputeTapleafHash(control[0] & TAPROOT_LEAF_MASK, exec_script);\n+            if (!VerifyTaprootCommitment(control, program, execdata.m_tapleaf_hash)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n             execdata.m_tapleaf_hash_init = true;"
      },
      {
        "sha": "034c937b99a5062921adacd08e5c3bf0159266ab",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
        "patch": "@@ -317,6 +317,12 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n     }\n };\n \n+/** Compute the BIP341 tapleaf hash from leaf version & script. */\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script);\n+/** Compute the BIP341 taproot script tree Merkle root from control block and leaf hash.\n+ *  Requires control block to have valid length (33 + k*32, with k in {0,1,..,128}). */\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash);\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);"
      }
    ]
  },
  {
    "sha": "c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzM4OGU1YWRhMzk0YjdmZTk0ZDYyNjNmYjAyZTlkZDI4YWIzNjdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-06T07:05:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-18T18:23:17Z"
      },
      "message": "Report address as solvable based on inferred descriptor",
      "tree": {
        "sha": "6b370f464ef177ff7f9618d5b553df40201d1a29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b370f464ef177ff7f9618d5b553df40201d1a29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7388e5ada394b7fe94d6263fb02e9dd28ab367e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "94915a1373c276aeb224232ef5dc759b933ed49c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7388e5ada394b7fe94d6263fb02e9dd28ab367e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7388e5ada394b7fe94d6263fb02e9dd28ab367e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
        "patch": "@@ -3848,13 +3848,18 @@ RPCHelpMan getaddressinfo()\n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n \n-    bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n-    ret.pushKV(\"solvable\", solvable);\n-\n-    if (solvable) {\n-       ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n+    if (provider) {\n+        auto inferred = InferDescriptor(scriptPubKey, *provider);\n+        bool solvable = inferred->IsSolvable() || IsSolvable(*provider, scriptPubKey);\n+        ret.pushKV(\"solvable\", solvable);\n+        if (solvable) {\n+            ret.pushKV(\"desc\", inferred->ToString());\n+        }\n+    } else {\n+        ret.pushKV(\"solvable\", false);\n     }\n \n+\n     DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n     if (desc_spk_man) {\n         std::string desc_str;"
      }
    ]
  },
  {
    "sha": "d637a9b397816e34652d0c4d383308e39770737a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjM3YTliMzk3ODE2ZTM0NjUyZDBjNGQzODMzMDhlMzk3NzA3Mzdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-04T22:06:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-18T18:28:47Z"
      },
      "message": "Taproot descriptor inference",
      "tree": {
        "sha": "fde3fcc1ca404e53e353b8883c95c64a4fa1479b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fde3fcc1ca404e53e353b8883c95c64a4fa1479b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d637a9b397816e34652d0c4d383308e39770737a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d637a9b397816e34652d0c4d383308e39770737a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d637a9b397816e34652d0c4d383308e39770737a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d637a9b397816e34652d0c4d383308e39770737a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7388e5ada394b7fe94d6263fb02e9dd28ab367e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7388e5ada394b7fe94d6263fb02e9dd28ab367e"
      }
    ],
    "stats": {
      "total": 246,
      "additions": 237,
      "deletions": 9
    },
    "files": [
      {
        "sha": "be97a618f3e06a1bd3a976f2e69059aa9ee343f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 9,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d637a9b397816e34652d0c4d383308e39770737a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d637a9b397816e34652d0c4d383308e39770737a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=d637a9b397816e34652d0c4d383308e39770737a",
        "patch": "@@ -244,7 +244,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     bool m_xonly;\n \n public:\n-    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly = false) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n+    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         key = m_pubkey;\n@@ -931,7 +931,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, false);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n@@ -952,7 +952,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -1221,42 +1221,66 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, false);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n         return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n \n+std::unique_ptr<PubkeyProvider> InferXOnlyPubkey(const XOnlyPubKey& xkey, ParseScriptContext ctx, const SigningProvider& provider)\n+{\n+    unsigned char full_key[CPubKey::COMPRESSED_SIZE] = {0x02};\n+    std::copy(xkey.begin(), xkey.end(), full_key + 1);\n+    CPubKey pubkey(full_key);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, true);\n+    KeyOriginInfo info;\n+    if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+        return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+    } else {\n+        full_key[0] = 0x03;\n+        pubkey = CPubKey(full_key);\n+        if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+            return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+        }\n+    }\n+    return key_provider;\n+}\n+\n std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)\n {\n+    if (ctx == ParseScriptContext::P2TR && script.size() == 34 && script[0] == 32 && script[33] == OP_CHECKSIG) {\n+        XOnlyPubKey key{Span<const unsigned char>{script.data() + 1, script.data() + 33}};\n+        return std::make_unique<PKDescriptor>(InferXOnlyPubkey(key, ctx, provider));\n+    }\n+\n     std::vector<std::vector<unsigned char>> data;\n     TxoutType txntype = Solver(script, data);\n \n-    if (txntype == TxoutType::PUBKEY) {\n+    if (txntype == TxoutType::PUBKEY && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         CPubKey pubkey(data[0]);\n         if (pubkey.IsValid()) {\n             return std::make_unique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::PUBKEYHASH) {\n+    if (txntype == TxoutType::PUBKEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_KEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::MULTISIG) {\n+    if (txntype == TxoutType::MULTISIG && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n         for (size_t i = 1; i + 1 < data.size(); ++i) {\n             CPubKey pubkey(data[i]);\n@@ -1273,7 +1297,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<SHDescriptor>(std::move(sub));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         CScriptID scriptid;\n         CRIPEMD160().Write(data[0].data(), data[0].size()).Finalize(scriptid.begin());\n         CScript subscript;\n@@ -1282,6 +1306,40 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<WSHDescriptor>(std::move(sub));\n         }\n     }\n+    if (txntype == TxoutType::WITNESS_V1_TAPROOT && ctx == ParseScriptContext::TOP) {\n+        // Extract x-only pubkey from output.\n+        XOnlyPubKey pubkey;\n+        std::copy(data[0].begin(), data[0].end(), pubkey.begin());\n+        // Request spending data.\n+        TaprootSpendData tap;\n+        if (provider.GetTaprootSpendData(pubkey, tap)) {\n+            // If found, convert it back to tree form.\n+            auto tree = InferTaprootTree(tap, pubkey);\n+            if (tree) {\n+                // If that works, try to infer subdescriptors for all leaves.\n+                bool ok = true;\n+                std::vector<std::unique_ptr<DescriptorImpl>> subscripts; //!< list of script subexpressions\n+                std::vector<int> depths; //!< depth in the tree of each subexpression (same length subscripts)\n+                for (const auto& [depth, script, leaf_ver] : *tree) {\n+                    std::unique_ptr<DescriptorImpl> subdesc;\n+                    if (leaf_ver == TAPROOT_LEAF_TAPSCRIPT) {\n+                        subdesc = InferScript(script, ParseScriptContext::P2TR, provider);\n+                    }\n+                    if (!subdesc) {\n+                        ok = false;\n+                        break;\n+                    } else {\n+                        subscripts.push_back(std::move(subdesc));\n+                        depths.push_back(depth);\n+                    }\n+                }\n+                if (ok) {\n+                    auto key = InferXOnlyPubkey(tap.internal_key, ParseScriptContext::P2TR, provider);\n+                    return std::make_unique<TRDescriptor>(std::move(key), std::move(subscripts), std::move(depths));\n+                }\n+            }\n+        }\n+    }\n \n     CTxDestination dest;\n     if (ExtractDestination(script, dest)) {"
      },
      {
        "sha": "b3dd5442fca3c6f986d9db290e7bb886285f9659",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d637a9b397816e34652d0c4d383308e39770737a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d637a9b397816e34652d0c4d383308e39770737a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=d637a9b397816e34652d0c4d383308e39770737a",
        "patch": "@@ -520,3 +520,138 @@ TaprootSpendData TaprootBuilder::GetSpendData() const\n     }\n     return spd;\n }\n+\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output)\n+{\n+    // Verify that the output matches the assumed Merkle root and internal key.\n+    auto tweak = spenddata.internal_key.CreateTapTweak(spenddata.merkle_root.IsNull() ? nullptr : &spenddata.merkle_root);\n+    if (!tweak || tweak->first != output) return std::nullopt;\n+    // If the Merkle root is 0, the tree is empty, and we're done.\n+    std::vector<std::tuple<int, CScript, int>> ret;\n+    if (spenddata.merkle_root.IsNull()) return ret;\n+\n+    /** Data structure to represent the nodes of the tree we're going to be build. */\n+    struct TreeNode {\n+        /** Hash of this none, if known; 0 otherwise. */\n+        uint256 hash;\n+        /** The left and right subtrees (note that their order is irrelevant). */\n+        std::unique_ptr<TreeNode> sub[2];\n+        /** If this is known to be a leaf node, a pointer to the (script, leaf_ver) pair.\n+         *  nullptr otherwise. */\n+        const std::pair<CScript, int>* leaf = nullptr;\n+        /** Whether or not this node has been explored (is known to be a leaf, or known to have children). */\n+        bool explored = false;\n+        /** Whether or not this node is an inner node (unknown until explored = true). */\n+        bool inner;\n+        /** Whether or not we have produced output for this subtree. */\n+        bool done = false;\n+    };\n+\n+    // Build tree from the provides branches.\n+    TreeNode root;\n+    root.hash = spenddata.merkle_root;\n+    for (const auto& [key, control_blocks] : spenddata.scripts) {\n+        const auto& [script, leaf_ver] = key;\n+        for (const auto& control : control_blocks) {\n+            // Skip script records with nonsensical leaf version.\n+            if (leaf_ver < 0 || leaf_ver >= 0x100 || leaf_ver & 1) continue;\n+            // Skip script records with invalid control block sizes.\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE ||\n+                ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) continue;\n+            // Skip script records that don't match the control block.\n+            if ((control[0] & TAPROOT_LEAF_MASK) != leaf_ver) continue;\n+            // Skip script records that don't match the provided Merkle root.\n+            const uint256 leaf_hash = ComputeTapleafHash(leaf_ver, script);\n+            const uint256 merkle_root = ComputeTaprootMerkleRoot(control, leaf_hash);\n+            if (merkle_root != spenddata.merkle_root) continue;\n+\n+            TreeNode* node = &root;\n+            size_t levels = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+            for (size_t depth = 0; depth < levels; ++depth) {\n+                // Can't descend into a node which we already know is a leaf.\n+                if (node->explored && !node->inner) return std::nullopt;\n+\n+                // Extract partner hash from Merkle branch in control block.\n+                uint256 hash;\n+                std::copy(control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - 1 - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          hash.begin());\n+\n+                if (node->sub[0]) {\n+                    // Descend into the existing left or right branch.\n+                    bool desc = false;\n+                    for (int i = 0; i < 2; ++i) {\n+                        if (node->sub[i]->hash == hash || (node->sub[i]->hash.IsNull() && node->sub[1-i]->hash != hash)) {\n+                            node->sub[i]->hash = hash;\n+                            node = &*node->sub[1-i];\n+                            desc = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!desc) return std::nullopt; // This probably requires a hash collision to hit.\n+                } else {\n+                    // We're in an unexplored node. Create subtrees and descend.\n+                    node->explored = true;\n+                    node->inner = true;\n+                    node->sub[0] = std::make_unique<TreeNode>();\n+                    node->sub[1] = std::make_unique<TreeNode>();\n+                    node->sub[1]->hash = hash;\n+                    node = &*node->sub[0];\n+                }\n+            }\n+            // Cannot turn a known inner node into a leaf.\n+            if (node->sub[0]) return std::nullopt;\n+            node->explored = true;\n+            node->inner = false;\n+            node->leaf = &key;\n+            node->hash = leaf_hash;\n+        }\n+    }\n+\n+    // Recursive processing to turn the tree into flattened output. Use an explicit stack here to avoid\n+    // overflowing the call stack (the tree may be 128 levels deep).\n+    std::vector<TreeNode*> stack{&root};\n+    while (!stack.empty()) {\n+        TreeNode& node = *stack.back();\n+        if (!node.explored) {\n+            // Unexplored node, which means the tree is incomplete.\n+            return std::nullopt;\n+        } else if (!node.inner) {\n+            // Leaf node; produce output.\n+            ret.emplace_back(stack.size() - 1, node.leaf->first, node.leaf->second);\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (node.sub[0]->done && !node.sub[1]->done && !node.sub[1]->explored && !node.sub[1]->hash.IsNull() &&\n+                   (CHashWriter{HASHER_TAPBRANCH} << node.sub[1]->hash << node.sub[1]->hash).GetSHA256() == node.hash) {\n+            // Whenever there are nodes with two identical subtrees under it, we run into a problem:\n+            // the control blocks for the leaves underneath those will be identical as well, and thus\n+            // they will all be matched to the same path in the tree. The result is that at the location\n+            // where the duplicate occurred, the left child will contain a normal tree that can be explored\n+            // and processed, but the right one will remain unexplored.\n+            //\n+            // This situation can be detected, by encountering an inner node with unexplored right subtree\n+            // with known hash, and H_TapBranch(hash, hash) is equal to the parent node (this node)'s hash.\n+            //\n+            // To deal with this, simply process the left tree a second time (set its done flag to false;\n+            // noting that the done flag of its children have already been set to false after processing\n+            // those). To avoid ending up in an infinite loop, set the done flag of the right (unexplored)\n+            // subtree to true.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = true;\n+        } else if (node.sub[0]->done && node.sub[1]->done) {\n+            // An internal node which we're finished with.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = false;\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (!node.sub[0]->done) {\n+            // An internal node whose left branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[0]);\n+        } else if (!node.sub[1]->done) {\n+            // An internal node whose right branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[1]);\n+        }\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "ac4e2f327623593dd3009cf7563b11198f16336e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d637a9b397816e34652d0c4d383308e39770737a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d637a9b397816e34652d0c4d383308e39770737a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d637a9b397816e34652d0c4d383308e39770737a",
        "patch": "@@ -327,4 +327,12 @@ class TaprootBuilder\n     TaprootSpendData GetSpendData() const;\n };\n \n+/** Given a TaprootSpendData and the output key, reconstruct its script tree.\n+ *\n+ * If the output doesn't match the spenddata, or if the data in spenddata is incomplete,\n+ * std::nullopt is returned. Otherwise, a vector of (depth, script, leaf_ver) tuples is\n+ * returned, corresponding to a depth-first traversal of the script tree.\n+ */\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output);\n+\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "0eac814c52487d6866c148a5a65f23090b18c529",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d637a9b397816e34652d0c4d383308e39770737a/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d637a9b397816e34652d0c4d383308e39770737a/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=d637a9b397816e34652d0c4d383308e39770737a",
        "patch": "@@ -230,6 +230,12 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n+            desc_a = self.addr_gen.getaddressinfo(addr_g)['desc']\n+            if desc.startswith(\"tr(\"):\n+                assert desc_a.startswith(\"tr(\")\n+            rederive = self.nodes[1].deriveaddresses(desc_a)\n+            assert_equal(len(rederive), 1)\n+            assert_equal(rederive[0], addr_g)\n \n         # tr descriptors cannot be imported when Taproot is not active\n         result = self.privs_tr_enabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n@@ -374,13 +380,34 @@ def run_test(self):\n             None,\n             2\n         )\n+        self.do_test(\n+            \"tr(XPRV,{XPUB,XPUB})\",\n+            \"tr($1/*,{pk($2/*),pk($2/*)})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [pk(k2), pk(k2)]),\n+            2\n+        )\n+        self.do_test(\n+            \"tr(XPRV,{{XPUB,H},{H,XPUB}})\",\n+            \"tr($1/*,{{pk($2/*),pk($H)},{pk($H),pk($2/*)}})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [[pk(k2), pk(H_POINT)], [pk(H_POINT), pk(k2)]]),\n+            2\n+        )\n         self.do_test(\n             \"tr(XPUB,{{H,{H,XPUB}},{H,{H,{H,XPRV}}}})\",\n             \"tr($1/*,{{pk($H),{pk($H),pk($2/*)}},{pk($H),{pk($H),{pk($H),pk($3/*)}}}})\",\n             [False, False, True],\n             lambda k1, k2, k3: (key(k1), [[pk(H_POINT), [pk(H_POINT), pk(k2)]], [pk(H_POINT), [pk(H_POINT), [pk(H_POINT), pk(k3)]]]]),\n             3\n         )\n+        self.do_test(\n+            \"tr(XPRV,{XPUB,{{XPUB,{H,H}},{{H,H},XPUB}}})\",\n+            \"tr($1/*,{pk($2/*),{{pk($2/*),{pk($H),pk($H)}},{{pk($H),pk($H)},pk($2/*)}}})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [pk(k2), [[pk(k2), [pk(H_POINT), pk(H_POINT)]], [[pk(H_POINT), pk(H_POINT)], pk(k2)]]]),\n+            2\n+        )\n \n         self.log.info(\"Sending everything back...\")\n "
      }
    ]
  },
  {
    "sha": "906d7913117c8f10934b37afa27ae8ac565da042",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDZkNzkxMzExN2M4ZjEwOTM0YjM3YWZhMjdhZThhYzU2NWRhMDQy",
    "commit": {
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2021-06-18T23:13:07Z"
      },
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2021-06-18T23:13:07Z"
      },
      "message": "fuzz: add missing ECCVerifyHandle to base_encode_decode",
      "tree": {
        "sha": "ee697b2ff66c40b056dceab7aa5663026246e9bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee697b2ff66c40b056dceab7aa5663026246e9bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/906d7913117c8f10934b37afa27ae8ac565da042",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906d7913117c8f10934b37afa27ae8ac565da042",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/906d7913117c8f10934b37afa27ae8ac565da042",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906d7913117c8f10934b37afa27ae8ac565da042/comments",
    "author": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following{/other_user}",
      "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following{/other_user}",
      "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f47e01d7d491fd240f4b14302bf9edf4f05142c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2b4f15115be7fa5fd9b8b9bf1f08b812171a79e4",
        "filename": "src/test/fuzz/base_encode_decode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/906d7913117c8f10934b37afa27ae8ac565da042/src/test/fuzz/base_encode_decode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/906d7913117c8f10934b37afa27ae8ac565da042/src/test/fuzz/base_encode_decode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/base_encode_decode.cpp?ref=906d7913117c8f10934b37afa27ae8ac565da042",
        "patch": "@@ -14,7 +14,12 @@\n #include <string>\n #include <vector>\n \n-FUZZ_TARGET(base_encode_decode)\n+void initialize_base_encode_decode()\n+{\n+    static const ECCVerifyHandle verify_handle;\n+}\n+\n+FUZZ_TARGET_INIT(base_encode_decode, initialize_base_encode_decode)\n {\n     const std::string random_encoded_string(buffer.begin(), buffer.end());\n "
      }
    ]
  },
  {
    "sha": "e172ea880498cb381bf527602250c173bdb1222e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTcyZWE4ODA0OThjYjM4MWJmNTI3NjAyMjUwYzE3M2JkYjEyMjJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-19T06:47:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-19T06:47:52Z"
      },
      "message": "Merge bitcoin/bitcoin#22210: test: Use MiniWallet in test_no_inherited_signaling RBF test\n\nfa7d71f270b89c9d06230d4ff262646f9ea29f4a test: Run pep-8 on touched test (MarcoFalke)\nfab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3 test: Use MiniWallet in test_no_inherited_signaling RBF test (MarcoFalke)\nfab871f649e3da4a5a5f6cffac3fc748bb1ca900 test: Remove unused generate() from test (MarcoFalke)\nfaff3f35b778d9af3d649b303d7edab49bfe40b4 test: Add txin.sequence option to MiniWallet (MarcoFalke)\n\nPull request description:\n\n  This comes with nice benefits:\n  * Less code and complexity\n  * Test can be run without wallet compiled in\n\n  Also add some additional checks for `getmempoolentry` (#22209) and other cleanups :art:\n\nACKs for top commit:\n  mjdietzx:\n    Tested ACK fa7d71f270b89c9d06230d4ff262646f9ea29f4a thanks for the explanations, nicely done\n  theStack:\n    ACK fa7d71f270b89c9d06230d4ff262646f9ea29f4a \ud83c\udf77\n\nTree-SHA512: 0e9b8fe985779d8d7034d256deed627125bb374b6ae2972c461b3a220739a51061c6147ad69339bee16282f82716c7f3f8a7a89c693ceb1e47ea50709272332a",
      "tree": {
        "sha": "077b12620dad9a1aaad972d7507a961833663901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/077b12620dad9a1aaad972d7507a961833663901"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e172ea880498cb381bf527602250c173bdb1222e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhBUAv+OAFSsmHWRu8os899iocvHoFaEU7Mws0zqU8g10P6muh/sZWX9brhUhAa\nECv3aq4ehQlsQtE5rguh98HXnNE8TWIOFg/MUfMHaJf1hSWVgqieS3b8hmLYDjr0\nIJkSm5zhmJAi/jXt3KJK41E3n51XWWM1a6psjD+3b0CSHkwvZIsFsbo2c+K5yt//\ngE0x9cP0QvKr2+dvDRAVpb6Pxp6Nonb84FAz7mjTRZmOEVbeoKL9+F7TK7zP2J1s\nUcSwY2rsIfTiVYn6FWdX7YghLDj5kuwi0HnxDK5uxwYGmArF2PyJcOqZOI52OW3h\n818YlRM8Clz8JiN1tx4uYtvnH7N6+T2lX7ZNVtBUDCgnOlPHC4q2Vfa7DhPra1oz\nyXOttSbscTZx7waYgouXcTncG78YCl6tZPu+OeOpU0+SrcGcnvlZSnraSOgp0L5d\n1ku4vr9qS+mEOjRDjwiM5TE+o7BIyhTeau2sqeIGV1RlzxQKHI311FXs8YnjlS7j\nAZFBJm5l\n=xJZ0\n-----END PGP SIGNATURE-----",
        "payload": "tree 077b12620dad9a1aaad972d7507a961833663901\nparent 0f47e01d7d491fd240f4b14302bf9edf4f05142c\nparent fa7d71f270b89c9d06230d4ff262646f9ea29f4a\nauthor MarcoFalke <falke.marco@gmail.com> 1624085258 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624085272 +0200\n\nMerge bitcoin/bitcoin#22210: test: Use MiniWallet in test_no_inherited_signaling RBF test\n\nfa7d71f270b89c9d06230d4ff262646f9ea29f4a test: Run pep-8 on touched test (MarcoFalke)\nfab7e99c2a4b02a41b7448b45f0e6cdfdbb53ac3 test: Use MiniWallet in test_no_inherited_signaling RBF test (MarcoFalke)\nfab871f649e3da4a5a5f6cffac3fc748bb1ca900 test: Remove unused generate() from test (MarcoFalke)\nfaff3f35b778d9af3d649b303d7edab49bfe40b4 test: Add txin.sequence option to MiniWallet (MarcoFalke)\n\nPull request description:\n\n  This comes with nice benefits:\n  * Less code and complexity\n  * Test can be run without wallet compiled in\n\n  Also add some additional checks for `getmempoolentry` (#22209) and other cleanups :art:\n\nACKs for top commit:\n  mjdietzx:\n    Tested ACK fa7d71f270b89c9d06230d4ff262646f9ea29f4a thanks for the explanations, nicely done\n  theStack:\n    ACK fa7d71f270b89c9d06230d4ff262646f9ea29f4a \ud83c\udf77\n\nTree-SHA512: 0e9b8fe985779d8d7034d256deed627125bb374b6ae2972c461b3a220739a51061c6147ad69339bee16282f82716c7f3f8a7a89c693ceb1e47ea50709272332a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e172ea880498cb381bf527602250c173bdb1222e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e172ea880498cb381bf527602250c173bdb1222e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e172ea880498cb381bf527602250c173bdb1222e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f47e01d7d491fd240f4b14302bf9edf4f05142c"
      },
      {
        "sha": "fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d71f270b89c9d06230d4ff262646f9ea29f4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7d71f270b89c9d06230d4ff262646f9ea29f4a"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 88,
      "deletions": 94
    },
    "files": [
      {
        "sha": "b99b64e16d1586e51fa173c39604f714b713e25e",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 82,
        "deletions": 88,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e172ea880498cb381bf527602250c173bdb1222e/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e172ea880498cb381bf527602250c173bdb1222e/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=e172ea880498cb381bf527602250c173bdb1222e",
        "patch": "@@ -7,17 +7,20 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, BIP125_SEQUENCE_NUMBER\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n from test_framework.script_util import DUMMY_P2WPKH_SCRIPT, DUMMY_2_P2WPKH_SCRIPT\n+from test_framework.wallet import MiniWallet\n \n MAX_REPLACEMENT_LIMIT = 100\n \n+\n def txToHex(tx):\n     return tx.serialize().hex()\n \n+\n def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n \n@@ -26,12 +29,12 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     confirmed - txouts created will be confirmed in the blockchain;\n                 unconfirmed otherwise.\n     \"\"\"\n-    fee = 1*COIN\n-    while node.getbalance() < satoshi_round((amount + fee)/COIN):\n+    fee = 1 * COIN\n+    while node.getbalance() < satoshi_round((amount + fee) / COIN):\n         node.generate(COINBASE_MATURITY)\n \n     new_addr = node.getnewaddress()\n-    txid = node.sendtoaddress(new_addr, satoshi_round((amount+fee)/COIN))\n+    txid = node.sendtoaddress(new_addr, satoshi_round((amount + fee) / COIN))\n     tx1 = node.getrawtransaction(txid, 1)\n     txid = int(txid, 16)\n     i, _ = next(filter(lambda vout: new_addr == vout[1]['scriptPubKey']['address'], enumerate(tx1['vout'])))\n@@ -78,10 +81,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        # Leave IBD\n-        self.nodes[0].generate(1)\n-\n-        make_utxo(self.nodes[0], 1*COIN)\n+        make_utxo(self.nodes[0], 1 * COIN)\n \n         # Ensure nodes are synced\n         self.sync_all()\n@@ -123,7 +123,7 @@ def run_test(self):\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # make_utxo may have generated a bunch of blocks, so we need to sync\n         # before we can spend the coins generated, or else the resulting\n@@ -165,14 +165,14 @@ def test_simple_doublespend(self):\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n \n-        initial_nValue = 50*COIN\n+        initial_nValue = 50 * COIN\n         tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n \n         prevout = tx0_outpoint\n         remaining_value = initial_nValue\n         chain_txids = []\n-        while remaining_value > 10*COIN:\n-            remaining_value -= 1*COIN\n+        while remaining_value > 10 * COIN:\n+            remaining_value -= 1 * COIN\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n@@ -205,10 +205,10 @@ def test_doublespend_chain(self):\n     def test_doublespend_tree(self):\n         \"\"\"Doublespend of a big tree of transactions\"\"\"\n \n-        initial_nValue = 50*COIN\n+        initial_nValue = 50 * COIN\n         tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n \n-        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _total_txs=None):\n+        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _total_txs=None):\n             if _total_txs is None:\n                 _total_txs = [0]\n             if _total_txs[0] >= max_txs:\n@@ -239,7 +239,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n                                   _total_txs=_total_txs):\n                     yield x\n \n-        fee = int(0.0001*COIN)\n+        fee = int(0.0001 * COIN)\n         n = MAX_REPLACEMENT_LIMIT\n         tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n         assert_equal(len(tree_txs), n)\n@@ -267,8 +267,8 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n         # Try again, but with more total transactions than the \"max txs\n         # double-spent at once\" anti-DoS limit.\n-        for n in (MAX_REPLACEMENT_LIMIT+1, MAX_REPLACEMENT_LIMIT*2):\n-            fee = int(0.0001*COIN)\n+        for n in (MAX_REPLACEMENT_LIMIT + 1, MAX_REPLACEMENT_LIMIT * 2):\n+            fee = int(0.0001 * COIN)\n             tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n             tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n             assert_equal(len(tree_txs), n)\n@@ -286,7 +286,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n     def test_replacement_feeperkb(self):\n         \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -298,16 +298,16 @@ def test_replacement_feeperkb(self):\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*999000]))]\n+        tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 999000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n-        utxo1 = make_utxo(self.nodes[0], int(1.2*COIN))\n-        utxo2 = make_utxo(self.nodes[0], 3*COIN)\n+        utxo1 = make_utxo(self.nodes[0], int(1.2 * COIN))\n+        utxo2 = make_utxo(self.nodes[0], 3 * COIN)\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n@@ -346,8 +346,8 @@ def test_spends_of_conflicting_outputs(self):\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n-        confirmed_utxo = make_utxo(self.nodes[0], int(1.1*COIN))\n-        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1*COIN), False)\n+        confirmed_utxo = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1 * COIN), False)\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n@@ -369,13 +369,13 @@ def test_too_many_replacements(self):\n         # transactions\n \n         # Start by creating a single transaction with many outputs\n-        initial_nValue = 10*COIN\n+        initial_nValue = 10 * COIN\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n-        fee = int(0.0001*COIN)\n-        split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n+        fee = int(0.0001 * COIN)\n+        split_value = int((initial_nValue - fee) / (MAX_REPLACEMENT_LIMIT + 1))\n \n         outputs = []\n-        for _ in range(MAX_REPLACEMENT_LIMIT+1):\n+        for _ in range(MAX_REPLACEMENT_LIMIT + 1):\n             outputs.append(CTxOut(split_value, CScript([1])))\n \n         splitting_tx = CTransaction()\n@@ -387,7 +387,7 @@ def test_too_many_replacements(self):\n         txid = int(txid, 16)\n \n         # Now spend each of those outputs individually\n-        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+        for i in range(MAX_REPLACEMENT_LIMIT + 1):\n             tx_i = CTransaction()\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n             tx_i.vout = [CTxOut(split_value - fee, DUMMY_P2WPKH_SCRIPT)]\n@@ -397,9 +397,9 @@ def test_too_many_replacements(self):\n         # Now create doublespend of the whole lot; should fail.\n         # Need a big enough fee to cover all spending transactions and have\n         # a higher fee rate\n-        double_spend_value = (split_value-100*fee)*(MAX_REPLACEMENT_LIMIT+1)\n+        double_spend_value = (split_value - 100 * fee) * (MAX_REPLACEMENT_LIMIT + 1)\n         inputs = []\n-        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+        for i in range(MAX_REPLACEMENT_LIMIT + 1):\n             inputs.append(CTxIn(COutPoint(txid, i), nSequence=0))\n         double_tx = CTransaction()\n         double_tx.vin = inputs\n@@ -418,7 +418,7 @@ def test_too_many_replacements(self):\n \n     def test_opt_in(self):\n         \"\"\"Replacing should only work if orig tx opted in\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n@@ -439,7 +439,7 @@ def test_opt_in(self):\n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n@@ -467,7 +467,7 @@ def test_opt_in(self):\n         tx3a = CTransaction()\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n-        tx3a.vout = [CTxOut(int(0.9*COIN), CScript([b'c'])), CTxOut(int(0.9*COIN), CScript([b'd']))]\n+        tx3a.vout = [CTxOut(int(0.9 * COIN), CScript([b'c'])), CTxOut(int(0.9 * COIN), CScript([b'd']))]\n         tx3a_hex = txToHex(tx3a)\n \n         tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n@@ -495,7 +495,7 @@ def test_prioritised_transactions(self):\n         # correctly used by replacement logic\n \n         # 1. Check that feeperkb uses modified fees\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -506,22 +506,22 @@ def test_prioritised_transactions(self):\n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*740000]))]\n+        tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 740000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n-        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1 * COIN))\n \n         # Now tx1b should be able to replace tx1a\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n         assert tx1b_txid in self.nodes[0].getrawmempool()\n \n         # 2. Check that absolute fee checks use modified fee.\n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n@@ -540,7 +540,7 @@ def test_prioritised_transactions(self):\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n \n         # Now prioritise tx2b to have a higher modified fee\n-        self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1 * COIN))\n \n         # tx2b should now be accepted\n         tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, 0)\n@@ -550,86 +550,80 @@ def test_prioritised_transactions(self):\n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]\n         ins = [us0]\n-        outs = {self.nodes[0].getnewaddress() : Decimal(1.0000000)}\n+        outs = {self.nodes[0].getnewaddress(): Decimal(1.0000000)}\n         rawtx0 = self.nodes[0].createrawtransaction(ins, outs, 0, True)\n         rawtx1 = self.nodes[0].createrawtransaction(ins, outs, 0, False)\n-        json0  = self.nodes[0].decoderawtransaction(rawtx0)\n-        json1  = self.nodes[0].decoderawtransaction(rawtx1)\n+        json0 = self.nodes[0].decoderawtransaction(rawtx0)\n+        json1 = self.nodes[0].decoderawtransaction(rawtx1)\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n         frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n         frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n-        json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n-        json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n+        json0 = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n+        json1 = self.nodes[0].decoderawtransaction(frawtx2b['hex'])\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n     def test_no_inherited_signaling(self):\n-        # Send tx from which to conflict outputs later\n-        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=76, num=1)\n+        confirmed_utxo = wallet.get_utxo()\n \n         # Create an explicitly opt-in parent transaction\n-        optin_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99998\")})\n-\n-        optin_parent_tx = self.nodes[0].signrawtransactionwithwallet(optin_parent_tx)\n-\n-        # Broadcast parent tx\n-        optin_parent_txid = self.nodes[0].sendrawtransaction(hexstring=optin_parent_tx[\"hex\"], maxfeerate=0)\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_parent_tx = self.nodes[0].createrawtransaction([{\n-            'txid': base_txid,\n-            'vout': 0,\n-            \"sequence\": 0xfffffffd,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.90000\")})\n-\n-        replacement_parent_tx = self.nodes[0].signrawtransactionwithwallet(replacement_parent_tx)\n+        optin_parent_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_parent_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.02'),\n+        )\n \n         # Test if parent tx can be replaced.\n-        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']], maxfeerate=0)[0]\n+        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']])[0]\n \n         # Parent can be replaced.\n         assert_equal(res['allowed'], True)\n \n         # Create an opt-out child tx spending the opt-in parent\n-        optout_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99990\")})\n-\n-        optout_child_tx = self.nodes[0].signrawtransactionwithwallet(optout_child_tx)\n-\n-        # Broadcast child tx\n-        optout_child_txid = self.nodes[0].sendrawtransaction(hexstring=optout_child_tx[\"hex\"], maxfeerate=0)\n-        assert optout_child_txid in self.nodes[0].getrawmempool()\n-\n-        replacement_child_tx = self.nodes[0].createrawtransaction([{\n-            'txid': optin_parent_txid,\n-            'vout': 0,\n-            \"sequence\": 0xffffffff,\n-        }], {self.nodes[0].getnewaddress(): Decimal(\"9.00000\")})\n-\n-        replacement_child_tx = self.nodes[0].signrawtransactionwithwallet(replacement_child_tx)\n+        parent_utxo = wallet.get_utxo(txid=optin_parent_tx['txid'])\n+        optout_child_tx = wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.01'),\n+        )\n+\n+        # Reports true due to inheritance\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+\n+        replacement_child_tx = wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=parent_utxo,\n+            sequence=0xffffffff,\n+            fee_rate=Decimal('0.02'),\n+            mempool_valid=False,\n+        )\n \n         # Broadcast replacement child tx\n         # BIP 125 :\n         # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n         # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_txid`) does.\n+        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n         # See CVE-2021-31876 for further explanations.\n-        assert optin_parent_txid in self.nodes[0].getrawmempool()\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      },
      {
        "sha": "3d791743565e5ae0f46ab8f9d236522b297c57ce",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e172ea880498cb381bf527602250c173bdb1222e/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e172ea880498cb381bf527602250c173bdb1222e/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=e172ea880498cb381bf527602250c173bdb1222e",
        "patch": "@@ -39,7 +39,7 @@\n COIN = 100000000  # 1 btc in satoshis\n MAX_MONEY = 21000000 * COIN\n \n-BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is BIP 125 opt-in and BIP 68-opt-out\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is rbf-opt-in (BIP 125) and csv-opt-out (BIP 68)\n \n MAX_PROTOCOL_MESSAGE_LENGTH = 4000000  # Maximum length of incoming protocol messages\n MAX_HEADERS_RESULTS = 2000  # Number of headers sent in one getheaders result"
      },
      {
        "sha": "ad58a62e2864f3e8b4738c183f128fbc4ed624ce",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e172ea880498cb381bf527602250c173bdb1222e/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e172ea880498cb381bf527602250c173bdb1222e/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=e172ea880498cb381bf527602250c173bdb1222e",
        "patch": "@@ -124,13 +124,13 @@ def get_utxo(self, *, txid: Optional[str]='', mark_as_spent=True):\n         else:\n             return self._utxos[index]\n \n-    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, locktime=0):\n+    def send_self_transfer(self, **kwargs):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n-        tx = self.create_self_transfer(fee_rate=fee_rate, from_node=from_node, utxo_to_spend=utxo_to_spend)\n-        self.sendrawtransaction(from_node=from_node, tx_hex=tx['hex'])\n+        tx = self.create_self_transfer(**kwargs)\n+        self.sendrawtransaction(from_node=kwargs['from_node'], tx_hex=tx['hex'])\n         return tx\n \n-    def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0):\n+    def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0, sequence=0):\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n@@ -140,7 +140,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         assert send_value > 0\n \n         tx = CTransaction()\n-        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']), nSequence=sequence)]\n         tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n         tx.nLockTime = locktime\n         if not self._address:"
      }
    ]
  },
  {
    "sha": "965e93743454112c0c3c66bf24852f63ee07b862",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjVlOTM3NDM0NTQxMTJjMGMzYzY2YmYyNDg1MmY2M2VlMDdiODYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-19T07:40:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-19T07:40:10Z"
      },
      "message": "Merge bitcoin/bitcoin#22279: fuzz: add missing ECCVerifyHandle to base_encode_decode\n\n906d7913117c8f10934b37afa27ae8ac565da042 fuzz: add missing ECCVerifyHandle to base_encode_decode (Andrew Poelstra)\n\nPull request description:\n\n  It is possible to trigger a fuzztest failure in the `base_encode_decode` by asking it to decode any PSBT that has HD keypaths in it. For example, this one\n\n  ```\n  cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\n  ```\n\n  which I took straight from the PSBT test vectors. The reason is that in src/psbt.h we call `DeserializeHDKeypaths`, which in turn calls `CPubKey::IsFullyValid`, which in turn asserts that a secp context has been created.\n\n  The error appears to be masked on many systems by the definition of `instance_of_eccryptoclosure` in src/script/bitcoinconsensus.cpp, which defines a static object which contains an `ECCVerifyHandle`. If you just comment out that line you can reliably trigger the fuzz test failure, e.g. by creating a file `crash` with the above PSBT, and runnnig\n\n  ```\n  ASAN_OPTIONS=symbolize=0:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1 UBSAN_OPTIONS=suppressions=./test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1 FUZZ=base_encode_decode ./src/test/fuzz/fuzz -seed_inputs=crash\n  ```\n\nACKs for top commit:\n  practicalswift:\n    cr ACK 906d7913117c8f10934b37afa27ae8ac565da042\n\nTree-SHA512: b98b60573c21efe28503fe351883c6f0d9ac99d0dd6f100537b16ac53476617b8a3f899faf0c23d893d34a01b3bbe4a784499ec6f9c7000292e850bed449bd85",
      "tree": {
        "sha": "21230cec8e2fddf9614a1dc3bd25eb621519f855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21230cec8e2fddf9614a1dc3bd25eb621519f855"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/965e93743454112c0c3c66bf24852f63ee07b862",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiymQwAgZSTtiP0EZfkhJvk4pw11cY4XMyvOT0QNC5TIigFNvAm4fwTMoYR+dJp\n1R3aVdf6MhNbq5Twm2IK0fst6wQKP8OuIaoFyYITbs5kjgmbnBDdrf6wjpeCZrnb\nw97fHOv2Bc+PuHLBGOyIGerY6LYYXaqZnC4pq6tq7QVyJZS5/IC4+H1hQkFM9hd0\nFR1PZHMWWXB1JynGzB9w60wYNIDvzKFHmzg1DynJJ1oTiZgdYmKFcYfRLKb9QeaG\nPap2L5dlZKQh7a5MWYo4KFdWivgcqb05Gmd2peo8zSpQxakOdGF/NQx9GHozbR/b\nObxWpWRGeRyH93M17fOlR1XUF91RaLdH/yNS3MvuM1V/sgorEShRnfS9I1d8lT09\n+LYfe1FKW/Mgqu7jsktaUvHwXuZ4zz2M1BFtbq0M7HUst/8NY/Zkl/IaxGbUs2uz\nMpw7nIDFX02t9PQ1hyK022L4D4hUYR0oU2xd12LoUQeGMH/95a5zL8o3fMPu1f3j\nijvqdTaC\n=HhB/\n-----END PGP SIGNATURE-----",
        "payload": "tree 21230cec8e2fddf9614a1dc3bd25eb621519f855\nparent e172ea880498cb381bf527602250c173bdb1222e\nparent 906d7913117c8f10934b37afa27ae8ac565da042\nauthor MarcoFalke <falke.marco@gmail.com> 1624088408 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624088410 +0200\n\nMerge bitcoin/bitcoin#22279: fuzz: add missing ECCVerifyHandle to base_encode_decode\n\n906d7913117c8f10934b37afa27ae8ac565da042 fuzz: add missing ECCVerifyHandle to base_encode_decode (Andrew Poelstra)\n\nPull request description:\n\n  It is possible to trigger a fuzztest failure in the `base_encode_decode` by asking it to decode any PSBT that has HD keypaths in it. For example, this one\n\n  ```\n  cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\n  ```\n\n  which I took straight from the PSBT test vectors. The reason is that in src/psbt.h we call `DeserializeHDKeypaths`, which in turn calls `CPubKey::IsFullyValid`, which in turn asserts that a secp context has been created.\n\n  The error appears to be masked on many systems by the definition of `instance_of_eccryptoclosure` in src/script/bitcoinconsensus.cpp, which defines a static object which contains an `ECCVerifyHandle`. If you just comment out that line you can reliably trigger the fuzz test failure, e.g. by creating a file `crash` with the above PSBT, and runnnig\n\n  ```\n  ASAN_OPTIONS=symbolize=0:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1 UBSAN_OPTIONS=suppressions=./test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1 FUZZ=base_encode_decode ./src/test/fuzz/fuzz -seed_inputs=crash\n  ```\n\nACKs for top commit:\n  practicalswift:\n    cr ACK 906d7913117c8f10934b37afa27ae8ac565da042\n\nTree-SHA512: b98b60573c21efe28503fe351883c6f0d9ac99d0dd6f100537b16ac53476617b8a3f899faf0c23d893d34a01b3bbe4a784499ec6f9c7000292e850bed449bd85\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965e93743454112c0c3c66bf24852f63ee07b862",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/965e93743454112c0c3c66bf24852f63ee07b862",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965e93743454112c0c3c66bf24852f63ee07b862/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e172ea880498cb381bf527602250c173bdb1222e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e172ea880498cb381bf527602250c173bdb1222e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e172ea880498cb381bf527602250c173bdb1222e"
      },
      {
        "sha": "906d7913117c8f10934b37afa27ae8ac565da042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906d7913117c8f10934b37afa27ae8ac565da042",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/906d7913117c8f10934b37afa27ae8ac565da042"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2b4f15115be7fa5fd9b8b9bf1f08b812171a79e4",
        "filename": "src/test/fuzz/base_encode_decode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965e93743454112c0c3c66bf24852f63ee07b862/src/test/fuzz/base_encode_decode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965e93743454112c0c3c66bf24852f63ee07b862/src/test/fuzz/base_encode_decode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/base_encode_decode.cpp?ref=965e93743454112c0c3c66bf24852f63ee07b862",
        "patch": "@@ -14,7 +14,12 @@\n #include <string>\n #include <vector>\n \n-FUZZ_TARGET(base_encode_decode)\n+void initialize_base_encode_decode()\n+{\n+    static const ECCVerifyHandle verify_handle;\n+}\n+\n+FUZZ_TARGET_INIT(base_encode_decode, initialize_base_encode_decode)\n {\n     const std::string random_encoded_string(buffer.begin(), buffer.end());\n "
      }
    ]
  },
  {
    "sha": "a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzA1YTY4N2U3MGNmZTFiZmU1ZTU3MTYxZmE5YTA4NGIyOTBjZDdi",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T05:57:40Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T05:58:12Z"
      },
      "message": "Merge bitcoin/bitcoin#22244: devtools: Correctly extract symbol versions in symbol-check\n\ne8cd3700eeb27437f5ea435869c9d61214285fdd devtools: Integrate ARCH_MIN_GLIBC_VER table into MAX_VERSIONS in symbol-check.py (W. J. van der Laan)\na33381acf5ae2b43616fffaf26b1c8962e8ef0bb devtools: Add xkb version to symbol-check (W. J. van der Laan)\n19e598bab0a1cb5ad93321eb9fa25d1a58d5e276 devtools: Fix verneed section parsing in pixie (W. J. van der Laan)\n\nPull request description:\n\n  I misunderstood the ELF specification for version symbols (verneed): The `vn_aux` pointer is relative to the main verneed record, not the start of the section.\n\n  This caused many symbols to not be versioned properly in the return value of `elf.dyn_symbols`. This was discovered in #21454.\n\n  Fix it by correcting the offset computation.\n\n  - xkb versions symbols (using the prefix `V`), as this library is used by bitcoin-qt, add it to the valid versions in `symbol-check.py`\n\n  This unfortunately brings to light some symbols that have been introduced since and weren't caught (from a gitian compile of master):\n\n  ```\n  bitcoin-cli: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoin-cli: failed IMPORTED_SYMBOLS\n  bitcoind: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoind: symbol log from unsupported version GLIBC_2.29\n  bitcoind: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoind: symbol pow from unsupported version GLIBC_2.29\n  bitcoind: symbol exp from unsupported version GLIBC_2.29\n  bitcoind: failed IMPORTED_SYMBOLS\n  bitcoin-qt: symbol exp from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol log from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol pow from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol statx from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoin-qt: symbol renameat2 from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol getentropy from unsupported version GLIBC_2.25\n  bitcoin-qt: failed IMPORTED_SYMBOLS\n  bitcoin-wallet: symbol exp from unsupported version GLIBC_2.29\n  bitcoin-wallet: symbol log from unsupported version GLIBC_2.29\n  bitcoin-wallet: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoin-wallet: failed IMPORTED_SYMBOLS\n  test_bitcoin: symbol getrandom from unsupported version GLIBC_2.25\n  test_bitcoin: symbol log from unsupported version GLIBC_2.29\n  test_bitcoin: symbol fcntl64 from unsupported version GLIBC_2.28\n  test_bitcoin: symbol pow from unsupported version GLIBC_2.29\n  test_bitcoin: symbol exp from unsupported version GLIBC_2.29\n  test_bitcoin: failed IMPORTED_SYMBOLS\n  ```\n\nACKs for top commit:\n  hebasto:\n    ACK e8cd3700eeb27437f5ea435869c9d61214285fdd\n\nTree-SHA512: 8c15e3478eb642f01a1ddaadef03f80583f088f9fa8e3bf171ce16b0ec05ffb4675ec147d7ffc6a4360637ed47fca517c6ca2bac7bb30d794c03783cfb964b79",
      "tree": {
        "sha": "8557ec997898c1fbb4d95d855b32fb2e9a78a0e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8557ec997898c1fbb4d95d855b32fb2e9a78a0e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDQKnQACgkQHkrtYphs\n0l1GEQgAsQQoTSW6eOEcGrcjGw6IE/uts6tXh0CMYntf3chOyhkKo49HQ1bQQ4xW\nMs6QgpLNNU9X1P5aLJBh/dyhApeH42KKGTWY1kz631P6Qr1ITzt1+oN7yHvGGKXq\n/9/r0nRLSxhWr0f4JVeDLj01YxdDPdZFAfI3IjLydwdXey7OFZE21u9Sd8cPdRyN\n12JWTrULv+jfW1MRi3SPI7D6blBqeMegcKYVzmXRYzlBqSnkD7tuAs1RoF67OTZo\nVzSWQfI4V2CLqOzC7WSa0IERNIHhaDuJc0M41t3jKQrrVM1cNZApP21Ww06tkyS/\nVf2mW+o9evESRr9P1gkV12vT6IvZeg==\n=zqw1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIO9NEiFncitjJhODqflcHS7xktSTcr2XXg2lsp4Z8iGCCP/wEBHYCBBQPFre\ngIwC7u9mHfwI8QRg0Cp68Ag5BGM48OOylgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQFTAk1LlNZBTINisN\npPtLeQjxBGDQKnrwCFHakN2ztlnbAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQNgjfGVew6HloTXU3q7mMxQjxBGDQ\nKnrwCKcTzEXBS+jHAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BBGKYgwQYAHJ1BogiQ0k9CwCPEEYNAqevAI/BHp\nHv+mZuwAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8557ec997898c1fbb4d95d855b32fb2e9a78a0e4\nparent 965e93743454112c0c3c66bf24852f63ee07b862\nparent e8cd3700eeb27437f5ea435869c9d61214285fdd\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624255060 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624255092 +0200\n\nMerge bitcoin/bitcoin#22244: devtools: Correctly extract symbol versions in symbol-check\n\ne8cd3700eeb27437f5ea435869c9d61214285fdd devtools: Integrate ARCH_MIN_GLIBC_VER table into MAX_VERSIONS in symbol-check.py (W. J. van der Laan)\na33381acf5ae2b43616fffaf26b1c8962e8ef0bb devtools: Add xkb version to symbol-check (W. J. van der Laan)\n19e598bab0a1cb5ad93321eb9fa25d1a58d5e276 devtools: Fix verneed section parsing in pixie (W. J. van der Laan)\n\nPull request description:\n\n  I misunderstood the ELF specification for version symbols (verneed): The `vn_aux` pointer is relative to the main verneed record, not the start of the section.\n\n  This caused many symbols to not be versioned properly in the return value of `elf.dyn_symbols`. This was discovered in #21454.\n\n  Fix it by correcting the offset computation.\n\n  - xkb versions symbols (using the prefix `V`), as this library is used by bitcoin-qt, add it to the valid versions in `symbol-check.py`\n\n  This unfortunately brings to light some symbols that have been introduced since and weren't caught (from a gitian compile of master):\n\n  ```\n  bitcoin-cli: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoin-cli: failed IMPORTED_SYMBOLS\n  bitcoind: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoind: symbol log from unsupported version GLIBC_2.29\n  bitcoind: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoind: symbol pow from unsupported version GLIBC_2.29\n  bitcoind: symbol exp from unsupported version GLIBC_2.29\n  bitcoind: failed IMPORTED_SYMBOLS\n  bitcoin-qt: symbol exp from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol log from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol pow from unsupported version GLIBC_2.29\n  bitcoin-qt: symbol statx from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol getrandom from unsupported version GLIBC_2.25\n  bitcoin-qt: symbol renameat2 from unsupported version GLIBC_2.28\n  bitcoin-qt: symbol getentropy from unsupported version GLIBC_2.25\n  bitcoin-qt: failed IMPORTED_SYMBOLS\n  bitcoin-wallet: symbol exp from unsupported version GLIBC_2.29\n  bitcoin-wallet: symbol log from unsupported version GLIBC_2.29\n  bitcoin-wallet: symbol fcntl64 from unsupported version GLIBC_2.28\n  bitcoin-wallet: failed IMPORTED_SYMBOLS\n  test_bitcoin: symbol getrandom from unsupported version GLIBC_2.25\n  test_bitcoin: symbol log from unsupported version GLIBC_2.29\n  test_bitcoin: symbol fcntl64 from unsupported version GLIBC_2.28\n  test_bitcoin: symbol pow from unsupported version GLIBC_2.29\n  test_bitcoin: symbol exp from unsupported version GLIBC_2.29\n  test_bitcoin: failed IMPORTED_SYMBOLS\n  ```\n\nACKs for top commit:\n  hebasto:\n    ACK e8cd3700eeb27437f5ea435869c9d61214285fdd\n\nTree-SHA512: 8c15e3478eb642f01a1ddaadef03f80583f088f9fa8e3bf171ce16b0ec05ffb4675ec147d7ffc6a4360637ed47fca517c6ca2bac7bb30d794c03783cfb964b79\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a305a687e70cfe1bfe5e57161fa9a084b290cd7b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965e93743454112c0c3c66bf24852f63ee07b862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965e93743454112c0c3c66bf24852f63ee07b862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965e93743454112c0c3c66bf24852f63ee07b862"
      },
      {
        "sha": "e8cd3700eeb27437f5ea435869c9d61214285fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8cd3700eeb27437f5ea435869c9d61214285fdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cd3700eeb27437f5ea435869c9d61214285fdd"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "64660968ad255886df97501115de636ae8873a73",
        "filename": "contrib/devtools/pixie.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a305a687e70cfe1bfe5e57161fa9a084b290cd7b/contrib/devtools/pixie.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a305a687e70cfe1bfe5e57161fa9a084b290cd7b/contrib/devtools/pixie.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/pixie.py?ref=a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
        "patch": "@@ -217,7 +217,7 @@ def _parse_verneed(section: Section, strings: bytes, eh: ELFHeader) -> Dict[int,\n     result = {}\n     while True:\n         verneed = Verneed(data, ofs, eh)\n-        aofs = verneed.vn_aux\n+        aofs = ofs + verneed.vn_aux\n         while True:\n             vernaux = Vernaux(data, aofs, eh, strings)\n             result[vernaux.vna_other] = vernaux.name"
      },
      {
        "sha": "56e4313d78f020636680f17b5267b4e3560fd71f",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a305a687e70cfe1bfe5e57161fa9a084b290cd7b/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a305a687e70cfe1bfe5e57161fa9a084b290cd7b/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
        "patch": "@@ -41,8 +41,16 @@\n #\n MAX_VERSIONS = {\n 'GCC':       (4,8,0),\n-'GLIBC':     (2,17),\n-'LIBATOMIC': (1,0)\n+'GLIBC': {\n+    pixie.EM_386:    (2,17),\n+    pixie.EM_X86_64: (2,17),\n+    pixie.EM_ARM:    (2,17),\n+    pixie.EM_AARCH64:(2,17),\n+    pixie.EM_PPC64:  (2,17),\n+    pixie.EM_RISCV:  (2,27),\n+},\n+'LIBATOMIC': (1,0),\n+'V':         (0,5,0),  # xkb (bitcoin-qt only)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n@@ -78,14 +86,6 @@\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n-ARCH_MIN_GLIBC_VER = {\n-pixie.EM_386:    (2,1),\n-pixie.EM_X86_64: (2,2,5),\n-pixie.EM_ARM:    (2,4),\n-pixie.EM_AARCH64:(2,17),\n-pixie.EM_PPC64:  (2,17),\n-pixie.EM_RISCV:  (2,27)\n-}\n \n MACHO_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n@@ -161,7 +161,10 @@ def check_version(max_versions, version, arch) -> bool:\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n+    if isinstance(max_versions[lib], tuple):\n+        return ver <= max_versions[lib]\n+    else:\n+        return ver <= max_versions[lib][arch]\n \n def check_imported_symbols(filename) -> bool:\n     elf = pixie.load(filename)"
      }
    ]
  },
  {
    "sha": "f6a25bea826e559967a35cf4c7d18c7f44429d3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmEyNWJlYTgyNmU1NTk5NjdhMzVjZjRjN2QxOGM3ZjQ0NDI5ZDNj",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T06:16:01Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T06:18:55Z"
      },
      "message": "Merge bitcoin/bitcoin#22147: p2p: Protect last outbound HB compact block peer\n\n30aee2dfe671b347438c1c327c6f79edfacff1ce tests: Add test for compact block HB selection (Pieter Wuille)\n6efbcec4ded6116a42d2783c96c60ef0f255a1b2 Protect last outbound HB compact block peer (Suhas Daftuar)\n\nPull request description:\n\n  If all our high-bandwidth compact block serving peers (BIP 152) stall block\n  download, then we can be denied a block for (potentially) a long time. As\n  inbound connections are much more likely to be adversarial than outbound\n  connections, mitigate this risk by never removing our last outbound HB peer if\n  it would be replaced by an inbound.\n\nACKs for top commit:\n  achow101:\n    ACK 30aee2dfe671b347438c1c327c6f79edfacff1ce\n  ariard:\n    Code ACK 30aee2dfe\n  jonatack:\n    ACK 30aee2dfe671b347438c1c327c6f79edfacff1ce\n\nTree-SHA512: 5c6c9326e3667b97e0864c371ae2174d2be9054dad479f4366127b9cd3ac60ffa01ec9707b16ef29cac122db6916cf56fd9985733390017134ace483278921d5",
      "tree": {
        "sha": "87df36d481995d294a1daa6d34bcdc394b9fea62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87df36d481995d294a1daa6d34bcdc394b9fea62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6a25bea826e559967a35cf4c7d18c7f44429d3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDQL08ACgkQHkrtYphs\n0l1IsggAgjRCPOi02AOwmvFn9GUcLtu474wYUjIGPB5Rm3PXgES0DH+mIq0FT42Q\nQc7NyDPieDAxE55g8j2ptXzkVhiGhjfSqOCe+zSn0GE2BuevUUZuuAo6uqVmIZx6\nPgeXQrygDphYD2RuVf7ESVYBDZ3Wq5bmCdDaVBotvU+qzjvFxdCGu4JmJU1yzrSM\nOFFNm5BGboaeUIzB3IxcN0z6e/EQ/K9l+DWIbjO1pn4egt6dkxyyC8BAGZ7wxZZl\nPJznQxcacF3b3Z0fxVCkUmkD/m9IxB/z+15oWRX1lDmt6HhVTinsHfcbSW89a2nH\nYee59uF+vWfe62W6iKEnTWrZo99/EQ==\n=Ag8b\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEmx2CETzPBhX3OdInfn9KIm04I8/DqKcmPoGVl/bdAaCP/wEAQOrfOWlM/j\n+8ofhi9+MD8I8SDR8e+BbagSZoTLScMA6AVBHIna4v/xAlWh0l74jk2qVwjxBGDQ\nL1LwCHLWhKRFhWKNAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBW+bInV0Pl8GMhek6uBzUFCPEEYNAvU/AI\n9dDeOVTXIbQAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BCNnBHIfP+u3Bl1pIkBOXAoCPEEYNAvUvAI3mcBfN/8\nU5UAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nELrgoceDK9Jnf5knB57iJCsI8QRg0C9S8AibqrTVzNqfJgCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 87df36d481995d294a1daa6d34bcdc394b9fea62\nparent a305a687e70cfe1bfe5e57161fa9a084b290cd7b\nparent 30aee2dfe671b347438c1c327c6f79edfacff1ce\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624256161 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624256335 +0200\n\nMerge bitcoin/bitcoin#22147: p2p: Protect last outbound HB compact block peer\n\n30aee2dfe671b347438c1c327c6f79edfacff1ce tests: Add test for compact block HB selection (Pieter Wuille)\n6efbcec4ded6116a42d2783c96c60ef0f255a1b2 Protect last outbound HB compact block peer (Suhas Daftuar)\n\nPull request description:\n\n  If all our high-bandwidth compact block serving peers (BIP 152) stall block\n  download, then we can be denied a block for (potentially) a long time. As\n  inbound connections are much more likely to be adversarial than outbound\n  connections, mitigate this risk by never removing our last outbound HB peer if\n  it would be replaced by an inbound.\n\nACKs for top commit:\n  achow101:\n    ACK 30aee2dfe671b347438c1c327c6f79edfacff1ce\n  ariard:\n    Code ACK 30aee2dfe\n  jonatack:\n    ACK 30aee2dfe671b347438c1c327c6f79edfacff1ce\n\nTree-SHA512: 5c6c9326e3667b97e0864c371ae2174d2be9054dad479f4366127b9cd3ac60ffa01ec9707b16ef29cac122db6916cf56fd9985733390017134ace483278921d5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6a25bea826e559967a35cf4c7d18c7f44429d3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6a25bea826e559967a35cf4c7d18c7f44429d3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6a25bea826e559967a35cf4c7d18c7f44429d3c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a305a687e70cfe1bfe5e57161fa9a084b290cd7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a305a687e70cfe1bfe5e57161fa9a084b290cd7b"
      },
      {
        "sha": "30aee2dfe671b347438c1c327c6f79edfacff1ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aee2dfe671b347438c1c327c6f79edfacff1ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30aee2dfe671b347438c1c327c6f79edfacff1ce"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 113,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9bb3dfdcf36dcff8096564482a286ce7b0feb1ed",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6a25bea826e559967a35cf4c7d18c7f44429d3c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6a25bea826e559967a35cf4c7d18c7f44429d3c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f6a25bea826e559967a35cf4c7d18c7f44429d3c",
        "patch": "@@ -836,12 +836,27 @@ void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n+        int num_outbound_hb_peers = 0;\n         for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n             if (*it == nodeid) {\n                 lNodesAnnouncingHeaderAndIDs.erase(it);\n                 lNodesAnnouncingHeaderAndIDs.push_back(nodeid);\n                 return;\n             }\n+            CNodeState *state = State(*it);\n+            if (state != nullptr && !state->m_is_inbound) ++num_outbound_hb_peers;\n+        }\n+        if (nodestate->m_is_inbound) {\n+            // If we're adding an inbound HB peer, make sure we're not removing\n+            // our last outbound HB peer in the process.\n+            if (lNodesAnnouncingHeaderAndIDs.size() >= 3 && num_outbound_hb_peers == 1) {\n+                CNodeState *remove_node = State(lNodesAnnouncingHeaderAndIDs.front());\n+                if (remove_node != nullptr && !remove_node->m_is_inbound) {\n+                    // Put the HB outbound peer in the second slot, so that it\n+                    // doesn't get removed.\n+                    std::swap(lNodesAnnouncingHeaderAndIDs.front(), *std::next(lNodesAnnouncingHeaderAndIDs.begin()));\n+                }\n+            }\n         }\n         m_connman.ForNode(nodeid, [this](CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             AssertLockHeld(::cs_main);"
      },
      {
        "sha": "a3d30a6f0423f6d25287c0883c903686aeb16d58",
        "filename": "test/functional/p2p_compactblocks_hb.py",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6a25bea826e559967a35cf4c7d18c7f44429d3c/test/functional/p2p_compactblocks_hb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6a25bea826e559967a35cf4c7d18c7f44429d3c/test/functional/p2p_compactblocks_hb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks_hb.py?ref=f6a25bea826e559967a35cf4c7d18c7f44429d3c",
        "patch": "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test compact blocks HB selection logic.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class CompactBlocksConnectionTest(BitcoinTestFramework):\n+    \"\"\"Test class for verifying selection of HB peer connections.\"\"\"\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 6\n+\n+    def peer_info(self, from_node, to_node):\n+        \"\"\"Query from_node for its getpeerinfo about to_node.\"\"\"\n+        for peerinfo in self.nodes[from_node].getpeerinfo():\n+            if \"(testnode%i)\" % to_node in peerinfo['subver']:\n+                return peerinfo\n+        return None\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        # Start network with everyone disconnected\n+        self.sync_all()\n+\n+    def relay_block_through(self, peer):\n+        \"\"\"Relay a new block through peer peer, and return HB status between 1 and [2,3,4,5].\"\"\"\n+        self.connect_nodes(peer, 0)\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+        self.disconnect_nodes(peer, 0)\n+        status_to = [self.peer_info(1, i)['bip152_hb_to'] for i in range(2, 6)]\n+        status_from = [self.peer_info(i, 1)['bip152_hb_from'] for i in range(2, 6)]\n+        assert_equal(status_to, status_from)\n+        return status_to\n+\n+    def run_test(self):\n+        self.log.info(\"Testing reserved high-bandwidth mode slot for outbound peer...\")\n+\n+        # Connect everyone to node 0, and mine some blocks to get all nodes out of IBD.\n+        for i in range(1, 6):\n+            self.connect_nodes(i, 0)\n+        self.nodes[0].generate(2)\n+        self.sync_blocks()\n+        for i in range(1, 6):\n+            self.disconnect_nodes(i, 0)\n+\n+        # Construct network topology:\n+        # - Node 0 is the block producer\n+        # - Node 1 is the \"target\" node being tested\n+        # - Nodes 2-5 are intermediaries.\n+        #   - Node 1 has an outbound connection to node 2\n+        #   - Node 1 has inbound connections from nodes 3-5\n+        self.connect_nodes(3, 1)\n+        self.connect_nodes(4, 1)\n+        self.connect_nodes(5, 1)\n+        self.connect_nodes(1, 2)\n+\n+        # Mine blocks subsequently relaying through nodes 3,4,5 (inbound to node 1)\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert_equal(status, [False, nodeid >= 3, nodeid >= 4, nodeid >= 5])\n+\n+        # And again through each. This should not change HB status.\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert_equal(status, [False, True, True, True])\n+\n+        # Now relay one block through peer 2 (outbound from node 1), so it should take HB status\n+        # from one of the inbounds.\n+        status = self.relay_block_through(2)\n+        assert_equal(status[0], True)\n+        assert_equal(sum(status), 3)\n+\n+        # Now relay again through nodes 3,4,5. Since 2 is outbound, it should remain HB.\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert status[0]\n+            assert status[nodeid - 2]\n+            assert_equal(sum(status), 3)\n+\n+        # Reconnect peer 2, and retry. Now the three inbounds should be HB again.\n+        self.disconnect_nodes(1, 2)\n+        self.connect_nodes(1, 2)\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert not status[0]\n+            assert status[nodeid - 2]\n+        assert_equal(status, [False, True, True, True])\n+\n+\n+if __name__ == '__main__':\n+    CompactBlocksConnectionTest().main()"
      },
      {
        "sha": "ad1acd2e2f3beb3cdd00c66b7624541831667a4b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6a25bea826e559967a35cf4c7d18c7f44429d3c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6a25bea826e559967a35cf4c7d18c7f44429d3c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f6a25bea826e559967a35cf4c7d18c7f44429d3c",
        "patch": "@@ -174,6 +174,7 @@\n     'wallet_groups.py --legacy-wallet',\n     'p2p_addrv2_relay.py',\n     'wallet_groups.py --descriptors',\n+    'p2p_compactblocks_hb.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',"
      }
    ]
  },
  {
    "sha": "6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTY3MzY2ZmRjM2UxZDM4M2ZlN2NiZmEyMDlkN2U4NWYwZDk2NjM4",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T09:15:11Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T09:15:42Z"
      },
      "message": "Merge bitcoin/bitcoin#19033: http: Release work queue after event base finish\n\n4e353cb618745cdb5d98e58e7dcd400ded01299a http: Release work queue after event base finish (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This fixes a race between `http_request_cb` and `StopHTTPServer` where\n  the work queue is used after release.\n\n  Fixes #18856.\n\nACKs for top commit:\n  fjahr:\n    Code review ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  achow101:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  LarryRuane:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  hebasto:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a, tested (rebased on top of master 9313c4e6aa4b707c06a86b33d5d2753cd8383340) on Linux Mint 20.1 (x86_64) using MarcoFalke's [patch](https://github.com/bitcoin/bitcoin/pull/19033#issuecomment-640106647), including different `-rpcthreads`/`-rpcworkqueue` cases. The bug is fixed. The code is correct.\n\nTree-SHA512: 185d2a9744d0d5134d782bf321ac9958ba17b11a5b3d70b4897c8243e6b146dfd3f23c57aef8e10ae9484374120b64389c1949a9cf0a21dccc47ffc934c20930",
      "tree": {
        "sha": "79e3c1f5514e18a74f3e11e47d42dfcbe7fd3b63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79e3c1f5514e18a74f3e11e47d42dfcbe7fd3b63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDQWL8ACgkQHkrtYphs\n0l1H1wf/btmyt/YKDaZOZ1caIYwKoBK/1jAzMyJu7G0pZMRjiCrYnwgAqGn5vd57\nYHPGzzwNv6bkN9ZYi+0j9TN0NQRUbOI4tz3bW7+an8GIM0jF8H0wh/3aGEe4Zy4e\n1JP96C3lw2qbAo1MKO8wnfZdK9jqgfOdjNqZx6xbZhzQrwbBzGFRdhggRMePOQ7I\n/KnQ/FRiMpgzWQlCWaZ+aoxeMhqMR576kGatBx1k/acGgjH2ILQhVhnA0eJSyIZ/\n8ScnMEJn4Jf4ndIf4tXuTEQMYg2KjmmiC0adwAKS4L/3VUl7pin0VIOOM16bj85k\nSbU32He1p/KHhqnvT46oHuXwheGfFg==\n=M2N1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINV+upLQqQmx0KJjq82r0lJ6hAgG1N/AUejMt9+dr8CvCP/wECUesn0YOoWz\n1AVLWWnQyw0I8QRg0FjD8AjeCS3pMKtPBACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEG9cBo3hV+IC84pSs3kVuO4I8CDi0X6G\nL+4IHujJbJmX1W0f7N3g5P1TNNt/jn76/rlyowjxBGDQWMTwCLKQRV4paFkcAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BCz8Us2B1Af+jRgHXbVYr6YCPAgY7lFIGwS8qzDKbESdp/lyuUZJmrn\nL4jh3FR99UKV3HcI8CBd8feo+ewhR4L7nbZ3etS3q9V7rLYl6L5d7Y+mwkvAQAjx\nBGDQWMTwCIyK3M9uPSRTAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDWTldHewpPzEFYiMZxR69yCPAgdgzw4b3F\nffLcNCz9/sp0vr0xQScsOv+QNOCnd0CqIxkI8QRg0FjD8Aj8JwHX1B8puQCD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 79e3c1f5514e18a74f3e11e47d42dfcbe7fd3b63\nparent f6a25bea826e559967a35cf4c7d18c7f44429d3c\nparent 4e353cb618745cdb5d98e58e7dcd400ded01299a\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624266911 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624266942 +0200\n\nMerge bitcoin/bitcoin#19033: http: Release work queue after event base finish\n\n4e353cb618745cdb5d98e58e7dcd400ded01299a http: Release work queue after event base finish (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This fixes a race between `http_request_cb` and `StopHTTPServer` where\n  the work queue is used after release.\n\n  Fixes #18856.\n\nACKs for top commit:\n  fjahr:\n    Code review ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  achow101:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  LarryRuane:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a\n  hebasto:\n    ACK 4e353cb618745cdb5d98e58e7dcd400ded01299a, tested (rebased on top of master 9313c4e6aa4b707c06a86b33d5d2753cd8383340) on Linux Mint 20.1 (x86_64) using MarcoFalke's [patch](https://github.com/bitcoin/bitcoin/pull/19033#issuecomment-640106647), including different `-rpcthreads`/`-rpcworkqueue` cases. The bug is fixed. The code is correct.\n\nTree-SHA512: 185d2a9744d0d5134d782bf321ac9958ba17b11a5b3d70b4897c8243e6b146dfd3f23c57aef8e10ae9484374120b64389c1949a9cf0a21dccc47ffc934c20930\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6a25bea826e559967a35cf4c7d18c7f44429d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6a25bea826e559967a35cf4c7d18c7f44429d3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6a25bea826e559967a35cf4c7d18c7f44429d3c"
      },
      {
        "sha": "4e353cb618745cdb5d98e58e7dcd400ded01299a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e353cb618745cdb5d98e58e7dcd400ded01299a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e353cb618745cdb5d98e58e7dcd400ded01299a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b3984a43bb1dcd859cb998d55e556811f8979dbb",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "patch": "@@ -83,7 +83,7 @@ class WorkQueue\n     bool Enqueue(WorkItem* item)\n     {\n         LOCK(cs);\n-        if (queue.size() >= maxDepth) {\n+        if (!running || queue.size() >= maxDepth) {\n             return false;\n         }\n         queue.emplace_back(std::unique_ptr<WorkItem>(item));\n@@ -99,7 +99,7 @@ class WorkQueue\n                 WAIT_LOCK(cs, lock);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n-                if (!running)\n+                if (!running && queue.empty())\n                     break;\n                 i = std::move(queue.front());\n                 queue.pop_front();\n@@ -448,8 +448,6 @@ void StopHTTPServer()\n             thread.join();\n         }\n         g_thread_http_workers.clear();\n-        delete workQueue;\n-        workQueue = nullptr;\n     }\n     // Unlisten sockets, these are what make the event loop running, which means\n     // that after this and all connections are closed the event loop will quit.\n@@ -469,6 +467,10 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = nullptr;\n     }\n+    if (workQueue) {\n+        delete workQueue;\n+        workQueue = nullptr;\n+    }\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n "
      }
    ]
  },
  {
    "sha": "2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2U3YjQ3OTU4YzRhMTBiYTIwZGM4NmMwMTFkNzFjZGE0YjA3MGE1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-15T21:02:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-21T12:28:05Z"
      },
      "message": "test: introduce `tx_from_hex` helper for tx deserialization\n\n`FromHex` is mostly used for transactions, so we introduce a\nshortcut `tx_from_hex` for `FromHex(CTransaction, hex_str)`.",
      "tree": {
        "sha": "9d3ad9433f7b5b054f5b072ebf33462399d9f502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d3ad9433f7b5b054f5b072ebf33462399d9f502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965e93743454112c0c3c66bf24852f63ee07b862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965e93743454112c0c3c66bf24852f63ee07b862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965e93743454112c0c3c66bf24852f63ee07b862"
      }
    ],
    "stats": {
      "total": 409,
      "additions": 257,
      "deletions": 152
    },
    "files": [
      {
        "sha": "0c3a9c145e2165bdb5a6d0452f30fba94ee62f2d",
        "filename": "contrib/signet/miner",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -23,7 +23,7 @@ PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNE\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n \n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n from test_framework.script import CScriptOp # noqa: E402\n \n logging.basicConfig(\n@@ -216,7 +216,7 @@ def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n         block.nTime = tmpl[\"mintime\"]\n     block.nBits = int(tmpl[\"bits\"], 16)\n     block.nNonce = 0\n-    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+    block.vtx = [cbtx] + [tx_from_hex(t[\"data\"]) for t in tmpl[\"transactions\"]]\n \n     witnonce = 0\n     witroot = block.calc_witness_merkle_root()"
      },
      {
        "sha": "2b2341fb03478c7ea6bf1021a37933aa6904bbce",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -6,8 +6,20 @@\n \n import time\n \n-from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n+from test_framework.blocktools import (\n+    NORMAL_GBT_REQUEST_PARAMS,\n+    add_witness_commitment,\n+    create_block,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -215,7 +227,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n \n         # Create a mempool tx.\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n-        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1 = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n         tx1.rehash()\n \n         # Anyone-can-spend mempool tx.\n@@ -225,7 +237,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n-        tx2 = FromHex(tx2, tx2_raw)\n+        tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n         self.nodes[0].sendrawtransaction(tx2_raw)\n@@ -348,7 +360,7 @@ def test_bip68_not_consensus(self):\n         assert not softfork_active(self.nodes[0], 'csv')\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n-        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1 = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n         tx1.rehash()\n \n         # Make an anyone-can-spend transaction\n@@ -359,7 +371,7 @@ def test_bip68_not_consensus(self):\n \n         # sign tx2\n         tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n-        tx2 = FromHex(tx2, tx2_raw)\n+        tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n         self.nodes[0].sendrawtransaction(ToHex(tx2))\n@@ -404,7 +416,7 @@ def test_version2_relay(self):\n         outputs = { self.nodes[1].getnewaddress() : 1.0 }\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n-        tx = FromHex(CTransaction(), rawtxfund)\n+        tx = tx_from_hex(rawtxfund)\n         tx.nVersion = 2\n         tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)"
      },
      {
        "sha": "0f62701305af2bb9502d5816bb96477b7b256e1e",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 34,
        "deletions": 11,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test the SegWit changeover logic.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n \n from test_framework.address import (\n     key_to_p2pkh,\n@@ -14,9 +13,35 @@\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n-from test_framework.blocktools import witness_script, send_to_witness\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n+from test_framework.blocktools import (\n+    send_to_witness,\n+    witness_script,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+    sha256,\n+    tx_from_hex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_TRUE,\n+    hash160,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -179,7 +204,7 @@ def run_test(self):\n         assert self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False)\n \n         for tx_id in segwit_tx_list:\n-            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            tx = tx_from_hex(self.nodes[2].gettransaction(tx_id)[\"hex\"])\n             assert self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash)\n             assert self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash)\n             assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"]\n@@ -225,12 +250,12 @@ def run_test(self):\n         # tx1 is allowed to appear in the block, but no others.\n         txid1 = send_to_witness(1, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n         hex_tx = self.nodes[0].gettransaction(txid)['hex']\n-        tx = FromHex(CTransaction(), hex_tx)\n+        tx = tx_from_hex(hex_tx)\n         assert tx.wit.is_null()  # This should not be a segwit input\n         assert txid1 in self.nodes[0].getrawmempool()\n \n         tx1_hex = self.nodes[0].gettransaction(txid1)['hex']\n-        tx1 = FromHex(CTransaction(), tx1_hex)\n+        tx1 = tx_from_hex(tx1_hex)\n \n         # Check that wtxid is properly reported in mempool entry (txid1)\n         assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx1.calc_sha256(True))\n@@ -245,7 +270,7 @@ def run_test(self):\n         tx.vout.append(CTxOut(int(49.99 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n-        tx = FromHex(CTransaction(), tx2_hex)\n+        tx = tx_from_hex(tx2_hex)\n         assert not tx.wit.is_null()\n \n         # Check that wtxid is properly reported in mempool entry (txid2)\n@@ -611,10 +636,8 @@ def p2pkh_address_to_script(self, v):\n     def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n-            txtmp = CTransaction()\n             txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n-            f = BytesIO(hex_str_to_bytes(txraw))\n-            txtmp.deserialize(f)\n+            txtmp = tx_from_hex(txraw)\n             for j in range(len(txtmp.vout)):\n                 tx.vin.append(CTxIn(COutPoint(int('0x' + i, 0), j)))\n         tx.vout.append(CTxOut(0, CScript()))"
      },
      {
        "sha": "0534618d06150e91c3fd6e4a77f5dff7bacc35b3",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -8,7 +8,11 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.messages import CTransaction, hash256, FromHex\n+from test_framework.messages import (\n+    CTransaction,\n+    hash256,\n+    tx_from_hex,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -393,10 +397,10 @@ def test_sequence(self):\n             bump_info = self.nodes[0].bumpfee(orig_txid)\n             # Mine the pre-bump tx\n             block = create_block(int(self.nodes[0].getbestblockhash(), 16), create_coinbase(self.nodes[0].getblockcount()+1))\n-            tx = FromHex(CTransaction(), raw_tx)\n+            tx = tx_from_hex(raw_tx)\n             block.vtx.append(tx)\n             for txid in more_tx:\n-                tx = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+                tx = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n                 block.vtx.append(tx)\n             add_witness_commitment(block)\n             block.solve()"
      },
      {
        "sha": "1705d957aa03b6147eeaf84db0ebbb0cdeeaabe4",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 27,
        "deletions": 30,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test mempool acceptance of raw transactions.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n import math\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -14,10 +13,10 @@\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n     COutPoint,\n-    CTransaction,\n     CTxOut,\n     MAX_BLOCK_BASE_SIZE,\n     MAX_MONEY,\n+    tx_from_hex,\n )\n from test_framework.script import (\n     hash160,\n@@ -33,7 +32,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    hex_str_to_bytes,\n )\n \n \n@@ -91,8 +89,7 @@ def run_test(self):\n             inputs=[{\"txid\": txid_in_block, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}],  # RBF is used later\n             outputs=[{node.getnewaddress(): Decimal('0.3') - fee}],\n         ))['hex']\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n             result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee}}],\n@@ -107,7 +104,7 @@ def run_test(self):\n             outputs=[{node.getnewaddress(): output_amount}],\n             locktime=node.getblockcount() + 2000,  # Can be anything\n         ))['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n+        tx = tx_from_hex(raw_tx_final)\n         fee_expected = coin['amount'] - output_amount\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee_expected}}],\n@@ -126,11 +123,11 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction that replaces a mempool transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\n         tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER + 1  # Now, opt out of RBF\n         raw_tx_0 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n             result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': (2 * fee)}}],\n@@ -141,7 +138,7 @@ def run_test(self):\n         # Send the transaction that replaces the mempool transaction and opts out of replaceability\n         node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n         # take original raw_tx_0\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n         # skip re-signing the tx\n         self.check_mempool_result(\n@@ -151,7 +148,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with missing inputs, that never existed')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vin[0].prevout = COutPoint(hash=int('ff' * 32, 16), n=14)\n         # skip re-signing the tx\n         self.check_mempool_result(\n@@ -160,7 +157,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with missing inputs, that existed once in the past')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n         raw_tx_1 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, maxfeerate=0)\n@@ -190,7 +187,7 @@ def run_test(self):\n             inputs=[{'txid': txid_spend_both, 'vout': 0}],\n             outputs=[{node.getnewaddress(): 0.05}],\n         ))['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal('0.1') - Decimal('0.05')}}],\n@@ -199,25 +196,25 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with no outputs')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout = []\n         # Skip re-signing the transaction for context independent checks from now on\n-        # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])))\n+        # tx = tx_from_hex(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-empty'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A really large transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin = [tx.vin[0]] * math.ceil(MAX_BLOCK_BASE_SIZE / len(tx.vin[0].serialize()))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-oversize'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with negative output value')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].nValue *= -1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-negative'}],\n@@ -226,15 +223,15 @@ def run_test(self):\n \n         # The following two validations prevent overflow of the output amounts (see CVE-2010-5139).\n         self.log.info('A transaction with too large output value')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].nValue = MAX_MONEY + 1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-toolarge'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with too large sum of output values')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout = [tx.vout[0]] * 2\n         tx.vout[0].nValue = MAX_MONEY\n         self.check_mempool_result(\n@@ -243,7 +240,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with duplicate inputs')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin = [tx.vin[0]] * 2\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-inputs-duplicate'}],\n@@ -253,26 +250,26 @@ def run_test(self):\n         self.log.info('A coinbase transaction')\n         # Pick the input of the first tx we signed, so it has to be a coinbase tx\n         raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_coinbase_spent)))\n+        tx = tx_from_hex(raw_tx_coinbase_spent)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'coinbase'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('Some nonstandard transactions')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.nVersion = 3  # A version currently non-standard\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'version'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].scriptPubKey = CScript([OP_0])  # Some non-standard script\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptpubkey'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         key = ECKey()\n         key.generate()\n         pubkey = key.get_pubkey().get_bytes()\n@@ -281,34 +278,34 @@ def run_test(self):\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bare-multisig'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-not-pushonly'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].scriptSig = CScript([b'a' * 1648]) # Some too large scriptSig (>1650 bytes)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-size'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'tx-size'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0] = output_p2sh_burn\n         tx.vout[0].nValue -= 1  # Make output smaller, such that it is dust for our policy\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'dust'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'\\xff'])\n         tx.vout = [tx.vout[0]] * 2\n         self.check_mempool_result(\n@@ -317,7 +314,7 @@ def run_test(self):\n         )\n \n         self.log.info('A timelocked transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].nSequence -= 1  # Should be non-max, so locktime is not ignored\n         tx.nLockTime = node.getblockcount() + 1\n         self.check_mempool_result(\n@@ -326,7 +323,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction that is locked by BIP68 sequence logic')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].nSequence = 2  # We could include it in the second block mined from now, but not the very next one\n         # Can skip re-signing the tx because of early rejection\n         self.check_mempool_result("
      },
      {
        "sha": "3c771df0aa8fdb50e238148c33ebfca6a91c1c5b",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 47,
        "deletions": 4,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -15,9 +15,52 @@\n     add_witness_commitment,\n     create_block,\n )\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n-from test_framework.p2p import p2p_lock, P2PInterface\n-from test_framework.script import CScript, OP_TRUE, OP_DROP\n+from test_framework.messages import (\n+    BlockTransactions,\n+    BlockTransactionsRequest,\n+    CBlock,\n+    CBlockHeader,\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    FromHex,\n+    HeaderAndShortIDs,\n+    MSG_BLOCK,\n+    MSG_CMPCT_BLOCK,\n+    MSG_WITNESS_FLAG,\n+    NODE_NETWORK,\n+    P2PHeaderAndShortIDs,\n+    PrefilledTransaction,\n+    ToHex,\n+    calculate_shortid,\n+    msg_block,\n+    msg_blocktxn,\n+    msg_cmpctblock,\n+    msg_getblocktxn,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_no_witness_block,\n+    msg_no_witness_blocktxn,\n+    msg_sendcmpct,\n+    msg_sendheaders,\n+    msg_tx,\n+    ser_uint256,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_DROP,\n+    OP_TRUE,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, softfork_active\n \n@@ -257,7 +300,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         for _ in range(num_transactions):\n             txid = node.sendtoaddress(address, 0.1)\n             hex_tx = node.gettransaction(txid)[\"hex\"]\n-            tx = FromHex(CTransaction(), hex_tx)\n+            tx = tx_from_hex(hex_tx)\n             if not tx.wit.is_null():\n                 segwit_tx_generated = True\n "
      },
      {
        "sha": "35bce7c69e4aaf474249afa6ead814c8a80a78ea",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -20,7 +20,11 @@\n     create_block,\n     create_coinbase,\n )\n-from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+from test_framework.messages import (\n+    msg_pong,\n+    msg_tx,\n+    tx_from_hex,\n+)\n from test_framework.p2p import P2PDataStore, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -89,7 +93,7 @@ def run_test(self):\n                     'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n                 }],\n             )['hex']\n-            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            txpeer.send_message(msg_tx(tx_from_hex(sigtx)))\n             protected_peers.add(current_peer)\n \n         self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")"
      },
      {
        "sha": "594a28d6626583451623ea076e9ca07e2a7637a9",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -9,9 +9,8 @@\n \n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.messages import (\n-    CTransaction,\n     CTxInWitness,\n-    FromHex,\n+    tx_from_hex,\n )\n from test_framework.p2p import P2PDataStore\n from test_framework.script import (\n@@ -105,8 +104,7 @@ def check_tx_relay(self):\n         p2p_rebroadcast_wallet = self.nodes[1].add_p2p_connection(P2PDataStore())\n \n         self.log.debug(\"Send a tx from the wallet initially\")\n-        tx = FromHex(\n-            CTransaction(),\n+        tx = tx_from_hex(\n             self.nodes[0].createrawtransaction(\n                 inputs=[{\n                     'txid': block_op_true['tx'][0],"
      },
      {
        "sha": "95c7aec3181323c2e95c68048c7876f2e579ccee",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -40,8 +40,8 @@\n     ser_uint256,\n     ser_vector,\n     sha256,\n+    tx_from_hex,\n     uint256_from_str,\n-    FromHex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -2122,14 +2122,14 @@ def serialize(self):\n         unspent = next(u for u in self.nodes[0].listunspent() if u['spendable'] and u['address'].startswith('bcrt'))\n \n         raw = self.nodes[0].createrawtransaction([{\"txid\": unspent['txid'], \"vout\": unspent['vout']}], {self.nodes[0].getnewaddress(): 1})\n-        tx = FromHex(CTransaction(), raw)\n+        tx = tx_from_hex(raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, hexstring=serialize_with_bogus_witness(tx).hex(), iswitness=True)\n         with self.nodes[0].assert_debug_log(['Superfluous witness record']):\n             self.test_node.send_and_ping(msg_bogus_tx(tx))\n         raw = self.nodes[0].signrawtransactionwithwallet(raw)\n         assert raw['complete']\n         raw = raw['hex']\n-        tx = FromHex(CTransaction(), raw)\n+        tx = tx_from_hex(raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, hexstring=serialize_with_bogus_witness(tx).hex(), iswitness=True)\n         with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n             self.test_node.send_and_ping(msg_bogus_tx(tx))"
      },
      {
        "sha": "3e962b4450ff949b8a2bc23f8fc8e75f7ba14a6a",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -8,13 +8,12 @@\n \n from test_framework.messages import (\n     CInv,\n-    CTransaction,\n-    FromHex,\n     MSG_TX,\n     MSG_TYPE_MASK,\n     MSG_WTX,\n     msg_inv,\n     msg_notfound,\n+    tx_from_hex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -100,7 +99,7 @@ def test_inv_block(self):\n             hexstring=tx,\n             privkeys=[self.nodes[0].get_deterministic_priv_key().key],\n         )['hex']\n-        ctx = FromHex(CTransaction(), tx)\n+        ctx = tx_from_hex(tx)\n         txid = int(ctx.rehash(), 16)\n \n         self.log.info("
      },
      {
        "sha": "ac430f5b39e3250a2c71808ab1ac7f1d2e25da57",
        "filename": "test/functional/rpc_addresses_deprecation.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_addresses_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_addresses_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_addresses_deprecation.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of reqSigs and addresses RPC fields.\"\"\"\n \n-from io import BytesIO\n-\n-from test_framework.messages import CTransaction\n+from test_framework.messages import (\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -35,8 +35,7 @@ def test_addresses_deprecation(self):\n         signed = node.signrawtransactionwithwallet(raw)['hex']\n \n         # This transaction is derived from test/util/data/txcreatemultisig1.json\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(signed)))\n+        tx = tx_from_hex(signed)\n         tx.vout[0].scriptPubKey = hex_str_to_bytes(\"522102a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff39721021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d2102df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb48553ae\")\n         tx_signed = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid = node.sendrawtransaction(hexstring=tx_signed, maxfeerate=0)"
      },
      {
        "sha": "f6643c7167febb8ca2b855af7b8dc60f5ec00bba",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -4,11 +4,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n-from test_framework.messages import CTransaction, sha256\n+from test_framework.messages import (\n+    sha256,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, hex_str_to_bytes\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n \n-from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -179,8 +184,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea[ALL] 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75[ALL] 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n-        txSave = CTransaction()\n-        txSave.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        txSave = tx_from_hex(tx)\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'"
      },
      {
        "sha": "4b2ed20958d1ec0b4137657192bde9c99ea25e2d",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -5,24 +5,22 @@\n \"\"\"RPCs that handle raw transaction packages.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n import random\n \n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n-    CTransaction,\n     CTxInWitness,\n+    tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n     OP_TRUE,\n )\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n class RPCPackagesTest(BitcoinTestFramework):\n@@ -97,9 +95,8 @@ def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_scrip\n             \"amount\": parent_value,\n         }] if parent_locking_script else None\n         signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n-        tx = CTransaction()\n         assert signedtx[\"complete\"]\n-        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        tx = tx_from_hex(signedtx[\"hex\"])\n         return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n \n     def test_independent(self):\n@@ -110,8 +107,7 @@ def test_independent(self):\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n         garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        tx = tx_from_hex(garbage_tx)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n@@ -123,8 +119,7 @@ def test_independent(self):\n         coin = self.coins.pop()\n         tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n                                            {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = CTransaction()\n-        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n@@ -141,8 +136,7 @@ def test_independent(self):\n                                            {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n         tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n         assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = CTransaction()\n-        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n         testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n         assert_equal(testres_high_fee, [\n             {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n@@ -198,9 +192,8 @@ def test_multiple_children(self):\n         rawtx = node.createrawtransaction(inputs, outputs)\n \n         parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        parent_tx = CTransaction()\n         assert parent_signed[\"complete\"]\n-        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n         parent_txid = parent_tx.rehash()\n         assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n@@ -213,8 +206,7 @@ def test_multiple_children(self):\n \n         # Child B\n         rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = CTransaction()\n-        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b = tx_from_hex(rawtx_b)\n         tx_child_b.wit.vtxinwit = [CTxInWitness()]\n         tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n         tx_child_b_hex = tx_child_b.serialize().hex()\n@@ -293,10 +285,8 @@ def test_conflicting(self):\n         rawtx2 = node.createrawtransaction(inputs, output2)\n         signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n         signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = CTransaction()\n-        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n-        tx2 = CTransaction()\n-        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        tx1 = tx_from_hex(signedtx1[\"hex\"])\n+        tx2 = tx_from_hex(signedtx2[\"hex\"])\n         assert signedtx1[\"complete\"]\n         assert signedtx2[\"complete\"]\n \n@@ -327,19 +317,17 @@ def test_rbf(self):\n         raw_replaceable_tx = node.createrawtransaction(inputs, output)\n         signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n         testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = CTransaction()\n-        replaceable_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n         assert_equal(testres_replaceable, [\n             {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n             \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n         # Replacement transaction is identical except has double the fee\n-        replacement_tx = CTransaction()\n-        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n         replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n         signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replacement_tx[\"hex\"])))\n+        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n \n         self.log.info(\"Test that transactions within a package cannot replace each other\")\n         testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])"
      },
      {
        "sha": "b3d57715349a036dd0466c5e0079c8b421eef8f9",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -14,16 +14,18 @@\n \n from collections import OrderedDict\n from decimal import Decimal\n-from io import BytesIO\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import CTransaction, ToHex\n+from test_framework.messages import (\n+    CTransaction,\n+    ToHex,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n     find_vout_for_address,\n-    hex_str_to_bytes,\n )\n \n \n@@ -127,23 +129,22 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n \n         self.log.info('Check that createrawtransaction accepts an array and object as outputs')\n-        tx = CTransaction()\n         # One output\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))\n         assert_equal(len(tx.vout), 1)\n         assert_equal(\n             tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}]),\n         )\n         # Two outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))\n         assert_equal(len(tx.vout), 2)\n         assert_equal(\n             tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             tx.serialize().hex(),"
      },
      {
        "sha": "ef5d08e7b9803eb62ce32d6c0bbfe5438004d356",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 36,
        "deletions": 11,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -5,17 +5,44 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.address import check_script, script_to_p2sh, script_to_p2wsh\n+from test_framework.address import (\n+    check_script,\n+    script_to_p2sh,\n+    script_to_p2wsh,\n+)\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_vout_for_address, hex_str_to_bytes\n-from test_framework.messages import sha256, CTransaction, CTxInWitness\n-from test_framework.script import CScript, OP_0, OP_CHECKSIG, OP_CHECKSEQUENCEVERIFY, OP_CHECKLOCKTIMEVERIFY, OP_DROP, OP_TRUE\n-from test_framework.script_util import key_to_p2pkh_script, script_to_p2sh_p2wsh_script, script_to_p2wsh_script\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+    hex_str_to_bytes,\n+)\n+from test_framework.messages import (\n+    CTxInWitness,\n+    sha256,\n+    tx_from_hex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_CHECKLOCKTIMEVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSEQUENCEVERIFY,\n+    OP_DROP,\n+    OP_TRUE,\n+)\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+    script_to_p2sh_p2wsh_script,\n+    script_to_p2wsh_script,\n+)\n from test_framework.wallet_util import bytes_to_wif\n \n-from decimal import Decimal, getcontext\n-from io import BytesIO\n+from decimal import (\n+    Decimal,\n+    getcontext,\n+)\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -265,8 +292,7 @@ def test_signing_with_csv(self):\n         )\n \n         # Set the witness script\n-        ctx = CTransaction()\n-        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx = tx_from_hex(tx)\n         ctx.wit.vtxinwit.append(CTxInWitness())\n         ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n         tx = ctx.serialize_with_witness().hex()\n@@ -301,8 +327,7 @@ def test_signing_with_cltv(self):\n         )\n \n         # Set the witness script\n-        ctx = CTransaction()\n-        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx = tx_from_hex(tx)\n         ctx.wit.vtxinwit.append(CTxInWitness())\n         ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n         tx = ctx.serialize_with_witness().hex()"
      },
      {
        "sha": "0019b7a42626a6a66641a797df38d04a37c4b2f4",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -23,12 +23,12 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    FromHex,\n     ToHex,\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n     sha256,\n+    tx_from_hex,\n     uint256_from_str,\n )\n from .script import (\n@@ -79,7 +79,7 @@ def create_block(hashprev=None, coinbase=None, ntime=None, *, version=None, tmpl\n     if txlist:\n         for tx in txlist:\n             if not hasattr(tx, 'calc_sha256'):\n-                tx = FromHex(CTransaction(), tx)\n+                tx = tx_from_hex(tx)\n             block.vtx.append(tx)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n@@ -166,7 +166,7 @@ def create_transaction(node, txid, to_address, *, amount):\n         sign for the output that is being spent.\n     \"\"\"\n     raw_tx = create_raw_transaction(node, txid, to_address, amount=amount)\n-    tx = FromHex(CTransaction(), raw_tx)\n+    tx = tx_from_hex(raw_tx)\n     return tx\n \n def create_raw_transaction(node, txid, to_address, *, amount):\n@@ -248,7 +248,7 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:\n         if (insert_redeem_script):\n-            tx = FromHex(CTransaction(), tx_to_witness)\n+            tx = tx_from_hex(tx_to_witness)\n             tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n             tx_to_witness = ToHex(tx)\n "
      },
      {
        "sha": "43c80fa7a8f87fd6e9574efa5c1bb2a2957b9754",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -195,10 +195,17 @@ def FromHex(obj, hex_string):\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n     return obj\n \n+\n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n     return obj.serialize().hex()\n \n+\n+def tx_from_hex(hex_string):\n+    \"\"\"Deserialize from hex string to a transaction object\"\"\"\n+    return FromHex(CTransaction(), hex_string)\n+\n+\n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n "
      },
      {
        "sha": "35dbfbba8dc576f3d25c3e9d5be9813aa1293b52",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -19,7 +19,6 @@\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n-from io import BytesIO\n from typing import Callable, Optional\n \n logger = logging.getLogger(\"TestFramework.utils\")\n@@ -528,16 +527,15 @@ def gen_return_txouts():\n def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n     addr = node.getnewaddress()\n     txids = []\n-    from .messages import CTransaction\n+    from .messages import tx_from_hex\n     for _ in range(num):\n         t = utxos.pop()\n         inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n         outputs = {}\n         change = t['amount'] - fee\n         outputs[addr] = satoshi_round(change)\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+        tx = tx_from_hex(rawtx)\n         for txout in txouts:\n             tx.vout.append(txout)\n         newtx = tx.serialize().hex()"
      },
      {
        "sha": "c04986038dd93178fc339dbf56de76419c3cc383",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -14,17 +14,23 @@\n make assumptions about execution order.\n \"\"\"\n from decimal import Decimal\n-import io\n \n-from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+    send_to_witness,\n+)\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    hex_str_to_bytes,\n )\n \n WALLET_PASSPHRASE = \"test\"\n@@ -576,9 +582,7 @@ def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n \n \n def submit_block_with_tx(node, tx):\n-    ctx = CTransaction()\n-    ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n-\n+    ctx = tx_from_hex(tx)\n     tip = node.getbestblockhash()\n     height = node.getblockcount() + 1\n     block_time = node.getblockheader(tip)[\"mediantime\"] + 1"
      },
      {
        "sha": "1b52ddcba5569fc1a1b135fe99faa12e9d8f2570",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -6,7 +6,10 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.messages import CTransaction, FromHex, ToHex\n+from test_framework.messages import (\n+    ToHex,\n+    tx_from_hex,\n+)\n from test_framework.util import (\n     assert_approx,\n     assert_equal,\n@@ -154,7 +157,7 @@ def run_test(self):\n         self.log.info(\"Fill a wallet with 10,000 outputs corresponding to the same scriptPubKey\")\n         for _ in range(5):\n             raw_tx = self.nodes[0].createrawtransaction([{\"txid\":\"0\"*64, \"vout\":0}], [{addr2[0]: 0.05}])\n-            tx = FromHex(CTransaction(), raw_tx)\n+            tx = tx_from_hex(raw_tx)\n             tx.vin = []\n             tx.vout = [tx.vout[0]] * 2000\n             funded_tx = self.nodes[0].fundrawtransaction(ToHex(tx))"
      },
      {
        "sha": "8b503f5971ba8b43feba7ae3bef8e133edab8b98",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -4,22 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\"\n from decimal import Decimal\n-from io import BytesIO\n \n-from test_framework.messages import COIN, CTransaction\n+from test_framework.messages import (\n+    COIN,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n-def tx_from_hex(hexstring):\n-    tx = CTransaction()\n-    f = BytesIO(hex_str_to_bytes(hexstring))\n-    tx.deserialize(f)\n-    return tx\n-\n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2"
      },
      {
        "sha": "76b39201e310faa748e530a922cc0930117db1fa",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce7b47958c4a10ba20dc86c011d71cda4b070a5/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "patch": "@@ -4,12 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n-import io\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n )\n-from test_framework.messages import CTransaction, COIN\n+from test_framework.messages import (\n+    COIN,\n+    tx_from_hex,\n+)\n \n \n class TxnMallTest(BitcoinTestFramework):\n@@ -71,8 +73,7 @@ def run_test(self):\n         clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs, clone_locktime)\n \n         # createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n-        clone_tx = CTransaction()\n-        clone_tx.deserialize(io.BytesIO(bytes.fromhex(clone_raw)))\n+        clone_tx = tx_from_hex(clone_raw)\n         if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_tx.vout[0].nValue != 40*COIN or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_tx.vout[0].nValue == 40*COIN):\n             (clone_tx.vout[0], clone_tx.vout[1]) = (clone_tx.vout[1], clone_tx.vout[0])\n "
      }
    ]
  },
  {
    "sha": "a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzkzOTZmZTVmOGY4MWM3OGNmODQxMTdhODcwNzRjNmZmNmM5ZDk1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-15T22:32:18Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-21T12:30:03Z"
      },
      "message": "test: remove `ToHex` helper, use .serialize().hex() instead",
      "tree": {
        "sha": "6d5a3a187d6968bd1c5236f1b20bb5ba7759628e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d5a3a187d6968bd1c5236f1b20bb5ba7759628e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce7b47958c4a10ba20dc86c011d71cda4b070a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce7b47958c4a10ba20dc86c011d71cda4b070a5"
      }
    ],
    "stats": {
      "total": 230,
      "additions": 128,
      "deletions": 102
    },
    "files": [
      {
        "sha": "d36813a59105bbc0f32288cc63af4462eff7a125",
        "filename": "contrib/signet/miner",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -23,7 +23,7 @@ PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNE\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n \n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n from test_framework.script import CScriptOp # noqa: E402\n \n logging.basicConfig(\n@@ -274,7 +274,7 @@ def do_genpsbt(args):\n def do_solvepsbt(args):\n     block, signet_solution = do_decode_psbt(sys.stdin.read())\n     block = finish_block(block, signet_solution, args.grind_cmd)\n-    print(ToHex(block))\n+    print(block.serialize().hex())\n \n def nbits_to_target(nbits):\n     shift = (nbits >> 24) & 0xff\n@@ -503,7 +503,7 @@ def do_generate(args):\n         block = finish_block(block, signet_solution, args.grind_cmd)\n \n         # submit block\n-        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=block.serialize().hex().encode('utf8'))\n \n         # report\n         bstr = \"block\" if is_mine else \"backup block\""
      },
      {
        "sha": "e44ce9b57d1c8568416c6b77641b5e895c6064f5",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -17,7 +17,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n     tx_from_hex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -101,7 +100,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)]\n         tx1.vout = [CTxOut(value, DUMMY_P2WPKH_SCRIPT)]\n \n-        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(tx1.serialize().hex())[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -114,13 +113,13 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value - self.relayfee * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx2.rehash()\n \n-        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, tx2.serialize().hex())\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n         tx2.nVersion = 1\n \n-        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        self.nodes[0].sendrawtransaction(tx2.serialize().hex())\n \n     # Calculate the median time past of a prior block (\"confirmations\" before\n     # the current tip).\n@@ -205,9 +204,9 @@ def test_sequence_lock_confirmed_inputs(self):\n                 tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n                 value += utxos[j][\"amount\"]*COIN\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n-            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n+            tx_size = len(tx.serialize().hex())//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), DUMMY_P2WPKH_SCRIPT))\n-            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -236,7 +235,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())[\"hex\"]\n         tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n@@ -258,10 +257,10 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, tx.serialize().hex())\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n-                node.sendrawtransaction(ToHex(tx))\n+                node.sendrawtransaction(tx.serialize().hex())\n \n             return tx\n \n@@ -311,7 +310,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(tx5.serialize().hex())[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -337,7 +336,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             block.rehash()\n             block.solve()\n             tip = block.sha256\n-            assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(ToHex(block)))\n+            assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(block.serialize().hex()))\n             tmpl = self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n             tmpl['previousblockhash'] = '%x' % tip\n             tmpl['transactions'] = []\n@@ -370,11 +369,11 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), DUMMY_P2WPKH_SCRIPT)]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())[\"hex\"]\n         tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n-        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        self.nodes[0].sendrawtransaction(tx2.serialize().hex())\n \n         # Now make an invalid spend of tx2 according to BIP68\n         sequence_value = 100 # 100 block relative locktime\n@@ -385,7 +384,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx3.rehash()\n \n-        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, tx3.serialize().hex())\n \n         # make a block that violates bip68; ensure that the tip updates\n         block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS))\n@@ -418,7 +417,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = tx_from_hex(rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "48c6d82c135ad7e37e08e04559e2553476179df3",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -22,7 +22,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.script import (\n     CScript,\n@@ -170,7 +169,7 @@ def _test_coin_stats_index(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n         tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n-        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())['hex']\n         self.nodes[0].sendrawtransaction(tx2_hex)\n \n         # Include both txs in a block\n@@ -207,7 +206,7 @@ def _test_coin_stats_index(self):\n         block_time = self.nodes[0].getblock(tip)['time'] + 1\n         block = create_block(int(tip, 16), cb, block_time)\n         block.solve()\n-        self.nodes[0].submitblock(ToHex(block))\n+        self.nodes[0].submitblock(block.serialize().hex())\n         self.sync_all()\n \n         self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))"
      },
      {
        "sha": "c532300ce2106ed69d4ab3d92a8a7c60965b63a0",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -36,7 +36,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -208,7 +207,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "8ccdf87ff392fe2e03aa9e6f77d01508963d84ac",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -6,8 +6,23 @@\n from decimal import Decimal\n import random\n \n-from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_2,\n+    OP_DROP,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_TRUE,\n+    hash160,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -64,11 +79,11 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n-    txid = from_node.sendrawtransaction(hexstring=ToHex(tx), maxfeerate=0)\n+    txid = from_node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n     unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n     unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n-    return (ToHex(tx), fee)\n+    return (tx.serialize().hex(), fee)\n \n \n def split_inputs(from_node, txins, txouts, initial_split=False):\n@@ -91,10 +106,10 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n-        completetx = ToHex(tx)\n+        completetx = tx.serialize().hex()\n     txid = from_node.sendrawtransaction(hexstring=completetx, maxfeerate=0)\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})"
      },
      {
        "sha": "cedb7b57caa14eb5daf6ce68e748a9cd065dd8ae",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -11,8 +11,12 @@\n import os\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.messages import CBlock, ToHex\n-from test_framework.script import CScript, OP_RETURN, OP_NOP\n+from test_framework.messages import CBlock\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -62,7 +66,7 @@ def mine_large_blocks(node, n):\n         block.solve()\n \n         # Submit to the node\n-        node.submitblock(ToHex(block))\n+        node.submitblock(block.serialize().hex())\n \n         previousblockhash = block.sha256\n         height += 1"
      },
      {
        "sha": "e42f8045dbecf00a77cd106932e123667a02959f",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 42,
        "deletions": 39,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -7,7 +7,14 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, BIP125_SEQUENCE_NUMBER\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+)\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n@@ -17,10 +24,6 @@\n MAX_REPLACEMENT_LIMIT = 100\n \n \n-def txToHex(tx):\n-    return tx.serialize().hex()\n-\n-\n def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n \n@@ -44,7 +47,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(tx2.serialize().hex())\n \n     txid = node.sendrawtransaction(signed_tx['hex'], 0)\n \n@@ -133,7 +136,7 @@ def test_simple_doublespend(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         self.sync_all()\n@@ -142,7 +145,7 @@ def test_simple_doublespend(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(1 * COIN, DUMMY_2_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -151,7 +154,7 @@ def test_simple_doublespend(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n@@ -176,7 +179,7 @@ def test_doublespend_chain(self):\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n-            tx_hex = txToHex(tx)\n+            tx_hex = tx.serialize().hex()\n             txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n             chain_txids.append(txid)\n             prevout = COutPoint(int(txid, 16), 0)\n@@ -186,7 +189,7 @@ def test_doublespend_chain(self):\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - 30 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n@@ -195,7 +198,7 @@ def test_doublespend_chain(self):\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -223,7 +226,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = vout\n-            tx_hex = txToHex(tx)\n+            tx_hex = tx.serialize().hex()\n \n             assert len(tx.serialize()) < 100000\n             txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n@@ -248,15 +251,15 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n - 1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -276,7 +279,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n             dbl_tx = CTransaction()\n             dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n             dbl_tx.vout = [CTxOut(initial_nValue - 2 * fee * n, DUMMY_P2WPKH_SCRIPT)]\n-            dbl_tx_hex = txToHex(dbl_tx)\n+            dbl_tx_hex = dbl_tx.serialize().hex()\n             # This will raise an exception\n             assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n@@ -291,15 +294,15 @@ def test_replacement_feeperkb(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the fee per KB is much lower, so the replacement is\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 999000]))]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -312,7 +315,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n         tx1a.vout = [CTxOut(int(1.1 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         tx1a_txid = int(tx1a_txid, 16)\n@@ -322,7 +325,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0)]\n         tx2.vin.append(CTxIn(COutPoint(tx1a_txid, 0), nSequence=0))\n         tx2.vout = tx1a.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -331,15 +334,15 @@ def test_spends_of_conflicting_outputs(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n         tx1b.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n         tx1b_txid = int(tx1b_txid, 16)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0),\n                    CTxIn(COutPoint(tx1b_txid, 0))]\n         tx2.vout = tx1a.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -352,13 +355,13 @@ def test_new_unconfirmed_inputs(self):\n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n         tx1.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1_hex = txToHex(tx1)\n+        tx1_hex = tx1.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx1_hex, 0)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n         tx2.vout = tx1.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -381,7 +384,7 @@ def test_too_many_replacements(self):\n         splitting_tx = CTransaction()\n         splitting_tx.vin = [CTxIn(utxo, nSequence=0)]\n         splitting_tx.vout = outputs\n-        splitting_tx_hex = txToHex(splitting_tx)\n+        splitting_tx_hex = splitting_tx.serialize().hex()\n \n         txid = self.nodes[0].sendrawtransaction(splitting_tx_hex, 0)\n         txid = int(txid, 16)\n@@ -391,7 +394,7 @@ def test_too_many_replacements(self):\n             tx_i = CTransaction()\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n             tx_i.vout = [CTxOut(split_value - fee, DUMMY_P2WPKH_SCRIPT)]\n-            tx_i_hex = txToHex(tx_i)\n+            tx_i_hex = tx_i.serialize().hex()\n             self.nodes[0].sendrawtransaction(tx_i_hex, 0)\n \n         # Now create doublespend of the whole lot; should fail.\n@@ -404,7 +407,7 @@ def test_too_many_replacements(self):\n         double_tx = CTransaction()\n         double_tx.vin = inputs\n         double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n-        double_tx_hex = txToHex(double_tx)\n+        double_tx_hex = double_tx.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, 0)\n@@ -413,7 +416,7 @@ def test_too_many_replacements(self):\n         double_tx = CTransaction()\n         double_tx.vin = inputs[0:-1]\n         double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n-        double_tx_hex = txToHex(double_tx)\n+        double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n     def test_opt_in(self):\n@@ -424,7 +427,7 @@ def test_opt_in(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0xffffffff)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # This transaction isn't shown as replaceable\n@@ -434,7 +437,7 @@ def test_opt_in(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -445,14 +448,14 @@ def test_opt_in(self):\n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0xfffffffe)]\n         tx2a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx2a_hex = txToHex(tx2a)\n+        tx2a_hex = tx2a.serialize().hex()\n         tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx2b_hex = txToHex(tx2b)\n+        tx2b_hex = tx2b.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n@@ -468,7 +471,7 @@ def test_opt_in(self):\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n         tx3a.vout = [CTxOut(int(0.9 * COIN), CScript([b'c'])), CTxOut(int(0.9 * COIN), CScript([b'd']))]\n-        tx3a_hex = txToHex(tx3a)\n+        tx3a_hex = tx3a.serialize().hex()\n \n         tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n \n@@ -478,12 +481,12 @@ def test_opt_in(self):\n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n         tx3b.vout = [CTxOut(int(0.5 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx3b_hex = txToHex(tx3b)\n+        tx3b_hex = tx3b.serialize().hex()\n \n         tx3c = CTransaction()\n         tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n         tx3c.vout = [CTxOut(int(0.5 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx3c_hex = txToHex(tx3c)\n+        tx3c_hex = tx3c.serialize().hex()\n \n         self.nodes[0].sendrawtransaction(tx3b_hex, 0)\n         # If tx3b was accepted, tx3c won't look like a replacement,\n@@ -500,14 +503,14 @@ def test_prioritised_transactions(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 740000]))]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # Verify tx1b cannot replace tx1a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -526,15 +529,15 @@ def test_prioritised_transactions(self):\n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx2a_hex = txToHex(tx2a)\n+        tx2a_hex = tx2a.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2b.vout = [CTxOut(int(1.01 * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx2b.rehash()\n-        tx2b_hex = txToHex(tx2b)\n+        tx2b_hex = tx2b.serialize().hex()\n \n         # Verify tx2b cannot replace tx2a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)"
      },
      {
        "sha": "42910904d78e85053852e802ee5545f557428076",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -23,7 +23,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n     sha256,\n     tx_from_hex,\n )\n@@ -268,7 +267,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = tx_from_hex(tx2_hex)\n         assert not tx.wit.is_null()\n@@ -285,7 +284,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n         tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\n         tx.calc_sha256()\n-        txid3 = self.nodes[0].sendrawtransaction(hexstring=ToHex(tx), maxfeerate=0)\n+        txid3 = self.nodes[0].sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n         assert tx.wit.is_null()\n         assert txid3 in self.nodes[0].getrawmempool()\n "
      },
      {
        "sha": "99283b69b0cbc1d04b04d9210b95cd7310bc05fd",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -19,7 +19,6 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.script import (\n     ANNEX_TAG,\n@@ -1306,7 +1305,7 @@ def test_spenders(self, node, spenders, input_counts):\n             # Add change\n             fund_tx.vout.append(CTxOut(balance - 10000, random.choice(host_spks)))\n             # Ask the wallet to sign\n-            ss = BytesIO(bytes.fromhex(node.signrawtransactionwithwallet(ToHex(fund_tx))[\"hex\"]))\n+            ss = BytesIO(bytes.fromhex(node.signrawtransactionwithwallet(fund_tx.serialize().hex())[\"hex\"]))\n             fund_tx.deserialize(ss)\n             # Construct UTXOData entries\n             fund_tx.rehash()"
      },
      {
        "sha": "15f352d68cc65a55cdd9e5b8b65b5c143229da34",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -5,8 +5,15 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, ADDRESS_BCRT1_P2WSH_OP_TRUE\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.address import (\n+    ADDRESS_BCRT1_P2WSH_OP_TRUE,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import (\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n     CTransaction,"
      },
      {
        "sha": "6b8e2b305076d789244db017546a628e982ce47e",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -34,7 +34,6 @@\n     NODE_NETWORK,\n     P2PHeaderAndShortIDs,\n     PrefilledTransaction,\n-    ToHex,\n     calculate_shortid,\n     msg_block,\n     msg_blocktxn,\n@@ -62,7 +61,10 @@\n     OP_TRUE,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, softfork_active\n+from test_framework.util import (\n+    assert_equal,\n+    softfork_active,\n+)\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):\n@@ -715,9 +717,9 @@ def test_end_to_end_block_relay(self, listeners):\n \n         [l.clear_block_announcement() for l in listeners]\n \n-        # ToHex() won't serialize with witness, but this block has no witnesses\n-        # anyway. TODO: repeat this test with witness tx's to a segwit node.\n-        node.submitblock(ToHex(block))\n+        # serialize without witness (this block has no witnesses anyway).\n+        # TODO: repeat this test with witness tx's to a segwit node.\n+        node.submitblock(block.serialize().hex())\n \n         for l in listeners:\n             l.wait_until(lambda: \"cmpctblock\" in l.last_message, timeout=30)"
      },
      {
        "sha": "db57368eae87cb3f5f38c5bb746125d596cbc9a9",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -18,7 +18,6 @@\n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import (\n     CTransaction,\n-    ToHex,\n     tx_from_hex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -451,14 +450,14 @@ def run_test(self):\n         # As transaction version is unsigned, this should convert to its unsigned equivalent.\n         tx = CTransaction()\n         tx.nVersion = -0x80000000\n-        rawtx = ToHex(tx)\n+        rawtx = tx.serialize().hex()\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x80000000)\n \n         # Test the maximum transaction version number that fits in a signed 32-bit integer.\n         tx = CTransaction()\n         tx.nVersion = 0x7fffffff\n-        rawtx = ToHex(tx)\n+        rawtx = tx.serialize().hex()\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x7fffffff)\n "
      },
      {
        "sha": "9afeeaff1089984d4ed1422b07c98d3f19fb3009",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -5,9 +5,15 @@\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import CMerkleBlock, FromHex, ToHex\n+from test_framework.messages import (\n+    CMerkleBlock,\n+    FromHex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n from test_framework.wallet import MiniWallet\n \n \n@@ -91,7 +97,7 @@ def run_test(self):\n         tweaked_proof = FromHex(CMerkleBlock(), proof)\n \n         # Make sure that our serialization/deserialization is working\n-        assert txid1 in self.nodes[0].verifytxoutproof(ToHex(tweaked_proof))\n+        assert txid1 in self.nodes[0].verifytxoutproof(tweaked_proof.serialize().hex())\n \n         # Check to see if we can go up the merkle tree and pass this off as a\n         # single-transaction block\n@@ -100,7 +106,7 @@ def run_test(self):\n         tweaked_proof.txn.vBits = [True] + [False]*7\n \n         for n in self.nodes:\n-            assert not n.verifytxoutproof(ToHex(tweaked_proof))\n+            assert not n.verifytxoutproof(tweaked_proof.serialize().hex())\n \n         # TODO: try more variants, eg transactions at different depths, and\n         # verify that the proofs are invalid"
      },
      {
        "sha": "fa943cb716e6a9bd67bbb5ad5691dc83317ee223",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -23,7 +23,6 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    ToHex,\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n@@ -250,7 +249,7 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n         if (insert_redeem_script):\n             tx = tx_from_hex(tx_to_witness)\n             tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n-            tx_to_witness = ToHex(tx)\n+            tx_to_witness = tx.serialize().hex()\n \n     return node.sendrawtransaction(tx_to_witness)\n "
      },
      {
        "sha": "f43c1eb10f48cb9688831d97351052df289e1886",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -196,11 +196,6 @@ def FromHex(obj, hex_string):\n     return obj\n \n \n-# Convert a binary-serializable object to hex (eg for submission via RPC)\n-def ToHex(obj):\n-    return obj.serialize().hex()\n-\n-\n def tx_from_hex(hex_string):\n     \"\"\"Deserialize from hex string to a transaction object\"\"\"\n     return FromHex(CTransaction(), hex_string)"
      },
      {
        "sha": "d9d135a98675e686cd09419235352dd6cd341eaa",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n-    ToHex,\n     tx_from_hex,\n )\n from test_framework.util import (\n@@ -160,7 +159,7 @@ def run_test(self):\n             tx = tx_from_hex(raw_tx)\n             tx.vin = []\n             tx.vout = [tx.vout[0]] * 2000\n-            funded_tx = self.nodes[0].fundrawtransaction(ToHex(tx))\n+            funded_tx = self.nodes[0].fundrawtransaction(tx.serialize().hex())\n             signed_tx = self.nodes[0].signrawtransactionwithwallet(funded_tx['hex'])\n             self.nodes[0].sendrawtransaction(signed_tx['hex'])\n             self.nodes[0].generate(1)"
      },
      {
        "sha": "37dee219e733d743cbd9288b7c5d630a6ecf7df5",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79396fe5f8f81c78cf84117a87074c6ff6c9d95/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "patch": "@@ -5,8 +5,10 @@\n \"\"\"Test that the wallet resends transactions periodically.\"\"\"\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import ToHex\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -48,7 +50,7 @@ def run_test(self):\n         block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n         block.rehash()\n         block.solve()\n-        node.submitblock(ToHex(block))\n+        node.submitblock(block.serialize().hex())\n \n         # Set correct m_best_block_time, which is used in ResendWalletTransactions\n         node.syncwithvalidationinterfacequeue()"
      }
    ]
  },
  {
    "sha": "191405420815d49ab50184513717a303fc2744d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTE0MDU0MjA4MTVkNDlhYjUwMTg0NTEzNzE3YTMwM2ZjMjc0NGQ2",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-20T12:01:36Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-21T12:33:59Z"
      },
      "message": "scripted-diff: test: rename `FromHex` to `from_hex`\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<FromHex\\>/from_hex/g' $(git grep -l FromHex)\n-END VERIFY SCRIPT-\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "64c9af3f017abdf55e4b7f6da8e3f164a4c14bc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64c9af3f017abdf55e4b7f6da8e3f164a4c14bc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/191405420815d49ab50184513717a303fc2744d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191405420815d49ab50184513717a303fc2744d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/191405420815d49ab50184513717a303fc2744d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191405420815d49ab50184513717a303fc2744d6/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79396fe5f8f81c78cf84117a87074c6ff6c9d95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a79396fe5f8f81c78cf84117a87074c6ff6c9d95"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "78e1fa5ecd2663a2fbd37ef575fd6850fba5f424",
        "filename": "contrib/signet/miner",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -23,7 +23,7 @@ PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNE\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n \n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_hex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n from test_framework.script import CScriptOp # noqa: E402\n \n logging.basicConfig(\n@@ -37,7 +37,7 @@ RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n \n # #### some helpers that could go into test_framework\n \n-# like FromHex, but without the hex part\n+# like from_hex, but without the hex part\n def FromBinary(cls, stream):\n     \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n     # handle bytes object by turning it into a stream\n@@ -195,7 +195,7 @@ def finish_block(block, signet_solution, grind_cmd):\n         headhex = CBlockHeader.serialize(block).hex()\n         cmd = grind_cmd.split(\" \") + [headhex]\n         newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))\n         block.nNonce = newhead.nNonce\n         block.rehash()\n     return block"
      },
      {
        "sha": "afc0bdb8c53b85562a2659bb3038e9614c1f9a9c",
        "filename": "test/functional/feature_utxo_set_hash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/feature_utxo_set_hash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/feature_utxo_set_hash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_utxo_set_hash.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.messages import (\n     CBlock,\n     COutPoint,\n-    FromHex,\n+    from_hex,\n )\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n@@ -32,13 +32,13 @@ def test_muhash_implementation(self):\n         # Generate 100 blocks and remove the first since we plan to spend its\n         # coinbase\n         block_hashes = wallet.generate(1) + node.generate(99)\n-        blocks = list(map(lambda block: FromHex(CBlock(), node.getblock(block, False)), block_hashes))\n+        blocks = list(map(lambda block: from_hex(CBlock(), node.getblock(block, False)), block_hashes))\n         blocks.pop(0)\n \n         # Create a spending transaction and mine a block which includes it\n         txid = wallet.send_self_transfer(from_node=node)['txid']\n         tx_block = node.generateblock(output=wallet.get_address(), transactions=[txid])\n-        blocks.append(FromHex(CBlock(), node.getblock(tx_block['hash'], False)))\n+        blocks.append(from_hex(CBlock(), node.getblock(tx_block['hash'], False)))\n \n         # Serialize the outputs that should be in the UTXO set and add them to\n         # a MuHash object"
      },
      {
        "sha": "b4e662de2e2a830ab9b248de876be41cd0f90b29",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -26,7 +26,7 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    FromHex,\n+    from_hex,\n     HeaderAndShortIDs,\n     MSG_BLOCK,\n     MSG_CMPCT_BLOCK,\n@@ -321,7 +321,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         block_hash = int(node.generate(1)[0], 16)\n \n         # Store the raw block in our internal format.\n-        block = FromHex(CBlock(), node.getblock(\"%064x\" % block_hash, False))\n+        block = from_hex(CBlock(), node.getblock(\"%064x\" % block_hash, False))\n         for tx in block.vtx:\n             tx.calc_sha256()\n         block.rehash()\n@@ -614,7 +614,7 @@ def test_getblocktxn_handler(self, test_node):\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n             block_hash = node.getblockhash(current_height)\n-            block = FromHex(CBlock(), node.getblock(block_hash, False))\n+            block = from_hex(CBlock(), node.getblock(block_hash, False))\n \n             msg = msg_getblocktxn()\n             msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])"
      },
      {
        "sha": "52a47c9bc2ce1ffd22ddd0bd239c12db6a206d7a",
        "filename": "test/functional/p2p_dos_header_tree.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/p2p_dos_header_tree.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/p2p_dos_header_tree.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_dos_header_tree.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.messages import (\n     CBlockHeader,\n-    FromHex,\n+    from_hex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -42,8 +42,8 @@ def run_test(self):\n         self.headers = [l for l in h_lines if not l.startswith(FORK_PREFIX)]\n         self.headers_fork = [l[len(FORK_PREFIX):] for l in h_lines if l.startswith(FORK_PREFIX)]\n \n-        self.headers = [FromHex(CBlockHeader(), h) for h in self.headers]\n-        self.headers_fork = [FromHex(CBlockHeader(), h) for h in self.headers_fork]\n+        self.headers = [from_hex(CBlockHeader(), h) for h in self.headers]\n+        self.headers_fork = [from_hex(CBlockHeader(), h) for h in self.headers_fork]\n \n         self.log.info(\"Feed all non-fork headers, including and up to the first checkpoint\")\n         peer_checkpoint = self.nodes[0].add_p2p_connection(P2PInterface())"
      },
      {
        "sha": "90715cae2689b5d83563f63a812b69c9affbdeb4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -31,7 +31,7 @@\n )\n from test_framework.messages import (\n     CBlockHeader,\n-    FromHex,\n+    from_hex,\n     msg_block,\n )\n from test_framework.p2p import P2PInterface\n@@ -314,7 +314,7 @@ def _test_getblockheader(self):\n         header_hex = node.getblockheader(blockhash=besthash, verbose=False)\n         assert_is_hex_string(header_hex)\n \n-        header = FromHex(CBlockHeader(), header_hex)\n+        header = from_hex(CBlockHeader(), header_hex)\n         header.calc_sha256()\n         assert_equal(header.hash, besthash)\n "
      },
      {
        "sha": "67af6b8f8eb3d832c2ebdb00f0b0053fb88d29cc",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import (\n     CMerkleBlock,\n-    FromHex,\n+    from_hex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -94,7 +94,7 @@ def run_test(self):\n         assert txid1 in self.nodes[0].verifytxoutproof(proof)\n         assert txid2 in self.nodes[1].verifytxoutproof(proof)\n \n-        tweaked_proof = FromHex(CMerkleBlock(), proof)\n+        tweaked_proof = from_hex(CMerkleBlock(), proof)\n \n         # Make sure that our serialization/deserialization is working\n         assert txid1 in self.nodes[0].verifytxoutproof(tweaked_proof.serialize().hex())"
      },
      {
        "sha": "a0e1a6bc127519ac90d288683f678bdef369d87b",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191405420815d49ab50184513717a303fc2744d6/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191405420815d49ab50184513717a303fc2744d6/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=191405420815d49ab50184513717a303fc2744d6",
        "patch": "@@ -191,14 +191,14 @@ def ser_string_vector(l):\n \n \n # Deserialize from a hex string representation (eg from RPC)\n-def FromHex(obj, hex_string):\n+def from_hex(obj, hex_string):\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n     return obj\n \n \n def tx_from_hex(hex_string):\n     \"\"\"Deserialize from hex string to a transaction object\"\"\"\n-    return FromHex(CTransaction(), hex_string)\n+    return from_hex(CTransaction(), hex_string)\n \n \n # Objects that map to bitcoind objects, which can be serialized/deserialized"
      }
    ]
  },
  {
    "sha": "bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGI4YjlhMzQ3ZTY4ZjgwYTJlOGQ0NGNlNTU5MGEyZTgyMTRiNmJi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-17T15:43:02Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-21T12:36:02Z"
      },
      "message": "test: doc: improve doc for `from_hex` helper (mention `to_hex` alternative)",
      "tree": {
        "sha": "44c20c0c5f798681b66ea0d82c4f44df27c7fc3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44c20c0c5f798681b66ea0d82c4f44df27c7fc3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "191405420815d49ab50184513717a303fc2744d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191405420815d49ab50184513717a303fc2744d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/191405420815d49ab50184513717a303fc2744d6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "504c8c70d431e050fec4a29aee49d531a0892432",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
        "patch": "@@ -190,8 +190,12 @@ def ser_string_vector(l):\n     return r\n \n \n-# Deserialize from a hex string representation (eg from RPC)\n def from_hex(obj, hex_string):\n+    \"\"\"Deserialize from a hex string representation (e.g. from RPC)\n+\n+    Note that there is no complementary helper like e.g. `to_hex` for the\n+    inverse operation. To serialize a message object to a hex string, simply\n+    use obj.serialize().hex()\"\"\"\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n     return obj\n "
      }
    ]
  },
  {
    "sha": "d197977ae2076903ed12ab7616a7f93e88be02e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTk3OTc3YWUyMDc2OTAzZWQxMmFiNzYxNmE3ZjkzZTg4YmUwMmUx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-14T08:33:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T12:39:44Z"
      },
      "message": "banman: save the banlist in a JSON format on disk\n\nSave the banlist in `banlist.json` instead of `banlist.dat`.\n\nThis makes it possible to store Tor v3 entries in the banlist on disk\n(and any other addresses that cannot be serialized in addrv1 format).\n\nOnly read `banlist.dat` if it exists and `banlist.json` does not\nexist (first start after an upgrade).\n\nSupersedes https://github.com/bitcoin/bitcoin/pull/20904\nResolves https://github.com/bitcoin/bitcoin/issues/19748",
      "tree": {
        "sha": "f52c91c3abad65cffa13a8334c37da415c708c70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f52c91c3abad65cffa13a8334c37da415c708c70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQiJIACgkQVN8G9ktV\ny78Aeh//SU4/z0Y/SasL7PccKF92qRwCAERlBafFloeZFLVrf27gVVW5a1Ojy2xb\n0FvWb8UwLXNhm7FqeuH+Lt62Y0NJm1fQTlewFwcPAxk2tW/l0F6S34wfizc7TpOT\n7A0ZjySslrnQfxYflB5OdAmOWykaS093s+RSifoC27b7M7J0wxNaSSJKq5Qd2U/e\n5DBLVLX9uu9gPnzBS00GcfV/Ze/a0drMaev+DSY3J47C2tFcpLdTCz2sHUaYC43e\nPzL56bvTbjpMQUJ2o5VlM4KmzfHpvKf83FKESbtPKdBBVUkGoWlEmugC5QxBR8ma\n1+MtMsOFzRvghHcG++HMSs/7DCwxkewCk7sTIAr8SvoslAl3c9uE2ywHcsFXTtsT\nVbmVtD5wHwhaLW8dythK7+nykZZ0vRs2iw939rCtAH+uu93nyTeYG9BqqzE+x2LA\ntu/VL1qgXhbL9dYoXWmY8lDlAf9x6gUUBT59fpTP/+kz9T5HT/dufe0kPvzEM8e0\nbin6AMw30SCAuSj96Fk/MHUERPlluAl2eCRbwuD6fzXe0JPI6QYINfyB5WzVHRMl\neCSk94Pdx1gchPs1TQF2cZdA2BDmiPsg+TPe0Yx3SeJbU4awV9bJpCHz425Iqb9d\n7L8qQpgj51Kip2RhZ/P1CGMTZh7TSSOGHkrngCmLx/BXbEkqBIu0ZBe3v4mrPZnT\nq3Je3atORxkWsC5wHAPMcLD/gPTAlrkivK6aqUxD8PdoOKDqfCu0Sugno4aNbc4j\nATtSaD2KGMJo2P3++vnJY1H79EVGj3UrmUrzVPKaDWkSEgHLy+LF2CkdKo5w3OYV\n0be3R9Q7H0e6NtXnDGYyMNybs80GvBAylM9hdtJl7rrOIG6CpEWvjuX2tCkljqZG\nSN1oFKZ/mBlEsoms3QidTJSx2i+TjsyUD8TTQWYz0kywaZuUDjMGg5plKcoj9zwz\nADyzlkWrTWvqtiBTDo9112CcExsJIeD5gyEqTMexPIaUAgCgaHsUcgnsbpRBsNPY\nak0X0HNJSH1WitK32tKexof/kKpaTZrZ6102KgASjHl7mojkPtGkSQBARISNw7n9\n+jjc4hMjocBCiWShoGgCIxD+DiQCjmlnS2aYu+inwwrNDDI65VmwwssHedv6oj/w\nlWTGotOLqXeuJDE5d+F/s/9bX9Kt4wPBcx+SPsOKqhLpUzR5/IMqMAb43ROLIORG\nq0Q8xIiE7K6iTrc6wAayulToShYXj8Q94SMzt2hiciYbTO6kaKiiljSDaVosEiTB\n+8CdmY2xvygjXsvblA6xlPBYh23a6qjACWz4a68/fwVdNto3LsuQmw9wMTaiv/dV\nTEkds2xtcgDpuWNuaaC2mQUuL99O4g==\n=CT6E\n-----END PGP SIGNATURE-----",
        "payload": "tree f52c91c3abad65cffa13a8334c37da415c708c70\nparent 6a67366fdc3e1d383fe7cbfa209d7e85f0d96638\nauthor Vasil Dimov <vd@FreeBSD.org> 1610613184 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624279184 +0200\n\nbanman: save the banlist in a JSON format on disk\n\nSave the banlist in `banlist.json` instead of `banlist.dat`.\n\nThis makes it possible to store Tor v3 entries in the banlist on disk\n(and any other addresses that cannot be serialized in addrv1 format).\n\nOnly read `banlist.dat` if it exists and `banlist.json` does not\nexist (first start after an upgrade).\n\nSupersedes https://github.com/bitcoin/bitcoin/pull/20904\nResolves https://github.com/bitcoin/bitcoin/issues/19748\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d197977ae2076903ed12ab7616a7f93e88be02e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 170,
      "deletions": 39
    },
    "files": [
      {
        "sha": "2283186eca67b8eecc9441e2204b9187972ab413",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -56,7 +56,8 @@ Subdirectory       | File(s)               | Description\n `indexes/coinstats/db/` | LevelDB database | Coinstats index; *optional*, used if `-coinstatsindex=1`\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)\n `./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup\n-`./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n+`./`               | `banlist.dat`         | Stores the addresses/subnets of banned nodes (deprecated). `bitcoind` or `bitcoin-qt` no longer save the banlist to this file, but read it on startup if `banlist.json` is not present.\n+`./`               | `banlist.json`        | Stores the addresses/subnets of banned nodes.\n `./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option"
      },
      {
        "sha": "b8fd019bab9c335410a50e21ba4abff8a16dceeb",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 4,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -11,13 +11,72 @@\n #include <cstdint>\n #include <hash.h>\n #include <logging/timer.h>\n+#include <netbase.h>\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/settings.h>\n #include <util/system.h>\n \n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n namespace {\n \n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n@@ -119,18 +178,54 @@ bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n }\n } // namespace\n \n-CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))\n+CBanDB::CBanDB(fs::path ban_list_path)\n+    : m_banlist_dat(ban_list_path.string() + \".dat\"),\n+      m_banlist_json(ban_list_path.string() + \".json\")\n {\n }\n \n bool CBanDB::Write(const banmap_t& banSet)\n {\n-    return SerializeFileDB(\"banlist\", m_ban_list_path, banSet, CLIENT_VERSION);\n+    std::vector<std::string> errors;\n+    if (util::WriteSettings(m_banlist_json, {{JSON_KEY, BanMapToJson(banSet)}}, errors)) {\n+        return true;\n+    }\n+\n+    for (const auto& err : errors) {\n+        error(\"%s\", err);\n+    }\n+    return false;\n }\n \n-bool CBanDB::Read(banmap_t& banSet)\n+bool CBanDB::Read(banmap_t& banSet, bool& dirty)\n {\n-    return DeserializeFileDB(m_ban_list_path, banSet, CLIENT_VERSION);\n+    // If the JSON banlist does not exist, then try to read the non-upgraded banlist.dat.\n+    if (!fs::exists(m_banlist_json)) {\n+        // If this succeeds then we need to flush to disk in order to create the JSON banlist.\n+        dirty = true;\n+        return DeserializeFileDB(m_banlist_dat, banSet, CLIENT_VERSION);\n+    }\n+\n+    dirty = false;\n+\n+    std::map<std::string, util::SettingsValue> settings;\n+    std::vector<std::string> errors;\n+\n+    if (!util::ReadSettings(m_banlist_json, settings, errors)) {\n+        for (const auto& err : errors) {\n+            LogPrintf(\"Cannot load banlist %s: %s\\n\", m_banlist_json.string(), err);\n+        }\n+        return false;\n+    }\n+\n+    try {\n+        BanMapFromJson(settings[JSON_KEY], banSet);\n+    } catch (const std::runtime_error& e) {\n+        LogPrintf(\"Cannot parse banlist %s: %s\\n\", m_banlist_json.string(), e.what());\n+        return false;\n+    }\n+\n+    return true;\n }\n \n CAddrDB::CAddrDB()"
      },
      {
        "sha": "399103c99199d661c12e6c21de20cfd563a2085b",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -9,6 +9,7 @@\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <serialize.h>\n+#include <univalue.h>\n \n #include <string>\n #include <vector>\n@@ -36,6 +37,13 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n     SERIALIZE_METHODS(CBanEntry, obj)\n     {\n         uint8_t ban_reason = 2; //! For backward compatibility\n@@ -48,6 +56,12 @@ class CBanEntry\n         nCreateTime = 0;\n         nBanUntil = 0;\n     }\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n };\n \n /** Access to the (IP) address database (peers.dat) */\n@@ -62,15 +76,30 @@ class CAddrDB\n     static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n-/** Access to the banlist database (banlist.dat) */\n+/** Access to the banlist databases (banlist.json and banlist.dat) */\n class CBanDB\n {\n private:\n-    const fs::path m_ban_list_path;\n+    /**\n+     * JSON key under which the data is stored in the json database.\n+     */\n+    static constexpr const char* JSON_KEY = \"banned_nets\";\n+\n+    const fs::path m_banlist_dat;\n+    const fs::path m_banlist_json;\n public:\n     explicit CBanDB(fs::path ban_list_path);\n     bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n+\n+    /**\n+     * Read the banlist from disk.\n+     * @param[out] banSet The loaded list. Set if `true` is returned, otherwise it is left\n+     * in an undefined state.\n+     * @param[out] dirty Indicates whether the loaded list needs flushing to disk. Set if\n+     * `true` is returned, otherwise it is left in an undefined state.\n+     * @return true on success\n+     */\n+    bool Read(banmap_t& banSet, bool& dirty);\n };\n \n /**"
      },
      {
        "sha": "d2437e67338cee2f592d85ea92fe2c7786992144",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -18,20 +18,18 @@ BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t\n     if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist\u2026\").translated);\n \n     int64_t n_start = GetTimeMillis();\n-    m_is_dirty = false;\n-    banmap_t banmap;\n-    if (m_ban_db.Read(banmap)) {\n-        SetBanned(banmap);        // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned();            // sweep out unused entries\n+    if (m_ban_db.Read(m_banned, m_is_dirty)) {\n+        SweepBanned(); // sweep out unused entries\n \n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            m_banned.size(), GetTimeMillis() - n_start);\n+        LogPrint(BCLog::NET, \"Loaded %d banned node addresses/subnets  %dms\\n\", m_banned.size(),\n+                 GetTimeMillis() - n_start);\n     } else {\n-        LogPrintf(\"Recreating banlist.dat\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n+        LogPrintf(\"Recreating the banlist database\\n\");\n+        m_banned = {};\n+        m_is_dirty = true;\n     }\n+\n+    DumpBanlist();\n }\n \n BanMan::~BanMan()\n@@ -53,8 +51,8 @@ void BanMan::DumpBanlist()\n         SetBannedSetDirty(false);\n     }\n \n-    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - n_start);\n+    LogPrint(BCLog::NET, \"Flushed %d banned node addresses/subnets to disk  %dms\\n\", banmap.size(),\n+             GetTimeMillis() - n_start);\n }\n \n void BanMan::ClearBanned()\n@@ -167,13 +165,6 @@ void BanMan::GetBanned(banmap_t& banmap)\n     banmap = m_banned; //create a thread safe copy\n }\n \n-void BanMan::SetBanned(const banmap_t& banmap)\n-{\n-    LOCK(m_cs_banned);\n-    m_banned = banmap;\n-    m_is_dirty = true;\n-}\n-\n void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n@@ -188,7 +179,7 @@ void BanMan::SweepBanned()\n                 m_banned.erase(it++);\n                 m_is_dirty = true;\n                 notify_ui = true;\n-                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+                LogPrint(BCLog::NET, \"Removed banned node address/subnet: %s\\n\", sub_net.ToString());\n             } else\n                 ++it;\n         }"
      },
      {
        "sha": "8c75d4037e5fbd17b9174849a190798b0c4710e9",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -17,7 +17,8 @@\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n-// How often to dump addresses to banlist.dat\n+\n+/// How often to dump banned addresses/subnets to disk.\n static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n@@ -30,7 +31,7 @@ class CSubNet;\n // If an address or subnet is banned, we never accept incoming connections from\n // it and never create outgoing connections to it. We won't gossip its address\n // to other peers in addr messages. Banned addresses and subnets are stored to\n-// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// disk on shutdown and reloaded on startup. Banning can be used to\n // prevent connections with spy nodes or other griefers.\n //\n // 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n@@ -79,7 +80,6 @@ class BanMan\n     void DumpBanlist();\n \n private:\n-    void SetBanned(const banmap_t& banmap);\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     void SetBannedSetDirty(bool dirty = true);"
      },
      {
        "sha": "da0447ca79ce2bd61fcc09921723561260f42a42",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -1161,7 +1161,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n "
      },
      {
        "sha": "5668ead1fbc3f4620ba9551e9eec3e195eb847d4",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n@@ -285,7 +285,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);"
      },
      {
        "sha": "cca41e79aec1cdb23d909087c24944b11c02e8a9",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -9,8 +9,10 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <test/util/setup_common.h>\n+#include <util/readwritefile.h>\n #include <util/system.h>\n \n+#include <cassert>\n #include <cstdint>\n #include <limits>\n #include <string>\n@@ -38,8 +40,20 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     int limit_max_ops{300};\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    const fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist.dat\";\n-    fs::remove(banlist_file);\n+    fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n+\n+    const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n+    if (start_with_corrupted_banlist) {\n+        const std::string sfx{fuzzed_data_provider.ConsumeBool() ? \".dat\" : \".json\"};\n+        assert(WriteBinaryFile(banlist_file.string() + sfx,\n+                               fuzzed_data_provider.ConsumeRandomLengthString()));\n+    } else {\n+        const bool force_read_and_write_to_err{fuzzed_data_provider.ConsumeBool()};\n+        if (force_read_and_write_to_err) {\n+            banlist_file = fs::path{\"path\"} / \"to\" / \"inaccessible\" / \"fuzzed_banlist\";\n+        }\n+    }\n+\n     {\n         BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n@@ -80,5 +94,6 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                 });\n         }\n     }\n-    fs::remove(banlist_file);\n+    fs::remove(banlist_file.string() + \".dat\");\n+    fs::remove(banlist_file.string() + \".json\");\n }"
      },
      {
        "sha": "f71d9148b65cb42dd76502f3127b290ab27aea90",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -196,7 +196,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     m_node.addrman = std::make_unique<CAddrMan>();\n-    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,"
      }
    ]
  },
  {
    "sha": "dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDRlOTU3ZGNkZmM5NzFhNGE5NzE5OTVmZjJkYjlmYjc4N2QyM2Mz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:25:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:27:03Z"
      },
      "message": "test: ensure banlist can be read from disk after restart\n\nWith `banlist.dat` (being written in addrv1 format) if we would try to\nwrite a Tor v3 subnet, it would serialize as a dummy-all-0s IPv6\naddress and subsequently, when deserialized will not result in the same\nsubnet.\n\nThis problem does not exist with `banlist.json` where the data is saved\nin textual, human-readable form.",
      "tree": {
        "sha": "f0942d6f7cad7ec5a43094d07337c71644112d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0942d6f7cad7ec5a43094d07337c71644112d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQk6kACgkQVN8G9ktV\ny79VdR/8D1hos5EHvB2xc41bX673kCjLYfrxH68mlYMxoCPcDjqBD5m3APZdNUiR\nYk6EQcAWE9OKvXZfCKAGjxyJtyxjcxBX2Lx/tT9qTvu2eT+qmylqhxXnNLYV1dqD\n1hjDsETgUhEKmGvct31T82pNMYyzacIvdUG2q97ku3zjLanSsKjDIMMLtj29VvRu\nq8GJjkZLKoBxbdfFDwY6idKFMMVsa6whCUDPPGwJ//jILEKwKYAXtQPbD5GyEFM5\nKCrkZtBHJk2B+etf7OadAIE/hp6DboLhJ3YGAUk7Ow2BxvZj5At8ogoNaDqMOG9i\nHffEPXctB33xDunJCxwoilNZ/P8L+l8jt1IAlHycIcPq5PTXFMmTiw0M4OipVi+Q\ne1HFtVarszGaOwwipUnuJsrsfRKu3HcrgJDeaNGvaTRbBW8THemEnWUSQ0Y+/apR\nWQgqWGkNQhHBgqOiuOwvCBsojW+YM2vKOywQHA4vls0jsmh7ssCUvF/vfDhzGj6f\nNwIGNt5V06EXaFymbL8OGJNSZRdeiY7tYyYmss/50j83Bm+QgZ0i/fM2NmKs6fbl\ncho8nJAEuKPyt0D/asC7DGd6+YfIz7On/nSQAz41YZDlY+q4m5FezqS5CYtxvOTH\nJ7mI1CEile2ckwugMfa4oXb/+TzeIY2Ov6LaYjIZQlJPWqrchyJA84rj2SoXXUto\nth7eWGTdPVy9i+gQuK/CFGAPaa7G+/r0ozNcoK1cZ9VYEOeBH0Hi/34IX1/Yg1BI\ni/6bk11Iw2V86h4AAyqyHPm5gvXdN8AIF4hBiCD+iz+2Dn2lwfHYVO+DFNjUOb1a\nmM8tGw4lHzm8mD1O0FIaaGVd3t2LzCm3KZqPPV4/d4tjVcdVLZ1r3Md2x8dnlQ67\nGz4wPNkLYQKhKqn2uBQsaf2gJtqyIzzf1+Iteg4DGBmzDR3JwgtveYbTKB5WNlS+\nVJgP1PSnu2lgGOyHlYSJjs44si9JSrJgbt1xy6+foXLav/n2k5R/kghHbgxxUarM\n0WEGZFot+WnwC4Jih2twpxOaBYMQUa0kAwM70Gj3d66n+Gv6ZOZMXq2KaNaiUszz\nmmu0F+5B6FVX+RH/2RVKlnaaZ6Qg+OWmHVX6lHZJCqNEzJNL07H9ZkMHHxUzCb2R\nVLmZvaDGtlEQc5Mwj6nnPaWlIoO5VnQa69VlnfHjFjy49bZV0D+O2fxVyztp3FUF\nIwuu87244SLyp+fnFKn1e0Wzth2TeLSJgcu+mjjg1qsLd8tYTwNQsA5slHcsLrpr\nJKvPSk3lti4lHoiU+pqefXwMRw5g9Dfpp56Ehdgw9nGAo7Ko2P4/xEp59cTOmHtY\niqKGKIJ6z7ssJ1DBjaBpX8iv+Dr1JQ==\n=rT8E\n-----END PGP SIGNATURE-----",
        "payload": "tree f0942d6f7cad7ec5a43094d07337c71644112d6d\nparent d197977ae2076903ed12ab7616a7f93e88be02e1\nauthor Vasil Dimov <vd@FreeBSD.org> 1610382340 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282023 +0200\n\ntest: ensure banlist can be read from disk after restart\n\nWith `banlist.dat` (being written in addrv1 format) if we would try to\nwrite a Tor v3 subnet, it would serialize as a dummy-all-0s IPv6\naddress and subsequently, when deserialized will not result in the same\nsubnet.\n\nThis problem does not exist with `banlist.json` where the data is saved\nin textual, human-readable form.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d197977ae2076903ed12ab7616a7f93e88be02e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d197977ae2076903ed12ab7616a7f93e88be02e1"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e91ed3b0452c4d2949cb6530d84a8f4f8c291574",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "patch": "@@ -51,12 +51,24 @@ def run_test(self):\n         ip_addr = \"1.2.3.4\"\n         assert(not self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"add\")\n         assert(self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n+        self.log.info(\"Test the ban list is preserved through restart\")\n+\n+        self.restart_node(1)\n+        assert(self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"remove\")\n         assert(not self.is_banned(self.nodes[1], tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n \n+        self.restart_node(1)\n+        assert(not self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGIxMGViZGEzMDE1NDhiOGZmNGIwYzczZmVmYzM2N2FkNWRjMjJi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-26T07:38:46Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:27:57Z"
      },
      "message": "doc: fix grammar in doc/files.md",
      "tree": {
        "sha": "b1ad280bf48649352faa938c61971d9d1366b4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1ad280bf48649352faa938c61971d9d1366b4e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQk90ACgkQVN8G9ktV\ny79Y2R/9FIwDnS7pd3j8FEBYmGbuhhJMwxx9gbeMpO9fw1PC9AgcDZWndiX1SPKK\nfJ5vKavERcWY6Hiws3x8RqSJXZynZw9Nr3dneCQd6kpxlToBIkp3LvzlRYyfpQbE\n/5t0NhRxxrVpwMmCwf9OYjdkqrUUF2QL9WGZvHg9RrI5YWoJ2OE/FsMnunLVI7PS\n1VbGNKjFsMAoYJhgktyYkoBvqP39aIJTX8Kvox/vIHHJ2Mkw6RSw3r+A/jCZyKaQ\nu4NWvP2ugd5xb2kVUMebFi7BM1ZFIQ94CnSXVZGVlq6xPaPmZqXU6QmkQmQrKkCK\nrstV1U8B5g5eMx+b49TWcwkxlgC3ITXJ9VIqJENlL5tGt0+xzlUm98nrNN5nzMy7\njLUFxz0xl2AKtSsXC+C3pFEfwfsrd5YDhmQux7jEsp4TC2+FTLcI0xQhLfLK+qJY\ndOHQXh10SL/GCvzvAfKe4SNyJdu9PEbk4TYaUThZATrRnf3Tzr9jXUNCeDwePnMk\nn6UYAKOmKONT2Znu4omgTO9gLc9lU7L4p7Ljive55nW6MdTh0VHq7gU4A+86xj9F\nVVX8EtAja2nnRjX4eGp+4RjRYxUgKCPF771HBSwHBqSZmgKhXduZJMZc4c3Zx620\nA5CtETl5HzuDtop7Wl/drqscEBkLU99bD9RJRWYF5rOpeKr/l92aKhieBkryS3mX\nUl0SvUlRTH0ftploxRBwNNF3Wk0caNLTWMdXjQnc9Tom6X87g1qTGxw3uPqETX9M\nhv1OME0WiPillGG/HeDrxjcRBhByYtP5G/FTq6X3zoUdvwDwg0jhfSO54dp8/stB\nM21ivt6We4/xHPUOLzDdIoh4/vMWLZwE2K7wSeSkpckr7hR9ZT0e8chKNO9O3Zus\nhKulN2IaygUJR2a9c0CijCG+BaLEA399uqqIEuyeWg0/MyOule/Y8VJaX4EjXTNd\nqE/m41weiqbfc58UKbmwGyLfSnoQb6kO2sQuE4KeiiI7MnoO/wFyBRHb1bMzFrtr\nos5N60IbXO5lsyMofgkrfTCoXSpTgLAyDx5iJUmXafYcrHQoX59YyCkyLUdXOuWJ\n+nneHFoP1xITqDBoql1tL5X8F72QfRSH/HgvF79wbGPiTctXv5WpTvnqwGtsblUe\nbhVP3FQ76kVGFhB28UqVoDb6U5XurLFdzlo3g0sshQe7AaSiAZmbn5xJbiLBpcR8\n4TVTnpLrUiQbThALP/4IQXBvPK61HnrnsD3q23hv6Yp0Clem1oQ8rZ2ExVj2IDAR\n0wFkqv/pTvpfYfdax5/8LdtVSf+q9VT0qZUBPbO5yHu6C5GeKFcIfIeEuE96Jhzz\nzaLWFPsArWM1EoKzTqIFdjPhdsbXwQ==\n=PM/5\n-----END PGP SIGNATURE-----",
        "payload": "tree b1ad280bf48649352faa938c61971d9d1366b4e5\nparent dd4e957dcdfc971a4a971995ff2db9fb787d23c3\nauthor Vasil Dimov <vd@FreeBSD.org> 1619422726 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282077 +0200\n\ndoc: fix grammar in doc/files.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4e957dcdfc971a4a971995ff2db9fb787d23c3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e670d77ae5d24ca10c40182fc759ea18b9fbc50f",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "patch": "@@ -110,7 +110,7 @@ Subdirectory | File                 | Description\n \n ## Legacy subdirectories and files\n \n-These subdirectories and files are no longer used by the Bitcoin Core:\n+These subdirectories and files are no longer used by Bitcoin Core:\n \n Path           | Description | Repository notes\n ---------------|-------------|-----------------"
      }
    ]
  },
  {
    "sha": "bb719a08db173a753984a04534de6f148b87b17a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjcxOWEwOGRiMTczYTc1Mzk4NGEwNDUzNGRlNmYxNDhiODdiMTdh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-26T07:56:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:29:28Z"
      },
      "message": "style: remove () from assert in rpc_setban.py",
      "tree": {
        "sha": "1e06457542b727befd67e731d7d5c1d6f59f9363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e06457542b727befd67e731d7d5c1d6f59f9363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb719a08db173a753984a04534de6f148b87b17a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQlDoACgkQVN8G9ktV\ny78DdB/8D7XII6MWIG9gMHgz5tV6zmCeMoO6qEDT4YpPV4rVT+r5+YuvxbbMmWsi\n9fnLzt2KbQ9esl5ibgpHBViaeqXgfzYvhgwDQyFEbNm48VxzhgY8Onotx3T8mDED\nj/Gf6L8UD76Ew7J39F44iaWCBITZojDvt2Mkf4ZAScfFDkLpnj4Zwv/KrrEyn0FG\niPF5IH3D5L6Rs3CRvjWNhjPl32qcgNdMqu69RReuXZ/klovVPeVmw3W0HU1VPrKp\nC+4jkVv6pJaOg1MXfK/kvr9Ej2DNY3eJTvXJI/m4rKr0x0HmIIZwTG9fCctgqebh\naAoGkYbM7zEhl6sz6W3r+1kFHMOBVyA5qMV5+lhA/41X+aDWrOKHanesWbewmAAV\n8aoRsgdP6j+kw291cT9ewXGHIrXJJ/jgcDHQ33ZLjv6xH3DH3NaHpnjDcoPKllG4\nsu3ggDwn4MPEqpnAnnR/u2p7nonlAUBcs5E4fHpCv2e7HnW1Fepx/Bfsq01FUj44\npBU0YNdl2VFv7BZVhWeifkmg3dawh1Ywi/e8o0KWBeDQyZMxuNxvZkdh6bCdvoaP\nw/1a1Z5ByuntfaJy4MDHRRaXQKRg/ge/6rcViON/lu1MgghWzzUR3MUo8T5/tn94\n830vu49WscOM9mnmFAoC0lJZPBkIEnafYAW3PQzloh1Ysc4wAwuAwtv2WsgxLwyM\nR7kOgXfXvpzJ28ZhNFd6eac+O9IsxDFiTvdlnqWqK8hBx3bgbVYpOBq7GHhc91Lx\nEVvh1KBPeXhsiE2lErtgwAv6ljJbiMDT8gCxiCc+su8bkNt2fKPqcwVjgwtluQen\nm6OUZXatGCUjmf67tHddUpjBVJA4dQf7ibGrEcZw3w/S8lwhVlhrpkEGdQpOHhZS\nnXDY2tPkZqfjKQprROJaCiOA38gYeD96bTxkpkCOCTkC6SMhada3Ng2Z6+mbzcH1\nilRxoXtRKrCagGh89IirmSt/1KxE4UZCwaS03tbxhbKpH1a9D29PtVuDqvUCxa5K\n64DGjoQBLfeLT5ynAMUp0gFimwe90rBoYp0th1f8exJQKNzM4CTf6Jrw8eL3Y5Zz\nBhkMV+aNc5bEaTzS8U+S5HTQA4x6Sw9F+qRQu903IMUnf6/qlwMrCkrVqaKZUeIl\nZPRK1lhW1P5/vcazrNDywCIPSspaQvU5Nuppz636exPc7GnqUPE75zXH2jNUnu8X\nbE9pghhd1zZYxoiJaaDdlgsQ8Np+d9XnGd76hrefIcMKoRD+3KFHd9FPuUqvsjX0\n9ycyrE7/uoK4xly9debIeLx/224SNh8zZnmM9tDZ1Qw8G867NnrRYq84HvcHkQip\nA2PR1u1mjXBObKl/m/ocKQtuZluhKg==\n=tBNf\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e06457542b727befd67e731d7d5c1d6f59f9363\nparent 24b10ebda301548b8ff4b0c73fefc367ad5dc22b\nauthor Vasil Dimov <vd@FreeBSD.org> 1619423809 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282168 +0200\n\nstyle: remove () from assert in rpc_setban.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb719a08db173a753984a04534de6f148b87b17a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb719a08db173a753984a04534de6f148b87b17a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb719a08db173a753984a04534de6f148b87b17a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24b10ebda301548b8ff4b0c73fefc367ad5dc22b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "36873f964b3e58cf829306bf7fb281c06836ba2d",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb719a08db173a753984a04534de6f148b87b17a/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb719a08db173a753984a04534de6f148b87b17a/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=bb719a08db173a753984a04534de6f148b87b17a",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         # Node 0 get banned by Node 1\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n@@ -36,39 +36,40 @@ def run_test(self):\n         self.restart_node(1, ['-whitelist=127.0.0.1'])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert('noban' in peerinfo['permissions'])\n+        assert \"noban\" in peerinfo[\"permissions\"]\n \n         # If we remove the ban, Node 0 should be able to reconnect even without noban permission\n         self.nodes[1].setban(\"127.0.0.1\", \"remove\")\n         self.restart_node(1, [])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n         node = self.nodes[1]\n         tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n         ip_addr = \"1.2.3.4\"\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         node.setban(tor_addr, \"add\")\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         self.log.info(\"Test the ban list is preserved through restart\")\n \n         self.restart_node(1)\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         node.setban(tor_addr, \"remove\")\n-        assert(not self.is_banned(self.nodes[1], tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(self.nodes[1], tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         self.restart_node(1)\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n \n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTU2ZGE3N2Q3NWY3YmIyZjI1ZDJmMjQ1OGU0NTU1ZWMyYWQ3YWVl",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T13:50:20Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-21T13:54:56Z"
      },
      "message": "Merge bitcoin/bitcoin#21056: rpc: Add a `-rpcwaittimeout` parameter to limit time spent waiting\n\nb9e76f1bf08c52fcd402b2314e00db4ad247ebc8 rpc: Add test for -rpcwaittimeout (Christian Decker)\nf76cb10d7dc9a7b0c55d28011161606399417664 rpc: Prefix rpcwaittimeout error with details on its nature (Christian Decker)\nc490e17ef698a1695050f82ef6567b3b87a21861 doc: Add release notes for the `-rpcwaittimeout` cli parameter (Christian Decker)\na7fcc8eb59fe51473571661316214156fbdbdcae rpc: Add a `-rpcwaittimeout` parameter to limit time spent waiting (Christian Decker)\n\nPull request description:\n\n  Adds a new numeric `-rpcwaittimeout` that can be used to limit the\n  time we spend waiting on the RPC server to appear. This is used by\n  downstream projects to provide a bit of slack when `bitcoind`s RPC\n  interface is not available right away.\n\n  This makes the `-rpcwait` argument more useful, since we can now limit\n  how long we'll ultimately wait, before potentially giving up and reporting\n  an error to the caller. It was discussed in the context of the BTCPayServer\n  wanting to have c-lightning wait for the RPC interface to become available\n  but still have the option of giving up eventually ([4355]).\n\n  I checked with laanwj whether this is already possible ([comment]), and\n  whether this would be a welcome change. Initially I intended to repurpose\n  the (optional) argument to `-rpcwait`, however I decided against it since it\n  would potentially break existing configurations, using things like `rpcwait=1`,\n  or `rpcwait=true` (the former would have an unintended short timeout, when\n  old behavior was to wait indefinitely).\n\n  ~Due to its simplicity I didn't implement a test for it yet, but if that's desired I\n  can provide one.~ Test was added during reviews.\n\n  [4355]: https://github.com/ElementsProject/lightning/issues/4355\n  [comment]: https://github.com/ElementsProject/lightning/issues/4355#issuecomment-768288261\n\nACKs for top commit:\n  laanwj:\n    Code review ACK b9e76f1bf08c52fcd402b2314e00db4ad247ebc8\n  promag:\n    ACK b9e76f1bf08c52fcd402b2314e00db4ad247ebc8.\n\nTree-SHA512: 3cd6728038ec7ca7c35c2e7ccb213bfbe963f99a49bb48bbc1e511c4dd23d9957c04f9af1f8ec57120e47b26eaf580b46817b099d5fc5083c98da7aa92db8638",
      "tree": {
        "sha": "98ad773af12689babb56096a062c715d6579c063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98ad773af12689babb56096a062c715d6579c063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDQmjEACgkQHkrtYphs\n0l0jrAgAhHMplK4OIQpkQ5BHbG/y11hD0uU+49mSpyQDGKUQ1A0rWRniRMv5GIV0\nZiSlAZUwVS6PTMLHZ6qzTxFpWM95jPnv9LmIMmoFmqOWiexrWJjV6RUnjBQiJByL\n+prhYA4h3kxIF5RRZpfIiMNFmeMuTZVMW2sjS9djxh9iFO/hTmb5Zl7Cc4aOsSJy\nkiJpI45kt1zUpAw3rJoe9Ss5xanXo5YYAyXiWbcp34+NnwMr6Feu3m4Bt4FQnEGa\nF5dcTj0kHgcKQkMgbMxvrntYnWHZrJ6Cf7DcfPoVrRTPmxiCpakEgjo98e8aLf+Z\nrefEuTqPZmaDoHD/Mff9gK56IkVQQQ==\n=5dWQ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDaXZ9VZaMF2bKigJuVQY/mCn5aiftxhdaRo5EzYLd+fCP/wEHNHGqiKTQB5\ndYjjCaSesZUI8CBo+FKWsEAVg6e63V8o1ShmysPKkVOLCzYkoyfcgKHbQAjxBGDQ\nmjfwCHhisfvq+nXRAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BCaDlZpmVCVFBniV8MeOszDCPAgoIe0j2LI\nyo43nraGOXXbMLAwvo6AsdRfCfmISlYZEroI8CBK9PAeiRiEY3w8PzgGb1KdMOiM\n+ZnD4JTuDEVYbuDpJQjxBGDQmjfwCGhUeKQoTgU3AIPf4w0u+QyOKShodHRwczov\nL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQxAkCeeO+LAo+wbTZ\npsneUAjwIK09QksvyPfB0vPEBONbUNsCSSnN2PSV1PULE110ctcJCPAglC33dxkN\nJnJlrQYkCg9aHQsYFm6IkeaHEonhd54aOioI8QRg0Jo38Aiq3oKDITqxjwCD3+MN\nLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQ2/M/zFzN\ngIRi5yYoxL3nOgjwIJ2ft8VjmGk7Z0d2rv0QpwXqgxk3pBD47OAzqJRAAYFJCPAg\nHrrg+gxbBI2JEJMfOn495nKBytomUtVFq+py9paaiGkI8QRg0Jo38AjdMEHHewwc\ngQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 98ad773af12689babb56096a062c715d6579c063\nparent 6a67366fdc3e1d383fe7cbfa209d7e85f0d96638\nparent b9e76f1bf08c52fcd402b2314e00db4ad247ebc8\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624283420 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624283696 +0200\n\nMerge bitcoin/bitcoin#21056: rpc: Add a `-rpcwaittimeout` parameter to limit time spent waiting\n\nb9e76f1bf08c52fcd402b2314e00db4ad247ebc8 rpc: Add test for -rpcwaittimeout (Christian Decker)\nf76cb10d7dc9a7b0c55d28011161606399417664 rpc: Prefix rpcwaittimeout error with details on its nature (Christian Decker)\nc490e17ef698a1695050f82ef6567b3b87a21861 doc: Add release notes for the `-rpcwaittimeout` cli parameter (Christian Decker)\na7fcc8eb59fe51473571661316214156fbdbdcae rpc: Add a `-rpcwaittimeout` parameter to limit time spent waiting (Christian Decker)\n\nPull request description:\n\n  Adds a new numeric `-rpcwaittimeout` that can be used to limit the\n  time we spend waiting on the RPC server to appear. This is used by\n  downstream projects to provide a bit of slack when `bitcoind`s RPC\n  interface is not available right away.\n\n  This makes the `-rpcwait` argument more useful, since we can now limit\n  how long we'll ultimately wait, before potentially giving up and reporting\n  an error to the caller. It was discussed in the context of the BTCPayServer\n  wanting to have c-lightning wait for the RPC interface to become available\n  but still have the option of giving up eventually ([4355]).\n\n  I checked with laanwj whether this is already possible ([comment]), and\n  whether this would be a welcome change. Initially I intended to repurpose\n  the (optional) argument to `-rpcwait`, however I decided against it since it\n  would potentially break existing configurations, using things like `rpcwait=1`,\n  or `rpcwait=true` (the former would have an unintended short timeout, when\n  old behavior was to wait indefinitely).\n\n  ~Due to its simplicity I didn't implement a test for it yet, but if that's desired I\n  can provide one.~ Test was added during reviews.\n\n  [4355]: https://github.com/ElementsProject/lightning/issues/4355\n  [comment]: https://github.com/ElementsProject/lightning/issues/4355#issuecomment-768288261\n\nACKs for top commit:\n  laanwj:\n    Code review ACK b9e76f1bf08c52fcd402b2314e00db4ad247ebc8\n  promag:\n    ACK b9e76f1bf08c52fcd402b2314e00db4ad247ebc8.\n\nTree-SHA512: 3cd6728038ec7ca7c35c2e7ccb213bfbe963f99a49bb48bbc1e511c4dd23d9957c04f9af1f8ec57120e47b26eaf580b46817b099d5fc5083c98da7aa92db8638\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638"
      },
      {
        "sha": "b9e76f1bf08c52fcd402b2314e00db4ad247ebc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e76f1bf08c52fcd402b2314e00db4ad247ebc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e76f1bf08c52fcd402b2314e00db4ad247ebc8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 24,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2201a8cdaefd7abb5dd3c70c85fac558ab5aecfe",
        "filename": "doc/release-notes-21056.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/doc/release-notes-21056.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/doc/release-notes-21056.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21056.md?ref=6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
        "patch": "@@ -0,0 +1,6 @@\n+New bitcoin-cli settings\n+------------------------\n+\n+- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n+  in seconds to use with `-rpcwait`. If the timeout expires,\n+  `bitcoin-cli` will report a failure. (#21056)"
      },
      {
        "sha": "adc485983f3852975788e1c90b77aea8b6b82b00",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
        "patch": "@@ -40,6 +40,7 @@ UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n+static constexpr int DEFAULT_WAIT_CLIENT_TIMEOUT = 0;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n static constexpr int8_t UNKNOWN_NETWORK{-1};\n@@ -73,6 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -794,6 +796,9 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int64_t deadline = GetTime<std::chrono::seconds>().count() + timeout;\n+\n     do {\n         try {\n             response = CallRPC(rh, strMethod, args, rpcwallet);\n@@ -804,11 +809,12 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n                 }\n             }\n             break; // Connection succeeded, no need to retry.\n-        } catch (const CConnectionFailed&) {\n-            if (fWait) {\n-                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+        } catch (const CConnectionFailed& e) {\n+            const int64_t now = GetTime<std::chrono::seconds>().count();\n+            if (fWait && (timeout <= 0 || now < deadline)) {\n+                UninterruptibleSleep(std::chrono::seconds{1});\n             } else {\n-                throw;\n+                throw CConnectionFailed(strprintf(\"timeout on transient error: %s\", e.what()));\n             }\n         }\n     } while (fWait);"
      },
      {
        "sha": "22eec59600dff4736201a9cf549f04bde0332e4b",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
        "patch": "@@ -10,10 +10,12 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than_or_equal,\n     assert_raises_process_error,\n     assert_raises_rpc_error,\n     get_auth_cookie,\n )\n+import time\n \n # The block reward of coinbaseoutput.nValue (50) BTC/block matures after\n # COINBASE_MATURITY (100) blocks. Therefore, after mining 101 blocks we expect\n@@ -248,6 +250,12 @@ def run_test(self):\n         self.nodes[0].wait_for_rpc_connection()\n         assert_equal(blocks, BLOCKS + 25)\n \n+        self.log.info(\"Test -rpcwait option waits at most -rpcwaittimeout seconds for startup\")\n+        self.stop_node(0)  # stop the node so we time out\n+        start_time = time.time()\n+        assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('-rpcwait', '-rpcwaittimeout=5').echo)\n+        assert_greater_than_or_equal(time.time(), start_time + 5)\n+\n \n if __name__ == '__main__':\n     TestBitcoinCli().main()"
      }
    ]
  },
  {
    "sha": "74013641e035a2f1b12383e63938a5e848506df3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDAxMzY0MWUwMzVhMmYxYjEyMzgzZTYzOTM4YTVlODQ4NTA2ZGYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T14:11:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T14:11:13Z"
      },
      "message": "Merge bitcoin/bitcoin#22089: test: MiniWallet: fix fee calculation for P2PK and check tx vsize\n\nd6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206 test: MiniWallet: fix fee calculation for P2PK and check tx vsize (Sebastian Falbesoner)\nce024b1c0ef2dcd307023aaaab40373c8bf17db1 test: MiniWallet: force P2PK signature to have fixed size (71 bytes) (Sebastian Falbesoner)\n\nPull request description:\n\n  This PR is a follow-up to #21945. It aims to both fix the fee calculation for P2PK mode transactions and enable its vsize check. Currently, the latter assumes a fixed tx length, which is fine for anyone-can-spend txs but doesn't apply to P2PK output spends due to varying DER signature size; the vsize check is therefore disabled for P2PK mode on master branch.\n\n  Creating one million DER signatures with MiniWallet shows the following distribution of sizes (smart people with better math skills probably could deduce the ratios without trying, but hey):\n\n  | DER signature size [bytes]  | #occurences (ratio) |\n  | ------------- | ------------- |\n  | 71  | 498893 (49.89%) |\n  | 70 | 497244 (49.72%) |\n  | 69 | 3837 (0.38%) |\n  | 68 | 22 (0.0022%) |\n\n  Note that even smaller signatures are possible (for smaller R and S values with leading zero bytes), it's just that the probability decreases exponentially.     Instead of choosing a large vsize check range and hoping that smaller signatures are never created (potentially leading to flaky tests), the proposed solution is ~~to limit the signature size to the two most common sizes 71 and 70 (>99.6% probability) and then accordingly only check for two vsize values; the value to be used for fee calculation is a decimal right between the two possible sizes (167.5 vbytes) and for the vsize check it's rounded down/up integer values are used.~~ to simply grind the signature to a fixed size of 71 bytes (49.89% probability, i.e. on average each call to `sign_tx()`, on average two ECC signing operations are needed).\n\n  ~~The idea of grinding signatures to a fixed size (similar to https://github.com/bitcoin/bitcoin/pull/13666 which grinds to low-R values) would be counter-productive, as the signature creation in the test suite is quite expensive and this would significantly slow down tests that calculate hundreds of signatures (like e.g. feature_csv_activation.py).~~\n\n  For more about transaction sizes on different input/output types, see the following interesting article: https://medium.com/coinmonks/on-bitcoin-transaction-sizes-97e31bc9d816\n\nACKs for top commit:\n  MarcoFalke:\n    Concept ACK d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206\n\nTree-SHA512: 011c70ee0e4adf9ba12902e4b6c411db9ae96bdd8bc810bf1d67713367998e28ea328394503371fc1f5087a819547ddaea56c073b28db893ae1c0031d7927f32",
      "tree": {
        "sha": "ea99b06631ad2af869f2ca67a30aaeccc86b70a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea99b06631ad2af869f2ca67a30aaeccc86b70a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74013641e035a2f1b12383e63938a5e848506df3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg1MAwAubEYbRRbMAKdIXwUrURbpKPf+i0zy+Khy7hLF8KC979ndugunKmo5aHN\n3ep7Xylk3kk1AcYC4QFmcilOpH3EbYtfZckaP//eiH4mEl5LphXj60vf/B5zNq01\nEnLeSRMsViZSr8cEbliBdyVT18JbveRl79SzAFZx0pJGKg5BcVkry+9mQrz4E0Sp\nLH22QFS9k5Z5srpgj2smlzFlavbwgHW/xiJg1UVJ4k9N+fkjsPRk4v35iiptMNYT\nH1rec04LU5JqtyCysLuDuOsE+LYAzHSQ5hC816tD7PxQiUoGiASxuTwbTMbNECH8\nrEc4tFrArBo5V7BUI0q9RryOWZ0UGobXRQaqldp9fwP+yCLdfWL7Z1yt/yIKioKB\nUbt3vkbaC2baZL3qOQLWTMPR9KU57kL8FQr+uCJXsQvYXvgC/Yyi6S8Hj0TfY9i1\n25cKxTZzP+BZ0abWui7uZWWdTFkp+ZrL5hVtqABJOJZhJGkQVv2S3nr7cU5pdVQU\nar2JoLcF\n=PgSV\n-----END PGP SIGNATURE-----",
        "payload": "tree ea99b06631ad2af869f2ca67a30aaeccc86b70a1\nparent 6556da77d75f7bb2f25d2f2458e4555ec2ad7aee\nparent d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206\nauthor MarcoFalke <falke.marco@gmail.com> 1624284669 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624284673 +0200\n\nMerge bitcoin/bitcoin#22089: test: MiniWallet: fix fee calculation for P2PK and check tx vsize\n\nd6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206 test: MiniWallet: fix fee calculation for P2PK and check tx vsize (Sebastian Falbesoner)\nce024b1c0ef2dcd307023aaaab40373c8bf17db1 test: MiniWallet: force P2PK signature to have fixed size (71 bytes) (Sebastian Falbesoner)\n\nPull request description:\n\n  This PR is a follow-up to #21945. It aims to both fix the fee calculation for P2PK mode transactions and enable its vsize check. Currently, the latter assumes a fixed tx length, which is fine for anyone-can-spend txs but doesn't apply to P2PK output spends due to varying DER signature size; the vsize check is therefore disabled for P2PK mode on master branch.\n\n  Creating one million DER signatures with MiniWallet shows the following distribution of sizes (smart people with better math skills probably could deduce the ratios without trying, but hey):\n\n  | DER signature size [bytes]  | #occurences (ratio) |\n  | ------------- | ------------- |\n  | 71  | 498893 (49.89%) |\n  | 70 | 497244 (49.72%) |\n  | 69 | 3837 (0.38%) |\n  | 68 | 22 (0.0022%) |\n\n  Note that even smaller signatures are possible (for smaller R and S values with leading zero bytes), it's just that the probability decreases exponentially.     Instead of choosing a large vsize check range and hoping that smaller signatures are never created (potentially leading to flaky tests), the proposed solution is ~~to limit the signature size to the two most common sizes 71 and 70 (>99.6% probability) and then accordingly only check for two vsize values; the value to be used for fee calculation is a decimal right between the two possible sizes (167.5 vbytes) and for the vsize check it's rounded down/up integer values are used.~~ to simply grind the signature to a fixed size of 71 bytes (49.89% probability, i.e. on average each call to `sign_tx()`, on average two ECC signing operations are needed).\n\n  ~~The idea of grinding signatures to a fixed size (similar to https://github.com/bitcoin/bitcoin/pull/13666 which grinds to low-R values) would be counter-productive, as the signature creation in the test suite is quite expensive and this would significantly slow down tests that calculate hundreds of signatures (like e.g. feature_csv_activation.py).~~\n\n  For more about transaction sizes on different input/output types, see the following interesting article: https://medium.com/coinmonks/on-bitcoin-transaction-sizes-97e31bc9d816\n\nACKs for top commit:\n  MarcoFalke:\n    Concept ACK d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206\n\nTree-SHA512: 011c70ee0e4adf9ba12902e4b6c411db9ae96bdd8bc810bf1d67713367998e28ea328394503371fc1f5087a819547ddaea56c073b28db893ae1c0031d7927f32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74013641e035a2f1b12383e63938a5e848506df3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74013641e035a2f1b12383e63938a5e848506df3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74013641e035a2f1b12383e63938a5e848506df3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6556da77d75f7bb2f25d2f2458e4555ec2ad7aee"
      },
      {
        "sha": "d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "47ec6b0be253a1431e4c52e4b68cb21e74c98d90",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -88,12 +88,20 @@ def scan_tx(self, tx):\n             if out['scriptPubKey']['hex'] == self._scriptPubKey.hex():\n                 self._utxos.append({'txid': tx['txid'], 'vout': out['n'], 'value': out['value']})\n \n-    def sign_tx(self, tx):\n+    def sign_tx(self, tx, fixed_length=True):\n         \"\"\"Sign tx that has been created by MiniWallet in P2PK mode\"\"\"\n         assert self._priv_key is not None\n         (sighash, err) = LegacySignatureHash(CScript(self._scriptPubKey), tx, 0, SIGHASH_ALL)\n         assert err is None\n-        tx.vin[0].scriptSig = CScript([self._priv_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+        # for exact fee calculation, create only signatures with fixed size by default (>49.89% probability):\n+        # 65 bytes: high-R val (33 bytes) + low-S val (32 bytes)\n+        # with the DER header/skeleton data of 6 bytes added, this leads to a target size of 71 bytes\n+        der_sig = b''\n+        while not len(der_sig) == 71:\n+            der_sig = self._priv_key.sign_ecdsa(sighash)\n+            if not fixed_length:\n+                break\n+        tx.vin[0].scriptSig = CScript([der_sig + bytes(bytearray([SIGHASH_ALL]))])\n \n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n@@ -134,7 +142,10 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n-        vsize = Decimal(96)\n+        if self._priv_key is None:\n+            vsize = Decimal(96)  # anyone-can-spend\n+        else:\n+            vsize = Decimal(168)  # P2PK (73 bytes scriptSig + 35 bytes scriptPubKey + 60 bytes other)\n         send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n         fee = utxo_to_spend['value'] - send_value\n         assert send_value > 0\n@@ -159,10 +170,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n-            # TODO: for P2PK, vsize is not constant due to varying scriptSig length,\n-            # so only check this for anyone-can-spend outputs right now\n-            if self._priv_key is None:\n-                assert_equal(tx_info['vsize'], vsize)\n+            assert_equal(tx_info['vsize'], vsize)\n             assert_equal(tx_info['fees']['base'], fee)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n "
      }
    ]
  },
  {
    "sha": "fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA5ZmQxYTA5ODZhYmE5MThjNTc0MGY0YzA0MWZmMmM3YTdiYWU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T14:30:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T14:31:06Z"
      },
      "message": "doc: Final merge of release notes snippets",
      "tree": {
        "sha": "84f5d8dedd6f643ce799bb7f67da93854bdd2345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84f5d8dedd6f643ce799bb7f67da93854bdd2345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi1uAv/aQvheW4B0EJHrmMJ+XS5gwuoJQFh7NMm1oCBcimjaXSv0/BidWbz3w5Y\nUdlQk9UJcp/LgFLGH2eMcF7kgPVQRcY4GuulE0jaDJ+H0UbqPjjUtQkOD+eg0ccw\nSq0qgQRGR4j3cSUsbm7O/Oh5+WKMHPJjBL984M2m7D7MAUAMnmHMiExvB52L3fDe\nKzGELIvOCmBDeT27bD18ZBRP8M4Lz3MDmHLpB53WsT/LDwSEjwInYHmeSdd38iCw\nXK0hZP6thraxUcgx3DFjFzeR/IgIV+dMUOs4aY8OB9RVKhE8HKBITseRGEEHsNFv\n4hZ3K5TzCsVL9sLfzUBaLJCq4DN0J2nwih1vv33xBAiFAg11yENuSXVw41Z0De+L\n7D3V8svKAMsdnQTldNBCh/2I/sCFwIdVxv2WLmAsyiMS/waC1vr4mCpgWTPxPHHj\nBzbE78Mfp/IbLwQwNuCvHvM0/KZhuv2ysYZFyw+KipRiJ0NrUI0v5ZtnkkZ9AX/B\nEEAUaXU2\n=QMpq\n-----END PGP SIGNATURE-----",
        "payload": "tree 84f5d8dedd6f643ce799bb7f67da93854bdd2345\nparent 74013641e035a2f1b12383e63938a5e848506df3\nauthor MarcoFalke <falke.marco@gmail.com> 1624285835 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624285866 +0200\n\ndoc: Final merge of release notes snippets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74013641e035a2f1b12383e63938a5e848506df3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74013641e035a2f1b12383e63938a5e848506df3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74013641e035a2f1b12383e63938a5e848506df3"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 21,
      "deletions": 29
    },
    "files": [
      {
        "sha": "9a02bbd275f616c77fa9d4de5f6f24d7106356ae",
        "filename": "doc/release-notes-20833.md",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20833.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20833.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20833.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,12 +0,0 @@\n-Updated RPCs\n-------------\n-\n-- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n-  API may be unstable). This is intended for testing transaction packages with dependency\n-  relationships; it is not recommended for batch-validating independent transactions. In addition to\n-  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n-  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n-  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n-  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n-  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n-"
      },
      {
        "sha": "60eed6838f7b4690f945fdcc253f9f2224667038",
        "filename": "doc/release-notes-20867.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20867.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20867.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20867.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,11 +0,0 @@\n-Wallet\n-------\n-\n-- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n-  under `wsh()`. (#20867)\n-\n-Updated RPCs\n-------------\n-\n-- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n-  Segwit addresses."
      },
      {
        "sha": "2201a8cdaefd7abb5dd3c70c85fac558ab5aecfe",
        "filename": "doc/release-notes-21056.md",
        "status": "removed",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-21056.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-21056.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21056.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,6 +0,0 @@\n-New bitcoin-cli settings\n-------------------------\n-\n-- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n-  in seconds to use with `-rpcwait`. If the timeout expires,\n-  `bitcoin-cli` will report a failure. (#21056)"
      },
      {
        "sha": "dc28ccb9edd5feaa24ea1ff5d9671c0ca89f86f5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
        "patch": "@@ -1,3 +1,5 @@\n+# Release notes now being edited on https://github.com/bitcoin-core/bitcoin-devwiki/wiki/22.0-Release-Notes-draft\n+\n *After branching off for a major version release of Bitcoin Core, use this\n template to create the initial release notes draft.*\n \n@@ -121,6 +123,18 @@ Updated RPCs\n - `getnodeaddresses` now also accepts a \"network\" argument (ipv4, ipv6, onion,\n   or i2p) to return only addresses of the specified network.  (#21843)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n+  API may be unstable). This is intended for testing transaction packages with dependency\n+  relationships; it is not recommended for batch-validating independent transactions. In addition to\n+  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n+  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n+  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n+  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n+  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n+\n+- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n+  Segwit addresses. (#20867)\n+\n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n@@ -152,6 +166,10 @@ Tools and Utilities\n   like `-onlynet=<network>` or to upgrade to this release of Bitcoin Core 22.0\n   that supports Tor v3 only.  (#21595)\n \n+- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n+  in seconds to use with `-rpcwait`. If the timeout expires,\n+  `bitcoin-cli` will report a failure. (#21056)\n+\n Wallet\n ------\n \n@@ -167,6 +185,9 @@ Wallet\n   Note that the resulting transaction may become invalid if one of the unsafe inputs disappears.\n   If that happens, the transaction must be funded with different inputs and republished. (#21359)\n \n+- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n+  under `wsh()`. (#20867)\n+\n GUI changes\n -----------\n "
      }
    ]
  },
  {
    "sha": "168b6c317ca054c1287c36be532964e861f44266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhiNmMzMTdjYTA1NGMxMjg3YzM2YmU1MzI5NjRlODYxZjQ0MjY2",
    "commit": {
      "author": {
        "name": "Josiah Baker",
        "email": "josibake@protonmail.com",
        "date": "2021-06-09T13:31:48Z"
      },
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2021-06-21T15:12:16Z"
      },
      "message": "add dummy file param to fix jupyter\n\ntestshell in jupyter was failing due to an extra arg.\nthis adds a dummy -f param, which allows TestShell to\nbe used in a command line or jupyter environment",
      "tree": {
        "sha": "90e68500c8ae2d0e81e22d140a8eebc307565d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90e68500c8ae2d0e81e22d140a8eebc307565d36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168b6c317ca054c1287c36be532964e861f44266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168b6c317ca054c1287c36be532964e861f44266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168b6c317ca054c1287c36be532964e861f44266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168b6c317ca054c1287c36be532964e861f44266/comments",
    "author": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e38d5c06d9b32326585121b46bb59041d7cfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e38d5c06d9b32326585121b46bb59041d7cfed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e38d5c06d9b32326585121b46bb59041d7cfed"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40360c54a0f71cbc18d412d4edf471d689afd81d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168b6c317ca054c1287c36be532964e861f44266/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168b6c317ca054c1287c36be532964e861f44266/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=168b6c317ca054c1287c36be532964e861f44266",
        "patch": "@@ -194,6 +194,10 @@ def parse_args(self):\n                             help=\"Run test using legacy wallets\", dest='descriptors')\n \n         self.add_options(parser)\n+        # Running TestShell in a Jupyter notebook causes an additional -f argument\n+        # To keep TestShell from failing with an \"unrecognized argument\" error, we add a dummy \"-f\" argument\n+        # source: https://stackoverflow.com/questions/48796169/how-to-fix-ipykernel-launcher-py-error-unrecognized-arguments-in-jupyter/56349168#56349168\n+        parser.add_argument(\"-f\", \"--fff\", help=\"a dummy argument to fool ipython\", default=\"1\")\n         self.options = parser.parse_args()\n         self.options.previous_releases_path = previous_releases_path\n "
      }
    ]
  },
  {
    "sha": "398dd678338971d2189934713c83c184742f293f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOThkZDY3ODMzODk3MWQyMTg5OTM0NzEzYzgzYzE4NDc0MmYyOTNm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T15:54:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-21T15:55:00Z"
      },
      "message": "Merge bitcoin/bitcoin#22296: doc: Final merge of release notes snippets, mv to wiki\n\nfa09fd1a0986aba918c5740f4c041ff2c7a7bae7 doc: Final merge of release notes snippets (MarcoFalke)\n\nPull request description:\n\n  None of the remaining pulls tagged for 22.0 have snippets, so merge them and move them to the wiki.\n\n  Trivial to review with `--color-moved=dimmed-zebra`.\n\nACKs for top commit:\n  laanwj:\n    ACK fa09fd1a0986aba918c5740f4c041ff2c7a7bae7\n  jonatack:\n    ACK fa09fd1a0986aba918c5740f4c041ff2c7a7bae7\n\nTree-SHA512: d5d272a9fc2217a87988efa189000cae5330da22f0459dd5e4340a18aba3d67d8fe8661016cb777e2e15f5d137c1c2b3de7d576c942eaf4201dabdc4e9c783f4",
      "tree": {
        "sha": "84f5d8dedd6f643ce799bb7f67da93854bdd2345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84f5d8dedd6f643ce799bb7f67da93854bdd2345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/398dd678338971d2189934713c83c184742f293f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjYVAv/SYFZlGld9qixVv4x48ntyAY5ySrMH8rBuNcNnXrziGwlhKP9aLo4kc0r\nTHD2+cgruTfoRPlH+1f7XRXCBY7TSy/QA8226ftRYNB9stmpcbeShAPVkjGHv7tO\nEmNdijp+dz0XyFb/daC0ajanu4twQUxjOI5xzGK578/QzFBRo6zgErBmfSU5pAmy\nWbskabuciz0D0D3ToA29kLOu6rpAJBr5JTYnZLncpyVXmdZkXrp/eqweKvLsD5L3\nYknY1YHHjUgzPSibqLSmkJgw7f+mMwZUKmgFt0mQqEAbMTkpa5IK7dpMOh5ruL/S\nDAdH4ErXHn8+ThjwNewsKI46Tx1+k0MnOsswQNXHPEQJ0ac4H2SkzEVtDc7flW9+\nEt6xwgFVwnU8RmLUkzT+4rb+xImwG0ptRwRIUJSKV49nhCV088U3J46e7ZnEUxQS\nNCHLgckfukRszEBuNRB4RYc1+2xZiMqHXUtq+EGThLhJmHYkui3Dc9pRU/TZXW2l\ng41d4hTj\n=OIlD\n-----END PGP SIGNATURE-----",
        "payload": "tree 84f5d8dedd6f643ce799bb7f67da93854bdd2345\nparent 74013641e035a2f1b12383e63938a5e848506df3\nparent fa09fd1a0986aba918c5740f4c041ff2c7a7bae7\nauthor MarcoFalke <falke.marco@gmail.com> 1624290894 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624290900 +0200\n\nMerge bitcoin/bitcoin#22296: doc: Final merge of release notes snippets, mv to wiki\n\nfa09fd1a0986aba918c5740f4c041ff2c7a7bae7 doc: Final merge of release notes snippets (MarcoFalke)\n\nPull request description:\n\n  None of the remaining pulls tagged for 22.0 have snippets, so merge them and move them to the wiki.\n\n  Trivial to review with `--color-moved=dimmed-zebra`.\n\nACKs for top commit:\n  laanwj:\n    ACK fa09fd1a0986aba918c5740f4c041ff2c7a7bae7\n  jonatack:\n    ACK fa09fd1a0986aba918c5740f4c041ff2c7a7bae7\n\nTree-SHA512: d5d272a9fc2217a87988efa189000cae5330da22f0459dd5e4340a18aba3d67d8fe8661016cb777e2e15f5d137c1c2b3de7d576c942eaf4201dabdc4e9c783f4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398dd678338971d2189934713c83c184742f293f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/398dd678338971d2189934713c83c184742f293f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398dd678338971d2189934713c83c184742f293f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74013641e035a2f1b12383e63938a5e848506df3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74013641e035a2f1b12383e63938a5e848506df3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74013641e035a2f1b12383e63938a5e848506df3"
      },
      {
        "sha": "fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa09fd1a0986aba918c5740f4c041ff2c7a7bae7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 21,
      "deletions": 29
    },
    "files": [
      {
        "sha": "9a02bbd275f616c77fa9d4de5f6f24d7106356ae",
        "filename": "doc/release-notes-20833.md",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20833.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20833.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20833.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,12 +0,0 @@\n-Updated RPCs\n-------------\n-\n-- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n-  API may be unstable). This is intended for testing transaction packages with dependency\n-  relationships; it is not recommended for batch-validating independent transactions. In addition to\n-  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n-  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n-  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n-  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n-  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n-"
      },
      {
        "sha": "60eed6838f7b4690f945fdcc253f9f2224667038",
        "filename": "doc/release-notes-20867.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20867.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-20867.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20867.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,11 +0,0 @@\n-Wallet\n-------\n-\n-- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n-  under `wsh()`. (#20867)\n-\n-Updated RPCs\n-------------\n-\n-- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n-  Segwit addresses."
      },
      {
        "sha": "2201a8cdaefd7abb5dd3c70c85fac558ab5aecfe",
        "filename": "doc/release-notes-21056.md",
        "status": "removed",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-21056.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74013641e035a2f1b12383e63938a5e848506df3/doc/release-notes-21056.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21056.md?ref=74013641e035a2f1b12383e63938a5e848506df3",
        "patch": "@@ -1,6 +0,0 @@\n-New bitcoin-cli settings\n-------------------------\n-\n-- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n-  in seconds to use with `-rpcwait`. If the timeout expires,\n-  `bitcoin-cli` will report a failure. (#21056)"
      },
      {
        "sha": "dc28ccb9edd5feaa24ea1ff5d9671c0ca89f86f5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398dd678338971d2189934713c83c184742f293f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398dd678338971d2189934713c83c184742f293f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=398dd678338971d2189934713c83c184742f293f",
        "patch": "@@ -1,3 +1,5 @@\n+# Release notes now being edited on https://github.com/bitcoin-core/bitcoin-devwiki/wiki/22.0-Release-Notes-draft\n+\n *After branching off for a major version release of Bitcoin Core, use this\n template to create the initial release notes draft.*\n \n@@ -121,6 +123,18 @@ Updated RPCs\n - `getnodeaddresses` now also accepts a \"network\" argument (ipv4, ipv6, onion,\n   or i2p) to return only addresses of the specified network.  (#21843)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n+  API may be unstable). This is intended for testing transaction packages with dependency\n+  relationships; it is not recommended for batch-validating independent transactions. In addition to\n+  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n+  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n+  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n+  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n+  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n+\n+- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n+  Segwit addresses. (#20867)\n+\n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n@@ -152,6 +166,10 @@ Tools and Utilities\n   like `-onlynet=<network>` or to upgrade to this release of Bitcoin Core 22.0\n   that supports Tor v3 only.  (#21595)\n \n+- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n+  in seconds to use with `-rpcwait`. If the timeout expires,\n+  `bitcoin-cli` will report a failure. (#21056)\n+\n Wallet\n ------\n \n@@ -167,6 +185,9 @@ Wallet\n   Note that the resulting transaction may become invalid if one of the unsafe inputs disappears.\n   If that happens, the transaction must be funded with different inputs and republished. (#21359)\n \n+- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n+  under `wsh()`. (#20867)\n+\n GUI changes\n -----------\n "
      }
    ]
  },
  {
    "sha": "09dc073cff250afd47a3e219f35d1257add764e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWRjMDczY2ZmMjUwYWZkNDdhM2UyMTlmMzVkMTI1N2FkZDc2NGU5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-15T19:21:06Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-21T17:25:06Z"
      },
      "message": "[test] Allow AddrReceiver to be used more generally\n\nThe `on_addr` functionality of `AddrReceiver` tests logic specific to how the\naddr messages are set up in the test bodies. To allow other callers to also use\n`AddrReceiver`, only apply the assertion logic if the caller indicates\ndesirability by setting `test_addr_contents` to true when initializing the\nclass.",
      "tree": {
        "sha": "20e32c64475329c6ad5362bb352a4a8433c57e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e32c64475329c6ad5362bb352a4a8433c57e5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09dc073cff250afd47a3e219f35d1257add764e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09dc073cff250afd47a3e219f35d1257add764e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09dc073cff250afd47a3e219f35d1257add764e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09dc073cff250afd47a3e219f35d1257add764e9/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb63b1db2c4d2877a10fce391cf2c0c60b6210f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb63b1db2c4d2877a10fce391cf2c0c60b6210f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb63b1db2c4d2877a10fce391cf2c0c60b6210f3"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a033027c71ee4fe6fd442534816d30d7034887a8",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09dc073cff250afd47a3e219f35d1257add764e9/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09dc073cff250afd47a3e219f35d1257add764e9/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=09dc073cff250afd47a3e219f35d1257add764e9",
        "patch": "@@ -23,14 +23,22 @@\n \n class AddrReceiver(P2PInterface):\n     num_ipv4_received = 0\n+    test_addr_contents = False\n+\n+    def __init__(self, test_addr_contents=False):\n+        super().__init__()\n+        self.test_addr_contents = test_addr_contents\n \n     def on_addr(self, message):\n         for addr in message.addrs:\n-            assert_equal(addr.nServices, 9)\n-            if not 8333 <= addr.port < 8343:\n-                raise AssertionError(\"Invalid addr.port of {} (8333-8342 expected)\".format(addr.port))\n-            assert addr.ip.startswith('123.123.123.')\n             self.num_ipv4_received += 1\n+            if(self.test_addr_contents):\n+                # relay_tests checks the content of the addr messages match\n+                # expectations based on the message creation in setup_addr_msg\n+                assert_equal(addr.nServices, 9)\n+                if not 8333 <= addr.port < 8343:\n+                    raise AssertionError(\"Invalid addr.port of {} (8333-8342 expected)\".format(addr.port))\n+                assert addr.ip.startswith('123.123.123.')\n \n \n class GetAddrStore(P2PInterface):\n@@ -101,7 +109,7 @@ def relay_tests(self):\n         num_receivers = 7\n         receivers = []\n         for _ in range(num_receivers):\n-            receivers.append(self.nodes[0].add_p2p_connection(AddrReceiver()))\n+            receivers.append(self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True)))\n \n         # Keep this with length <= 10. Addresses from larger messages are not\n         # relayed.\n@@ -125,7 +133,7 @@ def relay_tests(self):\n         self.nodes[0].disconnect_p2ps()\n \n         self.log.info('Check relay of addresses received from outbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True))\n         full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         msg = self.setup_addr_msg(2)\n         self.send_addr_msg(full_outbound_peer, msg, [inbound_peer])"
      }
    ]
  },
  {
    "sha": "e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGM2N2VhMTlhYzRjMGFlYzRhMGI0NDlhYzNhNDE1MmY4MGRmZmY1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-15T19:29:46Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-22T01:05:27Z"
      },
      "message": "[test] Add functionality to AddrReceiver\n\nAdd two simple helper functions to `AddrReceiver` to support callers currently\nusing `GetAddrStore` [used in next commit].",
      "tree": {
        "sha": "643c86093d8635c5820285cbd77ac7014ff51380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/643c86093d8635c5820285cbd77ac7014ff51380"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09dc073cff250afd47a3e219f35d1257add764e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09dc073cff250afd47a3e219f35d1257add764e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09dc073cff250afd47a3e219f35d1257add764e9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34c5d7105389d540b0ae8298cbcc136c55178b2d",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
        "patch": "@@ -40,6 +40,12 @@ def on_addr(self, message):\n                     raise AssertionError(\"Invalid addr.port of {} (8333-8342 expected)\".format(addr.port))\n                 assert addr.ip.startswith('123.123.123.')\n \n+    def addr_received(self):\n+        return self.num_ipv4_received != 0\n+\n+    def getaddr_received(self):\n+        return self.message_count['getaddr'] > 0\n+\n \n class GetAddrStore(P2PInterface):\n     getaddr_received = False"
      }
    ]
  },
  {
    "sha": "ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjJmMTQ5YmYyZDEyZTJkMTRlNDQxZmRmNzAxODA4ZjBmMWRmYjhl",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-15T19:42:52Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-22T01:05:43Z"
      },
      "message": "[test] Update GetAddrStore callers to use AddrReceiver",
      "tree": {
        "sha": "13a5e74600722bba4d3c53fc836455ffbf643d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13a5e74600722bba4d3c53fc836455ffbf643d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1ffb2c774b6801da0dd5b7e827c2aa8237b5b5d3",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
        "patch": "@@ -140,7 +140,7 @@ def relay_tests(self):\n \n         self.log.info('Check relay of addresses received from outbound peers')\n         inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True))\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         msg = self.setup_addr_msg(2)\n         self.send_addr_msg(full_outbound_peer, msg, [inbound_peer])\n         self.log.info('Check that the first addr message received from an outbound peer is not relayed')\n@@ -156,7 +156,7 @@ def relay_tests(self):\n         assert_equal(inbound_peer.num_ipv4_received, 2)\n \n         self.log.info('Check address relay to outbound peers')\n-        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n+        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=1, connection_type=\"block-relay-only\")\n         msg3 = self.setup_addr_msg(2)\n         self.send_addr_msg(inbound_peer, msg3, [full_outbound_peer, block_relay_peer])\n \n@@ -170,17 +170,17 @@ def relay_tests(self):\n     def getaddr_tests(self):\n         self.log.info('Test getaddr behavior')\n         self.log.info('Check that we send a getaddr message upon connecting to an outbound-full-relay peer')\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         full_outbound_peer.sync_with_ping()\n-        assert full_outbound_peer.getaddr_received\n+        assert full_outbound_peer.getaddr_received()\n \n         self.log.info('Check that we do not send a getaddr message upon connecting to a block-relay-only peer')\n-        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n+        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=1, connection_type=\"block-relay-only\")\n         block_relay_peer.sync_with_ping()\n-        assert_equal(block_relay_peer.getaddr_received, False)\n+        assert_equal(block_relay_peer.getaddr_received(), False)\n \n         self.log.info('Check that we answer getaddr messages only from inbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(GetAddrStore())\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n         inbound_peer.sync_with_ping()\n \n         # Add some addresses to addrman\n@@ -196,7 +196,7 @@ def getaddr_tests(self):\n \n         self.mocktime += 5 * 60\n         self.nodes[0].setmocktime(self.mocktime)\n-        inbound_peer.wait_until(inbound_peer.addr_received)\n+        inbound_peer.wait_until(lambda: inbound_peer.addr_received() is True)\n \n         assert_equal(full_outbound_peer.num_ipv4_received, 0)\n         assert_equal(block_relay_peer.num_ipv4_received, 0)\n@@ -210,9 +210,9 @@ def blocksonly_mode_tests(self):\n         self.mocktime = int(time.time())\n \n         self.log.info('Check that we send getaddr messages')\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         full_outbound_peer.sync_with_ping()\n-        assert full_outbound_peer.getaddr_received\n+        assert full_outbound_peer.getaddr_received()\n \n         self.log.info('Check that we relay address messages')\n         addr_source = self.nodes[0].add_p2p_connection(P2PInterface())"
      }
    ]
  },
  {
    "sha": "1d8193e2a2950fd957654b601e85ab888899c394",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDgxOTNlMmEyOTUwZmQ5NTc2NTRiNjAxZTg1YWI4ODg4OTljMzk0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-21T17:05:05Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-22T01:05:48Z"
      },
      "message": "[test] Remove GetAddrStore class",
      "tree": {
        "sha": "45acd9b68be0a44cfe8c01e533b2b704fa8cf172",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45acd9b68be0a44cfe8c01e533b2b704fa8cf172"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d8193e2a2950fd957654b601e85ab888899c394",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8193e2a2950fd957654b601e85ab888899c394",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8193e2a2950fd957654b601e85ab888899c394",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8193e2a2950fd957654b601e85ab888899c394/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2f149bf2d12e2d14e441fdf701808f0f1dfb8e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 0,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7c144af2e2820bad8b449f101f83d5304fec465d",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d8193e2a2950fd957654b601e85ab888899c394/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d8193e2a2950fd957654b601e85ab888899c394/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=1d8193e2a2950fd957654b601e85ab888899c394",
        "patch": "@@ -47,21 +47,6 @@ def getaddr_received(self):\n         return self.message_count['getaddr'] > 0\n \n \n-class GetAddrStore(P2PInterface):\n-    getaddr_received = False\n-    num_ipv4_received = 0\n-\n-    def on_getaddr(self, message):\n-        self.getaddr_received = True\n-\n-    def on_addr(self, message):\n-        for addr in message.addrs:\n-            self.num_ipv4_received += 1\n-\n-    def addr_received(self):\n-        return self.num_ipv4_received != 0\n-\n-\n class AddrTest(BitcoinTestFramework):\n     counter = 0\n     mocktime = int(time.time())"
      }
    ]
  },
  {
    "sha": "6168eb06b2044f00f18727b955b672fc91c60bd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTY4ZWIwNmIyMDQ0ZjAwZjE4NzI3Yjk1NWI2NzJmYzkxYzYwYmQ3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-21T17:13:37Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-22T01:05:54Z"
      },
      "message": "[test] Prevent intermittent issue\n\nSince m_next_addr_send is on a Poisson distribution, increase the mocktime bump\nto ensure we don't experience flakiness in the tests. Closes #22243.",
      "tree": {
        "sha": "a28785c922518ac8cb8a935c0c830d47d15d55e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a28785c922518ac8cb8a935c0c830d47d15d55e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6168eb06b2044f00f18727b955b672fc91c60bd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6168eb06b2044f00f18727b955b672fc91c60bd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6168eb06b2044f00f18727b955b672fc91c60bd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6168eb06b2044f00f18727b955b672fc91c60bd7/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d8193e2a2950fd957654b601e85ab888899c394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8193e2a2950fd957654b601e85ab888899c394",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8193e2a2950fd957654b601e85ab888899c394"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1a414959b9039474d1d83c2241a405148225fdbb",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6168eb06b2044f00f18727b955b672fc91c60bd7/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6168eb06b2044f00f18727b955b672fc91c60bd7/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=6168eb06b2044f00f18727b955b672fc91c60bd7",
        "patch": "@@ -78,7 +78,7 @@ def setup_addr_msg(self, num):\n     def send_addr_msg(self, source, msg, receivers):\n         source.send_and_ping(msg)\n         # pop m_next_addr_send timer\n-        self.mocktime += 5 * 60\n+        self.mocktime += 10 * 60\n         self.nodes[0].setmocktime(self.mocktime)\n         for peer in receivers:\n             peer.sync_send_with_ping()"
      }
    ]
  },
  {
    "sha": "672870ab7ba51b1fc40f263a1c71ebcf165b1229",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzI4NzBhYjdiYTUxYjFmYzQwZjI2M2ExYzcxZWJjZjE2NWIxMjI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T06:11:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T06:11:16Z"
      },
      "message": "Merge bitcoin/bitcoin#22201: test: Fix TestShell to allow running in Jupyter Notebook\n\n168b6c317ca054c1287c36be532964e861f44266 add dummy file param to fix jupyter (Josiah Baker)\n\nPull request description:\n\n  this fixes argparse to use `parse_known_args`. previously, if an unknown argument was passed, argparse would fail with an `unrecognized arguments: %s` error.\n\n  ## why\n  the documentation mentions being able to run `TestShell` in a REPL interpreter or a jupyter notebook. when i tried to run inside a jupyter notebook, i got the following error:\n\n  ![image](https://user-images.githubusercontent.com/7444140/121382910-57554880-c947-11eb-94f2-49da8679528c.png)\n\n  this was due to the notebook passing the filename of the notebook as an argument. this is a known problem with notebooks and argparse, documented here: https://stackoverflow.com/questions/48796169/how-to-fix-ipykernel-launcher-py-error-unrecognized-arguments-in-jupyter\n\n  ## testing\n  to test, make sure you have jupyter notebooks installed. you can do this by running:\n  ```\n  pip install notebook\n  ```\n  or following instructions from [here](https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html).\n\n  once installed, start a notebook (`jupyter notebook`), launch a python3 kernel and run the following snippet:\n\n  ```python\n  import sys\n\n  # make sure this is the path for your system\n  sys.path.insert(0, \"/path/to/bitcoin/test/functional\")\n  from test_framework.test_shell import TestShell\n\n  test = TestShell().setup(num_nodes=2, setup_clean_chain=True)\n  ```\n\n  you should see the following output, without errors:\n  ![image](https://user-images.githubusercontent.com/7444140/121383301-a307f200-c947-11eb-83b6-6c50b2cada25.png)\n\n  if you are unfamiliar with notebooks, here is a short guide on using them: https://jupyter.readthedocs.io/en/latest/running.html\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK 168b6c317ca054c1287c36be532964e861f44266\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22201/commits/168b6c317ca054c1287c36be532964e861f44266\n  practicalswift:\n    cr ACK 168b6c317ca054c1287c36be532964e861f44266\n\nTree-SHA512: 4fee1563bf64a1cf9009934182412446cde03badf2f19553b78ad2cb3ceb0e5e085a5db41ed440473494ac047f04641311ecbba3948761c6553d0ca4b54937b4",
      "tree": {
        "sha": "9ffbe488425e79a123b00797afe9fd92be39cba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ffbe488425e79a123b00797afe9fd92be39cba3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiWrgv+I+FQ+ZSbUla8VhA9RXGGynD6rSrrV4QSip7cp+7fUo6ZgPQZBuwThAmA\nksXvu3yfWeRaW5BFpm9MLJtV5qKyNihNDlWiSETbS/lCC/LbuMW0qvgnI9tDkdxP\n66ht2laNxOwb02maNUwQN/g2I+JQHI2uIn23v1iVAoZGeUxAhCsg3trVseGrrcbR\nnlts9exqISWymvps8zcmRYIH3OoPnXy3yj6lKulCnHK4WIDeb6rpUVETZNkI3qZt\nMKbF51mYg0raKEtxUCavBw1MkEjeSSVQ/MC7EckLLrHBvJKdbPQMc99uxOiQD/Du\n6So2t1wnNzSum7v7YkogUtwQIMUtGovS2pxvIMe0+0T9+t0YTaFZfcPGda337ugh\nNiz2puLbLVRgPn3fWegnX0BW+Sw4plzGhD77HIffUtTFGg9bIK6f57vjR3kOJv4w\nyDjSnX1zAQSFozZpZpTzu1UuatYCSxVd9Vk7phuLlAqoIVE+SeRUtCaK5VFAtvGs\nYPjD9hcJ\n=TYI3\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ffbe488425e79a123b00797afe9fd92be39cba3\nparent 398dd678338971d2189934713c83c184742f293f\nparent 168b6c317ca054c1287c36be532964e861f44266\nauthor MarcoFalke <falke.marco@gmail.com> 1624342274 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624342276 +0200\n\nMerge bitcoin/bitcoin#22201: test: Fix TestShell to allow running in Jupyter Notebook\n\n168b6c317ca054c1287c36be532964e861f44266 add dummy file param to fix jupyter (Josiah Baker)\n\nPull request description:\n\n  this fixes argparse to use `parse_known_args`. previously, if an unknown argument was passed, argparse would fail with an `unrecognized arguments: %s` error.\n\n  ## why\n  the documentation mentions being able to run `TestShell` in a REPL interpreter or a jupyter notebook. when i tried to run inside a jupyter notebook, i got the following error:\n\n  ![image](https://user-images.githubusercontent.com/7444140/121382910-57554880-c947-11eb-94f2-49da8679528c.png)\n\n  this was due to the notebook passing the filename of the notebook as an argument. this is a known problem with notebooks and argparse, documented here: https://stackoverflow.com/questions/48796169/how-to-fix-ipykernel-launcher-py-error-unrecognized-arguments-in-jupyter\n\n  ## testing\n  to test, make sure you have jupyter notebooks installed. you can do this by running:\n  ```\n  pip install notebook\n  ```\n  or following instructions from [here](https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html).\n\n  once installed, start a notebook (`jupyter notebook`), launch a python3 kernel and run the following snippet:\n\n  ```python\n  import sys\n\n  # make sure this is the path for your system\n  sys.path.insert(0, \"/path/to/bitcoin/test/functional\")\n  from test_framework.test_shell import TestShell\n\n  test = TestShell().setup(num_nodes=2, setup_clean_chain=True)\n  ```\n\n  you should see the following output, without errors:\n  ![image](https://user-images.githubusercontent.com/7444140/121383301-a307f200-c947-11eb-83b6-6c50b2cada25.png)\n\n  if you are unfamiliar with notebooks, here is a short guide on using them: https://jupyter.readthedocs.io/en/latest/running.html\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK 168b6c317ca054c1287c36be532964e861f44266\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22201/commits/168b6c317ca054c1287c36be532964e861f44266\n  practicalswift:\n    cr ACK 168b6c317ca054c1287c36be532964e861f44266\n\nTree-SHA512: 4fee1563bf64a1cf9009934182412446cde03badf2f19553b78ad2cb3ceb0e5e085a5db41ed440473494ac047f04641311ecbba3948761c6553d0ca4b54937b4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "398dd678338971d2189934713c83c184742f293f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398dd678338971d2189934713c83c184742f293f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/398dd678338971d2189934713c83c184742f293f"
      },
      {
        "sha": "168b6c317ca054c1287c36be532964e861f44266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168b6c317ca054c1287c36be532964e861f44266",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168b6c317ca054c1287c36be532964e861f44266"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40360c54a0f71cbc18d412d4edf471d689afd81d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/672870ab7ba51b1fc40f263a1c71ebcf165b1229/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/672870ab7ba51b1fc40f263a1c71ebcf165b1229/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "patch": "@@ -194,6 +194,10 @@ def parse_args(self):\n                             help=\"Run test using legacy wallets\", dest='descriptors')\n \n         self.add_options(parser)\n+        # Running TestShell in a Jupyter notebook causes an additional -f argument\n+        # To keep TestShell from failing with an \"unrecognized argument\" error, we add a dummy \"-f\" argument\n+        # source: https://stackoverflow.com/questions/48796169/how-to-fix-ipykernel-launcher-py-error-unrecognized-arguments-in-jupyter/56349168#56349168\n+        parser.add_argument(\"-f\", \"--fff\", help=\"a dummy argument to fool ipython\", default=\"1\")\n         self.options = parser.parse_args()\n         self.options.previous_releases_path = previous_releases_path\n "
      }
    ]
  },
  {
    "sha": "fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRiNTUwODVhMDJjOWUzNTU2MTdiY2I1Zjg0YjYzMzVlNGY4Yzlk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T08:08:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T08:01:50Z"
      },
      "message": "wallet: Add missing BlockUntilSyncedToCurrentChain",
      "tree": {
        "sha": "30f2bbe13b1f3e9436b3d27daec61ae48a0e0714",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30f2bbe13b1f3e9436b3d27daec61ae48a0e0714"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgC+wwAi00nQzsqCUPEwwdxVwdfMTY/nIkLuQnmROdOPaimf8AEah0EPDgAGMdp\n/ta7CDURqG2AI89rF9xNHY4I/m6qVPRR52iZgyHH0cauz2+42S6yVEXGQccGxjCx\nqk9J/HxnEIwDzgJTFOdVyzCV10rWA3YoNYBeZKXx21llfy+225xzTdn6qbojtfrl\nBN91HYrF1vFSrKHN9gaHbN8ZewBS3zEqvwZ12zlBqq7kIHsBcjqwiVdJbx0UZ1Bs\n+cA2i7/f1nNypZ4BLuBQL+HV1f1cO2SeG2RyvJp1een4BfNmYoOp0jv73Z9EdNnN\nh7YnT51fVnDUx+Swkxh7ZWeUFOEOYk9wS0PAgLLYtU7CQKpF5BfjufTW/fk4VBnc\nJGOVahcv5vzw6/K5OYKdcUH5PAjddQo9GwDiRLeZjHssMf5Lw/g5slGQC/VOd6rN\nC3L3wGa0p5PrsApyMXT+f3zMsbZElGeirUASVvwQuymHkHExtIXyNYAF3W3gRJDB\njYN47Hpq\n=XNpR\n-----END PGP SIGNATURE-----",
        "payload": "tree 30f2bbe13b1f3e9436b3d27daec61ae48a0e0714\nparent 672870ab7ba51b1fc40f263a1c71ebcf165b1229\nauthor MarcoFalke <falke.marco@gmail.com> 1624349321 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624348910 +0200\n\nwallet: Add missing BlockUntilSyncedToCurrentChain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb55085a02c9e355617bcb5f84b6335e4f8c9d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/672870ab7ba51b1fc40f263a1c71ebcf165b1229"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8b1b6c6d9524c2afb4568481a66eb9bdd0974812",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb55085a02c9e355617bcb5f84b6335e4f8c9d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb55085a02c9e355617bcb5f84b6335e4f8c9d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
        "patch": "@@ -4317,6 +4317,11 @@ static RPCHelpMan walletprocesspsbt()\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n+    const CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n \n     // Unserialize the transaction\n@@ -4333,7 +4338,7 @@ static RPCHelpMan walletprocesspsbt()\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n     bool complete = true;\n-    const TransactionError err = pwallet->FillPSBT(psbtx, complete, nHashType, sign, bip32derivs);\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n@@ -4431,6 +4436,11 @@ static RPCHelpMan walletcreatefundedpsbt()\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n+    CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n@@ -4442,7 +4452,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n \n     CAmount fee;\n     int change_position;\n-    bool rbf = pwallet->m_signal_rbf;\n+    bool rbf{wallet.m_signal_rbf};\n     const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n     if (!replaceable_arg.isNull()) {\n         RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n@@ -4453,15 +4463,15 @@ static RPCHelpMan walletcreatefundedpsbt()\n     // Automatically select coins, unless at least one is manually selected. Can\n     // be overridden by options.add_inputs.\n     coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(*pwallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n+    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n     bool complete = true;\n-    const TransactionError err = pwallet->FillPSBT(psbtx, complete, 1, false, bip32derivs);\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, 1, false, bip32derivs)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      }
    ]
  },
  {
    "sha": "fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI3YmFhOWM4YTEzMjM5NjI1ZTVhN2I2YzQ3MmQyMzZmZTViOWZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T08:15:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T08:04:06Z"
      },
      "message": "Revert \"test: Add temporary logging to debug #20975\"\n\nThis reverts commit faa94961d6e38392ba068381726ed4e033367b03.",
      "tree": {
        "sha": "733b996c8e8ae9009570fbf5f2cf7d601037bad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733b996c8e8ae9009570fbf5f2cf7d601037bad1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh68Av/bfk9UPSDjRxbbQUeRmFWLnqi88ZKOcH4jZBAeigZjAstUdkxsh5P93Kp\nARJvvG+885NXBsZxXB9vTpzcWj9vTj/cCNPfoJ4LfR6qNiINVp4RRlGHHPOEH4vU\njJQy+uGMlcXDIHvvTnv6fiNUDmRMaSnhVJ1XpKZA8ucGjbTVbdyLFYvX9jOYlATF\nGeUue8W8Fvt1hbnvhbIxpdU9sEeW4F96BSF4HIBm3KIzB86Ap8mxoqIciSZXCdGi\npYMyyfu4DS2vAcx2tgf5jXPPVyNGj6R6IHlw4rWL4Jck22rMuewmKqakJ167uXYK\nfjPdaI/hwz3YwCIR4m94swooIpY/4wXMqZqlSm4fg1K3JRNBM0gUPphVYlekKGIz\n4Ad2YhW4PDTEMtWrQ3LaUk5UUkcz1EM6G5ycWrwVII7ZkphiL9Uj8jHPQDn0LvgM\nbJN23kLEYcWiLMi+L2ZEXSJ14hCVaAHlNqW/59NIzqFCDNrpqOpolP41XXxB7khz\nlRJ+WP6F\n=OEYX\n-----END PGP SIGNATURE-----",
        "payload": "tree 733b996c8e8ae9009570fbf5f2cf7d601037bad1\nparent fadb55085a02c9e355617bcb5f84b6335e4f8c9d\nauthor MarcoFalke <falke.marco@gmail.com> 1624349720 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624349046 +0200\n\nRevert \"test: Add temporary logging to debug #20975\"\n\nThis reverts commit faa94961d6e38392ba068381726ed4e033367b03.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb55085a02c9e355617bcb5f84b6335e4f8c9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb55085a02c9e355617bcb5f84b6335e4f8c9d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e91b44e7762b1385bba0ca2ffbf40cbceddd0329",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
        "patch": "@@ -181,11 +181,6 @@ def create_raw_transaction(node, txid, to_address, *, amount):\n             signed_psbt = wrpc.walletprocesspsbt(psbt)\n             psbt = signed_psbt['psbt']\n     final_psbt = node.finalizepsbt(psbt)\n-    if not final_psbt[\"complete\"]:\n-        node.log.info(f'final_psbt={final_psbt}')\n-        for w in node.listwallets():\n-            wrpc = node.get_wallet_rpc(w)\n-            node.log.info(f'listunspent={wrpc.listunspent()}')\n     assert_equal(final_psbt[\"complete\"], True)\n     return final_psbt['hex']\n "
      }
    ]
  },
  {
    "sha": "fa2d21fec8e532aa0781211e198ee6098f89350e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJkMjFmZWM4ZTUzMmFhMDc4MTIxMWUxOThlZTYwOThmODkzNTBl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-14T18:17:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T09:06:30Z"
      },
      "message": "add missing atomic include",
      "tree": {
        "sha": "838b88c4cdedd9b103f5805bcae71149cf6bcfda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/838b88c4cdedd9b103f5805bcae71149cf6bcfda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2d21fec8e532aa0781211e198ee6098f89350e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjc+gv9GnN04x2YuN8ChHqglizmRCXRLRdxEWWVIGrtrFny6NAXChQ/sHL+maoq\njYXKReSesjpKuh62KeZ/UCPjUJmdEh1z5AFQXLAFK3Qc1azh2vG377rnqrrWOXYd\nCoQksi7qp/0kBrKYOYGvNhdLeQxntMGuskND1TqxkK6pAmuu+31DxDeLCPOOSw4J\nFJnU/2umB3+9O0YKxlZfTPGJNWpdgCdoV1rSjeea/GR/q5JnM9jE1Mjd+axhtwUl\n5aQNcOgZhQvk2PpNuJJ+7gXxb5zEA8UaM7y4rS5w8PPZ4v8iGyRg5nOkJpAQz5j+\naPbZLhuFuhLWYqiM5zi9fgyTcGxqmxtC/z5mhEjMN+kG4CvlaR5qAR/AracUv/jP\nD/LGSfRRxnE0DevIUZr+Kvvw1hnvHK+XejVCCSrdKIgt2XVD/p66FkhsIyQcG5m/\nFpEKMj59AurUBWV2IxqSBsC8pwKXyjOdXx/3Sb6/AJe8RqNMvRYuc3ymu6TBowSa\n95KM/YFT\n=vRgd\n-----END PGP SIGNATURE-----",
        "payload": "tree 838b88c4cdedd9b103f5805bcae71149cf6bcfda\nparent 672870ab7ba51b1fc40f263a1c71ebcf165b1229\nauthor MarcoFalke <falke.marco@gmail.com> 1623694659 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624352790 +0200\n\nadd missing atomic include\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2d21fec8e532aa0781211e198ee6098f89350e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2d21fec8e532aa0781211e198ee6098f89350e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2d21fec8e532aa0781211e198ee6098f89350e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/672870ab7ba51b1fc40f263a1c71ebcf165b1229"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c7bf68178864abc5524df440a9c66bbb791d8ea",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2d21fec8e532aa0781211e198ee6098f89350e/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2d21fec8e532aa0781211e198ee6098f89350e/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=fa2d21fec8e532aa0781211e198ee6098f89350e",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n-#include <cstdint>\n-#include <vector>\n-\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n \n+#include <atomic>\n+#include <cstdint>\n+#include <vector>\n+\n class ArgsManager;\n class BlockValidationState;\n class CBlock;"
      }
    ]
  },
  {
    "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjdlMjY5MWY2ZTA0OThhYTg2OGFmOTY1YmI0YTk1MWM1YmUxN2M1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T13:52:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T13:52:16Z"
      },
      "message": "Merge bitcoin/bitcoin#22309: blockstorage: Add missing atomic include\n\nfa2d21fec8e532aa0781211e198ee6098f89350e add missing atomic include (MarcoFalke)\n\nPull request description:\n\n  `std::atomic` is used in the file, so to avoid compile issues, add the missing include.\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa2d21fec8e532aa0781211e198ee6098f89350e\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22309/commits/fa2d21fec8e532aa0781211e198ee6098f89350e\n  hebasto:\n    ACK fa2d21fec8e532aa0781211e198ee6098f89350e, I have reviewed the code and it looks OK, I agree it can be merged.\n  prayank23:\n    crACK https://github.com/bitcoin/bitcoin/pull/22309/commits/fa2d21fec8e532aa0781211e198ee6098f89350e\n\nTree-SHA512: 307b15abd62006be4457b2437fb65de517c296bf0417e8acd181904eb6056dba5655dd5bc43b834bf68a087d06637f5e99ba5a6bc8be3e12388cea470dc155d0",
      "tree": {
        "sha": "838b88c4cdedd9b103f5805bcae71149cf6bcfda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/838b88c4cdedd9b103f5805bcae71149cf6bcfda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjRsAv/R+jCdTCDXFZVcKOh5h2qVNiCBwtc5KgVoCX+lYTWNJ3oBml8igHnBLGp\nxMqVt6joHCJ3uGewvAmucfb90OXI7TaFJ/EEQyLS/CM7iF0C15Y/vDd3nH5JiwUz\ncEZHUsxqBplJjy3uom8ZXT2UkNK3v+dFB5NyDqU9J14JkVfLU6DTTJ/xgpjidtgN\ne9iXAcauc69pT+eygb/nqn3ftLEs0fzIblwzorkH6Y7TJ/QxoIv8DHlLvjBYomLm\nHhqs+cipQFiyrMUdrup9FEnA3EERi8cJPKkDmutqZ/+LUQ874xIag1BcF5osMBoH\n9lFZErA1z+YgVCszn0kT5+1BmbQI6lJ3Zl4xzPu4J15uH9UJQbruUInM1tAer7Qr\nwqUzYibWolcSTn3isrtrffcEkeCvkrcuRJIP8eNIfRJ9roWW93tm/GPCubXoy3QM\naTjSeBRCg37eNJEbAWlAKcxu+OkYRH7cp2S45oCRFrmPpbZ4ng/bWjqvhh9UjmYu\n+z95SyBK\n=3hyJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 838b88c4cdedd9b103f5805bcae71149cf6bcfda\nparent 672870ab7ba51b1fc40f263a1c71ebcf165b1229\nparent fa2d21fec8e532aa0781211e198ee6098f89350e\nauthor MarcoFalke <falke.marco@gmail.com> 1624369933 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624369936 +0200\n\nMerge bitcoin/bitcoin#22309: blockstorage: Add missing atomic include\n\nfa2d21fec8e532aa0781211e198ee6098f89350e add missing atomic include (MarcoFalke)\n\nPull request description:\n\n  `std::atomic` is used in the file, so to avoid compile issues, add the missing include.\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa2d21fec8e532aa0781211e198ee6098f89350e\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22309/commits/fa2d21fec8e532aa0781211e198ee6098f89350e\n  hebasto:\n    ACK fa2d21fec8e532aa0781211e198ee6098f89350e, I have reviewed the code and it looks OK, I agree it can be merged.\n  prayank23:\n    crACK https://github.com/bitcoin/bitcoin/pull/22309/commits/fa2d21fec8e532aa0781211e198ee6098f89350e\n\nTree-SHA512: 307b15abd62006be4457b2437fb65de517c296bf0417e8acd181904eb6056dba5655dd5bc43b834bf68a087d06637f5e99ba5a6bc8be3e12388cea470dc155d0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/672870ab7ba51b1fc40f263a1c71ebcf165b1229",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/672870ab7ba51b1fc40f263a1c71ebcf165b1229"
      },
      {
        "sha": "fa2d21fec8e532aa0781211e198ee6098f89350e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2d21fec8e532aa0781211e198ee6098f89350e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2d21fec8e532aa0781211e198ee6098f89350e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c7bf68178864abc5524df440a9c66bbb791d8ea",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/327e2691f6e0498aa868af965bb4a951c5be17c5/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/327e2691f6e0498aa868af965bb4a951c5be17c5/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=327e2691f6e0498aa868af965bb4a951c5be17c5",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n-#include <cstdint>\n-#include <vector>\n-\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n \n+#include <atomic>\n+#include <cstdint>\n+#include <vector>\n+\n class ArgsManager;\n class BlockValidationState;\n class CBlock;"
      }
    ]
  },
  {
    "sha": "facd97ae0f0d816107aa3bc9de321244200636a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNkOTdhZTBmMGQ4MTYxMDdhYTNiYzlkZTMyMTI0NDIwMDYzNmEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T16:28:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:41:28Z"
      },
      "message": "scripted-diff: Renames\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed -i \"s/\\<$1\\>/$2/g\" test/functional/p2p_blockfilters.py ; }\n\n # Rename from \"node\" to \"peer\" to avoid confusion with self.nodes\n ren node0 peer_0\n ren node1 peer_1\n\n # Remove the confusing \"C\" prefix\n ren CFiltersClient FiltersClient\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c772f03793514639608780f54a9c1454f99fba66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c772f03793514639608780f54a9c1454f99fba66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiCVgv/aByghqyb66UMpPf671yao0JHpActcoFsnv6Cunw4cB3dYEOaTMvc2/FC\nt7ITedYyyol69HzOLcPo/A36tkFKwGnn+L7zt1JW5kyl8Uxnr+iZ2sNAXhmixZZs\n3FMTvNDkbgq30sa0pan/8zB0yJKQGzNOo4tBT4VU38MtUoZ5LKqKxacIX8PqhSvV\nTHIW9xHj5Gs6Jzp8bwRHx3jYSzfH/dyCn1ZrWkmgIv7M6LpVqvei83RyvsD8Y6qi\nt8zznT15pndk8cbFjO3D8D8ObkI5HTAIvxqvvWOJp+OH87ARKgjM7Rjh3KQFiiNU\nsWnSpbUl2v5QAmzmu1x3dVQ2C4j5M+bXd2Ahr6LL5fyukgMtmThERNeaXQqgsqQs\nrjvig/gMab9cZbHZfOb1dbBGJCHj7HX9Re/+QFv2NFGI346IQZdoBxpWy/nTltJ4\nT2mClUTNAiGrRLxx93veJeP2z9uKIWGpxJIHycun6feHUK5UjrHw7HTYbjDRcl8U\n87BFEZZz\n=tzu0\n-----END PGP SIGNATURE-----",
        "payload": "tree c772f03793514639608780f54a9c1454f99fba66\nparent 327e2691f6e0498aa868af965bb4a951c5be17c5\nauthor MarcoFalke <falke.marco@gmail.com> 1624379298 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383688 +0200\n\nscripted-diff: Renames\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed -i \"s/\\<$1\\>/$2/g\" test/functional/p2p_blockfilters.py ; }\n\n # Rename from \"node\" to \"peer\" to avoid confusion with self.nodes\n ren node0 peer_0\n ren node1 peer_1\n\n # Remove the confusing \"C\" prefix\n ren CFiltersClient FiltersClient\n\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facd97ae0f0d816107aa3bc9de321244200636a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e8c27c8e660895829dd54eed5ae288fdcd72aa11",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facd97ae0f0d816107aa3bc9de321244200636a0/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facd97ae0f0d816107aa3bc9de321244200636a0/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=facd97ae0f0d816107aa3bc9de321244200636a0",
        "patch": "@@ -24,7 +24,7 @@\n     assert_equal,\n )\n \n-class CFiltersClient(P2PInterface):\n+class FiltersClient(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         # Store the cfilters received.\n@@ -51,8 +51,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n-        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n-        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+        peer_0 = self.nodes[0].add_p2p_connection(FiltersClient())\n+        peer_1 = self.nodes[1].add_p2p_connection(FiltersClient())\n \n         # Nodes 0 & 1 share the same first 999 blocks in the chain.\n         self.nodes[0].generate(999)\n@@ -69,8 +69,8 @@ def run_test(self):\n         self.wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n-        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n-        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+        assert peer_0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert peer_1.nServices & NODE_COMPACT_FILTERS == 0\n \n         # Check that the localservices is as expected.\n         assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n@@ -81,8 +81,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(message=request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(message=request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n         assert_equal(len(response.headers), 1)\n@@ -100,8 +100,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(tip_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n \n@@ -117,8 +117,8 @@ def run_test(self):\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n \n         stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n         assert_equal(\n@@ -132,8 +132,8 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(main_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         main_cfhashes = response.hashes\n         assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n@@ -147,8 +147,8 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         stale_cfhashes = response.hashes\n         assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n@@ -163,9 +163,9 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stop_hash, 16)\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_message(request)\n+        peer_0.sync_with_ping()\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 10)\n \n         self.log.info(\"Check that cfilter responses are correct.\")\n@@ -182,9 +182,9 @@ def run_test(self):\n             start_height=1000,\n             stop_hash=int(stale_block_hash, 16)\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_message(request)\n+        peer_0.sync_with_ping()\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 1)\n \n         cfilter = response[0]\n@@ -211,9 +211,9 @@ def run_test(self):\n             ),\n         ]\n         for request in requests:\n-            node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n-            node1.send_message(request)\n-            node1.wait_for_disconnect()\n+            peer_1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+            peer_1.send_message(request)\n+            peer_1.wait_for_disconnect()\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n@@ -241,9 +241,9 @@ def run_test(self):\n             ),\n         ]\n         for request in requests:\n-            node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-            node0.send_message(request)\n-            node0.wait_for_disconnect()\n+            peer_0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+            peer_0.send_message(request)\n+            peer_0.wait_for_disconnect()\n \n def compute_last_header(prev_header, hashes):\n     \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\""
      }
    ]
  },
  {
    "sha": "fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE2NjhiZjUwODRhMTkwYjI2YjAyMmI5ZTYyNWE3YmUzZGVmYTZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T16:24:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:25Z"
      },
      "message": "test: Run pep-8\n\nCan be reviewed with --word-diff-regex=.",
      "tree": {
        "sha": "2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjWFAv/UL3ZjsrwGD+YxsL+Kg0iW5lIJkNyGx+6YJ6KVzSpK3U4Y+789CwF0ZT7\n79VeF2yspdg4mC2iDqhMdqbXr4S27cMwPmVAhewaLu4xTPVd0FqqLjbdY52aUjBy\nwjI3Ddkse+B4v7cw3EErvCcbZ0XcQPdUCcYHuE8dPuON3cYORkWCJPdIbD2e3zfU\nbMrKYfuzZ7VRMl25bjmcFe3kJit0ShaFe8XlQLmp3XXwMn5+Q7UImsmW635lcCL9\nsr+ZGSegt7SM3mdJ2O1SYNYT9cpNhcJiBwh3uxqxpatQK/frhkfjcddv46cciTWu\nJaV4LUdNNwwfsHn+qJSNWYPgWn2z8CWqAi4E6TT0DsaxTuQkdi9GaRFSdL8H2CaA\nV3t2P9H5tSKBDlc7FCzvTqPGI2alcEuK7/OctpbSP/gNFeNL3Q2RSXRtBwPkxZdP\nv6CQQJ7QrUNMr+PPoBbqieaXWD0FifPEwcVzix/a5DzIKjpGFCl3g4flFtbA/W5t\nFuOiUoTF\n=rn4i\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e490d1028d3f0351ee4c1c6e3a1551ebbefaa2f\nparent facd97ae0f0d816107aa3bc9de321244200636a0\nauthor MarcoFalke <falke.marco@gmail.com> 1624379062 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383745 +0200\n\ntest: Run pep-8\n\nCan be reviewed with --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1668bf5084a190b26b022b9e625a7be3defa6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facd97ae0f0d816107aa3bc9de321244200636a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facd97ae0f0d816107aa3bc9de321244200636a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facd97ae0f0d816107aa3bc9de321244200636a0"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 20,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a0bfa4eff61a5f1ec76a37fff6c66f376ad9cc28",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1668bf5084a190b26b022b9e625a7be3defa6e/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1668bf5084a190b26b022b9e625a7be3defa6e/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "patch": "@@ -39,6 +39,7 @@ def on_cfilter(self, message):\n         \"\"\"Store cfilters received in a list.\"\"\"\n         self.cfilters.append(message)\n \n+\n class CompactFiltersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -79,7 +80,7 @@ def run_test(self):\n         self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(message=request)\n         response = peer_0.last_message['cfcheckpt']\n@@ -98,7 +99,7 @@ def run_test(self):\n         tip_hash = self.nodes[0].getbestblockhash()\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(tip_hash, 16)\n+            stop_hash=int(tip_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfcheckpt']\n@@ -109,59 +110,59 @@ def run_test(self):\n         tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)],\n         )\n \n         self.log.info(\"Check that peers can fetch cfcheckpt on stale chain.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfcheckpt']\n \n         stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (stale_cfcheckpt,)]\n+            [int(header, 16) for header in (stale_cfcheckpt, )],\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(main_block_hash, 16)\n+            stop_hash=int(main_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfheaders']\n         main_cfhashes = response.hashes\n         assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(main_cfcheckpt, 16)\n+            int(main_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_and_ping(request)\n         response = peer_0.last_message['cfheaders']\n         stale_cfhashes = response.hashes\n         assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(stale_cfcheckpt, 16)\n+            int(stale_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfilters.\")\n         stop_hash = self.nodes[0].getblockhash(10)\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stop_hash, 16)\n+            stop_hash=int(stop_hash, 16),\n         )\n         peer_0.send_message(request)\n         peer_0.sync_with_ping()\n@@ -180,7 +181,7 @@ def run_test(self):\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1000,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n         peer_0.send_message(request)\n         peer_0.sync_with_ping()\n@@ -197,17 +198,17 @@ def run_test(self):\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n         ]\n         for request in requests:\n@@ -221,18 +222,18 @@ def run_test(self):\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting too many filter headers results in disconnection.\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(tip_hash, 16)\n+                stop_hash=int(tip_hash, 16),\n             ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting unknown hash results in disconnection.\n             msg_getcfcheckpt(\n@@ -245,12 +246,14 @@ def run_test(self):\n             peer_0.send_message(request)\n             peer_0.wait_for_disconnect()\n \n+\n def compute_last_header(prev_header, hashes):\n     \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n     header = ser_uint256(prev_header)\n     for filter_hash in hashes:\n         header = hash256(ser_uint256(filter_hash) + header)\n     return uint256_from_str(header)\n \n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      }
    ]
  },
  {
    "sha": "faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEyMTFmYzZlM2Q0OTg0YjhlZGZmMWQ3NjJkZDRjYmEyMDVkOTgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:41:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:35Z"
      },
      "message": "test: Misc cleanup\n\n* Replace wait_until with assert_equal where possible\n* Use send_and_ping helper where possible",
      "tree": {
        "sha": "84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgRBgwAzdd5tx/S4HspRE8QHylLur/SsRtweOu6xss76GMtcF3lRADXgAm+6mZl\n/pZgt1JkA93NeYdR+2RMXH+MAm+2MyLvft0QXtKNdssmQEwoqBrmZDe+S/AlU4Ji\nd60DVNZdEUdBeqJNGG21E+Z4PsqNCd0+n6Md/YNcDdK9Uc5KkFmzHAcoFWuB0Qa8\nnP7+PlnBChiclSCFdIBBNd6x+0YAQp4Br2vImkNh2VIKuuh51KlEIkYpNzJLuc+i\nDcDVrmDCAPKsGKKk+IKiOlcssoR/E9VrPaTe1S9zpJpkMT/pBeqjJRigwcoOL8Pf\nosjMHz8TphR4VdRn/+0rL1/N1ZZ/X6VUv32wN7yljD0COvmq3uqOgsylvwD5A1yS\nbWPdbxVw9jue/X8eyAUmUJr3f+VHoDGoh3+9DAFm6jSUJrkkPiAp1R7Ii+mzPCuS\nAdRESfFbrODLMB0I8ITdto8xRaE+N2qZ5ixUmhwHtiGkOPyLiQ6XnLNDPp7cEtCQ\nDMPxLd4G\n=Hv2/\n-----END PGP SIGNATURE-----",
        "payload": "tree 84bd0cc0fc6c90c797b6033642bd02bf1dc32ee4\nparent fa1668bf5084a190b26b022b9e625a7be3defa6e\nauthor MarcoFalke <falke.marco@gmail.com> 1624383667 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383755 +0200\n\ntest: Misc cleanup\n\n* Replace wait_until with assert_equal where possible\n* Use send_and_ping helper where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa211fc6e3d4984b8edff1d762dd4cba205d982",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1668bf5084a190b26b022b9e625a7be3defa6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1668bf5084a190b26b022b9e625a7be3defa6e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "47ee7add7572748a061e48624e1fe036ab9a75c9",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa211fc6e3d4984b8edff1d762dd4cba205d982/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa211fc6e3d4984b8edff1d762dd4cba205d982/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "patch": "@@ -62,12 +62,11 @@ def run_test(self):\n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        self.nodes[0].generate(1)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n-        stale_block_hash = self.nodes[0].getblockhash(1000)\n+        stale_block_hash = self.nodes[0].generate(1)[0]\n+        assert_equal(self.nodes[0].getblockcount(), 1000)\n \n         self.nodes[1].generate(1001)\n-        self.wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+        assert_equal(self.nodes[1].getblockcount(), 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n         assert peer_0.nServices & NODE_COMPACT_FILTERS != 0\n@@ -164,8 +163,7 @@ def run_test(self):\n             start_height=1,\n             stop_hash=int(stop_hash, 16),\n         )\n-        peer_0.send_message(request)\n-        peer_0.sync_with_ping()\n+        peer_0.send_and_ping(request)\n         response = peer_0.pop_cfilters()\n         assert_equal(len(response), 10)\n \n@@ -183,8 +181,7 @@ def run_test(self):\n             start_height=1000,\n             stop_hash=int(stale_block_hash, 16),\n         )\n-        peer_0.send_message(request)\n-        peer_0.sync_with_ping()\n+        peer_0.send_and_ping(request)\n         response = peer_0.pop_cfilters()\n         assert_equal(len(response), 1)\n "
      }
    ]
  },
  {
    "sha": "fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRkZGQxM2VlZjQ0MjhmNWZhNzIzNzU4M2Q0YmU0MWE5MzM1Y2Q5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:43:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T17:42:51Z"
      },
      "message": "test: Add missing syncwithvalidationinterfacequeue",
      "tree": {
        "sha": "91e8c15b11f853454289576e8b1176ca07d0387a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91e8c15b11f853454289576e8b1176ca07d0387a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjoHwwAmpDMe1yi27zZNOCggAhCmUP1oLpgDvZdQmIMM4mkRTTdLvEcnmxPvVqe\nCOeaxSrOVN8fK9OJa54KREMum6dN38lJ3eg3uUfch4GscMBJyOsWK4qFneWWKm0Y\nr6hdAGGyUTpGllv6MYk0cDOfkX5nvNB+8zZCjSOcU5QDouAxvZdr3YKyuK1oXl6U\n0goYMTIF72L3UFab9JcTt34AfBigYOqyzY5YkeYXuyyl1Olw2pPCRaB4tQyY8Voy\nMuZyTf798LbttroIdtwJvKhLCWbVXIqXRGyPtotvsyC9iebKX7uezAFJMONYiwNO\nJPQhc1wXHrymOVrJU63NEiIGMghoEx7tH4RGJ7nmhw0xklISpolwzqJhhMUSB1LA\nSNqfwP8boY90nnpCdeAOzGEnBs2N+SfbTG42GE2X/7ClO2N1kqlu3SLt3mytESXY\nc+RPNvlSsHOFUOVqs0LajgG+YSVAIMrViY74/9lapKDkE88xDz8pdJdyfTj8g0ib\nj9lrYPZ7\n=Vawu\n-----END PGP SIGNATURE-----",
        "payload": "tree 91e8c15b11f853454289576e8b1176ca07d0387a\nparent faa211fc6e3d4984b8edff1d762dd4cba205d982\nauthor MarcoFalke <falke.marco@gmail.com> 1624383782 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624383771 +0200\n\ntest: Add missing syncwithvalidationinterfacequeue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadddd13eef4428f5fa7237583d4be41a9335cd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa211fc6e3d4984b8edff1d762dd4cba205d982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa211fc6e3d4984b8edff1d762dd4cba205d982"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "63fc2a98d4f621b5c51628fca6070c09a5ec76cb",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadddd13eef4428f5fa7237583d4be41a9335cd9/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadddd13eef4428f5fa7237583d4be41a9335cd9/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=fadddd13eef4428f5fa7237583d4be41a9335cd9",
        "patch": "@@ -63,6 +63,7 @@ def run_test(self):\n         self.disconnect_nodes(0, 1)\n \n         stale_block_hash = self.nodes[0].generate(1)[0]\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n         assert_equal(self.nodes[0].getblockcount(), 1000)\n \n         self.nodes[1].generate(1001)\n@@ -90,6 +91,7 @@ def run_test(self):\n         self.log.info(\"Reorg node 0 to a new chain.\")\n         self.connect_nodes(0, 1)\n         self.sync_blocks(timeout=600)\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n \n         main_block_hash = self.nodes[0].getblockhash(1000)\n         assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\""
      }
    ]
  },
  {
    "sha": "fafd9165e911bf33d6212ca8a613b71878c82449",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZkOTE2NWU5MTFiZjMzZDYyMTJjYThhNjEzYjcxODc4YzgyNDQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T18:13:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T18:10:33Z"
      },
      "message": "test: Add missing sync_all to feature_coinstatsindex",
      "tree": {
        "sha": "578a97ebbe64e5bce571d734eeeaf39d1f547074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/578a97ebbe64e5bce571d734eeeaf39d1f547074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafd9165e911bf33d6212ca8a613b71878c82449",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5SgwAhZhUzZkizV6YBH+jy9hrFI8nwOrM7OR5pThShWGkoP8qcTgD47FKpLiP\nC/x5WqzV+tLZVmCh+EOosjzZwQPwqfgy8cs/UPiPbdO+jBSxBCw3yMoSmeo8sP+a\n/dT9YXyS5RBAFa904bSmVmP9x9A3KP+Ad+wX2X8qBPSlWNg0pUDLHao3QK2BTm/W\n6w3/Haw1D777A6/PxcL326rmxecydbWeEQ+Pr9oWwHEhDUa0oFRAvm1ykVJ97Wdu\nASmes7WeI23pYVDAicpUmms3kYrXN6KhoGVwWONsWFpfTJZiOfh1+qjFwNrkkfqr\n4o9JV5TzI5c8WI7LqdMdgu5paznvN2V7hBeGI57HTYLgA/v+7fpCsGAs6zkfHiTL\nljJLQYF88jOl8acihzgrkkV1S5CQqU33AYbxYYHDHkXMh0gYmCv79nyY9FDrNyZS\ndlJF4swux2zk8xEN5kbWjxCHtaAuoDh3y+x2i6BuzuhSouIr6pVMKDRZZZSlv3iE\nj7tw3ZR3\n=+F8y\n-----END PGP SIGNATURE-----",
        "payload": "tree 578a97ebbe64e5bce571d734eeeaf39d1f547074\nparent 327e2691f6e0498aa868af965bb4a951c5be17c5\nauthor MarcoFalke <falke.marco@gmail.com> 1624385639 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624385433 +0200\n\ntest: Add missing sync_all to feature_coinstatsindex\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd9165e911bf33d6212ca8a613b71878c82449",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafd9165e911bf33d6212ca8a613b71878c82449",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd9165e911bf33d6212ca8a613b71878c82449/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7488e3cb4206b7865ddc92f6e1560bd45e5add57",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafd9165e911bf33d6212ca8a613b71878c82449/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafd9165e911bf33d6212ca8a613b71878c82449/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=fafd9165e911bf33d6212ca8a613b71878c82449",
        "patch": "@@ -281,6 +281,7 @@ def _test_reorg_index(self):\n         # Add another block, so we don't depend on reconsiderblock remembering which\n         # blocks were touched by invalidateblock\n         index_node.generate(1)\n+        self.sync_all()\n \n         # Ensure that removing and re-adding blocks yields consistent results\n         block = index_node.getblockhash(99)"
      }
    ]
  },
  {
    "sha": "c901d4d8ce7949276da57eacb82b1a3ce40cac27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTAxZDRkOGNlNzk0OTI3NmRhNTdlYWNiODJiMWEzY2U0MGNhYzI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-06-22T19:19:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-06-22T19:24:42Z"
      },
      "message": "GUI: Enable palette change adaptation on all platforms",
      "tree": {
        "sha": "8288a2cc71335012d0c290c576f761b7a1e39dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8288a2cc71335012d0c290c576f761b7a1e39dd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c901d4d8ce7949276da57eacb82b1a3ce40cac27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901d4d8ce7949276da57eacb82b1a3ce40cac27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c901d4d8ce7949276da57eacb82b1a3ce40cac27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901d4d8ce7949276da57eacb82b1a3ce40cac27/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 0,
      "deletions": 18
    },
    "files": [
      {
        "sha": "02f7e2a832d506df65ab838befcb3cbe113eac95",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -1173,14 +1173,12 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n \n void BitcoinGUI::changeEvent(QEvent *e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         overviewAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/overview\")));\n         sendCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/send\")));\n         receiveCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/receiving_addresses\")));\n         historyAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/history\")));\n     }\n-#endif\n \n     QMainWindow::changeEvent(e);\n \n@@ -1511,14 +1509,12 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n \n void UnitDisplayStatusBarControl::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QString style = QString(\"QLabel { color : %1 }\").arg(m_platform_style->SingleColor().name());\n         if (style != styleSheet()) {\n             setStyleSheet(style);\n         }\n     }\n-#endif\n }\n \n /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */"
      },
      {
        "sha": "2ea250d3e97368982bdcf4a068ff3339a9f07a8a",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -564,11 +564,9 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n \n void CoinControlDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateView();\n     }\n-#endif\n }\n \n void CoinControlDialog::updateView()"
      },
      {
        "sha": "4ccfa5deefd3c44dbfc442523748627da3dba699",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -809,11 +809,9 @@ void ThemedLabel::setThemedPixmap(const QString& image_filename, int width, int\n \n void ThemedLabel::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateThemedPixmap();\n     }\n-#endif\n     QLabel::changeEvent(e);\n }\n "
      },
      {
        "sha": "bc5a0505445e976394fce09bb3335d03ed729564",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -297,13 +297,11 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n void OverviewPage::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QIcon icon = m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/warning\"));\n         ui->labelTransactionsStatus->setIcon(icon);\n         ui->labelWalletStatus->setIcon(icon);\n     }\n-#endif\n }\n \n void OverviewPage::updateDisplayUnit()"
      },
      {
        "sha": "68bbb9b963e5ab3d5b000179ce579c88002bf015",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -882,7 +882,6 @@ void RPCConsole::keyPressEvent(QKeyEvent *event)\n \n void RPCConsole::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->clearButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->fontBiggerButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/fontbigger\")));\n@@ -896,7 +895,6 @@ void RPCConsole::changeEvent(QEvent* e)\n                 platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(QSize(consoleFontSize * 2, consoleFontSize * 2), Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n         }\n     }\n-#endif\n }\n \n void RPCConsole::message(int category, const QString &message, bool html)"
      },
      {
        "sha": "dc273b8818a170fb8f205f89cdf49d945ce97c17",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -238,15 +238,13 @@ void SendCoinsEntry::updateDisplayUnit()\n \n void SendCoinsEntry::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n         ui->deleteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n }\n \n bool SendCoinsEntry::updateLabel(const QString &address)"
      },
      {
        "sha": "e8ee11e90fac8d30475198421581f018295dfc8a",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -286,7 +286,6 @@ bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)\n \n void SignVerifyMessageDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n@@ -297,5 +296,4 @@ void SignVerifyMessageDialog::changeEvent(QEvent* e)\n         ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/transaction_0\")));\n         ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n }"
      },
      {
        "sha": "cad3d406fbf95f5928dac768b286e69269070342",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901d4d8ce7949276da57eacb82b1a3ce40cac27/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "patch": "@@ -245,7 +245,6 @@ void TransactionView::setModel(WalletModel *_model)\n \n void TransactionView::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         watchOnlyWidget->setItemIcon(\n             TransactionFilterProxy::WatchOnlyFilter_Yes,\n@@ -254,7 +253,6 @@ void TransactionView::changeEvent(QEvent* e)\n             TransactionFilterProxy::WatchOnlyFilter_No,\n             m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/eye_minus\")));\n     }\n-#endif\n }\n \n void TransactionView::chooseDate(int idx)"
      }
    ]
  },
  {
    "sha": "9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDViZjZiZjAxYWY0MGE5Njg0ZjFiMWYwNmE4ZGY0YWFmMzZiOGYz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-06-22T19:24:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-06-22T19:24:44Z"
      },
      "message": "GUI: Always call parent changeEvent handler",
      "tree": {
        "sha": "47ed2d1537de527dd735e1f6458dc9050971bf63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47ed2d1537de527dd735e1f6458dc9050971bf63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901d4d8ce7949276da57eacb82b1a3ce40cac27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c901d4d8ce7949276da57eacb82b1a3ce40cac27"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f8aeb016596c86138572df97b1a424825dc3974c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -1515,6 +1515,8 @@ void UnitDisplayStatusBarControl::changeEvent(QEvent* e)\n             setStyleSheet(style);\n         }\n     }\n+\n+    QLabel::changeEvent(e);\n }\n \n /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */"
      },
      {
        "sha": "d2a9365890cfacc491262a94e2f21bdd4e447022",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -567,6 +567,8 @@ void CoinControlDialog::changeEvent(QEvent* e)\n     if (e->type() == QEvent::PaletteChange) {\n         updateView();\n     }\n+\n+    QDialog::changeEvent(e);\n }\n \n void CoinControlDialog::updateView()"
      },
      {
        "sha": "ecdfce2f5a4034559c49f156ba26724c510d2b11",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -812,6 +812,7 @@ void ThemedLabel::changeEvent(QEvent* e)\n     if (e->type() == QEvent::PaletteChange) {\n         updateThemedPixmap();\n     }\n+\n     QLabel::changeEvent(e);\n }\n "
      },
      {
        "sha": "1fd1ff31428618d2fe26b57e8477c08c9f8bec20",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -302,6 +302,8 @@ void OverviewPage::changeEvent(QEvent* e)\n         ui->labelTransactionsStatus->setIcon(icon);\n         ui->labelWalletStatus->setIcon(icon);\n     }\n+\n+    QWidget::changeEvent(e);\n }\n \n void OverviewPage::updateDisplayUnit()"
      },
      {
        "sha": "bc0afa03c9aeb690a49f5b6351afd1deceb1943d",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -895,6 +895,8 @@ void RPCConsole::changeEvent(QEvent* e)\n                 platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(QSize(consoleFontSize * 2, consoleFontSize * 2), Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n         }\n     }\n+\n+    QWidget::changeEvent(e);\n }\n \n void RPCConsole::message(int category, const QString &message, bool html)"
      },
      {
        "sha": "683c0441fadda8bad143f5890653fb9cd12cb820",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -245,6 +245,8 @@ void SendCoinsEntry::changeEvent(QEvent* e)\n         ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n+\n+    QStackedWidget::changeEvent(e);\n }\n \n bool SendCoinsEntry::updateLabel(const QString &address)"
      },
      {
        "sha": "33589f09bfdeed4af9cc336101bcc677eac55324",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -296,4 +296,6 @@ void SignVerifyMessageDialog::changeEvent(QEvent* e)\n         ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/transaction_0\")));\n         ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n+\n+    QDialog::changeEvent(e);\n }"
      },
      {
        "sha": "83d17a32c089c2c27e9d17949a00700f486c54ae",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "patch": "@@ -253,6 +253,8 @@ void TransactionView::changeEvent(QEvent* e)\n             TransactionFilterProxy::WatchOnlyFilter_No,\n             m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/eye_minus\")));\n     }\n+\n+    QWidget::changeEvent(e);\n }\n \n void TransactionView::chooseDate(int idx)"
      }
    ]
  },
  {
    "sha": "c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTNlMTIzZGM3MmJmYzFiZDJjNjM3ZmRjZDAzMmU1NzBkNTNhN2Jk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T21:08:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T21:08:23Z"
      },
      "message": "Merge bitcoin/bitcoin#22308: wallet: Add missing BlockUntilSyncedToCurrentChain\n\nfa27baa9c8a13239625e5a7b6c472d236fe5b9fa Revert \"test: Add temporary logging to debug #20975\" (MarcoFalke)\nfadb55085a02c9e355617bcb5f84b6335e4f8c9d wallet: Add missing BlockUntilSyncedToCurrentChain (MarcoFalke)\n\nPull request description:\n\n  Fixes #20975\n\n  Also replace the wallet pointer by a reference\n\nACKs for top commit:\n  achow101:\n    ACK fa27baa9c8a13239625e5a7b6c472d236fe5b9fa\n\nTree-SHA512: 79047a30998104a12c2ff84a8e3cc5207151410bbe92b74cfedbe1c1aca3ffa5909391607fc597f3a3cf0725fa827528a4c57edaeacc8360536b1965e166be6a",
      "tree": {
        "sha": "123b8bcdd4c50ef5cb27a0dd91729dfc0a1278bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/123b8bcdd4c50ef5cb27a0dd91729dfc0a1278bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg0NQwAwLYJcNEl6dzZQ/bwuDS6TXnEd593sZzfhmzQ3ProKV0COqKNefIOOYni\nW4MFRBY2a9r3EJLNudIsmZuA+BwDBM5MSk6EKEfsw1b8XfygI3XlxeBuyFJ8MO1I\n210s6AiGJWB4VAIYYwD1jYVvuizVwaf6wZNZqYspYPCxdxej5idVLB4pRbDwpbaC\nhuaEC8tolYs4DoQz8Wy++cESpyr9qS5APYvLQg7uUA9c2+xz7uzL2YFm7GMMXpxM\nGZiGsvqbT2ceRnBfIqhP7RMawPvEPD3rsg5XCEXa/6cITOAG8uGs25EsvtAX8+kC\nfd3ojGi3yQgjw4MGikwl3szpAhtRVS+tUS7/gv3yKKtqemOyN4pJ2NjGa9tAnGn4\nYROjzC1nsbJIAXdjRePA5zNBiTWLZG4cBwXxBS1tkw/0q8B1sBmMkzryyfwFZnQE\nOcduyZDsSanVzNZFsVj1xPkdAzbEinqGrfMyuW1dAi4iR7A7/XuQL4ouJ5jBjTNM\nsdc5Qv6a\n=6+S2\n-----END PGP SIGNATURE-----",
        "payload": "tree 123b8bcdd4c50ef5cb27a0dd91729dfc0a1278bb\nparent 327e2691f6e0498aa868af965bb4a951c5be17c5\nparent fa27baa9c8a13239625e5a7b6c472d236fe5b9fa\nauthor MarcoFalke <falke.marco@gmail.com> 1624396096 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624396103 +0200\n\nMerge bitcoin/bitcoin#22308: wallet: Add missing BlockUntilSyncedToCurrentChain\n\nfa27baa9c8a13239625e5a7b6c472d236fe5b9fa Revert \"test: Add temporary logging to debug #20975\" (MarcoFalke)\nfadb55085a02c9e355617bcb5f84b6335e4f8c9d wallet: Add missing BlockUntilSyncedToCurrentChain (MarcoFalke)\n\nPull request description:\n\n  Fixes #20975\n\n  Also replace the wallet pointer by a reference\n\nACKs for top commit:\n  achow101:\n    ACK fa27baa9c8a13239625e5a7b6c472d236fe5b9fa\n\nTree-SHA512: 79047a30998104a12c2ff84a8e3cc5207151410bbe92b74cfedbe1c1aca3ffa5909391607fc597f3a3cf0725fa827528a4c57edaeacc8360536b1965e166be6a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "327e2691f6e0498aa868af965bb4a951c5be17c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/327e2691f6e0498aa868af965bb4a951c5be17c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/327e2691f6e0498aa868af965bb4a951c5be17c5"
      },
      {
        "sha": "fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27baa9c8a13239625e5a7b6c472d236fe5b9fa"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8b1b6c6d9524c2afb4568481a66eb9bdd0974812",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "patch": "@@ -4317,6 +4317,11 @@ static RPCHelpMan walletprocesspsbt()\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n+    const CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n \n     // Unserialize the transaction\n@@ -4333,7 +4338,7 @@ static RPCHelpMan walletprocesspsbt()\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n     bool complete = true;\n-    const TransactionError err = pwallet->FillPSBT(psbtx, complete, nHashType, sign, bip32derivs);\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n@@ -4431,6 +4436,11 @@ static RPCHelpMan walletcreatefundedpsbt()\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n+    CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n@@ -4442,7 +4452,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n \n     CAmount fee;\n     int change_position;\n-    bool rbf = pwallet->m_signal_rbf;\n+    bool rbf{wallet.m_signal_rbf};\n     const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n     if (!replaceable_arg.isNull()) {\n         RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n@@ -4453,15 +4463,15 @@ static RPCHelpMan walletcreatefundedpsbt()\n     // Automatically select coins, unless at least one is manually selected. Can\n     // be overridden by options.add_inputs.\n     coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(*pwallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n+    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n     bool complete = true;\n-    const TransactionError err = pwallet->FillPSBT(psbtx, complete, 1, false, bip32derivs);\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, 1, false, bip32derivs)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      },
      {
        "sha": "e91b44e7762b1385bba0ca2ffbf40cbceddd0329",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "patch": "@@ -181,11 +181,6 @@ def create_raw_transaction(node, txid, to_address, *, amount):\n             signed_psbt = wrpc.walletprocesspsbt(psbt)\n             psbt = signed_psbt['psbt']\n     final_psbt = node.finalizepsbt(psbt)\n-    if not final_psbt[\"complete\"]:\n-        node.log.info(f'final_psbt={final_psbt}')\n-        for w in node.listwallets():\n-            wrpc = node.get_wallet_rpc(w)\n-            node.log.info(f'listunspent={wrpc.listunspent()}')\n     assert_equal(final_psbt[\"complete\"], True)\n     return final_psbt['hex']\n "
      }
    ]
  },
  {
    "sha": "177c15d2f7cd5406ddbce8217fc023057539b828",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzdjMTVkMmY3Y2Q1NDA2ZGRiY2U4MjE3ZmMwMjMwNTc1MzliODI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:37:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Limit LegacyScriptPubKeyMan address types\n\nMake sure that LegacyScriptPubKeyMan can only be used for legacy,\np2sh-segwit, and bech32 address types.",
      "tree": {
        "sha": "8a06ff84feb783bf06edb5dab49a8af7b18fcd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a06ff84feb783bf06edb5dab49a8af7b18fcd64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/177c15d2f7cd5406ddbce8217fc023057539b828",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4212b6f34a4b7ac07d90771e09c1130fe130d94d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -22,6 +22,11 @@ const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        return false;\n+    }\n+\n     LOCK(cs_KeyStore);\n     error.clear();\n \n@@ -291,6 +296,10 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        return false;\n+    }\n+\n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n         return false;"
      },
      {
        "sha": "3c6a29e5d16d1fb597df951493e14e1842920ffe",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -254,6 +254,13 @@ class ScriptPubKeyMan\n     boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n };\n \n+/** OutputTypes supported by the LegacyScriptPubKeyMan */\n+static const std::unordered_set<OutputType> LEGACY_OUTPUT_TYPES {\n+    OutputType::LEGACY,\n+    OutputType::P2SH_SEGWIT,\n+    OutputType::BECH32,\n+};\n+\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:"
      },
      {
        "sha": "63d0f4cf414e1da163fb2170a0121dfda537c3ec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177c15d2f7cd5406ddbce8217fc023057539b828/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=177c15d2f7cd5406ddbce8217fc023057539b828",
        "patch": "@@ -3033,7 +3033,7 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n \n     auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\n-    for (const auto& type : OUTPUT_TYPES) {\n+    for (const auto& type : LEGACY_OUTPUT_TYPES) {\n         m_internal_spk_managers[type] = spk_manager.get();\n         m_external_spk_managers[type] = spk_manager.get();\n     }"
      }
    ]
  },
  {
    "sha": "0262536c34567743e527dad46912c9ba493252cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjYyNTM2YzM0NTY3NzQzZTUyN2RhZDQ2OTEyYzliYTQ5MzI1MmNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:38:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Add OutputType::BECH32M\n\nBech32m addresses need their own OutputType\n\nWe are not ready to create DescriptorScriptPubKeyMans which produce\nbech32m addresses. So don't allow generating them.",
      "tree": {
        "sha": "46bf2bac96cdb0bd7a5a960d573e0a6dd175bed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46bf2bac96cdb0bd7a5a960d573e0a6dd175bed9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0262536c34567743e527dad46912c9ba493252cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0262536c34567743e527dad46912c9ba493252cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "177c15d2f7cd5406ddbce8217fc023057539b828",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177c15d2f7cd5406ddbce8217fc023057539b828",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/177c15d2f7cd5406ddbce8217fc023057539b828"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9748fe24c7d14e2282147c038b2fe01b370f4279",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -18,6 +18,7 @@\n static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n \n bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n@@ -30,6 +31,9 @@ bool ParseOutputType(const std::string& type, OutputType& output_type)\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n         output_type = OutputType::BECH32;\n         return true;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32M) {\n+        output_type = OutputType::BECH32M;\n+        return true;\n     }\n     return false;\n }\n@@ -40,6 +44,7 @@ const std::string& FormatOutputType(OutputType type)\n     case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n     case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n     case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    case OutputType::BECH32M: return OUTPUT_TYPE_STRING_BECH32M;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -59,6 +64,7 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n             return witdest;\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should never be used with BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -98,6 +104,7 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n             return ScriptHash(witprog);\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should not be used for BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }"
      },
      {
        "sha": "8727d3f543b711339bf3329afc1908fe9a7342e3",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -18,12 +18,14 @@ enum class OutputType {\n     LEGACY,\n     P2SH_SEGWIT,\n     BECH32,\n+    BECH32M,\n };\n \n static constexpr auto OUTPUT_TYPES = std::array{\n     OutputType::LEGACY,\n     OutputType::P2SH_SEGWIT,\n     OutputType::BECH32,\n+    OutputType::BECH32M,\n };\n \n [[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);"
      },
      {
        "sha": "dedd40694e806b51ccb5f22b561b1daa9e1a5f04",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -1889,6 +1889,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n {\n+    if (addr_type == OutputType::BECH32M) {\n+        // Don't allow setting up taproot descriptors yet\n+        // TODO: Allow setting up taproot descriptors\n+        return false;\n+    }\n+\n     LOCK(cs_desc_man);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n@@ -1918,6 +1924,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n         break;\n     }\n+    case OutputType::BECH32M: assert(false); // TODO: Setup taproot descriptor\n     } // no default case, so the compiler can warn about missing cases\n     assert(!desc_prefix.empty());\n "
      },
      {
        "sha": "fbda77ed62c49d10715d52849c8414ad9bb32f27",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0262536c34567743e527dad46912c9ba493252cd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0262536c34567743e527dad46912c9ba493252cd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0262536c34567743e527dad46912c9ba493252cd",
        "patch": "@@ -3086,6 +3086,11 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n+                if (t == OutputType::BECH32M) {\n+                    // Skip taproot (bech32m) for now\n+                    // TODO: Setup taproot (bech32m) descriptors by default\n+                    continue;\n+                }\n                 auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {"
      }
    ]
  },
  {
    "sha": "699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTlkZmNkOGFkOTQ4N2E0ZTA0YzFmZmM2ODIxMWU4NGUxMjZiM2Qy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:40:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:53:11Z"
      },
      "message": "Opportunistically use bech32m change addresses if available\n\nIf a transaction as a segwit output, use a bech32m change address if\nthey are available. If not, fallback to bech32. If bech32 change\naddresses are unavailable, fallback to the default address type.",
      "tree": {
        "sha": "32cb7d69dc0bcbe38064a0a429047960bb5c6b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32cb7d69dc0bcbe38064a0a429047960bb5c6b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0262536c34567743e527dad46912c9ba493252cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0262536c34567743e527dad46912c9ba493252cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0262536c34567743e527dad46912c9ba493252cd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f693026971323b15f96a007719a584b32b79347",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "patch": "@@ -1909,7 +1909,13 @@ OutputType CWallet::TransactionChangeType(const std::optional<OutputType>& chang\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n         if (recipient.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-            return OutputType::BECH32;\n+            if (GetScriptPubKeyMan(OutputType::BECH32M, true)) {\n+                return OutputType::BECH32M;\n+            } else if (GetScriptPubKeyMan(OutputType::BECH32, true)) {\n+                return OutputType::BECH32;\n+            } else {\n+                return m_default_address_type;\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGJlNGQxMDcyOGY4ODI5ODZlZDBkOWVkNzdiYzczNmYwNTFjNjYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T20:42:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "Use BECH32M for tr() desc, WitV1Taproot, and WitUnknown CTxDests\n\nThe tr() descriptor, WitnessV1Taproot CTxDestination, and\nWitnessUnknown CTxDestination are OutputType::BECH32M so they should\nreport as such.",
      "tree": {
        "sha": "7c8aa8e4b4b15c9840b97be75ef4aff263374345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c8aa8e4b4b15c9840b97be75ef4aff263374345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbe4d10728f882986ed0d9ed77bc736f051c662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/699dfcd8ad9487a4e04c1ffc68211e84e126b3d2"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5da249b7f9e93687171bbb973949811ae904e7e2",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbe4d10728f882986ed0d9ed77bc736f051c662/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbe4d10728f882986ed0d9ed77bc736f051c662/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "patch": "@@ -646,11 +646,13 @@ static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination&\n         return OutputType::LEGACY;\n     }\n     if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n-        std::holds_alternative<WitnessV0ScriptHash>(dest) ||\n-        std::holds_alternative<WitnessV1Taproot>(dest) ||\n-        std::holds_alternative<WitnessUnknown>(dest)) {\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n         return OutputType::BECH32;\n     }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n     return std::nullopt;\n }\n \n@@ -874,7 +876,7 @@ class TRDescriptor final : public DescriptorImpl\n     {\n         assert(m_subdescriptor_args.size() == m_depths.size());\n     }\n-    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32M; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "b085a6eab63562847d5e679c8ff0ae2d266ddbdf",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbe4d10728f882986ed0d9ed77bc736f051c662/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbe4d10728f882986ed0d9ed77bc736f051c662/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "patch": "@@ -226,7 +226,7 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n         result = self.addr_gen.importdescriptors([{\"desc\": desc_pub, \"active\": True, \"timestamp\": \"now\"}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.addr_gen.getnewaddress(address_type='bech32')\n+            addr_g = self.addr_gen.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n@@ -259,7 +259,7 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n         result = self.rpc_online.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.rpc_online.getnewaddress(address_type='bech32')\n+            addr_g = self.rpc_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)\n@@ -290,7 +290,7 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n         result = self.psbt_offline.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.psbt_online.getnewaddress(address_type='bech32')\n+            addr_g = self.psbt_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)"
      }
    ]
  },
  {
    "sha": "87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2EwZTdhM2I3YzBmZmQ1NDVlNTM3YmQ0OTdjZGMzZTY3ZDA0NWY2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-04T21:35:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "Disallow bech32m addresses for legacy wallet things\n\nWe don't want the legacy wallet to ever have bech32m addresses so don't\nallow importing them. This includes addmultisigaddress as that is a\nlegacy wallet only RPC\n\nAdditionally, bech32m multisigs are not available yet, so disallow them\nin createmultisig.",
      "tree": {
        "sha": "0b7a64337d330fcbeefe685b2808fa573f375e71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b7a64337d330fcbeefe685b2808fa573f375e71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbe4d10728f882986ed0d9ed77bc736f051c662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbe4d10728f882986ed0d9ed77bc736f051c662"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 113,
      "deletions": 41
    },
    "files": [
      {
        "sha": "8ede7b99745ba56ee8b1f111516e8e4de78e0525",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -108,3 +108,19 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n+\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n+    if (std::holds_alternative<PKHash>(dest) ||\n+        std::holds_alternative<ScriptHash>(dest)) {\n+        return OutputType::LEGACY;\n+    }\n+    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n+        return OutputType::BECH32;\n+    }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "2b83235cd018ee127d4898a34a31abff4d59d67c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -47,4 +47,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  */\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n+/** Get the OutputType for a CTxDestination */\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest);\n+\n #endif // BITCOIN_OUTPUTTYPE_H"
      },
      {
        "sha": "5178ce60e80bcbc5a13129305abcd37ce81f441b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -131,6 +131,9 @@ static RPCHelpMan createmultisig()\n         if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"createmultisig cannot create bech32m multisig addresses\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "d796ed26aac765008e34cdb93b22142ba9b01a23",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -640,22 +640,6 @@ class DescriptorImpl : public Descriptor\n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n-static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n-    if (std::holds_alternative<PKHash>(dest) ||\n-        std::holds_alternative<ScriptHash>(dest)) {\n-        return OutputType::LEGACY;\n-    }\n-    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n-        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n-        return OutputType::BECH32;\n-    }\n-    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n-        std::holds_alternative<WitnessUnknown>(dest)) {\n-        return OutputType::BECH32M;\n-    }\n-    return std::nullopt;\n-}\n-\n /** A parsed addr(A) descriptor. */\n class AddressDescriptor final : public DescriptorImpl\n {"
      },
      {
        "sha": "35649ab02ce6102806667727b95f8433b1c8a1aa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -286,6 +286,9 @@ RPCHelpMan importaddress()\n             if (fP2SH) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n             }\n+            if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+            }\n \n             pwallet->MarkDirty();\n \n@@ -962,6 +965,9 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n         if (!IsValidDestination(dest)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+        }\n         script = GetScriptForDestination(dest);\n     } else {\n         if (!IsHex(output)) {\n@@ -1086,6 +1092,9 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     if (!parsed_desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n+    if (parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m descriptors cannot be imported into legacy wallets\");\n+    }\n \n     have_solving_data = parsed_desc->IsSolvable();\n     const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;"
      },
      {
        "sha": "951f575c2f1c5eda7e33dee1e60945e3cf69528a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -269,6 +269,9 @@ static RPCHelpMan getnewaddress()\n         if (!ParseOutputType(request.params[1].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -313,6 +316,9 @@ static RPCHelpMan getrawchangeaddress()\n         if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -1004,6 +1010,9 @@ static RPCHelpMan addmultisigaddress()\n         if (!ParseOutputType(request.params[3].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "2f7729a901a4574ecd5463e929d4850d7de907b2",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -26,6 +26,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n         error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n         return false;\n     }\n+    assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     error.clear();\n@@ -299,6 +300,7 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n         return false;\n     }\n+    assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n@@ -1303,6 +1305,7 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n \n void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type)\n {\n+    assert(type != OutputType::BECH32M);\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n@@ -1336,6 +1339,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n \n bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType type, bool internal)\n {\n+    assert(type != OutputType::BECH32M);\n     if (!CanGetAddresses(internal)) {\n         return false;\n     }\n@@ -1404,6 +1408,7 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n \n void LegacyScriptPubKeyMan::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n+    assert(type != OutputType::BECH32M);\n     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n         CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n         CScript witprog = GetScriptForDestination(witdest);"
      },
      {
        "sha": "816ec674925f6a95f6b6a34239ea8f9303c41e0d",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -97,6 +97,9 @@ def run_test(self):\n             sorted_key_desc = descsum_create('sh(multi(2,{}))'.format(sorted_key_str))\n             assert_equal(self.nodes[0].deriveaddresses(sorted_key_desc)[0], t['address'])\n \n+        # Check that bech32m is currently not allowed\n+        assert_raises_rpc_error(-5, \"createmultisig cannot create bech32m multisig addresses\", self.nodes[0].createmultisig, 2, self.pub, \"bech32m\")\n+\n     def check_addmultisigaddress_errors(self):\n         if self.options.descriptors:\n             return\n@@ -108,6 +111,10 @@ def check_addmultisigaddress_errors(self):\n             self.nodes[0].importaddress(a)\n         assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n \n+        # Bech32m address type is disallowed for legacy wallets\n+        pubs = [self.nodes[1].getaddressinfo(addr)[\"pubkey\"] for addr in addresses]\n+        assert_raises_rpc_error(-5, \"Bech32m multisig addresses cannot be created with legacy wallets\", self.nodes[0].addmultisigaddress, 2, pubs, \"\", \"bech32m\")\n+\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(COINBASE_MATURITY)"
      },
      {
        "sha": "b05fedcfc761ccd750a5b25d56f66138de978158",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -373,5 +373,15 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress(), multisig=False, typ='p2sh-segwit')\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n+        if self.options.descriptors:\n+            self.log.info(\"Descriptor wallets do not have bech32m addreses by default yet\")\n+            # TODO: Remove this when they do\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+        else:\n+            self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+\n if __name__ == '__main__':\n     AddressTypeTest().main()"
      },
      {
        "sha": "b5afc3785ee91ea4caba6631527d102572e51c22",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -420,6 +420,9 @@ def run_test(self):\n             # This will raise an exception for importing an invalid pubkey\n             assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n \n+            # Bech32m addresses cannot be imported into a legacy wallet\n+            assert_raises_rpc_error(-5, \"Bech32m addresses cannot be imported into legacy wallets\", self.nodes[0].importaddress, \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\")\n+\n             # Import address and private key to check correct behavior of spendable unspents\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()"
      },
      {
        "sha": "baeac655dfdeb048bb91d174476625de4139dd34",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -746,6 +746,27 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Bech32m addresses and descriptors cannot be imported\n+        self.log.info(\"Bech32m addresses and descriptors cannot be imported\")\n+        self.test_importmulti(\n+            {\n+                \"scriptPubKey\": {\"address\": \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\"},\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m addresses cannot be imported into legacy wallets\",\n+        )\n+        self.test_importmulti(\n+            {\n+                \"desc\": descsum_create(\"tr({})\".format(pub)),\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m descriptors cannot be imported into legacy wallets\",\n+        )\n+\n         # Import some public keys to the keypool of a no privkey wallet\n         self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)"
      },
      {
        "sha": "a571454acf50ad3d8b130cf31d77fd5c3814d22a",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "patch": "@@ -135,31 +135,33 @@ def run_test(self):\n         # in the label. This is a no-op.\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n-        self.log.info('Check watchonly labels')\n-        node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n-        wallet_watch_only = node.get_wallet_rpc('watch_only')\n-        BECH32_VALID = {\n-            '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n-            '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n-            '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n-        }\n-        BECH32_INVALID = {\n-            '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n-            '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n-        }\n-        for l in BECH32_VALID:\n-            ad = BECH32_VALID[l]\n-            wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n-            node.generatetoaddress(1, ad)\n-            assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n-            assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n-        for l in BECH32_INVALID:\n-            ad = BECH32_INVALID[l]\n-            assert_raises_rpc_error(\n-                -5,\n-                \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n-                lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n-            )\n+        if self.options.descriptors:\n+            # This is a descriptor wallet test because of segwit v1+ addresses\n+            self.log.info('Check watchonly labels')\n+            node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n+            wallet_watch_only = node.get_wallet_rpc('watch_only')\n+            BECH32_VALID = {\n+                '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n+                '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n+                '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n+            }\n+            BECH32_INVALID = {\n+                '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n+                '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n+            }\n+            for l in BECH32_VALID:\n+                ad = BECH32_VALID[l]\n+                wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n+                node.generatetoaddress(1, ad)\n+                assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n+                assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n+            for l in BECH32_INVALID:\n+                ad = BECH32_INVALID[l]\n+                assert_raises_rpc_error(\n+                    -5,\n+                    \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n+                    lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n+                )\n \n \n class Label:"
      }
    ]
  },
  {
    "sha": "754f134a50cc56cdf0baf996d909c992770fcc97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTRmMTM0YTUwY2M1NmNkZjBiYWY5OTZkOTA5Yzk5Mjc3MGZjYzk3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-13T01:36:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T01:57:04Z"
      },
      "message": "wallet: Add error message to GetReservedDestination\n\nAdds an error output parameter to all GetReservedDestination functions\nso that callers can get the actual reason that a change address could\nnot be fetched. This more closely matches GetNewDestination. This allows\nfor more granular error messages, such as one that indicates that\nbech32m addresses cannot be generated yet.",
      "tree": {
        "sha": "6254beb3d43175e1383014a1f80daa10c60b42cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6254beb3d43175e1383014a1f80daa10c60b42cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/754f134a50cc56cdf0baf996d909c992770fcc97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754f134a50cc56cdf0baf996d909c992770fcc97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/754f134a50cc56cdf0baf996d909c992770fcc97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754f134a50cc56cdf0baf996d909c992770fcc97/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "44c3912544b2c70291099102ca19ef7cd8fb21ec",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -295,19 +295,22 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n         return false;\n     }\n     assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n \n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n     address = GetDestinationForKey(keypool.vchPubKey, type);\n@@ -1720,10 +1723,9 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n     return true;\n }\n \n-bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n     LOCK(cs_desc_man);\n-    std::string error;\n     bool result = GetNewDestination(type, address, error);\n     index = m_wallet_descriptor.next_index - 1;\n     return result;"
      },
      {
        "sha": "b2ca354b0a24066c192842c386aa53e4462dca22",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -181,7 +181,7 @@ class ScriptPubKeyMan\n     virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n     virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n@@ -364,7 +364,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n@@ -573,7 +573,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n     // Tops up the descriptor cache and m_map_script_pub_keys. The cache is stored in the wallet file"
      },
      {
        "sha": "6a8df437ae8efcac2f20ee4b512772f9df761aab",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -618,8 +618,9 @@ bool CWallet::CreateTransactionInternal(\n         // Reserve a new key pair from key pool. If it fails, provide a dummy\n         // destination in case we don't need change.\n         CTxDestination dest;\n-        if (!reservedest.GetReservedDestination(dest, true)) {\n-            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        std::string dest_err;\n+        if (!reservedest.GetReservedDestination(dest, true, dest_err)) {\n+            error = strprintf(_(\"Transaction needs a change address, but we can't generate it. %s\"), dest_err);\n         }\n         scriptChange = GetScriptForDestination(dest);\n         // A valid destination implies a change script (and"
      },
      {
        "sha": "c2586b60b8167f3660b72e6049a1ea15b9c0cb63",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -2118,7 +2118,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n     } else {\n-        error = strprintf(\"Error: No %s addresses available.\", FormatOutputType(type));\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n     }\n     if (result) {\n         SetAddressBook(dest, label, \"receive\");\n@@ -2133,8 +2133,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     error.clear();\n \n     ReserveDestination reservedest(this, type);\n-    if (!reservedest.GetReservedDestination(dest, true)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+    if (!reservedest.GetReservedDestination(dest, true, error)) {\n         return false;\n     }\n \n@@ -2181,10 +2180,11 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal)\n+bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal, std::string& error)\n {\n     m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n     if (!m_spk_man) {\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n         return false;\n     }\n \n@@ -2194,7 +2194,7 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         m_spk_man->TopUp();\n \n         CKeyPool keypool;\n-        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool, error)) {\n             return false;\n         }\n         fInternal = keypool.fInternal;"
      },
      {
        "sha": "b63938c5f1b5e77f562adf715f507b45b8f98f3b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -181,7 +181,7 @@ class ReserveDestination\n     }\n \n     //! Reserve an address\n-    bool GetReservedDestination(CTxDestination& pubkey, bool internal);\n+    bool GetReservedDestination(CTxDestination& pubkey, bool internal, std::string& error);\n     //! Return reserved address\n     void ReturnDestination();\n     //! Keep the address. Do not return it's key to the keypool when this object goes out of scope"
      },
      {
        "sha": "fa98c441521db5d148d8c765ad28939f3c405b03",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -551,7 +551,7 @@ def test_locked_wallet(self):\n         # creating the key must be impossible because the wallet is locked\n         outputs = {self.nodes[0].getnewaddress():1.1}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "9b97d08424d54736df25e7c7ab3f4ad7beb93b44",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -374,10 +374,10 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n         if self.options.descriptors:\n-            self.log.info(\"Descriptor wallets do not have bech32m addreses by default yet\")\n+            self.log.info(\"Descriptor wallets do not have bech32m addresses by default yet\")\n             # TODO: Remove this when they do\n             assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n-            assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n         else:\n             self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n             assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")"
      },
      {
        "sha": "28bfc9116f6abc03d0040b07031b5c2f71ab69eb",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/754f134a50cc56cdf0baf996d909c992770fcc97/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=754f134a50cc56cdf0baf996d909c992770fcc97",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n \n         # Using a fee rate (10 sat / byte) well above the minimum relay rate\n         # creating a 5,000 sat transaction with change should not be possible\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n \n         # creating a 10,000 sat transaction without change, with a manual input, should still be possible\n         res = w2.walletcreatefundedpsbt(inputs=w2.listunspent(), outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})"
      }
    ]
  },
  {
    "sha": "03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2FhNTlhNGU1OGY2Y2Y5OGJjODAzNjk5ZWE0ZTExN2JkYzJhOWYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T06:07:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T06:07:19Z"
      },
      "message": "Merge bitcoin/bitcoin#22313: test: Add missing sync_all to feature_coinstatsindex\n\nfafd9165e911bf33d6212ca8a613b71878c82449 test: Add missing sync_all to feature_coinstatsindex (MarcoFalke)\n\nPull request description:\n\n  Sync the blocks before invalidating them to ensure all nodes are on the right tip. Otherwise nodes[0] might stay on the \"stale\" block and the test fails (intermittently)\n\nACKs for top commit:\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22313/commits/fafd9165e911bf33d6212ca8a613b71878c82449\n\nTree-SHA512: ca567b97b839b56c91d52831eaac18d8c843d376be90c9fd8b49d2eb4a46b801a1d2402996d5dfe2bef3e2c9bd75d19ed443e3f42cc4679c5f20043ba556efc8",
      "tree": {
        "sha": "099ac1121bf66c8a6982c17eaf0c0ed599e766b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099ac1121bf66c8a6982c17eaf0c0ed599e766b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUirPAv+Nshy4iu8EwvLCS7hAJOTIabP9WNz9b8vEdkSwTZLJnRNgcpcyQVLbYzf\nJpOszmzcJSmuPzgdFIFx8UN28CVSdp53BPbTOHs0XbZiurHEM/U8btrU5nFASZok\nagPi2VDUsYU8hPYSMM/q4EtFfSnF9so3yyg5wwjQFf84HlsaqecB7hasS7bW1Wcm\npWQtrSUI3DHnEnuRGY+WzBElt8Z6eOA8XEAcxb33Dv1B5EexFEJyYoXTkZ6uxam3\n8IXd/IjlmriJEz93KB3eLV7jErER0UiG4C52HRfj20SajK1Ma3xehdDrLYoNviGO\nZou7V5+mcr0zNVv1IyHvaI/xIuRe8I16yNrdpqBEsb5sUEMFvpKALVfXPeexUsxg\nHiSfgEMnUr990QOnoCWvJb/I6qSyL5Ix9tUoF7vc27RLEdukxggoWW+NSrXho7iI\nIkAQx96eHZ9QVgVM0DNNkHNRzu3dYSOYfn9QdNhTSV/YwowwWpH00xnPU9w9xuw5\n7Wan/Ye3\n=AXAQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 099ac1121bf66c8a6982c17eaf0c0ed599e766b0\nparent c93e123dc72bfc1bd2c637fdcd032e570d53a7bd\nparent fafd9165e911bf33d6212ca8a613b71878c82449\nauthor MarcoFalke <falke.marco@gmail.com> 1624428436 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624428439 +0200\n\nMerge bitcoin/bitcoin#22313: test: Add missing sync_all to feature_coinstatsindex\n\nfafd9165e911bf33d6212ca8a613b71878c82449 test: Add missing sync_all to feature_coinstatsindex (MarcoFalke)\n\nPull request description:\n\n  Sync the blocks before invalidating them to ensure all nodes are on the right tip. Otherwise nodes[0] might stay on the \"stale\" block and the test fails (intermittently)\n\nACKs for top commit:\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22313/commits/fafd9165e911bf33d6212ca8a613b71878c82449\n\nTree-SHA512: ca567b97b839b56c91d52831eaac18d8c843d376be90c9fd8b49d2eb4a46b801a1d2402996d5dfe2bef3e2c9bd75d19ed443e3f42cc4679c5f20043ba556efc8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93e123dc72bfc1bd2c637fdcd032e570d53a7bd"
      },
      {
        "sha": "fafd9165e911bf33d6212ca8a613b71878c82449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd9165e911bf33d6212ca8a613b71878c82449",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafd9165e911bf33d6212ca8a613b71878c82449"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7488e3cb4206b7865ddc92f6e1560bd45e5add57",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
        "patch": "@@ -281,6 +281,7 @@ def _test_reorg_index(self):\n         # Add another block, so we don't depend on reconsiderblock remembering which\n         # blocks were touched by invalidateblock\n         index_node.generate(1)\n+        self.sync_all()\n \n         # Ensure that removing and re-adding blocks yields consistent results\n         block = index_node.getblockhash(99)"
      }
    ]
  },
  {
    "sha": "2bf211696b8cd355856995ba821c74e67385b77d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmYyMTE2OTZiOGNkMzU1ODU2OTk1YmE4MjFjNzRlNjczODViNzdk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T06:14:56Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T07:48:37Z"
      },
      "message": "build: set minimum required Boost to 1.64.0",
      "tree": {
        "sha": "442cca096d13963fcb7a5cd77f57b2d652a622a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/442cca096d13963fcb7a5cd77f57b2d652a622a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bf211696b8cd355856995ba821c74e67385b77d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDS51cACgkQLuufXMCV\nJsEeOBAAo68KYw5fsg2+ICBZtOubLphGxMzXe1v/SjTBAbE8g2ziA77DjMvSalN7\nurXcBgs73k/173ovhqScL+yGEmWAK8BZ5sktcjimz/ZdSetVpvAkKTOxkQE+dLd0\neEk16TOQ3mBqsN6tIps7gjo1IAAM3AVNzQLhIuFICAPKvkn01SUz5A9TwIfJDNcY\nZiVZp1FZFfbA0Gi1mxLZUYKigmpexWH5j4Ef/7/4zMvk3u8JM4Tz9c9PHEpKCuz8\nGmTEF3MknB+bQLku8UVTNPMS8K1rrQotQqXjnoAmTUl0rlZlDKMzAlcIfwizfr6H\nRuX5FmwLyQq07+hoLcec16Ki14mE+MrMVMtjCAPnCT1eUBLyJGe/USf02FOdhoz4\nx8Hb9phWZgX7bHHYu2sAmcfUwZ9JYtONFXlkyudu+OMsNJisBQEAzkaJ7Vg3lNMR\naDfZbOEya3jFIdMUUH3piwpJ+ZAgSXak3X6fNASDX+xBZgVqb1cCcfJq5C7fyu9V\naBvnapJdvcAdVC/+l3M/dX6IcSSthnHCWDJXLOoWi5hmScc/EwTSXVfd76W4s6Zr\n7npfQLLHGH2SIpzQpjPPy4hhivSOAaSqyip7A3PpGnrW7SKyO6fdp9qlHFxw17cs\nZ2rsA0wTCatX5RLUg47yfWshGxr7batnoqpGRsuxpfeJDyR23BQ=\n=QB0+\n-----END PGP SIGNATURE-----",
        "payload": "tree 442cca096d13963fcb7a5cd77f57b2d652a622a6\nparent 03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1\nauthor fanquake <fanquake@gmail.com> 1624428896 +0800\ncommitter fanquake <fanquake@gmail.com> 1624434517 +0800\n\nbuild: set minimum required Boost to 1.64.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf211696b8cd355856995ba821c74e67385b77d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf211696b8cd355856995ba821c74e67385b77d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf211696b8cd355856995ba821c74e67385b77d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dfe636cbb4dddacd4c444826d3a8ade5ed77fd50",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf211696b8cd355856995ba821c74e67385b77d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf211696b8cd355856995ba821c74e67385b77d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2bf211696b8cd355856995ba821c74e67385b77d",
        "patch": "@@ -1415,7 +1415,7 @@ fi\n if test x$use_boost = xyes; then\n \n   dnl Check for Boost headers\n-  AX_BOOST_BASE([1.58.0],[],[AC_MSG_ERROR([Boost is not available!])])\n+  AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n   if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n   fi"
      },
      {
        "sha": "a467759418742d86cb3b68999cd0380d7c6de1e7",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf211696b8cd355856995ba821c74e67385b77d/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf211696b8cd355856995ba821c74e67385b77d/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=2bf211696b8cd355856995ba821c74e67385b77d",
        "patch": "@@ -6,7 +6,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.58.0](https://github.com/bitcoin/bitcoin/pull/19667) | No |  |  |\n+| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n | Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "df2c93321765c7f77935fd92d31722d7b65a53db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjJjOTMzMjE3NjVjN2Y3NzkzNWZkOTJkMzE3MjJkN2I2NWE1M2Ri",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T06:15:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T07:48:42Z"
      },
      "message": "build: remove workaround for Boost and std::atomic",
      "tree": {
        "sha": "d805ea96e89010aee69b52ac0280b88bfbce002d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d805ea96e89010aee69b52ac0280b88bfbce002d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df2c93321765c7f77935fd92d31722d7b65a53db",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDS51oACgkQLuufXMCV\nJsGcoxAAo2iy9xmlurcfc//v1k6leOGkF0+74UdnlseuC/3Qj9i/2JeFWptHisq1\n0UYwhVKjxujom4w+NuqWDqxf/VUnFPzdXHRO8C9VtxNVMxgqMHSGISOj0ISTjFhA\nrqklAjLTiM9I7RNYIK+Xn4EfpwjaD8EooTLi87zv75CJdPAEWqHqmfvYnRGi/rIM\nEgkvFJFv+V54XAiX2fLB3nRlgV1DM0h9JlepEPp9FmbSwE+XHe0TMt9OXYYdkICx\nMDkpnYSOAphsRYFeOsrgddOz6mxISAPynTQKWL8T38cU9Z1YlU4LLVjXjcnYzyDO\nNea9FrG9bWQITwb3hEfiEuBfzhbCTipjzehakskGAULJUm/SZkckKm4JoG2fQB+J\nspqwlmTB/Louj4rlEN5AprxqNAw+YeBVDpvG3Gm2YkGP/oizjbOvS/1CeLlkJ3pF\nOewEyaw59wL7XDU+i5YYvjq+q6bCVci+D/wbXSh0owK/L9Gutkr2Q99yU5z0uwPF\n0BtwZ+or6lewKiwbDcGcd6OTKanDLoi/4IoLkxVqWEK8lUfOqwoimuxtvlhdwZBm\ni/Qm1mtZGl1Rz2lj5qQxMG03DBVMNLGST/8Ul6292D4BRFNtHEWimGeDMakA1ID+\nnjzbX28nmdfQjTOQqIjc7KIFUnFj1kZVxSHtyXqj0SGlEriuaBM=\n=imNn\n-----END PGP SIGNATURE-----",
        "payload": "tree d805ea96e89010aee69b52ac0280b88bfbce002d\nparent 2bf211696b8cd355856995ba821c74e67385b77d\nauthor fanquake <fanquake@gmail.com> 1624428958 +0800\ncommitter fanquake <fanquake@gmail.com> 1624434522 +0800\n\nbuild: remove workaround for Boost and std::atomic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2c93321765c7f77935fd92d31722d7b65a53db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df2c93321765c7f77935fd92d31722d7b65a53db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2c93321765c7f77935fd92d31722d7b65a53db/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bf211696b8cd355856995ba821c74e67385b77d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf211696b8cd355856995ba821c74e67385b77d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf211696b8cd355856995ba821c74e67385b77d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e63abd5de43dcb2f55f4a9437ee551f83c281883",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2c93321765c7f77935fd92d31722d7b65a53db/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2c93321765c7f77935fd92d31722d7b65a53db/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=df2c93321765c7f77935fd92d31722d7b65a53db",
        "patch": "@@ -1438,11 +1438,6 @@ if test x$use_boost = xyes; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n-  dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n-  dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n-  m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n-  BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n-\n   BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n fi\n "
      }
    ]
  },
  {
    "sha": "957f3584277d33b44b9f1618142f743e4083eb5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTdmMzU4NDI3N2QzM2I0NGI5ZjE2MTgxNDJmNzQzZTQwODNlYjVk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T06:43:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-23T07:48:42Z"
      },
      "message": "build: remove check for Boost Process header\n\nNow that we require Boost 1.64.0+, Boost Process will be available.",
      "tree": {
        "sha": "f4d63043bcdb06d0a2ba43bcae01421194623410",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d63043bcdb06d0a2ba43bcae01421194623410"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/957f3584277d33b44b9f1618142f743e4083eb5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDS51oACgkQLuufXMCV\nJsFr9hAAhAzWwcKhVE9vfM4UK9QJZVYHwMFDkeIY13fSe1IeB3RoH0shQecSmp1d\naM47+ulanHj3dGuFzzwnHOpDjI5jg4dgU6wtwW0Yzb2YCOHEK9r8jQwrZyU4jbuu\nJw1fMCxYDoKIh8laG+QTj7apJt2KU+dn+MI41anUG05IPYkO7Yz1U2Tetq5AbmNz\nO8KsXEd6HW9SlzUGjUfO+GJFKKBGpBtXMPjZ/IUpTQrQTNVJ5W+Qo+JaC+X5kPfy\n7WjWJyHGNzBWTU5mEvhfbWc8aRJRj0XJ/22rb21t2lB1Q1RiG/27gvl7nN+AOGZ0\n/ka++G/qrIJ5+ICgDk80IbYVCp25o7vdE66h7X89asCzBTp6aPit3GuIn15j2Umw\nfE5rEX7KcAXw98Il6il3uh1/HpNlYJ4zsZBvqyKvnEobsiGigVcZGlTbOBW9dGCn\ndCSrE6FDLZvwhMfMAJvDdqJiu7jqdaETY4x3bJhiTWYRX9QY+v7rFbs+rZwKVnZC\nNHYUCVtMv6nT3fc45VON8ixdYYDeBoJnIbqgKaKco9FuyJY2ShD2RTGEDVMjO8lv\nDIyCs6SE6LldjItAN89XxkhWfdbca5Sga4ajjeZEkWOZY/wRlwRyCvlG297k1xNz\naDorjcmApDf2BfRu8WAu3MHyJLLep1T2wqRsaI/XPb1eR8C1LhE=\n=L2Wo\n-----END PGP SIGNATURE-----",
        "payload": "tree f4d63043bcdb06d0a2ba43bcae01421194623410\nparent df2c93321765c7f77935fd92d31722d7b65a53db\nauthor fanquake <fanquake@gmail.com> 1624430580 +0800\ncommitter fanquake <fanquake@gmail.com> 1624434522 +0800\n\nbuild: remove check for Boost Process header\n\nNow that we require Boost 1.64.0+, Boost Process will be available.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957f3584277d33b44b9f1618142f743e4083eb5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/957f3584277d33b44b9f1618142f743e4083eb5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957f3584277d33b44b9f1618142f743e4083eb5d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df2c93321765c7f77935fd92d31722d7b65a53db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2c93321765c7f77935fd92d31722d7b65a53db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df2c93321765c7f77935fd92d31722d7b65a53db"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 3,
      "deletions": 12
    },
    "files": [
      {
        "sha": "88f91004afd7cdebd28d1f272cadb644419cedc6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/957f3584277d33b44b9f1618142f743e4083eb5d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/957f3584277d33b44b9f1618142f743e4083eb5d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=957f3584277d33b44b9f1618142f743e4083eb5d",
        "patch": "@@ -1422,25 +1422,16 @@ if test x$use_boost = xyes; then\n   AX_BOOST_SYSTEM\n   AX_BOOST_FILESYSTEM\n \n-  dnl Opt-in to Boost Process if external signer support is requested\n-  if test \"x$use_external_signer\" != xno; then\n-    AC_MSG_CHECKING(for Boost Process)\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/process.hpp>]],\n-     [[ boost::process::child* child = new boost::process::child; delete child; ]])],\n-     [ AC_MSG_RESULT(yes)\n-     AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n-     ],\n-     [ AC_MSG_ERROR([Boost::Process is required for external signer support, but not available!])]\n-    )\n-  fi\n-\n   if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n   BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n fi\n \n+if test \"x$use_external_signer\" != xno; then\n+  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n+fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n dnl Check for reduced exports"
      }
    ]
  },
  {
    "sha": "d6e0d78c31557660274ef53cac912c468eecbe2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmUwZDc4YzMxNTU3NjYwMjc0ZWY1M2NhYzkxMmM0NjhlZWNiZTJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T08:01:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T08:01:56Z"
      },
      "message": "Merge bitcoin/bitcoin#20966: banman: save the banlist in a JSON format on disk\n\nbb719a08db173a753984a04534de6f148b87b17a style: remove () from assert in rpc_setban.py (Vasil Dimov)\n24b10ebda301548b8ff4b0c73fefc367ad5dc22b doc: fix grammar in doc/files.md (Vasil Dimov)\ndd4e957dcdfc971a4a971995ff2db9fb787d23c3 test: ensure banlist can be read from disk after restart (Vasil Dimov)\nd197977ae2076903ed12ab7616a7f93e88be02e1 banman: save the banlist in a JSON format on disk (Vasil Dimov)\n\nPull request description:\n\n  Save the banlist in `banlist.json` instead of `banlist.dat`.\n\n  This makes it possible to store Tor v3 entries in the banlist on disk\n  (and any other addresses that cannot be serialized in addrv1 format).\n\n  Only read `banlist.dat` if it exists and `banlist.json` does not exist (first start after an upgrade).\n\n  Supersedes https://github.com/bitcoin/bitcoin/pull/20904\n  Resolves https://github.com/bitcoin/bitcoin/issues/19748\n\nACKs for top commit:\n  jonatack:\n    Code review re-ACK bb719a08db173a753984a04534de6f148b87b17a per `git range-diff 6a67366 4b52c72 bb719a0`\n  achow101:\n    Code Review ACK bb719a08db173a753984a04534de6f148b87b17a\n\nTree-SHA512: fc135c3a1fe20bcf5d008ce6bea251b4135e56c78bf8f750b4bd8144c095b81ffe165133cdc7e4715875eec7e7c4e13ad9f5d2450b21102af063d7c8abf716b6",
      "tree": {
        "sha": "dbe980b0f2a3fe3ac51e3120ece3ef98dae1e5ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbe980b0f2a3fe3ac51e3120ece3ef98dae1e5ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6e0d78c31557660274ef53cac912c468eecbe2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj7kgv/byeH4441JjHZ4/VGUNr3CR0AKZBqx9pl/d2wt8OzAv9ZLPhoy5bSgfGr\nyB27GYIbReCPp/k3IhVJXSw5z3nMvMrjCt05lAbj9D4UH1VRdmjvH3rjdICxBM6n\nyqDuil+voH1rxol6sg7moKF3xVOQ0X1R8ctb8Yg9Z7gFjdky0JlL4BMuPU/itfXV\nxChIHRjg5KGajfaLCMB+dipWWDHR3pGGgmO8MLhZiXB6AD/Ejk+QOEmtqV303xo7\nRjWlcNQWtgVfevVxFWhnUsUa762ixY8oA62g77fXehVrDVT9dAJF4Gqdyl0YGMZQ\nuOPFFlbWL9HZic3r5Af0wLnXhiV8Ow+y1Q8NATbIGhFf9y5GzW9ms4yx23jmUn1M\nNCoDYGIneXe1uyw9ay66BDDoqCTzbJJPkJsd0XY30fhLUUC3yhzQu8k7WQP7XMwq\n6D88kGt+7FVyhr7aL2rGBdrJALVLE8b3q28NgoJcp8irN+RI0onXSfPyXt8C46nM\nFLJvAl8w\n=WQEj\n-----END PGP SIGNATURE-----",
        "payload": "tree dbe980b0f2a3fe3ac51e3120ece3ef98dae1e5ae\nparent 03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1\nparent bb719a08db173a753984a04534de6f148b87b17a\nauthor MarcoFalke <falke.marco@gmail.com> 1624435310 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624435316 +0200\n\nMerge bitcoin/bitcoin#20966: banman: save the banlist in a JSON format on disk\n\nbb719a08db173a753984a04534de6f148b87b17a style: remove () from assert in rpc_setban.py (Vasil Dimov)\n24b10ebda301548b8ff4b0c73fefc367ad5dc22b doc: fix grammar in doc/files.md (Vasil Dimov)\ndd4e957dcdfc971a4a971995ff2db9fb787d23c3 test: ensure banlist can be read from disk after restart (Vasil Dimov)\nd197977ae2076903ed12ab7616a7f93e88be02e1 banman: save the banlist in a JSON format on disk (Vasil Dimov)\n\nPull request description:\n\n  Save the banlist in `banlist.json` instead of `banlist.dat`.\n\n  This makes it possible to store Tor v3 entries in the banlist on disk\n  (and any other addresses that cannot be serialized in addrv1 format).\n\n  Only read `banlist.dat` if it exists and `banlist.json` does not exist (first start after an upgrade).\n\n  Supersedes https://github.com/bitcoin/bitcoin/pull/20904\n  Resolves https://github.com/bitcoin/bitcoin/issues/19748\n\nACKs for top commit:\n  jonatack:\n    Code review re-ACK bb719a08db173a753984a04534de6f148b87b17a per `git range-diff 6a67366 4b52c72 bb719a0`\n  achow101:\n    Code Review ACK bb719a08db173a753984a04534de6f148b87b17a\n\nTree-SHA512: fc135c3a1fe20bcf5d008ce6bea251b4135e56c78bf8f750b4bd8144c095b81ffe165133cdc7e4715875eec7e7c4e13ad9f5d2450b21102af063d7c8abf716b6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e0d78c31557660274ef53cac912c468eecbe2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e0d78c31557660274ef53cac912c468eecbe2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e0d78c31557660274ef53cac912c468eecbe2d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03aa59a4e58f6cf98bc803699ea4e117bdc2a9f1"
      },
      {
        "sha": "bb719a08db173a753984a04534de6f148b87b17a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb719a08db173a753984a04534de6f148b87b17a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb719a08db173a753984a04534de6f148b87b17a"
      }
    ],
    "stats": {
      "total": 242,
      "additions": 193,
      "deletions": 49
    },
    "files": [
      {
        "sha": "e670d77ae5d24ca10c40182fc759ea18b9fbc50f",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -56,7 +56,8 @@ Subdirectory       | File(s)               | Description\n `indexes/coinstats/db/` | LevelDB database | Coinstats index; *optional*, used if `-coinstatsindex=1`\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)\n `./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup\n-`./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n+`./`               | `banlist.dat`         | Stores the addresses/subnets of banned nodes (deprecated). `bitcoind` or `bitcoin-qt` no longer save the banlist to this file, but read it on startup if `banlist.json` is not present.\n+`./`               | `banlist.json`        | Stores the addresses/subnets of banned nodes.\n `./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n@@ -109,7 +110,7 @@ Subdirectory | File                 | Description\n \n ## Legacy subdirectories and files\n \n-These subdirectories and files are no longer used by the Bitcoin Core:\n+These subdirectories and files are no longer used by Bitcoin Core:\n \n Path           | Description | Repository notes\n ---------------|-------------|-----------------"
      },
      {
        "sha": "b8fd019bab9c335410a50e21ba4abff8a16dceeb",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 4,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -11,13 +11,72 @@\n #include <cstdint>\n #include <hash.h>\n #include <logging/timer.h>\n+#include <netbase.h>\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/settings.h>\n #include <util/system.h>\n \n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n namespace {\n \n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n@@ -119,18 +178,54 @@ bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n }\n } // namespace\n \n-CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))\n+CBanDB::CBanDB(fs::path ban_list_path)\n+    : m_banlist_dat(ban_list_path.string() + \".dat\"),\n+      m_banlist_json(ban_list_path.string() + \".json\")\n {\n }\n \n bool CBanDB::Write(const banmap_t& banSet)\n {\n-    return SerializeFileDB(\"banlist\", m_ban_list_path, banSet, CLIENT_VERSION);\n+    std::vector<std::string> errors;\n+    if (util::WriteSettings(m_banlist_json, {{JSON_KEY, BanMapToJson(banSet)}}, errors)) {\n+        return true;\n+    }\n+\n+    for (const auto& err : errors) {\n+        error(\"%s\", err);\n+    }\n+    return false;\n }\n \n-bool CBanDB::Read(banmap_t& banSet)\n+bool CBanDB::Read(banmap_t& banSet, bool& dirty)\n {\n-    return DeserializeFileDB(m_ban_list_path, banSet, CLIENT_VERSION);\n+    // If the JSON banlist does not exist, then try to read the non-upgraded banlist.dat.\n+    if (!fs::exists(m_banlist_json)) {\n+        // If this succeeds then we need to flush to disk in order to create the JSON banlist.\n+        dirty = true;\n+        return DeserializeFileDB(m_banlist_dat, banSet, CLIENT_VERSION);\n+    }\n+\n+    dirty = false;\n+\n+    std::map<std::string, util::SettingsValue> settings;\n+    std::vector<std::string> errors;\n+\n+    if (!util::ReadSettings(m_banlist_json, settings, errors)) {\n+        for (const auto& err : errors) {\n+            LogPrintf(\"Cannot load banlist %s: %s\\n\", m_banlist_json.string(), err);\n+        }\n+        return false;\n+    }\n+\n+    try {\n+        BanMapFromJson(settings[JSON_KEY], banSet);\n+    } catch (const std::runtime_error& e) {\n+        LogPrintf(\"Cannot parse banlist %s: %s\\n\", m_banlist_json.string(), e.what());\n+        return false;\n+    }\n+\n+    return true;\n }\n \n CAddrDB::CAddrDB()"
      },
      {
        "sha": "399103c99199d661c12e6c21de20cfd563a2085b",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -9,6 +9,7 @@\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <serialize.h>\n+#include <univalue.h>\n \n #include <string>\n #include <vector>\n@@ -36,6 +37,13 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n     SERIALIZE_METHODS(CBanEntry, obj)\n     {\n         uint8_t ban_reason = 2; //! For backward compatibility\n@@ -48,6 +56,12 @@ class CBanEntry\n         nCreateTime = 0;\n         nBanUntil = 0;\n     }\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n };\n \n /** Access to the (IP) address database (peers.dat) */\n@@ -62,15 +76,30 @@ class CAddrDB\n     static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n-/** Access to the banlist database (banlist.dat) */\n+/** Access to the banlist databases (banlist.json and banlist.dat) */\n class CBanDB\n {\n private:\n-    const fs::path m_ban_list_path;\n+    /**\n+     * JSON key under which the data is stored in the json database.\n+     */\n+    static constexpr const char* JSON_KEY = \"banned_nets\";\n+\n+    const fs::path m_banlist_dat;\n+    const fs::path m_banlist_json;\n public:\n     explicit CBanDB(fs::path ban_list_path);\n     bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n+\n+    /**\n+     * Read the banlist from disk.\n+     * @param[out] banSet The loaded list. Set if `true` is returned, otherwise it is left\n+     * in an undefined state.\n+     * @param[out] dirty Indicates whether the loaded list needs flushing to disk. Set if\n+     * `true` is returned, otherwise it is left in an undefined state.\n+     * @return true on success\n+     */\n+    bool Read(banmap_t& banSet, bool& dirty);\n };\n \n /**"
      },
      {
        "sha": "d2437e67338cee2f592d85ea92fe2c7786992144",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -18,20 +18,18 @@ BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t\n     if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist\u2026\").translated);\n \n     int64_t n_start = GetTimeMillis();\n-    m_is_dirty = false;\n-    banmap_t banmap;\n-    if (m_ban_db.Read(banmap)) {\n-        SetBanned(banmap);        // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned();            // sweep out unused entries\n+    if (m_ban_db.Read(m_banned, m_is_dirty)) {\n+        SweepBanned(); // sweep out unused entries\n \n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            m_banned.size(), GetTimeMillis() - n_start);\n+        LogPrint(BCLog::NET, \"Loaded %d banned node addresses/subnets  %dms\\n\", m_banned.size(),\n+                 GetTimeMillis() - n_start);\n     } else {\n-        LogPrintf(\"Recreating banlist.dat\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n+        LogPrintf(\"Recreating the banlist database\\n\");\n+        m_banned = {};\n+        m_is_dirty = true;\n     }\n+\n+    DumpBanlist();\n }\n \n BanMan::~BanMan()\n@@ -53,8 +51,8 @@ void BanMan::DumpBanlist()\n         SetBannedSetDirty(false);\n     }\n \n-    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - n_start);\n+    LogPrint(BCLog::NET, \"Flushed %d banned node addresses/subnets to disk  %dms\\n\", banmap.size(),\n+             GetTimeMillis() - n_start);\n }\n \n void BanMan::ClearBanned()\n@@ -167,13 +165,6 @@ void BanMan::GetBanned(banmap_t& banmap)\n     banmap = m_banned; //create a thread safe copy\n }\n \n-void BanMan::SetBanned(const banmap_t& banmap)\n-{\n-    LOCK(m_cs_banned);\n-    m_banned = banmap;\n-    m_is_dirty = true;\n-}\n-\n void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n@@ -188,7 +179,7 @@ void BanMan::SweepBanned()\n                 m_banned.erase(it++);\n                 m_is_dirty = true;\n                 notify_ui = true;\n-                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+                LogPrint(BCLog::NET, \"Removed banned node address/subnet: %s\\n\", sub_net.ToString());\n             } else\n                 ++it;\n         }"
      },
      {
        "sha": "8c75d4037e5fbd17b9174849a190798b0c4710e9",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -17,7 +17,8 @@\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n-// How often to dump addresses to banlist.dat\n+\n+/// How often to dump banned addresses/subnets to disk.\n static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n@@ -30,7 +31,7 @@ class CSubNet;\n // If an address or subnet is banned, we never accept incoming connections from\n // it and never create outgoing connections to it. We won't gossip its address\n // to other peers in addr messages. Banned addresses and subnets are stored to\n-// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// disk on shutdown and reloaded on startup. Banning can be used to\n // prevent connections with spy nodes or other griefers.\n //\n // 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n@@ -79,7 +80,6 @@ class BanMan\n     void DumpBanlist();\n \n private:\n-    void SetBanned(const banmap_t& banmap);\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     void SetBannedSetDirty(bool dirty = true);"
      },
      {
        "sha": "da0447ca79ce2bd61fcc09921723561260f42a42",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -1161,7 +1161,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n "
      },
      {
        "sha": "5668ead1fbc3f4620ba9551e9eec3e195eb847d4",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n@@ -285,7 +285,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);"
      },
      {
        "sha": "cca41e79aec1cdb23d909087c24944b11c02e8a9",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -9,8 +9,10 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <test/util/setup_common.h>\n+#include <util/readwritefile.h>\n #include <util/system.h>\n \n+#include <cassert>\n #include <cstdint>\n #include <limits>\n #include <string>\n@@ -38,8 +40,20 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     int limit_max_ops{300};\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    const fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist.dat\";\n-    fs::remove(banlist_file);\n+    fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n+\n+    const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n+    if (start_with_corrupted_banlist) {\n+        const std::string sfx{fuzzed_data_provider.ConsumeBool() ? \".dat\" : \".json\"};\n+        assert(WriteBinaryFile(banlist_file.string() + sfx,\n+                               fuzzed_data_provider.ConsumeRandomLengthString()));\n+    } else {\n+        const bool force_read_and_write_to_err{fuzzed_data_provider.ConsumeBool()};\n+        if (force_read_and_write_to_err) {\n+            banlist_file = fs::path{\"path\"} / \"to\" / \"inaccessible\" / \"fuzzed_banlist\";\n+        }\n+    }\n+\n     {\n         BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n@@ -80,5 +94,6 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                 });\n         }\n     }\n-    fs::remove(banlist_file);\n+    fs::remove(banlist_file.string() + \".dat\");\n+    fs::remove(banlist_file.string() + \".json\");\n }"
      },
      {
        "sha": "f71d9148b65cb42dd76502f3127b290ab27aea90",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -196,7 +196,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     m_node.addrman = std::make_unique<CAddrMan>();\n-    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,"
      },
      {
        "sha": "36873f964b3e58cf829306bf7fb281c06836ba2d",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e0d78c31557660274ef53cac912c468eecbe2d/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=d6e0d78c31557660274ef53cac912c468eecbe2d",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         # Node 0 get banned by Node 1\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n@@ -36,27 +36,40 @@ def run_test(self):\n         self.restart_node(1, ['-whitelist=127.0.0.1'])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert('noban' in peerinfo['permissions'])\n+        assert \"noban\" in peerinfo[\"permissions\"]\n \n         # If we remove the ban, Node 0 should be able to reconnect even without noban permission\n         self.nodes[1].setban(\"127.0.0.1\", \"remove\")\n         self.restart_node(1, [])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n         node = self.nodes[1]\n         tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n         ip_addr = \"1.2.3.4\"\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n         node.setban(tor_addr, \"add\")\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n+        self.log.info(\"Test the ban list is preserved through restart\")\n+\n+        self.restart_node(1)\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n         node.setban(tor_addr, \"remove\")\n-        assert(not self.is_banned(self.nodes[1], tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(self.nodes[1], tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n+        self.restart_node(1)\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n \n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWQ0ODdiY2ZhODI5YjdlMjBhMGFhZmNiOWEyMWViNTVkNWQxNTI4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-15T12:08:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-23T10:21:38Z"
      },
      "message": "doc: add basic I2P documentation",
      "tree": {
        "sha": "1fa5a42d9516c93288b6a7435c3a6d7b223229ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fa5a42d9516c93288b6a7435c3a6d7b223229ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDTCzIACgkQVN8G9ktV\ny7/0Kh/+LZuCH0S2f0JzK9QsfvEgBcyQ4gdwmiLYPqgYlmoaQnzCHMhYPoCdkZk2\nzdFx4bVXg+FhDm/Fj1uakZyus6g5rk60nhxUXp2oTZEfPuKcEDYbmxX/BcmQrUs3\nAzly0rIDdhYwJXoRgwEjtazPu/7W3eTYtJ+zbH0YdWsVbS3x9aUW+0aeB+McIiik\neRVFkoJ9kHMsXIfgTOaBD7XHl3ETmxBWxOP9ciH0VqJqH1wnd7wh56XwgxgdP/8Y\ntj+a2OKHmKtRY+PLPkZ/K1TPtCX/Ua4dl0U57kmNfu6ypsczpx2ASahxsX1vy3Bh\npDn3Fj+YZ0/IU6cDDsLDg8MpJZVUh5jE1jdUAwCY2IxLNWF/99a7BKbEZKoxssci\nvAuXmhY0z76u0JTWyV8moLR4fg3f7jge2tFkQaXN/TGwrivm7UWHoRyZWxfR9SX9\ni+PqBudfoRK7XUZWtAuXwDdWTxWriOYbKFnSm/j1MdfYegbAFx5lASmajf/T8VTk\n/Ej0u1YWxqyPqxYuDts/3MHNLFDjK+n1MNpNNIEnyV3Prc9wnBOAq03z0eHrf2U2\nVi79PtG5dynBtPDQSP2ufPPCxOfoKkWM2nTYP8HbwSTQfHj39CLczn56TMklxIft\n5pV/OJGO1f9lNGhSBw7+CnOfuoowxN1gdwEr5NoYIopmNZzaF3R/aO6EZM+xXRRU\n3tvx/PVM7ZlqQhQk2c2F5UkvLI+36KIYDVj8+5De//bfhB7MQOKWeV7JUULRPZmc\nkfOB+5AwWs94z68aT1jyLfyc33erAabtBZ77wElB15KDB/vsaFWU3JAjh6L7LfuY\ngXX7fAKbasX7cv01J1kyDxn1LG/7wVeazjktmysYnud2Sw6x8O72izNAxnmu8TVs\nF8PsZzMfG/Gd+Y9Io8muqQGotGqVBUeutI4QzXhJy/Rcp1YPJJ4j30R2hUYcSX2B\nC4dsXA5kq7uMy8EJ+EoLu7cO33w6MjSERhIu8fd9ynC+4vFN9wCII0U7pz/Yu8Oi\nAxB/jFNztoJTN2nDnK+iisdCeQBLRWcIGtLTFubv+mMDMq16tvsKpRnCjrdkRNHL\nCx3Yjb9C5z3QYdHveJy1My20K3AasWFfP/XumtNRKFDTQ3NAHn1PhNk+ejx/xfPB\nEDAmSHSDOZJ2FvreqRFIBq1SUDLMupDrsbRpRVgYP9nK+TRPYkyRvfNPMLAUkQ5W\nhfzU0G3MTTU7bDg9jL/21OUi+RnXWs/2tC9FSUq8IGgojcgyCiVS0NRGtdDJDbK6\nLe4KBPDgZlN/XEFWuK78xlT84yjN6cbkrkCxR2B8Hatt3i8BWfKqHL2xM74Fjm3p\nN96rQeRf2yKHxmLETgFxagXs/kvfUQ==\n=T5NN\n-----END PGP SIGNATURE-----",
        "payload": "tree 1fa5a42d9516c93288b6a7435c3a6d7b223229ea\nparent eb63b1db2c4d2877a10fce391cf2c0c60b6210f3\nauthor Vasil Dimov <vd@FreeBSD.org> 1623758915 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624443698 +0200\n\ndoc: add basic I2P documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb63b1db2c4d2877a10fce391cf2c0c60b6210f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb63b1db2c4d2877a10fce391cf2c0c60b6210f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb63b1db2c4d2877a10fce391cf2c0c60b6210f3"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e45460734b0cfc470293a8be1a808a25fa35c6a0",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
        "patch": "@@ -76,6 +76,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n+- [I2P Support](i2p.md)\n - [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)"
      },
      {
        "sha": "8b4607208a8ef4337d1141854b3cd01173bbaaa5",
        "filename": "doc/i2p.md",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
        "patch": "@@ -0,0 +1,72 @@\n+# I2P support in Bitcoin Core\n+\n+It is possible to run Bitcoin Core as an\n+[I2P (Invisible Internet Project)](https://en.wikipedia.org/wiki/I2P)\n+service and connect to such services.\n+\n+This [glossary](https://geti2p.net/en/about/glossary) may be useful to get\n+started with I2P terminology.\n+\n+## Run Bitcoin Core with an I2P router (proxy)\n+\n+A running I2P router (proxy) with [SAM](https://geti2p.net/en/docs/api/samv3)\n+enabled is required (there is an [official one](https://geti2p.net) and\n+[a few alternatives](https://en.wikipedia.org/wiki/I2P#Routers)). Notice the IP\n+address and port the SAM proxy is listening to; usually, it is\n+`127.0.0.1:7656`. Once it is up and running with SAM enabled, use the following\n+Bitcoin Core options:\n+\n+```\n+-i2psam=<ip:port>\n+     I2P SAM proxy to reach I2P peers and accept I2P connections (default:\n+     none)\n+\n+-i2pacceptincoming\n+     If set and -i2psam is also set then incoming I2P connections are\n+     accepted via the SAM proxy. If this is not set but -i2psam is set\n+     then only outgoing connections will be made to the I2P network.\n+     Ignored if -i2psam is not set. Listening for incoming I2P\n+     connections is done through the SAM proxy, not by binding to a\n+     local address and port (default: 1)\n+```\n+\n+In a typical situation, this suffices:\n+\n+```\n+bitcoind -i2psam=127.0.0.1:7656\n+```\n+\n+The first time Bitcoin Core connects to the I2P router, its I2P address (and\n+corresponding private key) will be automatically generated and saved in a file\n+named `i2p_private_key` in the Bitcoin Core data directory.\n+\n+## Additional configuration options related to I2P\n+\n+You may set the `debug=i2p` config logging option to have additional\n+information in the debug log about your I2P configuration and connections. Run\n+`bitcoin-cli help logging` for more information.\n+\n+It is possible to restrict outgoing connections in the usual way with\n+`onlynet=i2p`. I2P support was added to Bitcoin Core in version 22.0 (mid 2021)\n+and there may be fewer I2P peers than Tor or IP ones. Therefore, using\n+`onlynet=i2p` alone (without other `onlynet=`) may make a node more susceptible\n+to [Sybil attacks](https://en.bitcoin.it/wiki/Weaknesses#Sybil_attack). Use\n+`bitcoin-cli -addrinfo` to see the number of I2P addresses known to your node.\n+\n+## I2P related information in Bitcoin Core\n+\n+There are several ways to see your I2P address in Bitcoin Core:\n+- in the debug log (grep for `AddLocal`, the I2P address ends in `.b32.i2p`)\n+- in the output of the `getnetworkinfo` RPC in the \"localaddresses\" section\n+- in the output of `bitcoin-cli -netinfo` peer connections dashboard\n+\n+To see which I2P peers your node is connected to, use `bitcoin-cli -netinfo 4`\n+or the `getpeerinfo` RPC (e.g. `bitcoin-cli getpeerinfo`).\n+\n+To see which I2P addresses your node knows, use the `getnodeaddresses 0 i2p`\n+RPC.\n+\n+## Compatibility\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3) protocol\n+to connect to the I2P network. Any I2P router that supports it can be used."
      }
    ]
  },
  {
    "sha": "78cdab1ad2e85176784e4e1230622f42acd20149",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGNkYWIxYWQyZTg1MTc2Nzg0ZTRlMTIzMDYyMmY0MmFjZDIwMTQ5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-23T10:09:22Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-23T10:21:39Z"
      },
      "message": "doc: sort entries in doc/README.md#Miscellaneous alphabetically",
      "tree": {
        "sha": "72253da7fa9997a99655e6218b55df57ad3667d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72253da7fa9997a99655e6218b55df57ad3667d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78cdab1ad2e85176784e4e1230622f42acd20149",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDTCzMACgkQVN8G9ktV\ny7/wRh//emPycnQO+rwEpCdgnIZD0544+ETAD1JCElpJ4g2eGIb58CieAl7WCc0o\nI/4PwLi0NA23PgI0sI4FoAnv8kOe0QpNyLgeZiO67Vqfy1AuhSRRFiVIjDbnb++w\nfmpHmY6iJZxjOVXDOXLFez0aBnEV5rGpbVf5akxaBcnkqst7IrPE+V0UbS/L095z\nWQQMxR/1Tud3fC1fSogxTKf3Pc3jzzRA1LhBXtgH+BkVOCZaEcxL2lew/q0zJcNk\ndsLU8m0JEDnFFiDLDQRNYOII4l2VwhF1hTJyq5FEr3OURE5+qUYP8b7j7wx+QQ/o\ntP3ikJh43vhCSDaiJgYKaD3gZRmh9r5hehPkuSXHvNYLXifRx959Z37qm+lJs1do\njhwYist7T0v0Bji4VZVIm/3NBUJgaLeOPcVMWHtPVHvVIMGm2z9YlbEFki2F9S53\nO6aM1XR7gjfy/jhVXm5me6Oals9t4QrDnNjHNZKefFsbYiEOZ9fVSYZUlHbH4JWO\nL9dDWgVo+XhcAuzjPdGLBjwDtaC+f/VkogSl+WozC+fTPkG30ngk3s7/HHcm10Gi\nYJVbgfPHjeAMW1bTz/qQZNo75d/YF8Hw7HmQ+R3I/vQgfIfBKH3O6AgOG2u+Seg+\nNoS9W2jfvOqFOyvTtSNmOLjQM4kxoF9aCApApkb90ij504mbFoOM9o2C9QD2hTme\nf+muV350PTWaZTd13/zbDtBkbew++zwvSspZM8jQ0p7WRmus9RACs8sgc9xCo+/G\nn2l2k/g3DSZ4JFnpV2GEV/GeAv3eh9nEljOtHdvxFeRX7zRzV/V1EgmQNNzXl216\nEyQzHmaUfVzL+YP1B/xTPvu8apHPmQ5h208go5m+augZubi9YYGctOPd/TfvclGD\ncdnC5XiPM6YIYEWWRtwZ3X0jrp0MtqUYCv3KEgn7eBG4U25kRsDU1BmYaua3+v0g\n927PgEl6bIfTt5ODb6EHZ+IiMDC97YY9clI39o8ITWCORbql1zTc8oLOqeHt1Iq4\nAjLy5w3WzTJcg4PDSKHGBb1NoyOUqI9RNoLgJEVwAEuFsjCvqv6kVKdraETxC35w\nFgnTHRMQP7o602k29XG/rTDf+zQX9S881PxYqj6qjYwlt9G02HjaMKVJYhf5usHe\nmmGgAWPQxNj5wywroOfTlv8/bSLsG+bVm113fxQ6VjNJI6oCVnpAEi48iw1/rn9y\n2xFsdnZrTUxB60+iwJFTIFoBlvrveICjC/cfD+UyOl3I8Z7BINTQFmobrqOsW2ia\n/HaQxjGB9HMYAEZ08U+au/H9wrqaZ9quIBPHEcFVPdhWJAIQmgtRByBM7aKnfmiN\nxLVA/Xp2mFHp57K4YqHxUUpdgjGT+Q==\n=d67N\n-----END PGP SIGNATURE-----",
        "payload": "tree 72253da7fa9997a99655e6218b55df57ad3667d0\nparent cad487bcfa829b7e20a0aafcb9a21eb55d5d1528\nauthor Vasil Dimov <vd@FreeBSD.org> 1624442962 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624443699 +0200\n\ndoc: sort entries in doc/README.md#Miscellaneous alphabetically\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78cdab1ad2e85176784e4e1230622f42acd20149",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78cdab1ad2e85176784e4e1230622f42acd20149",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78cdab1ad2e85176784e4e1230622f42acd20149/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cad487bcfa829b7e20a0aafcb9a21eb55d5d1528"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45e7983038bc7c36c696a79d011e3ba21c9d2a45",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78cdab1ad2e85176784e4e1230622f42acd20149/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78cdab1ad2e85176784e4e1230622f42acd20149/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=78cdab1ad2e85176784e4e1230622f42acd20149",
        "patch": "@@ -77,12 +77,12 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n - [I2P Support](i2p.md)\n+- [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [PSBT support](psbt.md)\n - [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n-- [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n-- [PSBT support](psbt.md)\n \n License\n ---------------------"
      }
    ]
  },
  {
    "sha": "567670bec5ecf9bc252e91370382be53fd81ccee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Njc2NzBiZWM1ZWNmOWJjMjUyZTkxMzcwMzgyYmU1M2ZkODFjY2Vl",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-06-23T09:59:15Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-06-23T10:42:30Z"
      },
      "message": "Merge bitcoin/bitcoin#22166: Add support for inferring tr() descriptors\n\nd637a9b397816e34652d0c4d383308e39770737a Taproot descriptor inference (Pieter Wuille)\nc7388e5ada394b7fe94d6263fb02e9dd28ab367e Report address as solvable based on inferred descriptor (Pieter Wuille)\n29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905 consensus refactor: extract ComputeTapleafHash, ComputeTaprootMerkleRoot (Pieter Wuille)\n\nPull request description:\n\n  Includes:\n  * First commit from #21365, adding TaprootSpendData in SigningProvider\n  * A refactor to expose ComputeTapleafHash and ComputeTaprootMerkleRoot from script/interpreter\n  * A tiny change to make `getaddressinfo` report tr() descriptors as solvable (so that inferred descriptors are shown), despite not having signing code for them.\n  * Logic to infer the script tree back from TaprootSpendData, and then use that to infer descriptors.\n\nACKs for top commit:\n  achow101:\n    re-ACK d637a9b397816e34652d0c4d383308e39770737a\n  Sjors:\n    re-utACK d637a9b\n  meshcollider:\n    Code review ACK d637a9b397816e34652d0c4d383308e39770737a\n\nTree-SHA512: 5ab9b95da662382d8549004be4a1297a577d7caca6b068f875c7c9343723931d03fa9cbf133de11f83b74e4851490ce820fb80413c77b9e8495a5f812e505d86",
      "tree": {
        "sha": "b3531b776fb20cd60bcb357e4b0699d6073c1ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3531b776fb20cd60bcb357e4b0699d6073c1ae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/567670bec5ecf9bc252e91370382be53fd81ccee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAmDTEBYACgkQ0wARbhyH\nWj35jw//a1yoUsqpnqlc2LPRY0T9He1BG5kCGf+ztcquvB/XfQCL7q+G6qlmPOyO\n+t9M/KZ811I3auoJt8bRlPEzB5Le5IoLiYp0XiGVGTQ8vGAuKa7OTLUy6iZUOH8A\nVyzJg6L7rWv89V2N47a9MNxrEAVAuF2M4artlNPOkv8zqzDTKzaBe6RlgQUCwodj\nsylPHlePsmObnNxjldRoAwfTf1OoC4E6EhM7csZRX70+zG/ZEddbd6LHQhhq/HJu\nSV0DXv7pX4/1hXBNnzOUqX/mGZkTaJTtZ9WTzSC45n8g/Dv2iRpGrXrqcre4dl8N\ne5c5I/MyrXYt/leBJM4dIOvA57TiA+3m1f1i0eGiOdneYrOIhgAkkfjOM+rH2U8l\nwN4FhijYjnPwbbXIPUBClTPyLIVfb1HyEzWGdHm5fnisEI/lyNF9R9PP/t+MSJZ6\n1nrJ+Abr0or34oaYEyycTT65UFPySx1gFrUlEua7nflqF5whMxZTHDayzskuJN6K\nXD+7PstZi48jp4rC9O0/SAe+Btki2URW9KiK0ylBBHaHR9X1A2TFOcC5w0j/DXE0\nlPGZ9QYC7KUNqKFJmtxhnD1PoqvHEmIU81e2WULw9V2pQ+xQhSV7QZ8n/MHtWHJ3\n9e8fmIUeZykr3zKpfb897qdK/pK7EuwKu2ss2Ek5bQWdWFAASug=\n=63mm\n-----END PGP SIGNATURE-----",
        "payload": "tree b3531b776fb20cd60bcb357e4b0699d6073c1ae3\nparent d6e0d78c31557660274ef53cac912c468eecbe2d\nparent d637a9b397816e34652d0c4d383308e39770737a\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1624442355 +1200\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1624444950 +1200\n\nMerge bitcoin/bitcoin#22166: Add support for inferring tr() descriptors\n\nd637a9b397816e34652d0c4d383308e39770737a Taproot descriptor inference (Pieter Wuille)\nc7388e5ada394b7fe94d6263fb02e9dd28ab367e Report address as solvable based on inferred descriptor (Pieter Wuille)\n29e5dd1a5b9a1879e6c3c7e153b2e6f33a79e905 consensus refactor: extract ComputeTapleafHash, ComputeTaprootMerkleRoot (Pieter Wuille)\n\nPull request description:\n\n  Includes:\n  * First commit from #21365, adding TaprootSpendData in SigningProvider\n  * A refactor to expose ComputeTapleafHash and ComputeTaprootMerkleRoot from script/interpreter\n  * A tiny change to make `getaddressinfo` report tr() descriptors as solvable (so that inferred descriptors are shown), despite not having signing code for them.\n  * Logic to infer the script tree back from TaprootSpendData, and then use that to infer descriptors.\n\nACKs for top commit:\n  achow101:\n    re-ACK d637a9b397816e34652d0c4d383308e39770737a\n  Sjors:\n    re-utACK d637a9b\n  meshcollider:\n    Code review ACK d637a9b397816e34652d0c4d383308e39770737a\n\nTree-SHA512: 5ab9b95da662382d8549004be4a1297a577d7caca6b068f875c7c9343723931d03fa9cbf133de11f83b74e4851490ce820fb80413c77b9e8495a5f812e505d86\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567670bec5ecf9bc252e91370382be53fd81ccee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/567670bec5ecf9bc252e91370382be53fd81ccee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567670bec5ecf9bc252e91370382be53fd81ccee/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6e0d78c31557660274ef53cac912c468eecbe2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e0d78c31557660274ef53cac912c468eecbe2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e0d78c31557660274ef53cac912c468eecbe2d"
      },
      {
        "sha": "d637a9b397816e34652d0c4d383308e39770737a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d637a9b397816e34652d0c4d383308e39770737a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d637a9b397816e34652d0c4d383308e39770737a"
      }
    ],
    "stats": {
      "total": 299,
      "additions": 275,
      "deletions": 24
    },
    "files": [
      {
        "sha": "be97a618f3e06a1bd3a976f2e69059aa9ee343f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 9,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -244,7 +244,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     bool m_xonly;\n \n public:\n-    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly = false) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n+    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         key = m_pubkey;\n@@ -931,7 +931,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, false);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n@@ -952,7 +952,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -1221,42 +1221,66 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, false);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n         return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n \n+std::unique_ptr<PubkeyProvider> InferXOnlyPubkey(const XOnlyPubKey& xkey, ParseScriptContext ctx, const SigningProvider& provider)\n+{\n+    unsigned char full_key[CPubKey::COMPRESSED_SIZE] = {0x02};\n+    std::copy(xkey.begin(), xkey.end(), full_key + 1);\n+    CPubKey pubkey(full_key);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, true);\n+    KeyOriginInfo info;\n+    if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+        return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+    } else {\n+        full_key[0] = 0x03;\n+        pubkey = CPubKey(full_key);\n+        if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+            return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+        }\n+    }\n+    return key_provider;\n+}\n+\n std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)\n {\n+    if (ctx == ParseScriptContext::P2TR && script.size() == 34 && script[0] == 32 && script[33] == OP_CHECKSIG) {\n+        XOnlyPubKey key{Span<const unsigned char>{script.data() + 1, script.data() + 33}};\n+        return std::make_unique<PKDescriptor>(InferXOnlyPubkey(key, ctx, provider));\n+    }\n+\n     std::vector<std::vector<unsigned char>> data;\n     TxoutType txntype = Solver(script, data);\n \n-    if (txntype == TxoutType::PUBKEY) {\n+    if (txntype == TxoutType::PUBKEY && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         CPubKey pubkey(data[0]);\n         if (pubkey.IsValid()) {\n             return std::make_unique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::PUBKEYHASH) {\n+    if (txntype == TxoutType::PUBKEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_KEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::MULTISIG) {\n+    if (txntype == TxoutType::MULTISIG && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n         for (size_t i = 1; i + 1 < data.size(); ++i) {\n             CPubKey pubkey(data[i]);\n@@ -1273,7 +1297,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<SHDescriptor>(std::move(sub));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         CScriptID scriptid;\n         CRIPEMD160().Write(data[0].data(), data[0].size()).Finalize(scriptid.begin());\n         CScript subscript;\n@@ -1282,6 +1306,40 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<WSHDescriptor>(std::move(sub));\n         }\n     }\n+    if (txntype == TxoutType::WITNESS_V1_TAPROOT && ctx == ParseScriptContext::TOP) {\n+        // Extract x-only pubkey from output.\n+        XOnlyPubKey pubkey;\n+        std::copy(data[0].begin(), data[0].end(), pubkey.begin());\n+        // Request spending data.\n+        TaprootSpendData tap;\n+        if (provider.GetTaprootSpendData(pubkey, tap)) {\n+            // If found, convert it back to tree form.\n+            auto tree = InferTaprootTree(tap, pubkey);\n+            if (tree) {\n+                // If that works, try to infer subdescriptors for all leaves.\n+                bool ok = true;\n+                std::vector<std::unique_ptr<DescriptorImpl>> subscripts; //!< list of script subexpressions\n+                std::vector<int> depths; //!< depth in the tree of each subexpression (same length subscripts)\n+                for (const auto& [depth, script, leaf_ver] : *tree) {\n+                    std::unique_ptr<DescriptorImpl> subdesc;\n+                    if (leaf_ver == TAPROOT_LEAF_TAPSCRIPT) {\n+                        subdesc = InferScript(script, ParseScriptContext::P2TR, provider);\n+                    }\n+                    if (!subdesc) {\n+                        ok = false;\n+                        break;\n+                    } else {\n+                        subscripts.push_back(std::move(subdesc));\n+                        depths.push_back(depth);\n+                    }\n+                }\n+                if (ok) {\n+                    auto key = InferXOnlyPubkey(tap.internal_key, ParseScriptContext::P2TR, provider);\n+                    return std::make_unique<TRDescriptor>(std::move(key), std::move(subscripts), std::move(depths));\n+                }\n+            }\n+        }\n+    }\n \n     CTxDestination dest;\n     if (ExtractDestination(script, dest)) {"
      },
      {
        "sha": "8cebbc5d1088bd1e96aeaa59162fe627b9ab2b88",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -1847,16 +1847,14 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n-static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script)\n+{\n+    return (CHashWriter(HASHER_TAPLEAF) << leaf_version << script).GetSHA256();\n+}\n+\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n-    //! The internal pubkey (x-only, so no Y coordinate parity).\n-    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n-    //! The output pubkey (taken from the scriptPubKey).\n-    const XOnlyPubKey q{uint256(program)};\n-    // Compute the tapleaf hash.\n-    tapleaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n-    // Compute the Merkle root from the leaf and the provided path.\n     uint256 k = tapleaf_hash;\n     for (int i = 0; i < path_len; ++i) {\n         CHashWriter ss_branch{HASHER_TAPBRANCH};\n@@ -1868,8 +1866,21 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         }\n         k = ss_branch.GetSHA256();\n     }\n+    return k;\n+}\n+\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const uint256& tapleaf_hash)\n+{\n+    assert(control.size() >= TAPROOT_CONTROL_BASE_SIZE);\n+    assert(program.size() >= uint256::size());\n+    //! The internal pubkey (x-only, so no Y coordinate parity).\n+    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    //! The output pubkey (taken from the scriptPubKey).\n+    const XOnlyPubKey q{uint256(program)};\n+    // Compute the Merkle root from the leaf and the provided path.\n+    const uint256 merkle_root = ComputeTaprootMerkleRoot(control, tapleaf_hash);\n     // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n-    return q.CheckTapTweak(p, k, control[0] & 1);\n+    return q.CheckTapTweak(p, merkle_root, control[0] & 1);\n }\n \n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n@@ -1929,7 +1940,8 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n                 return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n             }\n-            if (!VerifyTaprootCommitment(control, program, exec_script, execdata.m_tapleaf_hash)) {\n+            execdata.m_tapleaf_hash = ComputeTapleafHash(control[0] & TAPROOT_LEAF_MASK, exec_script);\n+            if (!VerifyTaprootCommitment(control, program, execdata.m_tapleaf_hash)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n             execdata.m_tapleaf_hash_init = true;"
      },
      {
        "sha": "034c937b99a5062921adacd08e5c3bf0159266ab",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -317,6 +317,12 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n     }\n };\n \n+/** Compute the BIP341 tapleaf hash from leaf version & script. */\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script);\n+/** Compute the BIP341 taproot script tree Merkle root from control block and leaf hash.\n+ *  Requires control block to have valid length (33 + k*32, with k in {0,1,..,128}). */\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash);\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);"
      },
      {
        "sha": "b3dd5442fca3c6f986d9db290e7bb886285f9659",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -520,3 +520,138 @@ TaprootSpendData TaprootBuilder::GetSpendData() const\n     }\n     return spd;\n }\n+\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output)\n+{\n+    // Verify that the output matches the assumed Merkle root and internal key.\n+    auto tweak = spenddata.internal_key.CreateTapTweak(spenddata.merkle_root.IsNull() ? nullptr : &spenddata.merkle_root);\n+    if (!tweak || tweak->first != output) return std::nullopt;\n+    // If the Merkle root is 0, the tree is empty, and we're done.\n+    std::vector<std::tuple<int, CScript, int>> ret;\n+    if (spenddata.merkle_root.IsNull()) return ret;\n+\n+    /** Data structure to represent the nodes of the tree we're going to be build. */\n+    struct TreeNode {\n+        /** Hash of this none, if known; 0 otherwise. */\n+        uint256 hash;\n+        /** The left and right subtrees (note that their order is irrelevant). */\n+        std::unique_ptr<TreeNode> sub[2];\n+        /** If this is known to be a leaf node, a pointer to the (script, leaf_ver) pair.\n+         *  nullptr otherwise. */\n+        const std::pair<CScript, int>* leaf = nullptr;\n+        /** Whether or not this node has been explored (is known to be a leaf, or known to have children). */\n+        bool explored = false;\n+        /** Whether or not this node is an inner node (unknown until explored = true). */\n+        bool inner;\n+        /** Whether or not we have produced output for this subtree. */\n+        bool done = false;\n+    };\n+\n+    // Build tree from the provides branches.\n+    TreeNode root;\n+    root.hash = spenddata.merkle_root;\n+    for (const auto& [key, control_blocks] : spenddata.scripts) {\n+        const auto& [script, leaf_ver] = key;\n+        for (const auto& control : control_blocks) {\n+            // Skip script records with nonsensical leaf version.\n+            if (leaf_ver < 0 || leaf_ver >= 0x100 || leaf_ver & 1) continue;\n+            // Skip script records with invalid control block sizes.\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE ||\n+                ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) continue;\n+            // Skip script records that don't match the control block.\n+            if ((control[0] & TAPROOT_LEAF_MASK) != leaf_ver) continue;\n+            // Skip script records that don't match the provided Merkle root.\n+            const uint256 leaf_hash = ComputeTapleafHash(leaf_ver, script);\n+            const uint256 merkle_root = ComputeTaprootMerkleRoot(control, leaf_hash);\n+            if (merkle_root != spenddata.merkle_root) continue;\n+\n+            TreeNode* node = &root;\n+            size_t levels = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+            for (size_t depth = 0; depth < levels; ++depth) {\n+                // Can't descend into a node which we already know is a leaf.\n+                if (node->explored && !node->inner) return std::nullopt;\n+\n+                // Extract partner hash from Merkle branch in control block.\n+                uint256 hash;\n+                std::copy(control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - 1 - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          hash.begin());\n+\n+                if (node->sub[0]) {\n+                    // Descend into the existing left or right branch.\n+                    bool desc = false;\n+                    for (int i = 0; i < 2; ++i) {\n+                        if (node->sub[i]->hash == hash || (node->sub[i]->hash.IsNull() && node->sub[1-i]->hash != hash)) {\n+                            node->sub[i]->hash = hash;\n+                            node = &*node->sub[1-i];\n+                            desc = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!desc) return std::nullopt; // This probably requires a hash collision to hit.\n+                } else {\n+                    // We're in an unexplored node. Create subtrees and descend.\n+                    node->explored = true;\n+                    node->inner = true;\n+                    node->sub[0] = std::make_unique<TreeNode>();\n+                    node->sub[1] = std::make_unique<TreeNode>();\n+                    node->sub[1]->hash = hash;\n+                    node = &*node->sub[0];\n+                }\n+            }\n+            // Cannot turn a known inner node into a leaf.\n+            if (node->sub[0]) return std::nullopt;\n+            node->explored = true;\n+            node->inner = false;\n+            node->leaf = &key;\n+            node->hash = leaf_hash;\n+        }\n+    }\n+\n+    // Recursive processing to turn the tree into flattened output. Use an explicit stack here to avoid\n+    // overflowing the call stack (the tree may be 128 levels deep).\n+    std::vector<TreeNode*> stack{&root};\n+    while (!stack.empty()) {\n+        TreeNode& node = *stack.back();\n+        if (!node.explored) {\n+            // Unexplored node, which means the tree is incomplete.\n+            return std::nullopt;\n+        } else if (!node.inner) {\n+            // Leaf node; produce output.\n+            ret.emplace_back(stack.size() - 1, node.leaf->first, node.leaf->second);\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (node.sub[0]->done && !node.sub[1]->done && !node.sub[1]->explored && !node.sub[1]->hash.IsNull() &&\n+                   (CHashWriter{HASHER_TAPBRANCH} << node.sub[1]->hash << node.sub[1]->hash).GetSHA256() == node.hash) {\n+            // Whenever there are nodes with two identical subtrees under it, we run into a problem:\n+            // the control blocks for the leaves underneath those will be identical as well, and thus\n+            // they will all be matched to the same path in the tree. The result is that at the location\n+            // where the duplicate occurred, the left child will contain a normal tree that can be explored\n+            // and processed, but the right one will remain unexplored.\n+            //\n+            // This situation can be detected, by encountering an inner node with unexplored right subtree\n+            // with known hash, and H_TapBranch(hash, hash) is equal to the parent node (this node)'s hash.\n+            //\n+            // To deal with this, simply process the left tree a second time (set its done flag to false;\n+            // noting that the done flag of its children have already been set to false after processing\n+            // those). To avoid ending up in an infinite loop, set the done flag of the right (unexplored)\n+            // subtree to true.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = true;\n+        } else if (node.sub[0]->done && node.sub[1]->done) {\n+            // An internal node which we're finished with.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = false;\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (!node.sub[0]->done) {\n+            // An internal node whose left branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[0]);\n+        } else if (!node.sub[1]->done) {\n+            // An internal node whose right branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[1]);\n+        }\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "ac4e2f327623593dd3009cf7563b11198f16336e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -327,4 +327,12 @@ class TaprootBuilder\n     TaprootSpendData GetSpendData() const;\n };\n \n+/** Given a TaprootSpendData and the output key, reconstruct its script tree.\n+ *\n+ * If the output doesn't match the spenddata, or if the data in spenddata is incomplete,\n+ * std::nullopt is returned. Otherwise, a vector of (depth, script, leaf_ver) tuples is\n+ * returned, corresponding to a depth-first traversal of the script tree.\n+ */\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output);\n+\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "e03835eaffee9913935aa6edcb95d854244d7d47",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -3848,13 +3848,18 @@ RPCHelpMan getaddressinfo()\n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n \n-    bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n-    ret.pushKV(\"solvable\", solvable);\n-\n-    if (solvable) {\n-       ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n+    if (provider) {\n+        auto inferred = InferDescriptor(scriptPubKey, *provider);\n+        bool solvable = inferred->IsSolvable() || IsSolvable(*provider, scriptPubKey);\n+        ret.pushKV(\"solvable\", solvable);\n+        if (solvable) {\n+            ret.pushKV(\"desc\", inferred->ToString());\n+        }\n+    } else {\n+        ret.pushKV(\"solvable\", false);\n     }\n \n+\n     DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n     if (desc_spk_man) {\n         std::string desc_str;"
      },
      {
        "sha": "0eac814c52487d6866c148a5a65f23090b18c529",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567670bec5ecf9bc252e91370382be53fd81ccee/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567670bec5ecf9bc252e91370382be53fd81ccee/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=567670bec5ecf9bc252e91370382be53fd81ccee",
        "patch": "@@ -230,6 +230,12 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n+            desc_a = self.addr_gen.getaddressinfo(addr_g)['desc']\n+            if desc.startswith(\"tr(\"):\n+                assert desc_a.startswith(\"tr(\")\n+            rederive = self.nodes[1].deriveaddresses(desc_a)\n+            assert_equal(len(rederive), 1)\n+            assert_equal(rederive[0], addr_g)\n \n         # tr descriptors cannot be imported when Taproot is not active\n         result = self.privs_tr_enabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n@@ -374,13 +380,34 @@ def run_test(self):\n             None,\n             2\n         )\n+        self.do_test(\n+            \"tr(XPRV,{XPUB,XPUB})\",\n+            \"tr($1/*,{pk($2/*),pk($2/*)})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [pk(k2), pk(k2)]),\n+            2\n+        )\n+        self.do_test(\n+            \"tr(XPRV,{{XPUB,H},{H,XPUB}})\",\n+            \"tr($1/*,{{pk($2/*),pk($H)},{pk($H),pk($2/*)}})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [[pk(k2), pk(H_POINT)], [pk(H_POINT), pk(k2)]]),\n+            2\n+        )\n         self.do_test(\n             \"tr(XPUB,{{H,{H,XPUB}},{H,{H,{H,XPRV}}}})\",\n             \"tr($1/*,{{pk($H),{pk($H),pk($2/*)}},{pk($H),{pk($H),{pk($H),pk($3/*)}}}})\",\n             [False, False, True],\n             lambda k1, k2, k3: (key(k1), [[pk(H_POINT), [pk(H_POINT), pk(k2)]], [pk(H_POINT), [pk(H_POINT), [pk(H_POINT), pk(k3)]]]]),\n             3\n         )\n+        self.do_test(\n+            \"tr(XPRV,{XPUB,{{XPUB,{H,H}},{{H,H},XPUB}}})\",\n+            \"tr($1/*,{pk($2/*),{{pk($2/*),{pk($H),pk($H)}},{{pk($H),pk($H)},pk($2/*)}}})\",\n+            [True, False],\n+            lambda k1, k2: (key(k1), [pk(k2), [[pk(k2), [pk(H_POINT), pk(H_POINT)]], [[pk(H_POINT), pk(H_POINT)], pk(k2)]]]),\n+            2\n+        )\n \n         self.log.info(\"Sending everything back...\")\n "
      }
    ]
  },
  {
    "sha": "184d4534f6f9633d930f288184ca5248333c8ca2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODRkNDUzNGY2Zjk2MzNkOTMwZjI4ODE4NGNhNTI0ODMzM2M4Y2Ey",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-23T11:33:18Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-23T11:33:18Z"
      },
      "message": "script, doc: spelling update",
      "tree": {
        "sha": "c50b9af1184f5117ad0732af405e260d5324f771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c50b9af1184f5117ad0732af405e260d5324f771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/184d4534f6f9633d930f288184ca5248333c8ca2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDTG/8ACgkQT1chs9Dj\nkh3f7BAAon4Fjc9alqdaWIF57bdHhUPofAXILJ8b2byDgiYrn2AJOkT0b16X/WWr\nPCQEyULFB6AVHn6fjkeDwnFDo1BuMxiBAAS7RGJG3ck/oxIqs/l6n/nhIE5fy5PY\n3Es8SdliKz9iSjg2EXmYD+/QREhzvO6HuutwyJxm4a6hdcXmBatqZ9QyvxQ6VWPh\nGzfPh7ide3Kc9m84QvqZVQERETGQVvvYd4Ru19dj9tdpxgHS+mLh1yOeO8GfoGJe\nyIWnX3mADd+yLgPWIoCPu1c4p+8jYE5Ugh2IZuYImDAegD1RRIHPzzX1Li6k3O7q\nh/erjLzwPdFoFBpDhgo11i697SnAkvkEIjD3zPvIb76S/e6AQln0tzVH+Idv3cHg\nQqs9iENUVMSOyVv74ruWSPe5Xi3bEhpQjNH0vIj0vfwIKAfOyQjay+1VzQAoipUG\nN3Z6+hrh+PsUM5n9YQlAAfu0PWUVqZqLAk3D3lJ9heAGMDltDLvojAjMw/vkn1qt\nILXr69Gif+fMV8NSRM1g3ejVFEnh5slxPOyqNzJzYNdBAOcavELdJpvyvqpn2HQA\n0BS0NUVPyiAqsunA2Cbw8S0wZAha+eMsE+ND7fSWj9SN9MA8L71g1lPpY0brg8oc\nL0Pq42a58yiUxw8BydFfsa8qY4WZk9KJadxcRF3Z4WTZ9yLJEj8=\n=FFRp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINNtvPLXMYOk/l+Cc8en76JEUm2Ha0i6+6KtBBBsg0pzCP/wEGBTlUHY+hjU\nvELHRlB1FSYI8CCrEOPkRJ2A5rBqkzezZWzmbtyHlsEp3DLfc0FrhJX/eAjwIOzB\nn6dz16tZnrUhaYLM/Wl8MU8M2n8fgmS5RTfYwovYCPEEYNMcAPAIPbrCcgCii+4A\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BCkGnctXlxqXbHm3e6tC0gKCPEEYNMcAPAIIjIPnUCwCg4Ag9/jDS75DI4j\nImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEPQJqROgLEtjlkGE\nYA/at44I8CDrVAqblVCxggncwd5ZJnZ65udceM39wNMle2AGcRrsTgjwIKE/nAcF\nu7/b+0R2hX45LV8OUQtBC5ZL5q2e4PHalff4CPEEYNMcAfAI114F7GHHyRkAg9/j\nDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBz\nLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c50b9af1184f5117ad0732af405e260d5324f771\nparent 567670bec5ecf9bc252e91370382be53fd81ccee\nauthor Jon Atack <jon@atack.com> 1624447998 +0200\ncommitter Jon Atack <jon@atack.com> 1624447998 +0200\n\nscript, doc: spelling update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184d4534f6f9633d930f288184ca5248333c8ca2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/184d4534f6f9633d930f288184ca5248333c8ca2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184d4534f6f9633d930f288184ca5248333c8ca2/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "567670bec5ecf9bc252e91370382be53fd81ccee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567670bec5ecf9bc252e91370382be53fd81ccee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/567670bec5ecf9bc252e91370382be53fd81ccee"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2175b76d163ce179d3d231e61d185d94d4bf8718",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184d4534f6f9633d930f288184ca5248333c8ca2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184d4534f6f9633d930f288184ca5248333c8ca2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=184d4534f6f9633d930f288184ca5248333c8ca2",
        "patch": "@@ -467,7 +467,7 @@ class PeerManagerImpl final : public PeerManager\n     bool IsBlockRequested(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Remove this block from our tracked requested blocks. Called if:\n-     *  - the block has been recieved from a peer\n+     *  - the block has been received from a peer\n      *  - the request for the block has timed out\n      */\n     void RemoveBlockRequest(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      },
      {
        "sha": "807b0143a67892308c79f6b1eb92959e7d8829c1",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184d4534f6f9633d930f288184ca5248333c8ca2/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184d4534f6f9633d930f288184ca5248333c8ca2/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=184d4534f6f9633d930f288184ca5248333c8ca2",
        "patch": "@@ -180,7 +180,7 @@ class NodeImpl : public Node\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n         return signers;\n #else\n-        // This result is undistinguisable from a succesful call that returns\n+        // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet\n         // creation dialog disables the external signer checkbox in both\n         // cases. The return type could be changed to std::optional<std::vector>"
      },
      {
        "sha": "0fa5e56eb60d5d13099e709e50fbe6865736736e",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184d4534f6f9633d930f288184ca5248333c8ca2/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184d4534f6f9633d930f288184ca5248333c8ca2/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=184d4534f6f9633d930f288184ca5248333c8ca2",
        "patch": "@@ -530,9 +530,9 @@ std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const\n     std::vector<std::tuple<int, CScript, int>> ret;\n     if (spenddata.merkle_root.IsNull()) return ret;\n \n-    /** Data structure to represent the nodes of the tree we're going to be build. */\n+    /** Data structure to represent the nodes of the tree we're going to build. */\n     struct TreeNode {\n-        /** Hash of this none, if known; 0 otherwise. */\n+        /** Hash of this node, if known; 0 otherwise. */\n         uint256 hash;\n         /** The left and right subtrees (note that their order is irrelevant). */\n         std::unique_ptr<TreeNode> sub[2];\n@@ -547,7 +547,7 @@ std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const\n         bool done = false;\n     };\n \n-    // Build tree from the provides branches.\n+    // Build tree from the provided branches.\n     TreeNode root;\n     root.hash = spenddata.merkle_root;\n     for (const auto& [key, control_blocks] : spenddata.scripts) {"
      },
      {
        "sha": "9906b15e9aba1d1b88553d681d8149224ff17164",
        "filename": "test/lint/lint-spelling.ignore-words.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184d4534f6f9633d930f288184ca5248333c8ca2/test/lint/lint-spelling.ignore-words.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184d4534f6f9633d930f288184ca5248333c8ca2/test/lint/lint-spelling.ignore-words.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.ignore-words.txt?ref=184d4534f6f9633d930f288184ca5248333c8ca2",
        "patch": "@@ -7,6 +7,7 @@ hights\n hist\n inout\n invokable\n+keypair\n mor\n nin\n ser"
      }
    ]
  },
  {
    "sha": "fa34cb80248cc39a73fc393f65c3cfc62e849556",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM0Y2I4MDI0OGNjMzlhNzNmYzM5M2Y2NWMzY2ZjNjJlODQ5NTU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T12:45:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T12:40:55Z"
      },
      "message": "cli: Avoid truncating -rpcwaittimeout",
      "tree": {
        "sha": "abc9e7726a988e1bb86cfaba174d90599920742f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abc9e7726a988e1bb86cfaba174d90599920742f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa34cb80248cc39a73fc393f65c3cfc62e849556",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjcGwv/QWk8pYgQqBX++TjDSupXp7jHwFfl75oed5ogX3lRXBAyRYNBRBBGj4CM\n+ARx0zWdgyGIlXC8Ymgok5fxz8Gloh3QLdsQuV6F8m3ttBrC6QnLK9NYVvqEK42n\nLDQNLcuVaFq9HrZlb3HOhO4o49435X0hu4CPvEfvwkI+8K0AYm+V+YawVfnTudG0\ngCWz661KZeBcQl7Zx5ZzGiQcpovfmIGCpT6TXnH84EN8Xn0rq338HjJHe6xnQfSW\nb2Pg3inugIvJlHwhV/glEuK/hxLHcdjVuymNm3ufxiAXL8cbWdXWsl2VuslrunQI\nmqMVLlBxys22FUaaGYoZFB6rLplqREQO1yRvYTnUYTSUZUhcyBkPYDo1f9hHA65U\nIo4+4WD3sJIMoqDzO9cV1YGhnqr36dRsJkV/xEXyw2IvcZBPv32qHQvH2GdUxnkg\nAbHtNcM7aw7mrImBIHVbmeqhOKrMPIp3Vc4nPXyWq+i2qWxzOEb96OmphXpVvaD+\nvBO8yxh7\n=qEFX\n-----END PGP SIGNATURE-----",
        "payload": "tree abc9e7726a988e1bb86cfaba174d90599920742f\nparent d6e0d78c31557660274ef53cac912c468eecbe2d\nauthor MarcoFalke <falke.marco@gmail.com> 1624452302 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624452055 +0200\n\ncli: Avoid truncating -rpcwaittimeout\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa34cb80248cc39a73fc393f65c3cfc62e849556",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa34cb80248cc39a73fc393f65c3cfc62e849556",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa34cb80248cc39a73fc393f65c3cfc62e849556/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6e0d78c31557660274ef53cac912c468eecbe2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e0d78c31557660274ef53cac912c468eecbe2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e0d78c31557660274ef53cac912c468eecbe2d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7a5f9455112d76bed33eb6ce5187859b60c44797",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa34cb80248cc39a73fc393f65c3cfc62e849556/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa34cb80248cc39a73fc393f65c3cfc62e849556/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fa34cb80248cc39a73fc393f65c3cfc62e849556",
        "patch": "@@ -797,7 +797,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n     const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n-    const int64_t deadline = GetTime<std::chrono::seconds>().count() + timeout;\n+    const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {\n         try {\n@@ -810,9 +810,9 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n             }\n             break; // Connection succeeded, no need to retry.\n         } catch (const CConnectionFailed& e) {\n-            const int64_t now = GetTime<std::chrono::seconds>().count();\n+            const auto now{GetTime<std::chrono::microseconds>()};\n             if (fWait && (timeout <= 0 || now < deadline)) {\n-                UninterruptibleSleep(std::chrono::seconds{1});\n+                UninterruptibleSleep(1s);\n             } else {\n                 throw CConnectionFailed(strprintf(\"timeout on transient error: %s\", e.what()));\n             }"
      }
    ]
  },
  {
    "sha": "c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGUzMDkzM2UwZDMxOWVkYTZhYThhN2YwMWRmMzJmYmIwYzNlYWQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T12:46:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T12:46:37Z"
      },
      "message": "Merge bitcoin/bitcoin#22323: doc: spelling update\n\n184d4534f6f9633d930f288184ca5248333c8ca2 script, doc: spelling update (Jon Atack)\n\nPull request description:\n\n  Clears out the report from `test/lint/lint-spelling.sh` and touches up the leftover nits in https://github.com/bitcoin/bitcoin/pull/22166#pullrequestreview-690454669. Happy to add any others people are aware of.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 184d4534f6f9633d930f288184ca5248333c8ca2\n  Sjors:\n    utACK 184d453\n\nTree-SHA512: 3b0ef6bd5ff227363b0bda79eeb66763151c74f607bc3a2a7bfe7823e3eef196587bccfe639e714e8e27b918ba57e8317eda06f225143c32c736685087dbcd24",
      "tree": {
        "sha": "c50b9af1184f5117ad0732af405e260d5324f771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c50b9af1184f5117ad0732af405e260d5324f771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi6IgwAmbr5ZwttTZVMzjdndHa6xwn7pZ4TX6QYqqRLd38xAYinsHllV51rCTzT\nXumKjgbAILpAiKttQY5lDjqNmM1/9dSalHfqKcRrwIJXjttZ4dbuD4/p7/S9X+lf\n+MVzZCbOz4dsqJdSg7D1sttfwB9rrxXEVfYoOBmiIL3Jl4putgWb1YqVDVevh2j/\n2jH2ZWRAmfzLrN/7J9xndSRYDFk5nRYUKlF22Ht5JICa4fXwqHglcCQuckD9vkCy\nQTADRwWryL+j43zjTeGyPwow+SAMkfSMBVFtli+uCCPubCT1+FBNA/tnNvEoh3Mp\niocE1peoF2/0Wqzw5EQ0r4fazt/G5RhO1W6SVmPmgMtfakCZ9LzN4jtWbaG+ShaP\nTaKuBHwMmRCoRWiNP6AyqSN/6VWBdOeWXf0YiRevDamoI0MrwNhLAsWktM51lzHY\n5umgHIU6XlFTtGRcW9aYZA/DJaFWK+oTsKuvHgn2Ou/AHG2vK53HKcezsC2aFt7r\nYnOVd75M\n=8vK1\n-----END PGP SIGNATURE-----",
        "payload": "tree c50b9af1184f5117ad0732af405e260d5324f771\nparent 567670bec5ecf9bc252e91370382be53fd81ccee\nparent 184d4534f6f9633d930f288184ca5248333c8ca2\nauthor MarcoFalke <falke.marco@gmail.com> 1624452390 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624452397 +0200\n\nMerge bitcoin/bitcoin#22323: doc: spelling update\n\n184d4534f6f9633d930f288184ca5248333c8ca2 script, doc: spelling update (Jon Atack)\n\nPull request description:\n\n  Clears out the report from `test/lint/lint-spelling.sh` and touches up the leftover nits in https://github.com/bitcoin/bitcoin/pull/22166#pullrequestreview-690454669. Happy to add any others people are aware of.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 184d4534f6f9633d930f288184ca5248333c8ca2\n  Sjors:\n    utACK 184d453\n\nTree-SHA512: 3b0ef6bd5ff227363b0bda79eeb66763151c74f607bc3a2a7bfe7823e3eef196587bccfe639e714e8e27b918ba57e8317eda06f225143c32c736685087dbcd24\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "567670bec5ecf9bc252e91370382be53fd81ccee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567670bec5ecf9bc252e91370382be53fd81ccee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/567670bec5ecf9bc252e91370382be53fd81ccee"
      },
      {
        "sha": "184d4534f6f9633d930f288184ca5248333c8ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184d4534f6f9633d930f288184ca5248333c8ca2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/184d4534f6f9633d930f288184ca5248333c8ca2"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2175b76d163ce179d3d231e61d185d94d4bf8718",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "patch": "@@ -467,7 +467,7 @@ class PeerManagerImpl final : public PeerManager\n     bool IsBlockRequested(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Remove this block from our tracked requested blocks. Called if:\n-     *  - the block has been recieved from a peer\n+     *  - the block has been received from a peer\n      *  - the request for the block has timed out\n      */\n     void RemoveBlockRequest(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      },
      {
        "sha": "807b0143a67892308c79f6b1eb92959e7d8829c1",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "patch": "@@ -180,7 +180,7 @@ class NodeImpl : public Node\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n         return signers;\n #else\n-        // This result is undistinguisable from a succesful call that returns\n+        // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet\n         // creation dialog disables the external signer checkbox in both\n         // cases. The return type could be changed to std::optional<std::vector>"
      },
      {
        "sha": "0fa5e56eb60d5d13099e709e50fbe6865736736e",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "patch": "@@ -530,9 +530,9 @@ std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const\n     std::vector<std::tuple<int, CScript, int>> ret;\n     if (spenddata.merkle_root.IsNull()) return ret;\n \n-    /** Data structure to represent the nodes of the tree we're going to be build. */\n+    /** Data structure to represent the nodes of the tree we're going to build. */\n     struct TreeNode {\n-        /** Hash of this none, if known; 0 otherwise. */\n+        /** Hash of this node, if known; 0 otherwise. */\n         uint256 hash;\n         /** The left and right subtrees (note that their order is irrelevant). */\n         std::unique_ptr<TreeNode> sub[2];\n@@ -547,7 +547,7 @@ std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const\n         bool done = false;\n     };\n \n-    // Build tree from the provides branches.\n+    // Build tree from the provided branches.\n     TreeNode root;\n     root.hash = spenddata.merkle_root;\n     for (const auto& [key, control_blocks] : spenddata.scripts) {"
      },
      {
        "sha": "9906b15e9aba1d1b88553d681d8149224ff17164",
        "filename": "test/lint/lint-spelling.ignore-words.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/test/lint/lint-spelling.ignore-words.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8/test/lint/lint-spelling.ignore-words.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.ignore-words.txt?ref=c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "patch": "@@ -7,6 +7,7 @@ hights\n hist\n inout\n invokable\n+keypair\n mor\n nin\n ser"
      }
    ]
  },
  {
    "sha": "7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzE3ZTE0YTQ0YzZlZmM1NDVlNmZiOWJjZWRlZTcxNzRlOTNhOGZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T16:32:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T16:32:35Z"
      },
      "message": "Merge bitcoin/bitcoin#22263: refactor: wrap CCoinsViewCursor in unique_ptr\n\n7ad414f4bfa74595ee5726e66f3527045c02a977 doc: add comment about CCoinsViewDBCursor constructor (James O'Beirne)\n0f8a5a4dd530549d37c43da52c923ac3b2af1a03 move-only(ish): don't expose CCoinsViewDBCursor (James O'Beirne)\n615c1adfb07b9b466173166dc2e53ace540e4b32 refactor: wrap CCoinsViewCursor in unique_ptr (James O'Beirne)\n\nPull request description:\n\n  I tripped over this one for a few hours at the beginning of the week, so I've sort of got a personal vendetta against `CCoinsView::Cursor()` returning a raw pointer.\n\n  Specifically in the case of CCoinsViewDB, if a raw cursor is allocated and not freed, a cryptic leveldb assertion failure occurs on CCoinsViewDB destruction (`Assertion 'dummy_versions_.next_ == &dummy_versions_' failed.`).\n\n  This is a pretty simple change.\n\n  Related to: https://github.com/bitcoin/bitcoin/issues/21766\n  See also: https://github.com/google/leveldb/issues/142#issuecomment-414418135\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK 7ad414f4bfa74595ee5726e66f3527045c02a977 \ud83d\udd0e\n  jonatack:\n    re-ACK 7ad414f4bfa74595ee5726e66f3527045c02a977 modulo suggestion\n  ryanofsky:\n    Code review ACK 7ad414f4bfa74595ee5726e66f3527045c02a977. Two new commits look good and thanks for clarifying constructor comment\n\nTree-SHA512: 6471d03e2de674d84b1ea0d31e25f433d52aa1aa4996f7b4aab1bd02b6bc340b15e64cc8ea07bbefefa3b5da35384ca5400cc230434e787c30931b8574c672f9",
      "tree": {
        "sha": "7acfd04611c899e41816f8506fd060f63d46ab78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7acfd04611c899e41816f8506fd060f63d46ab78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjweQwAwev2sPoPnOxfcz44VrOCFHp128v77euqz/egtTJ0E63D09+XghP972jt\n9/N3naI55zFh2sAVpXUmN2oLtBq/6ROFkxm7nJBaaTgn9z/r6SwByGnvGRT2IYUV\nKdkNSQMKayNq/VloVhshfLspbfuyJ99SsinyAwJ8p/mr0uvJiQsd3+0mKUBtu+Jl\nUeF+k2N0y8o87Hpurunqrwv7H3hv6Yo/Ty7sWapsTv0E30EikLcxqFcvfG9YfaQ3\nD5tG6jJtvV32KZ+0NlpzM4Sm4JJQvly+DMjrIxo/vDtQUR8rI1WJKxPux/OCZrZa\nihg3SOx//SkwUQsfmx1OHtKMvFO4FTuTe/ry9Xsg6x8wdQ+ptPdeaQfmmOKNI2Dq\n5PFZbrGgqCLT8N7K0a2EDtAxAnBHCCAJRVLUq+xl2mzNbnMlOozXZwKhlAPyRIQi\n7y59bULLUiXCnKFnrBXSXTPaNSnqGJhINRBGKuXdgt1ZR1Lmm4hni/3hzK3TZW8R\nByVgpdxC\n=4Fxb\n-----END PGP SIGNATURE-----",
        "payload": "tree 7acfd04611c899e41816f8506fd060f63d46ab78\nparent c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8\nparent 7ad414f4bfa74595ee5726e66f3527045c02a977\nauthor MarcoFalke <falke.marco@gmail.com> 1624465948 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624465955 +0200\n\nMerge bitcoin/bitcoin#22263: refactor: wrap CCoinsViewCursor in unique_ptr\n\n7ad414f4bfa74595ee5726e66f3527045c02a977 doc: add comment about CCoinsViewDBCursor constructor (James O'Beirne)\n0f8a5a4dd530549d37c43da52c923ac3b2af1a03 move-only(ish): don't expose CCoinsViewDBCursor (James O'Beirne)\n615c1adfb07b9b466173166dc2e53ace540e4b32 refactor: wrap CCoinsViewCursor in unique_ptr (James O'Beirne)\n\nPull request description:\n\n  I tripped over this one for a few hours at the beginning of the week, so I've sort of got a personal vendetta against `CCoinsView::Cursor()` returning a raw pointer.\n\n  Specifically in the case of CCoinsViewDB, if a raw cursor is allocated and not freed, a cryptic leveldb assertion failure occurs on CCoinsViewDB destruction (`Assertion 'dummy_versions_.next_ == &dummy_versions_' failed.`).\n\n  This is a pretty simple change.\n\n  Related to: https://github.com/bitcoin/bitcoin/issues/21766\n  See also: https://github.com/google/leveldb/issues/142#issuecomment-414418135\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK 7ad414f4bfa74595ee5726e66f3527045c02a977 \ud83d\udd0e\n  jonatack:\n    re-ACK 7ad414f4bfa74595ee5726e66f3527045c02a977 modulo suggestion\n  ryanofsky:\n    Code review ACK 7ad414f4bfa74595ee5726e66f3527045c02a977. Two new commits look good and thanks for clarifying constructor comment\n\nTree-SHA512: 6471d03e2de674d84b1ea0d31e25f433d52aa1aa4996f7b4aab1bd02b6bc340b15e64cc8ea07bbefefa3b5da35384ca5400cc230434e787c30931b8574c672f9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e30933e0d319eda6aa8a7f01df32fbb0c3ead8"
      },
      {
        "sha": "7ad414f4bfa74595ee5726e66f3527045c02a977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ad414f4bfa74595ee5726e66f3527045c02a977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ad414f4bfa74595ee5726e66f3527045c02a977"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "ce0b131de6deb4690c8a5a9d4a529e231b32a5a6",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -13,7 +13,7 @@ bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return f\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }\n+std::unique_ptr<CCoinsViewCursor> CCoinsView::Cursor() const { return nullptr; }\n \n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n {\n@@ -28,7 +28,7 @@ uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n-CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n+std::unique_ptr<CCoinsViewCursor> CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}"
      },
      {
        "sha": "3151a260d94674571fe9f7162c5a1ff44ec3e5f2",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -180,7 +180,7 @@ class CCoinsView\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     //! Get a cursor to iterate over the whole state\n-    virtual CCoinsViewCursor *Cursor() const;\n+    virtual std::unique_ptr<CCoinsViewCursor> Cursor() const;\n \n     //! As we use CCoinsViews polymorphically, have a virtual destructor\n     virtual ~CCoinsView() {}\n@@ -204,7 +204,7 @@ class CCoinsViewBacked : public CCoinsView\n     std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n-    CCoinsViewCursor *Cursor() const override;\n+    std::unique_ptr<CCoinsViewCursor> Cursor() const override;\n     size_t EstimateSize() const override;\n };\n \n@@ -237,7 +237,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     uint256 GetBestBlock() const override;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n-    CCoinsViewCursor* Cursor() const override {\n+    std::unique_ptr<CCoinsViewCursor> Cursor() const override {\n         throw std::logic_error(\"CCoinsViewCache cursor iteration not supported.\");\n     }\n "
      },
      {
        "sha": "4d4d3fb7d0803ef04f7c4ae13bd49f5ce42d5e4d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -2391,7 +2391,7 @@ static RPCHelpMan scantxoutset()\n             LOCK(cs_main);\n             CChainState& active_chainstate = chainman.ActiveChainstate();\n             active_chainstate.ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(active_chainstate.CoinsDB().Cursor());\n+            pcursor = active_chainstate.CoinsDB().Cursor();\n             CHECK_NONFATAL(pcursor);\n             tip = active_chainstate.m_chain.Tip();\n             CHECK_NONFATAL(tip);\n@@ -2590,7 +2590,7 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n-        pcursor = std::unique_ptr<CCoinsViewCursor>(chainstate.CoinsDB().Cursor());\n+        pcursor = chainstate.CoinsDB().Cursor();\n         tip = chainstate.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }"
      },
      {
        "sha": "f452696689381f9a0c0a0375d80cf320bc4726cb",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -183,8 +183,8 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n     }\n \n     {\n-        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n-        assert(coins_view_cursor == nullptr);\n+        std::unique_ptr<CCoinsViewCursor> coins_view_cursor = backend_coins_view.Cursor();\n+        assert(!coins_view_cursor);\n         (void)backend_coins_view.EstimateSize();\n         (void)backend_coins_view.GetBestBlock();\n         (void)backend_coins_view.GetHeadBlocks();"
      },
      {
        "sha": "4b76bee5ab8816088c846c392aad3e4cfbd4fd5b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -168,9 +168,34 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n-CCoinsViewCursor *CCoinsViewDB::Cursor() const\n+/** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n+class CCoinsViewDBCursor: public CCoinsViewCursor\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(*m_db).NewIterator(), GetBestBlock());\n+public:\n+    // Prefer using CCoinsViewDB::Cursor() since we want to perform some\n+    // cache warmup on instantiation.\n+    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256&hashBlockIn):\n+        CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n+    ~CCoinsViewDBCursor() {}\n+\n+    bool GetKey(COutPoint &key) const override;\n+    bool GetValue(Coin &coin) const override;\n+    unsigned int GetValueSize() const override;\n+\n+    bool Valid() const override;\n+    void Next() override;\n+\n+private:\n+    std::unique_ptr<CDBIterator> pcursor;\n+    std::pair<char, COutPoint> keyTmp;\n+\n+    friend class CCoinsViewDB;\n+};\n+\n+std::unique_ptr<CCoinsViewCursor> CCoinsViewDB::Cursor() const\n+{\n+    auto i = std::make_unique<CCoinsViewDBCursor>(\n+        const_cast<CDBWrapper&>(*m_db).NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */"
      },
      {
        "sha": "845d80788f255974e33b2441896c72002cda9354",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "patch": "@@ -60,7 +60,7 @@ class CCoinsViewDB final : public CCoinsView\n     uint256 GetBestBlock() const override;\n     std::vector<uint256> GetHeadBlocks() const override;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n-    CCoinsViewCursor *Cursor() const override;\n+    std::unique_ptr<CCoinsViewCursor> Cursor() const override;\n \n     //! Attempt to update from an older database format. Returns whether an error occurred.\n     bool Upgrade();\n@@ -70,28 +70,6 @@ class CCoinsViewDB final : public CCoinsView\n     void ResizeCache(size_t new_cache_size) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n-/** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n-class CCoinsViewDBCursor: public CCoinsViewCursor\n-{\n-public:\n-    ~CCoinsViewDBCursor() {}\n-\n-    bool GetKey(COutPoint &key) const override;\n-    bool GetValue(Coin &coin) const override;\n-    unsigned int GetValueSize() const override;\n-\n-    bool Valid() const override;\n-    void Next() override;\n-\n-private:\n-    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):\n-        CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n-    std::unique_ptr<CDBIterator> pcursor;\n-    std::pair<char, COutPoint> keyTmp;\n-\n-    friend class CCoinsViewDB;\n-};\n-\n /** Access to the block database (blocks/index/) */\n class CBlockTreeDB : public CDBWrapper\n {"
      }
    ]
  },
  {
    "sha": "a196c89317dd876c22c8b4556f5af3ecfa251119",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTk2Yzg5MzE3ZGQ4NzZjMjJjOGI0NTU2ZjVhZjNlY2ZhMjUxMTE5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T07:41:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T07:42:07Z"
      },
      "message": "Merge bitcoin/bitcoin#22270: test: Add bitcoin-util tests (+refactors)\n\nfa4017e7a0899959b2ac84bcbc3f34dfb17b5fce refactor: Pass grind args vector as const reference (MarcoFalke)\nfa08bc288f81dd42a482e2bfef37d21a1e5fddd2 Remove gArgs from AppInitUtil (MarcoFalke)\nfa751a47ff4253f58518d7f43d33ec1227ea0dbc Remove unused OptionsCategory arg from AddCommand (MarcoFalke)\nfa3c1eee7ff2646e78540d53b4f8eaf095a8c27d Remove unused includes from bitcoin-util (MarcoFalke)\nfa304929e2c3583bc3e6b05eaa6e0df6cdac6ec8 test: Add bitcoin-util tests (MarcoFalke)\nfa831e709a4d605a18e5de1627b48d670bb326fb build_msvc: Add bitcoin-util.exe (MarcoFalke)\n\nPull request description:\n\n  bitcoin-util has no tests\n\n  See https://marcofalke.github.io/btc_cov/total.coverage/src/bitcoin-util.cpp.gcov.html (Coverage report showing 0%)\n\nACKs for top commit:\n  klementtan:\n    Code review and tested ACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce\n  theStack:\n    Tested ACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce\n  jamesob:\n    reACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce ([`jamesob/ackr/22270.1.MarcoFalke.test_add_bitcoin_util_te`](https://github.com/jamesob/bitcoin/tree/ackr/22270.1.MarcoFalke.test_add_bitcoin_util_te))\n\nTree-SHA512: 68e2791239bc48d28fbb6394155c39ea0357a96ec7e4896ca579feeef1a803657165a0ef9fa3cf6e2a381e5b0ca0dafa1b594158303a04997db784201d8dd66d",
      "tree": {
        "sha": "a83cad1cfc8709162d44043adc7080ce0de25b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a83cad1cfc8709162d44043adc7080ce0de25b75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a196c89317dd876c22c8b4556f5af3ecfa251119",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgxsAv9Hfwoqk0MiFK8dlWml2Sbyg9Sn9kLwu+O/R3zEahu3NulLV3sXS7GcCTO\n2CLP3IPjvCHBC96S6wVZ10qxsDgRC8uRyi7lSKeQRwxSLV46+vgVSfCmwQpXcVco\n0P/fEQXL6wy6c05qcEH0YLiWY6vgUBwVBfCbIeHtHY47IAvv7VCT7YdnpIq+xoz0\n5I/WIgCGD8aJbDgFflJ+SppsPkbML+7m5JFbSIk5czDw2BVMqdGFIAAiQEeQoG9Y\nTneK2yCnvor7mj5uLjfQRwjqsanWrxkjPS+lwOhZw22pht2ULMc2kY7XCkxu0Xta\nAnfk8wzD7M2+Xev98Lf5+tatS7xRTyTzUWeFUBaBOrA/aNUVE1dtxK1XYjvH2g+I\nxZwdEFIRkXHgx0DI4quBDzSJI1kO56BT/p8d5veXZIU25b9Sg4yA8enausoZGadV\nacD6WW8pr6oWzf5n5tNrOePFUW6w/CMPrObi9alKJDQD0RH8uVxeaj0PQdaArJQC\nUD0tV/gH\n=zBoP\n-----END PGP SIGNATURE-----",
        "payload": "tree a83cad1cfc8709162d44043adc7080ce0de25b75\nparent 7317e14a44c6efc545e6fb9bcedee7174e93a8fa\nparent fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce\nauthor MarcoFalke <falke.marco@gmail.com> 1624520508 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624520527 +0200\n\nMerge bitcoin/bitcoin#22270: test: Add bitcoin-util tests (+refactors)\n\nfa4017e7a0899959b2ac84bcbc3f34dfb17b5fce refactor: Pass grind args vector as const reference (MarcoFalke)\nfa08bc288f81dd42a482e2bfef37d21a1e5fddd2 Remove gArgs from AppInitUtil (MarcoFalke)\nfa751a47ff4253f58518d7f43d33ec1227ea0dbc Remove unused OptionsCategory arg from AddCommand (MarcoFalke)\nfa3c1eee7ff2646e78540d53b4f8eaf095a8c27d Remove unused includes from bitcoin-util (MarcoFalke)\nfa304929e2c3583bc3e6b05eaa6e0df6cdac6ec8 test: Add bitcoin-util tests (MarcoFalke)\nfa831e709a4d605a18e5de1627b48d670bb326fb build_msvc: Add bitcoin-util.exe (MarcoFalke)\n\nPull request description:\n\n  bitcoin-util has no tests\n\n  See https://marcofalke.github.io/btc_cov/total.coverage/src/bitcoin-util.cpp.gcov.html (Coverage report showing 0%)\n\nACKs for top commit:\n  klementtan:\n    Code review and tested ACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce\n  theStack:\n    Tested ACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce\n  jamesob:\n    reACK fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce ([`jamesob/ackr/22270.1.MarcoFalke.test_add_bitcoin_util_te`](https://github.com/jamesob/bitcoin/tree/ackr/22270.1.MarcoFalke.test_add_bitcoin_util_te))\n\nTree-SHA512: 68e2791239bc48d28fbb6394155c39ea0357a96ec7e4896ca579feeef1a803657165a0ef9fa3cf6e2a381e5b0ca0dafa1b594158303a04997db784201d8dd66d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a196c89317dd876c22c8b4556f5af3ecfa251119",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a196c89317dd876c22c8b4556f5af3ecfa251119",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a196c89317dd876c22c8b4556f5af3ecfa251119/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7317e14a44c6efc545e6fb9bcedee7174e93a8fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7317e14a44c6efc545e6fb9bcedee7174e93a8fa"
      },
      {
        "sha": "fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4017e7a0899959b2ac84bcbc3f34dfb17b5fce"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 96,
      "deletions": 34
    },
    "files": [
      {
        "sha": "3a6aa4a83715081a1a5cbad193a3460f39182cea",
        "filename": "build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-util/bitcoin-util.vcxproj?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}</ProjectGuid>\n+  </PropertyGroup>\n+  <PropertyGroup Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n+  </PropertyGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\bitcoin-util.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "7d8591c10bd02b7feeac9bf4b6c67aec8ea5a05b",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -32,6 +32,8 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n+EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\""
      },
      {
        "sha": "f534aecc199f996ead26fc563f29805be4d4670f",
        "filename": "src/bitcoin-util.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 26,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -7,28 +7,19 @@\n #endif\n \n #include <arith_uint256.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n #include <clientversion.h>\n-#include <coins.h>\n-#include <consensus/consensus.h>\n #include <core_io.h>\n-#include <key_io.h>\n-#include <policy/rbf.h>\n-#include <primitives/transaction.h>\n-#include <script/script.h>\n-#include <script/sign.h>\n-#include <script/signingprovider.h>\n-#include <univalue.h>\n-#include <util/moneystr.h>\n-#include <util/rbf.h>\n-#include <util/strencodings.h>\n-#include <util/string.h>\n+#include <streams.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n #include <atomic>\n+#include <cstdio>\n #include <functional>\n #include <memory>\n-#include <stdio.h>\n #include <thread>\n \n #include <boost/algorithm/string.hpp>\n@@ -43,29 +34,29 @@ static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    argsman.AddCommand(\"grind\", \"Perform proof of work on hex header string\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"grind\", \"Perform proof of work on hex header string\");\n \n     SetupChainParamsBaseOptions(argsman);\n }\n \n // This function returns either one of EXIT_ codes when it's expected to stop the process or\n // CONTINUE_EXECUTION when it's expected to continue further.\n-static int AppInitUtil(int argc, char* argv[])\n+static int AppInitUtil(ArgsManager& args, int argc, char* argv[])\n {\n-    SetupBitcoinUtilArgs(gArgs);\n+    SetupBitcoinUtilArgs(args);\n     std::string error;\n-    if (!gArgs.ParseParameters(argc, argv, error)) {\n+    if (!args.ParseParameters(argc, argv, error)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n \n-    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n+    if (HelpRequested(args) || args.IsArgSet(\"-version\")) {\n         // First part of help message is specific to this utility\n         std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\";\n-        if (!gArgs.IsArgSet(\"-version\")) {\n+        if (!args.IsArgSet(\"-version\")) {\n             strUsage += \"\\n\"\n                 \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\";\n-            strUsage += \"\\n\" + gArgs.GetHelpMessage();\n+            strUsage += \"\\n\" + args.GetHelpMessage();\n         }\n \n         tfm::format(std::cout, \"%s\", strUsage);\n@@ -79,7 +70,7 @@ static int AppInitUtil(int argc, char* argv[])\n \n     // Check for chain settings (Params() calls are only valid after this clause)\n     try {\n-        SelectParams(gArgs.GetChainName());\n+        SelectParams(args.GetChainName());\n     } catch (const std::exception& e) {\n         tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n@@ -114,7 +105,7 @@ static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offse\n     }\n }\n \n-static int Grind(std::vector<std::string> args, std::string& strPrint)\n+static int Grind(const std::vector<std::string>& args, std::string& strPrint)\n {\n     if (args.size() != 1) {\n         strPrint = \"Must specify block header to grind\";\n@@ -160,12 +151,14 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n #endif\n {\n+    ArgsManager& args = gArgs;\n     SetupEnvironment();\n \n     try {\n-        int ret = AppInitUtil(argc, argv);\n-        if (ret != CONTINUE_EXECUTION)\n+        int ret = AppInitUtil(args, argc, argv);\n+        if (ret != CONTINUE_EXECUTION) {\n             return ret;\n+        }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitUtil()\");\n         return EXIT_FAILURE;\n@@ -174,7 +167,7 @@ int main(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    const auto cmd = gArgs.GetCommand();\n+    const auto cmd = args.GetCommand();\n     if (!cmd) {\n         tfm::format(std::cerr, \"Error: must specify a command\\n\");\n         return EXIT_FAILURE;"
      },
      {
        "sha": "765954c92e401f34be3a07854f92debde4f3128b",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -33,11 +33,11 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    argsman.AddCommand(\"info\", \"Get wallet info\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"create\", \"Create new wallet file\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"dump\", \"Print out all of the wallet key-value records\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"createfromdump\", \"Create new wallet file from dumped records\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"info\", \"Get wallet info\");\n+    argsman.AddCommand(\"create\", \"Create new wallet file\");\n+    argsman.AddCommand(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\");\n+    argsman.AddCommand(\"dump\", \"Print out all of the wallet key-value records\");\n+    argsman.AddCommand(\"createfromdump\", \"Create new wallet file from dumped records\");\n }\n \n static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])"
      },
      {
        "sha": "ee7a76be2927093edc7a73efb3d044c7733c2c68",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -620,14 +620,14 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n-void ArgsManager::AddCommand(const std::string& cmd, const std::string& help, const OptionsCategory& cat)\n+void ArgsManager::AddCommand(const std::string& cmd, const std::string& help)\n {\n     Assert(cmd.find('=') == std::string::npos);\n     Assert(cmd.at(0) != '-');\n \n     LOCK(cs_args);\n     m_accept_any_command = false; // latch to false\n-    std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    std::map<std::string, Arg>& arg_map = m_available_args[OptionsCategory::COMMANDS];\n     auto ret = arg_map.emplace(cmd, Arg{\"\", help, ArgsManager::COMMAND});\n     Assert(ret.second); // Fail on duplicate commands\n }"
      },
      {
        "sha": "3547bad585feb52c71a263238b2288515643a21d",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -374,7 +374,7 @@ class ArgsManager\n     /**\n      * Add subcommand\n      */\n-    void AddCommand(const std::string& cmd, const std::string& help, const OptionsCategory& cat);\n+    void AddCommand(const std::string& cmd, const std::string& help);\n \n     /**\n      * Add many hidden arguments"
      },
      {
        "sha": "a648c0287ab46c4e9399b0105243088651754eb9",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a196c89317dd876c22c8b4556f5af3ecfa251119/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a196c89317dd876c22c8b4556f5af3ecfa251119/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=a196c89317dd876c22c8b4556f5af3ecfa251119",
        "patch": "@@ -1,4 +1,34 @@\n [\n+  { \"exec\": \"./bitcoin-util\",\n+    \"args\": [\"foo\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error parsing command line arguments: Invalid command 'foo'\",\n+    \"description\": \"\"\n+  },\n+  { \"exec\": \"./bitcoin-util\",\n+    \"args\": [\"help\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error parsing command line arguments: Invalid command 'help'\",\n+    \"description\": \"`help` raises an error. Use `-help`\"\n+  },\n+  { \"exec\": \"./bitcoin-util\",\n+    \"args\": [\"grind\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Must specify block header to grind\",\n+    \"description\": \"\"\n+  },\n+  { \"exec\": \"./bitcoin-util\",\n+    \"args\": [\"grind\", \"1\", \"2\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Must specify block header to grind\",\n+    \"description\": \"\"\n+  },\n+  { \"exec\": \"./bitcoin-util\",\n+    \"args\": [\"grind\", \"aa\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Could not decode block header\",\n+    \"description\": \"\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\", \"nversion=1\"],\n     \"output_cmp\": \"blanktxv1.hex\","
      }
    ]
  },
  {
    "sha": "10f4ce20783cbbcb0c0997c605452d9e60827e6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGY0Y2UyMDc4M2NiYmNiMGMwOTk3YzYwNTQ1MmQ5ZTYwODI3ZTZk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-20T15:50:39Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-24T09:13:10Z"
      },
      "message": "bench: bench.h fixes and improvements",
      "tree": {
        "sha": "304a140f3101b8ddcd1a40b038895a969112d9cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/304a140f3101b8ddcd1a40b038895a969112d9cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10f4ce20783cbbcb0c0997c605452d9e60827e6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDUTKcACgkQT1chs9Dj\nkh3NIg//cC6sJtBN/K+g2koy7ASyr3gOaKmzRf1iXZJ/j/afmn5K3T7czr5vlbJu\nx9kDo06iUZGv4Ejojj+fd29MmULTogVMRnh1VcOELR54azKScyI/5pvRvEZvX1id\nLu+FNf19UewBMYPVRGrs/OcLNnMdgmhuW9jgTSMRtAWRcuDL451wRZMJevt+pXeE\n5TfDBDR9MmxPNWW6K1AaMI9aU56tXBUaiJl/7X+Ow/i14SxAFeBMF9DG5NzmEMQc\nLbp1Omr1S5oXIBQlZOt+yn5mizfJxOu55u+PmYQw4rJvdlv07o/GBvKjf9T4qGb4\nUehvmWkKRlCNdLocgkSWxAlogEjGX391F+8r1BrkaB1Y4HF1CAeKedcZ1xtQGqVK\n3DwN9aa7QTwu/obi4rcZVovRazfVHOlq08RuCdshjaV6U7VojhrI+egcQHKsZAjR\nPFtVVD+80Ny3+/DtAE4NLUK2X9WAjGT4oS5LTvC6U5ZPPoZeUWRtFCYBSVOLqiXi\nQWf51Anbn9+xatA37iPxI20DQo/LThvGXhJKbxZx0G1O20ADqaU791TIHm0xUdE6\n05vawAeqXULGkj8i9r7gVuolJx33uwlYfplB77Rmm1DLFJyGwMEf3faUdnzS5gfe\naeaUewflYt2wbXJyGJf9sn0EvlCmXey1CovYGYSjIrNtirtmujk=\n=gbK2\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAtGtpqQaO52p+BVbQ1MQKblAie3Hn5lU+DfRtQXtzbCCP/wEBy0u31K+uRV\nMZ9lln5XyIcI8QRg1Eyo8AjzPL6V5ett2gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wECdEw/pE2Brw+zNvmQ2FBiII8QRg1Eyo\n8Ah0PJCM3h9a3ACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wELnv4+Ftkxq6N+a/htmKegEI8QRg1Eyo8AgWPQzi\nCeQUIwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDNUmWM2UQT+jFerO3FdRyxCPEEYNRMp/AI/w33eM+djwEA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 304a140f3101b8ddcd1a40b038895a969112d9cb\nparent 965e93743454112c0c3c66bf24852f63ee07b862\nauthor Jon Atack <jon@atack.com> 1624204239 +0200\ncommitter Jon Atack <jon@atack.com> 1624525990 +0200\n\nbench: bench.h fixes and improvements\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f4ce20783cbbcb0c0997c605452d9e60827e6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10f4ce20783cbbcb0c0997c605452d9e60827e6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f4ce20783cbbcb0c0997c605452d9e60827e6d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965e93743454112c0c3c66bf24852f63ee07b862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965e93743454112c0c3c66bf24852f63ee07b862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965e93743454112c0c3c66bf24852f63ee07b862"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c4fcd80e33b0987221eb9a5d2797529ba48d81fa",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10f4ce20783cbbcb0c0997c605452d9e60827e6d/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10f4ce20783cbbcb0c0997c605452d9e60827e6d/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=10f4ce20783cbbcb0c0997c605452d9e60827e6d",
        "patch": "@@ -18,16 +18,19 @@\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::Bench& bench)\n+static void NameOfYourBenchmarkFunction(benchmark::Bench& bench)\n {\n-    ... do any setup needed...\n-    nanobench::Config().run([&] {\n-       ... do stuff you want to time...\n+    ...do any setup needed...\n+\n+    bench.run([&] {\n+         ...do stuff you want to time; refer to src/bench/nanobench.h\n+            for more information and the options that can be passed here...\n     });\n-    ... do any cleanup needed...\n+\n+    ...do any cleanup needed...\n }\n \n-BENCHMARK(CODE_TO_TIME);\n+BENCHMARK(NameOfYourBenchmarkFunction);\n \n  */\n \n@@ -55,7 +58,8 @@ class BenchRunner\n \n     static void RunAll(const Args& args);\n };\n-}\n+} // namespace benchmark\n+\n // BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);\n #define BENCHMARK(n) \\\n     benchmark::BenchRunner PASTE2(bench_, PASTE2(__LINE__, n))(STRINGIZE(n), n);"
      }
    ]
  },
  {
    "sha": "84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGUyZDViNzgxODFkMDhiMjU4Yzc3ZjljOWM0ZTFiYjdmZGFhNDUx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-22T11:30:51Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-24T09:13:12Z"
      },
      "message": "bench: bench_bitcoin.cpp help fixups\n\n- remove unneeded strprintf\n- consistent punctuation (no EOL periods)\n- sort helps by order they are printed (alphabetical order)",
      "tree": {
        "sha": "04786048caa3a13e58605352837c2688335356a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04786048caa3a13e58605352837c2688335356a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDUTKgACgkQT1chs9Dj\nkh14YhAAhW10HB2gayh7HlArWtPrqh6ZkN0D/AbSLWkyJj44DZn43hUS9oluEFyp\nswQzNlVL3qVE5gC9Q9I5vjuqoZLfxhQmNJr/IRpLJ6irmYqrBSrZA2VZDvSMlxk/\nS0s2nqs1Q9IQAq8eYQy49928s3YTp1wrvpRNtx8dnQGo/GRXtu7ljHO+dtjfb55b\n+BxQ/rSsOlzOMENL/P2THA0floPDtjccQLFqNgW9fhoJ1IK/z9Ga8mB1ny4sRFII\n9qU/klRfbWInsAkrPvClhDoqYVdJZo/Y5M5CQVZbgqPH1NqN4Ks5CLnwd+qpa0vZ\nEGDbX9n2yWT+fwQtPyGH46XtZm1RkwXGDtkexZIXS5jJIBzcC0rl0uDLSknW/Hyi\nrRM8ERLyhcJ+BR+zzuTQgPbvY0Hsjvf+CYHyD3xT6+EuYcTAd9otLM41fOHAdVE2\nKWB/n3mZamuLc0WhVEUu13WdP/IAzm/e4Rrtk9cPnpCvYH3f4kxTPJ3c5UDrsHAp\nVGQEe+ch12Vu3gBLMxDxvDI95KAZoQvBgGc6/3wb/wg6ed6s5pkGASjEywDNlNhw\nnzly2AQB2Lpax9OtGuU4jkg7I1aKXYXMfk0NojUv4D/RGRsFpwtbjSo40OjEMoh1\niXv0Lgx0T+RCKV1/K0jN4gz+3odl6xc8uqpbXnC/vIGXw0QLyi0=\n=HxtF\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILWfKQ7SJFUGEyzE1+iLhvZdxYUNzCjbBVmO1axw8XdlCP/wEAZGjxzA7Q+r\ntZEfjs6IWTUI8QRg1Eyp8AgGvnEo3vmi/wCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEFvk3MLcPzSy3MEhM1ETazEI\n8QRg1Eyq8AgRCnO8eil9lQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEF7Koj9UX12G4Ph1MyMvAtII8QRg1Eyq8AgEbdxBxCY2\nfACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQnVwljCmVYivmjkTuB5/BGQjxBGDUTKrwCDXh6SGN+T6TAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 04786048caa3a13e58605352837c2688335356a0\nparent 10f4ce20783cbbcb0c0997c605452d9e60827e6d\nauthor Jon Atack <jon@atack.com> 1624361451 +0200\ncommitter Jon Atack <jon@atack.com> 1624525992 +0200\n\nbench: bench_bitcoin.cpp help fixups\n\n- remove unneeded strprintf\n- consistent punctuation (no EOL periods)\n- sort helps by order they are printed (alphabetical order)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10f4ce20783cbbcb0c0997c605452d9e60827e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f4ce20783cbbcb0c0997c605452d9e60827e6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10f4ce20783cbbcb0c0997c605452d9e60827e6d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "aab777cac15259675ea06f6de1958eef933113c2",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
        "patch": "@@ -16,11 +16,11 @@ static void SetupBenchArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", strprintf(\"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\"), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n // parses a comma separated list like \"10,20,30,50\""
      }
    ]
  },
  {
    "sha": "d8513fe41102dcbfc05235f3b95e33eb1878f880",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODUxM2ZlNDExMDJkY2JmYzA1MjM1ZjNiOTVlMzNlYjE4NzhmODgw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-20T15:50:13Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-24T09:15:29Z"
      },
      "message": "doc: update doc/benchmarking.md",
      "tree": {
        "sha": "52c52f3cef8113abb494da6ee5743019f2469f38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52c52f3cef8113abb494da6ee5743019f2469f38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8513fe41102dcbfc05235f3b95e33eb1878f880",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDUTTsACgkQT1chs9Dj\nkh3rww/7BYIAnb4DGiZ9pqtPbGNGi+b2iFsqB4QB8jHKiTdjWeSikT8DQat1HKsp\nXp9B+gMa7vS01AFnMz1PwqS9pz/Q+0CT9JpeEin2mOYvZz+idnFG9siT0tZ7c12r\ncIQdhxInDiFVpGiplBIkEKIp3Pesw22lLT3hFpHXvPGYF8wQ+pqpn34ae9qrR+Cd\nEDySgRoqkqXZaC7dC4OnTkIV+w7OfZkS1ZY89Z+CEPw8tA/OfLzKKupGIENICyxM\nEVKk3e8BKs9zeaScwXEPrggiQ6gficOWem8i9XctyaSq6fva0erR2jO1+7f4wslc\nqQAgk/Q99SMrKf3hrI7Jce9hEN8cOldwROPFkV2lywacFRgBOnnjpLughd97eVX6\nzpkOEIY1MZTHg/91Y6LG/RI/yG9XizECHVx1Y/dlTAx69ZzsfxpL1HTGQMrxk7Cf\nAwoMtL6Qmfmj1um9/iN1H8tyg00Ci6VBoYafBVyrUVqNgT8dE19WSNje4m5ymeEp\n1kXM8tfTeDbWTcyp3nPXDA/Y7KLYYvob/cQ+vShTusao9fOWAF+vYXNlQp+QFF3a\nvWnITzkrSDPO2Gmaeq6WGJaYJ79bJ2ii+heiQk171ebjF23jkTroi4rXKkpZ9g5a\nGw482rkgUFfYuJ6sDVOqXTTFYA0dKt0BXQCmtKNTsGqQFuiadm4=\n=CfNT\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHi40cpW0+6AeM7zjpgRZCiMADigk3VHZEYlsy1OSdJVCP/wEARfLbXZ/fEr\nehc69AG47f0I8CA27fQERq6bFK1g0+V6VMTuxo+y0csyQyYbJBHyUIR4pQjxBGDU\nTT3wCD/tRWtu2P/jAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQBr5a+nwcfy0rs8U3dUMRdgjxBGDUTT3wCFNG\nK16ETyVlAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQtvx1mNHMXG10JmvudMf+FQjwII/9u6Tp83Nds21q3yZ9nUarSAKMFu2k\ndbZ4CToRuXAzCPEgwSQxdUy64Iw20QdTQY5zjZzk5WMVkPLie7ADdnVD2bkI8QRg\n1E098Aj++5QPZly75gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn8BC+Df8kk7W2GiYZ29Crdl10CPEgrTUFkSHc\nDn8D686THwXThVMgMfiUUQegnP1fCtasjuUI8QRg1E088Ajw/XaRwatQpgCD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 52c52f3cef8113abb494da6ee5743019f2469f38\nparent 84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451\nauthor Jon Atack <jon@atack.com> 1624204213 +0200\ncommitter Jon Atack <jon@atack.com> 1624526129 +0200\n\ndoc: update doc/benchmarking.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8513fe41102dcbfc05235f3b95e33eb1878f880",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8513fe41102dcbfc05235f3b95e33eb1878f880",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8513fe41102dcbfc05235f3b95e33eb1878f880/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "84d5f2c444ba3e5f37b81c8cdb35223c48f538e1",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8513fe41102dcbfc05235f3b95e33eb1878f880/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8513fe41102dcbfc05235f3b95e33eb1878f880/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=d8513fe41102dcbfc05235f3b95e33eb1878f880",
        "patch": "@@ -8,8 +8,10 @@ thread queue, wallet balance.\n Running\n ---------------------\n \n-For benchmarks purposes you only need to compile `bitcoin_bench`. Beware of configuring without `--enable-debug` as this would impact\n-benchmarking by unlatching log printers and lock analysis.\n+For benchmarking, you only need to compile `bitcoin_bench`.  The bench runner\n+warns if you configure with `--enable-debug`, but consider if building without\n+it will impact the benchmark(s) you are interested in by unlatching log printers\n+and lock analysis.\n \n     make -C src bitcoin_bench\n \n@@ -19,19 +21,28 @@ After compiling bitcoin-core, the benchmarks can be run with:\n \n The output will look similar to:\n ```\n-|             ns/byte |              byte/s | error % | benchmark\n-|--------------------:|--------------------:|--------:|:----------------------------------------------\n-|               64.13 |       15,592,356.01 |    0.1% | `Base58CheckEncode`\n-|               24.56 |       40,722,672.68 |    0.2% | `Base58Decode`\n+|               ns/op |                op/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|       57,927,463.00 |               17.26 |    3.6% |      0.66 | `AddrManAdd`\n+|          677,816.00 |            1,475.33 |    4.9% |      0.01 | `AddrManGetAddr`\n+\n+...\n+\n+|             ns/byte |              byte/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|              127.32 |        7,854,302.69 |    0.3% |      0.00 | `Base58CheckEncode`\n+|               31.95 |       31,303,226.99 |    0.2% |      0.00 | `Base58Decode`\n+\n ...\n ```\n \n Help\n ---------------------\n \n-    src/bench/bench_bitcoin --help\n+    src/bench/bench_bitcoin -?\n \n-To print options like scaling factor or per-benchmark filter.\n+To print the various options, like listing the benchmarks without running them\n+or using a regex filter to only run certain benchmarks.\n \n Notes\n ---------------------"
      }
    ]
  },
  {
    "sha": "bfa885898a5f3260fd1628158d1d32093d61bd4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmE4ODU4OThhNWYzMjYwZmQxNjI4MTU4ZDFkMzIwOTNkNjFiZDRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:10:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:10:44Z"
      },
      "message": "Merge bitcoin/bitcoin#22306: [test] Improvements to p2p_addr_relay.py\n\n6168eb06b2044f00f18727b955b672fc91c60bd7 [test] Prevent intermittent issue (Amiti Uttarwar)\n1d8193e2a2950fd957654b601e85ab888899c394 [test] Remove GetAddrStore class (Amiti Uttarwar)\nef2f149bf2d12e2d14e441fdf701808f0f1dfb8e [test] Update GetAddrStore callers to use AddrReceiver (Amiti Uttarwar)\ne8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5 [test] Add functionality to AddrReceiver (Amiti Uttarwar)\n09dc073cff250afd47a3e219f35d1257add764e9 [test] Allow AddrReceiver to be used more generally (Amiti Uttarwar)\n\nPull request description:\n\n  A test refactor broken out from #21528 & a fix to #22243.\n\n  This PR:\n  1. consolidates the two helper classes into one, with the intent of making the test logic more clear & usable as we add more subtests to the file\n\n  2. hopefully fixes the test flakiness by bumping up the mocktime interval to ensure `m_next_addr_send` timer triggers\n\nACKs for top commit:\n  mzumsande:\n    Code-Review ACK 6168eb06b2044f00f18727b955b672fc91c60bd7\n  lsilva01:\n    Tested ACK https://github.com/bitcoin/bitcoin/pull/22306/commits/6168eb06b2044f00f18727b955b672fc91c60bd7 on Ubuntu 20.04\n  brunoerg:\n    tACK 6168eb06b2044f00f18727b955b672fc91c60bd7\n\nTree-SHA512: 248324f9d37e0e5ffe4acc437cd72ad9a2960abc868a97c6040a36e6ea8b59029127ac4f63fcf67d981a5bb4dbf2334bb2c23c541fae8e910d5523884bcedcba",
      "tree": {
        "sha": "527079fafb8d11f9e32539df3efd16f2868b8521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/527079fafb8d11f9e32539df3efd16f2868b8521"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa885898a5f3260fd1628158d1d32093d61bd4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg61gv/dwl22ydiZf4WJlVLBIH+9M124r5iNwUhR2KpOWoDP/9xRoN0OWoUOh6R\n1aRDOyss9i+hPaHCzGEXecOg3KZSPzX/HAcdZuj8hL370ZnyyvCReHvWlin8ic7L\nioNKNY+xfvxJBkDpwgSmGsfFLLOgKHX47JEyKfEAG7bizdmsA6GeI1Z/WGbt1D7w\nqf4FcNPP4NfeKC8yeWBuQZLR92syBycjvJQhkFfh/p6Du6Q5WieHZKR+EXWWlTQV\ncCqAn4xLGennC+drjLd3mW/yNGgupPHyND53BFhb9AAxYSvhttunL4hNXVl8J/rs\nDibvifhPintj2AaAG3fGpRobreqtRBRkN1Te+DsZagoP3ICXqabQvt9cfZFVkYei\nU3/ec1F4I+s3fnsAAF3Vqh7fjUD10B4zvI15rdvXBz4E5t3FPZhp0hhAMEEL4oBI\nGPnX9J0aK6xWm0wJXELPSKDW+DvvmSeFliq4oSVrRca4B+aV5YchXOZmXDvxovBw\nlN8qb8Od\n=GylT\n-----END PGP SIGNATURE-----",
        "payload": "tree 527079fafb8d11f9e32539df3efd16f2868b8521\nparent a196c89317dd876c22c8b4556f5af3ecfa251119\nparent 6168eb06b2044f00f18727b955b672fc91c60bd7\nauthor MarcoFalke <falke.marco@gmail.com> 1624529410 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624529444 +0200\n\nMerge bitcoin/bitcoin#22306: [test] Improvements to p2p_addr_relay.py\n\n6168eb06b2044f00f18727b955b672fc91c60bd7 [test] Prevent intermittent issue (Amiti Uttarwar)\n1d8193e2a2950fd957654b601e85ab888899c394 [test] Remove GetAddrStore class (Amiti Uttarwar)\nef2f149bf2d12e2d14e441fdf701808f0f1dfb8e [test] Update GetAddrStore callers to use AddrReceiver (Amiti Uttarwar)\ne8c67ea19ac4c0aec4a0b449ac3a4152f80dfff5 [test] Add functionality to AddrReceiver (Amiti Uttarwar)\n09dc073cff250afd47a3e219f35d1257add764e9 [test] Allow AddrReceiver to be used more generally (Amiti Uttarwar)\n\nPull request description:\n\n  A test refactor broken out from #21528 & a fix to #22243.\n\n  This PR:\n  1. consolidates the two helper classes into one, with the intent of making the test logic more clear & usable as we add more subtests to the file\n\n  2. hopefully fixes the test flakiness by bumping up the mocktime interval to ensure `m_next_addr_send` timer triggers\n\nACKs for top commit:\n  mzumsande:\n    Code-Review ACK 6168eb06b2044f00f18727b955b672fc91c60bd7\n  lsilva01:\n    Tested ACK https://github.com/bitcoin/bitcoin/pull/22306/commits/6168eb06b2044f00f18727b955b672fc91c60bd7 on Ubuntu 20.04\n  brunoerg:\n    tACK 6168eb06b2044f00f18727b955b672fc91c60bd7\n\nTree-SHA512: 248324f9d37e0e5ffe4acc437cd72ad9a2960abc868a97c6040a36e6ea8b59029127ac4f63fcf67d981a5bb4dbf2334bb2c23c541fae8e910d5523884bcedcba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa885898a5f3260fd1628158d1d32093d61bd4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa885898a5f3260fd1628158d1d32093d61bd4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa885898a5f3260fd1628158d1d32093d61bd4a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a196c89317dd876c22c8b4556f5af3ecfa251119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a196c89317dd876c22c8b4556f5af3ecfa251119",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a196c89317dd876c22c8b4556f5af3ecfa251119"
      },
      {
        "sha": "6168eb06b2044f00f18727b955b672fc91c60bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6168eb06b2044f00f18727b955b672fc91c60bd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6168eb06b2044f00f18727b955b672fc91c60bd7"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1a414959b9039474d1d83c2241a405148225fdbb",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 27,
        "deletions": 28,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa885898a5f3260fd1628158d1d32093d61bd4a/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa885898a5f3260fd1628158d1d32093d61bd4a/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=bfa885898a5f3260fd1628158d1d32093d61bd4a",
        "patch": "@@ -23,30 +23,29 @@\n \n class AddrReceiver(P2PInterface):\n     num_ipv4_received = 0\n+    test_addr_contents = False\n \n-    def on_addr(self, message):\n-        for addr in message.addrs:\n-            assert_equal(addr.nServices, 9)\n-            if not 8333 <= addr.port < 8343:\n-                raise AssertionError(\"Invalid addr.port of {} (8333-8342 expected)\".format(addr.port))\n-            assert addr.ip.startswith('123.123.123.')\n-            self.num_ipv4_received += 1\n-\n-\n-class GetAddrStore(P2PInterface):\n-    getaddr_received = False\n-    num_ipv4_received = 0\n-\n-    def on_getaddr(self, message):\n-        self.getaddr_received = True\n+    def __init__(self, test_addr_contents=False):\n+        super().__init__()\n+        self.test_addr_contents = test_addr_contents\n \n     def on_addr(self, message):\n         for addr in message.addrs:\n             self.num_ipv4_received += 1\n+            if(self.test_addr_contents):\n+                # relay_tests checks the content of the addr messages match\n+                # expectations based on the message creation in setup_addr_msg\n+                assert_equal(addr.nServices, 9)\n+                if not 8333 <= addr.port < 8343:\n+                    raise AssertionError(\"Invalid addr.port of {} (8333-8342 expected)\".format(addr.port))\n+                assert addr.ip.startswith('123.123.123.')\n \n     def addr_received(self):\n         return self.num_ipv4_received != 0\n \n+    def getaddr_received(self):\n+        return self.message_count['getaddr'] > 0\n+\n \n class AddrTest(BitcoinTestFramework):\n     counter = 0\n@@ -79,7 +78,7 @@ def setup_addr_msg(self, num):\n     def send_addr_msg(self, source, msg, receivers):\n         source.send_and_ping(msg)\n         # pop m_next_addr_send timer\n-        self.mocktime += 5 * 60\n+        self.mocktime += 10 * 60\n         self.nodes[0].setmocktime(self.mocktime)\n         for peer in receivers:\n             peer.sync_send_with_ping()\n@@ -101,7 +100,7 @@ def relay_tests(self):\n         num_receivers = 7\n         receivers = []\n         for _ in range(num_receivers):\n-            receivers.append(self.nodes[0].add_p2p_connection(AddrReceiver()))\n+            receivers.append(self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True)))\n \n         # Keep this with length <= 10. Addresses from larger messages are not\n         # relayed.\n@@ -125,8 +124,8 @@ def relay_tests(self):\n         self.nodes[0].disconnect_p2ps()\n \n         self.log.info('Check relay of addresses received from outbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True))\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         msg = self.setup_addr_msg(2)\n         self.send_addr_msg(full_outbound_peer, msg, [inbound_peer])\n         self.log.info('Check that the first addr message received from an outbound peer is not relayed')\n@@ -142,7 +141,7 @@ def relay_tests(self):\n         assert_equal(inbound_peer.num_ipv4_received, 2)\n \n         self.log.info('Check address relay to outbound peers')\n-        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n+        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=1, connection_type=\"block-relay-only\")\n         msg3 = self.setup_addr_msg(2)\n         self.send_addr_msg(inbound_peer, msg3, [full_outbound_peer, block_relay_peer])\n \n@@ -156,17 +155,17 @@ def relay_tests(self):\n     def getaddr_tests(self):\n         self.log.info('Test getaddr behavior')\n         self.log.info('Check that we send a getaddr message upon connecting to an outbound-full-relay peer')\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         full_outbound_peer.sync_with_ping()\n-        assert full_outbound_peer.getaddr_received\n+        assert full_outbound_peer.getaddr_received()\n \n         self.log.info('Check that we do not send a getaddr message upon connecting to a block-relay-only peer')\n-        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n+        block_relay_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=1, connection_type=\"block-relay-only\")\n         block_relay_peer.sync_with_ping()\n-        assert_equal(block_relay_peer.getaddr_received, False)\n+        assert_equal(block_relay_peer.getaddr_received(), False)\n \n         self.log.info('Check that we answer getaddr messages only from inbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(GetAddrStore())\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n         inbound_peer.sync_with_ping()\n \n         # Add some addresses to addrman\n@@ -182,7 +181,7 @@ def getaddr_tests(self):\n \n         self.mocktime += 5 * 60\n         self.nodes[0].setmocktime(self.mocktime)\n-        inbound_peer.wait_until(inbound_peer.addr_received)\n+        inbound_peer.wait_until(lambda: inbound_peer.addr_received() is True)\n \n         assert_equal(full_outbound_peer.num_ipv4_received, 0)\n         assert_equal(block_relay_peer.num_ipv4_received, 0)\n@@ -196,9 +195,9 @@ def blocksonly_mode_tests(self):\n         self.mocktime = int(time.time())\n \n         self.log.info('Check that we send getaddr messages')\n-        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(GetAddrStore(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n+        full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         full_outbound_peer.sync_with_ping()\n-        assert full_outbound_peer.getaddr_received\n+        assert full_outbound_peer.getaddr_received()\n \n         self.log.info('Check that we relay address messages')\n         addr_source = self.nodes[0].add_p2p_connection(P2PInterface())"
      }
    ]
  },
  {
    "sha": "c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzExNjFmNGY3OWI2ZTFkYzBmOGJmYzJhNWU3ODE1ZThjNTVlZDkx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-24T10:35:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-24T10:35:25Z"
      },
      "message": "Merge bitcoin/bitcoin#22320: build: set minimum required Boost to 1.64.0\n\n957f3584277d33b44b9f1618142f743e4083eb5d build: remove check for Boost Process header (fanquake)\ndf2c93321765c7f77935fd92d31722d7b65a53db build: remove workaround for Boost and std::atomic (fanquake)\n2bf211696b8cd355856995ba821c74e67385b77d build: set minimum required Boost to 1.64.0 (fanquake)\n\nPull request description:\n\n  Setting a newer minimum required Boost means we can remove the awkward header / compile check for Boost Process.\n\n  If we don't do this, we should at-least make Boost Process being missing no longer a failure, otherwise anyone building using Boost < 1.64.0 would have to pass `--disable-external-signer` as well.\n\n  The only system I can see that is affected here, (doesn't have new enough system packages) is Debian Oldstable. However, anyone compiling there, can use depends. They can also no-longer use the system GCC (6.0), and I'd assume would be using Clang 7, which would be the newest compiler available to them. It's extended, LTS support also end in 1 year from now, so anyone still using it should be considering upgrading.\n\n  Debian Buster (Stable) has 1.67+, Ubuntu Bionic has 1.65+, any of the BSDs, recent Fedora, macOS etc all also have well and truly new enough Boost versions available.\n\n  I think this is something we should just do for 22.0. If not, definitely for 23.0.\n\n  Fixes #22319. Compiling Bitcoin Core should work, as `windows.h` will be included.\n  Alternative to #22294.\n  Would also close #22269.\n  #19128 could be re-opened.\n\nACKs for top commit:\n  laanwj:\n    Tested ACK 957f3584277d33b44b9f1618142f743e4083eb5d that this fixes #22269.\n  MarcoFalke:\n    review ACK 957f3584277d33b44b9f1618142f743e4083eb5d\n\nTree-SHA512: a8ffa7933dce8bf994892ef16664103d7b4e1008e52628e9becb918a7727232dfb51b23100a82dc2b60cd9af5877abc32dc2d3754a7e1b3ac5410a92fdf393f3",
      "tree": {
        "sha": "97bb254dbdb1b45d59b50a5079be824baffc1a2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97bb254dbdb1b45d59b50a5079be824baffc1a2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDUX+0ACgkQLuufXMCV\nJsF0CQ/+P7dfxV/h07oLOkzwBfRC8V8WQv/i2SuI2ZzNXd5wUJxNmmbXa+QThvCc\nEyhT6l73OX9/FfWbA396aFCCPNotPj7ZQJGmCKmCrownjzdc0FOBh4uvjyjMYMR9\nHpFVdMPMNXVGeq58NxftzxGXTvtvRGLp0bPpspgZ8G9E/FBjLkyCBeABJlje51vC\nLNhT1UU/eUvFpnsp60qYHVdMYBVvkA8yFmFQZpsRerMDEyJrJj0mBXLY9Ug76AGE\n6ljJP5j3CQsN7T3rzH+kcS/wwFcP4duGJ/Q/FDCCj0oAoFVvSoHpV7E3qUtHPifz\nL6Dm0usWRM1oVdWD6NERu+7s3ZoFn5crW3v21BLD3UR9c/n7D1YwAxUPriXZSfuh\nm/IXhNFeWAM94ItYrOtCOygKH07MXL7rCJiB3j8hKHEMiLB5BvvOgG1APVsbDH82\nR/fcQkZ1HECp+kkgcskbPjvNHfT2CYY0j7EE8TIascgz56YBPurw2iV0k1vQ4X+j\nQ0qlBbknGAwbZq0E/UYbL367ASyjNTNNFSKQAzF3htpv5U5WpUZXq83ORjo/ZrsV\ns8tvlETX2yvPFBqeAt0d66w1p7n5ssf0hVhEmH0+BqyHEsKtADmw+SFpxEjlaqT9\nSM2pmArrKlXsSNv3yOQ6OZjhOub6s8iS9UV0sQ38bdrGxju76JE=\n=oiJO\n-----END PGP SIGNATURE-----",
        "payload": "tree 97bb254dbdb1b45d59b50a5079be824baffc1a2c\nparent bfa885898a5f3260fd1628158d1d32093d61bd4a\nparent 957f3584277d33b44b9f1618142f743e4083eb5d\nauthor fanquake <fanquake@gmail.com> 1624530910 +0800\ncommitter fanquake <fanquake@gmail.com> 1624530925 +0800\n\nMerge bitcoin/bitcoin#22320: build: set minimum required Boost to 1.64.0\n\n957f3584277d33b44b9f1618142f743e4083eb5d build: remove check for Boost Process header (fanquake)\ndf2c93321765c7f77935fd92d31722d7b65a53db build: remove workaround for Boost and std::atomic (fanquake)\n2bf211696b8cd355856995ba821c74e67385b77d build: set minimum required Boost to 1.64.0 (fanquake)\n\nPull request description:\n\n  Setting a newer minimum required Boost means we can remove the awkward header / compile check for Boost Process.\n\n  If we don't do this, we should at-least make Boost Process being missing no longer a failure, otherwise anyone building using Boost < 1.64.0 would have to pass `--disable-external-signer` as well.\n\n  The only system I can see that is affected here, (doesn't have new enough system packages) is Debian Oldstable. However, anyone compiling there, can use depends. They can also no-longer use the system GCC (6.0), and I'd assume would be using Clang 7, which would be the newest compiler available to them. It's extended, LTS support also end in 1 year from now, so anyone still using it should be considering upgrading.\n\n  Debian Buster (Stable) has 1.67+, Ubuntu Bionic has 1.65+, any of the BSDs, recent Fedora, macOS etc all also have well and truly new enough Boost versions available.\n\n  I think this is something we should just do for 22.0. If not, definitely for 23.0.\n\n  Fixes #22319. Compiling Bitcoin Core should work, as `windows.h` will be included.\n  Alternative to #22294.\n  Would also close #22269.\n  #19128 could be re-opened.\n\nACKs for top commit:\n  laanwj:\n    Tested ACK 957f3584277d33b44b9f1618142f743e4083eb5d that this fixes #22269.\n  MarcoFalke:\n    review ACK 957f3584277d33b44b9f1618142f743e4083eb5d\n\nTree-SHA512: a8ffa7933dce8bf994892ef16664103d7b4e1008e52628e9becb918a7727232dfb51b23100a82dc2b60cd9af5877abc32dc2d3754a7e1b3ac5410a92fdf393f3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa885898a5f3260fd1628158d1d32093d61bd4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa885898a5f3260fd1628158d1d32093d61bd4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa885898a5f3260fd1628158d1d32093d61bd4a"
      },
      {
        "sha": "957f3584277d33b44b9f1618142f743e4083eb5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957f3584277d33b44b9f1618142f743e4083eb5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/957f3584277d33b44b9f1618142f743e4083eb5d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 5,
      "deletions": 19
    },
    "files": [
      {
        "sha": "88f91004afd7cdebd28d1f272cadb644419cedc6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 18,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
        "patch": "@@ -1415,37 +1415,23 @@ fi\n if test x$use_boost = xyes; then\n \n   dnl Check for Boost headers\n-  AX_BOOST_BASE([1.58.0],[],[AC_MSG_ERROR([Boost is not available!])])\n+  AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n   if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n   fi\n   AX_BOOST_SYSTEM\n   AX_BOOST_FILESYSTEM\n \n-  dnl Opt-in to Boost Process if external signer support is requested\n-  if test \"x$use_external_signer\" != xno; then\n-    AC_MSG_CHECKING(for Boost Process)\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/process.hpp>]],\n-     [[ boost::process::child* child = new boost::process::child; delete child; ]])],\n-     [ AC_MSG_RESULT(yes)\n-     AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n-     ],\n-     [ AC_MSG_ERROR([Boost::Process is required for external signer support, but not available!])]\n-    )\n-  fi\n-\n   if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n-  dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n-  dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n-  m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n-  BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n-\n   BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n fi\n \n+if test \"x$use_external_signer\" != xno; then\n+  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n+fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n dnl Check for reduced exports"
      },
      {
        "sha": "a467759418742d86cb3b68999cd0380d7c6de1e7",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
        "patch": "@@ -6,7 +6,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.58.0](https://github.com/bitcoin/bitcoin/pull/19667) | No |  |  |\n+| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n | Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "d6a59166a1879c1dd5b3a301847961f4b3f17742",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmE1OTE2NmExODc5YzFkZDViM2EzMDE4NDc5NjFmNGIzZjE3NzQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:47:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:47:13Z"
      },
      "message": "Merge bitcoin/bitcoin#22257: test: refactor: various (de)serialization helpers cleanups/improvements\n\nbdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb test: doc: improve doc for `from_hex` helper (mention `to_hex` alternative) (Sebastian Falbesoner)\n191405420815d49ab50184513717a303fc2744d6 scripted-diff: test: rename `FromHex` to `from_hex` (Sebastian Falbesoner)\na79396fe5f8f81c78cf84117a87074c6ff6c9d95 test: remove `ToHex` helper, use .serialize().hex() instead (Sebastian Falbesoner)\n2ce7b47958c4a10ba20dc86c011d71cda4b070a5 test: introduce `tx_from_hex` helper for tx deserialization (Sebastian Falbesoner)\n\nPull request description:\n\n  There are still many functional tests that perform conversions from a hex-string to a message object (deserialization) manually. This PR identifies all those instances and replaces them with a newly introduced helper `tx_from_hex`.\n\n  Instances were found via\n  * `git grep \"deserialize.*BytesIO\"`\n\n  and some of them manually, when it were not one-liners.\n\n  Further, the helper `ToHex` was removed and simply replaced by `.serialize().hex()`, since now both variants are in use (sometimes even within the same test) and using the helper doesn't really have an advantage in readability. (see discussion https://github.com/bitcoin/bitcoin/pull/22257#discussion_r652404782)\n\nACKs for top commit:\n  MarcoFalke:\n    review re-ACK bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb \ud83d\ude01\n\nTree-SHA512: e25d7dc85918de1d6755a5cea65471b07a743204c20ad1c2f71ff07ef48cc1b9ad3fe5f515c1efaba2b2e3d89384e7980380c5d81895f9826e2046808cd3266e",
      "tree": {
        "sha": "17408a0a952372e1cfe16b41ceca50dd866be085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17408a0a952372e1cfe16b41ceca50dd866be085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6a59166a1879c1dd5b3a301847961f4b3f17742",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgDswwAgDGnJsk5A7TIbbBkzo3LiouJ15i/1M/8NnyTkT2aJk0ypMecXiio6tnb\nGxnGU1jxfie1QDJ/3oCe2iJeufhfOd8fdYwbnKp5JBlgkHnEuVr6+YRbagfN/WSY\niynPFxVytWL22ri9+lDAEaLk9jz/8BY+A0OW3nh5IH3OKPMsUuWPR9u49KieR/wz\n5OOn5ZGt/p3ZIWRXxFw5s8tW16gNN/fpM3w9U1DaImKOHZA9p1twVZ5mPDXILUnO\nhHvtTMbbpst+RZFIm8c5+o3UVWdM/PNSa23QDk7Yu6Yy2Vgl5gpr6THBncfHTic5\nTKbgZcdsaDn7CZ3LJ0podI3JUPxxOeJT1/ptU4xtPjBap+dESk9Jwb9L5gbK1dFl\njvPP8LcU5+mM8Dk9ohhautngHB8RDmmV3qvCeqYgWHG5O288V+rQgFVCuY/Ujs8K\nMV2bsXfRZwBGuW/+FJWPjp4IbJr7axzZMdM7bIz4KEtoF0ds4edMcmrp64F722gQ\nUKaCZKta\n=8zbG\n-----END PGP SIGNATURE-----",
        "payload": "tree 17408a0a952372e1cfe16b41ceca50dd866be085\nparent c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91\nparent bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb\nauthor MarcoFalke <falke.marco@gmail.com> 1624531624 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624531633 +0200\n\nMerge bitcoin/bitcoin#22257: test: refactor: various (de)serialization helpers cleanups/improvements\n\nbdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb test: doc: improve doc for `from_hex` helper (mention `to_hex` alternative) (Sebastian Falbesoner)\n191405420815d49ab50184513717a303fc2744d6 scripted-diff: test: rename `FromHex` to `from_hex` (Sebastian Falbesoner)\na79396fe5f8f81c78cf84117a87074c6ff6c9d95 test: remove `ToHex` helper, use .serialize().hex() instead (Sebastian Falbesoner)\n2ce7b47958c4a10ba20dc86c011d71cda4b070a5 test: introduce `tx_from_hex` helper for tx deserialization (Sebastian Falbesoner)\n\nPull request description:\n\n  There are still many functional tests that perform conversions from a hex-string to a message object (deserialization) manually. This PR identifies all those instances and replaces them with a newly introduced helper `tx_from_hex`.\n\n  Instances were found via\n  * `git grep \"deserialize.*BytesIO\"`\n\n  and some of them manually, when it were not one-liners.\n\n  Further, the helper `ToHex` was removed and simply replaced by `.serialize().hex()`, since now both variants are in use (sometimes even within the same test) and using the helper doesn't really have an advantage in readability. (see discussion https://github.com/bitcoin/bitcoin/pull/22257#discussion_r652404782)\n\nACKs for top commit:\n  MarcoFalke:\n    review re-ACK bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb \ud83d\ude01\n\nTree-SHA512: e25d7dc85918de1d6755a5cea65471b07a743204c20ad1c2f71ff07ef48cc1b9ad3fe5f515c1efaba2b2e3d89384e7980380c5d81895f9826e2046808cd3266e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a59166a1879c1dd5b3a301847961f4b3f17742",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6a59166a1879c1dd5b3a301847961f4b3f17742",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a59166a1879c1dd5b3a301847961f4b3f17742/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c31161f4f79b6e1dc0f8bfc2a5e7815e8c55ed91"
      },
      {
        "sha": "bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb8b9a347e68f80a2e8d44ce5590a2e8214b6bb"
      }
    ],
    "stats": {
      "total": 657,
      "additions": 396,
      "deletions": 261
    },
    "files": [
      {
        "sha": "78e1fa5ecd2663a2fbd37ef575fd6850fba5f424",
        "filename": "contrib/signet/miner",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -23,7 +23,7 @@ PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNE\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n \n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_hex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n from test_framework.script import CScriptOp # noqa: E402\n \n logging.basicConfig(\n@@ -37,7 +37,7 @@ RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n \n # #### some helpers that could go into test_framework\n \n-# like FromHex, but without the hex part\n+# like from_hex, but without the hex part\n def FromBinary(cls, stream):\n     \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n     # handle bytes object by turning it into a stream\n@@ -195,7 +195,7 @@ def finish_block(block, signet_solution, grind_cmd):\n         headhex = CBlockHeader.serialize(block).hex()\n         cmd = grind_cmd.split(\" \") + [headhex]\n         newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))\n         block.nNonce = newhead.nNonce\n         block.rehash()\n     return block\n@@ -216,7 +216,7 @@ def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n         block.nTime = tmpl[\"mintime\"]\n     block.nBits = int(tmpl[\"bits\"], 16)\n     block.nNonce = 0\n-    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+    block.vtx = [cbtx] + [tx_from_hex(t[\"data\"]) for t in tmpl[\"transactions\"]]\n \n     witnonce = 0\n     witroot = block.calc_witness_merkle_root()\n@@ -274,7 +274,7 @@ def do_genpsbt(args):\n def do_solvepsbt(args):\n     block, signet_solution = do_decode_psbt(sys.stdin.read())\n     block = finish_block(block, signet_solution, args.grind_cmd)\n-    print(ToHex(block))\n+    print(block.serialize().hex())\n \n def nbits_to_target(nbits):\n     shift = (nbits >> 24) & 0xff\n@@ -503,7 +503,7 @@ def do_generate(args):\n         block = finish_block(block, signet_solution, args.grind_cmd)\n \n         # submit block\n-        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=block.serialize().hex().encode('utf8'))\n \n         # report\n         bstr = \"block\" if is_mine else \"backup block\""
      },
      {
        "sha": "e44ce9b57d1c8568416c6b77641b5e895c6064f5",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -6,8 +6,19 @@\n \n import time\n \n-from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n+from test_framework.blocktools import (\n+    NORMAL_GBT_REQUEST_PARAMS,\n+    add_witness_commitment,\n+    create_block,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -89,7 +100,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)]\n         tx1.vout = [CTxOut(value, DUMMY_P2WPKH_SCRIPT)]\n \n-        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(tx1.serialize().hex())[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -102,13 +113,13 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value - self.relayfee * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx2.rehash()\n \n-        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, tx2.serialize().hex())\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n         tx2.nVersion = 1\n \n-        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        self.nodes[0].sendrawtransaction(tx2.serialize().hex())\n \n     # Calculate the median time past of a prior block (\"confirmations\" before\n     # the current tip).\n@@ -193,9 +204,9 @@ def test_sequence_lock_confirmed_inputs(self):\n                 tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n                 value += utxos[j][\"amount\"]*COIN\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n-            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n+            tx_size = len(tx.serialize().hex())//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), DUMMY_P2WPKH_SCRIPT))\n-            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -215,7 +226,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n \n         # Create a mempool tx.\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n-        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1 = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n         tx1.rehash()\n \n         # Anyone-can-spend mempool tx.\n@@ -224,8 +235,8 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n-        tx2 = FromHex(tx2, tx2_raw)\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())[\"hex\"]\n+        tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n         self.nodes[0].sendrawtransaction(tx2_raw)\n@@ -246,10 +257,10 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, tx.serialize().hex())\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n-                node.sendrawtransaction(ToHex(tx))\n+                node.sendrawtransaction(tx.serialize().hex())\n \n             return tx\n \n@@ -299,7 +310,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(tx5.serialize().hex())[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -325,7 +336,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             block.rehash()\n             block.solve()\n             tip = block.sha256\n-            assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(ToHex(block)))\n+            assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(block.serialize().hex()))\n             tmpl = self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n             tmpl['previousblockhash'] = '%x' % tip\n             tmpl['transactions'] = []\n@@ -348,7 +359,7 @@ def test_bip68_not_consensus(self):\n         assert not softfork_active(self.nodes[0], 'csv')\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n-        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1 = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n         tx1.rehash()\n \n         # Make an anyone-can-spend transaction\n@@ -358,11 +369,11 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), DUMMY_P2WPKH_SCRIPT)]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n-        tx2 = FromHex(tx2, tx2_raw)\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())[\"hex\"]\n+        tx2 = tx_from_hex(tx2_raw)\n         tx2.rehash()\n \n-        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        self.nodes[0].sendrawtransaction(tx2.serialize().hex())\n \n         # Now make an invalid spend of tx2 according to BIP68\n         sequence_value = 100 # 100 block relative locktime\n@@ -373,7 +384,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx3.rehash()\n \n-        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, tx3.serialize().hex())\n \n         # make a block that violates bip68; ensure that the tip updates\n         block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS))\n@@ -404,9 +415,9 @@ def test_version2_relay(self):\n         outputs = { self.nodes[1].getnewaddress() : 1.0 }\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n-        tx = FromHex(CTransaction(), rawtxfund)\n+        tx = tx_from_hex(rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "5d8ec2a8da12a24ebc4d5baab5bbc8def365da2e",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -22,7 +22,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.script import (\n     CScript,\n@@ -170,7 +169,7 @@ def _test_coin_stats_index(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n         tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n-        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())['hex']\n         self.nodes[0].sendrawtransaction(tx2_hex)\n \n         # Include both txs in a block\n@@ -207,7 +206,7 @@ def _test_coin_stats_index(self):\n         block_time = self.nodes[0].getblock(tip)['time'] + 1\n         block = create_block(int(tip, 16), cb, block_time)\n         block.solve()\n-        self.nodes[0].submitblock(ToHex(block))\n+        self.nodes[0].submitblock(block.serialize().hex())\n         self.sync_all()\n \n         self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))"
      },
      {
        "sha": "c532300ce2106ed69d4ab3d92a8a7c60965b63a0",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -36,7 +36,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -208,7 +207,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "8ccdf87ff392fe2e03aa9e6f77d01508963d84ac",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -6,8 +6,23 @@\n from decimal import Decimal\n import random\n \n-from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_2,\n+    OP_DROP,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_TRUE,\n+    hash160,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -64,11 +79,11 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n-    txid = from_node.sendrawtransaction(hexstring=ToHex(tx), maxfeerate=0)\n+    txid = from_node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n     unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n     unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n-    return (ToHex(tx), fee)\n+    return (tx.serialize().hex(), fee)\n \n \n def split_inputs(from_node, txins, txouts, initial_split=False):\n@@ -91,10 +106,10 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n-        completetx = ToHex(tx)\n+        completetx = tx.serialize().hex()\n     txid = from_node.sendrawtransaction(hexstring=completetx, maxfeerate=0)\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})"
      },
      {
        "sha": "cedb7b57caa14eb5daf6ce68e748a9cd065dd8ae",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -11,8 +11,12 @@\n import os\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.messages import CBlock, ToHex\n-from test_framework.script import CScript, OP_RETURN, OP_NOP\n+from test_framework.messages import CBlock\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -62,7 +66,7 @@ def mine_large_blocks(node, n):\n         block.solve()\n \n         # Submit to the node\n-        node.submitblock(ToHex(block))\n+        node.submitblock(block.serialize().hex())\n \n         previousblockhash = block.sha256\n         height += 1"
      },
      {
        "sha": "e42f8045dbecf00a77cd106932e123667a02959f",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 42,
        "deletions": 39,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -7,7 +7,14 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, BIP125_SEQUENCE_NUMBER\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+)\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n@@ -17,10 +24,6 @@\n MAX_REPLACEMENT_LIMIT = 100\n \n \n-def txToHex(tx):\n-    return tx.serialize().hex()\n-\n-\n def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n \n@@ -44,7 +47,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(tx2.serialize().hex())\n \n     txid = node.sendrawtransaction(signed_tx['hex'], 0)\n \n@@ -133,7 +136,7 @@ def test_simple_doublespend(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         self.sync_all()\n@@ -142,7 +145,7 @@ def test_simple_doublespend(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(1 * COIN, DUMMY_2_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -151,7 +154,7 @@ def test_simple_doublespend(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n@@ -176,7 +179,7 @@ def test_doublespend_chain(self):\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n-            tx_hex = txToHex(tx)\n+            tx_hex = tx.serialize().hex()\n             txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n             chain_txids.append(txid)\n             prevout = COutPoint(int(txid, 16), 0)\n@@ -186,7 +189,7 @@ def test_doublespend_chain(self):\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - 30 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n@@ -195,7 +198,7 @@ def test_doublespend_chain(self):\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -223,7 +226,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = vout\n-            tx_hex = txToHex(tx)\n+            tx_hex = tx.serialize().hex()\n \n             assert len(tx.serialize()) < 100000\n             txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n@@ -248,15 +251,15 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n - 1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        dbl_tx_hex = txToHex(dbl_tx)\n+        dbl_tx_hex = dbl_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -276,7 +279,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n             dbl_tx = CTransaction()\n             dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n             dbl_tx.vout = [CTxOut(initial_nValue - 2 * fee * n, DUMMY_P2WPKH_SCRIPT)]\n-            dbl_tx_hex = txToHex(dbl_tx)\n+            dbl_tx_hex = dbl_tx.serialize().hex()\n             # This will raise an exception\n             assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n@@ -291,15 +294,15 @@ def test_replacement_feeperkb(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the fee per KB is much lower, so the replacement is\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 999000]))]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -312,7 +315,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n         tx1a.vout = [CTxOut(int(1.1 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         tx1a_txid = int(tx1a_txid, 16)\n@@ -322,7 +325,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0)]\n         tx2.vin.append(CTxIn(COutPoint(tx1a_txid, 0), nSequence=0))\n         tx2.vout = tx1a.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -331,15 +334,15 @@ def test_spends_of_conflicting_outputs(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n         tx1b.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n         tx1b_txid = int(tx1b_txid, 16)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(utxo1, nSequence=0), CTxIn(utxo2, nSequence=0),\n                    CTxIn(COutPoint(tx1b_txid, 0))]\n         tx2.vout = tx1a.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -352,13 +355,13 @@ def test_new_unconfirmed_inputs(self):\n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n         tx1.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1_hex = txToHex(tx1)\n+        tx1_hex = tx1.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx1_hex, 0)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n         tx2.vout = tx1.vout\n-        tx2_hex = txToHex(tx2)\n+        tx2_hex = tx2.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n@@ -381,7 +384,7 @@ def test_too_many_replacements(self):\n         splitting_tx = CTransaction()\n         splitting_tx.vin = [CTxIn(utxo, nSequence=0)]\n         splitting_tx.vout = outputs\n-        splitting_tx_hex = txToHex(splitting_tx)\n+        splitting_tx_hex = splitting_tx.serialize().hex()\n \n         txid = self.nodes[0].sendrawtransaction(splitting_tx_hex, 0)\n         txid = int(txid, 16)\n@@ -391,7 +394,7 @@ def test_too_many_replacements(self):\n             tx_i = CTransaction()\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n             tx_i.vout = [CTxOut(split_value - fee, DUMMY_P2WPKH_SCRIPT)]\n-            tx_i_hex = txToHex(tx_i)\n+            tx_i_hex = tx_i.serialize().hex()\n             self.nodes[0].sendrawtransaction(tx_i_hex, 0)\n \n         # Now create doublespend of the whole lot; should fail.\n@@ -404,7 +407,7 @@ def test_too_many_replacements(self):\n         double_tx = CTransaction()\n         double_tx.vin = inputs\n         double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n-        double_tx_hex = txToHex(double_tx)\n+        double_tx_hex = double_tx.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, 0)\n@@ -413,7 +416,7 @@ def test_too_many_replacements(self):\n         double_tx = CTransaction()\n         double_tx.vin = inputs[0:-1]\n         double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n-        double_tx_hex = txToHex(double_tx)\n+        double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n     def test_opt_in(self):\n@@ -424,7 +427,7 @@ def test_opt_in(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0xffffffff)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # This transaction isn't shown as replaceable\n@@ -434,7 +437,7 @@ def test_opt_in(self):\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -445,14 +448,14 @@ def test_opt_in(self):\n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0xfffffffe)]\n         tx2a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx2a_hex = txToHex(tx2a)\n+        tx2a_hex = tx2a.serialize().hex()\n         tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2b.vout = [CTxOut(int(0.9 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx2b_hex = txToHex(tx2b)\n+        tx2b_hex = tx2b.serialize().hex()\n \n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n@@ -468,7 +471,7 @@ def test_opt_in(self):\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n         tx3a.vout = [CTxOut(int(0.9 * COIN), CScript([b'c'])), CTxOut(int(0.9 * COIN), CScript([b'd']))]\n-        tx3a_hex = txToHex(tx3a)\n+        tx3a_hex = tx3a.serialize().hex()\n \n         tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n \n@@ -478,12 +481,12 @@ def test_opt_in(self):\n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n         tx3b.vout = [CTxOut(int(0.5 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx3b_hex = txToHex(tx3b)\n+        tx3b_hex = tx3b.serialize().hex()\n \n         tx3c = CTransaction()\n         tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n         tx3c.vout = [CTxOut(int(0.5 * COIN), DUMMY_P2WPKH_SCRIPT)]\n-        tx3c_hex = txToHex(tx3c)\n+        tx3c_hex = tx3c.serialize().hex()\n \n         self.nodes[0].sendrawtransaction(tx3b_hex, 0)\n         # If tx3b was accepted, tx3c won't look like a replacement,\n@@ -500,14 +503,14 @@ def test_prioritised_transactions(self):\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx1a_hex = txToHex(tx1a)\n+        tx1a_hex = tx1a.serialize().hex()\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.001 * COIN), CScript([b'a' * 740000]))]\n-        tx1b_hex = txToHex(tx1b)\n+        tx1b_hex = tx1b.serialize().hex()\n \n         # Verify tx1b cannot replace tx1a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n@@ -526,15 +529,15 @@ def test_prioritised_transactions(self):\n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2a.vout = [CTxOut(1 * COIN, DUMMY_P2WPKH_SCRIPT)]\n-        tx2a_hex = txToHex(tx2a)\n+        tx2a_hex = tx2a.serialize().hex()\n         self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2b.vout = [CTxOut(int(1.01 * COIN), DUMMY_P2WPKH_SCRIPT)]\n         tx2b.rehash()\n-        tx2b_hex = txToHex(tx2b)\n+        tx2b_hex = tx2b.serialize().hex()\n \n         # Verify tx2b cannot replace tx2a.\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)"
      },
      {
        "sha": "42910904d78e85053852e802ee5545f557428076",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test the SegWit changeover logic.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n \n from test_framework.address import (\n     key_to_p2pkh,\n@@ -14,9 +13,34 @@\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n-from test_framework.blocktools import witness_script, send_to_witness\n-from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n+from test_framework.blocktools import (\n+    send_to_witness,\n+    witness_script,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    sha256,\n+    tx_from_hex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_TRUE,\n+    hash160,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -179,7 +203,7 @@ def run_test(self):\n         assert self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False)\n \n         for tx_id in segwit_tx_list:\n-            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            tx = tx_from_hex(self.nodes[2].gettransaction(tx_id)[\"hex\"])\n             assert self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash)\n             assert self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash)\n             assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"]\n@@ -225,12 +249,12 @@ def run_test(self):\n         # tx1 is allowed to appear in the block, but no others.\n         txid1 = send_to_witness(1, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n         hex_tx = self.nodes[0].gettransaction(txid)['hex']\n-        tx = FromHex(CTransaction(), hex_tx)\n+        tx = tx_from_hex(hex_tx)\n         assert tx.wit.is_null()  # This should not be a segwit input\n         assert txid1 in self.nodes[0].getrawmempool()\n \n         tx1_hex = self.nodes[0].gettransaction(txid1)['hex']\n-        tx1 = FromHex(CTransaction(), tx1_hex)\n+        tx1 = tx_from_hex(tx1_hex)\n \n         # Check that wtxid is properly reported in mempool entry (txid1)\n         assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx1.calc_sha256(True))\n@@ -243,9 +267,9 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n-        tx = FromHex(CTransaction(), tx2_hex)\n+        tx = tx_from_hex(tx2_hex)\n         assert not tx.wit.is_null()\n \n         # Check that wtxid is properly reported in mempool entry (txid2)\n@@ -260,7 +284,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n         tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\n         tx.calc_sha256()\n-        txid3 = self.nodes[0].sendrawtransaction(hexstring=ToHex(tx), maxfeerate=0)\n+        txid3 = self.nodes[0].sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n         assert tx.wit.is_null()\n         assert txid3 in self.nodes[0].getrawmempool()\n \n@@ -611,10 +635,8 @@ def p2pkh_address_to_script(self, v):\n     def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n-            txtmp = CTransaction()\n             txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n-            f = BytesIO(hex_str_to_bytes(txraw))\n-            txtmp.deserialize(f)\n+            txtmp = tx_from_hex(txraw)\n             for j in range(len(txtmp.vout)):\n                 tx.vin.append(CTxIn(COutPoint(int('0x' + i, 0), j)))\n         tx.vout.append(CTxOut(0, CScript()))"
      },
      {
        "sha": "99283b69b0cbc1d04b04d9210b95cd7310bc05fd",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -19,7 +19,6 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    ToHex,\n )\n from test_framework.script import (\n     ANNEX_TAG,\n@@ -1306,7 +1305,7 @@ def test_spenders(self, node, spenders, input_counts):\n             # Add change\n             fund_tx.vout.append(CTxOut(balance - 10000, random.choice(host_spks)))\n             # Ask the wallet to sign\n-            ss = BytesIO(bytes.fromhex(node.signrawtransactionwithwallet(ToHex(fund_tx))[\"hex\"]))\n+            ss = BytesIO(bytes.fromhex(node.signrawtransactionwithwallet(fund_tx.serialize().hex())[\"hex\"]))\n             fund_tx.deserialize(ss)\n             # Construct UTXOData entries\n             fund_tx.rehash()"
      },
      {
        "sha": "afc0bdb8c53b85562a2659bb3038e9614c1f9a9c",
        "filename": "test/functional/feature_utxo_set_hash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_utxo_set_hash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/feature_utxo_set_hash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_utxo_set_hash.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.messages import (\n     CBlock,\n     COutPoint,\n-    FromHex,\n+    from_hex,\n )\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n@@ -32,13 +32,13 @@ def test_muhash_implementation(self):\n         # Generate 100 blocks and remove the first since we plan to spend its\n         # coinbase\n         block_hashes = wallet.generate(1) + node.generate(99)\n-        blocks = list(map(lambda block: FromHex(CBlock(), node.getblock(block, False)), block_hashes))\n+        blocks = list(map(lambda block: from_hex(CBlock(), node.getblock(block, False)), block_hashes))\n         blocks.pop(0)\n \n         # Create a spending transaction and mine a block which includes it\n         txid = wallet.send_self_transfer(from_node=node)['txid']\n         tx_block = node.generateblock(output=wallet.get_address(), transactions=[txid])\n-        blocks.append(FromHex(CBlock(), node.getblock(tx_block['hash'], False)))\n+        blocks.append(from_hex(CBlock(), node.getblock(tx_block['hash'], False)))\n \n         # Serialize the outputs that should be in the UTXO set and add them to\n         # a MuHash object"
      },
      {
        "sha": "15f352d68cc65a55cdd9e5b8b65b5c143229da34",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,10 +5,21 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, ADDRESS_BCRT1_P2WSH_OP_TRUE\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.address import (\n+    ADDRESS_BCRT1_P2WSH_OP_TRUE,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.blocktools import (\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.messages import CTransaction, hash256, FromHex\n+from test_framework.messages import (\n+    CTransaction,\n+    hash256,\n+    tx_from_hex,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -393,10 +404,10 @@ def test_sequence(self):\n             bump_info = self.nodes[0].bumpfee(orig_txid)\n             # Mine the pre-bump tx\n             block = create_block(int(self.nodes[0].getbestblockhash(), 16), create_coinbase(self.nodes[0].getblockcount()+1))\n-            tx = FromHex(CTransaction(), raw_tx)\n+            tx = tx_from_hex(raw_tx)\n             block.vtx.append(tx)\n             for txid in more_tx:\n-                tx = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+                tx = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n                 block.vtx.append(tx)\n             add_witness_commitment(block)\n             block.solve()"
      },
      {
        "sha": "1705d957aa03b6147eeaf84db0ebbb0cdeeaabe4",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 27,
        "deletions": 30,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test mempool acceptance of raw transactions.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n import math\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -14,10 +13,10 @@\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n     COutPoint,\n-    CTransaction,\n     CTxOut,\n     MAX_BLOCK_BASE_SIZE,\n     MAX_MONEY,\n+    tx_from_hex,\n )\n from test_framework.script import (\n     hash160,\n@@ -33,7 +32,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    hex_str_to_bytes,\n )\n \n \n@@ -91,8 +89,7 @@ def run_test(self):\n             inputs=[{\"txid\": txid_in_block, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}],  # RBF is used later\n             outputs=[{node.getnewaddress(): Decimal('0.3') - fee}],\n         ))['hex']\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n             result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee}}],\n@@ -107,7 +104,7 @@ def run_test(self):\n             outputs=[{node.getnewaddress(): output_amount}],\n             locktime=node.getblockcount() + 2000,  # Can be anything\n         ))['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n+        tx = tx_from_hex(raw_tx_final)\n         fee_expected = coin['amount'] - output_amount\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee_expected}}],\n@@ -126,11 +123,11 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction that replaces a mempool transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\n         tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER + 1  # Now, opt out of RBF\n         raw_tx_0 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n             result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': (2 * fee)}}],\n@@ -141,7 +138,7 @@ def run_test(self):\n         # Send the transaction that replaces the mempool transaction and opts out of replaceability\n         node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n         # take original raw_tx_0\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n         # skip re-signing the tx\n         self.check_mempool_result(\n@@ -151,7 +148,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with missing inputs, that never existed')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vin[0].prevout = COutPoint(hash=int('ff' * 32, 16), n=14)\n         # skip re-signing the tx\n         self.check_mempool_result(\n@@ -160,7 +157,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with missing inputs, that existed once in the past')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx = tx_from_hex(raw_tx_0)\n         tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n         raw_tx_1 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, maxfeerate=0)\n@@ -190,7 +187,7 @@ def run_test(self):\n             inputs=[{'txid': txid_spend_both, 'vout': 0}],\n             outputs=[{node.getnewaddress(): 0.05}],\n         ))['hex']\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal('0.1') - Decimal('0.05')}}],\n@@ -199,25 +196,25 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with no outputs')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout = []\n         # Skip re-signing the transaction for context independent checks from now on\n-        # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])))\n+        # tx = tx_from_hex(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-empty'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A really large transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin = [tx.vin[0]] * math.ceil(MAX_BLOCK_BASE_SIZE / len(tx.vin[0].serialize()))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-oversize'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with negative output value')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].nValue *= -1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-negative'}],\n@@ -226,15 +223,15 @@ def run_test(self):\n \n         # The following two validations prevent overflow of the output amounts (see CVE-2010-5139).\n         self.log.info('A transaction with too large output value')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].nValue = MAX_MONEY + 1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-vout-toolarge'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with too large sum of output values')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout = [tx.vout[0]] * 2\n         tx.vout[0].nValue = MAX_MONEY\n         self.check_mempool_result(\n@@ -243,7 +240,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction with duplicate inputs')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin = [tx.vin[0]] * 2\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-inputs-duplicate'}],\n@@ -253,26 +250,26 @@ def run_test(self):\n         self.log.info('A coinbase transaction')\n         # Pick the input of the first tx we signed, so it has to be a coinbase tx\n         raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_coinbase_spent)))\n+        tx = tx_from_hex(raw_tx_coinbase_spent)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'coinbase'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('Some nonstandard transactions')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.nVersion = 3  # A version currently non-standard\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'version'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].scriptPubKey = CScript([OP_0])  # Some non-standard script\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptpubkey'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         key = ECKey()\n         key.generate()\n         pubkey = key.get_pubkey().get_bytes()\n@@ -281,34 +278,34 @@ def run_test(self):\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bare-multisig'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-not-pushonly'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].scriptSig = CScript([b'a' * 1648]) # Some too large scriptSig (>1650 bytes)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-size'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'tx-size'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0] = output_p2sh_burn\n         tx.vout[0].nValue -= 1  # Make output smaller, such that it is dust for our policy\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'dust'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'\\xff'])\n         tx.vout = [tx.vout[0]] * 2\n         self.check_mempool_result(\n@@ -317,7 +314,7 @@ def run_test(self):\n         )\n \n         self.log.info('A timelocked transaction')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].nSequence -= 1  # Should be non-max, so locktime is not ignored\n         tx.nLockTime = node.getblockcount() + 1\n         self.check_mempool_result(\n@@ -326,7 +323,7 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction that is locked by BIP68 sequence logic')\n-        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx = tx_from_hex(raw_tx_reference)\n         tx.vin[0].nSequence = 2  # We could include it in the second block mined from now, but not the very next one\n         # Can skip re-signing the tx because of early rejection\n         self.check_mempool_result("
      },
      {
        "sha": "b4e662de2e2a830ab9b248de876be41cd0f90b29",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 55,
        "deletions": 10,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -15,11 +15,56 @@\n     add_witness_commitment,\n     create_block,\n )\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n-from test_framework.p2p import p2p_lock, P2PInterface\n-from test_framework.script import CScript, OP_TRUE, OP_DROP\n+from test_framework.messages import (\n+    BlockTransactions,\n+    BlockTransactionsRequest,\n+    CBlock,\n+    CBlockHeader,\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    from_hex,\n+    HeaderAndShortIDs,\n+    MSG_BLOCK,\n+    MSG_CMPCT_BLOCK,\n+    MSG_WITNESS_FLAG,\n+    NODE_NETWORK,\n+    P2PHeaderAndShortIDs,\n+    PrefilledTransaction,\n+    calculate_shortid,\n+    msg_block,\n+    msg_blocktxn,\n+    msg_cmpctblock,\n+    msg_getblocktxn,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_no_witness_block,\n+    msg_no_witness_blocktxn,\n+    msg_sendcmpct,\n+    msg_sendheaders,\n+    msg_tx,\n+    ser_uint256,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_DROP,\n+    OP_TRUE,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, softfork_active\n+from test_framework.util import (\n+    assert_equal,\n+    softfork_active,\n+)\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):\n@@ -257,7 +302,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         for _ in range(num_transactions):\n             txid = node.sendtoaddress(address, 0.1)\n             hex_tx = node.gettransaction(txid)[\"hex\"]\n-            tx = FromHex(CTransaction(), hex_tx)\n+            tx = tx_from_hex(hex_tx)\n             if not tx.wit.is_null():\n                 segwit_tx_generated = True\n \n@@ -276,7 +321,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         block_hash = int(node.generate(1)[0], 16)\n \n         # Store the raw block in our internal format.\n-        block = FromHex(CBlock(), node.getblock(\"%064x\" % block_hash, False))\n+        block = from_hex(CBlock(), node.getblock(\"%064x\" % block_hash, False))\n         for tx in block.vtx:\n             tx.calc_sha256()\n         block.rehash()\n@@ -569,7 +614,7 @@ def test_getblocktxn_handler(self, test_node):\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n             block_hash = node.getblockhash(current_height)\n-            block = FromHex(CBlock(), node.getblock(block_hash, False))\n+            block = from_hex(CBlock(), node.getblock(block_hash, False))\n \n             msg = msg_getblocktxn()\n             msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])\n@@ -672,9 +717,9 @@ def test_end_to_end_block_relay(self, listeners):\n \n         [l.clear_block_announcement() for l in listeners]\n \n-        # ToHex() won't serialize with witness, but this block has no witnesses\n-        # anyway. TODO: repeat this test with witness tx's to a segwit node.\n-        node.submitblock(ToHex(block))\n+        # serialize without witness (this block has no witnesses anyway).\n+        # TODO: repeat this test with witness tx's to a segwit node.\n+        node.submitblock(block.serialize().hex())\n \n         for l in listeners:\n             l.wait_until(lambda: \"cmpctblock\" in l.last_message, timeout=30)"
      },
      {
        "sha": "52a47c9bc2ce1ffd22ddd0bd239c12db6a206d7a",
        "filename": "test/functional/p2p_dos_header_tree.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_dos_header_tree.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_dos_header_tree.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_dos_header_tree.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.messages import (\n     CBlockHeader,\n-    FromHex,\n+    from_hex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -42,8 +42,8 @@ def run_test(self):\n         self.headers = [l for l in h_lines if not l.startswith(FORK_PREFIX)]\n         self.headers_fork = [l[len(FORK_PREFIX):] for l in h_lines if l.startswith(FORK_PREFIX)]\n \n-        self.headers = [FromHex(CBlockHeader(), h) for h in self.headers]\n-        self.headers_fork = [FromHex(CBlockHeader(), h) for h in self.headers_fork]\n+        self.headers = [from_hex(CBlockHeader(), h) for h in self.headers]\n+        self.headers_fork = [from_hex(CBlockHeader(), h) for h in self.headers_fork]\n \n         self.log.info(\"Feed all non-fork headers, including and up to the first checkpoint\")\n         peer_checkpoint = self.nodes[0].add_p2p_connection(P2PInterface())"
      },
      {
        "sha": "35bce7c69e4aaf474249afa6ead814c8a80a78ea",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -20,7 +20,11 @@\n     create_block,\n     create_coinbase,\n )\n-from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+from test_framework.messages import (\n+    msg_pong,\n+    msg_tx,\n+    tx_from_hex,\n+)\n from test_framework.p2p import P2PDataStore, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -89,7 +93,7 @@ def run_test(self):\n                     'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n                 }],\n             )['hex']\n-            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            txpeer.send_message(msg_tx(tx_from_hex(sigtx)))\n             protected_peers.add(current_peer)\n \n         self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")"
      },
      {
        "sha": "594a28d6626583451623ea076e9ca07e2a7637a9",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -9,9 +9,8 @@\n \n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.messages import (\n-    CTransaction,\n     CTxInWitness,\n-    FromHex,\n+    tx_from_hex,\n )\n from test_framework.p2p import P2PDataStore\n from test_framework.script import (\n@@ -105,8 +104,7 @@ def check_tx_relay(self):\n         p2p_rebroadcast_wallet = self.nodes[1].add_p2p_connection(P2PDataStore())\n \n         self.log.debug(\"Send a tx from the wallet initially\")\n-        tx = FromHex(\n-            CTransaction(),\n+        tx = tx_from_hex(\n             self.nodes[0].createrawtransaction(\n                 inputs=[{\n                     'txid': block_op_true['tx'][0],"
      },
      {
        "sha": "95c7aec3181323c2e95c68048c7876f2e579ccee",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -40,8 +40,8 @@\n     ser_uint256,\n     ser_vector,\n     sha256,\n+    tx_from_hex,\n     uint256_from_str,\n-    FromHex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -2122,14 +2122,14 @@ def serialize(self):\n         unspent = next(u for u in self.nodes[0].listunspent() if u['spendable'] and u['address'].startswith('bcrt'))\n \n         raw = self.nodes[0].createrawtransaction([{\"txid\": unspent['txid'], \"vout\": unspent['vout']}], {self.nodes[0].getnewaddress(): 1})\n-        tx = FromHex(CTransaction(), raw)\n+        tx = tx_from_hex(raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, hexstring=serialize_with_bogus_witness(tx).hex(), iswitness=True)\n         with self.nodes[0].assert_debug_log(['Superfluous witness record']):\n             self.test_node.send_and_ping(msg_bogus_tx(tx))\n         raw = self.nodes[0].signrawtransactionwithwallet(raw)\n         assert raw['complete']\n         raw = raw['hex']\n-        tx = FromHex(CTransaction(), raw)\n+        tx = tx_from_hex(raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, hexstring=serialize_with_bogus_witness(tx).hex(), iswitness=True)\n         with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n             self.test_node.send_and_ping(msg_bogus_tx(tx))"
      },
      {
        "sha": "3e962b4450ff949b8a2bc23f8fc8e75f7ba14a6a",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -8,13 +8,12 @@\n \n from test_framework.messages import (\n     CInv,\n-    CTransaction,\n-    FromHex,\n     MSG_TX,\n     MSG_TYPE_MASK,\n     MSG_WTX,\n     msg_inv,\n     msg_notfound,\n+    tx_from_hex,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -100,7 +99,7 @@ def test_inv_block(self):\n             hexstring=tx,\n             privkeys=[self.nodes[0].get_deterministic_priv_key().key],\n         )['hex']\n-        ctx = FromHex(CTransaction(), tx)\n+        ctx = tx_from_hex(tx)\n         txid = int(ctx.rehash(), 16)\n \n         self.log.info("
      },
      {
        "sha": "ac430f5b39e3250a2c71808ab1ac7f1d2e25da57",
        "filename": "test/functional/rpc_addresses_deprecation.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_addresses_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_addresses_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_addresses_deprecation.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of reqSigs and addresses RPC fields.\"\"\"\n \n-from io import BytesIO\n-\n-from test_framework.messages import CTransaction\n+from test_framework.messages import (\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -35,8 +35,7 @@ def test_addresses_deprecation(self):\n         signed = node.signrawtransactionwithwallet(raw)['hex']\n \n         # This transaction is derived from test/util/data/txcreatemultisig1.json\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(signed)))\n+        tx = tx_from_hex(signed)\n         tx.vout[0].scriptPubKey = hex_str_to_bytes(\"522102a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff39721021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d2102df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb48553ae\")\n         tx_signed = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid = node.sendrawtransaction(hexstring=tx_signed, maxfeerate=0)"
      },
      {
        "sha": "90715cae2689b5d83563f63a812b69c9affbdeb4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -31,7 +31,7 @@\n )\n from test_framework.messages import (\n     CBlockHeader,\n-    FromHex,\n+    from_hex,\n     msg_block,\n )\n from test_framework.p2p import P2PInterface\n@@ -314,7 +314,7 @@ def _test_getblockheader(self):\n         header_hex = node.getblockheader(blockhash=besthash, verbose=False)\n         assert_is_hex_string(header_hex)\n \n-        header = FromHex(CBlockHeader(), header_hex)\n+        header = from_hex(CBlockHeader(), header_hex)\n         header.calc_sha256()\n         assert_equal(header.hash, besthash)\n "
      },
      {
        "sha": "f6643c7167febb8ca2b855af7b8dc60f5ec00bba",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -4,11 +4,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n-from test_framework.messages import CTransaction, sha256\n+from test_framework.messages import (\n+    sha256,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, hex_str_to_bytes\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n \n-from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -179,8 +184,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea[ALL] 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75[ALL] 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n-        txSave = CTransaction()\n-        txSave.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        txSave = tx_from_hex(tx)\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'"
      },
      {
        "sha": "4b2ed20958d1ec0b4137657192bde9c99ea25e2d",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,24 +5,22 @@\n \"\"\"RPCs that handle raw transaction packages.\"\"\"\n \n from decimal import Decimal\n-from io import BytesIO\n import random\n \n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n-    CTransaction,\n     CTxInWitness,\n+    tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n     OP_TRUE,\n )\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n class RPCPackagesTest(BitcoinTestFramework):\n@@ -97,9 +95,8 @@ def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_scrip\n             \"amount\": parent_value,\n         }] if parent_locking_script else None\n         signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n-        tx = CTransaction()\n         assert signedtx[\"complete\"]\n-        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        tx = tx_from_hex(signedtx[\"hex\"])\n         return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n \n     def test_independent(self):\n@@ -110,8 +107,7 @@ def test_independent(self):\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n         garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        tx = tx_from_hex(garbage_tx)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n@@ -123,8 +119,7 @@ def test_independent(self):\n         coin = self.coins.pop()\n         tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n                                            {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = CTransaction()\n-        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n@@ -141,8 +136,7 @@ def test_independent(self):\n                                            {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n         tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n         assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = CTransaction()\n-        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n         testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n         assert_equal(testres_high_fee, [\n             {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n@@ -198,9 +192,8 @@ def test_multiple_children(self):\n         rawtx = node.createrawtransaction(inputs, outputs)\n \n         parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        parent_tx = CTransaction()\n         assert parent_signed[\"complete\"]\n-        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n         parent_txid = parent_tx.rehash()\n         assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n@@ -213,8 +206,7 @@ def test_multiple_children(self):\n \n         # Child B\n         rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = CTransaction()\n-        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b = tx_from_hex(rawtx_b)\n         tx_child_b.wit.vtxinwit = [CTxInWitness()]\n         tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n         tx_child_b_hex = tx_child_b.serialize().hex()\n@@ -293,10 +285,8 @@ def test_conflicting(self):\n         rawtx2 = node.createrawtransaction(inputs, output2)\n         signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n         signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = CTransaction()\n-        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n-        tx2 = CTransaction()\n-        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        tx1 = tx_from_hex(signedtx1[\"hex\"])\n+        tx2 = tx_from_hex(signedtx2[\"hex\"])\n         assert signedtx1[\"complete\"]\n         assert signedtx2[\"complete\"]\n \n@@ -327,19 +317,17 @@ def test_rbf(self):\n         raw_replaceable_tx = node.createrawtransaction(inputs, output)\n         signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n         testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = CTransaction()\n-        replaceable_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n         assert_equal(testres_replaceable, [\n             {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n             \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n         # Replacement transaction is identical except has double the fee\n-        replacement_tx = CTransaction()\n-        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n         replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n         signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replacement_tx[\"hex\"])))\n+        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n \n         self.log.info(\"Test that transactions within a package cannot replace each other\")\n         testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])"
      },
      {
        "sha": "db57368eae87cb3f5f38c5bb746125d596cbc9a9",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -14,16 +14,17 @@\n \n from collections import OrderedDict\n from decimal import Decimal\n-from io import BytesIO\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import CTransaction, ToHex\n+from test_framework.messages import (\n+    CTransaction,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n     find_vout_for_address,\n-    hex_str_to_bytes,\n )\n \n \n@@ -127,23 +128,22 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n \n         self.log.info('Check that createrawtransaction accepts an array and object as outputs')\n-        tx = CTransaction()\n         # One output\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))\n         assert_equal(len(tx.vout), 1)\n         assert_equal(\n             tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}]),\n         )\n         # Two outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))\n         assert_equal(len(tx.vout), 2)\n         assert_equal(\n             tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n+        tx = tx_from_hex(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             tx.serialize().hex(),\n@@ -450,14 +450,14 @@ def run_test(self):\n         # As transaction version is unsigned, this should convert to its unsigned equivalent.\n         tx = CTransaction()\n         tx.nVersion = -0x80000000\n-        rawtx = ToHex(tx)\n+        rawtx = tx.serialize().hex()\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x80000000)\n \n         # Test the maximum transaction version number that fits in a signed 32-bit integer.\n         tx = CTransaction()\n         tx.nVersion = 0x7fffffff\n-        rawtx = ToHex(tx)\n+        rawtx = tx.serialize().hex()\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x7fffffff)\n "
      },
      {
        "sha": "ef5d08e7b9803eb62ce32d6c0bbfe5438004d356",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 36,
        "deletions": 11,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,17 +5,44 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.address import check_script, script_to_p2sh, script_to_p2wsh\n+from test_framework.address import (\n+    check_script,\n+    script_to_p2sh,\n+    script_to_p2wsh,\n+)\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_vout_for_address, hex_str_to_bytes\n-from test_framework.messages import sha256, CTransaction, CTxInWitness\n-from test_framework.script import CScript, OP_0, OP_CHECKSIG, OP_CHECKSEQUENCEVERIFY, OP_CHECKLOCKTIMEVERIFY, OP_DROP, OP_TRUE\n-from test_framework.script_util import key_to_p2pkh_script, script_to_p2sh_p2wsh_script, script_to_p2wsh_script\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+    hex_str_to_bytes,\n+)\n+from test_framework.messages import (\n+    CTxInWitness,\n+    sha256,\n+    tx_from_hex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_CHECKLOCKTIMEVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSEQUENCEVERIFY,\n+    OP_DROP,\n+    OP_TRUE,\n+)\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+    script_to_p2sh_p2wsh_script,\n+    script_to_p2wsh_script,\n+)\n from test_framework.wallet_util import bytes_to_wif\n \n-from decimal import Decimal, getcontext\n-from io import BytesIO\n+from decimal import (\n+    Decimal,\n+    getcontext,\n+)\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -265,8 +292,7 @@ def test_signing_with_csv(self):\n         )\n \n         # Set the witness script\n-        ctx = CTransaction()\n-        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx = tx_from_hex(tx)\n         ctx.wit.vtxinwit.append(CTxInWitness())\n         ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n         tx = ctx.serialize_with_witness().hex()\n@@ -301,8 +327,7 @@ def test_signing_with_cltv(self):\n         )\n \n         # Set the witness script\n-        ctx = CTransaction()\n-        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx = tx_from_hex(tx)\n         ctx.wit.vtxinwit.append(CTxInWitness())\n         ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n         tx = ctx.serialize_with_witness().hex()"
      },
      {
        "sha": "67af6b8f8eb3d832c2ebdb00f0b0053fb88d29cc",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,9 +5,15 @@\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.messages import CMerkleBlock, FromHex, ToHex\n+from test_framework.messages import (\n+    CMerkleBlock,\n+    from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n from test_framework.wallet import MiniWallet\n \n \n@@ -88,10 +94,10 @@ def run_test(self):\n         assert txid1 in self.nodes[0].verifytxoutproof(proof)\n         assert txid2 in self.nodes[1].verifytxoutproof(proof)\n \n-        tweaked_proof = FromHex(CMerkleBlock(), proof)\n+        tweaked_proof = from_hex(CMerkleBlock(), proof)\n \n         # Make sure that our serialization/deserialization is working\n-        assert txid1 in self.nodes[0].verifytxoutproof(ToHex(tweaked_proof))\n+        assert txid1 in self.nodes[0].verifytxoutproof(tweaked_proof.serialize().hex())\n \n         # Check to see if we can go up the merkle tree and pass this off as a\n         # single-transaction block\n@@ -100,7 +106,7 @@ def run_test(self):\n         tweaked_proof.txn.vBits = [True] + [False]*7\n \n         for n in self.nodes:\n-            assert not n.verifytxoutproof(ToHex(tweaked_proof))\n+            assert not n.verifytxoutproof(tweaked_proof.serialize().hex())\n \n         # TODO: try more variants, eg transactions at different depths, and\n         # verify that the proofs are invalid"
      },
      {
        "sha": "bc43438810de06f5bf9288020beb794e3471ef52",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -23,12 +23,11 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n-    FromHex,\n-    ToHex,\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n     sha256,\n+    tx_from_hex,\n     uint256_from_str,\n )\n from .script import (\n@@ -79,7 +78,7 @@ def create_block(hashprev=None, coinbase=None, ntime=None, *, version=None, tmpl\n     if txlist:\n         for tx in txlist:\n             if not hasattr(tx, 'calc_sha256'):\n-                tx = FromHex(CTransaction(), tx)\n+                tx = tx_from_hex(tx)\n             block.vtx.append(tx)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n@@ -166,7 +165,7 @@ def create_transaction(node, txid, to_address, *, amount):\n         sign for the output that is being spent.\n     \"\"\"\n     raw_tx = create_raw_transaction(node, txid, to_address, amount=amount)\n-    tx = FromHex(CTransaction(), raw_tx)\n+    tx = tx_from_hex(raw_tx)\n     return tx\n \n def create_raw_transaction(node, txid, to_address, *, amount):\n@@ -243,9 +242,9 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:\n         if (insert_redeem_script):\n-            tx = FromHex(CTransaction(), tx_to_witness)\n+            tx = tx_from_hex(tx_to_witness)\n             tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n-            tx_to_witness = ToHex(tx)\n+            tx_to_witness = tx.serialize().hex()\n \n     return node.sendrawtransaction(tx_to_witness)\n "
      },
      {
        "sha": "504c8c70d431e050fec4a29aee49d531a0892432",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -190,14 +190,20 @@ def ser_string_vector(l):\n     return r\n \n \n-# Deserialize from a hex string representation (eg from RPC)\n-def FromHex(obj, hex_string):\n+def from_hex(obj, hex_string):\n+    \"\"\"Deserialize from a hex string representation (e.g. from RPC)\n+\n+    Note that there is no complementary helper like e.g. `to_hex` for the\n+    inverse operation. To serialize a message object to a hex string, simply\n+    use obj.serialize().hex()\"\"\"\n     obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n     return obj\n \n-# Convert a binary-serializable object to hex (eg for submission via RPC)\n-def ToHex(obj):\n-    return obj.serialize().hex()\n+\n+def tx_from_hex(hex_string):\n+    \"\"\"Deserialize from hex string to a transaction object\"\"\"\n+    return from_hex(CTransaction(), hex_string)\n+\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n "
      },
      {
        "sha": "35dbfbba8dc576f3d25c3e9d5be9813aa1293b52",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -19,7 +19,6 @@\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n-from io import BytesIO\n from typing import Callable, Optional\n \n logger = logging.getLogger(\"TestFramework.utils\")\n@@ -528,16 +527,15 @@ def gen_return_txouts():\n def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n     addr = node.getnewaddress()\n     txids = []\n-    from .messages import CTransaction\n+    from .messages import tx_from_hex\n     for _ in range(num):\n         t = utxos.pop()\n         inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n         outputs = {}\n         change = t['amount'] - fee\n         outputs[addr] = satoshi_round(change)\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+        tx = tx_from_hex(rawtx)\n         for txout in txouts:\n             tx.vout.append(txout)\n         newtx = tx.serialize().hex()"
      },
      {
        "sha": "c04986038dd93178fc339dbf56de76419c3cc383",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -14,17 +14,23 @@\n make assumptions about execution order.\n \"\"\"\n from decimal import Decimal\n-import io\n \n-from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+    send_to_witness,\n+)\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    hex_str_to_bytes,\n )\n \n WALLET_PASSPHRASE = \"test\"\n@@ -576,9 +582,7 @@ def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n \n \n def submit_block_with_tx(node, tx):\n-    ctx = CTransaction()\n-    ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n-\n+    ctx = tx_from_hex(tx)\n     tip = node.getbestblockhash()\n     height = node.getblockcount() + 1\n     block_time = node.getblockheader(tip)[\"mediantime\"] + 1"
      },
      {
        "sha": "d9d135a98675e686cd09419235352dd6cd341eaa",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -6,7 +6,9 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.messages import CTransaction, FromHex, ToHex\n+from test_framework.messages import (\n+    tx_from_hex,\n+)\n from test_framework.util import (\n     assert_approx,\n     assert_equal,\n@@ -154,10 +156,10 @@ def run_test(self):\n         self.log.info(\"Fill a wallet with 10,000 outputs corresponding to the same scriptPubKey\")\n         for _ in range(5):\n             raw_tx = self.nodes[0].createrawtransaction([{\"txid\":\"0\"*64, \"vout\":0}], [{addr2[0]: 0.05}])\n-            tx = FromHex(CTransaction(), raw_tx)\n+            tx = tx_from_hex(raw_tx)\n             tx.vin = []\n             tx.vout = [tx.vout[0]] * 2000\n-            funded_tx = self.nodes[0].fundrawtransaction(ToHex(tx))\n+            funded_tx = self.nodes[0].fundrawtransaction(tx.serialize().hex())\n             signed_tx = self.nodes[0].signrawtransactionwithwallet(funded_tx['hex'])\n             self.nodes[0].sendrawtransaction(signed_tx['hex'])\n             self.nodes[0].generate(1)"
      },
      {
        "sha": "8b503f5971ba8b43feba7ae3bef8e133edab8b98",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -4,22 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\"\n from decimal import Decimal\n-from io import BytesIO\n \n-from test_framework.messages import COIN, CTransaction\n+from test_framework.messages import (\n+    COIN,\n+    tx_from_hex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n-def tx_from_hex(hexstring):\n-    tx = CTransaction()\n-    f = BytesIO(hex_str_to_bytes(hexstring))\n-    tx.deserialize(f)\n-    return tx\n-\n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2"
      },
      {
        "sha": "37dee219e733d743cbd9288b7c5d630a6ecf7df5",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -5,8 +5,10 @@\n \"\"\"Test that the wallet resends transactions periodically.\"\"\"\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import ToHex\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -48,7 +50,7 @@ def run_test(self):\n         block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n         block.rehash()\n         block.solve()\n-        node.submitblock(ToHex(block))\n+        node.submitblock(block.serialize().hex())\n \n         # Set correct m_best_block_time, which is used in ResendWalletTransactions\n         node.syncwithvalidationinterfacequeue()"
      },
      {
        "sha": "76b39201e310faa748e530a922cc0930117db1fa",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a59166a1879c1dd5b3a301847961f4b3f17742/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "patch": "@@ -4,12 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n-import io\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n )\n-from test_framework.messages import CTransaction, COIN\n+from test_framework.messages import (\n+    COIN,\n+    tx_from_hex,\n+)\n \n \n class TxnMallTest(BitcoinTestFramework):\n@@ -71,8 +73,7 @@ def run_test(self):\n         clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs, clone_locktime)\n \n         # createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n-        clone_tx = CTransaction()\n-        clone_tx.deserialize(io.BytesIO(bytes.fromhex(clone_raw)))\n+        clone_tx = tx_from_hex(clone_raw)\n         if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_tx.vout[0].nValue != 40*COIN or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_tx.vout[0].nValue == 40*COIN):\n             (clone_tx.vout[0], clone_tx.vout[1]) = (clone_tx.vout[1], clone_tx.vout[0])\n "
      }
    ]
  },
  {
    "sha": "e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTllYTg3OTU0ZmE5NGI4OWI3ZTdhZWMzZDEzNWEwOTVmMzJhNGI4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:53:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T10:54:00Z"
      },
      "message": "Merge bitcoin/bitcoin#22311: test: Add missing syncwithvalidationinterfacequeue in p2p_blockfilters\n\nfadddd13eef4428f5fa7237583d4be41a9335cd9 test: Add missing syncwithvalidationinterfacequeue (MarcoFalke)\nfaa211fc6e3d4984b8edff1d762dd4cba205d982 test: Misc cleanup (MarcoFalke)\nfa1668bf5084a190b26b022b9e625a7be3defa6e test: Run pep-8 (MarcoFalke)\nfacd97ae0f0d816107aa3bc9de321244200636a0 scripted-diff: Renames (MarcoFalke)\n\nPull request description:\n\n  The index on the block filters is running in the background on the validation interface. To avoid intermittent test failures, it needs to be synced.\n\n  Also other cleanups.\n\nACKs for top commit:\n  lsilva01:\n    Tested ACK https://github.com/bitcoin/bitcoin/pull/22311/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9 on Ubuntu 20.04\n\nTree-SHA512: d858405db426a2f9d5620059dd88bcead4e3fba3ccc6bd8023f624b768fbcfa2203246fb0b2db620490321730d990f0e78063b21a26988c969cb126d4bd697bd",
      "tree": {
        "sha": "34e453952cf4af2727b2c3a78cbc34e8b2b8e604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34e453952cf4af2727b2c3a78cbc34e8b2b8e604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiwDgwAm2rsMzVF+8W6nBWfKCFi1utTghkc/hg+6oUaI+KITByilXMkduSnG/2F\nUT13G7Q9aTsik7GqTbXoTDJ9qRzG95dSwu5spO+/d5xlM3+jO87+pZz/wjj12aGf\nU/gQGP7a2/P8bUnm3PL6Ipas9IgHTvxlnBh9qmWhTz/JKWphH/EpGI0yeZd2lmAA\nYmqBJpvwQN2ZNUqU+F/fNeKTiTo3gX2XmvE/n+i+hSKBJpgQ6pF+R+3q07AJMy1P\nZJOeBFLvGSocjU0Whxlbukt3pOATb56LiS9Zw939I9nQu/Z9udbJmQLOaI0Lq8Ns\nus85oUHGRcsiI3M8BfC4KPKb8Qx8R9B9uvBAdpiEekNPX4wYqlGQO2rB/J0d4+oW\nnOJ7patA5JxSAfV1hJEFbDeC3MT/0CjA9VDsZ5Y5bR/xFNWPt4m7NoDsKxAu7UyT\nyaEQ5x2Frrlt+Wcz/Le4DcFxetx32QN6PRpcjnZ4MmmZv3aPgixjFx0paMHJi2Ef\nqD/fh4ey\n=+kCd\n-----END PGP SIGNATURE-----",
        "payload": "tree 34e453952cf4af2727b2c3a78cbc34e8b2b8e604\nparent d6a59166a1879c1dd5b3a301847961f4b3f17742\nparent fadddd13eef4428f5fa7237583d4be41a9335cd9\nauthor MarcoFalke <falke.marco@gmail.com> 1624531985 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624532040 +0200\n\nMerge bitcoin/bitcoin#22311: test: Add missing syncwithvalidationinterfacequeue in p2p_blockfilters\n\nfadddd13eef4428f5fa7237583d4be41a9335cd9 test: Add missing syncwithvalidationinterfacequeue (MarcoFalke)\nfaa211fc6e3d4984b8edff1d762dd4cba205d982 test: Misc cleanup (MarcoFalke)\nfa1668bf5084a190b26b022b9e625a7be3defa6e test: Run pep-8 (MarcoFalke)\nfacd97ae0f0d816107aa3bc9de321244200636a0 scripted-diff: Renames (MarcoFalke)\n\nPull request description:\n\n  The index on the block filters is running in the background on the validation interface. To avoid intermittent test failures, it needs to be synced.\n\n  Also other cleanups.\n\nACKs for top commit:\n  lsilva01:\n    Tested ACK https://github.com/bitcoin/bitcoin/pull/22311/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9 on Ubuntu 20.04\n\nTree-SHA512: d858405db426a2f9d5620059dd88bcead4e3fba3ccc6bd8023f624b768fbcfa2203246fb0b2db620490321730d990f0e78063b21a26988c969cb126d4bd697bd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59ea87954fa94b89b7e7aec3d135a095f32a4b8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a59166a1879c1dd5b3a301847961f4b3f17742",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6a59166a1879c1dd5b3a301847961f4b3f17742"
      },
      {
        "sha": "fadddd13eef4428f5fa7237583d4be41a9335cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadddd13eef4428f5fa7237583d4be41a9335cd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadddd13eef4428f5fa7237583d4be41a9335cd9"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 50,
      "deletions": 48
    },
    "files": [
      {
        "sha": "63fc2a98d4f621b5c51628fca6070c09a5ec76cb",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 50,
        "deletions": 48,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e59ea87954fa94b89b7e7aec3d135a095f32a4b8/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e59ea87954fa94b89b7e7aec3d135a095f32a4b8/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
        "patch": "@@ -24,7 +24,7 @@\n     assert_equal,\n )\n \n-class CFiltersClient(P2PInterface):\n+class FiltersClient(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         # Store the cfilters received.\n@@ -39,6 +39,7 @@ def on_cfilter(self, message):\n         \"\"\"Store cfilters received in a list.\"\"\"\n         self.cfilters.append(message)\n \n+\n class CompactFiltersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -51,8 +52,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n-        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n-        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+        peer_0 = self.nodes[0].add_p2p_connection(FiltersClient())\n+        peer_1 = self.nodes[1].add_p2p_connection(FiltersClient())\n \n         # Nodes 0 & 1 share the same first 999 blocks in the chain.\n         self.nodes[0].generate(999)\n@@ -61,16 +62,16 @@ def run_test(self):\n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n         self.disconnect_nodes(0, 1)\n \n-        self.nodes[0].generate(1)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n-        stale_block_hash = self.nodes[0].getblockhash(1000)\n+        stale_block_hash = self.nodes[0].generate(1)[0]\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n+        assert_equal(self.nodes[0].getblockcount(), 1000)\n \n         self.nodes[1].generate(1001)\n-        self.wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+        assert_equal(self.nodes[1].getblockcount(), 2000)\n \n         # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n-        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n-        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+        assert peer_0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert peer_1.nServices & NODE_COMPACT_FILTERS == 0\n \n         # Check that the localservices is as expected.\n         assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n@@ -79,17 +80,18 @@ def run_test(self):\n         self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n-        node0.send_and_ping(message=request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(message=request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n         assert_equal(len(response.headers), 1)\n \n         self.log.info(\"Reorg node 0 to a new chain.\")\n         self.connect_nodes(0, 1)\n         self.sync_blocks(timeout=600)\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n \n         main_block_hash = self.nodes[0].getblockhash(1000)\n         assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n@@ -98,74 +100,73 @@ def run_test(self):\n         tip_hash = self.nodes[0].getbestblockhash()\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(tip_hash, 16)\n+            stop_hash=int(tip_hash, 16),\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n         assert_equal(response.filter_type, request.filter_type)\n         assert_equal(response.stop_hash, request.stop_hash)\n \n         main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n         tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)],\n         )\n \n         self.log.info(\"Check that peers can fetch cfcheckpt on stale chain.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfcheckpt']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfcheckpt']\n \n         stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n         assert_equal(\n             response.headers,\n-            [int(header, 16) for header in (stale_cfcheckpt,)]\n+            [int(header, 16) for header in (stale_cfcheckpt, )],\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(main_block_hash, 16)\n+            stop_hash=int(main_block_hash, 16),\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         main_cfhashes = response.hashes\n         assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(main_cfcheckpt, 16)\n+            int(main_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n         request = msg_getcfheaders(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n-        node0.send_and_ping(request)\n-        response = node0.last_message['cfheaders']\n+        peer_0.send_and_ping(request)\n+        response = peer_0.last_message['cfheaders']\n         stale_cfhashes = response.hashes\n         assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n-            int(stale_cfcheckpt, 16)\n+            int(stale_cfcheckpt, 16),\n         )\n \n         self.log.info(\"Check that peers can fetch cfilters.\")\n         stop_hash = self.nodes[0].getblockhash(10)\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1,\n-            stop_hash=int(stop_hash, 16)\n+            stop_hash=int(stop_hash, 16),\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_and_ping(request)\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 10)\n \n         self.log.info(\"Check that cfilter responses are correct.\")\n@@ -180,11 +181,10 @@ def run_test(self):\n         request = msg_getcfilters(\n             filter_type=FILTER_TYPE_BASIC,\n             start_height=1000,\n-            stop_hash=int(stale_block_hash, 16)\n+            stop_hash=int(stale_block_hash, 16),\n         )\n-        node0.send_message(request)\n-        node0.sync_with_ping()\n-        response = node0.pop_cfilters()\n+        peer_0.send_and_ping(request)\n+        response = peer_0.pop_cfilters()\n         assert_equal(len(response), 1)\n \n         cfilter = response[0]\n@@ -197,42 +197,42 @@ def run_test(self):\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=1000,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n         ]\n         for request in requests:\n-            node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n-            node1.send_message(request)\n-            node1.wait_for_disconnect()\n+            peer_1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+            peer_1.send_message(request)\n+            peer_1.wait_for_disconnect()\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n             # Requesting too many filters results in disconnection.\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting too many filter headers results in disconnection.\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,\n                 start_height=0,\n-                stop_hash=int(tip_hash, 16)\n+                stop_hash=int(tip_hash, 16),\n             ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n-                stop_hash=int(main_block_hash, 16)\n+                stop_hash=int(main_block_hash, 16),\n             ),\n             # Requesting unknown hash results in disconnection.\n             msg_getcfcheckpt(\n@@ -241,9 +241,10 @@ def run_test(self):\n             ),\n         ]\n         for request in requests:\n-            node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-            node0.send_message(request)\n-            node0.wait_for_disconnect()\n+            peer_0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+            peer_0.send_message(request)\n+            peer_0.wait_for_disconnect()\n+\n \n def compute_last_header(prev_header, hashes):\n     \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n@@ -252,5 +253,6 @@ def compute_last_header(prev_header, hashes):\n         header = hash256(ser_uint256(filter_hash) + header)\n     return uint256_from_str(header)\n \n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      }
    ]
  },
  {
    "sha": "b7565c708dc1c334aea12ab91a7c67695af802f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzU2NWM3MDhkYzFjMzM0YWVhMTJhYjkxYTdjNjc2OTVhZjgwMmY4",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-24T11:38:32Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-24T11:38:39Z"
      },
      "message": "Merge bitcoin/bitcoin#22250: doc: add basic I2P documentation\n\n78cdab1ad2e85176784e4e1230622f42acd20149 doc: sort entries in doc/README.md#Miscellaneous alphabetically (Vasil Dimov)\ncad487bcfa829b7e20a0aafcb9a21eb55d5d1528 doc: add basic I2P documentation (Vasil Dimov)\n\nPull request description:\n\n  Add basic I2P documentation to help users to start using I2P and Bitcoin Core.\n\nACKs for top commit:\n  jonatack:\n    ACK 78cdab1ad2e85176784e4e1230622f42acd20149\n  laanwj:\n    ACK 78cdab1ad2e85176784e4e1230622f42acd20149\n\nTree-SHA512: 71cffc9419338a21cb9e811ee9463d6d09eef1a2a73190f766523bc1642a1f58984d5b2ab13da9b6560387ac9f431aace8bc7ae9b776585ecd3e3c1ff6af8e8d",
      "tree": {
        "sha": "7a16e64e44d3a5cd8286142914fe0e0612984b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a16e64e44d3a5cd8286142914fe0e0612984b78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7565c708dc1c334aea12ab91a7c67695af802f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDUbr8ACgkQHkrtYphs\n0l0A4gf/YKnbPMt8lVnzqunnCAjoT0aS10FbBWIxrnZDIZKzvIEObu7YFz0VGQak\n7J83VfkU9nvazvr23PGfi7oT1yCiKwJGVr8bxAVcH4F8KeUDoFZvej36D+usC7TN\nMK2xTDhU6tsW6m6PSkHSPDftRZVDNYoh/3cN8WCZFXzlDNVsoHGPcRSC7f2iUU8p\nGGGlu7H7LlF7lMi66b5aAZJuYIowMw2I0C95PshkRNtPTA5Y/ANIznWFtbM69hND\nHlEBjkle5i4z3idL09CV8sV14or7ZSTYOzMY0zG04lg6dko9o8zG2bIoLck8iiWL\ntg0kauxcOXl8ij2/erO8b5tfXcOvvQ==\n=YGtl\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICq46qRGG7cQv8rgF6/R/OeYG4aPb0EI54kbf25QKAUYCP/wEANNHsT216MM\nO8nmRhv5W1sI8QRg1G7G8AgzuYx0ziIseACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEEhMPv5lyrrD13XSED61hHwI\n8QRg1G7G8AiOBEwywvE49wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wENVEmzpdZdTbejketvA7f5kI8QRg1G7H8Aixt63Fz5mQ\neACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDgp+O+BOzQs5puRFtfmx3sCPEEYNRux/AIyPPJKbhhIQQAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7a16e64e44d3a5cd8286142914fe0e0612984b78\nparent e59ea87954fa94b89b7e7aec3d135a095f32a4b8\nparent 78cdab1ad2e85176784e4e1230622f42acd20149\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624534712 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624534719 +0200\n\nMerge bitcoin/bitcoin#22250: doc: add basic I2P documentation\n\n78cdab1ad2e85176784e4e1230622f42acd20149 doc: sort entries in doc/README.md#Miscellaneous alphabetically (Vasil Dimov)\ncad487bcfa829b7e20a0aafcb9a21eb55d5d1528 doc: add basic I2P documentation (Vasil Dimov)\n\nPull request description:\n\n  Add basic I2P documentation to help users to start using I2P and Bitcoin Core.\n\nACKs for top commit:\n  jonatack:\n    ACK 78cdab1ad2e85176784e4e1230622f42acd20149\n  laanwj:\n    ACK 78cdab1ad2e85176784e4e1230622f42acd20149\n\nTree-SHA512: 71cffc9419338a21cb9e811ee9463d6d09eef1a2a73190f766523bc1642a1f58984d5b2ab13da9b6560387ac9f431aace8bc7ae9b776585ecd3e3c1ff6af8e8d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7565c708dc1c334aea12ab91a7c67695af802f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7565c708dc1c334aea12ab91a7c67695af802f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7565c708dc1c334aea12ab91a7c67695af802f8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59ea87954fa94b89b7e7aec3d135a095f32a4b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e59ea87954fa94b89b7e7aec3d135a095f32a4b8"
      },
      {
        "sha": "78cdab1ad2e85176784e4e1230622f42acd20149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78cdab1ad2e85176784e4e1230622f42acd20149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78cdab1ad2e85176784e4e1230622f42acd20149"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 75,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45e7983038bc7c36c696a79d011e3ba21c9d2a45",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7565c708dc1c334aea12ab91a7c67695af802f8/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7565c708dc1c334aea12ab91a7c67695af802f8/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=b7565c708dc1c334aea12ab91a7c67695af802f8",
        "patch": "@@ -76,12 +76,13 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n+- [I2P Support](i2p.md)\n+- [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [PSBT support](psbt.md)\n - [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n-- [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n-- [PSBT support](psbt.md)\n \n License\n ---------------------"
      },
      {
        "sha": "8b4607208a8ef4337d1141854b3cd01173bbaaa5",
        "filename": "doc/i2p.md",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7565c708dc1c334aea12ab91a7c67695af802f8/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7565c708dc1c334aea12ab91a7c67695af802f8/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=b7565c708dc1c334aea12ab91a7c67695af802f8",
        "patch": "@@ -0,0 +1,72 @@\n+# I2P support in Bitcoin Core\n+\n+It is possible to run Bitcoin Core as an\n+[I2P (Invisible Internet Project)](https://en.wikipedia.org/wiki/I2P)\n+service and connect to such services.\n+\n+This [glossary](https://geti2p.net/en/about/glossary) may be useful to get\n+started with I2P terminology.\n+\n+## Run Bitcoin Core with an I2P router (proxy)\n+\n+A running I2P router (proxy) with [SAM](https://geti2p.net/en/docs/api/samv3)\n+enabled is required (there is an [official one](https://geti2p.net) and\n+[a few alternatives](https://en.wikipedia.org/wiki/I2P#Routers)). Notice the IP\n+address and port the SAM proxy is listening to; usually, it is\n+`127.0.0.1:7656`. Once it is up and running with SAM enabled, use the following\n+Bitcoin Core options:\n+\n+```\n+-i2psam=<ip:port>\n+     I2P SAM proxy to reach I2P peers and accept I2P connections (default:\n+     none)\n+\n+-i2pacceptincoming\n+     If set and -i2psam is also set then incoming I2P connections are\n+     accepted via the SAM proxy. If this is not set but -i2psam is set\n+     then only outgoing connections will be made to the I2P network.\n+     Ignored if -i2psam is not set. Listening for incoming I2P\n+     connections is done through the SAM proxy, not by binding to a\n+     local address and port (default: 1)\n+```\n+\n+In a typical situation, this suffices:\n+\n+```\n+bitcoind -i2psam=127.0.0.1:7656\n+```\n+\n+The first time Bitcoin Core connects to the I2P router, its I2P address (and\n+corresponding private key) will be automatically generated and saved in a file\n+named `i2p_private_key` in the Bitcoin Core data directory.\n+\n+## Additional configuration options related to I2P\n+\n+You may set the `debug=i2p` config logging option to have additional\n+information in the debug log about your I2P configuration and connections. Run\n+`bitcoin-cli help logging` for more information.\n+\n+It is possible to restrict outgoing connections in the usual way with\n+`onlynet=i2p`. I2P support was added to Bitcoin Core in version 22.0 (mid 2021)\n+and there may be fewer I2P peers than Tor or IP ones. Therefore, using\n+`onlynet=i2p` alone (without other `onlynet=`) may make a node more susceptible\n+to [Sybil attacks](https://en.bitcoin.it/wiki/Weaknesses#Sybil_attack). Use\n+`bitcoin-cli -addrinfo` to see the number of I2P addresses known to your node.\n+\n+## I2P related information in Bitcoin Core\n+\n+There are several ways to see your I2P address in Bitcoin Core:\n+- in the debug log (grep for `AddLocal`, the I2P address ends in `.b32.i2p`)\n+- in the output of the `getnetworkinfo` RPC in the \"localaddresses\" section\n+- in the output of `bitcoin-cli -netinfo` peer connections dashboard\n+\n+To see which I2P peers your node is connected to, use `bitcoin-cli -netinfo 4`\n+or the `getpeerinfo` RPC (e.g. `bitcoin-cli getpeerinfo`).\n+\n+To see which I2P addresses your node knows, use the `getnodeaddresses 0 i2p`\n+RPC.\n+\n+## Compatibility\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3) protocol\n+to connect to the I2P network. Any I2P router that supports it can be used."
      }
    ]
  },
  {
    "sha": "0553d75268a94630225fa754841e28d88d751665",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTUzZDc1MjY4YTk0NjMwMjI1ZmE3NTQ4NDFlMjhkODhkNzUxNjY1",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-24T11:44:31Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-06-24T12:20:28Z"
      },
      "message": "Merge bitcoin/bitcoin#22154: Add OutputType::BECH32M and related wallet support for fetching bech32m addresses\n\n754f134a50cc56cdf0baf996d909c992770fcc97 wallet: Add error message to GetReservedDestination (Andrew Chow)\n87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6 Disallow bech32m addresses for legacy wallet things (Andrew Chow)\n6dbe4d10728f882986ed0d9ed77bc736f051c662 Use BECH32M for tr() desc, WitV1Taproot, and WitUnknown CTxDests (Andrew Chow)\n699dfcd8ad9487a4e04c1ffc68211e84e126b3d2 Opportunistically use bech32m change addresses if available (Andrew Chow)\n0262536c34567743e527dad46912c9ba493252cd Add OutputType::BECH32M (Andrew Chow)\n177c15d2f7cd5406ddbce8217fc023057539b828 Limit LegacyScriptPubKeyMan address types (Andrew Chow)\n\nPull request description:\n\n  Currently bech32m addresses are classfied as bech32. Because bech32m is incompatible with bech32, we need to define a new `OutputType` for it so that it can be handled correctly. This PR adds `OutputType::BECH32M`, updates all of the relevant `OutputType` classifications, and handle requests for bech32m addresses. There is now a `bech32m` address type string that can be used.\n\n  * `tr()` descriptors now report their output type as `OutputType::BECH32M`. `WtinessV1Taproot` and `WitnessUnknown` are also classified as `OutputType::BECH32M`.\n  * Bech32m addresses are completely disabled for legacy wallets. They cannot be imported (explicitly disallowed in `importaddress` and `importmulti`), will not be created when getting all destinations for a pubkey, and will not be added with `addmultisigaddress`. Additional protections have been added to `LegacyScriptPubKeyMan` to disallow attempting to retrieve bech32m addresses.\n  * Since Taproot multisigs are not implemented yet, `createmultisig` will also disallow the bech32m address type.\n  * As Taproot is not yet active, `DescriptorScriptPubKeyMan` cannot and will not create a `tr()` descriptor. Protections have been added to make sure this cannot occur.\n  * The change address type detection algorithm has been updated to return `bech32m` when there is a segwit v1+ output script and the wallet has a bech32m `ScriptPubKeyMan`, falling back to bech32 if one is not available.\n\nACKs for top commit:\n  laanwj:\n    re-review ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n  Sjors:\n    re-utACK 754f134: only change is switching to `bech32m` in two `wallet_taproot.py` test cases.\n  fjahr:\n    re-ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n  jonatack:\n    ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n\nTree-SHA512: 6ea90867d3631d0d438e2b08ce6ed930f37d01323224661e8e38f183ea5ee2ab65b5891394a3612c7382a1aff907b457616c6725665a10c320174017b998ca9f",
      "tree": {
        "sha": "36c9545064ab938751b79ae5b54c0ec9c0e139ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36c9545064ab938751b79ae5b54c0ec9c0e139ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0553d75268a94630225fa754841e28d88d751665",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDUeI0ACgkQHkrtYphs\n0l12TwgAyFzhgWB0m2yWK9p/dm8Nnq8V6R6+u1GnLvN9mnFrw68r93DVrot2P0fb\n+RstB6ZoEkVyyWR2Um8fekPvA63vamfXgBexlSobIlcMbFgXLwT7NF1XdWt6A95+\npymoPWIQcBcZiHnyNS3d5X1Ep5D+ki8WBW+jAr9dY424UHDQE8vvLDUMoccrAxx7\n/jmJ4exWMcOyYCqH4xQEmt8LmF0QazZkzx0mtnMq+NQf1To/S4xvUhCtHY8fZLAr\nlfOZRoItrF21SeOMi5DIQgQB4rYAY5L1OMSA0c8KVGIL5G/ux5ATRkF874YalkbC\nGzYEC2xT6SOuu5sji++EGhPt3n5Wvg==\n=R7wn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJ6mVTinMwrFaL5qKaf09hyl42upQ8pIjsGMDzycmHQqCP/wECojC8ZxMgd6\ndz4yTN0RLvgI8QRg1HiQ8AhaW+7k6+OUxwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEJW9q/+ZVfqqwqdkUbDGJrgI\n8QRg1HiR8AhLsfILdK2XugCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEL7Xjyd73r4DncBxo6mea/kI8CDIpyrt+fT6HZCe2swn\nhMoLjsLupdNJvAeBFtHbM7ttxQjxBGDUeJHwCDWX6JZQIdi2AIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BD4kWcu\nLedxgxYI7EXi9C5ECPEEYNR4kPAIbGYr++G3P5sAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 36c9545064ab938751b79ae5b54c0ec9c0e139ff\nparent b7565c708dc1c334aea12ab91a7c67695af802f8\nparent 754f134a50cc56cdf0baf996d909c992770fcc97\nauthor W. J. van der Laan <laanwj@protonmail.com> 1624535071 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1624537228 +0200\n\nMerge bitcoin/bitcoin#22154: Add OutputType::BECH32M and related wallet support for fetching bech32m addresses\n\n754f134a50cc56cdf0baf996d909c992770fcc97 wallet: Add error message to GetReservedDestination (Andrew Chow)\n87a0e7a3b7c0ffd545e537bd497cdc3e67d045f6 Disallow bech32m addresses for legacy wallet things (Andrew Chow)\n6dbe4d10728f882986ed0d9ed77bc736f051c662 Use BECH32M for tr() desc, WitV1Taproot, and WitUnknown CTxDests (Andrew Chow)\n699dfcd8ad9487a4e04c1ffc68211e84e126b3d2 Opportunistically use bech32m change addresses if available (Andrew Chow)\n0262536c34567743e527dad46912c9ba493252cd Add OutputType::BECH32M (Andrew Chow)\n177c15d2f7cd5406ddbce8217fc023057539b828 Limit LegacyScriptPubKeyMan address types (Andrew Chow)\n\nPull request description:\n\n  Currently bech32m addresses are classfied as bech32. Because bech32m is incompatible with bech32, we need to define a new `OutputType` for it so that it can be handled correctly. This PR adds `OutputType::BECH32M`, updates all of the relevant `OutputType` classifications, and handle requests for bech32m addresses. There is now a `bech32m` address type string that can be used.\n\n  * `tr()` descriptors now report their output type as `OutputType::BECH32M`. `WtinessV1Taproot` and `WitnessUnknown` are also classified as `OutputType::BECH32M`.\n  * Bech32m addresses are completely disabled for legacy wallets. They cannot be imported (explicitly disallowed in `importaddress` and `importmulti`), will not be created when getting all destinations for a pubkey, and will not be added with `addmultisigaddress`. Additional protections have been added to `LegacyScriptPubKeyMan` to disallow attempting to retrieve bech32m addresses.\n  * Since Taproot multisigs are not implemented yet, `createmultisig` will also disallow the bech32m address type.\n  * As Taproot is not yet active, `DescriptorScriptPubKeyMan` cannot and will not create a `tr()` descriptor. Protections have been added to make sure this cannot occur.\n  * The change address type detection algorithm has been updated to return `bech32m` when there is a segwit v1+ output script and the wallet has a bech32m `ScriptPubKeyMan`, falling back to bech32 if one is not available.\n\nACKs for top commit:\n  laanwj:\n    re-review ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n  Sjors:\n    re-utACK 754f134: only change is switching to `bech32m` in two `wallet_taproot.py` test cases.\n  fjahr:\n    re-ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n  jonatack:\n    ACK 754f134a50cc56cdf0baf996d909c992770fcc97\n\nTree-SHA512: 6ea90867d3631d0d438e2b08ce6ed930f37d01323224661e8e38f183ea5ee2ab65b5891394a3612c7382a1aff907b457616c6725665a10c320174017b998ca9f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0553d75268a94630225fa754841e28d88d751665",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0553d75268a94630225fa754841e28d88d751665",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0553d75268a94630225fa754841e28d88d751665/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7565c708dc1c334aea12ab91a7c67695af802f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7565c708dc1c334aea12ab91a7c67695af802f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7565c708dc1c334aea12ab91a7c67695af802f8"
      },
      {
        "sha": "754f134a50cc56cdf0baf996d909c992770fcc97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754f134a50cc56cdf0baf996d909c992770fcc97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/754f134a50cc56cdf0baf996d909c992770fcc97"
      }
    ],
    "stats": {
      "total": 242,
      "additions": 181,
      "deletions": 61
    },
    "files": [
      {
        "sha": "8ede7b99745ba56ee8b1f111516e8e4de78e0525",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -18,6 +18,7 @@\n static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n \n bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n@@ -30,6 +31,9 @@ bool ParseOutputType(const std::string& type, OutputType& output_type)\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n         output_type = OutputType::BECH32;\n         return true;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32M) {\n+        output_type = OutputType::BECH32M;\n+        return true;\n     }\n     return false;\n }\n@@ -40,6 +44,7 @@ const std::string& FormatOutputType(OutputType type)\n     case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n     case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n     case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    case OutputType::BECH32M: return OUTPUT_TYPE_STRING_BECH32M;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -59,6 +64,7 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n             return witdest;\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should never be used with BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -98,6 +104,23 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n             return ScriptHash(witprog);\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should not be used for BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n+\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n+    if (std::holds_alternative<PKHash>(dest) ||\n+        std::holds_alternative<ScriptHash>(dest)) {\n+        return OutputType::LEGACY;\n+    }\n+    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n+        return OutputType::BECH32;\n+    }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "2b83235cd018ee127d4898a34a31abff4d59d67c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -18,12 +18,14 @@ enum class OutputType {\n     LEGACY,\n     P2SH_SEGWIT,\n     BECH32,\n+    BECH32M,\n };\n \n static constexpr auto OUTPUT_TYPES = std::array{\n     OutputType::LEGACY,\n     OutputType::P2SH_SEGWIT,\n     OutputType::BECH32,\n+    OutputType::BECH32M,\n };\n \n [[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);\n@@ -45,4 +47,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  */\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n+/** Get the OutputType for a CTxDestination */\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest);\n+\n #endif // BITCOIN_OUTPUTTYPE_H"
      },
      {
        "sha": "5178ce60e80bcbc5a13129305abcd37ce81f441b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -131,6 +131,9 @@ static RPCHelpMan createmultisig()\n         if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"createmultisig cannot create bech32m multisig addresses\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "fdbd2d7fc70f480332f2f042156fcb87a78e1b79",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -640,20 +640,6 @@ class DescriptorImpl : public Descriptor\n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n-static std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n-    if (std::holds_alternative<PKHash>(dest) ||\n-        std::holds_alternative<ScriptHash>(dest)) {\n-        return OutputType::LEGACY;\n-    }\n-    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n-        std::holds_alternative<WitnessV0ScriptHash>(dest) ||\n-        std::holds_alternative<WitnessV1Taproot>(dest) ||\n-        std::holds_alternative<WitnessUnknown>(dest)) {\n-        return OutputType::BECH32;\n-    }\n-    return std::nullopt;\n-}\n-\n /** A parsed addr(A) descriptor. */\n class AddressDescriptor final : public DescriptorImpl\n {\n@@ -874,7 +860,7 @@ class TRDescriptor final : public DescriptorImpl\n     {\n         assert(m_subdescriptor_args.size() == m_depths.size());\n     }\n-    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32M; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "35649ab02ce6102806667727b95f8433b1c8a1aa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -286,6 +286,9 @@ RPCHelpMan importaddress()\n             if (fP2SH) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n             }\n+            if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+            }\n \n             pwallet->MarkDirty();\n \n@@ -962,6 +965,9 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n         if (!IsValidDestination(dest)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m addresses cannot be imported into legacy wallets\");\n+        }\n         script = GetScriptForDestination(dest);\n     } else {\n         if (!IsHex(output)) {\n@@ -1086,6 +1092,9 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     if (!parsed_desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n+    if (parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m descriptors cannot be imported into legacy wallets\");\n+    }\n \n     have_solving_data = parsed_desc->IsSolvable();\n     const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;"
      },
      {
        "sha": "bc5d771b6efc72317fd708929b29db97f9133be0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -269,6 +269,9 @@ static RPCHelpMan getnewaddress()\n         if (!ParseOutputType(request.params[1].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -313,6 +316,9 @@ static RPCHelpMan getrawchangeaddress()\n         if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n     }\n \n     CTxDestination dest;\n@@ -1004,6 +1010,9 @@ static RPCHelpMan addmultisigaddress()\n         if (!ParseOutputType(request.params[3].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "44c3912544b2c70291099102ca19ef7cd8fb21ec",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -22,6 +22,12 @@ const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        return false;\n+    }\n+    assert(type != OutputType::BECH32M);\n+\n     LOCK(cs_KeyStore);\n     error.clear();\n \n@@ -289,14 +295,22 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n+    if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        return false;\n+    }\n+    assert(type != OutputType::BECH32M);\n+\n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n \n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n     address = GetDestinationForKey(keypool.vchPubKey, type);\n@@ -1294,6 +1308,7 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n \n void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type)\n {\n+    assert(type != OutputType::BECH32M);\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n@@ -1327,6 +1342,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n \n bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType type, bool internal)\n {\n+    assert(type != OutputType::BECH32M);\n     if (!CanGetAddresses(internal)) {\n         return false;\n     }\n@@ -1395,6 +1411,7 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n \n void LegacyScriptPubKeyMan::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n+    assert(type != OutputType::BECH32M);\n     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n         CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n         CScript witprog = GetScriptForDestination(witdest);\n@@ -1706,10 +1723,9 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n     return true;\n }\n \n-bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n {\n     LOCK(cs_desc_man);\n-    std::string error;\n     bool result = GetNewDestination(type, address, error);\n     index = m_wallet_descriptor.next_index - 1;\n     return result;\n@@ -1880,6 +1896,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n {\n+    if (addr_type == OutputType::BECH32M) {\n+        // Don't allow setting up taproot descriptors yet\n+        // TODO: Allow setting up taproot descriptors\n+        return false;\n+    }\n+\n     LOCK(cs_desc_man);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n@@ -1909,6 +1931,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n         break;\n     }\n+    case OutputType::BECH32M: assert(false); // TODO: Setup taproot descriptor\n     } // no default case, so the compiler can warn about missing cases\n     assert(!desc_prefix.empty());\n "
      },
      {
        "sha": "b2ca354b0a24066c192842c386aa53e4462dca22",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -181,7 +181,7 @@ class ScriptPubKeyMan\n     virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n     virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n@@ -254,6 +254,13 @@ class ScriptPubKeyMan\n     boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n };\n \n+/** OutputTypes supported by the LegacyScriptPubKeyMan */\n+static const std::unordered_set<OutputType> LEGACY_OUTPUT_TYPES {\n+    OutputType::LEGACY,\n+    OutputType::P2SH_SEGWIT,\n+    OutputType::BECH32,\n+};\n+\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n@@ -357,7 +364,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n@@ -566,7 +573,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n     // Tops up the descriptor cache and m_map_script_pub_keys. The cache is stored in the wallet file"
      },
      {
        "sha": "6a8df437ae8efcac2f20ee4b512772f9df761aab",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -618,8 +618,9 @@ bool CWallet::CreateTransactionInternal(\n         // Reserve a new key pair from key pool. If it fails, provide a dummy\n         // destination in case we don't need change.\n         CTxDestination dest;\n-        if (!reservedest.GetReservedDestination(dest, true)) {\n-            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        std::string dest_err;\n+        if (!reservedest.GetReservedDestination(dest, true, dest_err)) {\n+            error = strprintf(_(\"Transaction needs a change address, but we can't generate it. %s\"), dest_err);\n         }\n         scriptChange = GetScriptForDestination(dest);\n         // A valid destination implies a change script (and"
      },
      {
        "sha": "c2586b60b8167f3660b72e6049a1ea15b9c0cb63",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -1909,7 +1909,13 @@ OutputType CWallet::TransactionChangeType(const std::optional<OutputType>& chang\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n         if (recipient.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-            return OutputType::BECH32;\n+            if (GetScriptPubKeyMan(OutputType::BECH32M, true)) {\n+                return OutputType::BECH32M;\n+            } else if (GetScriptPubKeyMan(OutputType::BECH32, true)) {\n+                return OutputType::BECH32;\n+            } else {\n+                return m_default_address_type;\n+            }\n         }\n     }\n \n@@ -2112,7 +2118,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n     } else {\n-        error = strprintf(\"Error: No %s addresses available.\", FormatOutputType(type));\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n     }\n     if (result) {\n         SetAddressBook(dest, label, \"receive\");\n@@ -2127,8 +2133,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     error.clear();\n \n     ReserveDestination reservedest(this, type);\n-    if (!reservedest.GetReservedDestination(dest, true)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+    if (!reservedest.GetReservedDestination(dest, true, error)) {\n         return false;\n     }\n \n@@ -2175,10 +2180,11 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal)\n+bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal, std::string& error)\n {\n     m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n     if (!m_spk_man) {\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n         return false;\n     }\n \n@@ -2188,7 +2194,7 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         m_spk_man->TopUp();\n \n         CKeyPool keypool;\n-        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool, error)) {\n             return false;\n         }\n         fInternal = keypool.fInternal;\n@@ -3033,7 +3039,7 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n \n     auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\n-    for (const auto& type : OUTPUT_TYPES) {\n+    for (const auto& type : LEGACY_OUTPUT_TYPES) {\n         m_internal_spk_managers[type] = spk_manager.get();\n         m_external_spk_managers[type] = spk_manager.get();\n     }\n@@ -3086,6 +3092,11 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n+                if (t == OutputType::BECH32M) {\n+                    // Skip taproot (bech32m) for now\n+                    // TODO: Setup taproot (bech32m) descriptors by default\n+                    continue;\n+                }\n                 auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {"
      },
      {
        "sha": "b63938c5f1b5e77f562adf715f507b45b8f98f3b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -181,7 +181,7 @@ class ReserveDestination\n     }\n \n     //! Reserve an address\n-    bool GetReservedDestination(CTxDestination& pubkey, bool internal);\n+    bool GetReservedDestination(CTxDestination& pubkey, bool internal, std::string& error);\n     //! Return reserved address\n     void ReturnDestination();\n     //! Keep the address. Do not return it's key to the keypool when this object goes out of scope"
      },
      {
        "sha": "816ec674925f6a95f6b6a34239ea8f9303c41e0d",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -97,6 +97,9 @@ def run_test(self):\n             sorted_key_desc = descsum_create('sh(multi(2,{}))'.format(sorted_key_str))\n             assert_equal(self.nodes[0].deriveaddresses(sorted_key_desc)[0], t['address'])\n \n+        # Check that bech32m is currently not allowed\n+        assert_raises_rpc_error(-5, \"createmultisig cannot create bech32m multisig addresses\", self.nodes[0].createmultisig, 2, self.pub, \"bech32m\")\n+\n     def check_addmultisigaddress_errors(self):\n         if self.options.descriptors:\n             return\n@@ -108,6 +111,10 @@ def check_addmultisigaddress_errors(self):\n             self.nodes[0].importaddress(a)\n         assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n \n+        # Bech32m address type is disallowed for legacy wallets\n+        pubs = [self.nodes[1].getaddressinfo(addr)[\"pubkey\"] for addr in addresses]\n+        assert_raises_rpc_error(-5, \"Bech32m multisig addresses cannot be created with legacy wallets\", self.nodes[0].addmultisigaddress, 2, pubs, \"\", \"bech32m\")\n+\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(COINBASE_MATURITY)"
      },
      {
        "sha": "fa98c441521db5d148d8c765ad28939f3c405b03",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -551,7 +551,7 @@ def test_locked_wallet(self):\n         # creating the key must be impossible because the wallet is locked\n         outputs = {self.nodes[0].getnewaddress():1.1}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "9b97d08424d54736df25e7c7ab3f4ad7beb93b44",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -373,5 +373,15 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress(), multisig=False, typ='p2sh-segwit')\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n+        if self.options.descriptors:\n+            self.log.info(\"Descriptor wallets do not have bech32m addresses by default yet\")\n+            # TODO: Remove this when they do\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+        else:\n+            self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n+            assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+\n if __name__ == '__main__':\n     AddressTypeTest().main()"
      },
      {
        "sha": "b5afc3785ee91ea4caba6631527d102572e51c22",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -420,6 +420,9 @@ def run_test(self):\n             # This will raise an exception for importing an invalid pubkey\n             assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n \n+            # Bech32m addresses cannot be imported into a legacy wallet\n+            assert_raises_rpc_error(-5, \"Bech32m addresses cannot be imported into legacy wallets\", self.nodes[0].importaddress, \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\")\n+\n             # Import address and private key to check correct behavior of spendable unspents\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()"
      },
      {
        "sha": "baeac655dfdeb048bb91d174476625de4139dd34",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -746,6 +746,27 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Bech32m addresses and descriptors cannot be imported\n+        self.log.info(\"Bech32m addresses and descriptors cannot be imported\")\n+        self.test_importmulti(\n+            {\n+                \"scriptPubKey\": {\"address\": \"bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6\"},\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m addresses cannot be imported into legacy wallets\",\n+        )\n+        self.test_importmulti(\n+            {\n+                \"desc\": descsum_create(\"tr({})\".format(pub)),\n+                \"timestamp\": \"now\",\n+            },\n+            success=False,\n+            error_code=-5,\n+            error_message=\"Bech32m descriptors cannot be imported into legacy wallets\",\n+        )\n+\n         # Import some public keys to the keypool of a no privkey wallet\n         self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)"
      },
      {
        "sha": "28bfc9116f6abc03d0040b07031b5c2f71ab69eb",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n \n         # Using a fee rate (10 sat / byte) well above the minimum relay rate\n         # creating a 5,000 sat transaction with change should not be possible\n-        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n \n         # creating a 10,000 sat transaction without change, with a manual input, should still be possible\n         res = w2.walletcreatefundedpsbt(inputs=w2.listunspent(), outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})"
      },
      {
        "sha": "a571454acf50ad3d8b130cf31d77fd5c3814d22a",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -135,31 +135,33 @@ def run_test(self):\n         # in the label. This is a no-op.\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n-        self.log.info('Check watchonly labels')\n-        node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n-        wallet_watch_only = node.get_wallet_rpc('watch_only')\n-        BECH32_VALID = {\n-            '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n-            '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n-            '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n-        }\n-        BECH32_INVALID = {\n-            '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n-            '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n-        }\n-        for l in BECH32_VALID:\n-            ad = BECH32_VALID[l]\n-            wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n-            node.generatetoaddress(1, ad)\n-            assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n-            assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n-        for l in BECH32_INVALID:\n-            ad = BECH32_INVALID[l]\n-            assert_raises_rpc_error(\n-                -5,\n-                \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n-                lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n-            )\n+        if self.options.descriptors:\n+            # This is a descriptor wallet test because of segwit v1+ addresses\n+            self.log.info('Check watchonly labels')\n+            node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n+            wallet_watch_only = node.get_wallet_rpc('watch_only')\n+            BECH32_VALID = {\n+                '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n+                '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n+                '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n+            }\n+            BECH32_INVALID = {\n+                '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n+                '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n+            }\n+            for l in BECH32_VALID:\n+                ad = BECH32_VALID[l]\n+                wallet_watch_only.importaddress(label=l, rescan=False, address=ad)\n+                node.generatetoaddress(1, ad)\n+                assert_equal(wallet_watch_only.getaddressesbylabel(label=l), {ad: {'purpose': 'receive'}})\n+                assert_equal(wallet_watch_only.getreceivedbylabel(label=l), 0)\n+            for l in BECH32_INVALID:\n+                ad = BECH32_INVALID[l]\n+                assert_raises_rpc_error(\n+                    -5,\n+                    \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n+                    lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n+                )\n \n \n class Label:"
      },
      {
        "sha": "9eb204bf37c8c91e9a00584faedd9e992db0b2da",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0553d75268a94630225fa754841e28d88d751665/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=0553d75268a94630225fa754841e28d88d751665",
        "patch": "@@ -226,7 +226,7 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n         result = self.addr_gen.importdescriptors([{\"desc\": desc_pub, \"active\": True, \"timestamp\": \"now\"}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.addr_gen.getnewaddress(address_type='bech32')\n+            addr_g = self.addr_gen.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n@@ -265,7 +265,7 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n         result = self.rpc_online.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.rpc_online.getnewaddress(address_type='bech32')\n+            addr_g = self.rpc_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)\n@@ -296,7 +296,7 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n         result = self.psbt_offline.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n         assert(result[0]['success'])\n         for i in range(4):\n-            addr_g = self.psbt_online.getnewaddress(address_type='bech32')\n+            addr_g = self.psbt_online.getnewaddress(address_type='bech32m')\n             if treefn is not None:\n                 addr_r = self.make_addr(treefn, keys_pay, i)\n                 assert_equal(addr_g, addr_r)"
      }
    ]
  },
  {
    "sha": "e65d1d49864d047764eb2b444b2fc806b67e051c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjVkMWQ0OTg2NGQwNDc3NjRlYjJiNDQ0YjJmYzgwNmI2N2UwNTFj",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-24T12:58:42Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-24T12:58:42Z"
      },
      "message": "doc: recommend `--disable-external-signer` in OpenBSD build guide",
      "tree": {
        "sha": "765c7f40f98aa2056503622a13788f94ebf95811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/765c7f40f98aa2056503622a13788f94ebf95811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e65d1d49864d047764eb2b444b2fc806b67e051c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d1d49864d047764eb2b444b2fc806b67e051c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e65d1d49864d047764eb2b444b2fc806b67e051c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d1d49864d047764eb2b444b2fc806b67e051c/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7565c708dc1c334aea12ab91a7c67695af802f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7565c708dc1c334aea12ab91a7c67695af802f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7565c708dc1c334aea12ab91a7c67695af802f8"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "89fd506f1399a7d4b8d4b64918cd54fea7303cc0",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e65d1d49864d047764eb2b444b2fc806b67e051c/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e65d1d49864d047764eb2b444b2fc806b67e051c/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=e65d1d49864d047764eb2b444b2fc806b67e051c",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.7)\n+(updated for OpenBSD 6.9)\n \n This guide describes how to build bitcoind, bitcoin-qt, and command-line utilities on OpenBSD.\n \n@@ -67,22 +67,29 @@ export AUTOMAKE_VERSION=1.16\n ```\n Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n+Note that building with external signer support currently fails on OpenBSD,\n+hence you have to explicitely disable it by passing the parameter\n+`--disable-external-signer` to the configure script.\n+(Background: the feature requires the header-only library boost::process, which\n+is available on OpenBSD 6.9 via Boost 1.72.0, but contains certain system calls\n+and preprocessor defines like `waitid()` and `WEXITED` that are not available.)\n+\n To configure with wallet:\n ```bash\n-./configure --with-gui=no CC=cc CXX=c++ \\\n+./configure --with-gui=no --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n+./configure --disable-wallet --with-gui=no --disable-external-signer CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n ```\n \n To configure with GUI:\n ```bash\n-./configure --with-gui=yes CC=cc CXX=c++ \\\n+./configure --with-gui=yes --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake"
      }
    ]
  },
  {
    "sha": "fa485d06ec10acd9a791f8d29689e1e82591fb70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ4NWQwNmVjMTBhY2Q5YTc5MWY4ZDI5Njg5ZTFlODI1OTFmYjcw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-23T11:28:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T13:57:34Z"
      },
      "message": "fuzz: Check banman roundtrip",
      "tree": {
        "sha": "000875aadeed6ec2669e29369424d55fc5083b8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/000875aadeed6ec2669e29369424d55fc5083b8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa485d06ec10acd9a791f8d29689e1e82591fb70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUh2sQv/RzOREYv//CzL1fvaOuxoka1nzpnTXn29BYmDw1Wq5ksC54xhbtUuKWn5\n1RZ3TfQA2GVrqZ9OylnoRhfVHpMj+qA0x8fA+qPepxj6lsth036hfNoWMK+K8dQi\n4ne9xR2+xbRf9MW/9E+at74h+rnKCxQhtTPg0qc+zaqMhZztaniwDNbASIAiuaBK\nmCQSUyH8AqswkQGStM7IUP4zFDYklBUlPY4LtBEGvqqf+P19M41yy9wejkTmrScn\nZStpkbBUrE1QP76mLS5kh16EFpxylWfky+if2IHrjqlM4d26xUDhw4tx8VhIZ55W\nK2RmNaR0SWysgIS3K6RW4qnW08E0ZfrWytRnsJKgmOhcuYI4v1FmB0GrYhPyqxz1\nAbXpe52maElVV4JjFE5LeomrTn6jqiI8uh6ysu1DPJM6JtL1P7Jl7UfMb6q6LaCb\nxxoef+RkEGba1acbasSP2vRfue4DBG9TaIj6cX49ieZVd842HozhoGSJW/XuXE6s\nvnKSKSAs\n=gOUk\n-----END PGP SIGNATURE-----",
        "payload": "tree 000875aadeed6ec2669e29369424d55fc5083b8a\nparent d6e0d78c31557660274ef53cac912c468eecbe2d\nauthor MarcoFalke <falke.marco@gmail.com> 1624447710 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624543054 +0200\n\nfuzz: Check banman roundtrip\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa485d06ec10acd9a791f8d29689e1e82591fb70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa485d06ec10acd9a791f8d29689e1e82591fb70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa485d06ec10acd9a791f8d29689e1e82591fb70/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6e0d78c31557660274ef53cac912c468eecbe2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e0d78c31557660274ef53cac912c468eecbe2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e0d78c31557660274ef53cac912c468eecbe2d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "182aabc79b86bf9ce95cbf4809e4dc0273fdb6d9",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa485d06ec10acd9a791f8d29689e1e82591fb70/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa485d06ec10acd9a791f8d29689e1e82591fb70/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=fa485d06ec10acd9a791f8d29689e1e82591fb70",
        "patch": "@@ -32,6 +32,13 @@ void initialize_banman()\n     static const auto testing_setup = MakeNoLogFileContext<>();\n }\n \n+static bool operator==(const CBanEntry& lhs, const CBanEntry& rhs)\n+{\n+    return lhs.nVersion == rhs.nVersion &&\n+           lhs.nCreateTime == rhs.nCreateTime &&\n+           lhs.nBanUntil == rhs.nBanUntil;\n+}\n+\n FUZZ_TARGET_INIT(banman, initialize_banman)\n {\n     // The complexity is O(N^2), where N is the input size, because each call\n@@ -43,19 +50,20 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n \n     const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n+    bool force_read_and_write_to_err{false};\n     if (start_with_corrupted_banlist) {\n         const std::string sfx{fuzzed_data_provider.ConsumeBool() ? \".dat\" : \".json\"};\n         assert(WriteBinaryFile(banlist_file.string() + sfx,\n                                fuzzed_data_provider.ConsumeRandomLengthString()));\n     } else {\n-        const bool force_read_and_write_to_err{fuzzed_data_provider.ConsumeBool()};\n+        force_read_and_write_to_err = fuzzed_data_provider.ConsumeBool();\n         if (force_read_and_write_to_err) {\n             banlist_file = fs::path{\"path\"} / \"to\" / \"inaccessible\" / \"fuzzed_banlist\";\n         }\n     }\n \n     {\n-        BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n+        BanMan ban_man{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ ConsumeBanTimeOffset(fuzzed_data_provider)};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n             CallOneOf(\n                 fuzzed_data_provider,\n@@ -93,6 +101,16 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                     ban_man.Discourage(ConsumeNetAddr(fuzzed_data_provider));\n                 });\n         }\n+        if (!force_read_and_write_to_err) {\n+            ban_man.DumpBanlist();\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+            banmap_t banmap;\n+            ban_man.GetBanned(banmap);\n+            BanMan ban_man_read{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ 0};\n+            banmap_t banmap_read;\n+            ban_man_read.GetBanned(banmap_read);\n+            assert(banmap == banmap_read);\n+        }\n     }\n     fs::remove(banlist_file.string() + \".dat\");\n     fs::remove(banlist_file.string() + \".json\");"
      }
    ]
  },
  {
    "sha": "b2f5c38333fd2ec03fd1299a1bce507b25753f45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmY1YzM4MzMzZmQyZWMwM2ZkMTI5OWExYmNlNTA3YjI1NzUzZjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T14:01:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-24T14:01:21Z"
      },
      "message": "Merge bitcoin/bitcoin#22327: cli: Avoid truncating -rpcwaittimeout\n\nfa34cb80248cc39a73fc393f65c3cfc62e849556 cli: Avoid truncating -rpcwaittimeout (MarcoFalke)\n\nPull request description:\n\n  `seconds` is not enough precision to \"exactly\" store a timestamp n seconds into the future. Improve the precision by using `microseconds`. Fixes #22325\n\n  Also, use chrono literals.\n\nACKs for top commit:\n  jonatack:\n    ACK fa34cb80248cc39a73fc393f65c3cfc62e849556 review, debug-built, tested\n  theStack:\n    Tested ACK fa34cb80248cc39a73fc393f65c3cfc62e849556\n\nTree-SHA512: 7158da8545f9998a82bcc8636e04564efdb1e1be43b4288298c151b4df29ad47a2760259eefadd4a01db92ea18a1e017f3febc1cd8c69a4b28c86180229d8c90",
      "tree": {
        "sha": "870f61fdca0f78e1c1bf8dc9b449bf20efff1c10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/870f61fdca0f78e1c1bf8dc9b449bf20efff1c10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhxzgv+I8Ka86OJaN6/D7gf+jufgxI8NuNx3ftcp3eoCOHhxJgUqafv1hknIckz\n49MU8MRHS07Z65GBUl4KG7SL1eEg0eJboWirHeMiAXrMsGmh6qvKelOFR2LHrWyr\nBOj+E9C0ww1E+rSKe9RxXFuH5JL9WFXsDUf2ol+n4tJIDgtBAIqKAqzVM0t2CRgE\nWZzD2Jy/wTLlOg+11Ofg9k4QOh3iJN4kuWig1xTlNiNxG3I4JBUYMtZVzNxS6F2I\nfnqxrI5PK49eZHtdl1ZSxEs95XJlFUuzbIwKSWoLLEyZaRNlni1oK0FrE28PfwBJ\n6Odv3gZxEb4vbTX9Q8AiD5flbHPTRCTyDOxQcM1rMdzjaClpM/ShvjA6e2Jc3G2T\neY+krenfIjEzPt42VZhTLJPegLq9+zqDbuufCZ2xV0jFxlr++CLi+9gRs93mhdDy\nJ44gIplDfsl0rldb+KjkInNge73u/TZZWjTv66BxxX81Qf5uPo5ivNmgeNZYF+0c\nipmi4S2p\n=JwvV\n-----END PGP SIGNATURE-----",
        "payload": "tree 870f61fdca0f78e1c1bf8dc9b449bf20efff1c10\nparent 0553d75268a94630225fa754841e28d88d751665\nparent fa34cb80248cc39a73fc393f65c3cfc62e849556\nauthor MarcoFalke <falke.marco@gmail.com> 1624543278 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624543281 +0200\n\nMerge bitcoin/bitcoin#22327: cli: Avoid truncating -rpcwaittimeout\n\nfa34cb80248cc39a73fc393f65c3cfc62e849556 cli: Avoid truncating -rpcwaittimeout (MarcoFalke)\n\nPull request description:\n\n  `seconds` is not enough precision to \"exactly\" store a timestamp n seconds into the future. Improve the precision by using `microseconds`. Fixes #22325\n\n  Also, use chrono literals.\n\nACKs for top commit:\n  jonatack:\n    ACK fa34cb80248cc39a73fc393f65c3cfc62e849556 review, debug-built, tested\n  theStack:\n    Tested ACK fa34cb80248cc39a73fc393f65c3cfc62e849556\n\nTree-SHA512: 7158da8545f9998a82bcc8636e04564efdb1e1be43b4288298c151b4df29ad47a2760259eefadd4a01db92ea18a1e017f3febc1cd8c69a4b28c86180229d8c90\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0553d75268a94630225fa754841e28d88d751665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0553d75268a94630225fa754841e28d88d751665",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0553d75268a94630225fa754841e28d88d751665"
      },
      {
        "sha": "fa34cb80248cc39a73fc393f65c3cfc62e849556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa34cb80248cc39a73fc393f65c3cfc62e849556",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa34cb80248cc39a73fc393f65c3cfc62e849556"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7a5f9455112d76bed33eb6ce5187859b60c44797",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f5c38333fd2ec03fd1299a1bce507b25753f45/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f5c38333fd2ec03fd1299a1bce507b25753f45/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "patch": "@@ -797,7 +797,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n     const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n-    const int64_t deadline = GetTime<std::chrono::seconds>().count() + timeout;\n+    const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {\n         try {\n@@ -810,9 +810,9 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n             }\n             break; // Connection succeeded, no need to retry.\n         } catch (const CConnectionFailed& e) {\n-            const int64_t now = GetTime<std::chrono::seconds>().count();\n+            const auto now{GetTime<std::chrono::microseconds>()};\n             if (fWait && (timeout <= 0 || now < deadline)) {\n-                UninterruptibleSleep(std::chrono::seconds{1});\n+                UninterruptibleSleep(1s);\n             } else {\n                 throw CConnectionFailed(strprintf(\"timeout on transient error: %s\", e.what()));\n             }"
      }
    ]
  },
  {
    "sha": "976b53b085d681645fd3a008fe382de85647e29f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzZiNTNiMDg1ZDY4MTY0NWZkM2EwMDhmZTM4MmRlODU2NDdlMjlm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:38:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:15Z"
      },
      "message": "Revert \"Cache parent xpub inside of BIP32PubkeyProvider\"\n\nThis reverts commit 09e25071f40c564af08a1386c39c4f2d8eb484b6.\n\nThe changes made in this commit have turned out to be unnecessary and\nconfusing, so it is being reverted.",
      "tree": {
        "sha": "5871d4fd45135aa0511b6e9479925e1728f558c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5871d4fd45135aa0511b6e9479925e1728f558c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/976b53b085d681645fd3a008fe382de85647e29f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/976b53b085d681645fd3a008fe382de85647e29f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f5c38333fd2ec03fd1299a1bce507b25753f45"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 4,
      "deletions": 15
    },
    "files": [
      {
        "sha": "94a758a66d2b86014e77adf7d7eedcc83abb4432",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/976b53b085d681645fd3a008fe382de85647e29f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/976b53b085d681645fd3a008fe382de85647e29f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=976b53b085d681645fd3a008fe382de85647e29f",
        "patch": "@@ -166,7 +166,7 @@ struct PubkeyProvider\n      *  write_cache is the cache to write keys to (if not nullptr)\n      *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n      */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -199,7 +199,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n@@ -245,7 +245,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n \n public:\n     ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         key = m_pubkey;\n         info.path.clear();\n@@ -288,9 +288,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n-    // Cache of the parent of the final derived pubkeys.\n-    // Primarily useful for situations when no read_cache is provided\n-    CExtPubKey m_cached_xpub;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n@@ -327,7 +324,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         // Info of parent of the to be derived pubkey\n         KeyOriginInfo parent_info;\n@@ -352,9 +349,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 final_extkey = parent_extkey;\n                 if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             }\n-        } else if (m_cached_xpub.pubkey.IsValid() && m_derive != DeriveType::HARDENED) {\n-            parent_extkey = final_extkey = m_cached_xpub;\n-            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n         } else if (IsHardened()) {\n             CExtKey xprv;\n             if (!GetDerivedExtKey(arg, xprv)) return false;\n@@ -376,11 +370,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         final_info_out = final_info_out_tmp;\n         key_out = final_extkey.pubkey;\n \n-        // We rely on the consumer to check that m_derive isn't HARDENED as above\n-        // But we can't have already cached something in case we read something from the cache\n-        // and parent_extkey isn't actually the parent.\n-        if (!m_cached_xpub.pubkey.IsValid()) m_cached_xpub = parent_extkey;\n-\n         if (write_cache) {\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {"
      }
    ]
  },
  {
    "sha": "0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRjOGVmNzVjZDAzYzhmMGE4Y2ZhZGI0N2UwZmJjYWJlM2M1ZTU5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T17:12:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Refactor Cache merging and writing\n\nInstead of having a large blob of cache merging code in TopUp, refactor\nthis into DescriptorCache so that it can merge and provide a diff\n(another DescriptorCache containing just the items that were added).\nThen TopUp can just write everything that was in the diff.",
      "tree": {
        "sha": "05930f77c279302b337aee421e1bc2bb4fb6ba44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05930f77c279302b337aee421e1bc2bb4fb6ba44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "976b53b085d681645fd3a008fe382de85647e29f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/976b53b085d681645fd3a008fe382de85647e29f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/976b53b085d681645fd3a008fe382de85647e29f"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 39,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9727a7a26fcdad69d49fc9052e792974d3c6a878",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -1418,6 +1418,36 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n+{\n+    DescriptorCache diff;\n+    for (const auto& parent_xpub_pair : other.GetCachedParentExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+            if (xpub != parent_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+            }\n+            continue;\n+        }\n+        CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        diff.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+    }\n+    for (const auto& derived_xpub_map_pair : other.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            CExtPubKey xpub;\n+            if (GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                if (xpub != derived_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                }\n+                continue;\n+            }\n+            CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+        }\n+    }\n+    return diff;\n+}\n+\n const ExtPubKeyMap DescriptorCache::GetCachedParentExtPubKeys() const\n {\n     return m_parent_xpubs;"
      },
      {
        "sha": "7e422332a0ffb5c9450a396cf0fb17c286eb1f7d",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -55,6 +55,11 @@ class DescriptorCache {\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+\n+    /** Combine another DescriptorCache into this one.\n+     * Returns a cache containing the items from the other cache unknown to current cache\n+     */\n+    DescriptorCache MergeAndDiff(const DescriptorCache& other);\n };\n \n /** \\brief Interface for parsed descriptor objects."
      },
      {
        "sha": "63add229177f3ccfa3fd3cfdb626b75259722be5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 19,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "patch": "@@ -1805,33 +1805,18 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n             }\n             m_map_pubkeys[pubkey] = i;\n         }\n-        // Write the cache\n-        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n-            CExtPubKey xpub;\n-            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n-                if (xpub != parent_xpub_pair.second) {\n-                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n-                }\n-                continue;\n-            }\n+        // Merge and write the cache\n+        DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+        for (const auto& parent_xpub_pair : new_items.GetCachedParentExtPubKeys()) {\n             if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n                 throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n             }\n-            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n         }\n-        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_map_pair : new_items.GetCachedDerivedExtPubKeys()) {\n             for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n-                CExtPubKey xpub;\n-                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n-                    if (xpub != derived_xpub_pair.second) {\n-                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n-                    }\n-                    continue;\n-                }\n                 if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n                     throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n                 }\n-                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n             }\n         }\n         m_max_cached_index++;"
      }
    ]
  },
  {
    "sha": "cacc3910989c4f3d7afa530dbab042461426abce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWNjMzkxMDk4OWM0ZjNkN2FmYTUzMGRiYWIwNDI0NjE0MjZhYmNl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T17:24:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Move DescriptorCache writing to WalletBatch\n\nInstead of adhoc writing of the items in DescriptorCache, move it all\ninto WalletBatch.",
      "tree": {
        "sha": "8e08000af456482dbe18abf3df5f5fd4cb25db03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e08000af456482dbe18abf3df5f5fd4cb25db03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cacc3910989c4f3d7afa530dbab042461426abce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cacc3910989c4f3d7afa530dbab042461426abce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ec38265216e8ec77fee8e95f0111176e8985c1a1",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -1807,17 +1807,8 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n         }\n         // Merge and write the cache\n         DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n-        for (const auto& parent_xpub_pair : new_items.GetCachedParentExtPubKeys()) {\n-            if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n-                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-            }\n-        }\n-        for (const auto& derived_xpub_map_pair : new_items.GetCachedDerivedExtPubKeys()) {\n-            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n-                if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n-                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-                }\n-            }\n+        if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n         }\n         m_max_cached_index++;\n     }"
      },
      {
        "sha": "294fa3b8ee38f2a97c052b0b1bdb6f1895f68042",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -248,6 +248,23 @@ bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint2\n     return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n }\n \n+bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache)\n+{\n+    for (const auto& parent_xpub_pair : cache.GetCachedParentExtPubKeys()) {\n+        if (!WriteDescriptorParentCache(parent_xpub_pair.second, desc_id, parent_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n+    for (const auto& derived_xpub_map_pair : cache.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            if (!WriteDescriptorDerivedCache(derived_xpub_pair.second, desc_id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "b11d750a3a5d0fceb0eb894a60554f64588213f1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cacc3910989c4f3d7afa530dbab042461426abce/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=cacc3910989c4f3d7afa530dbab042461426abce",
        "patch": "@@ -246,6 +246,7 @@ class WalletBatch\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      }
    ]
  },
  {
    "sha": "d87b544b834077f102724415e0fada6ee8b2def2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODdiNTQ0YjgzNDA3N2YxMDI3MjQ0MTVlMGZhZGE2ZWU4YjJkZWYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T21:18:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "descriptors: Cache last hardened xpub\n\nCache the last hardenex xpub in the DescriptorCache",
      "tree": {
        "sha": "d477a3f60f8bdc5e326235896fa9a0b12e3c0e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d477a3f60f8bdc5e326235896fa9a0b12e3c0e6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d87b544b834077f102724415e0fada6ee8b2def2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d87b544b834077f102724415e0fada6ee8b2def2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cacc3910989c4f3d7afa530dbab042461426abce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cacc3910989c4f3d7afa530dbab042461426abce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cacc3910989c4f3d7afa530dbab042461426abce"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 61,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6f8af2c32b9b1c23c90e2f0ceb54083a7e713379",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 3,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=d87b544b834077f102724415e0fada6ee8b2def2",
        "patch": "@@ -302,11 +302,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n     // Derives the last xprv\n-    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv) const\n+    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv, CExtKey& last_hardened) const\n     {\n         if (!GetExtKey(arg, xprv)) return false;\n         for (auto entry : m_path) {\n             xprv.Derive(xprv, entry);\n+            if (entry >> 31) {\n+                last_hardened = xprv;\n+            }\n         }\n         return true;\n     }\n@@ -340,6 +343,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         // Derive keys or fetch them from cache\n         CExtPubKey final_extkey = m_root_extkey;\n         CExtPubKey parent_extkey = m_root_extkey;\n+        CExtPubKey last_hardened_extkey;\n         bool der = true;\n         if (read_cache) {\n             if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) {\n@@ -351,11 +355,15 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             }\n         } else if (IsHardened()) {\n             CExtKey xprv;\n-            if (!GetDerivedExtKey(arg, xprv)) return false;\n+            CExtKey lh_xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n             parent_extkey = xprv.Neuter();\n             if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n             if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n             final_extkey = xprv.Neuter();\n+            if (lh_xprv.key.IsValid()) {\n+                last_hardened_extkey = lh_xprv.Neuter();\n+            }\n         } else {\n             for (auto entry : m_path) {\n                 der = parent_extkey.Derive(parent_extkey, entry);\n@@ -374,6 +382,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {\n                 write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+                // Cache last hardened xpub if we have it\n+                if (last_hardened_extkey.pubkey.IsValid()) {\n+                    write_cache->CacheLastHardenedExtPubKey(m_expr_index, last_hardened_extkey);\n+                }\n             } else if (final_info_out.path.size() > 0) {\n                 write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             }\n@@ -454,7 +466,8 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n     {\n         CExtKey extkey;\n-        if (!GetDerivedExtKey(arg, extkey)) return false;\n+        CExtKey dummy;\n+        if (!GetDerivedExtKey(arg, extkey, dummy)) return false;\n         if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n         if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n         key = extkey.key;\n@@ -1400,6 +1413,11 @@ void DescriptorCache::CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_i\n     xpubs[der_index] = xpub;\n }\n \n+void DescriptorCache::CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub)\n+{\n+    m_last_hardened_xpubs[key_exp_pos] = xpub;\n+}\n+\n bool DescriptorCache::GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n {\n     const auto& it = m_parent_xpubs.find(key_exp_pos);\n@@ -1418,6 +1436,14 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+bool DescriptorCache::GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n+{\n+    const auto& it = m_last_hardened_xpubs.find(key_exp_pos);\n+    if (it == m_last_hardened_xpubs.end()) return false;\n+    xpub = it->second;\n+    return true;\n+}\n+\n DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n {\n     DescriptorCache diff;\n@@ -1445,6 +1471,17 @@ DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n             diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n         }\n     }\n+    for (const auto& lh_xpub_pair : other.GetCachedLastHardenedExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedLastHardenedExtPubKey(lh_xpub_pair.first, xpub)) {\n+            if (xpub != lh_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached last hardened xpub does not match already cached last hardened xpub\");\n+            }\n+            continue;\n+        }\n+        CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+        diff.CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+    }\n     return diff;\n }\n \n@@ -1457,3 +1494,8 @@ const std::unordered_map<uint32_t, ExtPubKeyMap> DescriptorCache::GetCachedDeriv\n {\n     return m_derived_xpubs;\n }\n+\n+const ExtPubKeyMap DescriptorCache::GetCachedLastHardenedExtPubKeys() const\n+{\n+    return m_last_hardened_xpubs;\n+}"
      },
      {
        "sha": "9ec2a766b181dd685f3ba353812cae7d3c95a2e6",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b544b834077f102724415e0fada6ee8b2def2/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=d87b544b834077f102724415e0fada6ee8b2def2",
        "patch": "@@ -22,6 +22,8 @@ class DescriptorCache {\n     std::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n     /** Map key expression index -> parent xpub */\n     ExtPubKeyMap m_parent_xpubs;\n+    /** Map key expression index -> last hardened xpub */\n+    ExtPubKeyMap m_last_hardened_xpubs;\n \n public:\n     /** Cache a parent xpub\n@@ -50,11 +52,25 @@ class DescriptorCache {\n      * @param[in] xpub The CExtPubKey to get from cache\n      */\n     bool GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const;\n+    /** Cache a last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub);\n+    /** Retrieve a cached last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const;\n \n     /** Retrieve all cached parent xpubs */\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+    /** Retrieve all cached last hardened xpubs */\n+    const ExtPubKeyMap GetCachedLastHardenedExtPubKeys() const;\n \n     /** Combine another DescriptorCache into this one.\n      * Returns a cache containing the items from the other cache unknown to current cache"
      }
    ]
  },
  {
    "sha": "432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzJiYTllNTQzNGRhOTBkMmNmNjgwZjIzZThjN2I3MTY0YzlmOTQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T21:25:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "wallet: Store last hardened xpub cache",
      "tree": {
        "sha": "73a7b428fb1f2852f29dff898c3267c1abe98947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73a7b428fb1f2852f29dff898c3267c1abe98947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d87b544b834077f102724415e0fada6ee8b2def2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b544b834077f102724415e0fada6ee8b2def2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d87b544b834077f102724415e0fada6ee8b2def2"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "72b987d327840eac4e08f5f9b5641c9f53d5a253",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "patch": "@@ -52,6 +52,7 @@ const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n+const std::string WALLETDESCRIPTORLHCACHE{\"walletdescriptorlhcache\"};\n const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n@@ -248,6 +249,13 @@ bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint2\n     return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n }\n \n+bool WalletBatch::WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index)\n+{\n+    std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+    xpub.Encode(ser_xpub.data());\n+    return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORLHCACHE, desc_id), key_exp_index), ser_xpub);\n+}\n+\n bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache)\n {\n     for (const auto& parent_xpub_pair : cache.GetCachedParentExtPubKeys()) {\n@@ -262,6 +270,11 @@ bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const Descri\n             }\n         }\n     }\n+    for (const auto& lh_xpub_pair : cache.GetCachedLastHardenedExtPubKeys()) {\n+        if (!WriteDescriptorLastHardenedCache(lh_xpub_pair.second, desc_id, lh_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n     return true;\n }\n \n@@ -619,6 +632,17 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             } else {\n                 wss.m_descriptor_caches[desc_id].CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n             }\n+        } else if (strType == DBKeys::WALLETDESCRIPTORLHCACHE) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            wss.m_descriptor_caches[desc_id].CacheLastHardenedExtPubKey(key_exp_index, xpub);\n         } else if (strType == DBKeys::WALLETDESCRIPTORKEY) {\n             uint256 desc_id;\n             CPubKey pubkey;"
      },
      {
        "sha": "e7c6b61891d3ff4accf55230be7e4137a1ecdeab",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/432ba9e5434da90d2cf680f23e8c7b7164c9f945/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "patch": "@@ -246,6 +246,7 @@ class WalletBatch\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n     bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n     /// Write destination data key,value tuple to database"
      }
    ]
  },
  {
    "sha": "74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGZlZGUzYjhiYTY5ZTJjYzgyYzYxN2NkZjQwNmFiNzlkZjU4ODI1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T22:03:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "wallet: Upgrade existing descriptor caches\n\nAdd functions to upgrade existing descriptor caches to support the use\nof last hardened xpub caching.",
      "tree": {
        "sha": "8d5e969d58e535cab4c7cbb7099f39dedf8154df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d5e969d58e535cab4c7cbb7099f39dedf8154df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74fede3b8ba69e2cc82c617cdf406ab79df58825",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/432ba9e5434da90d2cf680f23e8c7b7164c9f945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/432ba9e5434da90d2cf680f23e8c7b7164c9f945"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d29facc49b6c190e148b67866a0eb4293e93309",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -2278,3 +2278,32 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n \n     return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n }\n+\n+void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n+    }\n+\n+    // Skip if we have the last hardened xpub cache\n+    if (m_wallet_descriptor.cache.GetCachedLastHardenedExtPubKeys().size() > 0) {\n+        return;\n+    }\n+\n+    // Expand the descriptor\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+    FlatSigningProvider out_keys;\n+    std::vector<CScript> scripts_temp;\n+    DescriptorCache temp_cache;\n+    if (!m_wallet_descriptor.descriptor->Expand(0, provider, scripts_temp, out_keys, &temp_cache)){\n+        throw std::runtime_error(\"Unable to expand descriptor\");\n+    }\n+\n+    // Cache the last hardened xpubs\n+    DescriptorCache diff = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+    if (!WalletBatch(m_storage.GetDatabase()).WriteDescriptorCacheItems(GetID(), diff)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+    }\n+}"
      },
      {
        "sha": "c491fd58aa32175b11ac6a90db4bb55944971d59",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -631,6 +631,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     const std::vector<CScript> GetScriptPubKeys() const;\n \n     bool GetDescriptorString(std::string& out, bool priv) const;\n+\n+    void UpgradeDescriptorCache();\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "ab071a732998145fd23f3e2e3df8ba0bd4ccba1e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -374,6 +374,19 @@ void CWallet::UpgradeKeyMetadata()\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n+void CWallet::UpgradeDescriptorCache()\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) || IsLocked() || IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n+    }\n+\n+    for (ScriptPubKeyMan* spkm : GetAllScriptPubKeyMans()) {\n+        DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        desc_spkm->UpgradeDescriptorCache();\n+    }\n+    SetWalletFlag(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n@@ -390,6 +403,8 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n             if (Unlock(_vMasterKey, accept_no_keys)) {\n                 // Now that we've unlocked, upgrade the key metadata\n                 UpgradeKeyMetadata();\n+                // Now that we've unlocked, upgrade the descriptor cache\n+                UpgradeDescriptorCache();\n                 return true;\n             }\n         }"
      },
      {
        "sha": "7d639bf0b0c4a7ec47c212da10f29b102a6f7bfe",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -117,6 +117,7 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n+    |   WALLET_FLAG_LAST_HARDENED_XPUB_CACHED\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n     |   WALLET_FLAG_DESCRIPTORS\n     |   WALLET_FLAG_EXTERNAL_SIGNER;\n@@ -128,6 +129,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"avoid_reuse\", WALLET_FLAG_AVOID_REUSE},\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n+    {\"last_hardened_xpub_cached\", WALLET_FLAG_LAST_HARDENED_XPUB_CACHED},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n     {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n     {\"external_signer\", WALLET_FLAG_EXTERNAL_SIGNER}\n@@ -476,6 +478,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    //! Upgrade DescriptorCaches\n+    void UpgradeDescriptorCache() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n     //! Adds a destination data tuple to the store, without saving it to disk"
      },
      {
        "sha": "748cabe290f8b3b13aabf96e78db8b5051cc457a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -884,6 +884,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Upgrade all of the descriptor caches to cache the last hardened xpub\n+    // This operation is not atomic, but if it fails, only new entries are added so it is backwards compatible\n+    try {\n+        pwallet->UpgradeDescriptorCache();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     // Set the inactive chain\n     if (wss.m_hd_chains.size() > 0) {\n         LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "c75e1759bc4280c17912d79cabfde350918f3d98",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fede3b8ba69e2cc82c617cdf406ab79df58825/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "patch": "@@ -43,6 +43,9 @@ enum WalletFlags : uint64_t {\n     // Indicates that the metadata has already been upgraded to contain key origins\n     WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n \n+    // Indicates that the descriptor cache has been upgraded to cache last hardened xpubs\n+    WALLET_FLAG_LAST_HARDENED_XPUB_CACHED = (1ULL << 2),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n "
      }
    ]
  },
  {
    "sha": "75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTUzMGM5M2E4M2YzZTk0YmNiNzhiNmFhNDYzYzU1NzBjMWU3Mzdl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T18:40:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T17:49:22Z"
      },
      "message": "Remove priv option for ToNormalizedString",
      "tree": {
        "sha": "302ca6852f02536c966dffd622fde17466b755d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/302ca6852f02536c966dffd622fde17466b755d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fede3b8ba69e2cc82c617cdf406ab79df58825",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74fede3b8ba69e2cc82c617cdf406ab79df58825"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 17,
      "deletions": 24
    },
    "files": [
      {
        "sha": "bd22c467768f3eec5666c1e7214a3d4d393f06c4",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub, priv)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -263,9 +263,8 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n     {\n-        if (priv) return ToPrivateString(arg, ret);\n         ret = ToString();\n         return true;\n     }\n@@ -413,11 +412,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -430,7 +428,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Either no derivation or all unhardened derivation\n         if (i == -1) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -456,7 +453,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + (priv ? EncodeExtKey(xprv) : EncodeExtPubKey(xprv.Neuter())) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xprv.Neuter()) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -550,7 +547,7 @@ class DescriptorImpl : public Descriptor\n             if (pos++) ret += \",\";\n             std::string tmp;\n             if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp, priv)) return false;\n+                if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n             } else if (priv) {\n                 if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n             } else {\n@@ -579,9 +576,9 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, priv, true);\n+        bool ret = ToStringHelper(&arg, out, false, true);\n         out = AddChecksum(out);\n         return ret;\n     }"
      },
      {
        "sha": "8379905660fb6a5165edc64055aa778dbad3e361",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -115,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "8553f80a1700d38254c11fd3424cb736ce2d7467",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -124,14 +124,10 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n \n     // Check that private can produce the normalized descriptors\n     std::string norm1;\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n \n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);"
      },
      {
        "sha": "c1e8b14b41df9e2b2dd5e0ea05ff1f0668469de4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -1802,7 +1802,7 @@ RPCHelpMan listdescriptors()\n         LOCK(desc_spk_man->cs_desc_man);\n         const auto& wallet_descriptor = desc_spk_man->GetWalletDescriptor();\n         std::string descriptor;\n-        if (!desc_spk_man->GetDescriptorString(descriptor, false)) {\n+        if (!desc_spk_man->GetDescriptorString(descriptor)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Can't get normalized descriptor string.\");\n         }\n         spk.pushKV(\"desc\", descriptor);"
      },
      {
        "sha": "f1d51174158c052f552e05fb2c02ac1fb16072c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -3872,7 +3872,7 @@ RPCHelpMan getaddressinfo()\n     DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n     if (desc_spk_man) {\n         std::string desc_str;\n-        if (desc_spk_man->GetDescriptorString(desc_str, false)) {\n+        if (desc_spk_man->GetDescriptorString(desc_str)) {\n             ret.pushKV(\"parent_desc\", desc_str);\n         }\n     }"
      },
      {
        "sha": "c0c752cad600d8825952c3b389cee2624fc42a29",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -2266,7 +2266,7 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n     return script_pub_keys;\n }\n \n-bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv) const\n+bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n {\n     LOCK(cs_desc_man);\n     if (m_storage.IsLocked()) {\n@@ -2276,7 +2276,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n     FlatSigningProvider provider;\n     provider.keys = GetKeys();\n \n-    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n+    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out);\n }\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()"
      },
      {
        "sha": "3b78d92dff187046cb7b51617d5ff4bd388afdef",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75530c93a83f3e94bcb78b6aa463c5570c1e737e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "patch": "@@ -630,7 +630,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     const WalletDescriptor GetWalletDescriptor() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n     const std::vector<CScript> GetScriptPubKeys() const;\n \n-    bool GetDescriptorString(std::string& out, bool priv) const;\n+    bool GetDescriptorString(std::string& out) const;\n \n     void UpgradeDescriptorCache();\n };"
      }
    ]
  },
  {
    "sha": "7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTI2ZmYxMGMyZjJlMTM5ZmJjNjNlMmYzN2ZiMzNlYTRlZmFlMDg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-22T19:03:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:30Z"
      },
      "message": "Change DescriptorImpl::ToStringHelper to use an enum\n\nInstead of having multiple, possibly conflicting, bools controlling the\nflow of ToStringHelper, use an enum.",
      "tree": {
        "sha": "625200944508bf85e71d34780d1b40983a58e74a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625200944508bf85e71d34780d1b40983a58e74a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75530c93a83f3e94bcb78b6aa463c5570c1e737e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75530c93a83f3e94bcb78b6aa463c5570c1e737e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 26,
      "deletions": 15
    },
    "files": [
      {
        "sha": "31fdafa88f8a893d36953941dbdfea32f61e9de9",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "patch": "@@ -507,6 +507,13 @@ class DescriptorImpl : public Descriptor\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::vector<std::unique_ptr<DescriptorImpl>> scripts, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(std::move(scripts)) {}\n \n+    enum class StringType\n+    {\n+        PUBLIC,\n+        PRIVATE,\n+        NORMALIZED,\n+    };\n+\n     bool IsSolvable() const override\n     {\n         for (const auto& arg : m_subdescriptor_args) {\n@@ -526,37 +533,41 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv, bool normalized) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n         std::string ret = m_name + \"(\" + extra;\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n-            } else if (priv) {\n-                if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n-            } else {\n-                tmp = pubkey->ToString();\n+            switch (type) {\n+                case StringType::NORMALIZED:\n+                    if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PRIVATE:\n+                    if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n             }\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, priv, normalized)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -565,20 +576,20 @@ class DescriptorImpl : public Descriptor\n     std::string ToString() const final\n     {\n         std::string ret;\n-        ToStringHelper(nullptr, ret, false, false);\n+        ToStringHelper(nullptr, ret, StringType::PUBLIC);\n         return AddChecksum(ret);\n     }\n \n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const final\n     {\n-        bool ret = ToStringHelper(&arg, out, true, false);\n+        bool ret = ToStringHelper(&arg, out, StringType::PRIVATE);\n         out = AddChecksum(out);\n         return ret;\n     }\n \n     bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, false, true);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -832,7 +843,7 @@ class TRDescriptor final : public DescriptorImpl\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n         return Vector(GetScriptForDestination(output));\n     }\n-    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const override\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const override\n     {\n         if (m_depths.empty()) return true;\n         std::vector<bool> path;\n@@ -843,7 +854,7 @@ class TRDescriptor final : public DescriptorImpl\n                 path.push_back(false);\n             }\n             std::string tmp;\n-            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type)) return false;\n             ret += std::move(tmp);\n             while (!path.empty() && path.back()) {\n                 if (path.size() > 1) ret += '}';"
      }
    ]
  },
  {
    "sha": "3280704886b60644d103a5eb310691c003a39328",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjgwNzA0ODg2YjYwNjQ0ZDEwM2E1ZWIzMTA2OTFjMDAzYTM5MzI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T19:48:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:45Z"
      },
      "message": "Pass in DescriptorCache to ToNormalizedString\n\nUse the descriptor xpub cache in ToNormalizedString so that the wallet\ndoes not need to be unlocked in order to get the normalized descriptor.",
      "tree": {
        "sha": "66a03f5b71657f1823842c9d9404b4780289e0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a03f5b71657f1823842c9d9404b4780289e0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3280704886b60644d103a5eb310691c003a39328",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3280704886b60644d103a5eb310691c003a39328",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a26ff10c2f2e139fbc63e2f37fb33ea4efae088"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 36,
      "deletions": 26
    },
    "files": [
      {
        "sha": "682b55742a52ea132361a89905fbbe82b37c80f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 24,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub, cache)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -263,7 +263,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         ret = ToString();\n         return true;\n@@ -412,7 +412,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n@@ -431,29 +431,39 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n             out = ToString();\n             return true;\n         }\n-        // Derive the xpub at the last hardened step\n-        CExtKey xprv;\n-        if (!GetExtKey(arg, xprv)) return false;\n+        // Get the path to the last hardened stup\n         KeyOriginInfo origin;\n         int k = 0;\n         for (; k <= i; ++k) {\n-            // Derive\n-            xprv.Derive(xprv, m_path.at(k));\n             // Add to the path\n             origin.path.push_back(m_path.at(k));\n-            // First derivation element, get the fingerprint for origin\n-            if (k == 0) {\n-                std::copy(xprv.vchFingerprint, xprv.vchFingerprint + 4, origin.fingerprint);\n-            }\n         }\n         // Build the remaining path\n         KeyPath end_path;\n         for (; k < (int)m_path.size(); ++k) {\n             end_path.push_back(m_path.at(k));\n         }\n+        // Get the fingerprint\n+        CKeyID id = m_root_extkey.pubkey.GetID();\n+        std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+\n+        CExtPubKey xpub;\n+        CExtKey lh_xprv;\n+        // If we have the cache, just get the parent xpub\n+        if (cache != nullptr) {\n+            cache->GetCachedLastHardenedExtPubKey(m_expr_index, xpub);\n+        }\n+        if (!xpub.pubkey.IsValid()) {\n+            // Cache miss, or nor cache, or need privkey\n+            CExtKey xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n+            xpub = lh_xprv.Neuter();\n+        }\n+        assert(xpub.pubkey.IsValid());\n+\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xprv.Neuter()) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xpub) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -533,19 +543,19 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, type)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n@@ -555,7 +565,7 @@ class DescriptorImpl : public Descriptor\n             std::string tmp;\n             switch (type) {\n                 case StringType::NORMALIZED:\n-                    if (!pubkey->ToNormalizedString(*arg, tmp)) return false;\n+                    if (!pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n                     break;\n                 case StringType::PRIVATE:\n                     if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n@@ -567,7 +577,7 @@ class DescriptorImpl : public Descriptor\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, type)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type, cache)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -587,9 +597,9 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED, cache);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -843,7 +853,7 @@ class TRDescriptor final : public DescriptorImpl\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n         return Vector(GetScriptForDestination(output));\n     }\n-    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type) const override\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const override\n     {\n         if (m_depths.empty()) return true;\n         std::vector<bool> path;\n@@ -854,7 +864,7 @@ class TRDescriptor final : public DescriptorImpl\n                 path.push_back(false);\n             }\n             std::string tmp;\n-            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type)) return false;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n             while (!path.empty() && path.back()) {\n                 if (path.size() > 1) ret += '}';"
      },
      {
        "sha": "ecd7c4eea5f10efd9eac0bdc035ebbf2ab3df822",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -115,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "ddb6b050714f3cc231895ffe4b8a98f583803c86",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3280704886b60644d103a5eb310691c003a39328/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3280704886b60644d103a5eb310691c003a39328/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3280704886b60644d103a5eb310691c003a39328",
        "patch": "@@ -2276,7 +2276,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n     FlatSigningProvider provider;\n     provider.keys = GetKeys();\n \n-    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out);\n+    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, &m_wallet_descriptor.cache);\n }\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()"
      }
    ]
  },
  {
    "sha": "e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmNmMGVkOTJkZTMxYTVhYzM1YTI3MWIwZGE4ZjBhODM2NGQxMTc1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-01T22:37:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T18:08:46Z"
      },
      "message": "wallet, rpc: listdescriptors does not need unlocked\n\nWith the last hardened xpub cache, we don't neeed to have the wallet be\nunlocked for listdescriptors.",
      "tree": {
        "sha": "c963f0e090f205620a481ce94b9bfabd632aedd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c963f0e090f205620a481ce94b9bfabd632aedd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3280704886b60644d103a5eb310691c003a39328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3280704886b60644d103a5eb310691c003a39328",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3280704886b60644d103a5eb310691c003a39328"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ead9e4cefb0357f4811d8cc29c307dd79a78cd31",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -1787,8 +1787,6 @@ RPCHelpMan listdescriptors()\n         throw JSONRPCError(RPC_WALLET_ERROR, \"listdescriptors is not available for non-descriptor wallets\");\n     }\n \n-    EnsureWalletIsUnlocked(*wallet);\n-\n     LOCK(wallet->cs_wallet);\n \n     UniValue descriptors(UniValue::VARR);"
      },
      {
        "sha": "2a3880f2d1035f9a22e1e52d9962acdf8625d4da",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -2269,9 +2269,6 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n {\n     LOCK(cs_desc_man);\n-    if (m_storage.IsLocked()) {\n-        return false;\n-    }\n \n     FlatSigningProvider provider;\n     provider.keys = GetKeys();"
      },
      {
        "sha": "bf53c998551e4a08719a6eed41d23d74270b4908",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "patch": "@@ -72,6 +72,10 @@ def run_test(self):\n         }\n         assert_equal(expected, wallet.listdescriptors())\n \n+        self.log.info(\"Test listdescriptors with encrypted wallet\")\n+        wallet.encryptwallet(\"pass\")\n+        assert_equal(expected, wallet.listdescriptors())\n+\n         self.log.info('Test non-active non-range combo descriptor')\n         node.createwallet(wallet_name='w4', blank=True, descriptors=True)\n         wallet = node.get_wallet_rpc('w4')"
      }
    ]
  },
  {
    "sha": "fb7be92b094477131140b58a4e3ae98366b93e76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjdiZTkyYjA5NDQ3NzEzMTE0MGI1OGE0ZTNhZTk4MzY2YjkzZTc2",
    "commit": {
      "author": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-06-13T15:38:59Z"
      },
      "committer": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-06-25T03:08:26Z"
      },
      "message": "Mark print-% target as phony.\n\n.PHONY does not take patterns (such as print-%) as prerequisites.\nHave print-% depend on FORCE and mark FORCE as phony.\n\n$ # on master\n$ make print-host\nhost=x86_64-pc-linux-gnu\n$ touch print-host\n$ make print-host\nmake: 'print-host' is up to date.\n$\n$ git co mark_print_as_phony\nSwitched to branch 'mark_print_as_phony'\n$ make print-host\nhost=x86_64-pc-linux-gnu\n$ touch FORCE\n$ make print-host\nhost=x86_64-pc-linux-gnu",
      "tree": {
        "sha": "50ce7c94e9b040f738a0d5b07e6f6752abc2a549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50ce7c94e9b040f738a0d5b07e6f6752abc2a549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7be92b094477131140b58a4e3ae98366b93e76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7be92b094477131140b58a4e3ae98366b93e76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7be92b094477131140b58a4e3ae98366b93e76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7be92b094477131140b58a4e3ae98366b93e76/comments",
    "author": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3d644a127e1432fbaf1c9d719edb28301943c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d644a127e1432fbaf1c9d719edb28301943c60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d644a127e1432fbaf1c9d719edb28301943c60"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "49d5d83e82ed412abeaabad83ed2e24f204188c6",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7be92b094477131140b58a4e3ae98366b93e76/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7be92b094477131140b58a4e3ae98366b93e76/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=fb7be92b094477131140b58a4e3ae98366b93e76",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n ACLOCAL_AMFLAGS = -I build-aux/m4"
      },
      {
        "sha": "a3b9cd20991180dc760ee964b6403600be577658",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7be92b094477131140b58a4e3ae98366b93e76/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7be92b094477131140b58a4e3ae98366b93e76/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=fb7be92b094477131140b58a4e3ae98366b93e76",
        "patch": "@@ -1,7 +1,7 @@\n .NOTPARALLEL :\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n # When invoking a sub-make, keep only the command line variable definitions\n@@ -284,3 +284,4 @@ download: download-osx download-linux download-win\n $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n+.PHONY: FORCE"
      },
      {
        "sha": "e8d70d65e039439dcaf89a3470d28248e6f50174",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7be92b094477131140b58a4e3ae98366b93e76/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7be92b094477131140b58a4e3ae98366b93e76/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb7be92b094477131140b58a4e3ae98366b93e76",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n DIST_SUBDIRS = secp256k1 univalue"
      }
    ]
  },
  {
    "sha": "246daf1f537d4b7a39774b22db86ed1931b7819b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDZkYWYxZjUzN2Q0YjdhMzk3NzRiMjJkYjg2ZWQxOTMxYjc4MTli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-25T08:07:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-25T08:07:58Z"
      },
      "message": "Merge bitcoin/bitcoin#22322: fuzz: Check banman roundtrip\n\nfa485d06ec10acd9a791f8d29689e1e82591fb70 fuzz: Check banman roundtrip (MarcoFalke)\n\nPull request description:\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa485d06ec10acd9a791f8d29689e1e82591fb70\n  vasild:\n    ACK fa485d06ec10acd9a791f8d29689e1e82591fb70\n\nTree-SHA512: 84e297c0b90ef68d72afd2053bfda2888496c1b180233516a8caaf76d6c03403f1e4ed59f1eb32d799873fc34009634b4ce372244b9d546d04626af41ac4d1d7",
      "tree": {
        "sha": "001bd8c74d69912acd5610aa24f2f481d9620857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/001bd8c74d69912acd5610aa24f2f481d9620857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/246daf1f537d4b7a39774b22db86ed1931b7819b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjV1QwAi9/Dy0xF49ZA+p5Uds/YW1sisMkVEcrWrLsjDXZ9L/9PE07P09dY6SwT\n1NjhIvURM+pgfjhEOS6mBVT/1NJPogKqCVlVAtw4PCjZbRGRYGKo2UZttavHcTQh\nCiTByTr8KPRAZ0M9wREVe8C6uozRHSiEv+LVsX5nr4oXco5yjARY4UFGqBuCts2o\nj+AbmgI5Z9C3b2dQ4lH6iDbBGMJXmJgnlmnEnaFMQwEK2G5Ew8GFLSq1vPGTbZqH\nEUk7haYu+ReFKIssc1Ifq5kb9Z0C8+98+BRNByg2g3VyD38zJgtKy9gG/g1Qc+kz\nwRGVUc7ya72g+q27Xq2wcIjn8A2NldAITFyRlhO9Rp8sCyggoZFEwO5p7uPRMSsy\nGItN7c0pBM+KAS+LYBk5GOVbfxe+YFpC9fEs/79QJqRQKlVDkzkxFCEheyq3pDmj\nDUoeMawQrND2Pcldv32dy7ekwofpdvXpGY04RcqmyaflHVZmQ0vCcbXtYs78Jw9f\nPInFxNig\n=J/YJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 001bd8c74d69912acd5610aa24f2f481d9620857\nparent b2f5c38333fd2ec03fd1299a1bce507b25753f45\nparent fa485d06ec10acd9a791f8d29689e1e82591fb70\nauthor MarcoFalke <falke.marco@gmail.com> 1624608469 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624608478 +0200\n\nMerge bitcoin/bitcoin#22322: fuzz: Check banman roundtrip\n\nfa485d06ec10acd9a791f8d29689e1e82591fb70 fuzz: Check banman roundtrip (MarcoFalke)\n\nPull request description:\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa485d06ec10acd9a791f8d29689e1e82591fb70\n  vasild:\n    ACK fa485d06ec10acd9a791f8d29689e1e82591fb70\n\nTree-SHA512: 84e297c0b90ef68d72afd2053bfda2888496c1b180233516a8caaf76d6c03403f1e4ed59f1eb32d799873fc34009634b4ce372244b9d546d04626af41ac4d1d7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246daf1f537d4b7a39774b22db86ed1931b7819b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/246daf1f537d4b7a39774b22db86ed1931b7819b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246daf1f537d4b7a39774b22db86ed1931b7819b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f5c38333fd2ec03fd1299a1bce507b25753f45"
      },
      {
        "sha": "fa485d06ec10acd9a791f8d29689e1e82591fb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa485d06ec10acd9a791f8d29689e1e82591fb70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa485d06ec10acd9a791f8d29689e1e82591fb70"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "182aabc79b86bf9ce95cbf4809e4dc0273fdb6d9",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246daf1f537d4b7a39774b22db86ed1931b7819b/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246daf1f537d4b7a39774b22db86ed1931b7819b/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=246daf1f537d4b7a39774b22db86ed1931b7819b",
        "patch": "@@ -32,6 +32,13 @@ void initialize_banman()\n     static const auto testing_setup = MakeNoLogFileContext<>();\n }\n \n+static bool operator==(const CBanEntry& lhs, const CBanEntry& rhs)\n+{\n+    return lhs.nVersion == rhs.nVersion &&\n+           lhs.nCreateTime == rhs.nCreateTime &&\n+           lhs.nBanUntil == rhs.nBanUntil;\n+}\n+\n FUZZ_TARGET_INIT(banman, initialize_banman)\n {\n     // The complexity is O(N^2), where N is the input size, because each call\n@@ -43,19 +50,20 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n \n     const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n+    bool force_read_and_write_to_err{false};\n     if (start_with_corrupted_banlist) {\n         const std::string sfx{fuzzed_data_provider.ConsumeBool() ? \".dat\" : \".json\"};\n         assert(WriteBinaryFile(banlist_file.string() + sfx,\n                                fuzzed_data_provider.ConsumeRandomLengthString()));\n     } else {\n-        const bool force_read_and_write_to_err{fuzzed_data_provider.ConsumeBool()};\n+        force_read_and_write_to_err = fuzzed_data_provider.ConsumeBool();\n         if (force_read_and_write_to_err) {\n             banlist_file = fs::path{\"path\"} / \"to\" / \"inaccessible\" / \"fuzzed_banlist\";\n         }\n     }\n \n     {\n-        BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n+        BanMan ban_man{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ ConsumeBanTimeOffset(fuzzed_data_provider)};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n             CallOneOf(\n                 fuzzed_data_provider,\n@@ -93,6 +101,16 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                     ban_man.Discourage(ConsumeNetAddr(fuzzed_data_provider));\n                 });\n         }\n+        if (!force_read_and_write_to_err) {\n+            ban_man.DumpBanlist();\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+            banmap_t banmap;\n+            ban_man.GetBanned(banmap);\n+            BanMan ban_man_read{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ 0};\n+            banmap_t banmap_read;\n+            ban_man_read.GetBanned(banmap_read);\n+            assert(banmap == banmap_read);\n+        }\n     }\n     fs::remove(banlist_file.string() + \".dat\");\n     fs::remove(banlist_file.string() + \".json\");"
      }
    ]
  },
  {
    "sha": "3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTMwNmVlMWQ1Yzc5ZWRhNjRlYjk5MWZiMjY5NmJmNTMwZjBiMzBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-25T09:21:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-25T09:21:33Z"
      },
      "message": "Merge bitcoin/bitcoin#19362: rpc/blockchain: Reset scantxoutset progress before inferring descriptors\n\n8c4129b4540f4f739413ed9a6fbfc78afc252f42 rpc: reset scantxoutset progress on finish (Pavol Rusnak)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/19361 by moving resetting the `g_scan_progress` variable **before** inferring the descriptors\n\nACKs for top commit:\n  achow101:\n    Code review ACK 8c4129b4540f4f739413ed9a6fbfc78afc252f42\n\nTree-SHA512: 2b81e5c930b9c201a1b9cc742c37e0617582326acd9adbd6b14991d33c05d51b1d5ff6a26f3accab7d274dc8c6a48bc8cbccf0811b60c1f76dd805f9b31482c0",
      "tree": {
        "sha": "2efac58a6976cc4d7f855868ff46add93c4698a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2efac58a6976cc4d7f855868ff46add93c4698a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiX/wv/edBp5f0h7NWvyqDTxhremrNKQqsq1UD8mzTfFvH1kt+Xm3MPQcJdbLQ5\nfZbAAU6rpT+xVfltWpwp4jdwm2buur3v0FCqxsGRKA0hEa8u3E0V/OlIGX+WZhRX\nFpzjtxeergvCQGBakBHAaNUAepD5jBZGksBaCePTiCj8Ih+fhk3/IUZKlNgxUmAm\n6vkJ0ygscBprX4fdTrYQJreOU/VB/N8F6ZnVU8E7mPmN6RLFdSL2kiFhagDCB1Dz\nJ5quBL6jcQIFwzPjjX5oLMfzBgxqKMVIvOzgP26Gvh6X7QYXlg/LIOoy7jLVMN/3\nE2BBLlxsNIHYboBtGW0TU/WdRFUAxxFJeDO0Q4ZdlnnioCrHyYZT3G1iPUZ9gUki\n4Zs59L6nXuuZbWE3HpZMCLXGFtx7lGWVdMQ+XxW0phTaQaMf+zJj0lH63uEzg4yz\nbXA4f3BOqPIKfHk+xPMBk1HqjHA3dzW6QKjNCnlMUby5s6Tqjs4aD23PjVt+qQAk\ndGTJLfYn\n=srH0\n-----END PGP SIGNATURE-----",
        "payload": "tree 2efac58a6976cc4d7f855868ff46add93c4698a2\nparent 246daf1f537d4b7a39774b22db86ed1931b7819b\nparent 8c4129b4540f4f739413ed9a6fbfc78afc252f42\nauthor MarcoFalke <falke.marco@gmail.com> 1624612889 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624612893 +0200\n\nMerge bitcoin/bitcoin#19362: rpc/blockchain: Reset scantxoutset progress before inferring descriptors\n\n8c4129b4540f4f739413ed9a6fbfc78afc252f42 rpc: reset scantxoutset progress on finish (Pavol Rusnak)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/19361 by moving resetting the `g_scan_progress` variable **before** inferring the descriptors\n\nACKs for top commit:\n  achow101:\n    Code review ACK 8c4129b4540f4f739413ed9a6fbfc78afc252f42\n\nTree-SHA512: 2b81e5c930b9c201a1b9cc742c37e0617582326acd9adbd6b14991d33c05d51b1d5ff6a26f3accab7d274dc8c6a48bc8cbccf0811b60c1f76dd805f9b31482c0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e306ee1d5c79eda64eb991fb2696bf530f0b30d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "246daf1f537d4b7a39774b22db86ed1931b7819b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246daf1f537d4b7a39774b22db86ed1931b7819b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/246daf1f537d4b7a39774b22db86ed1931b7819b"
      },
      {
        "sha": "8c4129b4540f4f739413ed9a6fbfc78afc252f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4129b4540f4f739413ed9a6fbfc78afc252f42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4129b4540f4f739413ed9a6fbfc78afc252f42"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f996aa9c76dbc04fd65df8281f609fdc7fc61106",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e306ee1d5c79eda64eb991fb2696bf530f0b30d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e306ee1d5c79eda64eb991fb2696bf530f0b30d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
        "patch": "@@ -2258,13 +2258,15 @@ class CoinsViewScanReserver\n         if (g_scan_in_progress.exchange(true)) {\n             return false;\n         }\n+        CHECK_NONFATAL(g_scan_progress == 0);\n         m_could_reserve = true;\n         return true;\n     }\n \n     ~CoinsViewScanReserver() {\n         if (m_could_reserve) {\n             g_scan_in_progress = false;\n+            g_scan_progress = 0;\n         }\n     }\n };\n@@ -2381,7 +2383,6 @@ static RPCHelpMan scantxoutset()\n         std::vector<CTxOut> input_txos;\n         std::map<COutPoint, Coin> coins;\n         g_should_abort_scan = false;\n-        g_scan_progress = 0;\n         int64_t count = 0;\n         std::unique_ptr<CCoinsViewCursor> pcursor;\n         CBlockIndex* tip;"
      }
    ]
  },
  {
    "sha": "6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2Y0ZWE3MTg3OGMwYTgzZjJlNDk4MzFlNGRmYTExOWM1Mzc2MWI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-25T17:30:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-25T17:42:05Z"
      },
      "message": "Avoid the use of P0083R3 std::set::merge",
      "tree": {
        "sha": "ef54cda01e43c477b61418b9fb57c026edb5bb7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef54cda01e43c477b61418b9fb57c026edb5bb7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf4ea71878c0a83f2e49831e4dfa119c53761b7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e306ee1d5c79eda64eb991fb2696bf530f0b30d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8349bb9ab50ccd9a1562bf43bc03177693d700c",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf4ea71878c0a83f2e49831e4dfa119c53761b7/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf4ea71878c0a83f2e49831e4dfa119c53761b7/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
        "patch": "@@ -407,7 +407,13 @@ void TaprootSpendData::Merge(TaprootSpendData other)\n         merkle_root = other.merkle_root;\n     }\n     for (auto& [key, control_blocks] : other.scripts) {\n-        scripts[key].merge(std::move(control_blocks));\n+        // Once P0083R3 is supported by all our targeted platforms,\n+        // this loop body can be replaced with:\n+        // scripts[key].merge(std::move(control_blocks));\n+        auto& target = scripts[key];\n+        for (auto& control_block: control_blocks) {\n+            target.insert(std::move(control_block));\n+        }\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzM3NTFhMGM5NDAyMjhjNDY0NjFjNDE5MWYxYTU3MTUzY2I5MDM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-26T08:02:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-26T08:02:36Z"
      },
      "message": "Merge bitcoin/bitcoin#22342: Avoid the use of P0083R3 std::set::merge\n\n6cf4ea71878c0a83f2e49831e4dfa119c53761b7 Avoid the use of P0083R3 std::set::merge (Pieter Wuille)\n\nPull request description:\n\n  This use was introduced in #21365, but as pointed out in #22339, this causes compatibility problems.\n\n  Just avoid its use for now.\n\nACKs for top commit:\n  jonatack:\n    re-ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7\n  benthecarman:\n    ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7\n  hebasto:\n    ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7, successfully compiled on the following systems:\n\nTree-SHA512: 2b3fdcadb7de98963ebb0b192bd956aa68526457fe5b374c74a69ea10d5b68902763148f11abbcc471010bcdc799e0804faef5f8e8ff8a509b3a053c0cb0ba39",
      "tree": {
        "sha": "ef54cda01e43c477b61418b9fb57c026edb5bb7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef54cda01e43c477b61418b9fb57c026edb5bb7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgGRwv/c4Uv7juNKH5BgV7b2wL1hRZCOeP4ZpDOdhkAcqhWqEAy+1/LDfVJCkqI\nv4daQ09fX3J/wMnWGb4/HQ7tNErhHkC9PSjU0A2gmhxI/Bib3i8+CO0c0iiSr2m0\nKivDsj9SdlqF3H1UXQ9ZooaO1rcMaagA7vtRhjGPU/2gphKhR3dSg8wJnhoQR7R4\nxEnQocTytMxoYx/A3QU71cWKCC/iEDVjubzOJtLl+0BD5jubQvFABPqmkgUfimtz\nRfzYTaGT8Yd1VEYSUhaVecwgibVlPT+gAE3lf9BoWotjukgyHsnLT9hXWDt0ZtE1\nVweVlW1f9vjPK+wcar00+x36F2wLh+G/3dV7YOl4UNk9NusEh199zwgIbi63DQ0j\nPgDi4kKBq3vpNtiCiwEPfN6zXu7H26xF0OcK/SC+DHUk1kIziyWscrU68H+e1O4X\n7+ZFj+00nU7UT7y3gFCJuLMq/Rog/Gq5kpYAQfHmINjxwDh4Ok+GmXG13TwQ1I9/\nJxHYOlwS\n=+xc4\n-----END PGP SIGNATURE-----",
        "payload": "tree ef54cda01e43c477b61418b9fb57c026edb5bb7b\nparent 3e306ee1d5c79eda64eb991fb2696bf530f0b30d\nparent 6cf4ea71878c0a83f2e49831e4dfa119c53761b7\nauthor MarcoFalke <falke.marco@gmail.com> 1624694551 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624694556 +0200\n\nMerge bitcoin/bitcoin#22342: Avoid the use of P0083R3 std::set::merge\n\n6cf4ea71878c0a83f2e49831e4dfa119c53761b7 Avoid the use of P0083R3 std::set::merge (Pieter Wuille)\n\nPull request description:\n\n  This use was introduced in #21365, but as pointed out in #22339, this causes compatibility problems.\n\n  Just avoid its use for now.\n\nACKs for top commit:\n  jonatack:\n    re-ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7\n  benthecarman:\n    ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7\n  hebasto:\n    ACK 6cf4ea71878c0a83f2e49831e4dfa119c53761b7, successfully compiled on the following systems:\n\nTree-SHA512: 2b3fdcadb7de98963ebb0b192bd956aa68526457fe5b374c74a69ea10d5b68902763148f11abbcc471010bcdc799e0804faef5f8e8ff8a509b3a053c0cb0ba39\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e306ee1d5c79eda64eb991fb2696bf530f0b30d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e306ee1d5c79eda64eb991fb2696bf530f0b30d"
      },
      {
        "sha": "6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf4ea71878c0a83f2e49831e4dfa119c53761b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf4ea71878c0a83f2e49831e4dfa119c53761b7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8349bb9ab50ccd9a1562bf43bc03177693d700c",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c3751a0c940228c46461c4191f1a57153cb9037/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c3751a0c940228c46461c4191f1a57153cb9037/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=9c3751a0c940228c46461c4191f1a57153cb9037",
        "patch": "@@ -407,7 +407,13 @@ void TaprootSpendData::Merge(TaprootSpendData other)\n         merkle_root = other.merkle_root;\n     }\n     for (auto& [key, control_blocks] : other.scripts) {\n-        scripts[key].merge(std::move(control_blocks));\n+        // Once P0083R3 is supported by all our targeted platforms,\n+        // this loop body can be replaced with:\n+        // scripts[key].merge(std::move(control_blocks));\n+        auto& target = scripts[key];\n+        for (auto& control_block: control_blocks) {\n+            target.insert(std::move(control_block));\n+        }\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDQ5ZjFiNTJlNTYwMmJmM2Y1ZmZkNTQ3MzNjYmE5OWYwZGZhMjJh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-27T11:20:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-27T19:26:03Z"
      },
      "message": "doc: doc/README.md IRC updates\n\n- update remaining link and reference from freenode to libera\n- remove no-longer-existing #bitcoin-dev IRC channel\n- other minor fixups",
      "tree": {
        "sha": "6cb925374670d59cdffa58ca45656dde2fda9e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cb925374670d59cdffa58ca45656dde2fda9e0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDY0OQACgkQT1chs9Dj\nkh2fNQ/+NsD70VWoqkoGNgYK4VC/o34J27S3SexdJh7vhXK9rmNPw07gwPd4k6Lz\nubZ20nr8RND/cqe7VSyTxebBBquiHSzWctWdjco2//BFU5bauJDflUV88Q5yRHT8\nn1sGznACwumHs4/z6Py1thp91rQ/TVscG0S/0ZQ9NYpHiW9LZcRWa6MUvu93Um34\noqPsaKtDqTh8CddQECjy3J8pPh53bDqh7HvyD9GGILNJ0d2SJmAGSTrHn1UR+6ML\nc2iTuAMacWp27zhoVhgcy70t0Cv0rqeIFWqmDxY7RsIzedwTZsl2KENiDFouOXun\nD6y+gIfgxvpMst2cw3HysSoBzhAxHpUn4x+qhsL66wekXDwjaDjRR7Oex6xe84gy\nfXEzW7/lVpt5SX7qxs/WLcWi82j06l7Ep33D0v3CHPRNlv3AioDR/g0ReotMjIcm\nh0WR7wtIIaKrU3F15pmLLZ3Dtd+5dBecSZEjmCyOxJe28mYfT+/3m7Uy1lZ+jHVG\nO1WPjf+TH/fcAoxfK2PxXRf6hnCZ+Rl26KWWYez2SPHXsj22/AH2QhSSrbIV+bfv\nPsceau9+OE3HJb17QqOBIlHwGC0ASudNdPacFj9/05RHA+ZDyhSo5IRUDJgn7knL\nxb2oMv421gUSi1/sqIKKTtz/uusuXxuzMD57oZ9TGappcGtl7gQ=\n=QLL2\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDKSmA5Q3YO+QnjLF6PmP2XrWzmqi+MU/2WV+deN76+PCP/wEE+tZOF5phBT\nM1ZN/WdjKd4I8QRg2NDl8AjMUx2/cdyUNgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wELxEM+gEQGF6NqPzQkFnT2wI8QRg2NDm\n8AiZASMJdaaktQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ/AQ+Q472H9BooZfGtd5F1GSlQjxBGDY0OXwCNFSfDcM\nTqNkAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdh\nbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6cb925374670d59cdffa58ca45656dde2fda9e0a\nparent 9c3751a0c940228c46461c4191f1a57153cb9037\nauthor Jon Atack <jon@atack.com> 1624792810 +0200\ncommitter Jon Atack <jon@atack.com> 1624821963 +0200\n\ndoc: doc/README.md IRC updates\n\n- update remaining link and reference from freenode to libera\n- remove no-longer-existing #bitcoin-dev IRC channel\n- other minor fixups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38f6b1d3275c8516d961a4c2500aa5a8f52ddf84",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
        "patch": "@@ -30,8 +30,8 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on the [Bitcoin StackExchange](https://bitcoin.stackexchange.com)\n-* Ask for help on [#bitcoin](https://webchat.freenode.net/#bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin).\n+* Ask for help on [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+* Ask for help on #bitcoin on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -68,8 +68,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, use [webchat here](https://web.libera.chat/#bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      }
    ]
  },
  {
    "sha": "18c2027c76b54f1a68a0daf98bb06d988b19447d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGMyMDI3Yzc2YjU0ZjFhNjhhMGRhZjk4YmIwNmQ5ODhiMTk0NDdk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-25T04:17:55Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-28T02:10:56Z"
      },
      "message": "doc: Document minimum required libc++ version",
      "tree": {
        "sha": "ec991617906d43aa661a3664db3dbdb3baff57f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec991617906d43aa661a3664db3dbdb3baff57f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18c2027c76b54f1a68a0daf98bb06d988b19447d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDZL7AACgkQQQEIES5+\nqB9cVhAAlI7keYTfljlfofCCH26nPCuY+W55o/vK2esJfxzi5L33G6Pj9xYslOhv\nqbYf4CnB9ccGzCS1+D19uHHyfHC7sgRlISES/bxoBkGShGqUEPxJPgX34QfG0ctY\nOIQeKXQvoVyKy2dthpd9nwEx2sFo0Ub6hhs7beRU7R+U0cbtBAnqJOLzHGN+X8HH\nehOcqXphlIdDx4QUBIlolz13NUyiG+83wKM+rbag1CHhyiiJLqK4CmHQKn75JhRd\naXcgMqU2WDkD2/gVq0St1kXCnsl7tWXOIF9BJmWjF7W173qu0jFuLkjZIbA0U4RX\ndNdJiEhmt6HmerbT4WlMvPo4+zkvf4VKSF7XHvvluWaUvko98mn4yDIeDeDbKrGn\nVqv2lN1lBY4XhbTp7wYeMkSQrAMW6Fq7AFNbLEtzuTwiVDt2l550qhla7YeZpsld\n8w44WYGsFBBPjYZ4kEsZRR2qUOa7Z+7nYum6bbfJt5b7w2+Fi4zHMPYht+8B8pqF\nkyWktcSTzGW40A+Mh4D3wfR1tXYi3e59XoRkZfsbew7pjoGh2gMLFdNu2kujwLjz\nwMHPNORhyuhrLJQr6JH8Fw3Cu7J4xNVftnWQ9/pX0UzRGm8HMLFMVX+jAq7DrXmQ\nkP7zJ2/wjJ4CvOdhncZg8HmXwWhvRYwajlFBnRzYD6eHePLCIm4=\n=Qxq7\n-----END PGP SIGNATURE-----",
        "payload": "tree ec991617906d43aa661a3664db3dbdb3baff57f1\nparent 9c3751a0c940228c46461c4191f1a57153cb9037\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624594675 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624846256 +0300\n\ndoc: Document minimum required libc++ version\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c2027c76b54f1a68a0daf98bb06d988b19447d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18c2027c76b54f1a68a0daf98bb06d988b19447d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c2027c76b54f1a68a0daf98bb06d988b19447d/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "66c5a76b3b8b2127560c3cf0809fcccdd041ceea",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c2027c76b54f1a68a0daf98bb06d988b19447d/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c2027c76b54f1a68a0daf98bb06d988b19447d/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=18c2027c76b54f1a68a0daf98bb06d988b19447d",
        "patch": "@@ -7,7 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n-| Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n+| Clang<sup>[ \\* ](#note1)</sup> |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n@@ -28,6 +28,8 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n \n+<a name=\"note1\">Note \\*</a> : When compiling with `-stdlib=libc++`, the minimum supported libc++ version is 7.0.\n+\n Controlling dependencies\n ------------------------\n Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list."
      }
    ]
  },
  {
    "sha": "ac238f76bf5a872b30a3649be4db1dafe19cfa37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzIzOGY3NmJmNWE4NzJiMzBhMzY0OWJlNGRiMWRhZmUxOWNmYTM3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-28T03:05:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-28T03:06:02Z"
      },
      "message": "Merge bitcoin/bitcoin#22339: doc: Document minimum required libc++ version\n\n18c2027c76b54f1a68a0daf98bb06d988b19447d doc: Document minimum required libc++ version (Hennadii Stepanov)\n\nPull request description:\n\n  The minimum required libc++ version to compile the current master is 7.0.\n\n  See #22324.\n\nACKs for top commit:\n  fanquake:\n    ACK 18c2027c76b54f1a68a0daf98bb06d988b19447d\n\nTree-SHA512: a2811236a600caea5b9fd156993a0195fc3f1c231b48d0e369250ebb759f7153fd974390de388b91b367d9dc5e115922a2cab9d3b8ad872a2724c07b63b9fcf4",
      "tree": {
        "sha": "ec991617906d43aa661a3664db3dbdb3baff57f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec991617906d43aa661a3664db3dbdb3baff57f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac238f76bf5a872b30a3649be4db1dafe19cfa37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDZPJoACgkQLuufXMCV\nJsEuFRAAh+WlRQvvSWSbzWt5N7ds7D6LIUej9Ea1zGub+cXMn3F4LIZ+solsDE9Z\nkwXZtbhvFCX1hfdSDwwKpDolGEDROjnCHtqz7+b1w/Bnn3sPhJUCYEM6aNr+FsoO\npB6qUotVOown9OVBvWGzNlmMTkJlB5I5E04abF+FMqrGBiLjqMHoiINYs/LQgjs9\ndD1uR+YIvLBAlEbAmUc0vU7sLPxGBFNYK+kpwVc0tKJTkKvGMn4XafinoYoiHLl6\nSZr2iOEZVFGKPZiKIImBZ7Vpd48l+Hhh6VnCXtVDpjvnXIRmWCGPQ+FJQx7h4Ugn\nZ1QcQjnDBxH/UqkKi1rTMhQ7zV1YpIMmzJ6SOEKEdwCzwHVX+r/uWFMqKDA3GOM9\n/t7NcP2PW17/PXvPLgXzJEH0nantpan810roJwTE3yawSM+Zm627mTNZVA63km0V\n/JpMfCXzIZbY49RMKkxWZ4ILJNPCBQePQ3kNxw0O7FAjIv/AkwDhPSso3ECinOH0\nQUkkMA/w2ED2cTqupaERrpRh7RX/eh+oN6nT2KtDkg163YuEsvEgumWPMBcRFHDm\nA+VJHvE+jg90odGWcbwDaiiXBauLxP1NuqHi+MIa7mH53nmH5XLDMT231uGChDFv\nmbZqj1JbAQ/jQs9v2JIFbBCGKdojEr2uEAtwCBqEHh+A7P/8hkY=\n=2j3y\n-----END PGP SIGNATURE-----",
        "payload": "tree ec991617906d43aa661a3664db3dbdb3baff57f1\nparent 9c3751a0c940228c46461c4191f1a57153cb9037\nparent 18c2027c76b54f1a68a0daf98bb06d988b19447d\nauthor fanquake <fanquake@gmail.com> 1624849546 +0800\ncommitter fanquake <fanquake@gmail.com> 1624849562 +0800\n\nMerge bitcoin/bitcoin#22339: doc: Document minimum required libc++ version\n\n18c2027c76b54f1a68a0daf98bb06d988b19447d doc: Document minimum required libc++ version (Hennadii Stepanov)\n\nPull request description:\n\n  The minimum required libc++ version to compile the current master is 7.0.\n\n  See #22324.\n\nACKs for top commit:\n  fanquake:\n    ACK 18c2027c76b54f1a68a0daf98bb06d988b19447d\n\nTree-SHA512: a2811236a600caea5b9fd156993a0195fc3f1c231b48d0e369250ebb759f7153fd974390de388b91b367d9dc5e115922a2cab9d3b8ad872a2724c07b63b9fcf4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac238f76bf5a872b30a3649be4db1dafe19cfa37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac238f76bf5a872b30a3649be4db1dafe19cfa37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac238f76bf5a872b30a3649be4db1dafe19cfa37/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      },
      {
        "sha": "18c2027c76b54f1a68a0daf98bb06d988b19447d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c2027c76b54f1a68a0daf98bb06d988b19447d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18c2027c76b54f1a68a0daf98bb06d988b19447d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "66c5a76b3b8b2127560c3cf0809fcccdd041ceea",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac238f76bf5a872b30a3649be4db1dafe19cfa37/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac238f76bf5a872b30a3649be4db1dafe19cfa37/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=ac238f76bf5a872b30a3649be4db1dafe19cfa37",
        "patch": "@@ -7,7 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n-| Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n+| Clang<sup>[ \\* ](#note1)</sup> |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n@@ -28,6 +28,8 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n \n+<a name=\"note1\">Note \\*</a> : When compiling with `-stdlib=libc++`, the minimum supported libc++ version is 7.0.\n+\n Controlling dependencies\n ------------------------\n Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list."
      }
    ]
  },
  {
    "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2RmOTE3MzVmMmJkYzU1NTc3ZDg0YTk5MTVmNTkyMGNlMjNiMDBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T06:00:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T06:00:47Z"
      },
      "message": "Merge bitcoin/bitcoin#22349: doc: repository IRC updates\n\ndd49f1b52e5602bf3f5ffd54733cba99f0dfa22a doc: doc/README.md IRC updates (Jon Atack)\n\nPull request description:\n\n  Follow-up to https://github.com/bitcoin/bitcoin/pull/22109:\n\n  - update remaining link and reference from Freenode to Libera\n  - remove defunct #bitcoin-dev channel\n  - other minor fixups\n\nACKs for top commit:\n  fanquake:\n    ACK dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a\n\nTree-SHA512: de20a8f3889028def7139be1cd0fa15daa3351ca987a16090d0caa6b4cd397e370400e2b3033ec776e270aa3a1ab085ada20fbdcc063ac88e2ad3b8351a596e7",
      "tree": {
        "sha": "01708a3b23ac6c0dcf33d5f09f636fee6a79bc75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01708a3b23ac6c0dcf33d5f09f636fee6a79bc75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjQrAv+J1mZZra4+1vILT/ZSyA1q3QuOxFSwQznaGp/v3/kOU5jiACTJ5/SGcGg\nugvE53Pzeqh8QhDauLcKN9QWhtQS1OeQSVExWXbyjZMvZA26gv1b8orOPiwRFZSw\nc/0XNf5iYjlqvFVEQYBo8kUlPfTdYpdggC/6B4qSKtGo7IDZaz1wSxiBig3weXIF\nBSVLs9k6cIBip7mLItn5mCRrEoYcFefQN6Kr9SEQ43WKPtS0CPX+HaEIZ2vPkzcZ\ndddi3JZOjDrojoRFaupCm7UraXW+V71/TFAT8MhPOYlJ0S9Hzgby+r+/Pp84UUht\nWzO4DciQxj/q3oiFIBmvPpz/9UBP4njl8qOAmIXJgvwg+bjh5kXnd1gEmZ+DZDZB\nmStm/MdQeCNqXW0Q0UwLeqiwTQDDZEnRauH/mvY1bG/TAhQNQo0V7qvcq5Oz9FK7\n0eXZlUEfwiQdUgZm86a7/yruzXNjIxdmb9Kz3mu21UtS/Z6DZlMXOmruk2t8Weou\njMDKkqY4\n=6yI7\n-----END PGP SIGNATURE-----",
        "payload": "tree 01708a3b23ac6c0dcf33d5f09f636fee6a79bc75\nparent ac238f76bf5a872b30a3649be4db1dafe19cfa37\nparent dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a\nauthor MarcoFalke <falke.marco@gmail.com> 1624860044 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624860047 +0200\n\nMerge bitcoin/bitcoin#22349: doc: repository IRC updates\n\ndd49f1b52e5602bf3f5ffd54733cba99f0dfa22a doc: doc/README.md IRC updates (Jon Atack)\n\nPull request description:\n\n  Follow-up to https://github.com/bitcoin/bitcoin/pull/22109:\n\n  - update remaining link and reference from Freenode to Libera\n  - remove defunct #bitcoin-dev channel\n  - other minor fixups\n\nACKs for top commit:\n  fanquake:\n    ACK dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a\n\nTree-SHA512: de20a8f3889028def7139be1cd0fa15daa3351ca987a16090d0caa6b4cd397e370400e2b3033ec776e270aa3a1ab085ada20fbdcc063ac88e2ad3b8351a596e7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac238f76bf5a872b30a3649be4db1dafe19cfa37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac238f76bf5a872b30a3649be4db1dafe19cfa37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac238f76bf5a872b30a3649be4db1dafe19cfa37"
      },
      {
        "sha": "dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd49f1b52e5602bf3f5ffd54733cba99f0dfa22a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38f6b1d3275c8516d961a4c2500aa5a8f52ddf84",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cdf91735f2bdc55577d84a9915f5920ce23b00a/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cdf91735f2bdc55577d84a9915f5920ce23b00a/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "patch": "@@ -30,8 +30,8 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on the [Bitcoin StackExchange](https://bitcoin.stackexchange.com)\n-* Ask for help on [#bitcoin](https://webchat.freenode.net/#bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin).\n+* Ask for help on [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+* Ask for help on #bitcoin on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -68,8 +68,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, use [webchat here](https://web.libera.chat/#bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      }
    ]
  },
  {
    "sha": "057750c09d0a8331c33966d2cc2285ef82f08af8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTc3NTBjMDlkMGE4MzMxYzMzOTY2ZDJjYzIyODVlZjgyZjA4YWY4",
    "commit": {
      "author": {
        "name": "Tushar Singla",
        "email": "singlatushar07@gmail.com",
        "date": "2021-06-27T18:40:08Z"
      },
      "committer": {
        "name": "Tushar Singla",
        "email": "singlatushar07@gmail.com",
        "date": "2021-06-28T06:27:19Z"
      },
      "message": "ci: Upgrading pip version in macos environment\n\nDuring each CI run, for macos native environment, python packages lief\nand zmq are rebuilt everytime which wastes a lot of resources and time.\nThe latest version of pip directly fetches pre-built binaries. Through\nthis commit pip version is upgraded in macos environment before\ninstallation of these packages.",
      "tree": {
        "sha": "21854fd0b5d48db76ca341f9f63525f15830db39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21854fd0b5d48db76ca341f9f63525f15830db39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/057750c09d0a8331c33966d2cc2285ef82f08af8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/057750c09d0a8331c33966d2cc2285ef82f08af8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/057750c09d0a8331c33966d2cc2285ef82f08af8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/057750c09d0a8331c33966d2cc2285ef82f08af8/comments",
    "author": {
      "login": "singlatushar07",
      "id": 58528776,
      "node_id": "MDQ6VXNlcjU4NTI4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58528776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/singlatushar07",
      "html_url": "https://github.com/singlatushar07",
      "followers_url": "https://api.github.com/users/singlatushar07/followers",
      "following_url": "https://api.github.com/users/singlatushar07/following{/other_user}",
      "gists_url": "https://api.github.com/users/singlatushar07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/singlatushar07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/singlatushar07/subscriptions",
      "organizations_url": "https://api.github.com/users/singlatushar07/orgs",
      "repos_url": "https://api.github.com/users/singlatushar07/repos",
      "events_url": "https://api.github.com/users/singlatushar07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/singlatushar07/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "singlatushar07",
      "id": 58528776,
      "node_id": "MDQ6VXNlcjU4NTI4Nzc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58528776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/singlatushar07",
      "html_url": "https://github.com/singlatushar07",
      "followers_url": "https://api.github.com/users/singlatushar07/followers",
      "following_url": "https://api.github.com/users/singlatushar07/following{/other_user}",
      "gists_url": "https://api.github.com/users/singlatushar07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/singlatushar07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/singlatushar07/subscriptions",
      "organizations_url": "https://api.github.com/users/singlatushar07/orgs",
      "repos_url": "https://api.github.com/users/singlatushar07/repos",
      "events_url": "https://api.github.com/users/singlatushar07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/singlatushar07/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "906e4aae60281272f07d1c61f2c450e82c09dde7",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057750c09d0a8331c33966d2cc2285ef82f08af8/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057750c09d0a8331c33966d2cc2285ef82f08af8/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=057750c09d0a8331c33966d2cc2285ef82f08af8",
        "patch": "@@ -11,6 +11,7 @@ if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n fi\n \n if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+  sudo -H pip3 install --upgrade pip\n   IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n fi\n "
      }
    ]
  },
  {
    "sha": "faf36403038afb3df3ddd963bd6c352d3eff4da8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYzNjQwMzAzOGFmYjNkZjNkZGQ5NjNiZDZjMzUyZDNlZmY0ZGE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T08:25:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T08:38:32Z"
      },
      "message": "Remove unused wallet pointer from NotifyTransactionChanged signal",
      "tree": {
        "sha": "297bd126913ff53034f4cdc84340969ff54f78aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297bd126913ff53034f4cdc84340969ff54f78aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf36403038afb3df3ddd963bd6c352d3eff4da8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiNjwv/SepsZkPcj1nD7fHoq0S9inXy+G1rJ+xOw4WD27VAoZAiObjq6wBmcKWJ\n4c50XYyzhpCg2n9GxI+mfhfwgmkFT87aKyn0zBHBLgTRqq4ES2VBp/+1gFTIgH3m\neRfVV67vDU6Frp1Rf3ZoOd8G4GgTFHlDdlpbm2pAApFkNyR9nAXtGWSUUnv/B3Nq\nQd8d01DEO6E9n2YhJEMhwq2mE2WmRFnwGKDokQmc6heKLMSwqCX9dnl6zIlTn87+\n0uIWUexg6LA9SEzoUQT9E2KhBv/Ve9S4VG7zoVhrTZF7v5xlzMSj08hXsbsuYuc1\n16WdAYsGGpZgfLeCMsCrky7O7Lif6vZPKY7YOwY/h9C4G+/NI+WA/3btL6tr8yLS\nxcjK2gjMAiHpJmh0kxS54ujozr2Bo5SHecXxIsKf4OsFEJ/Kps44LBar6Pa5ah8u\nkMVnF3rQyvy3o9WOWfhyaVRCo6ygzEYOKlxqr2LisqRmJu5szNsOZKyWaTlJ2ZUD\nDaFEcJqO\n=SCtW\n-----END PGP SIGNATURE-----",
        "payload": "tree 297bd126913ff53034f4cdc84340969ff54f78aa\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nauthor MarcoFalke <falke.marco@gmail.com> 1624868729 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624869512 +0200\n\nRemove unused wallet pointer from NotifyTransactionChanged signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36403038afb3df3ddd963bd6c352d3eff4da8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf36403038afb3df3ddd963bd6c352d3eff4da8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36403038afb3df3ddd963bd6c352d3eff4da8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e883337fb53c60f04db8532d55e17ddba9f4f830",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "patch": "@@ -69,7 +69,7 @@ uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDe\n         ->findChild<QCheckBox*>(\"optInRBF\")\n         ->setCheckState(rbf ? Qt::Checked : Qt::Unchecked);\n     uint256 txid;\n-    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](CWallet*, const uint256& hash, ChangeType status) {\n+    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](const uint256& hash, ChangeType status) {\n         if (status == CT_NEW) txid = hash;\n     }));\n     ConfirmSend();"
      },
      {
        "sha": "9c22e39e318040f96bbc0a51c580696c8b38f3f6",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "patch": "@@ -481,7 +481,7 @@ class WalletImpl : public Wallet\n     std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyTransactionChanged.connect(\n-            [fn](CWallet*, const uint256& txid, ChangeType status) { fn(txid, status); }));\n+            [fn](const uint256& txid, ChangeType status) { fn(txid, status); }));\n     }\n     std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) override\n     {"
      },
      {
        "sha": "12595956465c5a284f9c95f36ac7f7815d825b49",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "patch": "@@ -801,7 +801,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n         success = false;\n     }\n \n-    NotifyTransactionChanged(this, originalHash, CT_UPDATED);\n+    NotifyTransactionChanged(originalHash, CT_UPDATED);\n \n     return success;\n }\n@@ -930,7 +930,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n     wtx.MarkDirty();\n \n     // Notify UI of new or updated transaction\n-    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    NotifyTransactionChanged(hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n #if HAVE_SYSTEM\n     // notify an external script when a wallet transaction comes in or is updated\n@@ -1104,7 +1104,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             wtx.setAbandoned();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n-            NotifyTransactionChanged(this, wtx.GetHash(), CT_UPDATED);\n+            NotifyTransactionChanged(wtx.GetHash(), CT_UPDATED);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too\n             TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n             while (iter != mapTxSpends.end() && iter->first.hash == now) {\n@@ -1944,7 +1944,7 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     for (const CTxIn& txin : tx->vin) {\n         CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n         coin.MarkDirty();\n-        NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n+        NotifyTransactionChanged(coin.GetHash(), CT_UPDATED);\n     }\n \n     // Get the inserted-CWalletTx from mapWallet so that the\n@@ -1999,7 +1999,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n         for (const auto& txin : it->second.tx->vin)\n             mapTxSpends.erase(txin.prevout);\n         mapWallet.erase(it);\n-        NotifyTransactionChanged(this, hash, CT_DELETED);\n+        NotifyTransactionChanged(hash, CT_DELETED);\n     }\n \n     if (nZapSelectTxRet == DBErrors::NEED_REWRITE)"
      },
      {
        "sha": "537cdce4df6657b3a42696e8b3187b958aee5c01",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36403038afb3df3ddd963bd6c352d3eff4da8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "patch": "@@ -735,8 +735,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n+    boost::signals2::signal<void(const uint256& hashTx, ChangeType status)> NotifyTransactionChanged;\n \n     /** Show progress e.g. for rescan */\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;"
      }
    ]
  },
  {
    "sha": "8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODg4Y2Y0NWY1ZTQ1YjM4Y2I4MzBmOWM5NGNhZmJmNjIyZTFmZTVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T08:51:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T08:39:49Z"
      },
      "message": "Remove unused wallet pointer from NotifyAddressBookChanged",
      "tree": {
        "sha": "16fdcb32e69dc42251d964b471034c123f0e4b5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16fdcb32e69dc42251d964b471034c123f0e4b5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjtgwv/Z6Fnh+UpQVUmtQclyu7IGev1j4/ty8TjtMc5QvbrEMTm6btB/ZU9uS2c\nLvF2Oq1Y/ft3QxnKMdddeJe8ktasv4XKOjKoDBLFKxkIojsHApokXzleKpOQkkW1\nC3XHWWTmc/r22kFHIPUNwzPpqDB27oaIbmaepuokFk+VVbOF59YdGG6RtADYG0TJ\nK76U9h9d53Zs4eo+8RRCz64n6CmnmLKQbG/anxGbaeYpZVNUAV6Iks8l6l/lGjKz\nBsHcuSW7UqNVuZkKsb7gt5+6a5uLceuSopTAlD8NzPKOiEDy5qVRAKy4yHIifYzD\nW68UlYuFPm7CX4NKqr0T/DylFImgSEL/VWWNaQzkNZBECQRti0awLtNXZJR1h3Zp\nErQDojtYo+4hrS0hafjxuuQfgAvzZ/d69XqF1O07pMLeMKhezVt1LYQCquv35BNG\n7fLaXSRW6WIEWydz7e15z39E2llcxi1Bp9101IHQ/g0yuf+Y2dkW8VO7GBO5rDdF\n/TSXLxVv\n=1S4N\n-----END PGP SIGNATURE-----",
        "payload": "tree 16fdcb32e69dc42251d964b471034c123f0e4b5e\nparent faf36403038afb3df3ddd963bd6c352d3eff4da8\nauthor MarcoFalke <falke.marco@gmail.com> 1624870292 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624869589 +0200\n\nRemove unused wallet pointer from NotifyAddressBookChanged\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36403038afb3df3ddd963bd6c352d3eff4da8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf36403038afb3df3ddd963bd6c352d3eff4da8"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e33adf94c937ec1764cd174b01cec867e2f43e03",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
        "patch": "@@ -475,8 +475,8 @@ class WalletImpl : public Wallet\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyAddressBookChanged.connect(\n-            [fn](CWallet*, const CTxDestination& address, const std::string& label, bool is_mine,\n-                const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n+            [fn](const CTxDestination& address, const std::string& label, bool is_mine,\n+                 const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n     }\n     std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n     {"
      },
      {
        "sha": "556476767ab78972bc250e321d718116d038c5b8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
        "patch": "@@ -2033,8 +2033,8 @@ bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& add\n             m_address_book[address].purpose = strPurpose;\n         is_mine = IsMine(address) != ISMINE_NO;\n     }\n-    NotifyAddressBookChanged(this, address, strName, is_mine,\n-                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n+    NotifyAddressBookChanged(address, strName, is_mine,\n+                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW));\n     if (!strPurpose.empty() && !batch.WritePurpose(EncodeDestination(address), strPurpose))\n         return false;\n     return batch.WriteName(EncodeDestination(address), strName);\n@@ -2069,7 +2069,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         is_mine = IsMine(address) != ISMINE_NO;\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", is_mine, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(address, \"\", is_mine, \"\", CT_DELETED);\n \n     batch.ErasePurpose(EncodeDestination(address));\n     return batch.EraseName(EncodeDestination(address));"
      },
      {
        "sha": "91ef79dea8371bd8ec33f0324ddd85cb7ead8206",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
        "patch": "@@ -724,12 +724,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     /**\n      * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n+     * @note called without lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n+    boost::signals2::signal<void(const CTxDestination& address,\n+                                 const std::string& label, bool isMine,\n+                                 const std::string& purpose, ChangeType status)>\n+        NotifyAddressBookChanged;\n \n     /**\n      * Wallet transaction added, removed or updated."
      }
    ]
  },
  {
    "sha": "9ea1da6fc91e17bdaa722001b97aadf576f07f65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWExZGE2ZmM5MWUxN2JkYWE3MjIwMDFiOTdhYWRmNTc2ZjA3ZjY1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-14T20:37:40Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-28T09:05:15Z"
      },
      "message": "qt: Do not extend recent transaction width to address/label string",
      "tree": {
        "sha": "d62b5a4cd59b9f0a58caf89dbf7015476fc9e0c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d62b5a4cd59b9f0a58caf89dbf7015476fc9e0c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ea1da6fc91e17bdaa722001b97aadf576f07f65",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDZkMsACgkQQQEIES5+\nqB9GMg//WehAr5bvvIwLN2SCLZA1kxw6F8p/j1PJkiBaRyquT2DpP/paNAUSMaQ1\n/UJrc1jHmqY7gChvM2MFFGKK7GcTKIBJN3/GriFc/sbhqsCuGcT34jdhIusWjQvZ\nz3CbvqTSKS0QbUaPL9lArERWNKDY4wt/kd9hyz0G34WicDLrmUwepI6d9Tf2vz5l\nLDLeoR/7N00KH43iAbTHsT8V9QKJz3XHgyNpKXfENcfkYpGDcADsxjV7D455IIyF\nNLVd3Esb7IgUhECVdWzhoBxORegIgPAYS/be/+fi0e6CO0Vi0sr+VSv64cvgyLCX\nl2eIS+fnvhhnS6ZeI6RGISzZFDwIw64Xki+3M2eo9eI1HilozO5gwUqVjYGRmwOi\n4hAqXUh1CWRZGj2f0Gl5jIYjeUAnCB1ge3mS+YSGOLW6MBeGivwKfkcNlUwP0hQt\nkQOVdei+BCNkGjWsS2XZGhj/hcD35cdqIlDNZow2S+5OpS61bIH3aTY1eijOEnWD\nQ9HwT9Iaf0+1Sn7Q0k7zRUMW10WdMcBI/xYgqxNOr+urbDKKlYjhhnGsbXiyZpLz\njR4PQmC9jlE9J7+nwipRiJVTTKSgvK1yYbQSdX8cJuN76unvJ5vhF2w5OciuI7O7\nq9fGbtfgN9p5/z91mQh9WE/7q2zErSoauhKJG3feLR7QmBgdZiA=\n=PIsk\n-----END PGP SIGNATURE-----",
        "payload": "tree d62b5a4cd59b9f0a58caf89dbf7015476fc9e0c3\nparent 3a2c84a6b5144f4ee1181373604133751b40d5ce\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1623703060 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624871115 +0300\n\nqt: Do not extend recent transaction width to address/label string\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea1da6fc91e17bdaa722001b97aadf576f07f65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea1da6fc91e17bdaa722001b97aadf576f07f65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea1da6fc91e17bdaa722001b97aadf576f07f65/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a2c84a6b5144f4ee1181373604133751b40d5ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2c84a6b5144f4ee1181373604133751b40d5ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2c84a6b5144f4ee1181373604133751b40d5ce"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b7f1915c9c12152252763e3ebf37a5b556f570e5",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea1da6fc91e17bdaa722001b97aadf576f07f65/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea1da6fc91e17bdaa722001b97aadf576f07f65/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=9ea1da6fc91e17bdaa722001b97aadf576f07f65",
        "patch": "@@ -72,15 +72,13 @@ class TxViewDelegate : public QAbstractItemDelegate\n         painter->setPen(foreground);\n         QRect boundingRect;\n         painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n-        int address_rect_min_width = boundingRect.width();\n \n         if (index.data(TransactionTableModel::WatchonlyRole).toBool())\n         {\n             QIcon iconWatchonly = qvariant_cast<QIcon>(index.data(TransactionTableModel::WatchonlyDecorationRole));\n             QRect watchonlyRect(boundingRect.right() + 5, mainRect.top()+ypad+halfheight, 16, halfheight);\n             iconWatchonly = platformStyle->TextColorIcon(iconWatchonly);\n             iconWatchonly.paint(painter, watchonlyRect);\n-            address_rect_min_width += 5 + watchonlyRect.width();\n         }\n \n         if(amount < 0)\n@@ -109,7 +107,8 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QRect date_bounding_rect;\n         painter->drawText(amountRect, Qt::AlignLeft | Qt::AlignVCenter, GUIUtil::dateTimeStr(date), &date_bounding_rect);\n \n-        const int minimum_width = std::max(address_rect_min_width, amount_bounding_rect.width() + date_bounding_rect.width());\n+        // 0.4*date_bounding_rect.width() is used to visually distinguish a date from an amount.\n+        const int minimum_width = 1.4 * date_bounding_rect.width() + amount_bounding_rect.width();\n         const auto search = m_minimum_width.find(index.row());\n         if (search == m_minimum_width.end() || search->second != minimum_width) {\n             m_minimum_width[index.row()] = minimum_width;"
      }
    ]
  },
  {
    "sha": "cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDQ2YzExNTc3YTA1ZjNkYzllYWM5NGYyN2E2OTg1ZjZiYTA1MDll",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-14T21:20:00Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-28T09:09:42Z"
      },
      "message": "qt: Draw \"eye\" sign at the beginning of watch-only addresses",
      "tree": {
        "sha": "be1dbe7e3d06dacdd2afd3cebadb187f5bc9c8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be1dbe7e3d06dacdd2afd3cebadb187f5bc9c8b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDZkdYACgkQQQEIES5+\nqB+3xQ/+Lwf3k81O0O+ftk5wf8Ko0OEwZmgCqVeeyJKNys80pJ9yrR80OjXI7z7s\nnNOiIcN1pMGjSfjrL4iTV8iORHJuhEwHYmIYX/uyxmlHbSIpa0yzbZu2PEGhG3Nl\nlpazml8zWNrDxPqwVmMVh4xfUFZVBNGa707z53CmxP5BRo9gKMZ/m8UE66XkovId\nKiD4rqZ13qhTg5rQ/tEaxugdBJguFu9VQEhT1sv2Ola3d1FrVbetWnW/Pezv8OG3\nShSqqWR1dU4cDIKc8F3wgCfk/BZtZZSnYu/a87wpXIHXkxzh35xk1eB98QImSs79\nacRHUxoqEAks6wbNiPVrVGnwSkZdSeUxrIap6+Xwv8c2JkmIYkxCeDnjtYCc5ovH\n5buIjXjkhwkjcK//6EI1QcHEeSgxJ6o55nWyIIbmLX7Rcp7biCKcCDHRSGZW4fEw\nGF6dMGmW3q1B6alAq+xZcDD5IVcPSUeYXZJLVOXZbiAQwblIDpUx7CZrq0RGmkn3\nhKe9jh/ypm7mQRRgPjW3x9+Dl2HX7oOJKpX9nzhMKD5iMZCyP+aUQik5PC+gNCXZ\nwNA6UiuajWDkQ1WCjs1mS2OJ+ix7csZUove2hSiihS9Hhfm/zwjoMbI5kVC8V79V\ntntR6Er+wv8N3UffMkCNT3NdKFs9Ms8jWz1Q3MAAZZaueTap5zA=\n=PZSn\n-----END PGP SIGNATURE-----",
        "payload": "tree be1dbe7e3d06dacdd2afd3cebadb187f5bc9c8b2\nparent 9ea1da6fc91e17bdaa722001b97aadf576f07f65\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1623705600 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624871382 +0300\n\nqt: Draw \"eye\" sign at the beginning of watch-only addresses\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd46c11577a05f3dc9eac94f27a6985f6ba0509e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ea1da6fc91e17bdaa722001b97aadf576f07f65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea1da6fc91e17bdaa722001b97aadf576f07f65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea1da6fc91e17bdaa722001b97aadf576f07f65"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "57510b4fdf32ad3bc3dc67bb0f79763b74d0e218",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd46c11577a05f3dc9eac94f27a6985f6ba0509e/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd46c11577a05f3dc9eac94f27a6985f6ba0509e/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
        "patch": "@@ -69,18 +69,18 @@ class TxViewDelegate : public QAbstractItemDelegate\n             foreground = brush.color();\n         }\n \n-        painter->setPen(foreground);\n-        QRect boundingRect;\n-        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n-\n-        if (index.data(TransactionTableModel::WatchonlyRole).toBool())\n-        {\n+        if (index.data(TransactionTableModel::WatchonlyRole).toBool()) {\n             QIcon iconWatchonly = qvariant_cast<QIcon>(index.data(TransactionTableModel::WatchonlyDecorationRole));\n-            QRect watchonlyRect(boundingRect.right() + 5, mainRect.top()+ypad+halfheight, 16, halfheight);\n+            QRect watchonlyRect(addressRect.left(), addressRect.top(), 16, addressRect.height());\n             iconWatchonly = platformStyle->TextColorIcon(iconWatchonly);\n             iconWatchonly.paint(painter, watchonlyRect);\n+            addressRect.setLeft(addressRect.left() + watchonlyRect.width() + 5);\n         }\n \n+        painter->setPen(foreground);\n+        QRect boundingRect;\n+        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n+\n         if(amount < 0)\n         {\n             foreground = COLOR_NEGATIVE;"
      }
    ]
  },
  {
    "sha": "fa051d3e5e50fb5726fc25464fef348255599e1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA1MWQzZTVlNTBmYjU3MjZmYzI1NDY0ZmVmMzQ4MjU1NTk5ZTFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T09:17:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T09:17:24Z"
      },
      "message": "doc: Remove unused section from release process",
      "tree": {
        "sha": "d71144347973b1fb34632c6d0e5145cb8afc5740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d71144347973b1fb34632c6d0e5145cb8afc5740"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa051d3e5e50fb5726fc25464fef348255599e1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUit0Qv/VbynPvO57ra0RBnGt3r7CidzetP9fv1VBPrv5ZfQHGkw0iJzecSuTLDj\n9OjMITWZk1CKSDZFj5rCJdUq0d6q3SC0LUHykbl5APtglZpU1Gl+IsLosacZ+nUl\nSEP/gFTvD3Uciejd6IJ0+oe3DZVjqJVIRAFSMG2HsVS8+Ms5xk5q3qbiU49arXCF\noSQydA0NoGvD/akzVav92vEM4+07CdspqjonTPyGe+zUFq/9Adve7lB7V7VzyToW\n4rcB4uklfo0kT7KjgpE2VVf5HbcQA8yNEEk4bwEYqtPvkb13hr4mCH9INWTwprkz\nG/KHWkx41GDwQ6uT3G5MYp+LsOK4Go3o+hMpzY/GFhvhqmSYaGWtvjRjiLFGNrYX\njVTKfxFvkShWq/hT7D3CkzH/31m+hR04zyP3iUZjR2fDEyIMyIJ3N+HVx/KCRII0\nrgQWBoOW6Vl+8WNJYps1MVyPz6uULRUy32nOMPqYxB6NoOVske+mPodbGvLwuk/I\nkpa5AklW\n=VcoA\n-----END PGP SIGNATURE-----",
        "payload": "tree d71144347973b1fb34632c6d0e5145cb8afc5740\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nauthor MarcoFalke <falke.marco@gmail.com> 1624871838 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624871844 +0200\n\ndoc: Remove unused section from release process\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa051d3e5e50fb5726fc25464fef348255599e1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa051d3e5e50fb5726fc25464fef348255599e1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa051d3e5e50fb5726fc25464fef348255599e1e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 4,
      "deletions": 19
    },
    "files": [
      {
        "sha": "546169df8d3898e92f8f869a3f19475044f34e10",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 19,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa051d3e5e50fb5726fc25464fef348255599e1e/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa051d3e5e50fb5726fc25464fef348255599e1e/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fa051d3e5e50fb5726fc25464fef348255599e1e",
        "patch": "@@ -278,7 +278,7 @@ The `*-debug*` files generated by the gitian build contain debug symbols\n for troubleshooting by developers. It is assumed that anyone that is interested\n in debugging can run gitian to generate the files for themselves. To avoid\n end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n - GPG-sign it, delete the unsigned file:\n ```\n@@ -288,32 +288,17 @@ rm SHA256SUMS\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n+- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n   into `/var/www/bin/bitcoin-core-${VERSION}`\n \n - A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n ```bash\n transmission-show -m <torrent file>\n ```\n Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoin.org` to download the binary distribution.\n+people without access to `bitcoincore.org` to download the binary distribution.\n Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoin.org (see below for bitcoin.org update instructions).\n-\n-- Update bitcoin.org version\n-\n-  - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n-\n-      - If they have, it will have previously failed their CI\n-        checks because the final release files weren't uploaded.\n-        Trigger a CI rebuild---if it passes, merge.\n-\n-  - If they have not prepared a release, follow the Bitcoin.org release\n-    instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n-\n-  - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links.\n+bitcoincore.org.\n \n - Update other repositories and websites for new version\n "
      }
    ]
  },
  {
    "sha": "fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkyZTYwZjM4Y2IxMDlmZTVhM2M3YWNmZTEwMTdmZmViYzM4OGNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T06:39:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T09:47:05Z"
      },
      "message": "refactor: Make httpserver work queue a unique_ptr",
      "tree": {
        "sha": "5bceec01a444f9b8c46bba89ea456679d392b626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bceec01a444f9b8c46bba89ea456679d392b626"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj1oAwAqPfknHBklu2hhWOlDTvLe4Zuf1AbNlyi6/RP+Yafe1pU14EFrui7a6BV\nFE8AJckA5riYFbWV09nUPFxOLLyDJnpnRLXtjmYBEiP1+yC4HSU5lASiCgKOT7BZ\nqzuI+4EUTnvd0Yb7reVjCoW7RUui7ox1KPnn+7UGObTRIFFrGKL92BcXf4k2caFi\nz/FAEawTif36iwkpJkTKBBOi6Ja0ADDJ1hPV5Gghg28TP9+Rttvy4AzuEUqyD2Ru\n2RsIr3SEAh4AfoZ6rAb3DYDJY2Eyv+sdC9CKuwnLZEnIVorZJ88IOCqFjgGDFCG5\nmy4jI9MOzdNNwIm5JuqpsczmdJnD71b7zO4M7BtumQJxI3NP5lXQ50P0w7BR0FIf\nwWM8C+RGNxqsOWbbghJlZ2Vibvqrbp2oZCPmeUiNahCE4nWbuvuk/JmeSvXP+YXc\nMrmC3tpjPDZWJs6YEkic91mr+Zi1yDmUxNIYEAjavpozSBj+DE2Eo8riAtGxvM1u\ndC6J1UYf\n=bCnb\n-----END PGP SIGNATURE-----",
        "payload": "tree 5bceec01a444f9b8c46bba89ea456679d392b626\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nauthor MarcoFalke <falke.marco@gmail.com> 1624343982 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624873625 +0200\n\nrefactor: Make httpserver work queue a unique_ptr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8741ad9b863520262abb2256f5783fe2e916e49f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
        "patch": "@@ -136,7 +136,7 @@ static struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n static std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = nullptr;\n+static std::unique_ptr<WorkQueue<HTTPClosure>> g_work_queue{nullptr};\n //! Handlers for (sub)paths\n static std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n@@ -256,10 +256,10 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     // Dispatch to worker thread\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n-        assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        assert(g_work_queue);\n+        if (g_work_queue->Enqueue(item.get())) {\n             item.release(); /* if true, queue took ownership */\n-        else {\n+        } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_SERVICE_UNAVAILABLE, \"Work queue depth exceeded\");\n         }\n@@ -392,7 +392,7 @@ bool InitHTTPServer()\n     int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n-    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n     eventHTTP = http_ctr.release();\n@@ -424,7 +424,7 @@ void StartHTTPServer()\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n     }\n }\n \n@@ -435,16 +435,17 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n-    if (workQueue)\n-        workQueue->Interrupt();\n+    if (g_work_queue) {\n+        g_work_queue->Interrupt();\n+    }\n }\n \n void StopHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (workQueue) {\n+    if (g_work_queue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread: g_thread_http_workers) {\n+        for (auto& thread : g_thread_http_workers) {\n             thread.join();\n         }\n         g_thread_http_workers.clear();\n@@ -467,10 +468,7 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = nullptr;\n     }\n-    if (workQueue) {\n-        delete workQueue;\n-        workQueue = nullptr;\n-    }\n+    g_work_queue.reset();\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n "
      }
    ]
  },
  {
    "sha": "3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjU2ZWY3YmVmMjJmMGM4Yzk0YWQ3ZTQwMWQ1MGIxODhkYWUyY2Jl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T14:11:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T14:11:44Z"
      },
      "message": "Merge bitcoin/bitcoin#22146: Reject invalid coin height and output index when loading assumeutxo\n\nfa9ebedec3f982bb5bb459ea33d74c94d9b5cec4 Reject invalid coin height and output index when loading assumeutxo (MarcoFalke)\n\nPull request description:\n\n  It should be impossible to have a coin at a height higher than the height of the snapshot block, so reject those early to avoid integer wraparounds and hash collisions later on.\n\n  Same for the outpoint index.\n\n  Both issues were found by fuzzing:\n\n  * The height issue by OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34793\n  * The outpoint issue by my fuzz server: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34793#c2\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4: patch looks correct\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22146/commits/fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n  theStack:\n    Code review ACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n  benthecarman:\n    crACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n\nTree-SHA512: dae7caee4b3862b23ebdf2acb7edec4baf75b0dbf1409b370b1a73aa6b632b317ebfac596dcbaf4edfb1301b513f45465ea75328962460f35e2af0d7e547c9ac",
      "tree": {
        "sha": "26ef1ec0de73a261f86b55f6dd82328ad0689a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26ef1ec0de73a261f86b55f6dd82328ad0689a62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhIXgv/Z7lReRcSM2hF9f7lG8mpx//xiCpk1JokiCkPbsmYWl3vMIBMrnv5XQCU\niDb4MyP4ps8Hj4rU/mUtpzFbWugo2/2ksboXjlCSS49mn9opAPYSpMxalLr39iOv\n3yO6tt6y+JtwFQA+bhXPKf0U1+WCJDWAaOGlz3/fmkNy5nqbiYnHDyv0/dBqVxZ+\nSncvGMhHKokjAVx9bZXFFZBT8QobSV4OrXcBo9JeehzUFqK/TxwXGNosFu/kaB4k\nId6LoTT9MpFRPSbFmg8Y0osgYk57/979Ma71ul+VYwkyq0F3nMWNJbKaZ9kYORiE\nPt8NKuvwtOZTsobIQRwiYSHY9/tpXb1WPUYE/e+qUtmzgCmn9vgQ4rBYu5jkHVrZ\nflye0Hs9UnXaZSiR1+3gxnqqllCpoBpJqKjI3kOrIQ+Mz9spg3f/Z4FvXuavs/Mg\nL6g5cJMLxGDV5N5BWC4Kcn7PJj/Jb4P2lC7B/4XoDYY2TQNZe12UxVMENhvavM/L\njHrM1UUy\n=nqyZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 26ef1ec0de73a261f86b55f6dd82328ad0689a62\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nparent fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\nauthor MarcoFalke <falke.marco@gmail.com> 1624889501 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624889504 +0200\n\nMerge bitcoin/bitcoin#22146: Reject invalid coin height and output index when loading assumeutxo\n\nfa9ebedec3f982bb5bb459ea33d74c94d9b5cec4 Reject invalid coin height and output index when loading assumeutxo (MarcoFalke)\n\nPull request description:\n\n  It should be impossible to have a coin at a height higher than the height of the snapshot block, so reject those early to avoid integer wraparounds and hash collisions later on.\n\n  Same for the outpoint index.\n\n  Both issues were found by fuzzing:\n\n  * The height issue by OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34793\n  * The outpoint issue by my fuzz server: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34793#c2\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4: patch looks correct\n  jamesob:\n    crACK https://github.com/bitcoin/bitcoin/pull/22146/commits/fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n  theStack:\n    Code review ACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n  benthecarman:\n    crACK fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4\n\nTree-SHA512: dae7caee4b3862b23ebdf2acb7edec4baf75b0dbf1409b370b1a73aa6b632b317ebfac596dcbaf4edfb1301b513f45465ea75328962460f35e2af0d7e547c9ac\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      },
      {
        "sha": "fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9ebedec3f982bb5bb459ea33d74c94d9b5cec4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fe4de0d2180079902ab3c35b8491ca25e75ebf37",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "patch": "@@ -4879,6 +4879,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n                       coins_count - coins_left);\n             return false;\n         }\n+        if (coin.nHeight > base_height ||\n+            outpoint.n >= std::numeric_limits<decltype(outpoint.n)>::max() // Avoid integer wrap-around in coinstats.cpp:ApplyHash\n+        ) {\n+            LogPrintf(\"[snapshot] bad snapshot data after deserializing %d coins\\n\",\n+                      coins_count - coins_left);\n+            return false;\n+        }\n+\n         coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n \n         --coins_left;"
      },
      {
        "sha": "2850cfcea5250339502aee36cf203ae1d873edf4",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "patch": "@@ -34,9 +34,6 @@ unsigned-integer-overflow:crypto/\n unsigned-integer-overflow:FuzzedDataProvider.h\n unsigned-integer-overflow:hash.cpp\n unsigned-integer-overflow:leveldb/\n-# temporary coinstats suppressions (will be removed and fixed in https://github.com/bitcoin/bitcoin/pull/22146)\n-unsigned-integer-overflow:node/coinstats.cpp\n-signed-integer-overflow:node/coinstats.cpp\n unsigned-integer-overflow:policy/fees.cpp\n unsigned-integer-overflow:prevector.h\n unsigned-integer-overflow:pubkey.h"
      }
    ]
  },
  {
    "sha": "986bf78d7e8fd9b69841ecb0decaff840efe9cff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODZiZjc4ZDdlOGZkOWI2OTg0MWVjYjBkZWNhZmY4NDBlZmU5Y2Zm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-28T14:16:48Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-28T14:38:01Z"
      },
      "message": "qt: Emit dataChanged signal to dynamically re-sort Peers table",
      "tree": {
        "sha": "8c0c5c9a97ed87cb1d954400e9074b78b23c0547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c0c5c9a97ed87cb1d954400e9074b78b23c0547"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/986bf78d7e8fd9b69841ecb0decaff840efe9cff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDZ3skACgkQQQEIES5+\nqB9pug//YCC6HsJUx5Lm0Kg0h8SPdvvJaQWuTZJ9YjFrWz3DjFet2f9XLubkqE0m\n5LJSbM9Mq0Z6JvRCy78wAnmj2673l3nSD6sar8PQ9W8nRPqZNGt+1o8t/2k6JRc1\n+AqvulorFl0sVF24WWj/B0vud8Zzob8MMD17gmzbY5hQ09teCcrzib2hGw5rkgD+\nhQnNyCJVkd6YGCLKhjf/RRUXbaK1OQkVKlAnvEs2ARJd94JNo7FPaukuygmnYAxe\nBJ0yB4Nm41Jo1VQ99+v6ISVqS0YSAtGVA0WtISWbd+vxQ+pqHD9AebS4XxP5ND/G\nLTrAVUzo7r03QukhRc1VemZDuCwBotMHRPKEWDUFclfhnvgowPS2rRTVzAi4LFBD\nmfgJXe1qEc2/Le9fn4GfAJK+kHbhlcOulxLVf2UGuP9d6xi0PMOTRLGW/2ISVcb+\nbjQ0UQdzXHCKdtiil4TAbuvAimqvWtkW7iYkspQYbm+pJLOjXihlM0SHFAvQxl/w\n1veOuzznH71yYG3/OxULnliJTBDyhw5STLII7Yd2bTRDKRv1xgofyoNiZL0RpGO6\nwhYizwYtyex7PWsFi20idWM4ha1yuvcNm4e7Q4lsHCpm1mfBX+/BYxFPWsMp426X\niwy7y9Q7Rt4cbZe+SXjGId+qW1Z+kZqci2MyHANIJ6czktzJHHs=\n=Sgp3\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c0c5c9a97ed87cb1d954400e9074b78b23c0547\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624889808 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624891081 +0300\n\nqt: Emit dataChanged signal to dynamically re-sort Peers table\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986bf78d7e8fd9b69841ecb0decaff840efe9cff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/986bf78d7e8fd9b69841ecb0decaff840efe9cff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986bf78d7e8fd9b69841ecb0decaff840efe9cff/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1b7fda6e7752db341ac2138508515e61e09f7f4a",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=986bf78d7e8fd9b69841ecb0decaff840efe9cff",
        "patch": "@@ -179,5 +179,7 @@ void PeerTableModel::refresh()\n         m_peers_data.swap(new_peers_data);\n     }\n \n-    Q_EMIT changed();\n+    const auto top_left = index(0, 0);\n+    const auto bottom_right = index(rowCount() - 1, columnCount() - 1);\n+    Q_EMIT dataChanged(top_left, bottom_right);\n }"
      },
      {
        "sha": "0d841ebf28c5728df7457cbade158395d5da6fd4",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=986bf78d7e8fd9b69841ecb0decaff840efe9cff",
        "patch": "@@ -73,9 +73,6 @@ class PeerTableModel : public QAbstractTableModel\n public Q_SLOTS:\n     void refresh();\n \n-Q_SIGNALS:\n-    void changed();\n-\n private:\n     //! Internal peer data structure.\n     QList<CNodeCombinedStats> m_peers_data{};"
      },
      {
        "sha": "0d835dc393267c83d321784c6078471be0a7b741",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986bf78d7e8fd9b69841ecb0decaff840efe9cff/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=986bf78d7e8fd9b69841ecb0decaff840efe9cff",
        "patch": "@@ -35,6 +35,7 @@\n #endif\n \n #include <QAbstractButton>\n+#include <QAbstractItemModel>\n #include <QDateTime>\n #include <QFont>\n #include <QKeyEvent>\n@@ -684,7 +685,7 @@ void RPCConsole::setClientModel(ClientModel *model, int bestblock_height, int64_\n \n         // peer table signal handling - update peer details when selecting new node\n         connect(ui->peerWidget->selectionModel(), &QItemSelectionModel::selectionChanged, this, &RPCConsole::updateDetailWidget);\n-        connect(model->getPeerTableModel(), &PeerTableModel::changed, this, &RPCConsole::updateDetailWidget);\n+        connect(model->getPeerTableModel(), &QAbstractItemModel::dataChanged, [this] { updateDetailWidget(); });\n \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());"
      }
    ]
  },
  {
    "sha": "61b6a017a9f99ef072b2d1980dd547eb20093352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWI2YTAxN2E5Zjk5ZWYwNzJiMmQxOTgwZGQ1NDdlYjIwMDkzMzUy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T18:14:01Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:14:01Z"
      },
      "message": "test: wallet util: fix multisig P2SH-P2WSH script creation",
      "tree": {
        "sha": "e4d63641915b91356371f192a90af0925964e653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4d63641915b91356371f192a90af0925964e653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61b6a017a9f99ef072b2d1980dd547eb20093352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7ab720260d0565ca4ca32191e5414cea2341ac5",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61b6a017a9f99ef072b2d1980dd547eb20093352/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61b6a017a9f99ef072b2d1980dd547eb20093352/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=61b6a017a9f99ef072b2d1980dd547eb20093352",
        "patch": "@@ -106,7 +106,7 @@ def get_multisig(node):\n                     redeem_script=script_code.hex(),\n                     p2wsh_script=witness_script.hex(),\n                     p2wsh_addr=script_to_p2wsh(script_code),\n-                    p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n+                    p2sh_p2wsh_script=CScript([OP_HASH160, hash160(witness_script), OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n def test_address(node, address, **kwargs):"
      }
    ]
  },
  {
    "sha": "b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTdiNjMzYjk0MmRhMTYyMDQ1YjFmZTc3NDNhOGFiZGZlYWY2MGUy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T21:03:40Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:14:07Z"
      },
      "message": "test: use script_util helpers for creating P2PKH scripts",
      "tree": {
        "sha": "bddde7c25becb24afe070ef0a80e6d0c58a4ac26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bddde7c25becb24afe070ef0a80e6d0c58a4ac26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61b6a017a9f99ef072b2d1980dd547eb20093352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61b6a017a9f99ef072b2d1980dd547eb20093352"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 21,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e3ec53c3d9f2bb45c2cba378ab23c59d6389eb21",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -34,13 +34,14 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     OP_TRUE,\n     hash160,\n )\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -427,7 +428,7 @@ def run_test(self):\n         op0 = CScript([OP_0])\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n-        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n+        unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n         unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n         p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n         p2wshop1 = CScript([OP_0, sha256(op1)])\n@@ -454,7 +455,7 @@ def run_test(self):\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n-                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n                 importlist.append(CScript([OP_0, hash160(pubkey)]).hex())"
      },
      {
        "sha": "f75234a5c723b37924d2790e6e12371273545d9f",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -76,6 +76,9 @@\n     is_op_success,\n     taproot_construct,\n )\n+from test_framework.script_util import (\n+    keyhash_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n@@ -459,7 +462,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             assert script is None\n             pubkeyhash = hash160(pkh)\n             spk = CScript([OP_0, pubkeyhash])\n-            conf[\"scriptcode\"] = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            conf[\"scriptcode\"] = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"script_witv0\"] = None\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n@@ -475,7 +478,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2PKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            spk = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"scriptcode\"] = spk\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:"
      },
      {
        "sha": "5b1a884059079b93babbf1f5532c974b56f73a20",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -60,11 +60,9 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n     OP_ELSE,\n     OP_ENDIF,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     OP_IF,\n     OP_RETURN,\n@@ -77,6 +75,9 @@\n     LegacySignatureHash,\n     hash160,\n )\n+from test_framework.script_util import (\n+    keyhash_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -100,10 +101,6 @@ def __init__(self, sha256, n, value):\n         self.n = n\n         self.nValue = value\n \n-def get_p2pkh_script(pubkeyhash):\n-    \"\"\"Get the script associated with a P2PKH.\"\"\"\n-    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n-\n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness program.\"\"\"\n     tx_hash = SegwitV0SignatureHash(script, tx_to, in_idx, hashtype, value)\n@@ -1550,7 +1547,7 @@ def test_uncompressed_pubkey(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_wsh))\n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1587,7 +1584,7 @@ def test_uncompressed_pubkey(self):\n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n         # Send it to a P2PKH output, which we'll use in the next test.\n-        script_pubkey = get_p2pkh_script(pubkeyhash)\n+        script_pubkey = keyhash_to_p2pkh_script(pubkeyhash)\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), script_sig))\n         tx4.vout.append(CTxOut(tx3.vout[0].nValue - 1000, script_pubkey))\n@@ -1754,7 +1751,7 @@ def test_signature_version_1(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n "
      },
      {
        "sha": "74a3e8c89c614bb8eeac230babc31e0efe53ef11",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -21,14 +21,14 @@\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n-    OP_DUP,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     hash160,\n     sha256,\n )\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+)\n from test_framework.util import hex_str_to_bytes\n \n Key = namedtuple('Key', ['privkey',\n@@ -60,7 +60,7 @@ def get_key(node):\n     pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=node.dumpprivkey(addr),\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n@@ -79,7 +79,7 @@ def get_generate_key():\n     pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=privkey,\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),"
      }
    ]
  },
  {
    "sha": "bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY4ZWJjMWNkNTU1Zjc5MTEwM2Y4MWFkYzkxMTFlMGU1NWM4MDAz",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:37Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:37Z"
      },
      "message": "wallet: allow to import same descriptor twice",
      "tree": {
        "sha": "afbc1236be46e64d0cbaf91df75e14d5445f5397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afbc1236be46e64d0cbaf91df75e14d5445f5397"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf68ebc1cd555f791103f81adc9111e0e55c8003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 122,
      "deletions": 51
    },
    "files": [
      {
        "sha": "3ae36131cc16619aa730090bbd44f0fe86d1ab68",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -1566,9 +1566,8 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n         // Check if the wallet already contains the descriptor\n         auto existing_spk_manager = wallet.GetDescriptorScriptPubKeyMan(w_desc);\n         if (existing_spk_manager) {\n-            LOCK(existing_spk_manager->cs_desc_man);\n-            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n-                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            if (!existing_spk_manager->CanUpdateToWalletDescriptor(w_desc, error)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, error);\n             }\n         }\n "
      },
      {
        "sha": "8b397fa1f34454614c6938f4832d2742d066e019",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -1875,6 +1875,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     AssertLockHeld(cs_desc_man);\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n \n+    // Check if provided key already exists\n+    if (m_map_keys.find(pubkey.GetID()) != m_map_keys.end() ||\n+        m_map_crypted_keys.find(pubkey.GetID()) != m_map_crypted_keys.end()) {\n+        return true;\n+    }\n+\n     if (m_storage.HasEncryptionKeys()) {\n         if (m_storage.IsLocked()) {\n             return false;\n@@ -2302,3 +2308,37 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv)\n \n     return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n }\n+\n+void DescriptorScriptPubKeyMan::UpdateWalletDescriptor(WalletDescriptor& descriptor)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    if (!CanUpdateToWalletDescriptor(descriptor, error)) {\n+        throw std::runtime_error(std::string(__func__) + \": \" + error);\n+    }\n+\n+    m_map_pubkeys.clear();\n+    m_map_script_pub_keys.clear();\n+    m_max_cached_index = -1;\n+    m_wallet_descriptor = descriptor;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error)\n+{\n+    LOCK(cs_desc_man);\n+    if (!HasWalletDescriptor(descriptor)) {\n+        error = \"can only update matching descriptor\";\n+        return false;\n+    }\n+\n+    if (descriptor.range_start > m_wallet_descriptor.range_start ||\n+        descriptor.range_end < m_wallet_descriptor.range_end) {\n+        // Use inclusive range for error\n+        error = strprintf(\"new range must include current range = [%d,%d]\",\n+                          m_wallet_descriptor.range_start,\n+                          m_wallet_descriptor.range_end - 1);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "f2d1d87d5569c2932745e1c3905dcdbc041a965e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -624,6 +624,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n \n     bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n+    void UpdateWalletDescriptor(WalletDescriptor& descriptor);\n+    bool CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error);\n     void AddDescriptorKey(const CKey& key, const CPubKey &pubkey);\n     void WriteDescriptor();\n "
      },
      {
        "sha": "8750f508a7a9ff43d136117f5bc7a5e468ff928c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 35,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -3192,52 +3192,34 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n     }\n \n     LOCK(cs_wallet);\n-    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n-\n-    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n-    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n-    if (old_spk_man) {\n+    auto spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (spk_man) {\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+        spk_man->UpdateWalletDescriptor(desc);\n+    } else {\n+        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        spk_man = new_spk_man.get();\n \n-        {\n-            LOCK(old_spk_man->cs_desc_man);\n-            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n-        }\n-\n-        // Remove from maps of active spkMans\n-        auto old_spk_man_id = old_spk_man->GetID();\n-        for (bool internal : {false, true}) {\n-            for (OutputType t : OUTPUT_TYPES) {\n-                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n-                if (active_spk_man && active_spk_man->GetID() == old_spk_man_id) {\n-                    if (internal) {\n-                        m_internal_spk_managers.erase(t);\n-                    } else {\n-                        m_external_spk_managers.erase(t);\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        m_spk_managers.erase(old_spk_man_id);\n+        // Save the descriptor to memory\n+        m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n     }\n \n     // Add the private keys to the descriptor\n     for (const auto& entry : signing_provider.keys) {\n         const CKey& key = entry.second;\n-        new_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        spk_man->AddDescriptorKey(key, key.GetPubKey());\n     }\n \n     // Top up key pool, the manager will generate new scriptPubKeys internally\n-    if (!new_spk_man->TopUp()) {\n+    if (!spk_man->TopUp()) {\n         WalletLogPrintf(\"Could not top up scriptPubKeys\\n\");\n         return nullptr;\n     }\n \n     // Apply the label if necessary\n     // Note: we disable labels for ranged descriptors\n     if (!desc.descriptor->IsRange()) {\n-        auto script_pub_keys = new_spk_man->GetScriptPubKeys();\n+        auto script_pub_keys = spk_man->GetScriptPubKeys();\n         if (script_pub_keys.empty()) {\n             WalletLogPrintf(\"Could not generate scriptPubKeys (cache is empty)\\n\");\n             return nullptr;\n@@ -3249,12 +3231,8 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n     }\n \n-    // Save the descriptor to memory\n-    auto ret = new_spk_man.get();\n-    m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n-\n     // Save the descriptor to DB\n-    ret->WriteDescriptor();\n+    spk_man->WriteDescriptor();\n \n-    return ret;\n+    return spk_man;\n }"
      },
      {
        "sha": "bf1c8fb2e4494026100c80676a76132fedcd527f",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 65,
        "deletions": 13,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf68ebc1cd555f791103f81adc9111e0e55c8003/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf68ebc1cd555f791103f81adc9111e0e55c8003/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "patch": "@@ -89,17 +89,20 @@ def run_test(self):\n         # # Test importing of a P2PKH descriptor\n         key = get_generate_key()\n         self.log.info(\"Should import a p2pkh descriptor\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"label\": \"Descriptor import test\"},\n-                             success=True)\n+        import_request = {\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                 \"timestamp\": \"now\",\n+                 \"label\": \"Descriptor import test\"}\n+        self.test_importdesc(import_request, success=True)\n         test_address(w1,\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=True,\n                      labels=[\"Descriptor import test\"])\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n \n+        self.log.info(\"Test can import same descriptor with public key twice\")\n+        self.test_importdesc(import_request, success=True)\n+\n         self.log.info(\"Internal addresses cannot have labels\")\n         self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                               \"timestamp\": \"now\",\n@@ -305,7 +308,7 @@ def run_test(self):\n \n         # Check active=False default\n         self.log.info('Check imported descriptors are not active by default')\n-        self.test_importdesc({'desc': descsum_create('pkh([12345678/0h/0h]' + xpub + '/*)'),\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678/1h]' + xpub + '/*)'),\n                               'range' : [0, 2],\n                               'timestamp': 'now',\n                               'internal': True\n@@ -322,6 +325,10 @@ def run_test(self):\n                                \"timestamp\": \"now\"},\n                               success=True,\n                               wallet=wpriv)\n+\n+        self.log.info('Test can import same descriptor with private key twice')\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\"}, success=True, wallet=wpriv)\n+\n         test_address(wpriv,\n                      address,\n                      solvable=True,\n@@ -339,14 +346,25 @@ def run_test(self):\n         wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n         assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+        xprv1 = 'tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52'\n+        acc_xpub1 = 'tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8'  # /84'/0'/0'\n+        chg_xpub1 = 'tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf'  # /84'/1'/0'\n+        xprv2 = 'tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq'\n+        acc_xprv2 = 'tprv8gVCsmRAxVSxyUpsL13Y7ZEWBFPWbgS5E2MmFVNGuANrknvmmn2vWnmHvU8AwEFYzR2ji6EeZLSCLVacsYkvor3Pcb5JY5FGcevqTwYvdYx'\n+        acc_xpub2 = 'tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH'\n+        chg_xpub2 = 'tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh'\n+        xprv3 = 'tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1'\n+        acc_xpub3 = 'tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E'\n+        chg_xpub3 = 'tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb'\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,\" + xprv2 + \"/84h/0h/0h/*,\" + xprv3 + \"/84h/0h/0h/*))#m2sr93jn\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_priv)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,\" + xprv2 + \"/84h/1h/0h/*,\" + xprv3 + \"/84h/1h/0h/*))#q3sztvx5\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -374,14 +392,14 @@ def run_test(self):\n         wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 +\"/*))#tsry0s5e\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_pub)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))#c08a2rzv\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -396,8 +414,15 @@ def run_test(self):\n         change_addr = wmulti_pub.getrawchangeaddress('bech32')\n         assert_equal(change_addr, 'bcrt1qt9uhe3a9hnq7vajl7a094z4s3crm9ttf8zw3f5v9gr2nyd7e3lnsy44n8e')\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 999)\n+\n+        # generate some utxos for next tests\n         txid = w0.sendtoaddress(addr, 10)\n         vout = find_vout_for_address(self.nodes[0], txid, addr)\n+\n+        addr2 = wmulti_pub.getnewaddress('', 'bech32')\n+        txid2 = w0.sendtoaddress(addr2, 10)\n+        vout2 = find_vout_for_address(self.nodes[0], txid2, addr2)\n+\n         self.nodes[0].generate(6)\n         self.sync_all()\n         assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n@@ -411,14 +436,14 @@ def run_test(self):\n         wmulti_priv1 = self.nodes[1].get_wallet_rpc(\"wmulti_priv1\")\n         res = wmulti_priv1.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -434,14 +459,14 @@ def run_test(self):\n         wmulti_priv2 = self.nodes[1].get_wallet_rpc('wmulti_priv2')\n         res = wmulti_priv2.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,\" + xprv2 + \"/84h/0h/0h/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,\" + xprv2 + \"/84h/1h/0h/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -531,6 +556,33 @@ def run_test(self):\n         )\n \n \n+        self.log.info(\"Amending multisig with new private keys\")\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv3\", descriptors=True)\n+        wmulti_priv3 = self.nodes[1].get_wallet_rpc(\"wmulti_priv3\")\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xprv2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+\n+        rawtx = self.nodes[1].createrawtransaction([{'txid': txid2, 'vout': vout2}], {w0.getnewaddress(): 9.999})\n+        tx = wmulti_priv3.signrawtransactionwithwallet(rawtx)\n+        assert_equal(tx['complete'], True)\n+        self.nodes[1].sendrawtransaction(tx['hex'])\n+\n         self.log.info(\"Combo descriptors cannot be active\")\n         self.test_importdesc({\"desc\": descsum_create(\"combo(tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*)\"),\n                               \"active\": True,"
      }
    ]
  },
  {
    "sha": "f1b7db14748d9ee04735b4968366d33bc89aea23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWI3ZGIxNDc0OGQ5ZWUwNDczNWI0OTY4MzY2ZDMzYmM4OWFlYTIz",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:44Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:44Z"
      },
      "message": "wallet: don't mute exceptions in importdescriptors",
      "tree": {
        "sha": "287fea729cdd667a49f8933193e99e314c5ea61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287fea729cdd667a49f8933193e99e314c5ea61f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b7db14748d9ee04735b4968366d33bc89aea23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf68ebc1cd555f791103f81adc9111e0e55c8003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf68ebc1cd555f791103f81adc9111e0e55c8003"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5f0d88288f01f4b449f93c76f0ebb2d9f837578a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1b7db14748d9ee04735b4968366d33bc89aea23/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1b7db14748d9ee04735b4968366d33bc89aea23/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f1b7db14748d9ee04735b4968366d33bc89aea23",
        "patch": "@@ -1590,10 +1590,6 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n     } catch (const UniValue& e) {\n         result.pushKV(\"success\", UniValue(false));\n         result.pushKV(\"error\", e);\n-    } catch (...) {\n-        result.pushKV(\"success\", UniValue(false));\n-\n-        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n     }\n     if (warnings.size()) result.pushKV(\"warnings\", warnings);\n     return result;"
      }
    ]
  },
  {
    "sha": "586f1d53d60880ea2873d860f95e3390016620d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODZmMWQ1M2Q2MDg4MGVhMjg3M2Q4NjBmOTVlMzM5MDAxNjYyMGQx",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:47Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "wallet: maintain SPK consistency on internal flag change",
      "tree": {
        "sha": "c866e742a241e117498c5986e3247d46e293a4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c866e742a241e117498c5986e3247d46e293a4df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586f1d53d60880ea2873d860f95e3390016620d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/586f1d53d60880ea2873d860f95e3390016620d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1b7db14748d9ee04735b4968366d33bc89aea23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b7db14748d9ee04735b4968366d33bc89aea23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b7db14748d9ee04735b4968366d33bc89aea23"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ae490d5cc793d2b59a9793b17ee7953e5fe2e33",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586f1d53d60880ea2873d860f95e3390016620d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586f1d53d60880ea2873d860f95e3390016620d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=586f1d53d60880ea2873d860f95e3390016620d1",
        "patch": "@@ -3153,12 +3153,21 @@ void CWallet::AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n \n void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n {\n+    // Activating ScriptPubKeyManager for a given output and change type is incompatible with legacy wallets.\n+    // Legacy wallets have only one ScriptPubKeyManager and it's active for all output and change types.\n+    Assert(IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto& spk_mans_other = internal ? m_external_spk_managers : m_internal_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n+    if (spk_mans_other[type] == spk_man) {\n+        spk_mans_other[type] = nullptr;\n+    }\n+\n     NotifyCanGetAddressesChanged();\n }\n "
      }
    ]
  },
  {
    "sha": "6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzM3ZDk2NTViY2Y1MjdhZmJkODVkNjEwZDgwNWEyZDBmZDI4YzRm",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:50Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "test: wallet importdescriptors update existing",
      "tree": {
        "sha": "5bc781830b98d9a9478196753dfd1306affd2863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bc781830b98d9a9478196753dfd1306affd2863"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "586f1d53d60880ea2873d860f95e3390016620d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586f1d53d60880ea2873d860f95e3390016620d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/586f1d53d60880ea2873d860f95e3390016620d1"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 61,
      "deletions": 5
    },
    "files": [
      {
        "sha": "adde375e545687bd756d0f134a27f7e594b0f22c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 61,
        "deletions": 5,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6737d9655bcf527afbd85d610d805a2d0fd28c4f/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6737d9655bcf527afbd85d610d805a2d0fd28c4f/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "patch": "@@ -79,7 +79,6 @@ def run_test(self):\n         # RPC importdescriptors -----------------------------------------------\n \n         # # Test import fails if no descriptor present\n-        key = get_generate_key()\n         self.log.info(\"Import should fail if a descriptor is not provided\")\n         self.test_importdesc({\"timestamp\": \"now\"},\n                              success=False,\n@@ -103,11 +102,12 @@ def run_test(self):\n         self.log.info(\"Test can import same descriptor with public key twice\")\n         self.test_importdesc(import_request, success=True)\n \n+        self.log.info(\"Test can update descriptor label\")\n+        self.test_importdesc({**import_request, \"label\": \"Updated label\"}, success=True)\n+        test_address(w1, key.p2pkh_addr, solvable=True, ismine=True, labels=[\"Updated label\"])\n+\n         self.log.info(\"Internal addresses cannot have labels\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"internal\": True,\n-                              \"label\": \"Descriptor import test\"},\n+        self.test_importdesc({**import_request, \"internal\": True},\n                              success=False,\n                              error_code=-8,\n                              error_message=\"Internal addresses should not have a label\")\n@@ -255,6 +255,39 @@ def run_test(self):\n         self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n                               success=False, error_code=-8, error_message='Range is too large')\n \n+        self.log.info(\"Verify we can only extend descriptor's range\")\n+        range_request = {\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [5, 10], 'active': True}\n+        self.test_importdesc(range_request, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 6)\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 11)\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        # Can keep range the same\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.test_importdesc({**range_request, \"range\": [5, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [5, 20]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.log.info(\"Check we can change descriptor internal flag\")\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": True}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getnewaddress, '', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 21)\n+        wpriv.getrawchangeaddress('p2sh-segwit')\n+\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": False}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        wpriv.getnewaddress('', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getrawchangeaddress, 'p2sh-segwit')\n+\n         # Make sure ranged imports import keys in order\n         w1 = self.nodes[1].get_wallet_rpc('w1')\n         self.log.info('Key ranges should be imported in order')\n@@ -306,6 +339,18 @@ def run_test(self):\n         w1.keypoolrefill()\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 5 * 3)\n \n+        self.log.info(\"Check we can change next_index\")\n+        # go back and forth with next_index\n+        for i in [4, 0, 2, 1, 3]:\n+            self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                                  'active': True,\n+                                  'range': [0, 9],\n+                                  'next_index': i,\n+                                  'timestamp': 'now'\n+                                  },\n+                                 success=True)\n+            assert_equal(w1.getnewaddress('', 'bech32'), addresses[i])\n+\n         # Check active=False default\n         self.log.info('Check imported descriptors are not active by default')\n         self.test_importdesc({'desc': descsum_create('pkh([12345678/1h]' + xpub + '/*)'),\n@@ -316,6 +361,17 @@ def run_test(self):\n                              success=True)\n         assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n \n+        self.log.info('Check can activate inactive descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': True,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        address = w1.getrawchangeaddress('legacy')\n+        assert_equal(address, \"mpA2Wh9dvZT7yfELq1UnrUmAoc5qCkMetg\")\n+\n         # # Test importing a descriptor containing a WIF private key\n         wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n         address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\""
      }
    ]
  },
  {
    "sha": "3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWZhZjgzYzc1Y2Q4ZGMyZmEwODQ1MzdiOGVkNjcxNWZiNThjMDRk",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:37:53Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-28T19:44:50Z"
      },
      "message": "wallet: deactivate descriptor",
      "tree": {
        "sha": "5cfbf5602d4d1379935bee09713a555bc4970b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfbf5602d4d1379935bee09713a555bc4970b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6737d9655bcf527afbd85d610d805a2d0fd28c4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6737d9655bcf527afbd85d610d805a2d0fd28c4f"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7de12c3a9488a75df6b416804004318a4bf74883",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -1584,6 +1584,10 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 wallet.AddActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n             }\n+        } else {\n+            if (w_desc.descriptor->GetOutputType()) {\n+                wallet.DeactivateScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n         }\n \n         result.pushKV(\"success\", UniValue(true));"
      },
      {
        "sha": "521708e69c7ad10ad9d387976845afbf8b77c8ab",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -3171,6 +3171,23 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     NotifyCanGetAddressesChanged();\n }\n \n+void CWallet::DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n+{\n+    auto spk_man = GetScriptPubKeyMan(type, internal);\n+    if (spk_man != nullptr && spk_man->GetID() == id) {\n+        WalletLogPrintf(\"Deactivate spkMan: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+        WalletBatch batch(GetDatabase());\n+        if (!batch.EraseActiveScriptPubKeyMan(static_cast<uint8_t>(type), internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": erasing active ScriptPubKeyMan id failed\");\n+        }\n+\n+        auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+        spk_mans[type] = nullptr;\n+    }\n+\n+    NotifyCanGetAddressesChanged();\n+}\n+\n bool CWallet::IsLegacy() const\n {\n     if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {"
      },
      {
        "sha": "001b94047ab9a36647e7fd909efed66f2218f4b5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -895,6 +895,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Remove specified ScriptPubKeyMan from set of active SPK managers. Writes the change to the wallet file.\n+    //! @param[in] id The unique id for the ScriptPubKeyMan\n+    //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n+    //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n+    void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n+\n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "203fca8dd6e90e8a87f2c94b56edc652d41dc0da",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -209,6 +209,12 @@ bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bo\n     return WriteIC(make_pair(key, type), id);\n }\n \n+bool WalletBatch::EraseActiveScriptPubKeyMan(uint8_t type, bool internal)\n+{\n+    const std::string key{internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK};\n+    return EraseIC(make_pair(key, type));\n+}\n+\n bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey)\n {\n     // hash pubkey/privkey to accelerate wallet load"
      },
      {
        "sha": "d740aaadb3e7bc27d2782ad9068dff382c85de87",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -253,6 +253,7 @@ class WalletBatch\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n+    bool EraseActiveScriptPubKeyMan(uint8_t type, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);"
      },
      {
        "sha": "262175c7895fecacaf9c2ed65a1633528ea3699c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "patch": "@@ -372,6 +372,21 @@ def run_test(self):\n         address = w1.getrawchangeaddress('legacy')\n         assert_equal(address, \"mpA2Wh9dvZT7yfELq1UnrUmAoc5qCkMetg\")\n \n+        self.log.info('Check can deactivate active descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': False,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n+        self.log.info('Verify activation state is persistent')\n+        w1.unloadwallet()\n+        self.nodes[1].loadwallet('w1')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n         # # Test importing a descriptor containing a WIF private key\n         wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n         address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\""
      }
    ]
  },
  {
    "sha": "8071ec179d75cefd41dac2a9a248eaf38054b85d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDcxZWMxNzlkNzVjZWZkNDFkYWMyYTlhMjQ4ZWFmMzgwNTRiODVk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-29T01:50:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-29T03:22:57Z"
      },
      "message": "Merge bitcoin/bitcoin#21789: refactor: Remove ::Params() global from CChainState\n\nfa0d9211ef87a682573aaae932c0c440acbcb8a8 refactor: Remove chainparams arg from CChainState member functions (MarcoFalke)\nfa389471251f043ec25e7b01e59b37d3b921ce54 refactor: Remove ::Params() global from inside CChainState member functions (MarcoFalke)\n\nPull request description:\n\n  The `::Params()` global is verbose and confusing. Also it makes tests a bit harder to write because they'd have to mock a global.\n\n  Fix all issues by simply using a member variable that points to the right params.\n\n  (Can be reviewed with `--word-diff-regex=.`)\n\nACKs for top commit:\n  jnewbery:\n    ACK fa0d9211ef87a682573aaae932c0c440acbcb8a8\n  kiminuo:\n    utACK fa0d9211\n  theStack:\n    ACK fa0d9211ef87a682573aaae932c0c440acbcb8a8 \ud83c\udf49\n\nTree-SHA512: 44676b19c9ed471ccb536331d3029bad192d7d50f394fd7b8527ec431452aeec8c4494164b9cf8e16e0123c4463b16be864366c6b599370032c17262625a0356",
      "tree": {
        "sha": "7f30c636e2c48684e287620fa4cf6441463e4e81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f30c636e2c48684e287620fa4cf6441463e4e81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8071ec179d75cefd41dac2a9a248eaf38054b85d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDakhEACgkQLuufXMCV\nJsGk8w/8DewvkS19ubu8zugTMZmdlsOxA9KraddhbYtLjmT/fBSOyYC9fV7CYaYQ\njQBnj0XbCHLUNYvuhQUOa3ZpFGQGVVIEFpGOG+CoCMpSDC5lKxYYx6dyYQUId61Y\naQRjYkRN48E5ThpAysJ3VtsnySBWNvnDqYQNvo1BOSPWVkFmcEfI2F8NJaiq6BZ8\n5wdiVQf5M5sd0fb4qBXhD2B86wxJ8KKzdbVmneETbb0j4XWcXxkoDqAfP8hSolZ0\npsWmpEc7y/IP3AtRC6YgXHYa8s11OuJfyZpRnOaVbiU6TXYfPIMBL88A+/0YRcjC\n1P6KPZsKq40GdKuv8poHPh3oPiWM0ETOHYWbx3P+Vak1JZX4Z09YSJRIwyog6guK\nr2sA951XsnrH/MQ4CCk/4cQ+U/CyhYVyGMuoTjkPWGoFmxSMmNFY4TJq8S9yz6AD\neFYRky+8gikLOLwGCRjQ7RWcDK7NKzf8EmfXZFXis/xyBYt336unDWBHC32NBbbb\nKXzQlNcHbDw0fOYazgCIwCfOh5x6EaliXSRywWIkJ/3T7Vu7TxApsgb6fAV2H3UF\nUHSCxSLWwMQR3gka8zTcf7XeXS5d9DZw8B9Z9H7SAnSCy+Tq4JnAplGKqnRcrLHb\nK4iZzGnvL+1v2RYnnPJYPfYphwTb2aCNgr0fdAJmhRIz7CaKJ40=\n=nc/i\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f30c636e2c48684e287620fa4cf6441463e4e81\nparent 3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe\nparent fa0d9211ef87a682573aaae932c0c440acbcb8a8\nauthor fanquake <fanquake@gmail.com> 1624931414 +0800\ncommitter fanquake <fanquake@gmail.com> 1624936977 +0800\n\nMerge bitcoin/bitcoin#21789: refactor: Remove ::Params() global from CChainState\n\nfa0d9211ef87a682573aaae932c0c440acbcb8a8 refactor: Remove chainparams arg from CChainState member functions (MarcoFalke)\nfa389471251f043ec25e7b01e59b37d3b921ce54 refactor: Remove ::Params() global from inside CChainState member functions (MarcoFalke)\n\nPull request description:\n\n  The `::Params()` global is verbose and confusing. Also it makes tests a bit harder to write because they'd have to mock a global.\n\n  Fix all issues by simply using a member variable that points to the right params.\n\n  (Can be reviewed with `--word-diff-regex=.`)\n\nACKs for top commit:\n  jnewbery:\n    ACK fa0d9211ef87a682573aaae932c0c440acbcb8a8\n  kiminuo:\n    utACK fa0d9211\n  theStack:\n    ACK fa0d9211ef87a682573aaae932c0c440acbcb8a8 \ud83c\udf49\n\nTree-SHA512: 44676b19c9ed471ccb536331d3029bad192d7d50f394fd7b8527ec431452aeec8c4494164b9cf8e16e0123c4463b16be864366c6b599370032c17262625a0356\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8071ec179d75cefd41dac2a9a248eaf38054b85d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8071ec179d75cefd41dac2a9a248eaf38054b85d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8071ec179d75cefd41dac2a9a248eaf38054b85d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe"
      },
      {
        "sha": "fa0d9211ef87a682573aaae932c0c440acbcb8a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0d9211ef87a682573aaae932c0c440acbcb8a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0d9211ef87a682573aaae932c0c440acbcb8a8"
      }
    ],
    "stats": {
      "total": 296,
      "additions": 149,
      "deletions": 147
    },
    "files": [
      {
        "sha": "a88adbaa21dd403b75b7b8e136f5b1ef2cfb88ff",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -1372,7 +1372,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n                 // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex(chainparams)) {\n+                if (!chainman.LoadBlockIndex()) {\n                     if (ShutdownRequested()) break;\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n@@ -1396,7 +1396,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock(chainparams)) {\n+                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1427,7 +1427,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                     }\n \n                     // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                    if (!chainstate->ReplayBlocks()) {\n                         strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                         failed_chainstate_init = true;\n                         break;\n@@ -1439,7 +1439,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                     if (!is_coinsview_empty(chainstate)) {\n                         // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip(chainparams)) {\n+                        if (!chainstate->LoadChainTip()) {\n                             strLoadError = _(\"Error initializing block database\");\n                             failed_chainstate_init = true;\n                             break; // out of the per-chainstate loop\n@@ -1461,7 +1461,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 LOCK(cs_main);\n                 auto chainstates{chainman.GetAll()};\n                 if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [&chainparams](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n                     strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n                                              chainparams.GetConsensus().SegwitHeight);\n                     break;"
      },
      {
        "sha": "ab9c41ca2bd88036b00ca8cdd5d1b8d9ecbadb9e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -1709,7 +1709,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv&\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n@@ -2935,7 +2935,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+            if (!m_chainman.ActiveChainstate().ActivateBestChain(state, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }"
      },
      {
        "sha": "0083b74b3382c3ccf470f0cf69898ad9a445e434",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -493,7 +493,6 @@ struct CImportingNow {\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n-    const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n \n     {\n@@ -512,7 +511,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n                     break; // This error is logged in OpenBlockFile\n                 }\n                 LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file, &pos);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(file, &pos);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n@@ -523,15 +522,15 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n             fReindex = false;\n             LogPrintf(\"Reindexing finished\\n\");\n             // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            chainman.ActiveChainstate().LoadGenesisBlock(chainparams);\n+            chainman.ActiveChainstate().LoadGenesisBlock();\n         }\n \n         // -loadblock=\n         for (const fs::path& path : vImportFiles) {\n             FILE* file = fsbridge::fopen(path, \"rb\");\n             if (file) {\n                 LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(file);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n@@ -548,7 +547,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n         // the relevant pointers before the ABC call.\n         for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n             BlockValidationState state;\n-            if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n+            if (!chainstate->ActivateBestChain(state, nullptr)) {\n                 LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n                 StartShutdown();\n                 return;"
      },
      {
        "sha": "02f8cec54c2507d000d52a1f7b416279e2771468",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -1706,7 +1706,7 @@ static RPCHelpMan preciousblock()\n     }\n \n     BlockValidationState state;\n-    chainman.ActiveChainstate().PreciousBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().PreciousBlock(state, pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1743,10 +1743,10 @@ static RPCHelpMan invalidateblock()\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n-    chainman.ActiveChainstate().InvalidateBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().InvalidateBlock(state, pblockindex);\n \n     if (state.IsValid()) {\n-        chainman.ActiveChainstate().ActivateBestChain(state, Params());\n+        chainman.ActiveChainstate().ActivateBestChain(state);\n     }\n \n     if (!state.IsValid()) {\n@@ -1787,7 +1787,7 @@ static RPCHelpMan reconsiderblock()\n     }\n \n     BlockValidationState state;\n-    chainman.ActiveChainstate().ActivateBestChain(state, Params());\n+    chainman.ActiveChainstate().ActivateBestChain(state);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());"
      },
      {
        "sha": "bfa977520b6826c7d4a87c0dc8a20bd9f3789cbd",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -32,5 +32,5 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n         return;\n     }\n     FlatFilePos flat_file_pos;\n-    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n+    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n }"
      },
      {
        "sha": "44779f7d7cef52bf914ecee86eb0ef49e7d09b91",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n     auto* orig_tip = active.Tip();\n     for (int i = 0; i < 10; ++i) {\n         BlockValidationState state;\n-        m_node.chainman->ActiveChainstate().InvalidateBlock(state, Params(), active.Tip());\n+        m_node.chainman->ActiveChainstate().InvalidateBlock(state, active.Tip());\n     }\n     BOOST_CHECK_EQUAL(active.Height(), orig_tip->nHeight - 10);\n     coinbaseKey.MakeNewKey(true);"
      },
      {
        "sha": "748272bb1d94b12b497aa1bbf32f5a985dfd0686",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -186,12 +186,12 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n     m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n     assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock(chainparams)) {\n+    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock()) {\n         throw std::runtime_error(\"LoadGenesisBlock failed.\");\n     }\n \n     BlockValidationState state;\n-    if (!m_node.chainman->ActiveChainstate().ActivateBestChain(state, chainparams)) {\n+    if (!m_node.chainman->ActiveChainstate().ActivateBestChain(state)) {\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n "
      },
      {
        "sha": "7c1db9d4b9c62f709836efa153136d5290488b1c",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -31,7 +31,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     CTxMemPool& mempool = *m_node.mempool;\n \n     std::vector<CChainState*> chainstates;\n-    const CChainParams& chainparams = Params();\n \n     BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\n \n@@ -76,9 +75,9 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c2.InitCoinsCache(1 << 23));\n     // Unlike c1, which doesn't have any blocks. Gets us different tip, height.\n-    c2.LoadGenesisBlock(chainparams);\n+    c2.LoadGenesisBlock();\n     BlockValidationState _;\n-    BOOST_CHECK(c2.ActivateBestChain(_, chainparams, nullptr));\n+    BOOST_CHECK(c2.ActivateBestChain(_, nullptr));\n \n     BOOST_CHECK(manager.IsSnapshotActive());\n     BOOST_CHECK(!manager.IsSnapshotValidated());\n@@ -138,7 +137,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c1.InitCoinsCache(1 << 23);\n-        BOOST_REQUIRE(c1.LoadGenesisBlock(Params()));\n+        BOOST_REQUIRE(c1.LoadGenesisBlock());\n         c1.CoinsTip().SetBestBlock(InsecureRand256());\n         manager.MaybeRebalanceCaches();\n     }\n@@ -156,7 +155,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c2.InitCoinsCache(1 << 23);\n-        BOOST_REQUIRE(c2.LoadGenesisBlock(Params()));\n+        BOOST_REQUIRE(c2.LoadGenesisBlock());\n         c2.CoinsTip().SetBestBlock(InsecureRand256());\n         manager.MaybeRebalanceCaches();\n     }"
      },
      {
        "sha": "df0ec3bd4ff0bd9a4a689f923cf12ad5d7976083",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 101,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -1124,7 +1124,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n+    active_chainstate.FlushStateToDisk(state_dummy, FlushStateMode::PERIODIC);\n     return result;\n }\n \n@@ -1210,6 +1210,7 @@ void CoinsViews::InitCache()\n \n CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n+      m_params(::Params()),\n       m_blockman(blockman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n@@ -1724,7 +1725,7 @@ static int64_t nBlocksTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+                               CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -1744,7 +1745,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n     // re-enforce that rule here (at least until we make it impossible for\n     // GetAdjustedTime() to go backward).\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck)) {\n+    if (!CheckBlock(block, state, m_params.GetConsensus(), !fJustCheck, !fJustCheck)) {\n         if (state.GetResult() == BlockValidationResult::BLOCK_MUTATED) {\n             // We don't write down blocks to disk if they may have been\n             // corrupted, so this should be impossible unless we're having hardware\n@@ -1762,7 +1763,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n+    if (block.GetHash() == m_params.GetConsensus().hashGenesisBlock) {\n         if (!fJustCheck)\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n@@ -1794,7 +1795,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 //  artificially set the default assumed verified block further back.\n                 // The test against nMinimumChainWork prevents the skipping when denied access to any chain at\n                 //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, chainparams.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n+                fScriptChecks = (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, m_params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n             }\n         }\n     }\n@@ -1874,9 +1875,9 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     // be reset before it reaches block 1,983,702 and starts doing unnecessary\n     // BIP30 checking again.\n     assert(pindex->pprev);\n-    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n+    CBlockIndex* pindexBIP34height = pindex->pprev->GetAncestor(m_params.GetConsensus().BIP34Height);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n-    fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n+    fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == m_params.GetConsensus().BIP34Hash));\n \n     // TODO: Remove BIP30 checking from block height 1,983,702 on, once we have a\n     // consensus change that ensures coinbases at those heights can not\n@@ -1894,12 +1895,12 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n \n     // Start enforcing BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= chainparams.GetConsensus().CSVHeight) {\n+    if (pindex->nHeight >= m_params.GetConsensus().CSVHeight) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n     // Get the script flags for this block\n-    unsigned int flags = GetBlockScriptFlags(pindex, chainparams.GetConsensus());\n+    unsigned int flags = GetBlockScriptFlags(pindex, m_params.GetConsensus());\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);\n@@ -1989,7 +1990,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n \n-    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n+    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, m_params.GetConsensus());\n     if (block.vtx[0]->GetValueOut() > blockReward) {\n         LogPrintf(\"ERROR: ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\\n\", block.vtx[0]->GetValueOut(), blockReward);\n         return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-cb-amount\");\n@@ -2005,8 +2006,9 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     if (fJustCheck)\n         return true;\n \n-    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, m_params)) {\n         return false;\n+    }\n \n     if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n         pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);\n@@ -2059,7 +2061,6 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n }\n \n bool CChainState::FlushStateToDisk(\n-    const CChainParams& chainparams,\n     BlockValidationState &state,\n     FlushStateMode mode,\n     int nManualPruneHeight)\n@@ -2096,7 +2097,7 @@ bool CChainState::FlushStateToDisk(\n             } else {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune\", BCLog::BENCH);\n \n-                m_blockman.FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight(), m_chain.Height(), last_prune, IsInitialBlockDownload());\n+                m_blockman.FindFilesToPrune(setFilesToPrune, m_params.PruneAfterHeight(), m_chain.Height(), last_prune, IsInitialBlockDownload());\n                 fCheckForPruning = false;\n             }\n             if (!setFilesToPrune.empty()) {\n@@ -2196,20 +2197,19 @@ bool CChainState::FlushStateToDisk(\n     return true;\n }\n \n-void CChainState::ForceFlushStateToDisk() {\n+void CChainState::ForceFlushStateToDisk()\n+{\n     BlockValidationState state;\n-    const CChainParams& chainparams = Params();\n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n+    if (!this->FlushStateToDisk(state, FlushStateMode::ALWAYS)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n-void CChainState::PruneAndFlush() {\n+void CChainState::PruneAndFlush()\n+{\n     BlockValidationState state;\n     fCheckForPruning = true;\n-    const CChainParams& chainparams = Params();\n-\n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n+    if (!this->FlushStateToDisk(state, FlushStateMode::NONE)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2278,7 +2278,7 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool)\n+bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n@@ -2288,8 +2288,9 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     // Read block from disk.\n     std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n     CBlock& block = *pblock;\n-    if (!ReadBlockFromDisk(block, pindexDelete, chainparams.GetConsensus()))\n+    if (!ReadBlockFromDisk(block, pindexDelete, m_params.GetConsensus())) {\n         return error(\"DisconnectTip(): Failed to read block\");\n+    }\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -2302,8 +2303,9 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(state, FlushStateMode::IF_NEEDED)) {\n         return false;\n+    }\n \n     if (disconnectpool) {\n         // Save transactions to re-add to mempool at end of reorg\n@@ -2320,7 +2322,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(m_mempool, pindexDelete->pprev, chainparams, *this);\n+    UpdateTip(m_mempool, pindexDelete->pprev, m_params, *this);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2379,7 +2381,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n@@ -2390,8 +2392,9 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     std::shared_ptr<const CBlock> pthisBlock;\n     if (!pblock) {\n         std::shared_ptr<CBlock> pblockNew = std::make_shared<CBlock>();\n-        if (!ReadBlockFromDisk(*pblockNew, pindexNew, chainparams.GetConsensus()))\n+        if (!ReadBlockFromDisk(*pblockNew, pindexNew, m_params.GetConsensus())) {\n             return AbortNode(state, \"Failed to read block\");\n+        }\n         pthisBlock = pblockNew;\n     } else {\n         pthisBlock = pblock;\n@@ -2403,7 +2406,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n     {\n         CCoinsViewCache view(&CoinsTip());\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2419,16 +2422,17 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(state, FlushStateMode::IF_NEEDED)) {\n         return false;\n+    }\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n     m_mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(m_mempool, pindexNew, chainparams, *this);\n+    UpdateTip(m_mempool, pindexNew, m_params, *this);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n@@ -2515,7 +2519,7 @@ void CChainState::PruneBlockIndexCandidates() {\n  *\n  * @returns true unless a system error occurred\n  */\n-bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n@@ -2527,7 +2531,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     bool fBlocksDisconnected = false;\n     DisconnectedBlockTransactions disconnectpool;\n     while (m_chain.Tip() && m_chain.Tip() != pindexFork) {\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n+        if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n             UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n@@ -2560,7 +2564,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n \n         // Connect new blocks.\n         for (CBlockIndex* pindexConnect : reverse_iterate(vpindexToConnect)) {\n-            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {\n+            if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {\n@@ -2637,7 +2641,8 @@ static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n-bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr<const CBlock> pblock)\n+{\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n@@ -2683,7 +2688,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n \n                 bool fInvalidFound = false;\n                 std::shared_ptr<const CBlock> nullBlockPtr;\n-                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace)) {\n+                if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace)) {\n                     // A system error occurred\n                     return false;\n                 }\n@@ -2725,17 +2730,17 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n         // that the best block hash is non-null.\n         if (ShutdownRequested()) break;\n     } while (pindexNewTip != pindexMostWork);\n-    CheckBlockIndex(chainparams.GetConsensus());\n+    CheckBlockIndex();\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::PERIODIC)) {\n+    if (!FlushStateToDisk(state, FlushStateMode::PERIODIC)) {\n         return false;\n     }\n \n     return true;\n }\n \n-bool CChainState::PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+bool CChainState::PreciousBlock(BlockValidationState& state, CBlockIndex* pindex)\n {\n     {\n         LOCK(cs_main);\n@@ -2761,10 +2766,10 @@ bool CChainState::PreciousBlock(BlockValidationState& state, const CChainParams&\n         }\n     }\n \n-    return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n+    return ActivateBestChain(state, std::shared_ptr<const CBlock>());\n }\n \n-bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pindex)\n {\n     // Genesis block can't be invalidated\n     assert(pindex);\n@@ -2822,7 +2827,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // ActivateBestChain considers blocks already in m_chain\n         // unconditionally valid already, so force disconnect away from it.\n         DisconnectedBlockTransactions disconnectpool;\n-        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        bool ret = DisconnectTip(state, &disconnectpool);\n         // DisconnectTip will add transactions to disconnectpool.\n         // Adjust the mempool to be consistent with the new tip, adding\n         // transactions back to the mempool if disconnecting was successful,\n@@ -2864,7 +2869,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         to_mark_failed = invalid_walk_tip;\n     }\n \n-    CheckBlockIndex(chainparams.GetConsensus());\n+    CheckBlockIndex();\n \n     {\n         LOCK(cs_main);\n@@ -2975,15 +2980,15 @@ CBlockIndex* BlockManager::AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n+void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, consensusParams)) {\n+    if (IsWitnessEnabled(pindexNew->pprev, m_params.GetConsensus())) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3400,7 +3405,7 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             bool accepted = m_blockman.AcceptBlockHeader(\n                 header, state, chainparams, &pindex);\n-            ActiveChainstate().CheckBlockIndex(chainparams.GetConsensus());\n+            ActiveChainstate().CheckBlockIndex();\n \n             if (!accepted) {\n                 return false;\n@@ -3419,7 +3424,7 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3429,8 +3434,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     CBlockIndex *pindexDummy = nullptr;\n     CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n \n-    bool accepted_header = m_blockman.AcceptBlockHeader(block, state, chainparams, &pindex);\n-    CheckBlockIndex(chainparams.GetConsensus());\n+    bool accepted_header = m_blockman.AcceptBlockHeader(block, state, m_params, &pindex);\n+    CheckBlockIndex();\n \n     if (!accepted_header)\n         return false;\n@@ -3467,8 +3472,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+    if (!CheckBlock(block, state, m_params.GetConsensus()) ||\n+        !ContextualCheckBlock(block, state, m_params.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3484,19 +3489,19 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, m_params, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;\n         }\n-        ReceivedBlockTransactions(block, pindex, blockPos, chainparams.GetConsensus());\n+        ReceivedBlockTransactions(block, pindex, blockPos);\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+    FlushStateToDisk(state, FlushStateMode::NONE);\n \n-    CheckBlockIndex(chainparams.GetConsensus());\n+    CheckBlockIndex();\n \n     return true;\n }\n@@ -3522,7 +3527,7 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         bool ret = CheckBlock(*block, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ActiveChainstate().AcceptBlock(block, state, chainparams, &pindex, force_processing, nullptr, new_block);\n+            ret = ActiveChainstate().AcceptBlock(block, state, &pindex, force_processing, nullptr, new_block);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*block, state);\n@@ -3533,8 +3538,9 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n     NotifyHeaderTip(ActiveChainstate());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActiveChainstate().ActivateBestChain(state, chainparams, block))\n+    if (!ActiveChainstate().ActivateBestChain(state, block)) {\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n+    }\n \n     return true;\n }\n@@ -3563,8 +3569,9 @@ bool TestBlockValidity(BlockValidationState& state,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.ToString());\n-    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, true)) {\n         return false;\n+    }\n     assert(state.IsValid());\n \n     return true;\n@@ -3635,9 +3642,8 @@ void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nM\n void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight)\n {\n     BlockValidationState state;\n-    const CChainParams& chainparams = Params();\n     if (!active_chainstate.FlushStateToDisk(\n-            chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n+            state, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -3787,10 +3793,10 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::LoadBlockIndexDB()\n {\n     if (!m_blockman.LoadBlockIndex(\n-            chainparams.GetConsensus(), *pblocktree,\n+            m_params.GetConsensus(), *pblocktree,\n             setBlockIndexCandidates)) {\n         return false;\n     }\n@@ -3850,7 +3856,7 @@ void CChainState::LoadMempool(const ArgsManager& args)\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n }\n \n-bool CChainState::LoadChainTip(const CChainParams& chainparams)\n+bool CChainState::LoadChainTip()\n {\n     AssertLockHeld(cs_main);\n     const CCoinsViewCache& coins_cache = CoinsTip();\n@@ -3871,10 +3877,10 @@ bool CChainState::LoadChainTip(const CChainParams& chainparams)\n \n     tip = m_chain.Tip();\n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n-        tip->GetBlockHash().ToString(),\n-        m_chain.Height(),\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        GuessVerificationProgress(chainparams.TxData(), tip));\n+              tip->GetBlockHash().ToString(),\n+              m_chain.Height(),\n+              FormatISO8601DateTime(tip->GetBlockTime()),\n+              GuessVerificationProgress(m_params.TxData(), tip));\n     return true;\n }\n \n@@ -3985,8 +3991,9 @@ bool CVerifyDB::VerifyDB(\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!chainstate.ConnectBlock(block, state, pindex, coins)) {\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n+            }\n             if (ShutdownRequested()) return true;\n         }\n     }\n@@ -3998,11 +4005,11 @@ bool CVerifyDB::VerifyDB(\n }\n \n /** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n-bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs)\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;\n-    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+    if (!ReadBlockFromDisk(block, pindex, m_params.GetConsensus())) {\n         return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n     }\n \n@@ -4018,7 +4025,7 @@ bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& i\n     return true;\n }\n \n-bool CChainState::ReplayBlocks(const CChainParams& params)\n+bool CChainState::ReplayBlocks()\n {\n     LOCK(cs_main);\n \n@@ -4054,7 +4061,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     while (pindexOld != pindexFork) {\n         if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.\n             CBlock block;\n-            if (!ReadBlockFromDisk(block, pindexOld, params.GetConsensus())) {\n+            if (!ReadBlockFromDisk(block, pindexOld, m_params.GetConsensus())) {\n                 return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }\n             LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);\n@@ -4076,7 +4083,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n         const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n         LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n         uiInterface.ShowProgress(_(\"Replaying blocks\u2026\").translated, (int) ((nHeight - nForkHeight) * 100.0 / (pindexNew->nHeight - nForkHeight)) , false);\n-        if (!RollforwardBlock(pindex, cache, params)) return false;\n+        if (!RollforwardBlock(pindex, cache)) return false;\n     }\n \n     cache.SetBestBlock(pindexNew->GetBlockHash());\n@@ -4085,13 +4092,13 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-bool CChainState::NeedsRedownload(const CChainParams& params) const\n+bool CChainState::NeedsRedownload() const\n {\n     AssertLockHeld(cs_main);\n \n-    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    // At and above m_params.SegwitHeight, segwit consensus rules must be validated\n     CBlockIndex* block{m_chain.Tip()};\n-    const int segwit_height{params.GetConsensus().SegwitHeight};\n+    const int segwit_height{m_params.GetConsensus().SegwitHeight};\n \n     while (block != nullptr && block->nHeight >= segwit_height) {\n         if (!(block->nStatus & BLOCK_OPT_WITNESS)) {\n@@ -4130,13 +4137,13 @@ void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)\n     fHavePruned = false;\n }\n \n-bool ChainstateManager::LoadBlockIndex(const CChainParams& chainparams)\n+bool ChainstateManager::LoadBlockIndex()\n {\n     AssertLockHeld(cs_main);\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = ActiveChainstate().LoadBlockIndexDB(chainparams);\n+        bool ret = ActiveChainstate().LoadBlockIndexDB();\n         if (!ret) return false;\n         needs_init = m_blockman.m_block_index.empty();\n     }\n@@ -4153,32 +4160,32 @@ bool ChainstateManager::LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n+bool CChainState::LoadGenesisBlock()\n {\n     LOCK(cs_main);\n \n     // Check whether we're already initialized by checking for genesis in\n     // m_blockman.m_block_index. Note that we can't use m_chain here, since it is\n     // set based on the coins db, not the block index db, which is the only\n     // thing loaded at this point.\n-    if (m_blockman.m_block_index.count(chainparams.GenesisBlock().GetHash()))\n+    if (m_blockman.m_block_index.count(m_params.GenesisBlock().GetHash()))\n         return true;\n \n     try {\n-        const CBlock& block = chainparams.GenesisBlock();\n-        FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, chainparams, nullptr);\n+        const CBlock& block = m_params.GenesisBlock();\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, m_params, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = m_blockman.AddToBlockIndex(block);\n-        ReceivedBlockTransactions(block, pindex, blockPos, chainparams.GetConsensus());\n+        ReceivedBlockTransactions(block, pindex, blockPos);\n     } catch (const std::runtime_error& e) {\n         return error(\"%s: failed to write genesis block: %s\", __func__, e.what());\n     }\n \n     return true;\n }\n \n-void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n+void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n@@ -4199,11 +4206,12 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n             try {\n                 // locate a header\n                 unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];\n-                blkdat.FindByte(chainparams.MessageStart()[0]);\n+                blkdat.FindByte(m_params.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> buf;\n-                if (memcmp(buf, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE))\n+                if (memcmp(buf, m_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE)) {\n                     continue;\n+                }\n                 // read size\n                 blkdat >> nSize;\n                 if (nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE)\n@@ -4227,7 +4235,7 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != m_params.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n                         if (dbp)\n@@ -4239,21 +4247,21 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                     CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n+                      if (AcceptBlock(pblock, state, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n                       if (state.IsError()) {\n                           break;\n                       }\n-                    } else if (hash != chainparams.GetConsensus().hashGenesisBlock && pindex->nHeight % 1000 == 0) {\n-                      LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), pindex->nHeight);\n+                    } else if (hash != m_params.GetConsensus().hashGenesisBlock && pindex->nHeight % 1000 == 0) {\n+                        LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), pindex->nHeight);\n                     }\n                 }\n \n                 // Activate the genesis block so normal node progress can continue\n-                if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n+                if (hash == m_params.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    if (!ActivateBestChain(state, chainparams, nullptr)) {\n+                    if (!ActivateBestChain(state, nullptr)) {\n                         break;\n                     }\n                 }\n@@ -4270,14 +4278,12 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                     while (range.first != range.second) {\n                         std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n-                        {\n+                        if (ReadBlockFromDisk(*pblockrecursive, it->second, m_params.GetConsensus())) {\n                             LogPrint(BCLog::REINDEX, \"%s: Processing out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n-                            {\n+                            if (AcceptBlock(pblockrecursive, dummy, nullptr, true, &it->second, nullptr)) {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n                             }\n@@ -4297,7 +4303,7 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n     LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);\n }\n \n-void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n+void CChainState::CheckBlockIndex()\n {\n     if (!fCheckBlockIndex) {\n         return;\n@@ -4351,7 +4357,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n         // Begin: actual consistency checks.\n         if (pindex->pprev == nullptr) {\n             // Genesis block checks.\n-            assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n+            assert(pindex->GetBlockHash() == m_params.GetConsensus().hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == m_chain.Genesis()); // The current active chain's genesis block must be this block.\n         }\n         if (!pindex->HaveTxsDownloaded()) assert(pindex->nSequenceId <= 0); // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n@@ -4507,16 +4513,14 @@ bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n         this->ToString(), coinstip_size * (1.0 / 1024 / 1024));\n \n     BlockValidationState state;\n-    const CChainParams& chainparams = Params();\n-\n     bool ret;\n \n     if (coinstip_size > old_coinstip_size) {\n         // Likely no need to flush if cache sizes have grown.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED);\n+        ret = FlushStateToDisk(state, FlushStateMode::IF_NEEDED);\n     } else {\n         // Otherwise, flush state to disk and deallocate the in-memory coins map.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS);\n+        ret = FlushStateToDisk(state, FlushStateMode::ALWAYS);\n         CoinsTip().ReallocateCache();\n     }\n     return ret;\n@@ -4816,7 +4820,7 @@ bool ChainstateManager::ActivateSnapshot(\n         LOCK(::cs_main);\n         assert(!m_snapshot_chainstate);\n         m_snapshot_chainstate.swap(snapshot_chainstate);\n-        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip();\n         assert(chaintip_loaded);\n \n         m_active_chainstate = m_snapshot_chainstate.get();"
      },
      {
        "sha": "fc702b7183086cefc0a1208e5184167029c8dd24",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8071ec179d75cefd41dac2a9a248eaf38054b85d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "patch": "@@ -595,6 +595,8 @@ class CChainState\n     //! mempool that is kept in sync with the chain\n     CTxMemPool& m_mempool;\n \n+    const CChainParams& m_params;\n+\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n@@ -680,7 +682,7 @@ class CChainState\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /** Import blocks from an external file */\n-    void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n+    void LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp = nullptr);\n \n     /**\n      * Update the on-disk chain state.\n@@ -694,8 +696,7 @@ class CChainState\n      * @returns true unless a system error occurred\n      */\n     bool FlushStateToDisk(\n-        const CChainParams& chainparams,\n-        BlockValidationState &state,\n+        BlockValidationState& state,\n         FlushStateMode mode,\n         int nManualPruneHeight = 0);\n \n@@ -723,37 +724,36 @@ class CChainState\n      */\n     bool ActivateBestChain(\n         BlockValidationState& state,\n-        const CChainParams& chainparams,\n         std::shared_ptr<const CBlock> pblock = nullptr) LOCKS_EXCLUDED(cs_main);\n \n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n     bool ConnectBlock(const CBlock& block, BlockValidationState& state, CBlockIndex* pindex,\n-                      CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                      CCoinsViewCache& view, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n \n     // Manual block validity manipulation:\n     /** Mark a block as precious and reorganize.\n      *\n      * May not be called in a validationinterface callback.\n      */\n-    bool PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n+    bool PreciousBlock(BlockValidationState& state, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n     /** Mark a block as invalid. */\n-    bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n+    bool InvalidateBlock(BlockValidationState& state, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n     /** Remove invalidity status from a block and its descendants. */\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Replay blocks that aren't fully applied to the database. */\n-    bool ReplayBlocks(const CChainParams& params);\n+    bool ReplayBlocks();\n \n     /** Whether the chain state needs to be redownloaded due to lack of witness data */\n-    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    [[nodiscard]] bool NeedsRedownload() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n-    bool LoadGenesisBlock(const CChainParams& chainparams);\n+    bool LoadGenesisBlock();\n \n     void PruneBlockIndexCandidates();\n \n@@ -767,13 +767,13 @@ class CChainState\n      *\n      * By default this only executes fully when using the Regtest chain; see: fCheckBlockIndex.\n      */\n-    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+    void CheckBlockIndex();\n \n     /** Load the persisted mempool from disk */\n     void LoadMempool(const ArgsManager& args);\n \n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n-    bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool LoadChainTip() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n@@ -789,19 +789,19 @@ class CChainState\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n \n-    void InvalidBlockFound(CBlockIndex *pindex, const BlockValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool LoadBlockIndexDB() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     friend ChainstateManager;\n };\n@@ -1002,7 +1002,7 @@ class ChainstateManager\n     bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\n \n     //! Load the block tree and coins database from disk, initializing state if we're running with -reindex\n-    bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool LoadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     //! Unload block index and chain data before shutdown.\n     void Unload() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);"
      }
    ]
  },
  {
    "sha": "e0face923533a1925a997228fc0c19117b19fd50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGZhY2U5MjM1MzNhMTkyNWE5OTcyMjhmYzBjMTkxMTdiMTlmZDUw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-29T03:41:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-29T04:41:06Z"
      },
      "message": "Merge bitcoin/bitcoin#22358: Remove unused wallet pointer from wallet signals\n\n8888cf45f5e45b38cb830f9c94cafbf622e1fe5f Remove unused wallet pointer from NotifyAddressBookChanged (MarcoFalke)\nfaf36403038afb3df3ddd963bd6c352d3eff4da8 Remove unused wallet pointer from NotifyTransactionChanged signal (MarcoFalke)\n\nPull request description:\n\n  The signals are members of the wallet, so passing the pointer would be redundant even if it was used.\n\n  Also, fix `with` -> `without`, which was forgotten in commit ca4cf5cff6f.\n\nACKs for top commit:\n  jonatack:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f also verified with/without lock cs_wallet status for each of the two functions and debian clang 11 debug build clean\n  promag:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f.\n  theStack:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f\n\nTree-SHA512: e3b80931ce9bcb05213619f5435ac7c21d3c7848643950a70db610902bd1803c92bb75e501d46b0e519bc576901f160e088e8882c4f1adce892a80df565f897b",
      "tree": {
        "sha": "ade5f89622acd8fc7bc5d78f92985c4d1f8d150b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ade5f89622acd8fc7bc5d78f92985c4d1f8d150b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0face923533a1925a997228fc0c19117b19fd50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDapGIACgkQLuufXMCV\nJsE4bA/+JOJjGsiURbNnaEM4BvFSKDB/P8DssH4w4MlfIsFlaMgnFhfoaxuQzC34\n9GEnAre1185hES2Hu7OUyGxP5g3eue39O5teiMZgRh3PmLPZH9yNasN+JVyG36hL\nbgzlTKICix+docaJEl+cYZHqnXem/N5olkrq2JD0292hZM3TkOJZ8HASAwbwO882\nNrChpkkDjVrYlFEVTnXNBKvQcc4P9OzCy58jt96piB3fUVmzOceoTfMNYev3fsPM\nbsMcF5f6CFH+Cv+q4DYlpa7nG3D+QE+KN02y1jtRMeXHVicYLJJ1y/+JpGjsSJOq\n/eOu8z8LhSJGuZMhY25hbLhD3q3KZ3RqZzha9uxTUO8UBO8FkCCC0HSHexGa7tfi\nj2MBbmxg/xYQWpQbZl6s7FsrD1LLhkYqh/p3jxEZgkBbBWFAS0V+5SfJVzJ8sOwE\n86WAbJivYYjT49+m42TwOY560sejnMmPWG4tpt0w3apou6MEpb3zb8vjl5n3Dkev\nU5M1dj4adR9tf48M6i485MGFIRvyIoGth4M4W6nOmno0Q7HWd2NgJEb3LuwbHJFi\n/XQMZI8iVH0kbfch7reLDAWBP1ZOkyTWgmU0m7scpO0uVys3BAhEjUxVPdqpndbv\nu/4DgYLexacB5rKkUprjfmSMatWKHWypSwEEHf6E+0mbgH1G2qA=\n=/zzx\n-----END PGP SIGNATURE-----",
        "payload": "tree ade5f89622acd8fc7bc5d78f92985c4d1f8d150b\nparent 8071ec179d75cefd41dac2a9a248eaf38054b85d\nparent 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f\nauthor fanquake <fanquake@gmail.com> 1624938062 +0800\ncommitter fanquake <fanquake@gmail.com> 1624941666 +0800\n\nMerge bitcoin/bitcoin#22358: Remove unused wallet pointer from wallet signals\n\n8888cf45f5e45b38cb830f9c94cafbf622e1fe5f Remove unused wallet pointer from NotifyAddressBookChanged (MarcoFalke)\nfaf36403038afb3df3ddd963bd6c352d3eff4da8 Remove unused wallet pointer from NotifyTransactionChanged signal (MarcoFalke)\n\nPull request description:\n\n  The signals are members of the wallet, so passing the pointer would be redundant even if it was used.\n\n  Also, fix `with` -> `without`, which was forgotten in commit ca4cf5cff6f.\n\nACKs for top commit:\n  jonatack:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f also verified with/without lock cs_wallet status for each of the two functions and debian clang 11 debug build clean\n  promag:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f.\n  theStack:\n    Code review ACK 8888cf45f5e45b38cb830f9c94cafbf622e1fe5f\n\nTree-SHA512: e3b80931ce9bcb05213619f5435ac7c21d3c7848643950a70db610902bd1803c92bb75e501d46b0e519bc576901f160e088e8882c4f1adce892a80df565f897b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0face923533a1925a997228fc0c19117b19fd50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0face923533a1925a997228fc0c19117b19fd50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0face923533a1925a997228fc0c19117b19fd50/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8071ec179d75cefd41dac2a9a248eaf38054b85d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8071ec179d75cefd41dac2a9a248eaf38054b85d"
      },
      {
        "sha": "8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8888cf45f5e45b38cb830f9c94cafbf622e1fe5f"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e883337fb53c60f04db8532d55e17ddba9f4f830",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0face923533a1925a997228fc0c19117b19fd50/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0face923533a1925a997228fc0c19117b19fd50/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=e0face923533a1925a997228fc0c19117b19fd50",
        "patch": "@@ -69,7 +69,7 @@ uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDe\n         ->findChild<QCheckBox*>(\"optInRBF\")\n         ->setCheckState(rbf ? Qt::Checked : Qt::Unchecked);\n     uint256 txid;\n-    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](CWallet*, const uint256& hash, ChangeType status) {\n+    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](const uint256& hash, ChangeType status) {\n         if (status == CT_NEW) txid = hash;\n     }));\n     ConfirmSend();"
      },
      {
        "sha": "e33adf94c937ec1764cd174b01cec867e2f43e03",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=e0face923533a1925a997228fc0c19117b19fd50",
        "patch": "@@ -475,13 +475,13 @@ class WalletImpl : public Wallet\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyAddressBookChanged.connect(\n-            [fn](CWallet*, const CTxDestination& address, const std::string& label, bool is_mine,\n-                const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n+            [fn](const CTxDestination& address, const std::string& label, bool is_mine,\n+                 const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n     }\n     std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyTransactionChanged.connect(\n-            [fn](CWallet*, const uint256& txid, ChangeType status) { fn(txid, status); }));\n+            [fn](const uint256& txid, ChangeType status) { fn(txid, status); }));\n     }\n     std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) override\n     {"
      },
      {
        "sha": "556476767ab78972bc250e321d718116d038c5b8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e0face923533a1925a997228fc0c19117b19fd50",
        "patch": "@@ -801,7 +801,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n         success = false;\n     }\n \n-    NotifyTransactionChanged(this, originalHash, CT_UPDATED);\n+    NotifyTransactionChanged(originalHash, CT_UPDATED);\n \n     return success;\n }\n@@ -930,7 +930,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n     wtx.MarkDirty();\n \n     // Notify UI of new or updated transaction\n-    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    NotifyTransactionChanged(hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n #if HAVE_SYSTEM\n     // notify an external script when a wallet transaction comes in or is updated\n@@ -1104,7 +1104,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             wtx.setAbandoned();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n-            NotifyTransactionChanged(this, wtx.GetHash(), CT_UPDATED);\n+            NotifyTransactionChanged(wtx.GetHash(), CT_UPDATED);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too\n             TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n             while (iter != mapTxSpends.end() && iter->first.hash == now) {\n@@ -1944,7 +1944,7 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     for (const CTxIn& txin : tx->vin) {\n         CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n         coin.MarkDirty();\n-        NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n+        NotifyTransactionChanged(coin.GetHash(), CT_UPDATED);\n     }\n \n     // Get the inserted-CWalletTx from mapWallet so that the\n@@ -1999,7 +1999,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n         for (const auto& txin : it->second.tx->vin)\n             mapTxSpends.erase(txin.prevout);\n         mapWallet.erase(it);\n-        NotifyTransactionChanged(this, hash, CT_DELETED);\n+        NotifyTransactionChanged(hash, CT_DELETED);\n     }\n \n     if (nZapSelectTxRet == DBErrors::NEED_REWRITE)\n@@ -2033,8 +2033,8 @@ bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& add\n             m_address_book[address].purpose = strPurpose;\n         is_mine = IsMine(address) != ISMINE_NO;\n     }\n-    NotifyAddressBookChanged(this, address, strName, is_mine,\n-                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n+    NotifyAddressBookChanged(address, strName, is_mine,\n+                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW));\n     if (!strPurpose.empty() && !batch.WritePurpose(EncodeDestination(address), strPurpose))\n         return false;\n     return batch.WriteName(EncodeDestination(address), strName);\n@@ -2069,7 +2069,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         is_mine = IsMine(address) != ISMINE_NO;\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", is_mine, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(address, \"\", is_mine, \"\", CT_DELETED);\n \n     batch.ErasePurpose(EncodeDestination(address));\n     return batch.EraseName(EncodeDestination(address));"
      },
      {
        "sha": "91ef79dea8371bd8ec33f0324ddd85cb7ead8206",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0face923533a1925a997228fc0c19117b19fd50/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e0face923533a1925a997228fc0c19117b19fd50",
        "patch": "@@ -724,19 +724,18 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     /**\n      * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n+     * @note called without lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n+    boost::signals2::signal<void(const CTxDestination& address,\n+                                 const std::string& label, bool isMine,\n+                                 const std::string& purpose, ChangeType status)>\n+        NotifyAddressBookChanged;\n \n     /**\n      * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n+    boost::signals2::signal<void(const uint256& hashTx, ChangeType status)> NotifyTransactionChanged;\n \n     /** Show progress e.g. for rescan */\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;"
      }
    ]
  },
  {
    "sha": "6084d2caed9b2c70c0f19898c33ecb141fe603c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDg0ZDJjYWVkOWIyYzcwYzBmMTk4OThjMzNlY2IxNDFmZTYwM2M4",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-24T06:37:09Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-29T06:16:39Z"
      },
      "message": "wallet: do not spam about non-existent spk managers",
      "tree": {
        "sha": "301303577ac863e723603836bd642415014e372a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/301303577ac863e723603836bd642415014e372a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6084d2caed9b2c70c0f19898c33ecb141fe603c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6084d2caed9b2c70c0f19898c33ecb141fe603c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6084d2caed9b2c70c0f19898c33ecb141fe603c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6084d2caed9b2c70c0f19898c33ecb141fe603c8/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "42be172b819d9e6ec58ed5d773b0846c256e190e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6084d2caed9b2c70c0f19898c33ecb141fe603c8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6084d2caed9b2c70c0f19898c33ecb141fe603c8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6084d2caed9b2c70c0f19898c33ecb141fe603c8",
        "patch": "@@ -2962,7 +2962,6 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool intern\n     const std::map<OutputType, ScriptPubKeyMan*>& spk_managers = internal ? m_internal_spk_managers : m_external_spk_managers;\n     std::map<OutputType, ScriptPubKeyMan*>::const_iterator it = spk_managers.find(type);\n     if (it == spk_managers.end()) {\n-        WalletLogPrintf(\"%s scriptPubKey Manager for output type %d does not exist\\n\", internal ? \"Internal\" : \"External\", static_cast<int>(type));\n         return nullptr;\n     }\n     return it->second;"
      }
    ]
  },
  {
    "sha": "a000cb013cc1104ddcd6431d5a9b89e90bde2593",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDAwY2IwMTNjYzExMDRkZGNkNjQzMWQ1YTliODllOTBiZGUyNTkz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-29T06:24:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-29T06:24:26Z"
      },
      "message": "Merge bitcoin/bitcoin#22361: refactor: Make httpserver work queue a unique_ptr\n\nfa92e60f38cb109fe5a3c7acfe1017ffebc388cc refactor: Make httpserver work queue a unique_ptr (MarcoFalke)\n\nPull request description:\n\n  This simplifies the code a bit because `if (p) { delete p; p = nullptr; }` can be replaced by a call to the `reset()` member.\n\nACKs for top commit:\n  promag:\n    Core review ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc.\n  jonatack:\n    ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc code review, debug build clean, ran test/functional/interface*.py tests locally as a sanity check\n  hebasto:\n    ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 6b122162317dd4ad6889341745c7ac1903a3ee510f6548f46dc356308442a6eff13eb8dc604c38ba18783e7a66d2b836d641a8594ff980a010c12c97f3856684",
      "tree": {
        "sha": "7b38373088bb23150c11bc64d089fca52f5a210e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b38373088bb23150c11bc64d089fca52f5a210e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi0dgv6A3ThsmHd2mJXbMbACyMLFWEFt8beCkkl+fNsDHvhoBmrzHRYwW4nvoka\n9Un9usUNtvrIxc6vKeboZhzujgHcCNRd8RqzGwDb3icAvyUtNsaQCqrLsZhUGHw3\nwqELLUSEsHzfI9yE4nB4nECqyJRbVfhmgd1Z7YRBOfsMlJDqV076o2qCVKGGpTl8\nIXGp0BnxD2hPPUoBIkUeUs3VBI5asg6/LCFeg7EEXpCyG+taLIQc2hbjEcAZS40o\nkO40tRKEAfDxmTRowR+jvTSWZFQcSlhqbfKb22wwk7sz5C3Wix84Ol2G0QuV/TjO\nBlnwAbtdmyCF0Z2rhR07lnZqRhXdTWucDEQl2oPz0wFtiH3qiD5cxB2kO61CgY5T\nJAk8OFFBUy2gkSMWf5XgVXWGhDYxj1AlARIz/RqrKmedLHl8+CRuZY0EOUxOLtc6\nk9YIKewZACuh3pnu6K+tDvdObkp21DhhJqFGmPQoBH0iRe69TGH6gxl8by5XnedG\nqHtP9kR2\n=KY+z\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b38373088bb23150c11bc64d089fca52f5a210e\nparent e0face923533a1925a997228fc0c19117b19fd50\nparent fa92e60f38cb109fe5a3c7acfe1017ffebc388cc\nauthor MarcoFalke <falke.marco@gmail.com> 1624947858 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624947866 +0200\n\nMerge bitcoin/bitcoin#22361: refactor: Make httpserver work queue a unique_ptr\n\nfa92e60f38cb109fe5a3c7acfe1017ffebc388cc refactor: Make httpserver work queue a unique_ptr (MarcoFalke)\n\nPull request description:\n\n  This simplifies the code a bit because `if (p) { delete p; p = nullptr; }` can be replaced by a call to the `reset()` member.\n\nACKs for top commit:\n  promag:\n    Core review ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc.\n  jonatack:\n    ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc code review, debug build clean, ran test/functional/interface*.py tests locally as a sanity check\n  hebasto:\n    ACK fa92e60f38cb109fe5a3c7acfe1017ffebc388cc, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 6b122162317dd4ad6889341745c7ac1903a3ee510f6548f46dc356308442a6eff13eb8dc604c38ba18783e7a66d2b836d641a8594ff980a010c12c97f3856684\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0face923533a1925a997228fc0c19117b19fd50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0face923533a1925a997228fc0c19117b19fd50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0face923533a1925a997228fc0c19117b19fd50"
      },
      {
        "sha": "fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8741ad9b863520262abb2256f5783fe2e916e49f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a000cb013cc1104ddcd6431d5a9b89e90bde2593/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a000cb013cc1104ddcd6431d5a9b89e90bde2593/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "patch": "@@ -136,7 +136,7 @@ static struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n static std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = nullptr;\n+static std::unique_ptr<WorkQueue<HTTPClosure>> g_work_queue{nullptr};\n //! Handlers for (sub)paths\n static std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n@@ -256,10 +256,10 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     // Dispatch to worker thread\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n-        assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        assert(g_work_queue);\n+        if (g_work_queue->Enqueue(item.get())) {\n             item.release(); /* if true, queue took ownership */\n-        else {\n+        } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_SERVICE_UNAVAILABLE, \"Work queue depth exceeded\");\n         }\n@@ -392,7 +392,7 @@ bool InitHTTPServer()\n     int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n-    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n     eventHTTP = http_ctr.release();\n@@ -424,7 +424,7 @@ void StartHTTPServer()\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n     }\n }\n \n@@ -435,16 +435,17 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n-    if (workQueue)\n-        workQueue->Interrupt();\n+    if (g_work_queue) {\n+        g_work_queue->Interrupt();\n+    }\n }\n \n void StopHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (workQueue) {\n+    if (g_work_queue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread: g_thread_http_workers) {\n+        for (auto& thread : g_thread_http_workers) {\n             thread.join();\n         }\n         g_thread_http_workers.clear();\n@@ -467,10 +468,7 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = nullptr;\n     }\n-    if (workQueue) {\n-        delete workQueue;\n-        workQueue = nullptr;\n-    }\n+    g_work_queue.reset();\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n "
      }
    ]
  },
  {
    "sha": "36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmE0YmEwYWFhYTliMzUxODVkNzE3ODk5NGUzNmJjMDJjY2E5ODg3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:36Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "versionbits: correct doxygen comments",
      "tree": {
        "sha": "94f7b5c5de9bb8333475012ba058207ad400a17a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94f7b5c5de9bb8333475012ba058207ad400a17a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a000cb013cc1104ddcd6431d5a9b89e90bde2593"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dce39412884bb3c07ccf8cfca09685a3855fd3d5",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36a4ba0aaaa9b35185d7178994e36bc02cca9887/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36a4ba0aaaa9b35185d7178994e36bc02cca9887/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "patch": "@@ -80,11 +80,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n+/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n+/** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  },
  {
    "sha": "eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2NkNzM2ZjNkYzIzMWFjMDMwNmNhNzYzYzNiNzJjZjgyNDcyMzBh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T12:43:18Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "versionbits: Use dedicated lock instead of cs_main",
      "tree": {
        "sha": "3d9a5aaeaec55e5942a66f2523e0564d52b6f2d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d9a5aaeaec55e5942a66f2523e0564d52b6f2d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36a4ba0aaaa9b35185d7178994e36bc02cca9887"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "22600c534037d007e2d714db8ce85f0c55d9d10d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -1361,7 +1361,7 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments that are never active are hidden."
      },
      {
        "sha": "1b0f881d148998f88cbcfb6a044220c32d56ef2d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -1606,11 +1606,10 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n+VersionBitsCache versionbitscache;\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n@@ -1659,9 +1658,8 @@ static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n     return params.SegwitHeight != std::numeric_limits<int>::max();\n }\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n+{\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n \n     // BIP16 didn't become active until Apr 1 2012 (on mainnet, and"
      },
      {
        "sha": "07ecc93c939598f67335a979840fc1024b7e8d1e",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -192,6 +192,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.mutex);\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -202,6 +203,7 @@ BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::\n \n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.mutex);\n     return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -212,6 +214,7 @@ uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentP\n \n void VersionBitsCache::Clear()\n {\n+    LOCK(mutex);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n         caches[d].clear();\n     }"
      },
      {
        "sha": "24279a0de4f80f68186a9fcc950eaa9887c16b11",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_VERSIONBITS_H\n \n #include <chain.h>\n+#include <sync.h>\n+\n #include <map>\n \n /** What block version to use for new blocks (pre versionbits) */\n@@ -75,7 +77,8 @@ class AbstractThresholdConditionChecker {\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+    Mutex mutex;\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(mutex);\n \n     void Clear();\n };"
      }
    ]
  },
  {
    "sha": "2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjBkMjkxZGE4ZjQ3OTczOWZmMzk0ZGQ5MjgwMWRhOGM0MGI5Zjhl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-06-16T08:58:56Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "[refactor] Add deploymentstatus.h\n\nProvides DeploymentEnabled, DeploymentActiveAt, and DeploymentActiveAfter\nhelpers for checking the status of buried deployments. Can be overloaded\nso the same syntax works for non-buried deployments, allowing future\nsoft forks to be changed from signalled to buried deployments without\nhaving to touch the implementation code.\n\nReplaces IsWitnessEnabled and IsScriptWitnessEnabled.",
      "tree": {
        "sha": "50968fbedda38d56cfd6fa5b1a7c2a3ee037ddab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50968fbedda38d56cfd6fa5b1a7c2a3ee037ddab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd736f3dc231ac0306ca763c3b72cf8247230a"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 101,
      "deletions": 53
    },
    "files": [
      {
        "sha": "a3248f3eab503c62d3b2a9386b59395b25320e20",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -145,6 +145,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n   fs.h \\"
      },
      {
        "sha": "9b4139d76cc2d795f987814fa3bc589ec5011734",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -11,6 +11,17 @@\n \n namespace Consensus {\n \n+enum BuriedDeployment : int16_t\n+{\n+    // buried deployments get negative values to avoid overlap with DeploymentPos\n+    DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n+    DEPLOYMENT_CLTV,\n+    DEPLOYMENT_DERSIG,\n+    DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n+};\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n@@ -100,7 +111,25 @@ struct Params {\n      */\n     bool signet_blocks{false};\n     std::vector<uint8_t> signet_challenge;\n+\n+    int DeploymentHeight(BuriedDeployment dep) const\n+    {\n+        switch (dep) {\n+        case DEPLOYMENT_HEIGHTINCB:\n+            return BIP34Height;\n+        case DEPLOYMENT_CLTV:\n+            return BIP65Height;\n+        case DEPLOYMENT_DERSIG:\n+            return BIP66Height;\n+        case DEPLOYMENT_CSV:\n+            return CSVHeight;\n+        case DEPLOYMENT_SEGWIT:\n+            return SegwitHeight;\n+        } // no default case, so the compiler can warn about missing cases\n+        return std::numeric_limits<int>::max();\n+    }\n };\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "32190e369d528a71e6d7e0029ca0ca705a5f4655",
        "filename": "src/deploymentstatus.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTSTATUS_H\n+#define BITCOIN_DEPLOYMENTSTATUS_H\n+\n+#include <chain.h>\n+\n+#include <limits>\n+\n+/** Determine if a deployment is active for the next block */\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is active for this block */\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return index.nHeight >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is enabled (can ever be active) */\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "ae96f510bcb9d7fd1b9436c43457cb8e215e566c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -16,6 +16,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n+#include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -1587,7 +1588,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "c1a992b9e9ce0853dbad6a0e4cf59485ea14a0b6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <pow.h>\n@@ -137,12 +138,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // This is only needed in case the witness softfork activation is reverted\n     // (which would require a very deep reorganization).\n     // Note that the mempool would accept transactions with witness data before\n-    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // the deployment is active, but we would only ever mine blocks after activation\n     // unless there is a massive block reorganization with the witness softfork\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;"
      },
      {
        "sha": "315d2ac5cd82dea5af9da3b12b4faeb360ea95a5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -11,6 +11,7 @@\n #include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <merkleblock.h>\n@@ -997,7 +998,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+            if (!State(nodeid)->fHaveWitness && DeploymentActiveAt(*pindex, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n@@ -1467,7 +1468,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n+    bool fWitnessEnabled = DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -2082,7 +2083,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             while (pindexWalk && !m_chainman.ActiveChain().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !IsBlockRequested(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        (!DeploymentActiveAt(*pindexWalk, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -3397,7 +3398,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;"
      },
      {
        "sha": "f054c8b14505252156e924f515f63fdb793979af",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -774,7 +775,7 @@ static RPCHelpMan getblocktemplate()\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = !DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "b69faa54eb822db26f059b0962fbac895a4b9951",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 41,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <deploymentstatus.h>\n #include <flatfile.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -1649,15 +1650,6 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-// 0.13.0 was shipped with a segwit deployment defined for testnet, but not for\n-// mainnet. We no longer need to support disabling the segwit deployment\n-// except for testing purposes, due to limitations of the functional test\n-// environment. See test/functional/p2p-segwit.py.\n-static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n-{\n-    return params.SegwitHeight != std::numeric_limits<int>::max();\n-}\n-\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n {\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n@@ -1676,22 +1668,22 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n \n     // Enforce WITNESS rules whenever P2SH is in effect (and the segwit\n     // deployment is defined).\n-    if (flags & SCRIPT_VERIFY_P2SH && IsScriptWitnessEnabled(consensusparams)) {\n+    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n-    // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+    // Enforce the DERSIG (BIP66) rule\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+    // Enforce CHECKLOCKTIMEVERIFY (BIP65)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n-    if (pindex->nHeight >= consensusparams.CSVHeight) {\n+    // Enforce CHECKSEQUENCEVERIFY (BIP112)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1700,8 +1692,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n \n-    // Start enforcing BIP147 NULLDUMMY (activated simultaneously with segwit)\n-    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n+    // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n@@ -1891,9 +1883,9 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks)\n+    // Enforce BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= m_params.GetConsensus().CSVHeight) {\n+    if (DeploymentActiveAt(*pindex, m_params.GetConsensus(), Consensus::DEPLOYMENT_CSV)) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -2986,7 +2978,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, m_params.GetConsensus())) {\n+    if (DeploymentActiveAt(*pindexNew, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3107,17 +3099,11 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     return true;\n }\n \n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n-    return (height >= params.SegwitHeight);\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != NO_WITNESS_COMMITMENT && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n+    if (commitpos != NO_WITNESS_COMMITMENT && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n         tx.vin[0].scriptWitness.stack.resize(1);\n         tx.vin[0].scriptWitness.stack[0] = nonce;\n@@ -3130,7 +3116,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         if (commitpos == NO_WITNESS_COMMITMENT) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n@@ -3208,13 +3194,13 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n         return state.Invalid(BlockValidationResult::BLOCK_TIME_FUTURE, \"time-too-new\", \"block timestamp too far in the future\");\n \n-    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    // Reject blocks with outdated version\n+    if ((block.nVersion < 2 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB)) ||\n+        (block.nVersion < 3 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_DERSIG)) ||\n+        (block.nVersion < 4 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLTV))) {\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n+    }\n \n     return true;\n }\n@@ -3229,9 +3215,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n-    // Start enforcing BIP113 (Median Time Past).\n+    // Enforce BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (nHeight >= consensusParams.CSVHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV)) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n@@ -3248,7 +3234,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n@@ -3266,7 +3252,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (nHeight >= consensusParams.SegwitHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != NO_WITNESS_COMMITMENT) {\n             bool malleated = false;\n@@ -4096,9 +4082,8 @@ bool CChainState::NeedsRedownload() const\n \n     // At and above m_params.SegwitHeight, segwit consensus rules must be validated\n     CBlockIndex* block{m_chain.Tip()};\n-    const int segwit_height{m_params.GetConsensus().SegwitHeight};\n \n-    while (block != nullptr && block->nHeight >= segwit_height) {\n+    while (block != nullptr && DeploymentActiveAt(*block, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         if (!(block->nStatus & BLOCK_OPT_WITNESS)) {\n             // block is insufficiently validated for a segwit client\n             return true;\n@@ -5000,7 +4985,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n         // Fake BLOCK_OPT_WITNESS so that CChainState::NeedsRedownload()\n         // won't ask to rewind the entire assumed-valid chain on startup.\n-        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+        if (index->pprev && DeploymentActiveAt(*index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n             index->nStatus |= BLOCK_OPT_WITNESS;\n         }\n     }"
      },
      {
        "sha": "50a8d7e5757305640b6c98dbe03d9f426c7bb623",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -345,10 +345,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckPOW = true,\n                        bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n- *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTU1MzA0ZjZlN2E4YjYwN2U2YjNmYzc0MzZkZTUwOTEwNzQ3YjBj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-02T18:01:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:18:58Z"
      },
      "message": "[refactor] Add versionbits deployments to deploymentstatus.h\n\nAdds support for versionbits deployments to DeploymentEnabled,\nDeploymentActiveAfter and DeploymentActiveAt. Also moves versionbitscache\nfrom validation to deploymentstatus.",
      "tree": {
        "sha": "ce1cb7ee0bcad78cb327650e0c4cb5e51b28074a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce1cb7ee0bcad78cb327650e0c4cb5e51b28074a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0d291da8f479739ff394dd92801da8c40b9f8e"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 50,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a8e1b7bc1edf4bf166d463c2852a3fe587013a75",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -329,6 +329,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n   dbwrapper.cpp \\\n+  deploymentstatus.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\"
      },
      {
        "sha": "7d5fe1a7340d71f9f7fa506d70551b44aca9eac7",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -22,13 +22,14 @@ enum BuriedDeployment : int16_t\n };\n constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n \n-enum DeploymentPos\n+enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9."
      },
      {
        "sha": "4e13fd7e0afb695fdb4017bf1289757598d4660a",
        "filename": "src/deploymentstatus.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentstatus.h>\n+\n+#include <consensus/params.h>\n+#include <versionbits.h>\n+\n+VersionBitsCache versionbitscache;\n+\n+/* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n+ * ValidDeployment check */\n+\n+static_assert(ValidDeployment(Consensus::DEPLOYMENT_TESTDUMMY), \"sanity check of DeploymentPos failed (TESTDUMMY not valid)\");\n+static_assert(!ValidDeployment(Consensus::MAX_VERSION_BITS_DEPLOYMENTS), \"sanity check of DeploymentPos failed (MAX value considered valid)\");\n+static_assert(!ValidDeployment(static_cast<Consensus::BuriedDeployment>(Consensus::DEPLOYMENT_TESTDUMMY)), \"sanity check of BuriedDeployment failed (overlaps with DeploymentPos)\");"
      },
      {
        "sha": "327a5f789275ed2085ce4bf47f222b04a0fb30e6",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -6,28 +6,50 @@\n #define BITCOIN_DEPLOYMENTSTATUS_H\n \n #include <chain.h>\n+#include <versionbits.h>\n \n #include <limits>\n \n+/** Global cache for versionbits deployment status */\n+extern VersionBitsCache versionbitscache;\n+\n /** Determine if a deployment is active for the next block */\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+}\n+\n /** Determine if a deployment is active for this block */\n inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return index.nHeight >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return DeploymentActiveAfter(index.pprev, params, dep);\n+}\n+\n /** Determine if a deployment is enabled (can ever be active) */\n inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n }\n \n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.vDeployments[dep].nTimeout != 0;\n+}\n+\n #endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "183b5a5d9122f20b3cde5a5415de3133d7c5f661",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -6,6 +6,7 @@\n #include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <deploymentstatus.h>\n #include <external_signer.h>\n #include <init.h>\n #include <interfaces/chain.h>\n@@ -692,7 +693,7 @@ class ChainImpl : public Chain\n     {\n         LOCK(::cs_main);\n         const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n-        return VersionBitsState(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE;\n+        return DeploymentActiveAfter(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n     }\n     NodeContext& m_node;\n };"
      },
      {
        "sha": "7ba6e13142fb3b7c7577263507a3f36c25bd167d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -12,6 +12,7 @@\n #include <coins.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>"
      },
      {
        "sha": "a89447732e29b8c78f42dca1dcecce454c61186a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n+#include <deploymentstatus.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <versionbits.h>"
      },
      {
        "sha": "782a6cd56dbc65ef75db4bfd062b48ddb4c3bacf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -684,9 +684,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    const auto& params = args.m_chainparams.GetConsensus();\n-    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n+    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n \n@@ -1607,8 +1606,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache;\n-\n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n@@ -1687,8 +1684,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n-    // Start enforcing Taproot using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE) {\n+    // Enforce Taproot (BIP340-BIP342)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n "
      },
      {
        "sha": "0f00556053a0f9e76a09421eb5440a1e70511efe",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -24,7 +24,6 @@\n #include <sync.h>\n #include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n-#include <versionbits.h>\n #include <serialize.h>\n #include <util/check.h>\n #include <util/hasher.h>\n@@ -1020,8 +1019,6 @@ class ChainstateManager\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-extern VersionBitsCache versionbitscache;\n-\n /**\n  * Determine what nVersion a new block should use.\n  */"
      }
    ]
  },
  {
    "sha": "c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjRiMmM2YTBmNzkzNjk2MjRhZTk2YjJlM2Q1NzlkNTBhYWU0ZGU2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-10T20:59:53Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "scripted-diff: rename versionbitscache\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/versionbitscache/g_versionbitscache/g' $(git grep -l versionbitscache)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "666e3fbbdf9ee9b06e40ac0955b90bf0fe6b4800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/666e3fbbdf9ee9b06e40ac0955b90bf0fe6b4800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de55304f6e7a8b607e6b3fc7436de50910747b0c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9007800421870d61fda1a8ad984a5b0e5e3900b5",
        "filename": "src/deploymentstatus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -7,7 +7,7 @@\n #include <consensus/params.h>\n #include <versionbits.h>\n \n-VersionBitsCache versionbitscache;\n+VersionBitsCache g_versionbitscache;\n \n /* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n  * ValidDeployment check */"
      },
      {
        "sha": "3c4f1895a1b3bede39f50ff86089f456ac8df03e",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -11,7 +11,7 @@\n #include <limits>\n \n /** Global cache for versionbits deployment status */\n-extern VersionBitsCache versionbitscache;\n+extern VersionBitsCache g_versionbitscache;\n \n /** Determine if a deployment is active for the next block */\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n@@ -23,7 +23,7 @@ inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, g_versionbitscache);\n }\n \n /** Determine if a deployment is active for this block */"
      },
      {
        "sha": "7ceff17d0b46bd351a2bd4a64691b3708e4cbd92",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -1369,7 +1369,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, g_versionbitscache);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1383,7 +1383,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n+    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, g_versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {"
      },
      {
        "sha": "d6ca0959f23e31c3db0d63512a1d3a61d68c4544",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -841,7 +841,7 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, g_versionbitscache);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:"
      },
      {
        "sha": "49c61f5f2ff7b759dd172ea74293183805943b96",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -259,8 +259,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n /** Check that ComputeBlockVersion will set the appropriate bit correctly */\n static void check_computeblockversion(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n-    // This implicitly uses versionbitscache, so clear it every time\n-    versionbitscache.Clear();\n+    // This implicitly uses g_versionbitscache, so clear it every time\n+    g_versionbitscache.Clear();\n \n     int64_t bit = params.vDeployments[dep].bit;\n     int64_t nStartTime = params.vDeployments[dep].nStartTime;"
      },
      {
        "sha": "d2baa92dde33658fc0b44f0bfc0a500d61492ba5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -1611,7 +1611,7 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), g_versionbitscache);\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n             nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n@@ -4110,7 +4110,7 @@ void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)\n     nLastBlockFile = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    versionbitscache.Clear();\n+    g_versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n     }"
      }
    ]
  },
  {
    "sha": "ea68b3a5729f5d240e968388c4f88acffeb27228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTY4YjNhNTcyOWY1ZDI0MGU5NjgzODhjNGY4OGFjZmZlYjI3MjI4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:17:22Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[move-only] Rename versionbitsinfo to deploymentinfo",
      "tree": {
        "sha": "0507e4cdd0e73ea4f24b9bf66628e28b01592922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0507e4cdd0e73ea4f24b9bf66628e28b01592922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68b3a5729f5d240e968388c4f88acffeb27228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64b2c6a0f79369624ae96b2e3d579d50aae4de6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "37ba5ad75b5f6c30e35cdb981589e1e4fa7cb135",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -145,6 +145,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentinfo.h \\\n   deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n@@ -273,7 +274,6 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   wallet/bdb.h \\\n   wallet/coincontrol.h \\\n   wallet/coinselection.h \\\n@@ -542,6 +542,7 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  deploymentinfo.cpp \\\n   external_signer.cpp \\\n   init/common.cpp \\\n   key.cpp \\\n@@ -563,7 +564,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "58a27e053b9f3f8a17a4a072b5ec14416917e4f4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n #include <util/system.h>\n-#include <versionbitsinfo.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "174f4677fa08a475efb3b4697a1250064bfd496f",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -26,7 +26,7 @@ enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n-    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }"
      },
      {
        "sha": "70d9961133084bcedcf310e039930ec9bd275f52",
        "filename": "src/deploymentinfo.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <versionbitsinfo.h>\n+#include <deploymentinfo.h>\n \n #include <consensus/params.h>\n ",
        "previous_filename": "src/versionbitsinfo.cpp"
      },
      {
        "sha": "4c68856eaca9f1b5111f020ac426d161d43be635",
        "filename": "src/deploymentinfo.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_VERSIONBITSINFO_H\n-#define BITCOIN_VERSIONBITSINFO_H\n+#ifndef BITCOIN_DEPLOYMENTINFO_H\n+#define BITCOIN_DEPLOYMENTINFO_H\n \n struct VBDeploymentInfo {\n     /** Deployment name */\n@@ -14,4 +14,4 @@ struct VBDeploymentInfo {\n \n extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n \n-#endif // BITCOIN_VERSIONBITSINFO_H\n+#endif // BITCOIN_DEPLOYMENTINFO_H",
        "previous_filename": "src/versionbitsinfo.h"
      },
      {
        "sha": "04aa459e11f034e1220fefc2ab3245f187fd6dd2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n@@ -35,7 +36,6 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>"
      }
    ]
  },
  {
    "sha": "92f48f360da5f425428b761219301f509826bec4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmY0OGYzNjBkYTVmNDI1NDI4Yjc2MTIxOTMwMWY1MDk4MjZiZWM0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:47:24Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "deploymentinfo: Add DeploymentName()",
      "tree": {
        "sha": "06edcd128c8025ada2211aaaa4aa5212e9867f48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06edcd128c8025ada2211aaaa4aa5212e9867f48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f48f360da5f425428b761219301f509826bec4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f48f360da5f425428b761219301f509826bec4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea68b3a5729f5d240e968388c4f88acffeb27228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68b3a5729f5d240e968388c4f88acffeb27228"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "030a7806dec010009fc566bd7f53a099d3edbc3a",
        "filename": "src/deploymentinfo.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=92f48f360da5f425428b761219301f509826bec4",
        "patch": "@@ -16,3 +16,21 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.gbt_force =*/ true,\n     },\n };\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep)\n+{\n+    assert(ValidDeployment(dep));\n+    switch (dep) {\n+    case Consensus::DEPLOYMENT_HEIGHTINCB:\n+        return \"bip34\";\n+    case Consensus::DEPLOYMENT_CLTV:\n+        return \"bip65\";\n+    case Consensus::DEPLOYMENT_DERSIG:\n+        return \"bip66\";\n+    case Consensus::DEPLOYMENT_CSV:\n+        return \"csv\";\n+    case Consensus::DEPLOYMENT_SEGWIT:\n+        return \"segwit\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}"
      },
      {
        "sha": "63d58a7da253913d0b3c81e6f66faa676932a5f4",
        "filename": "src/deploymentinfo.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=92f48f360da5f425428b761219301f509826bec4",
        "patch": "@@ -5,13 +5,25 @@\n #ifndef BITCOIN_DEPLOYMENTINFO_H\n #define BITCOIN_DEPLOYMENTINFO_H\n \n+#include <consensus/params.h>\n+\n+#include <string>\n+\n struct VBDeploymentInfo {\n     /** Deployment name */\n     const char *name;\n     /** Whether GBT clients can safely ignore this rule in simplified usage */\n     bool gbt_force;\n };\n \n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n+extern const VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep);\n+\n+inline std::string DeploymentName(Consensus::DeploymentPos pos)\n+{\n+    assert(Consensus::ValidDeployment(pos));\n+    return VersionBitsDeploymentInfo[pos].name;\n+}\n \n #endif // BITCOIN_DEPLOYMENTINFO_H"
      }
    ]
  },
  {
    "sha": "8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWUzZTBiZWQ1YmYyY2QzYzdhNjhjYTZiYTZjNjVmN2I5YTcyY2Nh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:17:52Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] rpc/blockchain.cpp: SoftForkPushBack\n\nRename BIP9SoftForkPushBack and BuriedSoftForkPushBack to SoftForkPushBack\nand have the compiler figure out which one to use based on the deployment\ntype. Avoids the need to update the file when burying a deployment.",
      "tree": {
        "sha": "24e4febdcacca35b1de63b010fa45f6c95fdc4d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24e4febdcacca35b1de63b010fa45f6c95fdc4d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92f48f360da5f425428b761219301f509826bec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92f48f360da5f425428b761219301f509826bec4"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9c9a909d66912a9caa663d283d5c936571d144e7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "patch": "@@ -10,8 +10,10 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -38,6 +40,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbits.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -1344,25 +1347,25 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n     // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (softfork_height == std::numeric_limits<int>::max()) return;\n+    if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", tip_height + 1 >= softfork_height);\n-    rv.pushKV(\"height\", softfork_height);\n-    softforks.pushKV(name, rv);\n+    rv.pushKV(\"active\", DeploymentActiveAfter(active_chain_tip, params, dep));\n+    rv.pushKV(\"height\", params.DeploymentHeight(dep));\n+    softforks.pushKV(DeploymentName(dep), rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments that are never active are hidden.\n@@ -1406,7 +1409,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(DeploymentName(id), rv);\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1503,14 +1506,14 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, height);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, height);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\",             softforks);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    obj.pushKV(\"softforks\", softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;"
      }
    ]
  },
  {
    "sha": "0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2ZkNmM2YThmOTI5ZDU1NjdhYzQxZjk1YzIxNTQ4ZjExNWVmZWU1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T01:19:06Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] versionbits: make VersionBitsCache a full class\n\nMoves the VersionBits* functions to be methods of the cache class,\nand makes the cache and its lock private to the class.",
      "tree": {
        "sha": "fd396692805022b432022c45da6bb2a18b2fa54b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd396692805022b432022c45da6bb2a18b2fa54b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 39,
      "deletions": 34
    },
    "files": [
      {
        "sha": "84c5e54698c99684aa21748046845aa7fb0001a0",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -23,7 +23,7 @@ inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, g_versionbitscache);\n+    return ThresholdState::ACTIVE == g_versionbitscache.State(pindexPrev, params, dep);\n }\n \n /** Determine if a deployment is active for this block */"
      },
      {
        "sha": "b630458f2348add9a99be1b66d91517f38f3e759",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -1372,7 +1372,7 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, g_versionbitscache);\n+    const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1386,12 +1386,12 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, g_versionbitscache);\n+    int64_t since_height = g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n+        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);"
      },
      {
        "sha": "2762d78493b2a64e6ad0773ede84a1fd6cdf2993",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -841,15 +841,15 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, g_versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, consensusParams, pos);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+                pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n                 // FALL THROUGH to get vbavailable set...\n             case ThresholdState::STARTED:\n             {\n@@ -858,7 +858,7 @@ static RPCHelpMan getblocktemplate()\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                        pblock->nVersion &= ~g_versionbitscache.Mask(consensusParams, pos);\n                     }\n                 }\n                 break;"
      },
      {
        "sha": "946b35f3b9330c41eacc6db1fbf7e413c8ff064b",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -288,7 +288,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Check min_activation_height is on a retarget boundary\n     BOOST_REQUIRE_EQUAL(min_activation_height % params.nMinerConfirmationWindow, 0U);\n \n-    const uint32_t bitmask{VersionBitsMask(params, dep)};\n+    const uint32_t bitmask{g_versionbitscache.Mask(params, dep)};\n     BOOST_CHECK_EQUAL(bitmask, uint32_t{1} << bit);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n@@ -426,7 +426,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n             // not take precedence over STARTED/LOCKED_IN. So all softforks on\n             // the same bit might overlap, even when non-overlapping start-end\n             // times are picked.\n-            const uint32_t dep_mask{VersionBitsMask(chainParams->GetConsensus(), dep)};\n+            const uint32_t dep_mask{g_versionbitscache.Mask(chainParams->GetConsensus(), dep)};\n             BOOST_CHECK(!(chain_all_vbits & dep_mask));\n             chain_all_vbits |= dep_mask;\n             check_computeblockversion(chainParams->GetConsensus(), dep);"
      },
      {
        "sha": "024f643be5cf5075738fe61d929eadc57d7e4ac4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -1611,9 +1611,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), g_versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "0fbad0a64eb5c782270dc423c03869a9d4fc25fc",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -190,32 +190,32 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n } // namespace\n \n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.mutex);\n-    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }\n \n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.mutex);\n-    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, m_caches[pos]);\n }\n \n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n void VersionBitsCache::Clear()\n {\n-    LOCK(mutex);\n+    LOCK(m_mutex);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n-        caches[d].clear();\n+        m_caches[d].clear();\n     }\n }"
      },
      {
        "sha": "4ede92080379ffd0aa7a9d057144ba97cad5af52",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -73,22 +73,27 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n- *  keyed by the bit position used to signal support. */\n-struct VersionBitsCache\n+/** BIP 9 allows multiple softforks to be deployed in parallel. We cache\n+ *  per-period state for every one of them. */\n+class VersionBitsCache\n {\n-    Mutex mutex;\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(mutex);\n+private:\n+    Mutex m_mutex;\n+    ThresholdConditionCache m_caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(m_mutex);\n+\n+public:\n+    /** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n+    static BIP9Stats Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n+    ThresholdState State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n+    int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTY5YjRkYmUwZDdmNTA0ODExYjY3YzM5OWRhN2U2ZDExZTRmODA1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-16T08:33:02Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[move-only] Move ComputeBlockVersion from validation to versionbits",
      "tree": {
        "sha": "f68a96ce61f4cbc31c2550f75950c450e18fb98f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68a96ce61f4cbc31c2550f75950c450e18fb98f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfd6c6a8f929d5567ac41f95c21548f115efee5"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 21,
      "deletions": 19
    },
    "files": [
      {
        "sha": "ee10e047bd15c43d17b1605eb78ce771c5ec510f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -1606,20 +1606,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int32_t nVersion = VERSIONBITS_TOP_BITS;\n-\n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n-        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n-        }\n-    }\n-\n-    return nVersion;\n-}\n-\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */"
      },
      {
        "sha": "3d66e3161dd9a8c424d05db3ba44b668abdd8186",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -1019,11 +1019,6 @@ class ChainstateManager\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n using FopenFn = std::function<FILE*(const fs::path&, const char*)>;\n \n /** Dump the mempool to disk. */"
      },
      {
        "sha": "3497fc049e66658ec57f8feccd8c2c0e23971f39",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -212,6 +212,22 @@ uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::Depl\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n+extern VersionBitsCache g_versionbitscache; // removed in next commit\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n+        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n+            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n void VersionBitsCache::Clear()\n {\n     LOCK(m_mutex);"
      },
      {
        "sha": "c18a8d1176a6d8f5d79500944a37ae2370685072",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -96,4 +96,9 @@ class VersionBitsCache\n     void Clear();\n };\n \n+/**\n+ * Determine what nVersion a new block should use.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "c5f36725e877d8eb492383844f8ef7535466b366",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWYzNjcyNWU4NzdkOGViNDkyMzgzODQ0ZjhlZjc1MzU0NjZiMzY2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-16T08:34:34Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] Move ComputeBlockVersion into VersionBitsCache\n\nThis also changes ComputeBlockVersion to take the versionbits cache\nmutex once, rather than once for each versionbits deployment.",
      "tree": {
        "sha": "ce68ede5ada96fed4a558a1f88e7354e4a1ac3b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce68ede5ada96fed4a558a1f88e7354e4a1ac3b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5f36725e877d8eb492383844f8ef7535466b366",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f36725e877d8eb492383844f8ef7535466b366",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a69b4dbe0d7f504811b67c399da7e6d11e4f805"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d9186a5d6dc4c9cc8403903b6fb17397f82a11e0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -121,7 +121,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = g_versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())"
      },
      {
        "sha": "60a8373cf423cb23cc7b76c5b0bce3eca6ea49f3",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -15,6 +15,11 @@\n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n+static int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    return g_versionbitscache.ComputeBlockVersion(pindexPrev, params);\n+}\n+\n static const std::string StateName(ThresholdState state)\n {\n     switch (state) {"
      },
      {
        "sha": "65d2dfa3b7add202583c3688b2b509b3d5d66b8c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -1627,7 +1627,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n         return pindex->nHeight >= params.MinBIP9WarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((g_versionbitscache.ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n     }\n };\n "
      },
      {
        "sha": "94c3c9559f67250bde377d6db8a85b9145001390",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -212,16 +212,16 @@ uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::Depl\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n-extern VersionBitsCache g_versionbitscache; // removed in next commit\n-\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+int32_t VersionBitsCache::ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n+    LOCK(m_mutex);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n+        Consensus::DeploymentPos pos = static_cast<Consensus::DeploymentPos>(i);\n+        ThresholdState state = VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= Mask(params, pos);\n         }\n     }\n "
      },
      {
        "sha": "0b2f4a0258a4047a5d195e393ed8f3df2008458b",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -93,12 +93,11 @@ class VersionBitsCache\n     /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n     int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n+    /** Determine what nVersion a new block should use\n+     */\n+    int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n     void Clear();\n };\n \n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDg4MjZhZDg3YjRmOTIyNjFmNzQzM2U4NGY0OGRhYzliZDllNWMz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-07T04:58:54Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "tests: remove ComputeBlockVersion shortcut from versionbits tests",
      "tree": {
        "sha": "917e9689b7be540c3f888dbd7cbe0b906fb975cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/917e9689b7be540c3f888dbd7cbe0b906fb975cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5f36725e877d8eb492383844f8ef7535466b366",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f36725e877d8eb492383844f8ef7535466b366"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 18,
      "deletions": 23
    },
    "files": [
      {
        "sha": "690031cdc17fbe940f52c438b55a95d5bec2da13",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 23,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
        "patch": "@@ -15,11 +15,6 @@\n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n-static int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    return g_versionbitscache.ComputeBlockVersion(pindexPrev, params);\n-}\n-\n static const std::string StateName(ThresholdState state)\n {\n     switch (state) {\n@@ -273,7 +268,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     int min_activation_height = params.vDeployments[dep].min_activation_height;\n \n     // should not be any signalling for first block\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n \n     // always/never active deployments shouldn't need to be tested further\n     if (nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE ||\n@@ -312,38 +307,38 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // earlier time, so will transition from DEFINED to STARTED at the\n         // end of the first period by mining blocks at nTime == 0\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then we'll keep mining at nStartTime...\n     } else {\n         // use a time 1s earlier than start time to check we stay DEFINED\n         --nTime;\n \n         // Start generating blocks before nStartTime\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n \n         // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n         for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n         // CBV should still not yet set the bit.\n         nTime = nStartTime;\n         for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Next we will advance to the next period and transition to STARTED,\n     }\n \n     lastBlock = firstChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n@@ -352,8 +347,8 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n@@ -367,20 +362,20 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // finish the last period before we start timing out\n         while (nHeight % params.nMinerConfirmationWindow != 0) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime - 1, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n \n         // FAILED is only triggered at the end of a period, so CBV should be setting\n         // the bit until the period transition.\n         for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n         // The next block should trigger no longer setting the bit.\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n     }\n \n     // On a new chain:\n@@ -391,30 +386,30 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n     lastBlock = secondChain.Mine((params.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n \n     if (lastBlock->nHeight + 1 < min_activation_height) {\n         // check signalling continues while min_activation_height is not reached\n         lastBlock = secondChain.Mine(min_activation_height - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then reach min_activation_height, which was already REQUIRE'd to start a new period\n         lastBlock = secondChain.Mine(min_activation_height, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     }\n \n     // Check that we don't signal after activation\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)"
      }
    ]
  },
  {
    "sha": "bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmQ5MTBjYWU0ZTVmOGFlOWE2ZWM5ZGVhMDJhOWMyOGQwMjNiOGNi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-30T01:22:57Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-30T01:23:15Z"
      },
      "message": "Merge bitcoin/bitcoin#18568: doc: Clarify developer notes about constant naming\n\n05f9770c1fa64bd9730cd6e18ec333e0801c00d6 doc: Clarify developer notes about constant naming (Russell Yanofsky)\n\nPull request description:\n\n  I'm pretty sure developer notes were intended to say constants should be upper case and variables should be lower case, but right now they are ambiguous about whether to write:\n\n  ```c++\n  extern const int SYMBOL;\n  ```\n\n  or:\n\n  ```c++\n  extern const int g_symbol;\n  ```\n\n  First convention above is better than the second convention because it tells you without having to look anything up that the value of `SYMBOL` won't change at runtime. Also I haven't seen other c++ projects using the second convention.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6\n  practicalswift:\n    ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6\n  jarolrod:\n    ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6 \ud83e\udd43\n\nTree-SHA512: 766d0e25d9db818d45df4ad6386987014f2053584cbced4b755ceef8bda6b7e2cfeb34eb8516423bd03b140faaf577614d5e3be2799f7eed0eb439187ab85323",
      "tree": {
        "sha": "60097db0e5d95d223f856648761521d9e67341b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60097db0e5d95d223f856648761521d9e67341b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDbx4MACgkQLuufXMCV\nJsE3+Q//fXItcuEgZrseLtNjw4P534YydyQJIdmPqLNvburrfDthhnWyDUfNaZj7\nxYJBljc8bYhfEyCljU0cdliN9rQbygKEk2wo9Y1PzybAXXYmvj1bFpASboXEYbW7\nrU7IJv0omMADzuK/6DLx7Lpkt10S34kcXWb0wzOejz8u3SOL6Yx3rR+vq4Apuz8o\ndGuubIpS7MWzvphL2F+8iQ5g9HyeWRI83AjUcBpf+TXqx3waOcBZkJD/1gRiGaL3\nAeX7OfV1p61xR8Soq7pbYaA7hw91omhK+ETE4JrniN2cYvWVCfFfPesYfG1SIYde\nmC4sEB3XCntHABgj4THZNlQr4jZwc0PlnuTETLcfpJ9k79Vg0ClqcDV3UW/0HFVy\ngD5ib6MpKU0uTSBQkBIBNrOOl7Y6v09KYLA/DIdmJarh/zQjonbZbBg9CAA4YKTo\nR3R08vW6EWwpVXnSRWJBXBkiCXaxVy5fdLA+K5Bv7WCZHybfWeF1jqtMfAB/cE4c\n+3C+xgPU01FE4/5LVLiF2bp+jDGKahjDCFQfEahYFIjARtktXkw8fq7bwl04yMSv\nPq3D40qq+Byw84Ib1n9Vsv1HmU0HkbTgiwvWydquWpOaHJ2lzNZfWSvP/+AZ6leV\nZQ4YhtWAlL4t5tCue3KforTCYrE4RWCcZO++tVJOBV63GNX/7uY=\n=tjK+\n-----END PGP SIGNATURE-----",
        "payload": "tree 60097db0e5d95d223f856648761521d9e67341b8\nparent a000cb013cc1104ddcd6431d5a9b89e90bde2593\nparent 05f9770c1fa64bd9730cd6e18ec333e0801c00d6\nauthor fanquake <fanquake@gmail.com> 1625016177 +0800\ncommitter fanquake <fanquake@gmail.com> 1625016195 +0800\n\nMerge bitcoin/bitcoin#18568: doc: Clarify developer notes about constant naming\n\n05f9770c1fa64bd9730cd6e18ec333e0801c00d6 doc: Clarify developer notes about constant naming (Russell Yanofsky)\n\nPull request description:\n\n  I'm pretty sure developer notes were intended to say constants should be upper case and variables should be lower case, but right now they are ambiguous about whether to write:\n\n  ```c++\n  extern const int SYMBOL;\n  ```\n\n  or:\n\n  ```c++\n  extern const int g_symbol;\n  ```\n\n  First convention above is better than the second convention because it tells you without having to look anything up that the value of `SYMBOL` won't change at runtime. Also I haven't seen other c++ projects using the second convention.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6\n  practicalswift:\n    ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6\n  jarolrod:\n    ACK 05f9770c1fa64bd9730cd6e18ec333e0801c00d6 \ud83e\udd43\n\nTree-SHA512: 766d0e25d9db818d45df4ad6386987014f2053584cbced4b755ceef8bda6b7e2cfeb34eb8516423bd03b140faaf577614d5e3be2799f7eed0eb439187ab85323\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a000cb013cc1104ddcd6431d5a9b89e90bde2593"
      },
      {
        "sha": "05f9770c1fa64bd9730cd6e18ec333e0801c00d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05f9770c1fa64bd9730cd6e18ec333e0801c00d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05f9770c1fa64bd9730cd6e18ec333e0801c00d6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "583c50a76363fa4d0eee3aba7c7b0e00dc9cb6d9",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
        "patch": "@@ -88,7 +88,7 @@ code.\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n-  - Compile-time constant names are all uppercase, and use `_` to separate words.\n+  - Constant names are all uppercase, and use `_` to separate words.\n   - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file"
      }
    ]
  },
  {
    "sha": "181181019c5baa3e2d5b675d1843a45aa028781c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODExODEwMTljNWJhYTNlMmQ1YjY3NWQxODQzYTQ1YWEwMjg3ODFj",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-29T06:29:25Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-06-30T06:37:50Z"
      },
      "message": "refactor: remove m_internal from DescriptorSPKman\n\nDescriptor in itself is neither internal or external.\nIt's responsibility of a wallet to assign and manage descriptors\nfor a specific purpose. Duplicating such information could lead to\ninconsistencies and unexpected behaviour.",
      "tree": {
        "sha": "f673dbc4f7784f9d0a216987f0d60e2b13abc243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f673dbc4f7784f9d0a216987f0d60e2b13abc243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/181181019c5baa3e2d5b675d1843a45aa028781c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181181019c5baa3e2d5b675d1843a45aa028781c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/181181019c5baa3e2d5b675d1843a45aa028781c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181181019c5baa3e2d5b675d1843a45aa028781c/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56ef7bef22f0c8c94ad7e401d50b188dae2cbe"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 19,
      "deletions": 40
    },
    "files": [
      {
        "sha": "61df3d0015470152d5ad3e19a837eb6a156fde68",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -15,8 +15,8 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n   ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n       :   DescriptorScriptPubKeyMan(storage, descriptor)\n       {}\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage, bool internal)\n-      :   DescriptorScriptPubKeyMan(storage, internal)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage)\n+      :   DescriptorScriptPubKeyMan(storage)\n       {}\n \n   /** Provide a descriptor at setup time"
      },
      {
        "sha": "5467495ffff55644f887b41934440484a147f506",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -1613,12 +1613,10 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-void LegacyScriptPubKeyMan::SetInternal(bool internal) {}\n-\n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n     // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n-    if (!CanGetAddresses(m_internal)) {\n+    if (!CanGetAddresses()) {\n         error = \"No addresses available\";\n         return false;\n     }\n@@ -1894,7 +1892,7 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n {\n     if (addr_type == OutputType::BECH32M) {\n         // Don't allow setting up taproot descriptors yet\n@@ -1942,7 +1940,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix += \"/0'\";\n     }\n \n-    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n     std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n \n     // Make the descriptor\n@@ -1997,13 +1995,6 @@ int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n     return 0;\n }\n \n-size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n-{\n-    if (m_internal) {\n-        return 0;\n-    }\n-    return GetKeyPoolSize();\n-}\n \n unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n {\n@@ -2205,11 +2196,6 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetInternal(bool internal)\n-{\n-    this->m_internal = internal;\n-}\n-\n void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "128197e567cce71707abae17698753ad20a930b2",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -216,7 +216,6 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetOldestKeyPoolTime() const { return GetTime(); }\n \n-    virtual size_t KeypoolCountExternalKeys() const { return 0; }\n     virtual unsigned int GetKeyPoolSize() const { return 0; }\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n@@ -239,8 +238,6 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n-    virtual void SetInternal(bool internal) {}\n-\n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n     void WalletLogPrintf(std::string fmt, Params... parameters) const {\n@@ -386,7 +383,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void RewriteDB() override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n+    size_t KeypoolCountExternalKeys() const;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -405,8 +402,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n@@ -533,8 +528,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    bool m_internal = false;\n-\n     KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n     CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n \n@@ -560,9 +553,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n         :   ScriptPubKeyMan(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, bool internal)\n-        :   ScriptPubKeyMan(storage),\n-            m_internal(internal)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage)\n+        :   ScriptPubKeyMan(storage)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;\n@@ -587,7 +579,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type);\n+    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     /** Provide a descriptor at setup time\n     * Returns false if already setup or setup fails, true if setup is successful\n@@ -597,7 +589,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -616,8 +607,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     void SetCache(const DescriptorCache& cache);\n \n     bool AddKey(const CKeyID& key_id, const CKey& key);"
      },
      {
        "sha": "5b108a50694aa8dc96e4c493d0dba548d6b52338",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181181019c5baa3e2d5b675d1843a45aa028781c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=181181019c5baa3e2d5b675d1843a45aa028781c",
        "patch": "@@ -2079,9 +2079,14 @@ size_t CWallet::KeypoolCountExternalKeys() const\n {\n     AssertLockHeld(cs_wallet);\n \n+    auto legacy_spk_man = GetLegacyScriptPubKeyMan();\n+    if (legacy_spk_man) {\n+        return legacy_spk_man->KeypoolCountExternalKeys();\n+    }\n+\n     unsigned int count = 0;\n-    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n-        count += spk_man->KeypoolCountExternalKeys();\n+    for (auto spk_man : m_external_spk_managers) {\n+        count += spk_man.second->GetKeyPoolSize();\n     }\n \n     return count;\n@@ -3097,7 +3102,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     // TODO: Setup taproot (bech32m) descriptors by default\n                     continue;\n                 }\n-                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {\n                         throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -3106,7 +3111,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                         throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                     }\n                 }\n-                spk_manager->SetupDescriptorGeneration(master_key, t);\n+                spk_manager->SetupDescriptorGeneration(master_key, t, internal);\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n                 AddActiveScriptPubKeyMan(id, t, internal);\n@@ -3132,7 +3137,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     continue;\n                 }\n                 OutputType t =  *desc->GetOutputType();\n-                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this));\n                 spk_manager->SetupDescriptor(std::move(desc));\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n@@ -3156,7 +3161,6 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n-    spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n     NotifyCanGetAddressesChanged();"
      }
    ]
  },
  {
    "sha": "e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWExM2YxMmUxZGRkOTNkMzRhMTBmNWYxYTY0Mjc5NDA2M2M3NGYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-30T07:43:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-30T07:43:21Z"
      },
      "message": "Merge bitcoin/bitcoin#18096: doc: IsFinalTx comment about nSequence & OP_CLTV\n\nf9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7 doc: IsFinalTx comment about nSequence & OP_CLTV (Yuval Kogman)\n\nPull request description:\n\n  It's somewhat surprising that a transaction's `nLockTime` field is ignored\n  when all `nSequence` fields are final, so this change aims to clarify this\n  behavior and cross reference relevant details of `OP_CHECKLOCKTIMEVERIFY`.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7\n\nTree-SHA512: 88460dacbe4b8115fb1948715f09b21d4f34ba1da9e88d52f0b774a969f845e9eddc5940e7fee66eacdd3062dc40d6d44c3f282b0e5144411fd47eb2320b44f5",
      "tree": {
        "sha": "c2793f6ce00baee1ee64431a51f290ca668dd27e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2793f6ce00baee1ee64431a51f290ca668dd27e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUje3gv/X4uApO+bsdVYozMBiHXk+xodif1mg4SIMSaUmkGaBeUqlVocqlmJRnSO\n5jg06x2LODOKh23QqbL7YVrscmafmYGr1LkgomWUkiYIztS8e7BXWA2XbpUt3ZIg\n5Yb0UPaQtKPIsRSpxtSqaCxCpx2Ge1BDD6ByI+p03khSP/Flsbco6YOqVxEq707D\nPpQYLu1KeAO8K0t095KTLKAGCKkqacIEX+b6bMZey9vUpY5c4+iXmU+/GTWNsknV\nKWlCywb3/ejqsKs0BziLxC8jP7qM47gh7lPZv7v5nXUWit9uOPf78/ogSRUJgxR/\na3o7cEDZqcalHcdVwVFIrunCkU0rCnyUJRhjBztXlawzICwt2wQTVNaqtt+ruBRi\nESOg9vnRgqQey/hlG31HPpNXff7kiStpfbAzUrQO5BooxVzI7kscA4jz1uu89nOG\nuvYeBcgeWopjyZvSOd3t1ZMcwQix8UMv65Tx3TUD3zXb3P0K1i5cND+NkHQngZ0b\nblrEFy/B\n=rsUS\n-----END PGP SIGNATURE-----",
        "payload": "tree c2793f6ce00baee1ee64431a51f290ca668dd27e\nparent bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb\nparent f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7\nauthor MarcoFalke <falke.marco@gmail.com> 1625038996 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625039001 +0200\n\nMerge bitcoin/bitcoin#18096: doc: IsFinalTx comment about nSequence & OP_CLTV\n\nf9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7 doc: IsFinalTx comment about nSequence & OP_CLTV (Yuval Kogman)\n\nPull request description:\n\n  It's somewhat surprising that a transaction's `nLockTime` field is ignored\n  when all `nSequence` fields are final, so this change aims to clarify this\n  behavior and cross reference relevant details of `OP_CHECKLOCKTIMEVERIFY`.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7\n\nTree-SHA512: 88460dacbe4b8115fb1948715f09b21d4f34ba1da9e88d52f0b774a969f845e9eddc5940e7fee66eacdd3062dc40d6d44c3f282b0e5144411fd47eb2320b44f5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a13f12e1ddd93d34a10f5f1a642794063c74f3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd910cae4e5f8ae9a6ec9dea02a9c28d023b8cb"
      },
      {
        "sha": "f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9e37f33ce2d8b463a0bcbe7189c9bc5b36530b7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "88d8da6ed5cba07b61e43a0824e14a097f80daf3",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a13f12e1ddd93d34a10f5f1a642794063c74f3/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a13f12e1ddd93d34a10f5f1a642794063c74f3/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
        "patch": "@@ -20,6 +20,15 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n+\n+    // Even if tx.nLockTime isn't satisfied by nBlockHeight/nBlockTime, a\n+    // transaction is still considered final if all inputs' nSequence ==\n+    // SEQUENCE_FINAL (0xffffffff), in which case nLockTime is ignored.\n+    //\n+    // Because of this behavior OP_CHECKLOCKTIMEVERIFY/CheckLockTime() will\n+    // also check that the spending input's nSequence != SEQUENCE_FINAL,\n+    // ensuring that an unsatisfied nLockTime value will actually cause\n+    // IsFinalTx() to return false here:\n     for (const auto& txin : tx.vin) {\n         if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;"
      },
      {
        "sha": "ef48f89965817877c8ef1e4f6f9d4f6ff501cfbf",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a13f12e1ddd93d34a10f5f1a642794063c74f3/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a13f12e1ddd93d34a10f5f1a642794063c74f3/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
        "patch": "@@ -1740,9 +1740,9 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     if (nLockTime > (int64_t)txTo->nLockTime)\n         return false;\n \n-    // Finally the nLockTime feature can be disabled and thus\n-    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n-    // finalized by setting nSequence to maxint. The\n+    // Finally the nLockTime feature can be disabled in IsFinalTx()\n+    // and thus CHECKLOCKTIMEVERIFY bypassed if every txin has\n+    // been finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n     // the opcode ineffective.\n     //"
      }
    ]
  },
  {
    "sha": "3fc20abab03d71a982d6fe9c47155834b256ab17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmMyMGFiYWIwM2Q3MWE5ODJkNmZlOWM0NzE1NTgzNGIyNTZhYjE3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-30T08:18:42Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-30T08:23:19Z"
      },
      "message": "Merge bitcoin/bitcoin#22353: ci: Upgrading pip version in macos environment\n\n057750c09d0a8331c33966d2cc2285ef82f08af8 ci: Upgrading pip version in macos environment (Tushar Singla)\n\nPull request description:\n\n  During each CI run, in macos native environment, python packages lief and zmq are rebuilt everytime which wastes a lot of resources and time and fixes #22206. The latest version of pip directly fetches pre-built binaries. Through this commit pip version is upgraded in macos environment before installation of these packages.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 057750c09d0a8331c33966d2cc2285ef82f08af8\n\nTree-SHA512: e61d02e46c8fe6a89119014d025a26aba090f9507d725315680893290f5bbc20a375ef408c71fa8db2f485b44ec91cfa0c140198ca44a9d3e0a57055b6bb9582",
      "tree": {
        "sha": "38aee9b239086699bf7fa716c7262787b6381abe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38aee9b239086699bf7fa716c7262787b6381abe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fc20abab03d71a982d6fe9c47155834b256ab17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDcKfcACgkQLuufXMCV\nJsFQxRAAsNDkp4wdjsJzJw0F/Itr01kAtFjbaDI6fgxJFVMRVYgrLGH1kO5Suf/q\nKaH7IivQb0SmIyXr+KwgU0LE2/vjqNhXxCPWKyfmr8edNvEzMKu8Uqi/UKoHiXFs\nt7DgYFlBbv6N/Cj8r98BOe+AclGzsmO7Hfq2t4ywb+OT7y4Q3Rp7tLTB8wTdIB9+\nz0Nc9wUacC1mzqs0bTE4oZd+2ZiIg7VK1KejCkS0D+o68Qa7qF/kQ3omhXTntBW+\nW3+qJcuKqNTDGrltu44GMqaJU7xhWTafk0ZdmYhG907ob5i2r9kBUbkyjZ4puvfW\n1TS7040ALIPnMJCmcJ54wlLQs0TlybUBPRq9IZQ9jwJaDY4laTVuaMK9g8SA72hd\nw5k94beW0WgniSSKUCr+6cZpVCZ0w0scjCjUzzQKntNnZMDEnaC6skZh8T/R1aeV\nSefPUmSibWiR0WH462OfeYn1W5oba53W8HgOkyKrNj5VoDWKZBgZCbeARu//I/NT\nZ6C06TTsVMoXGch3F08N+bJKaWxuheGVM+f4njBMItF4AX6VUk2qpEXNa9hXTJU4\nuz8VjRWoOIaHupH+/vY4oApKEfQA71mFIqJB8MGFVE/MuleFy59ZVKB0udX1XtYd\nxKOKJIkfUR1t4C4ne6ifqFjD/nY4vENUt0Bvr9gpUDffGq7EScc=\n=edjs\n-----END PGP SIGNATURE-----",
        "payload": "tree 38aee9b239086699bf7fa716c7262787b6381abe\nparent e1a13f12e1ddd93d34a10f5f1a642794063c74f3\nparent 057750c09d0a8331c33966d2cc2285ef82f08af8\nauthor fanquake <fanquake@gmail.com> 1625041122 +0800\ncommitter fanquake <fanquake@gmail.com> 1625041399 +0800\n\nMerge bitcoin/bitcoin#22353: ci: Upgrading pip version in macos environment\n\n057750c09d0a8331c33966d2cc2285ef82f08af8 ci: Upgrading pip version in macos environment (Tushar Singla)\n\nPull request description:\n\n  During each CI run, in macos native environment, python packages lief and zmq are rebuilt everytime which wastes a lot of resources and time and fixes #22206. The latest version of pip directly fetches pre-built binaries. Through this commit pip version is upgraded in macos environment before installation of these packages.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 057750c09d0a8331c33966d2cc2285ef82f08af8\n\nTree-SHA512: e61d02e46c8fe6a89119014d025a26aba090f9507d725315680893290f5bbc20a375ef408c71fa8db2f485b44ec91cfa0c140198ca44a9d3e0a57055b6bb9582\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc20abab03d71a982d6fe9c47155834b256ab17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc20abab03d71a982d6fe9c47155834b256ab17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc20abab03d71a982d6fe9c47155834b256ab17/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a13f12e1ddd93d34a10f5f1a642794063c74f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a13f12e1ddd93d34a10f5f1a642794063c74f3"
      },
      {
        "sha": "057750c09d0a8331c33966d2cc2285ef82f08af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/057750c09d0a8331c33966d2cc2285ef82f08af8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/057750c09d0a8331c33966d2cc2285ef82f08af8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "906e4aae60281272f07d1c61f2c450e82c09dde7",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc20abab03d71a982d6fe9c47155834b256ab17/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc20abab03d71a982d6fe9c47155834b256ab17/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=3fc20abab03d71a982d6fe9c47155834b256ab17",
        "patch": "@@ -11,6 +11,7 @@ if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n fi\n \n if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+  sudo -H pip3 install --upgrade pip\n   IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n fi\n "
      }
    ]
  },
  {
    "sha": "30450a1bd5d278e285f50a7e4cfc755545960e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDQ1MGExYmQ1ZDI3OGUyODVmNTBhN2U0Y2ZjNzU1NTQ1OTYwZTky",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-06-30T09:58:58Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-06-30T09:59:49Z"
      },
      "message": "Do not clone qa-assets git repository if not necessary",
      "tree": {
        "sha": "c0ab2894c63b451e51ac0a13488a647d6aa71b93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ab2894c63b451e51ac0a13488a647d6aa71b93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30450a1bd5d278e285f50a7e4cfc755545960e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30450a1bd5d278e285f50a7e4cfc755545960e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30450a1bd5d278e285f50a7e4cfc755545960e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30450a1bd5d278e285f50a7e4cfc755545960e92/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fc20abab03d71a982d6fe9c47155834b256ab17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc20abab03d71a982d6fe9c47155834b256ab17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc20abab03d71a982d6fe9c47155834b256ab17"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2079d2ed2be7d6f409d55b3d925e08633fb86d55",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30450a1bd5d278e285f50a7e4cfc755545960e92/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30450a1bd5d278e285f50a7e4cfc755545960e92/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=30450a1bd5d278e285f50a7e4cfc755545960e92",
        "patch": "@@ -84,11 +84,14 @@ fi\n DOCKER_EXEC echo \"Free disk space:\"\n DOCKER_EXEC df -h\n \n-if [ ! -d ${DIR_QA_ASSETS} ]; then\n-  DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n+  if [ ! -d ${DIR_QA_ASSETS} ]; then\n+    DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+  fi\n+\n+  export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+  export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n fi\n-export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n-export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n "
      }
    ]
  },
  {
    "sha": "2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjIzYWQyYzQwMzFjNDNjNjgyMGVhZDZhZjdhZTdjYzZkNDI3NWFk",
    "commit": {
      "author": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2021-06-30T17:27:31Z"
      },
      "committer": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2021-06-30T17:27:31Z"
      },
      "message": "qt: allow prompt icon to be colorized",
      "tree": {
        "sha": "e3ed431970cfee39629cf4cd460c8ac57eeef69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3ed431970cfee39629cf4cd460c8ac57eeef69d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad/comments",
    "author": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e83e74e7fca7e1adee2174fee447a86af9bc68d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e83e74e7fca7e1adee2174fee447a86af9bc68d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e83e74e7fca7e1adee2174fee447a86af9bc68d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5827ea17a09913eaaec8a2c6c2b4624626173313",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
        "patch": "@@ -508,6 +508,8 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     //: Secondary shortcut to decrease the RPC console font size.\n     GUIUtil::AddButtonShortcut(ui->fontSmallerButton, tr(\"Ctrl+_\"));\n \n+    ui->promptIcon->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/prompticon\")));\n+\n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n     ui->lineEdit->setMaxLength(16 * 1024 * 1024);"
      }
    ]
  },
  {
    "sha": "722776c0fd218cc41ccb741453c58190c71e64f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjI3NzZjMGZkMjE4Y2M0MWNjYjc0MTQ1M2M1ODE5MGM3MWU2NGY5",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-06-30T20:39:03Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-06-30T21:58:40Z"
      },
      "message": "Merge bitcoin/bitcoin#21329: descriptor wallet: Cache last hardened xpub and use in normalized descriptors\n\ne6cf0ed92de31a5ac35a271b0da8f0a8364d1175 wallet, rpc: listdescriptors does not need unlocked (Andrew Chow)\n3280704886b60644d103a5eb310691c003a39328 Pass in DescriptorCache to ToNormalizedString (Andrew Chow)\n7a26ff10c2f2e139fbc63e2f37fb33ea4efae088 Change DescriptorImpl::ToStringHelper to use an enum (Andrew Chow)\n75530c93a83f3e94bcb78b6aa463c5570c1e737e Remove priv option for ToNormalizedString (Andrew Chow)\n74fede3b8ba69e2cc82c617cdf406ab79df58825 wallet: Upgrade existing descriptor caches (Andrew Chow)\n432ba9e5434da90d2cf680f23e8c7b7164c9f945 wallet: Store last hardened xpub cache (Andrew Chow)\nd87b544b834077f102724415e0fada6ee8b2def2 descriptors: Cache last hardened xpub (Andrew Chow)\ncacc3910989c4f3d7afa530dbab042461426abce Move DescriptorCache writing to WalletBatch (Andrew Chow)\n0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59 Refactor Cache merging and writing (Andrew Chow)\n976b53b085d681645fd3a008fe382de85647e29f Revert \"Cache parent xpub inside of BIP32PubkeyProvider\" (Andrew Chow)\n\nPull request description:\n\n  Currently fetching a normalized descriptor requires the wallet to be unlocked as it needs the private keys to derive the last hardened xpub. This is not very user friendly as normalized descriptors shouldn't require and don't involve the private keys except for derivation. We solve this problem by caching the last hardened xpub (which has to be derived at some point when generating the address pool).\n\n  However the last hardened xpub was not already being cached. We only cached the immediate parent xpub and derived child keys. For example, with a descriptor derivation path of `/84'/0'/0'/0/*`, the parent xpub that is cached is `m/84'/0'/0'/0`, and the child keys of `m/84'/0'/0'/0/i` (note that child keys would not be cached in this case). This parent xpub is not suitable for the normalized descriptor form as we want the key at `m/84'/0'/0'`. So this PR adds another field to `DescriptorCache` to cache the last hardened xpub so that we can use them for normalized descriptors.\n\n  Since `DescriptorCache` is changing, existing descriptor wallets need to be upgraded to use this new cache. The upgrade will occur in the background either at loading time (if the wallet is not encrypted) or at unlocking time in the same manner that `UpgradeKeyMetadata` operates. It will use a new wallet flag `WALLET_FLAG_LAST_HARDENED_XPUB_CACHED` to indicate whether the descriptor wallet has the last hardened xpub cache.\n\n  Lastly `listdescriptors` will not require the wallet to be locked and `getaddressinfo`'s `parent_desc` will always be output (assuming the upgrade has occurred).\n\nACKs for top commit:\n  fjahr:\n    tACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\n  S3RK:\n    reACK e6cf0ed\n  jonatack:\n    Semi ACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175 reviewed, debug-built and ran unit tests and some of the descriptor functional tests at each commit. I'm not very familiar with this code and it could be clearer to the uninitiated IMHO, so I'm not confident enough to give a full ACK. Various minor suggestions follow, most of them for readability, feel free to pick and choose.\n  meshcollider:\n    Code review + functional test run ACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\n\nTree-SHA512: ac27aade8644525cd65bfcaf27ff32afb974085b1451faf4ff68c6671a690bd6a41d4f39a33cbf461ae0fbe85995c0a4c08dbd36171da1c1d2a1d00053ad298d",
      "tree": {
        "sha": "deebb618d739ccb7e413021ceaf3316bac87cff8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deebb618d739ccb7e413021ceaf3316bac87cff8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/722776c0fd218cc41ccb741453c58190c71e64f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAmDc6RAACgkQ0wARbhyH\nWj2qQg/6A/neEJlWd0e6t1wcvEEV8WPUTAqY/0o7/OEYp0gdDwyGJcGgqCkhxjkQ\n2cyXa9/yzUXNu8u4U9Cqy8yYi/Pn2MqJ3CUGMMa4Pag/NAtpJAMRwKGDrUOijPmO\ngvLDQ8Jcl1wNkpQrI8V1m01pvRuU+1mU03DqkIKqdO2wggIdt0X6d7PAgP9PZdTI\nMF/vmJa4gA4t/0DtEaZ9MiA8hKiW3KgzGrlkyUwb3QMbCYRerEc/VCf9eBo07qyz\nD7ixpJihGC//F1W67albN1x0kWm+8FDuxW6htq9Oz8auTpU65vsjWyL2ip3qbBOz\nxN7RpMUj82+YXofsrtDy5kyEPuzGB+9rgiMdU2CU38Mjz5DaikU3HgDK706xGzwI\nsti/7yN729kyIc5WrqBaixqRyEFAv+RSxP1YltRsQ22kJdX5h83E2tgx1x3MrEch\nec0FA8j+arMOgqkoHLChjHne8RQrBB9X7dk2cgKvrUwuFce81ycdQ1AT45/NU+NR\nmngwG7ch34HXjwajXrxXYZf3CRf8/GKpsZhvDBkoc01kJHD5Gbxo5Y8dJuOFI5xE\nqhSoGNifinp0NNcvGEgckfZm6fT9rsW9hRaRd+RtPpLzGR5lSn0wTcQbX9PuR9L2\nLzLzEJ8ptIu56fOPLZTYGrBhqCyxUDV3/gKQkVyrnczulruzYws=\n=14Ds\n-----END PGP SIGNATURE-----",
        "payload": "tree deebb618d739ccb7e413021ceaf3316bac87cff8\nparent 3fc20abab03d71a982d6fe9c47155834b256ab17\nparent e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1625085543 +1200\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1625090320 +1200\n\nMerge bitcoin/bitcoin#21329: descriptor wallet: Cache last hardened xpub and use in normalized descriptors\n\ne6cf0ed92de31a5ac35a271b0da8f0a8364d1175 wallet, rpc: listdescriptors does not need unlocked (Andrew Chow)\n3280704886b60644d103a5eb310691c003a39328 Pass in DescriptorCache to ToNormalizedString (Andrew Chow)\n7a26ff10c2f2e139fbc63e2f37fb33ea4efae088 Change DescriptorImpl::ToStringHelper to use an enum (Andrew Chow)\n75530c93a83f3e94bcb78b6aa463c5570c1e737e Remove priv option for ToNormalizedString (Andrew Chow)\n74fede3b8ba69e2cc82c617cdf406ab79df58825 wallet: Upgrade existing descriptor caches (Andrew Chow)\n432ba9e5434da90d2cf680f23e8c7b7164c9f945 wallet: Store last hardened xpub cache (Andrew Chow)\nd87b544b834077f102724415e0fada6ee8b2def2 descriptors: Cache last hardened xpub (Andrew Chow)\ncacc3910989c4f3d7afa530dbab042461426abce Move DescriptorCache writing to WalletBatch (Andrew Chow)\n0b4c8ef75cd03c8f0a8cfadb47e0fbcabe3c5e59 Refactor Cache merging and writing (Andrew Chow)\n976b53b085d681645fd3a008fe382de85647e29f Revert \"Cache parent xpub inside of BIP32PubkeyProvider\" (Andrew Chow)\n\nPull request description:\n\n  Currently fetching a normalized descriptor requires the wallet to be unlocked as it needs the private keys to derive the last hardened xpub. This is not very user friendly as normalized descriptors shouldn't require and don't involve the private keys except for derivation. We solve this problem by caching the last hardened xpub (which has to be derived at some point when generating the address pool).\n\n  However the last hardened xpub was not already being cached. We only cached the immediate parent xpub and derived child keys. For example, with a descriptor derivation path of `/84'/0'/0'/0/*`, the parent xpub that is cached is `m/84'/0'/0'/0`, and the child keys of `m/84'/0'/0'/0/i` (note that child keys would not be cached in this case). This parent xpub is not suitable for the normalized descriptor form as we want the key at `m/84'/0'/0'`. So this PR adds another field to `DescriptorCache` to cache the last hardened xpub so that we can use them for normalized descriptors.\n\n  Since `DescriptorCache` is changing, existing descriptor wallets need to be upgraded to use this new cache. The upgrade will occur in the background either at loading time (if the wallet is not encrypted) or at unlocking time in the same manner that `UpgradeKeyMetadata` operates. It will use a new wallet flag `WALLET_FLAG_LAST_HARDENED_XPUB_CACHED` to indicate whether the descriptor wallet has the last hardened xpub cache.\n\n  Lastly `listdescriptors` will not require the wallet to be locked and `getaddressinfo`'s `parent_desc` will always be output (assuming the upgrade has occurred).\n\nACKs for top commit:\n  fjahr:\n    tACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\n  S3RK:\n    reACK e6cf0ed\n  jonatack:\n    Semi ACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175 reviewed, debug-built and ran unit tests and some of the descriptor functional tests at each commit. I'm not very familiar with this code and it could be clearer to the uninitiated IMHO, so I'm not confident enough to give a full ACK. Various minor suggestions follow, most of them for readability, feel free to pick and choose.\n  meshcollider:\n    Code review + functional test run ACK e6cf0ed92de31a5ac35a271b0da8f0a8364d1175\n\nTree-SHA512: ac27aade8644525cd65bfcaf27ff32afb974085b1451faf4ff68c6671a690bd6a41d4f39a33cbf461ae0fbe85995c0a4c08dbd36171da1c1d2a1d00053ad298d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722776c0fd218cc41ccb741453c58190c71e64f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/722776c0fd218cc41ccb741453c58190c71e64f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722776c0fd218cc41ccb741453c58190c71e64f9/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fc20abab03d71a982d6fe9c47155834b256ab17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc20abab03d71a982d6fe9c47155834b256ab17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc20abab03d71a982d6fe9c47155834b256ab17"
      },
      {
        "sha": "e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6cf0ed92de31a5ac35a271b0da8f0a8364d1175"
      }
    ],
    "stats": {
      "total": 368,
      "additions": 272,
      "deletions": 96
    },
    "files": [
      {
        "sha": "682b55742a52ea132361a89905fbbe82b37c80f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 131,
        "deletions": 52,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -166,7 +166,7 @@ struct PubkeyProvider\n      *  write_cache is the cache to write keys to (if not nullptr)\n      *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n      */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -199,7 +199,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub, priv)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub, cache)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -245,7 +245,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n \n public:\n     ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         key = m_pubkey;\n         info.path.clear();\n@@ -263,9 +263,8 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n-        if (priv) return ToPrivateString(arg, ret);\n         ret = ToString();\n         return true;\n     }\n@@ -288,9 +287,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n-    // Cache of the parent of the final derived pubkeys.\n-    // Primarily useful for situations when no read_cache is provided\n-    CExtPubKey m_cached_xpub;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n@@ -305,11 +301,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n     // Derives the last xprv\n-    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv) const\n+    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv, CExtKey& last_hardened) const\n     {\n         if (!GetExtKey(arg, xprv)) return false;\n         for (auto entry : m_path) {\n             xprv.Derive(xprv, entry);\n+            if (entry >> 31) {\n+                last_hardened = xprv;\n+            }\n         }\n         return true;\n     }\n@@ -327,7 +326,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         // Info of parent of the to be derived pubkey\n         KeyOriginInfo parent_info;\n@@ -343,6 +342,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         // Derive keys or fetch them from cache\n         CExtPubKey final_extkey = m_root_extkey;\n         CExtPubKey parent_extkey = m_root_extkey;\n+        CExtPubKey last_hardened_extkey;\n         bool der = true;\n         if (read_cache) {\n             if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) {\n@@ -352,16 +352,17 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 final_extkey = parent_extkey;\n                 if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             }\n-        } else if (m_cached_xpub.pubkey.IsValid() && m_derive != DeriveType::HARDENED) {\n-            parent_extkey = final_extkey = m_cached_xpub;\n-            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n         } else if (IsHardened()) {\n             CExtKey xprv;\n-            if (!GetDerivedExtKey(arg, xprv)) return false;\n+            CExtKey lh_xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n             parent_extkey = xprv.Neuter();\n             if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n             if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n             final_extkey = xprv.Neuter();\n+            if (lh_xprv.key.IsValid()) {\n+                last_hardened_extkey = lh_xprv.Neuter();\n+            }\n         } else {\n             for (auto entry : m_path) {\n                 der = parent_extkey.Derive(parent_extkey, entry);\n@@ -376,15 +377,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         final_info_out = final_info_out_tmp;\n         key_out = final_extkey.pubkey;\n \n-        // We rely on the consumer to check that m_derive isn't HARDENED as above\n-        // But we can't have already cached something in case we read something from the cache\n-        // and parent_extkey isn't actually the parent.\n-        if (!m_cached_xpub.pubkey.IsValid()) m_cached_xpub = parent_extkey;\n-\n         if (write_cache) {\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {\n                 write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+                // Cache last hardened xpub if we have it\n+                if (last_hardened_extkey.pubkey.IsValid()) {\n+                    write_cache->CacheLastHardenedExtPubKey(m_expr_index, last_hardened_extkey);\n+                }\n             } else if (final_info_out.path.size() > 0) {\n                 write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             }\n@@ -412,11 +412,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -429,33 +428,42 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Either no derivation or all unhardened derivation\n         if (i == -1) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n-        // Derive the xpub at the last hardened step\n-        CExtKey xprv;\n-        if (!GetExtKey(arg, xprv)) return false;\n+        // Get the path to the last hardened stup\n         KeyOriginInfo origin;\n         int k = 0;\n         for (; k <= i; ++k) {\n-            // Derive\n-            xprv.Derive(xprv, m_path.at(k));\n             // Add to the path\n             origin.path.push_back(m_path.at(k));\n-            // First derivation element, get the fingerprint for origin\n-            if (k == 0) {\n-                std::copy(xprv.vchFingerprint, xprv.vchFingerprint + 4, origin.fingerprint);\n-            }\n         }\n         // Build the remaining path\n         KeyPath end_path;\n         for (; k < (int)m_path.size(); ++k) {\n             end_path.push_back(m_path.at(k));\n         }\n+        // Get the fingerprint\n+        CKeyID id = m_root_extkey.pubkey.GetID();\n+        std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+\n+        CExtPubKey xpub;\n+        CExtKey lh_xprv;\n+        // If we have the cache, just get the parent xpub\n+        if (cache != nullptr) {\n+            cache->GetCachedLastHardenedExtPubKey(m_expr_index, xpub);\n+        }\n+        if (!xpub.pubkey.IsValid()) {\n+            // Cache miss, or nor cache, or need privkey\n+            CExtKey xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n+            xpub = lh_xprv.Neuter();\n+        }\n+        assert(xpub.pubkey.IsValid());\n+\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + (priv ? EncodeExtKey(xprv) : EncodeExtPubKey(xprv.Neuter())) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xpub) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -465,7 +473,8 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n     {\n         CExtKey extkey;\n-        if (!GetDerivedExtKey(arg, extkey)) return false;\n+        CExtKey dummy;\n+        if (!GetDerivedExtKey(arg, extkey, dummy)) return false;\n         if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n         if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n         key = extkey.key;\n@@ -508,6 +517,13 @@ class DescriptorImpl : public Descriptor\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::vector<std::unique_ptr<DescriptorImpl>> scripts, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(std::move(scripts)) {}\n \n+    enum class StringType\n+    {\n+        PUBLIC,\n+        PRIVATE,\n+        NORMALIZED,\n+    };\n+\n     bool IsSolvable() const override\n     {\n         for (const auto& arg : m_subdescriptor_args) {\n@@ -527,37 +543,41 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv, bool normalized) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n         std::string ret = m_name + \"(\" + extra;\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp, priv)) return false;\n-            } else if (priv) {\n-                if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n-            } else {\n-                tmp = pubkey->ToString();\n+            switch (type) {\n+                case StringType::NORMALIZED:\n+                    if (!pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+                    break;\n+                case StringType::PRIVATE:\n+                    if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n             }\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, priv, normalized)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type, cache)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -566,20 +586,20 @@ class DescriptorImpl : public Descriptor\n     std::string ToString() const final\n     {\n         std::string ret;\n-        ToStringHelper(nullptr, ret, false, false);\n+        ToStringHelper(nullptr, ret, StringType::PUBLIC);\n         return AddChecksum(ret);\n     }\n \n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const final\n     {\n-        bool ret = ToStringHelper(&arg, out, true, false);\n+        bool ret = ToStringHelper(&arg, out, StringType::PRIVATE);\n         out = AddChecksum(out);\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, priv, true);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED, cache);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -833,7 +853,7 @@ class TRDescriptor final : public DescriptorImpl\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n         return Vector(GetScriptForDestination(output));\n     }\n-    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const override\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const override\n     {\n         if (m_depths.empty()) return true;\n         std::vector<bool> path;\n@@ -844,7 +864,7 @@ class TRDescriptor final : public DescriptorImpl\n                 path.push_back(false);\n             }\n             std::string tmp;\n-            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n             while (!path.empty() && path.back()) {\n                 if (path.size() > 1) ret += '}';\n@@ -1411,6 +1431,11 @@ void DescriptorCache::CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_i\n     xpubs[der_index] = xpub;\n }\n \n+void DescriptorCache::CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub)\n+{\n+    m_last_hardened_xpubs[key_exp_pos] = xpub;\n+}\n+\n bool DescriptorCache::GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n {\n     const auto& it = m_parent_xpubs.find(key_exp_pos);\n@@ -1429,6 +1454,55 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+bool DescriptorCache::GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n+{\n+    const auto& it = m_last_hardened_xpubs.find(key_exp_pos);\n+    if (it == m_last_hardened_xpubs.end()) return false;\n+    xpub = it->second;\n+    return true;\n+}\n+\n+DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n+{\n+    DescriptorCache diff;\n+    for (const auto& parent_xpub_pair : other.GetCachedParentExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+            if (xpub != parent_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+            }\n+            continue;\n+        }\n+        CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        diff.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+    }\n+    for (const auto& derived_xpub_map_pair : other.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            CExtPubKey xpub;\n+            if (GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                if (xpub != derived_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                }\n+                continue;\n+            }\n+            CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+        }\n+    }\n+    for (const auto& lh_xpub_pair : other.GetCachedLastHardenedExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedLastHardenedExtPubKey(lh_xpub_pair.first, xpub)) {\n+            if (xpub != lh_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached last hardened xpub does not match already cached last hardened xpub\");\n+            }\n+            continue;\n+        }\n+        CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+        diff.CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+    }\n+    return diff;\n+}\n+\n const ExtPubKeyMap DescriptorCache::GetCachedParentExtPubKeys() const\n {\n     return m_parent_xpubs;\n@@ -1438,3 +1512,8 @@ const std::unordered_map<uint32_t, ExtPubKeyMap> DescriptorCache::GetCachedDeriv\n {\n     return m_derived_xpubs;\n }\n+\n+const ExtPubKeyMap DescriptorCache::GetCachedLastHardenedExtPubKeys() const\n+{\n+    return m_last_hardened_xpubs;\n+}"
      },
      {
        "sha": "ecd7c4eea5f10efd9eac0bdc035ebbf2ab3df822",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -22,6 +22,8 @@ class DescriptorCache {\n     std::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n     /** Map key expression index -> parent xpub */\n     ExtPubKeyMap m_parent_xpubs;\n+    /** Map key expression index -> last hardened xpub */\n+    ExtPubKeyMap m_last_hardened_xpubs;\n \n public:\n     /** Cache a parent xpub\n@@ -50,11 +52,30 @@ class DescriptorCache {\n      * @param[in] xpub The CExtPubKey to get from cache\n      */\n     bool GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const;\n+    /** Cache a last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub);\n+    /** Retrieve a cached last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const;\n \n     /** Retrieve all cached parent xpubs */\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+    /** Retrieve all cached last hardened xpubs */\n+    const ExtPubKeyMap GetCachedLastHardenedExtPubKeys() const;\n+\n+    /** Combine another DescriptorCache into this one.\n+     * Returns a cache containing the items from the other cache unknown to current cache\n+     */\n+    DescriptorCache MergeAndDiff(const DescriptorCache& other);\n };\n \n /** \\brief Interface for parsed descriptor objects.\n@@ -94,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "8553f80a1700d38254c11fd3424cb736ce2d7467",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -124,14 +124,10 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n \n     // Check that private can produce the normalized descriptors\n     std::string norm1;\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, false));\n+    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1));\n     BOOST_CHECK(EqualDescriptor(norm1, norm_pub));\n-    BOOST_CHECK(parse_priv->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n-    BOOST_CHECK(parse_pub->ToNormalizedString(keys_priv, norm1, true));\n-    BOOST_CHECK(EqualDescriptor(norm1, norm_prv));\n \n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);"
      },
      {
        "sha": "ead9e4cefb0357f4811d8cc29c307dd79a78cd31",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -1787,8 +1787,6 @@ RPCHelpMan listdescriptors()\n         throw JSONRPCError(RPC_WALLET_ERROR, \"listdescriptors is not available for non-descriptor wallets\");\n     }\n \n-    EnsureWalletIsUnlocked(*wallet);\n-\n     LOCK(wallet->cs_wallet);\n \n     UniValue descriptors(UniValue::VARR);\n@@ -1802,7 +1800,7 @@ RPCHelpMan listdescriptors()\n         LOCK(desc_spk_man->cs_desc_man);\n         const auto& wallet_descriptor = desc_spk_man->GetWalletDescriptor();\n         std::string descriptor;\n-        if (!desc_spk_man->GetDescriptorString(descriptor, false)) {\n+        if (!desc_spk_man->GetDescriptorString(descriptor)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Can't get normalized descriptor string.\");\n         }\n         spk.pushKV(\"desc\", descriptor);"
      },
      {
        "sha": "f1d51174158c052f552e05fb2c02ac1fb16072c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -3872,7 +3872,7 @@ RPCHelpMan getaddressinfo()\n     DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n     if (desc_spk_man) {\n         std::string desc_str;\n-        if (desc_spk_man->GetDescriptorString(desc_str, false)) {\n+        if (desc_spk_man->GetDescriptorString(desc_str)) {\n             ret.pushKV(\"parent_desc\", desc_str);\n         }\n     }"
      },
      {
        "sha": "2a3880f2d1035f9a22e1e52d9962acdf8625d4da",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 32,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -1805,34 +1805,10 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n             }\n             m_map_pubkeys[pubkey] = i;\n         }\n-        // Write the cache\n-        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n-            CExtPubKey xpub;\n-            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n-                if (xpub != parent_xpub_pair.second) {\n-                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n-                }\n-                continue;\n-            }\n-            if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n-                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-            }\n-            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n-        }\n-        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n-            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n-                CExtPubKey xpub;\n-                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n-                    if (xpub != derived_xpub_pair.second) {\n-                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n-                    }\n-                    continue;\n-                }\n-                if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n-                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n-                }\n-                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n-            }\n+        // Merge and write the cache\n+        DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+        if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n         }\n         m_max_cached_index++;\n     }\n@@ -2290,15 +2266,41 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n     return script_pub_keys;\n }\n \n-bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, bool priv) const\n+bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out) const\n {\n     LOCK(cs_desc_man);\n-    if (m_storage.IsLocked()) {\n-        return false;\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, &m_wallet_descriptor.cache);\n+}\n+\n+void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n+{\n+    LOCK(cs_desc_man);\n+    if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n     }\n \n+    // Skip if we have the last hardened xpub cache\n+    if (m_wallet_descriptor.cache.GetCachedLastHardenedExtPubKeys().size() > 0) {\n+        return;\n+    }\n+\n+    // Expand the descriptor\n     FlatSigningProvider provider;\n     provider.keys = GetKeys();\n+    FlatSigningProvider out_keys;\n+    std::vector<CScript> scripts_temp;\n+    DescriptorCache temp_cache;\n+    if (!m_wallet_descriptor.descriptor->Expand(0, provider, scripts_temp, out_keys, &temp_cache)){\n+        throw std::runtime_error(\"Unable to expand descriptor\");\n+    }\n \n-    return m_wallet_descriptor.descriptor->ToNormalizedString(provider, out, priv);\n+    // Cache the last hardened xpubs\n+    DescriptorCache diff = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+    if (!WalletBatch(m_storage.GetDatabase()).WriteDescriptorCacheItems(GetID(), diff)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+    }\n }"
      },
      {
        "sha": "3b78d92dff187046cb7b51617d5ff4bd388afdef",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -630,7 +630,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     const WalletDescriptor GetWalletDescriptor() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n     const std::vector<CScript> GetScriptPubKeys() const;\n \n-    bool GetDescriptorString(std::string& out, bool priv) const;\n+    bool GetDescriptorString(std::string& out) const;\n+\n+    void UpgradeDescriptorCache();\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "36807cbeeb477b10a84be2a120c9ff2a4b9e5deb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -374,6 +374,19 @@ void CWallet::UpgradeKeyMetadata()\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n+void CWallet::UpgradeDescriptorCache()\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) || IsLocked() || IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n+        return;\n+    }\n+\n+    for (ScriptPubKeyMan* spkm : GetAllScriptPubKeyMans()) {\n+        DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        desc_spkm->UpgradeDescriptorCache();\n+    }\n+    SetWalletFlag(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n@@ -390,6 +403,8 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n             if (Unlock(_vMasterKey, accept_no_keys)) {\n                 // Now that we've unlocked, upgrade the key metadata\n                 UpgradeKeyMetadata();\n+                // Now that we've unlocked, upgrade the descriptor cache\n+                UpgradeDescriptorCache();\n                 return true;\n             }\n         }"
      },
      {
        "sha": "552fa859154c1378837bbfbb457c717462881120",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -117,6 +117,7 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n+    |   WALLET_FLAG_LAST_HARDENED_XPUB_CACHED\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n     |   WALLET_FLAG_DESCRIPTORS\n     |   WALLET_FLAG_EXTERNAL_SIGNER;\n@@ -128,6 +129,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"avoid_reuse\", WALLET_FLAG_AVOID_REUSE},\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n+    {\"last_hardened_xpub_cached\", WALLET_FLAG_LAST_HARDENED_XPUB_CACHED},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n     {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n     {\"external_signer\", WALLET_FLAG_EXTERNAL_SIGNER}\n@@ -476,6 +478,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    //! Upgrade DescriptorCaches\n+    void UpgradeDescriptorCache() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n     //! Adds a destination data tuple to the store, without saving it to disk"
      },
      {
        "sha": "748cabe290f8b3b13aabf96e78db8b5051cc457a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -52,6 +52,7 @@ const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n+const std::string WALLETDESCRIPTORLHCACHE{\"walletdescriptorlhcache\"};\n const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n@@ -248,6 +249,35 @@ bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint2\n     return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n }\n \n+bool WalletBatch::WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index)\n+{\n+    std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+    xpub.Encode(ser_xpub.data());\n+    return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORLHCACHE, desc_id), key_exp_index), ser_xpub);\n+}\n+\n+bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache)\n+{\n+    for (const auto& parent_xpub_pair : cache.GetCachedParentExtPubKeys()) {\n+        if (!WriteDescriptorParentCache(parent_xpub_pair.second, desc_id, parent_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n+    for (const auto& derived_xpub_map_pair : cache.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            if (!WriteDescriptorDerivedCache(derived_xpub_pair.second, desc_id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n+                return false;\n+            }\n+        }\n+    }\n+    for (const auto& lh_xpub_pair : cache.GetCachedLastHardenedExtPubKeys()) {\n+        if (!WriteDescriptorLastHardenedCache(lh_xpub_pair.second, desc_id, lh_xpub_pair.first)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};\n@@ -602,6 +632,17 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             } else {\n                 wss.m_descriptor_caches[desc_id].CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n             }\n+        } else if (strType == DBKeys::WALLETDESCRIPTORLHCACHE) {\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            wss.m_descriptor_caches[desc_id].CacheLastHardenedExtPubKey(key_exp_index, xpub);\n         } else if (strType == DBKeys::WALLETDESCRIPTORKEY) {\n             uint256 desc_id;\n             CPubKey pubkey;\n@@ -843,6 +884,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Upgrade all of the descriptor caches to cache the last hardened xpub\n+    // This operation is not atomic, but if it fails, only new entries are added so it is backwards compatible\n+    try {\n+        pwallet->UpgradeDescriptorCache();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     // Set the inactive chain\n     if (wss.m_hd_chains.size() > 0) {\n         LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "e7c6b61891d3ff4accf55230be7e4137a1ecdeab",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -246,6 +246,8 @@ class WalletBatch\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n+    bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      },
      {
        "sha": "c75e1759bc4280c17912d79cabfde350918f3d98",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -43,6 +43,9 @@ enum WalletFlags : uint64_t {\n     // Indicates that the metadata has already been upgraded to contain key origins\n     WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n \n+    // Indicates that the descriptor cache has been upgraded to cache last hardened xpubs\n+    WALLET_FLAG_LAST_HARDENED_XPUB_CACHED = (1ULL << 2),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n "
      },
      {
        "sha": "bf53c998551e4a08719a6eed41d23d74270b4908",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722776c0fd218cc41ccb741453c58190c71e64f9/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722776c0fd218cc41ccb741453c58190c71e64f9/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=722776c0fd218cc41ccb741453c58190c71e64f9",
        "patch": "@@ -72,6 +72,10 @@ def run_test(self):\n         }\n         assert_equal(expected, wallet.listdescriptors())\n \n+        self.log.info(\"Test listdescriptors with encrypted wallet\")\n+        wallet.encryptwallet(\"pass\")\n+        assert_equal(expected, wallet.listdescriptors())\n+\n         self.log.info('Test non-active non-range combo descriptor')\n         node.createwallet(wallet_name='w4', blank=True, descriptors=True)\n         wallet = node.get_wallet_rpc('w4')"
      }
    ]
  },
  {
    "sha": "c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGRkZWU2NGM3ZjgwZWVlMDVhOTUxMTZlZjFiMWRjOGE3NjAxMTgz",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-06-22T17:08:55Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-06-30T22:47:08Z"
      },
      "message": "test: Add test for replacement relay fee check",
      "tree": {
        "sha": "6286b7d772e125a9d0ee9c9cdc282c0133d5b21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6286b7d772e125a9d0ee9c9cdc282c0133d5b21d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ddee64c7f80eee05a95116ef1b1dc8a7601183/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f5c38333fd2ec03fd1299a1bce507b25753f45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f5c38333fd2ec03fd1299a1bce507b25753f45"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed944274e3bd85a785cccae08dbc2e52564ef253",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4ddee64c7f80eee05a95116ef1b1dc8a7601183/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4ddee64c7f80eee05a95116ef1b1dc8a7601183/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
        "patch": "@@ -122,6 +122,9 @@ def run_test(self):\n         self.log.info(\"Running test no inherited signaling...\")\n         self.test_no_inherited_signaling()\n \n+        self.log.info(\"Running test replacement relay fee...\")\n+        self.test_replacement_relay_fee()\n+\n         self.log.info(\"Passed\")\n \n     def test_simple_doublespend(self):\n@@ -627,6 +630,15 @@ def test_no_inherited_signaling(self):\n         assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n+    def test_replacement_relay_fee(self):\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=77, num=1)\n+        tx = wallet.send_self_transfer(from_node=self.nodes[0])['tx']\n+\n+        # Higher fee, higher feerate, different txid, but the replacement does not provide a relay\n+        # fee conforming to node's `incrementalrelayfee` policy of 1000 sat per KB.\n+        tx.vout[0].nValue -= 1\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "045bb06ebd55e826b77594f835c4b67f7dab2994",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDViYjA2ZWJkNTVlODI2Yjc3NTk0ZjgzNWM0YjY3ZjdkYWIyOTk0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T01:42:42Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T02:06:56Z"
      },
      "message": "Merge bitcoin/bitcoin#19651: wallet: importdescriptors update existing\n\n3efaf83c75cd8dc2fa084537b8ed6715fb58c04d wallet: deactivate descriptor (S3RK)\n6737d9655bcf527afbd85d610d805a2d0fd28c4f test: wallet importdescriptors update existing (S3RK)\n586f1d53d60880ea2873d860f95e3390016620d1 wallet: maintain SPK consistency on internal flag change (S3RK)\nf1b7db14748d9ee04735b4968366d33bc89aea23 wallet: don't mute exceptions in importdescriptors (S3RK)\nbf68ebc1cd555f791103f81adc9111e0e55c8003 wallet: allow to import same descriptor twice (S3RK)\n\nPull request description:\n\n  Rationale: allow updating existing descriptors with `importdescriptors` command.\n\n  Currently if you run same `importdescriptors` command twice with a descriptor containing private key you will get very confusing error \u2014\u00a0`Missing required fields`. What happens is that Wallet tries to write imported private key to the disk, but it exists already so we get `DB_KEYEXIST (-30995)` from BerkelyDB. Please note, that we set `DB_NOOVERWRITE` (I guess not to lose some keys accidentally). The exception is caught in `catch (...)` in rpcdump.cpp with a generic error.\n\n  With this PR if a descriptor is already present than we will update its activeness, internalness, label, range and next_index.\n  For the range only expansion is allowed (range start can only decrease, range end increase).\n\nACKs for top commit:\n  achow101:\n    re-ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d\n  meshcollider:\n    Code review ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d\n  jonatack:\n    Light ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d per `git range-diff a000cb0 5d96704 3efaf83` and as a sanity check, re-debug-built on debian with gcc 10.2.1 and clang 11, ran wallet_importdescriptors.py\n\nTree-SHA512: 122c4b621d64ec8a3b625f3aed9f01a2b5cbaf2029ad0325b5ff38d67fff5cd35324335fabe2dd5169548b01b267c81be6ae0f5c834342f3d5f6eeed515c4843",
      "tree": {
        "sha": "75dcba7bb11e0da7f6d8e80498ae8c75abf8c15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75dcba7bb11e0da7f6d8e80498ae8c75abf8c15a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/045bb06ebd55e826b77594f835c4b67f7dab2994",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDdI0AACgkQLuufXMCV\nJsFudA//SHdxY02OHMHEJDXX0gmxLeGz7Uv+jhUYPnrCTF5Z6xnCoKBpC4JmJapx\ns+qYP0T8BtdLzN3qg9ekwXIrKEkTgWskdURK/bAUKa8qO/f1cLZfRnqaJ71ueKO9\nVQFohnWD2HtvL4UYGnhGoArLM9s9SoGTEsE7fay2IOh59UNZPFBPmrolAZmK7EOF\nWDtl+PXnq6YwmcIWzHZ9EpuOUCvfnGBN5eD2L3xIJWpUoZW64tCNclwkiCd98UJB\nhI+rTLeaDG5W9QLhF2uP2vKuxAruAVZJKKj0kRRtzHuIV/NXsgDmTzWev5yoSFvP\nJMxTdBJeZK8shuO8f1jmSV/wAjXafzx1sneJxhf5s4p6Mktb4E4JZ5z+n20L39Xu\nsuzLTmRxm0BywWdNVUijqIoyGVT6CWhShHcqdGU0b+muvtA87pZU3okzaaHiCPP9\nVBd456JAt8TMh1X9gq9AoBjTW5zE5T2dWlTVk73iB/aBZMFXA2c6W8e1aASHzBkg\nxRwEWc1r1kNDaHtEAS63WVv3ItmLk85z5vYlS9lqkDvIpjRpWR+EzjpyEqlCgkhN\nT+ktcVcnR8UJyLukAFwlEC8SqnohlB8518VV62q82jCCXMHSJvGlgZo7IbORyWuF\nI2VXcPrZn2ekkDNmdPJTc50pddu1V5mRoe9Fj3qkQrGH5Pi+3h0=\n=yZA3\n-----END PGP SIGNATURE-----",
        "payload": "tree 75dcba7bb11e0da7f6d8e80498ae8c75abf8c15a\nparent 722776c0fd218cc41ccb741453c58190c71e64f9\nparent 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d\nauthor fanquake <fanquake@gmail.com> 1625103762 +0800\ncommitter fanquake <fanquake@gmail.com> 1625105216 +0800\n\nMerge bitcoin/bitcoin#19651: wallet: importdescriptors update existing\n\n3efaf83c75cd8dc2fa084537b8ed6715fb58c04d wallet: deactivate descriptor (S3RK)\n6737d9655bcf527afbd85d610d805a2d0fd28c4f test: wallet importdescriptors update existing (S3RK)\n586f1d53d60880ea2873d860f95e3390016620d1 wallet: maintain SPK consistency on internal flag change (S3RK)\nf1b7db14748d9ee04735b4968366d33bc89aea23 wallet: don't mute exceptions in importdescriptors (S3RK)\nbf68ebc1cd555f791103f81adc9111e0e55c8003 wallet: allow to import same descriptor twice (S3RK)\n\nPull request description:\n\n  Rationale: allow updating existing descriptors with `importdescriptors` command.\n\n  Currently if you run same `importdescriptors` command twice with a descriptor containing private key you will get very confusing error \u2014\u00a0`Missing required fields`. What happens is that Wallet tries to write imported private key to the disk, but it exists already so we get `DB_KEYEXIST (-30995)` from BerkelyDB. Please note, that we set `DB_NOOVERWRITE` (I guess not to lose some keys accidentally). The exception is caught in `catch (...)` in rpcdump.cpp with a generic error.\n\n  With this PR if a descriptor is already present than we will update its activeness, internalness, label, range and next_index.\n  For the range only expansion is allowed (range start can only decrease, range end increase).\n\nACKs for top commit:\n  achow101:\n    re-ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d\n  meshcollider:\n    Code review ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d\n  jonatack:\n    Light ACK 3efaf83c75cd8dc2fa084537b8ed6715fb58c04d per `git range-diff a000cb0 5d96704 3efaf83` and as a sanity check, re-debug-built on debian with gcc 10.2.1 and clang 11, ran wallet_importdescriptors.py\n\nTree-SHA512: 122c4b621d64ec8a3b625f3aed9f01a2b5cbaf2029ad0325b5ff38d67fff5cd35324335fabe2dd5169548b01b267c81be6ae0f5c834342f3d5f6eeed515c4843\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045bb06ebd55e826b77594f835c4b67f7dab2994",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/045bb06ebd55e826b77594f835c4b67f7dab2994",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045bb06ebd55e826b77594f835c4b67f7dab2994/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "722776c0fd218cc41ccb741453c58190c71e64f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722776c0fd218cc41ccb741453c58190c71e64f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/722776c0fd218cc41ccb741453c58190c71e64f9"
      },
      {
        "sha": "3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3efaf83c75cd8dc2fa084537b8ed6715fb58c04d"
      }
    ],
    "stats": {
      "total": 301,
      "additions": 241,
      "deletions": 60
    },
    "files": [
      {
        "sha": "ea97b339cfbff326851b8767f3a8bf91641d92cd",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -1566,9 +1566,8 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n         // Check if the wallet already contains the descriptor\n         auto existing_spk_manager = wallet.GetDescriptorScriptPubKeyMan(w_desc);\n         if (existing_spk_manager) {\n-            LOCK(existing_spk_manager->cs_desc_man);\n-            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n-                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            if (!existing_spk_manager->CanUpdateToWalletDescriptor(w_desc, error)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, error);\n             }\n         }\n \n@@ -1585,16 +1584,16 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 wallet.AddActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n             }\n+        } else {\n+            if (w_desc.descriptor->GetOutputType()) {\n+                wallet.DeactivateScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n         }\n \n         result.pushKV(\"success\", UniValue(true));\n     } catch (const UniValue& e) {\n         result.pushKV(\"success\", UniValue(false));\n         result.pushKV(\"error\", e);\n-    } catch (...) {\n-        result.pushKV(\"success\", UniValue(false));\n-\n-        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n     }\n     if (warnings.size()) result.pushKV(\"warnings\", warnings);\n     return result;"
      },
      {
        "sha": "c20950e999dec7860c4ba96ab33cef65a72252b5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -1851,6 +1851,12 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     AssertLockHeld(cs_desc_man);\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n \n+    // Check if provided key already exists\n+    if (m_map_keys.find(pubkey.GetID()) != m_map_keys.end() ||\n+        m_map_crypted_keys.find(pubkey.GetID()) != m_map_crypted_keys.end()) {\n+        return true;\n+    }\n+\n     if (m_storage.HasEncryptionKeys()) {\n         if (m_storage.IsLocked()) {\n             return false;\n@@ -2304,3 +2310,37 @@ void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n         throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n     }\n }\n+\n+void DescriptorScriptPubKeyMan::UpdateWalletDescriptor(WalletDescriptor& descriptor)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    if (!CanUpdateToWalletDescriptor(descriptor, error)) {\n+        throw std::runtime_error(std::string(__func__) + \": \" + error);\n+    }\n+\n+    m_map_pubkeys.clear();\n+    m_map_script_pub_keys.clear();\n+    m_max_cached_index = -1;\n+    m_wallet_descriptor = descriptor;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error)\n+{\n+    LOCK(cs_desc_man);\n+    if (!HasWalletDescriptor(descriptor)) {\n+        error = \"can only update matching descriptor\";\n+        return false;\n+    }\n+\n+    if (descriptor.range_start > m_wallet_descriptor.range_start ||\n+        descriptor.range_end < m_wallet_descriptor.range_end) {\n+        // Use inclusive range for error\n+        error = strprintf(\"new range must include current range = [%d,%d]\",\n+                          m_wallet_descriptor.range_start,\n+                          m_wallet_descriptor.range_end - 1);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "6ed4a7a541360fadfd6ccb1515c991bfce0a8d4b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -624,6 +624,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n \n     bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n+    void UpdateWalletDescriptor(WalletDescriptor& descriptor);\n+    bool CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error);\n     void AddDescriptorKey(const CKey& key, const CPubKey &pubkey);\n     void WriteDescriptor();\n "
      },
      {
        "sha": "c506bc62558bb411c2024e75de8ae57efe4109b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 35,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -3168,12 +3168,38 @@ void CWallet::AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n \n void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n {\n+    // Activating ScriptPubKeyManager for a given output and change type is incompatible with legacy wallets.\n+    // Legacy wallets have only one ScriptPubKeyManager and it's active for all output and change types.\n+    Assert(IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto& spk_mans_other = internal ? m_external_spk_managers : m_internal_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n+    if (spk_mans_other[type] == spk_man) {\n+        spk_mans_other[type] = nullptr;\n+    }\n+\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+void CWallet::DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n+{\n+    auto spk_man = GetScriptPubKeyMan(type, internal);\n+    if (spk_man != nullptr && spk_man->GetID() == id) {\n+        WalletLogPrintf(\"Deactivate spkMan: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+        WalletBatch batch(GetDatabase());\n+        if (!batch.EraseActiveScriptPubKeyMan(static_cast<uint8_t>(type), internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": erasing active ScriptPubKeyMan id failed\");\n+        }\n+\n+        auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+        spk_mans[type] = nullptr;\n+    }\n+\n     NotifyCanGetAddressesChanged();\n }\n \n@@ -3207,52 +3233,34 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n     }\n \n     LOCK(cs_wallet);\n-    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n-\n-    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n-    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n-    if (old_spk_man) {\n+    auto spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (spk_man) {\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+        spk_man->UpdateWalletDescriptor(desc);\n+    } else {\n+        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        spk_man = new_spk_man.get();\n \n-        {\n-            LOCK(old_spk_man->cs_desc_man);\n-            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n-        }\n-\n-        // Remove from maps of active spkMans\n-        auto old_spk_man_id = old_spk_man->GetID();\n-        for (bool internal : {false, true}) {\n-            for (OutputType t : OUTPUT_TYPES) {\n-                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n-                if (active_spk_man && active_spk_man->GetID() == old_spk_man_id) {\n-                    if (internal) {\n-                        m_internal_spk_managers.erase(t);\n-                    } else {\n-                        m_external_spk_managers.erase(t);\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        m_spk_managers.erase(old_spk_man_id);\n+        // Save the descriptor to memory\n+        m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n     }\n \n     // Add the private keys to the descriptor\n     for (const auto& entry : signing_provider.keys) {\n         const CKey& key = entry.second;\n-        new_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+        spk_man->AddDescriptorKey(key, key.GetPubKey());\n     }\n \n     // Top up key pool, the manager will generate new scriptPubKeys internally\n-    if (!new_spk_man->TopUp()) {\n+    if (!spk_man->TopUp()) {\n         WalletLogPrintf(\"Could not top up scriptPubKeys\\n\");\n         return nullptr;\n     }\n \n     // Apply the label if necessary\n     // Note: we disable labels for ranged descriptors\n     if (!desc.descriptor->IsRange()) {\n-        auto script_pub_keys = new_spk_man->GetScriptPubKeys();\n+        auto script_pub_keys = spk_man->GetScriptPubKeys();\n         if (script_pub_keys.empty()) {\n             WalletLogPrintf(\"Could not generate scriptPubKeys (cache is empty)\\n\");\n             return nullptr;\n@@ -3264,12 +3272,8 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         }\n     }\n \n-    // Save the descriptor to memory\n-    auto ret = new_spk_man.get();\n-    m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n-\n     // Save the descriptor to DB\n-    ret->WriteDescriptor();\n+    spk_man->WriteDescriptor();\n \n-    return ret;\n+    return spk_man;\n }"
      },
      {
        "sha": "3997751f52421fd6804b0934061a3682b1e7cbb1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -899,6 +899,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Remove specified ScriptPubKeyMan from set of active SPK managers. Writes the change to the wallet file.\n+    //! @param[in] id The unique id for the ScriptPubKeyMan\n+    //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n+    //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n+    void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n+\n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "1e5d8dfa3a9db79120258f595d440e053c63c647",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -210,6 +210,12 @@ bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bo\n     return WriteIC(make_pair(key, type), id);\n }\n \n+bool WalletBatch::EraseActiveScriptPubKeyMan(uint8_t type, bool internal)\n+{\n+    const std::string key{internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK};\n+    return EraseIC(make_pair(key, type));\n+}\n+\n bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey)\n {\n     // hash pubkey/privkey to accelerate wallet load"
      },
      {
        "sha": "9b775eb481b9c1f50ae32d73ac48c930961e1fcd",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -255,6 +255,7 @@ class WalletBatch\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n+    bool EraseActiveScriptPubKeyMan(uint8_t type, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);"
      },
      {
        "sha": "262175c7895fecacaf9c2ed65a1633528ea3699c",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 141,
        "deletions": 18,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045bb06ebd55e826b77594f835c4b67f7dab2994/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045bb06ebd55e826b77594f835c4b67f7dab2994/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=045bb06ebd55e826b77594f835c4b67f7dab2994",
        "patch": "@@ -79,7 +79,6 @@ def run_test(self):\n         # RPC importdescriptors -----------------------------------------------\n \n         # # Test import fails if no descriptor present\n-        key = get_generate_key()\n         self.log.info(\"Import should fail if a descriptor is not provided\")\n         self.test_importdesc({\"timestamp\": \"now\"},\n                              success=False,\n@@ -89,22 +88,26 @@ def run_test(self):\n         # # Test importing of a P2PKH descriptor\n         key = get_generate_key()\n         self.log.info(\"Should import a p2pkh descriptor\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"label\": \"Descriptor import test\"},\n-                             success=True)\n+        import_request = {\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                 \"timestamp\": \"now\",\n+                 \"label\": \"Descriptor import test\"}\n+        self.test_importdesc(import_request, success=True)\n         test_address(w1,\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=True,\n                      labels=[\"Descriptor import test\"])\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n \n+        self.log.info(\"Test can import same descriptor with public key twice\")\n+        self.test_importdesc(import_request, success=True)\n+\n+        self.log.info(\"Test can update descriptor label\")\n+        self.test_importdesc({**import_request, \"label\": \"Updated label\"}, success=True)\n+        test_address(w1, key.p2pkh_addr, solvable=True, ismine=True, labels=[\"Updated label\"])\n+\n         self.log.info(\"Internal addresses cannot have labels\")\n-        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n-                              \"timestamp\": \"now\",\n-                              \"internal\": True,\n-                              \"label\": \"Descriptor import test\"},\n+        self.test_importdesc({**import_request, \"internal\": True},\n                              success=False,\n                              error_code=-8,\n                              error_message=\"Internal addresses should not have a label\")\n@@ -252,6 +255,39 @@ def run_test(self):\n         self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n                               success=False, error_code=-8, error_message='Range is too large')\n \n+        self.log.info(\"Verify we can only extend descriptor's range\")\n+        range_request = {\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [5, 10], 'active': True}\n+        self.test_importdesc(range_request, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 6)\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 11)\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        # Can keep range the same\n+        self.test_importdesc({**range_request, \"range\": [0, 20]}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.test_importdesc({**range_request, \"range\": [5, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [0, 10]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        self.test_importdesc({**range_request, \"range\": [5, 20]}, wallet=wpriv, success=False,\n+                             error_code=-8, error_message='new range must include current range = [0,20]')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+\n+        self.log.info(\"Check we can change descriptor internal flag\")\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": True}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getnewaddress, '', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 21)\n+        wpriv.getrawchangeaddress('p2sh-segwit')\n+\n+        self.test_importdesc({**range_request, \"range\": [0, 20], \"internal\": False}, wallet=wpriv, success=True)\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 21)\n+        wpriv.getnewaddress('', 'p2sh-segwit')\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize_hd_internal'], 0)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', wpriv.getrawchangeaddress, 'p2sh-segwit')\n+\n         # Make sure ranged imports import keys in order\n         w1 = self.nodes[1].get_wallet_rpc('w1')\n         self.log.info('Key ranges should be imported in order')\n@@ -303,16 +339,54 @@ def run_test(self):\n         w1.keypoolrefill()\n         assert_equal(w1.getwalletinfo()['keypoolsize'], 5 * 3)\n \n+        self.log.info(\"Check we can change next_index\")\n+        # go back and forth with next_index\n+        for i in [4, 0, 2, 1, 3]:\n+            self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                                  'active': True,\n+                                  'range': [0, 9],\n+                                  'next_index': i,\n+                                  'timestamp': 'now'\n+                                  },\n+                                 success=True)\n+            assert_equal(w1.getnewaddress('', 'bech32'), addresses[i])\n+\n         # Check active=False default\n         self.log.info('Check imported descriptors are not active by default')\n-        self.test_importdesc({'desc': descsum_create('pkh([12345678/0h/0h]' + xpub + '/*)'),\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678/1h]' + xpub + '/*)'),\n                               'range' : [0, 2],\n                               'timestamp': 'now',\n                               'internal': True\n                              },\n                              success=True)\n         assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n \n+        self.log.info('Check can activate inactive descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': True,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        address = w1.getrawchangeaddress('legacy')\n+        assert_equal(address, \"mpA2Wh9dvZT7yfELq1UnrUmAoc5qCkMetg\")\n+\n+        self.log.info('Check can deactivate active descriptor')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678]' + xpub + '/*)'),\n+                              'range': [0, 5],\n+                              'active': False,\n+                              'timestamp': 'now',\n+                              'internal': True\n+                              },\n+                             success=True)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n+        self.log.info('Verify activation state is persistent')\n+        w1.unloadwallet()\n+        self.nodes[1].loadwallet('w1')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n         # # Test importing a descriptor containing a WIF private key\n         wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n         address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n@@ -322,6 +396,10 @@ def run_test(self):\n                                \"timestamp\": \"now\"},\n                               success=True,\n                               wallet=wpriv)\n+\n+        self.log.info('Test can import same descriptor with private key twice')\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\"}, success=True, wallet=wpriv)\n+\n         test_address(wpriv,\n                      address,\n                      solvable=True,\n@@ -339,14 +417,25 @@ def run_test(self):\n         wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n         assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+        xprv1 = 'tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52'\n+        acc_xpub1 = 'tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8'  # /84'/0'/0'\n+        chg_xpub1 = 'tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf'  # /84'/1'/0'\n+        xprv2 = 'tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq'\n+        acc_xprv2 = 'tprv8gVCsmRAxVSxyUpsL13Y7ZEWBFPWbgS5E2MmFVNGuANrknvmmn2vWnmHvU8AwEFYzR2ji6EeZLSCLVacsYkvor3Pcb5JY5FGcevqTwYvdYx'\n+        acc_xpub2 = 'tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH'\n+        chg_xpub2 = 'tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh'\n+        xprv3 = 'tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1'\n+        acc_xpub3 = 'tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E'\n+        chg_xpub3 = 'tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb'\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,\" + xprv2 + \"/84h/0h/0h/*,\" + xprv3 + \"/84h/0h/0h/*))#m2sr93jn\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_priv)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,\" + xprv2 + \"/84h/1h/0h/*,\" + xprv3 + \"/84h/1h/0h/*))#q3sztvx5\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -374,14 +463,14 @@ def run_test(self):\n         wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n \n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 +\"/*))#tsry0s5e\",\n                             \"active\": True,\n                             \"range\": 1000,\n                             \"next_index\": 0,\n                             \"timestamp\": \"now\"},\n                             success=True,\n                             wallet=wmulti_pub)\n-        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))#c08a2rzv\",\n                             \"active\": True,\n                             \"internal\" : True,\n                             \"range\": 1000,\n@@ -396,8 +485,15 @@ def run_test(self):\n         change_addr = wmulti_pub.getrawchangeaddress('bech32')\n         assert_equal(change_addr, 'bcrt1qt9uhe3a9hnq7vajl7a094z4s3crm9ttf8zw3f5v9gr2nyd7e3lnsy44n8e')\n         assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 999)\n+\n+        # generate some utxos for next tests\n         txid = w0.sendtoaddress(addr, 10)\n         vout = find_vout_for_address(self.nodes[0], txid, addr)\n+\n+        addr2 = wmulti_pub.getnewaddress('', 'bech32')\n+        txid2 = w0.sendtoaddress(addr2, 10)\n+        vout2 = find_vout_for_address(self.nodes[0], txid2, addr2)\n+\n         self.nodes[0].generate(6)\n         self.sync_all()\n         assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n@@ -411,14 +507,14 @@ def run_test(self):\n         wmulti_priv1 = self.nodes[1].get_wallet_rpc(\"wmulti_priv1\")\n         res = wmulti_priv1.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/1h/0h/*,[59b09cd6/84h/1h/0h]\" + chg_xpub2 + \"/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -434,14 +530,14 @@ def run_test(self):\n         wmulti_priv2 = self.nodes[1].get_wallet_rpc('wmulti_priv2')\n         res = wmulti_priv2.importdescriptors([\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]\" + acc_xpub1 + \"/*,\" + xprv2 + \"/84h/0h/0h/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"range\": 1000,\n             \"next_index\": 0,\n             \"timestamp\": \"now\"\n         },\n         {\n-            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]\" + chg_xpub1 + \"/*,\" + xprv2 + \"/84h/1h/0h/*,[e81a0532/84h/1h/0h]\" + chg_xpub3 + \"/*))\"),\n             \"active\": True,\n             \"internal\" : True,\n             \"range\": 1000,\n@@ -531,6 +627,33 @@ def run_test(self):\n         )\n \n \n+        self.log.info(\"Amending multisig with new private keys\")\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv3\", descriptors=True)\n+        wmulti_priv3 = self.nodes[1].get_wallet_rpc(\"wmulti_priv3\")\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xpub2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+        res = wmulti_priv3.importdescriptors([\n+            {\n+                \"desc\": descsum_create(\"wsh(multi(2,\" + xprv1 + \"/84h/0h/0h/*,[59b09cd6/84h/0h/0h]\" + acc_xprv2 + \"/*,[e81a0532/84h/0h/0h]\" + acc_xpub3 + \"/*))\"),\n+                \"active\": True,\n+                \"range\": 1000,\n+                \"next_index\": 0,\n+                \"timestamp\": \"now\"\n+            }])\n+        assert_equal(res[0]['success'], True)\n+\n+        rawtx = self.nodes[1].createrawtransaction([{'txid': txid2, 'vout': vout2}], {w0.getnewaddress(): 9.999})\n+        tx = wmulti_priv3.signrawtransactionwithwallet(rawtx)\n+        assert_equal(tx['complete'], True)\n+        self.nodes[1].sendrawtransaction(tx['hex'])\n+\n         self.log.info(\"Combo descriptors cannot be active\")\n         self.test_importdesc({\"desc\": descsum_create(\"combo(tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*)\"),\n                               \"active\": True,"
      }
    ]
  },
  {
    "sha": "5a95c5179c391e0adba0bb308d200bf5a2e24b16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTk1YzUxNzljMzkxZTBhZGJhMGJiMzA4ZDIwMGJmNWEyZTI0YjE2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T02:08:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T02:16:33Z"
      },
      "message": "Merge bitcoin/bitcoin#20191: wallet, refactor: make DescriptorScriptPubKeyMan agnostic of internal flag\n\n181181019c5baa3e2d5b675d1843a45aa028781c refactor: remove m_internal from DescriptorSPKman (S3RK)\n\nPull request description:\n\n  Rationale: improve consistency between `CWallet` and `DescriptorScriptPubKeyMan`; simplify `ScriptPubKeyMan` interface.\n\n  Descriptor in itself is neither internal or external. It's responsibility of a wallet to assign and manage descriptors for a specific purpose. Duplicating information about internalness of a descriptor could lead to inconsistencies and unexpected behaviour (for example misreporting keypool size).\n\nACKs for top commit:\n  instagibbs:\n    reACK https://github.com/bitcoin/bitcoin/pull/20191/commits/181181019c5baa3e2d5b675d1843a45aa028781c\n  achow101:\n    reACK 181181019c5baa3e2d5b675d1843a45aa028781c\n\nTree-SHA512: d5613b7f6795b290bfa0fd8cb0536de1714d0cf72cba402266bd06d550758ebad690b54fc0a336a1c7414b5814aa4a37c90a6ae89926474a97d30956d7e034ff",
      "tree": {
        "sha": "999a9c95e181fd1deb24eb1c2a152fba5dee17a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/999a9c95e181fd1deb24eb1c2a152fba5dee17a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a95c5179c391e0adba0bb308d200bf5a2e24b16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDdJYEACgkQLuufXMCV\nJsGNkg/9GMVFRvOQeJjNUNQwAkzf6PeBk3d61Nzp5payAmvYCiQL4bh8SGpoO04T\neqTIKP9T57+i9ebWDfQLa/O1pmD38fy0My19YwFPgMPv3pYPvgvKL68GEVniXmM2\nrk9YMH9vjUgNwb/sUmoVp/7VOhpxOhmaAlVbwLXulrLWmmmC2anrsWXnxNIJkMi6\n7bsuIqlqu0DgjwlT3pMSQGWTDUOZVyD9Vq3ji4Zyx9ce7F7dI2+pMjYqEaq0sMxG\n3MH3RoXbQpcy1YoQ63XIDJa0tyrjczBlopmWlFuDQUORtCcjMQSTSBR9pKEtnPL3\nCMBgk5TYe3HZcQAUkpR8H+hUG71OPwytpyTiiXchE2w2bziNIqK4BbL8oL2mQJjU\njwbXDWTj+oZTKH4G1bZYsT6sbFdOQ0fDbmlGohWEy+hQOgw6XAfLeuUp0bRdTTZn\nN+H8sjBN3aP+Z/r5sG5De4MUmm0rOzh0YEHHYPPLUg6KNdlKIZ4mK7UWtC2Xj0Sy\nHhyb2NLExvV79Z5ieqRn5VB7A5zCLu6RCj9Zn+dr/iZ6W6i4+cZzHBc3kFXZBtT4\n/AarVQZbR8kZWz95ZRzlg3AwR3WhVlwzhjOCIoD1NZfwLldr00Ce8CDmWRXT1Ul0\n2ai0CrjJqHP9QN8RAYe2i9CEEcZbkbor4mASPILgi5+DUZ7o5HM=\n=NWvv\n-----END PGP SIGNATURE-----",
        "payload": "tree 999a9c95e181fd1deb24eb1c2a152fba5dee17a3\nparent 045bb06ebd55e826b77594f835c4b67f7dab2994\nparent 181181019c5baa3e2d5b675d1843a45aa028781c\nauthor fanquake <fanquake@gmail.com> 1625105313 +0800\ncommitter fanquake <fanquake@gmail.com> 1625105793 +0800\n\nMerge bitcoin/bitcoin#20191: wallet, refactor: make DescriptorScriptPubKeyMan agnostic of internal flag\n\n181181019c5baa3e2d5b675d1843a45aa028781c refactor: remove m_internal from DescriptorSPKman (S3RK)\n\nPull request description:\n\n  Rationale: improve consistency between `CWallet` and `DescriptorScriptPubKeyMan`; simplify `ScriptPubKeyMan` interface.\n\n  Descriptor in itself is neither internal or external. It's responsibility of a wallet to assign and manage descriptors for a specific purpose. Duplicating information about internalness of a descriptor could lead to inconsistencies and unexpected behaviour (for example misreporting keypool size).\n\nACKs for top commit:\n  instagibbs:\n    reACK https://github.com/bitcoin/bitcoin/pull/20191/commits/181181019c5baa3e2d5b675d1843a45aa028781c\n  achow101:\n    reACK 181181019c5baa3e2d5b675d1843a45aa028781c\n\nTree-SHA512: d5613b7f6795b290bfa0fd8cb0536de1714d0cf72cba402266bd06d550758ebad690b54fc0a336a1c7414b5814aa4a37c90a6ae89926474a97d30956d7e034ff\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a95c5179c391e0adba0bb308d200bf5a2e24b16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a95c5179c391e0adba0bb308d200bf5a2e24b16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a95c5179c391e0adba0bb308d200bf5a2e24b16/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045bb06ebd55e826b77594f835c4b67f7dab2994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045bb06ebd55e826b77594f835c4b67f7dab2994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045bb06ebd55e826b77594f835c4b67f7dab2994"
      },
      {
        "sha": "181181019c5baa3e2d5b675d1843a45aa028781c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181181019c5baa3e2d5b675d1843a45aa028781c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/181181019c5baa3e2d5b675d1843a45aa028781c"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 19,
      "deletions": 40
    },
    "files": [
      {
        "sha": "61df3d0015470152d5ad3e19a837eb6a156fde68",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "patch": "@@ -15,8 +15,8 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n   ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n       :   DescriptorScriptPubKeyMan(storage, descriptor)\n       {}\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage, bool internal)\n-      :   DescriptorScriptPubKeyMan(storage, internal)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage)\n+      :   DescriptorScriptPubKeyMan(storage)\n       {}\n \n   /** Provide a descriptor at setup time"
      },
      {
        "sha": "73433214f16fe7cf9d2c106fae7d7381e87186b6",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "patch": "@@ -1613,12 +1613,10 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-void LegacyScriptPubKeyMan::SetInternal(bool internal) {}\n-\n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n     // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n-    if (!CanGetAddresses(m_internal)) {\n+    if (!CanGetAddresses()) {\n         error = \"No addresses available\";\n         return false;\n     }\n@@ -1876,7 +1874,7 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n {\n     if (addr_type == OutputType::BECH32M) {\n         // Don't allow setting up taproot descriptors yet\n@@ -1924,7 +1922,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix += \"/0'\";\n     }\n \n-    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n     std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n \n     // Make the descriptor\n@@ -1979,13 +1977,6 @@ int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n     return 0;\n }\n \n-size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n-{\n-    if (m_internal) {\n-        return 0;\n-    }\n-    return GetKeyPoolSize();\n-}\n \n unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n {\n@@ -2187,11 +2178,6 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetInternal(bool internal)\n-{\n-    this->m_internal = internal;\n-}\n-\n void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "572a695662f7c60e99c0592db66819234ce110fb",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "patch": "@@ -216,7 +216,6 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetOldestKeyPoolTime() const { return GetTime(); }\n \n-    virtual size_t KeypoolCountExternalKeys() const { return 0; }\n     virtual unsigned int GetKeyPoolSize() const { return 0; }\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n@@ -239,8 +238,6 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n-    virtual void SetInternal(bool internal) {}\n-\n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n     void WalletLogPrintf(std::string fmt, Params... parameters) const {\n@@ -386,7 +383,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void RewriteDB() override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n+    size_t KeypoolCountExternalKeys() const;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -405,8 +402,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n@@ -533,8 +528,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    bool m_internal = false;\n-\n     KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n     CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n \n@@ -560,9 +553,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n         :   ScriptPubKeyMan(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, bool internal)\n-        :   ScriptPubKeyMan(storage),\n-            m_internal(internal)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage)\n+        :   ScriptPubKeyMan(storage)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;\n@@ -587,7 +579,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type);\n+    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     /** Provide a descriptor at setup time\n     * Returns false if already setup or setup fails, true if setup is successful\n@@ -597,7 +589,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() const override;\n-    size_t KeypoolCountExternalKeys() const override;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -616,8 +607,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     uint256 GetID() const override;\n \n-    void SetInternal(bool internal) override;\n-\n     void SetCache(const DescriptorCache& cache);\n \n     bool AddKey(const CKeyID& key_id, const CKey& key);"
      },
      {
        "sha": "1f736f8baf9686fead381a12f4edeb3f417f2cc2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a95c5179c391e0adba0bb308d200bf5a2e24b16/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "patch": "@@ -2094,9 +2094,14 @@ size_t CWallet::KeypoolCountExternalKeys() const\n {\n     AssertLockHeld(cs_wallet);\n \n+    auto legacy_spk_man = GetLegacyScriptPubKeyMan();\n+    if (legacy_spk_man) {\n+        return legacy_spk_man->KeypoolCountExternalKeys();\n+    }\n+\n     unsigned int count = 0;\n-    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n-        count += spk_man->KeypoolCountExternalKeys();\n+    for (auto spk_man : m_external_spk_managers) {\n+        count += spk_man.second->GetKeyPoolSize();\n     }\n \n     return count;\n@@ -3112,7 +3117,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     // TODO: Setup taproot (bech32m) descriptors by default\n                     continue;\n                 }\n-                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {\n                         throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -3121,7 +3126,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                         throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                     }\n                 }\n-                spk_manager->SetupDescriptorGeneration(master_key, t);\n+                spk_manager->SetupDescriptorGeneration(master_key, t, internal);\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n                 AddActiveScriptPubKeyMan(id, t, internal);\n@@ -3147,7 +3152,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     continue;\n                 }\n                 OutputType t =  *desc->GetOutputType();\n-                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, internal));\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this));\n                 spk_manager->SetupDescriptor(std::move(desc));\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n@@ -3176,7 +3181,6 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto& spk_mans_other = internal ? m_external_spk_managers : m_internal_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n-    spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n     if (spk_mans_other[type] == spk_man) {"
      }
    ]
  },
  {
    "sha": "b945a31afac63010fce782b8fbca96dee6b458c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTQ1YTMxYWZhYzYzMDEwZmNlNzgyYjhmYmNhOTZkZWU2YjQ1OGM1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-01T05:22:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-01T05:22:38Z"
      },
      "message": "wallet: erase spkmans rather than setting to nullptr\n\nIn many places in ScriptPubKeyMan managing code, we assume that the\nScriptPubKeyMan being retrieved actually exists and is not a nullptr.\nThus removing a ScriptPubKeyMan requires erasing the object from the\nmap rather than setting it to a nullptr.",
      "tree": {
        "sha": "9c93f45a3beef73163a2a456e8fbe6a4945ede4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c93f45a3beef73163a2a456e8fbe6a4945ede4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b945a31afac63010fce782b8fbca96dee6b458c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b945a31afac63010fce782b8fbca96dee6b458c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b945a31afac63010fce782b8fbca96dee6b458c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b945a31afac63010fce782b8fbca96dee6b458c5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a95c5179c391e0adba0bb308d200bf5a2e24b16"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "173609e995c29b6441540d0be6d5989ab8645870",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b945a31afac63010fce782b8fbca96dee6b458c5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b945a31afac63010fce782b8fbca96dee6b458c5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b945a31afac63010fce782b8fbca96dee6b458c5",
        "patch": "@@ -3184,7 +3184,7 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     spk_mans[type] = spk_man;\n \n     if (spk_mans_other[type] == spk_man) {\n-        spk_mans_other[type] = nullptr;\n+        spk_mans_other.erase(type);\n     }\n \n     NotifyCanGetAddressesChanged();\n@@ -3201,7 +3201,7 @@ void CWallet::DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool intern\n         }\n \n         auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n-        spk_mans[type] = nullptr;\n+        spk_mans.erase(type);\n     }\n \n     NotifyCanGetAddressesChanged();"
      }
    ]
  },
  {
    "sha": "34f554dbd3e123e67760b82ba0767859b7e7522a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGY1NTRkYmQzZTEyM2U2Nzc2MGI4MmJhMDc2Nzg1OWI3ZTc1MjJh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T05:55:30Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T06:02:00Z"
      },
      "message": "Merge bitcoin-core/gui#366: Dark Mode fixes/portability\n\n9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3 GUI: Always call parent changeEvent handler (Luke Dashjr)\nc901d4d8ce7949276da57eacb82b1a3ce40cac27 GUI: Enable palette change adaptation on all platforms (Luke Dashjr)\n\nPull request description:\n\n  The changes to support macOS \"Dark Mode\" are valid for any platform, and should work so long as Qt implements the PaletteChange event. (Worst case, we're no worse off with trying.)\n\n  Additionally, we shouldn't block the parent classes from implementing event handlers. Who knows what side effects that could have.\n\nACKs for top commit:\n  hebasto:\n    ACK 9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3, tested on Linux Mint 20.1 (Qt 5.12.8) with the [`qt5ct`](https://packages.ubuntu.com/focal/qt5ct) package installed.\n  kristapsk:\n    ACK 9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3. Tested on Gentoo Linux with Xfce4 and Qt 5.15.2, does not break anything on my computer.\n\nTree-SHA512: dce2fff0ff129eda208132390a37424ff9607539287dbdbfdfd659ed9c4ea0472541e987489a04fd935e391dc006a35bfc9cfa9bcff33602b7dbd29b81c51626",
      "tree": {
        "sha": "ad463fe19d7321777b5efdc51d46c0f3f926e816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad463fe19d7321777b5efdc51d46c0f3f926e816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34f554dbd3e123e67760b82ba0767859b7e7522a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDdWlgACgkQQQEIES5+\nqB+ALA/9EaM26BGzmxgbnWdu35rvrHu8ktGIfTbbnfBOLsYnlvdDmHmbqijgKUXL\nFLyArOxzZt6J2r5ZOqWkgqc93tOlrNJ2q3NKtWP2hb/q6ovCCYI8G7IE0NAVXpzb\nzA3PU3cbsliOrtJZD6KxDipArLaw+AnNh+GE+csAxZbkvSqKf3NOyoHzBh09SMxY\nunj4e0C8KPP8UPV5uL4rRooAEnrZR1g8zD1l32wKjyk3a/tkxyMR0lt6P+20BBcd\nlwW5HwPulei5mDN/MfYe8/AYT8fkPWh4h9Q4KZoUNtbL9SZ/kUBO1YEIzKUtwS9l\nCvZI6lPXoi77WwqiFVwcPTQUHfOFTf+WkeKB+bomPM8c/Y95p83rUQQZOWp+ily5\nijt3Lc6ls8ObmBcN/TCGC+dsuKSB8RbTPGXMQaJ1AiDCEA12DYzZLmJVccbmtrDM\n9INJEpK/7XBLsImRC6gEqGZIHBxzoTyjAFA7cDaRP4JZ2LG5q4T9c4R2/OZLcHdW\nEhMdYLjT6GY2k87XBJJ4vFsv2rWLBiAOf/mKQ7vbhi36FCt+JNT3TUv+fd8pSi/J\nNccRF8egZfpnvJjGZQRo2suTUUxFcSMTLq+t7Q3/GZeSCIcryQZ8UdzRFlI4UCzZ\n9MvqEYveLNe5Mxxc/re5YiWputaXw3i95S1jEjMr5L3NZpw05qY=\n=wqMo\n-----END PGP SIGNATURE-----",
        "payload": "tree ad463fe19d7321777b5efdc51d46c0f3f926e816\nparent 5a95c5179c391e0adba0bb308d200bf5a2e24b16\nparent 9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625118930 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625119320 +0300\n\nMerge bitcoin-core/gui#366: Dark Mode fixes/portability\n\n9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3 GUI: Always call parent changeEvent handler (Luke Dashjr)\nc901d4d8ce7949276da57eacb82b1a3ce40cac27 GUI: Enable palette change adaptation on all platforms (Luke Dashjr)\n\nPull request description:\n\n  The changes to support macOS \"Dark Mode\" are valid for any platform, and should work so long as Qt implements the PaletteChange event. (Worst case, we're no worse off with trying.)\n\n  Additionally, we shouldn't block the parent classes from implementing event handlers. Who knows what side effects that could have.\n\nACKs for top commit:\n  hebasto:\n    ACK 9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3, tested on Linux Mint 20.1 (Qt 5.12.8) with the [`qt5ct`](https://packages.ubuntu.com/focal/qt5ct) package installed.\n  kristapsk:\n    ACK 9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3. Tested on Gentoo Linux with Xfce4 and Qt 5.15.2, does not break anything on my computer.\n\nTree-SHA512: dce2fff0ff129eda208132390a37424ff9607539287dbdbfdfd659ed9c4ea0472541e987489a04fd935e391dc006a35bfc9cfa9bcff33602b7dbd29b81c51626\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f554dbd3e123e67760b82ba0767859b7e7522a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34f554dbd3e123e67760b82ba0767859b7e7522a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f554dbd3e123e67760b82ba0767859b7e7522a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a95c5179c391e0adba0bb308d200bf5a2e24b16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a95c5179c391e0adba0bb308d200bf5a2e24b16"
      },
      {
        "sha": "9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5bf6bf01af40a9684f1b1f06a8df4aaf36b8f3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f8aeb016596c86138572df97b1a424825dc3974c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -1173,14 +1173,12 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n \n void BitcoinGUI::changeEvent(QEvent *e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         overviewAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/overview\")));\n         sendCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/send\")));\n         receiveCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/receiving_addresses\")));\n         historyAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/history\")));\n     }\n-#endif\n \n     QMainWindow::changeEvent(e);\n \n@@ -1511,14 +1509,14 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n \n void UnitDisplayStatusBarControl::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QString style = QString(\"QLabel { color : %1 }\").arg(m_platform_style->SingleColor().name());\n         if (style != styleSheet()) {\n             setStyleSheet(style);\n         }\n     }\n-#endif\n+\n+    QLabel::changeEvent(e);\n }\n \n /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */"
      },
      {
        "sha": "d2a9365890cfacc491262a94e2f21bdd4e447022",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -564,11 +564,11 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n \n void CoinControlDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateView();\n     }\n-#endif\n+\n+    QDialog::changeEvent(e);\n }\n \n void CoinControlDialog::updateView()"
      },
      {
        "sha": "ecdfce2f5a4034559c49f156ba26724c510d2b11",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -809,11 +809,10 @@ void ThemedLabel::setThemedPixmap(const QString& image_filename, int width, int\n \n void ThemedLabel::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateThemedPixmap();\n     }\n-#endif\n+\n     QLabel::changeEvent(e);\n }\n "
      },
      {
        "sha": "1fd1ff31428618d2fe26b57e8477c08c9f8bec20",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -297,13 +297,13 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n void OverviewPage::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QIcon icon = m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/warning\"));\n         ui->labelTransactionsStatus->setIcon(icon);\n         ui->labelWalletStatus->setIcon(icon);\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void OverviewPage::updateDisplayUnit()"
      },
      {
        "sha": "bc0afa03c9aeb690a49f5b6351afd1deceb1943d",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -882,7 +882,6 @@ void RPCConsole::keyPressEvent(QKeyEvent *event)\n \n void RPCConsole::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->clearButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->fontBiggerButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/fontbigger\")));\n@@ -896,7 +895,8 @@ void RPCConsole::changeEvent(QEvent* e)\n                 platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(QSize(consoleFontSize * 2, consoleFontSize * 2), Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n         }\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void RPCConsole::message(int category, const QString &message, bool html)"
      },
      {
        "sha": "683c0441fadda8bad143f5890653fb9cd12cb820",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -238,15 +238,15 @@ void SendCoinsEntry::updateDisplayUnit()\n \n void SendCoinsEntry::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n         ui->deleteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n+\n+    QStackedWidget::changeEvent(e);\n }\n \n bool SendCoinsEntry::updateLabel(const QString &address)"
      },
      {
        "sha": "33589f09bfdeed4af9cc336101bcc677eac55324",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -286,7 +286,6 @@ bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)\n \n void SignVerifyMessageDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n@@ -297,5 +296,6 @@ void SignVerifyMessageDialog::changeEvent(QEvent* e)\n         ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/transaction_0\")));\n         ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n+\n+    QDialog::changeEvent(e);\n }"
      },
      {
        "sha": "83d17a32c089c2c27e9d17949a00700f486c54ae",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f554dbd3e123e67760b82ba0767859b7e7522a/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=34f554dbd3e123e67760b82ba0767859b7e7522a",
        "patch": "@@ -245,7 +245,6 @@ void TransactionView::setModel(WalletModel *_model)\n \n void TransactionView::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         watchOnlyWidget->setItemIcon(\n             TransactionFilterProxy::WatchOnlyFilter_Yes,\n@@ -254,7 +253,8 @@ void TransactionView::changeEvent(QEvent* e)\n             TransactionFilterProxy::WatchOnlyFilter_No,\n             m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/eye_minus\")));\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void TransactionView::chooseDate(int idx)"
      }
    ]
  },
  {
    "sha": "333ec8be821162fccab8278b03b0da1f19a01925",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzNlYzhiZTgyMTE2MmZjY2FiODI3OGIwM2IwZGExZjE5YTAxOTI1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T06:12:07Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T06:14:02Z"
      },
      "message": "Merge bitcoin-core/gui#330: Allow prompt icon to be colorized\n\n2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad qt: allow prompt icon to be colorized (Jarol Rodriguez)\n\nPull request description:\n\n  Opening the console on macOS, while in dark mode, the console prompt icon will not be colorized white like other icons. This applies the `platformStyle` to the icon so that It can be colorized white.\n\n  While here, refactor the `promptIcon` widget from a `QPushButton` to `QLabel`; which is more appropriate, per [Qt Docs](https://doc.qt.io/qt-5/qlabel.html#details):\n  > QLabel is used for displaying text or an image. No user interaction functionality is provided.\n\n  | Master        | PR               |\n  | ----------- | ----------- |\n  | ![Screen Shot 2021-05-14 at 11 46 33 PM](https://user-images.githubusercontent.com/23396902/118347462-8f689780-b511-11eb-8335-329f7d2a9992.png) | ![Screen Shot 2021-05-14 at 11 45 41 PM](https://user-images.githubusercontent.com/23396902/118347463-92638800-b511-11eb-9044-073f51ef27ff.png) |\n\nACKs for top commit:\n  hebasto:\n    ACK 2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad\n\nTree-SHA512: 21f8b1610e4820c9064bbd08608b5467e5b9499e2a3b149ff223e37b60e7d560497255c733eafa5434628a84b9f7b7c91d8b0f34b02be2f9ceb3ab21a4d555a8",
      "tree": {
        "sha": "628f9f1767d9f987d81ae36ed6069170901924b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/628f9f1767d9f987d81ae36ed6069170901924b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/333ec8be821162fccab8278b03b0da1f19a01925",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDdXSoACgkQQQEIES5+\nqB/oow/+NycxT3ykQgHPKcT+cstUDVoV07xP6bEUctlFmKVUfxI+4y/baF4f3g4O\nBaCRVl2kQotTxgWaoxltko+8C9YckZRAgB6nFCNLbtkxgTdMXHKvCrTWfWbsbG6C\nEWgdkS7lgdteCr/FNTGooqjh650HtM888tkENBMBB217Itr5jeo0WX1xHAUI4bpR\nOHAMoNv3KQrFAjYndH1d1OMjKZxD6h75g3KJdOCLYsSvMh/BCR7AEqH7M26aV8ih\nH60ntCq4mHayHutXVcqkusXHUixFKAA8q85HvTNR5E+CW3GSX4eG/ZbICuVWlDqq\ntWNBZsjMrf2IpGQol6l/2BPEDQW0Q3ZAWhAw0L/6At8EuVpxmWQaKLWPgN9BvnAC\nGUgaJIFMQN5ogRrm30M8kGRJLzBafBmhQ/+VF276yBA1PaUFkiy9CUycNEnin0fs\nZPZurWo7Ov6ywa87bda2Vg1ZXDpT+frCnCm8ZXTe43BocCCBhYnBERHDHhkcSy7E\n1qHSulbtO7QQQ/5JXgxRjahxUmnUjxHNcN6JMpzhf2NxoYtfiZFq0JXX0OqfI4wL\n3U/WxOE3hvdvCGGIq8jcFJP7t7fmWOl6d/gs6H472ms9/GQx1cnHY+G0Mttn0ttL\nkz9XBPJyMMFfW40TbL/qzLw0o4O3vzMv87nqkZ60Nd09/N69Hrk=\n=ns1c\n-----END PGP SIGNATURE-----",
        "payload": "tree 628f9f1767d9f987d81ae36ed6069170901924b5\nparent 34f554dbd3e123e67760b82ba0767859b7e7522a\nparent 2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625119927 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625120042 +0300\n\nMerge bitcoin-core/gui#330: Allow prompt icon to be colorized\n\n2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad qt: allow prompt icon to be colorized (Jarol Rodriguez)\n\nPull request description:\n\n  Opening the console on macOS, while in dark mode, the console prompt icon will not be colorized white like other icons. This applies the `platformStyle` to the icon so that It can be colorized white.\n\n  While here, refactor the `promptIcon` widget from a `QPushButton` to `QLabel`; which is more appropriate, per [Qt Docs](https://doc.qt.io/qt-5/qlabel.html#details):\n  > QLabel is used for displaying text or an image. No user interaction functionality is provided.\n\n  | Master        | PR               |\n  | ----------- | ----------- |\n  | ![Screen Shot 2021-05-14 at 11 46 33 PM](https://user-images.githubusercontent.com/23396902/118347462-8f689780-b511-11eb-8335-329f7d2a9992.png) | ![Screen Shot 2021-05-14 at 11 45 41 PM](https://user-images.githubusercontent.com/23396902/118347463-92638800-b511-11eb-9044-073f51ef27ff.png) |\n\nACKs for top commit:\n  hebasto:\n    ACK 2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad\n\nTree-SHA512: 21f8b1610e4820c9064bbd08608b5467e5b9499e2a3b149ff223e37b60e7d560497255c733eafa5434628a84b9f7b7c91d8b0f34b02be2f9ceb3ab21a4d555a8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333ec8be821162fccab8278b03b0da1f19a01925",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/333ec8be821162fccab8278b03b0da1f19a01925",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333ec8be821162fccab8278b03b0da1f19a01925/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34f554dbd3e123e67760b82ba0767859b7e7522a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f554dbd3e123e67760b82ba0767859b7e7522a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34f554dbd3e123e67760b82ba0767859b7e7522a"
      },
      {
        "sha": "2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f23ad2c4031c43c6820ead6af7ae7cc6d4275ad"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c973fdbe789d919bf27fa9a053b481b9c5800058",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/333ec8be821162fccab8278b03b0da1f19a01925/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/333ec8be821162fccab8278b03b0da1f19a01925/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=333ec8be821162fccab8278b03b0da1f19a01925",
        "patch": "@@ -529,6 +529,8 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     //: Secondary shortcut to decrease the RPC console font size.\n     GUIUtil::AddButtonShortcut(ui->fontSmallerButton, tr(\"Ctrl+_\"));\n \n+    ui->promptIcon->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/prompticon\")));\n+\n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n     ui->lineEdit->setMaxLength(16 * 1024 * 1024);"
      }
    ]
  },
  {
    "sha": "3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWYyZDQwMGZhNDIwNzJhMmNmZTFjYjUxNzk2YzMyOWUzM2FiOGM1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T06:31:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T06:32:00Z"
      },
      "message": "Merge bitcoin/bitcoin#22376: ci: Do not clone `bitcoin-core/qa-assets` git repository if not necessary\n\n30450a1bd5d278e285f50a7e4cfc755545960e92 Do not clone qa-assets git repository if not necessary (Kiminuo)\n\nPull request description:\n\n  This PR attempts to remove an unnecessary step when CI runs.\n\n  The main motivation for the change is that I locally use `MAKEJOBS=\"-j15\" FILE_ENV=\"./ci/test/00_setup_env_android.sh\" ./ci/test_run_all.sh` to find out if a patch of mine works or not. Cloning `bitcoin-core/qa-assets` is slow on my machine (which is by no means slow).\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 30450a1bd5d278e285f50a7e4cfc755545960e92\n\nTree-SHA512: 5763b53da9554b06039c39f8fc729de1b106cce2a242de8f97528d001bfa01d4f48d2a128f458a3cdee3da36312354c6714839b947f313c089c2c5cb30233a39",
      "tree": {
        "sha": "4e78ad5bfab179b3ce020cf5897dc9ca43929757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e78ad5bfab179b3ce020cf5897dc9ca43929757"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhxDQwAl5osvMwCjemfzWCBF0zMgHIrfVHfgSSIBb/t++BYKwZaL3LulKeYie6V\nZdurWQ0gv/bdoyB9e8jUGJiSAUgon77VH05yOr5hrF6ublfFkyjQt1faNvgtDUWf\nKeUPLfPRngQnb4Bqt81KcEz07Ln3mTZG/rPnP0r6a8/WMbqWT382tqvqOB6MmWn3\n94ld7i++32U+E7GWiZtOaiobr/YPLcaO7Dnb0a5uKY0KTDa+td6l3jnAVgLxd7Hf\nFdblhxZzT2RJOo2XJSU/XwXLxCSdb9sTqMLU+tc8zco+w6fiL7TVtl7hk6Bqc0Rt\nWxO2ftR7leMIj7mAZNyKP0rgdW2RQZwKoJcrFoBmmoQIAKcCu7XhrLSBrHhVQalX\np6QNu659SruuYrGJUu+LMx3aQ2gDqfmnSRF4jHHdTM3FQkdyGGJdcjmTeI4r+f77\n0DKZ/kRLgSU1rhsdIvtCbDpWE/he/Sk/v6irLxyjxszEtqPL2+EEg0GI044rsijT\nPtQt27dR\n=MyJi\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e78ad5bfab179b3ce020cf5897dc9ca43929757\nparent 333ec8be821162fccab8278b03b0da1f19a01925\nparent 30450a1bd5d278e285f50a7e4cfc755545960e92\nauthor MarcoFalke <falke.marco@gmail.com> 1625121115 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625121120 +0200\n\nMerge bitcoin/bitcoin#22376: ci: Do not clone `bitcoin-core/qa-assets` git repository if not necessary\n\n30450a1bd5d278e285f50a7e4cfc755545960e92 Do not clone qa-assets git repository if not necessary (Kiminuo)\n\nPull request description:\n\n  This PR attempts to remove an unnecessary step when CI runs.\n\n  The main motivation for the change is that I locally use `MAKEJOBS=\"-j15\" FILE_ENV=\"./ci/test/00_setup_env_android.sh\" ./ci/test_run_all.sh` to find out if a patch of mine works or not. Cloning `bitcoin-core/qa-assets` is slow on my machine (which is by no means slow).\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 30450a1bd5d278e285f50a7e4cfc755545960e92\n\nTree-SHA512: 5763b53da9554b06039c39f8fc729de1b106cce2a242de8f97528d001bfa01d4f48d2a128f458a3cdee3da36312354c6714839b947f313c089c2c5cb30233a39\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "333ec8be821162fccab8278b03b0da1f19a01925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333ec8be821162fccab8278b03b0da1f19a01925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/333ec8be821162fccab8278b03b0da1f19a01925"
      },
      {
        "sha": "30450a1bd5d278e285f50a7e4cfc755545960e92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30450a1bd5d278e285f50a7e4cfc755545960e92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30450a1bd5d278e285f50a7e4cfc755545960e92"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2079d2ed2be7d6f409d55b3d925e08633fb86d55",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
        "patch": "@@ -84,11 +84,14 @@ fi\n DOCKER_EXEC echo \"Free disk space:\"\n DOCKER_EXEC df -h\n \n-if [ ! -d ${DIR_QA_ASSETS} ]; then\n-  DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n+  if [ ! -d ${DIR_QA_ASSETS} ]; then\n+    DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+  fi\n+\n+  export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+  export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n fi\n-export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n-export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n "
      }
    ]
  },
  {
    "sha": "67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzY2OWFiNDI1YjUyYTJiNmJlM2QyZjNiM2I3ZTM5MzliNjc2YTJj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-06-27T07:17:27Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T09:16:47Z"
      },
      "message": "build: Fix Boost Process compatibility with mingw-w64 compiler\n\nBoost 1.71 has a broken compatibility with mingw-w64 compiler due to the\nadded __kernel_entry SAL annotations.",
      "tree": {
        "sha": "6d30fbe62086323a917059fe45fff59bfc4ba9b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d30fbe62086323a917059fe45fff59bfc4ba9b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDdh/8ACgkQQQEIES5+\nqB8CYxAAp0U/Z8hhswn6/2nK2fB20EvXvs8iReeBNxWMbpihdKtAUHA8SZ/qGsBQ\nOQhn9nLR9VXZKL8QW1erYlCuc/hcedhebjKMRR0Ekz6P5dDcQcPlfbzF89gmxPrv\ntTscGhUn4kyhUdP7qYJFQT7Zxl750NCHryGDQF+CnUABiEmjmclJcDTvoXGUHmDk\nCmhkdXAtxYjCm8XXeBRo7bPe7HJazHdkb4dhBb5dfRo1ZkUhcG+BZ7l9p9nLp1I2\ni88bnZUmkfPOLUNsdVBqnFMTC0HXfZ8BjDVtUETmvY8plB7nndFAdGd+0RL9dBSn\nHfEkk6i58ZqrZlV0r4NWIP/eSJ1kZPyr6SBKqDdzA6WG9wltsWysZqx5xa9obvHG\n7lVsWOXMqyaOwAcM4AtF9xJ9WKDG2x6y8evJ+sHrnvPs2V/Y4KgvVHO+TtgpF9J2\n037r2IphdkyvLXsgLjlrH8yGP85mfbieMEJZzeavsi0s5g9mmP6bItVGXYRh/C46\nLPAiztqBu5uZRoqBA7kDrQdpbBW4B4bbWPr12b9MGUyeMWU/fR4yFPDR/bVQTgox\nXLnuELGT43zKqonGs+Cypu/kanHLRoe9RjmJ2JxGFCCGTjYryqozvNKg8Out+nRw\ncYflyQqpddNG1T3NK90MKCOKqX7PYYn4eLir4FCivVEiDtV65Xo=\n=2/9C\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d30fbe62086323a917059fe45fff59bfc4ba9b2\nparent 333ec8be821162fccab8278b03b0da1f19a01925\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1624778247 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625131007 +0300\n\nbuild: Fix Boost Process compatibility with mingw-w64 compiler\n\nBoost 1.71 has a broken compatibility with mingw-w64 compiler due to the\nadded __kernel_entry SAL annotations.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "333ec8be821162fccab8278b03b0da1f19a01925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333ec8be821162fccab8278b03b0da1f19a01925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/333ec8be821162fccab8278b03b0da1f19a01925"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e97eab2c00fc92fccb8135f12c1e68fba5d4d736",
        "filename": "src/test/system_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c/src/test/system_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c/src/test/system_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/system_tests.cpp?ref=67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
        "patch": "@@ -7,6 +7,11 @@\n #include <univalue.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n+#if defined(WIN32) && !defined(__kernel_entry)\n+// A workaround for boost 1.71 incompatibility with mingw-w64 compiler.\n+// For details see https://github.com/bitcoin/bitcoin/pull/22348.\n+#define __kernel_entry\n+#endif\n #include <boost/process.hpp>\n #endif // ENABLE_EXTERNAL_SIGNER\n "
      },
      {
        "sha": "258ba2f23550afd09495396d6a1dd25401195338",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
        "patch": "@@ -6,6 +6,11 @@\n #include <util/system.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n+#if defined(WIN32) && !defined(__kernel_entry)\n+// A workaround for boost 1.71 incompatibility with mingw-w64 compiler.\n+// For details see https://github.com/bitcoin/bitcoin/pull/22348.\n+#define __kernel_entry\n+#endif\n #include <boost/process.hpp>\n #endif // ENABLE_EXTERNAL_SIGNER\n "
      }
    ]
  },
  {
    "sha": "fa46e489820b8d663cf76001da74125b2140a3a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ2ZTQ4OTgyMGI4ZDY2M2NmNzYwMDFkYTc0MTI1YjIxNDBhM2E2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T09:16:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T10:03:32Z"
      },
      "message": "Merge bitcoin/bitcoin#22379: wallet: erase spkmans rather than setting to nullptr\n\nb945a31afac63010fce782b8fbca96dee6b458c5 wallet: erase spkmans rather than setting to nullptr (Andrew Chow)\n\nPull request description:\n\n  In many places in ScriptPubKeyMan managing code, we assume that the ScriptPubKeyMan being retrieved actually exists and is not a nullptr. Thus removing a ScriptPubKeyMan requires erasing the object from the map rather than setting it to a nullptr.\n\n  This fixes a segmentation fault that can be reached with `test/functional/wallet_descriptors.py --descriptors`\n\nACKs for top commit:\n  S3RK:\n    ACK b945a31\n\nTree-SHA512: 344a4cf9b1c168428750c751dcd24c52032506f20c81977fe93c4b5307ea209de72bb62a9c5284820f225b03acdc9573fceb734833d29b82f49d5a799ddcaea7",
      "tree": {
        "sha": "ce52774465e67945098118a2636049d7e6d761bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce52774465e67945098118a2636049d7e6d761bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa46e489820b8d663cf76001da74125b2140a3a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDdkvQACgkQLuufXMCV\nJsG7JA//dPg5NjOQ3Z/A8tPjCEy1b44PdBTfrvkJyc5BFO/YvWtwv8FyqXsq+t/M\nN9O2hw/MPaxHBpB2ozMbf//bQ7US7UbgllbM/GzfkQEVBjk1oMOW8CTC+L2W+I0G\nnmgC3eKyI3kxr8LEVvHLyPg6P0CNOrUnr0fo7BK9VW2pg+VBk+GWMM9+wbnMjsHA\nyTYFWUemc0whUj1x2INBLDJno32PoiM6A4S/+Ut7XI4BOb0oHdiyLw2goeh6lqR4\nH58lr8WcKfam/vr9hrqouNlPiU9sCcB4JvXPPq4Gnn9qmwqPrTNS71mjgRCcWSZd\nR5SHIU+/EYDE7UNXTiUZ42Hug9mDJtr1kXtEVKfXfS8WVKNl/YfdAOhLO8Y+UBTr\nVm4YwZKv7t3bhVqiv5tMnY9d6aDKIAVg41heSpDFJtgGDq4HuJDsUYZJ2cPzsTJ6\nLA6d+t6pBdrA1D5RIC9CSuik37lJV0qX/kOs25B5HFddS+oMUMsZZu5bibdolcRz\nEXo0ihtBX4hPfqLjpWvwcPItFI3KM6K0yrSwYhLWdjH0Mk7G9PSVWYiKzh6i27XE\n8PFgyXN419olgqM0soEOFhczFM8kPV6NV3WuKFNPdymIntMhqXgEvyIMKg0ZmN1o\nk0Yt3CbAksYsxxUXnk/ZMHLYNA38CNvTCMBt9R2PU+1OiI9UnjM=\n=sepp\n-----END PGP SIGNATURE-----",
        "payload": "tree ce52774465e67945098118a2636049d7e6d761bf\nparent 3ef2d400fa42072a2cfe1cb51796c329e33ab8c5\nparent b945a31afac63010fce782b8fbca96dee6b458c5\nauthor fanquake <fanquake@gmail.com> 1625130999 +0800\ncommitter fanquake <fanquake@gmail.com> 1625133812 +0800\n\nMerge bitcoin/bitcoin#22379: wallet: erase spkmans rather than setting to nullptr\n\nb945a31afac63010fce782b8fbca96dee6b458c5 wallet: erase spkmans rather than setting to nullptr (Andrew Chow)\n\nPull request description:\n\n  In many places in ScriptPubKeyMan managing code, we assume that the ScriptPubKeyMan being retrieved actually exists and is not a nullptr. Thus removing a ScriptPubKeyMan requires erasing the object from the map rather than setting it to a nullptr.\n\n  This fixes a segmentation fault that can be reached with `test/functional/wallet_descriptors.py --descriptors`\n\nACKs for top commit:\n  S3RK:\n    ACK b945a31\n\nTree-SHA512: 344a4cf9b1c168428750c751dcd24c52032506f20c81977fe93c4b5307ea209de72bb62a9c5284820f225b03acdc9573fceb734833d29b82f49d5a799ddcaea7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa46e489820b8d663cf76001da74125b2140a3a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa46e489820b8d663cf76001da74125b2140a3a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa46e489820b8d663cf76001da74125b2140a3a6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ef2d400fa42072a2cfe1cb51796c329e33ab8c5"
      },
      {
        "sha": "b945a31afac63010fce782b8fbca96dee6b458c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b945a31afac63010fce782b8fbca96dee6b458c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b945a31afac63010fce782b8fbca96dee6b458c5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "173609e995c29b6441540d0be6d5989ab8645870",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa46e489820b8d663cf76001da74125b2140a3a6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa46e489820b8d663cf76001da74125b2140a3a6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa46e489820b8d663cf76001da74125b2140a3a6",
        "patch": "@@ -3184,7 +3184,7 @@ void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool intern\n     spk_mans[type] = spk_man;\n \n     if (spk_mans_other[type] == spk_man) {\n-        spk_mans_other[type] = nullptr;\n+        spk_mans_other.erase(type);\n     }\n \n     NotifyCanGetAddressesChanged();\n@@ -3201,7 +3201,7 @@ void CWallet::DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool intern\n         }\n \n         auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n-        spk_mans[type] = nullptr;\n+        spk_mans.erase(type);\n     }\n \n     NotifyCanGetAddressesChanged();"
      }
    ]
  },
  {
    "sha": "185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODVhY2RiNWU4MThlY2RjZjEzNjFmODQwN2Y1YmRiMDZhZDc5ZGY4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T11:04:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T11:11:20Z"
      },
      "message": "Merge bitcoin/bitcoin#22334: wallet: do not spam about non-existent spk managers\n\n6084d2caed9b2c70c0f19898c33ecb141fe603c8 wallet: do not spam about non-existent spk managers (S3RK)\n\nPull request description:\n\n  Avoid spam in logs during `loadwallet`, `listdescriptors` and probably other commands as well.\n\n  **`loadwallet` Before:**\n  ```\n  2021-06-24T06:31:45Z init message: Loading wallet\u2026\n  2021-06-24T06:31:45Z [desc] Wallet File Version = 169900\n  2021-06-24T06:31:45Z [desc] Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total. Unknown wallet records: 0\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Wallet completed loading in             197ms\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] setKeyPool.size() = 0\n  2021-06-24T06:31:45Z [desc] mapWallet.size() = 0\n  2021-06-24T06:31:45Z [desc] m_address_book.size() = 0\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  {\n    \"name\": \"desc\",\n    \"warning\": \"\"\n  }\n  ```\n\n  **After:**\n  ```\n  2021-06-24T06:26:58Z init message: Loading wallet\u2026\n  2021-06-24T06:26:58Z [desc] Wallet File Version = 169900\n  2021-06-24T06:26:58Z [desc] Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total. Unknown wallet records: 0\n  2021-06-24T06:26:58Z [desc] Wallet completed loading in             158ms\n  2021-06-24T06:26:58Z [desc] setKeyPool.size() = 0\n  2021-06-24T06:26:58Z [desc] mapWallet.size() = 0\n  2021-06-24T06:26:58Z [desc] m_address_book.size() = 0\n  {\n    \"name\": \"desc\",\n    \"warning\": \"\"\n  }\n  ```\n\nACKs for top commit:\n  achow101:\n    ACK 6084d2caed9b2c70c0f19898c33ecb141fe603c8\n\nTree-SHA512: c7d7345c3182a575db088fd731b7f6e428c42e4f3f2e10d5adb50bf74a2defe88768e65ebb91a08590be48cf766a5697e36fafa73f68ffe45e76a60600f072e2",
      "tree": {
        "sha": "ced9dd66d5d4f4420c3ef1fd5b0490e7d8ad79c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ced9dd66d5d4f4420c3ef1fd5b0490e7d8ad79c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDdotgACgkQLuufXMCV\nJsHfjA//VZEulQjRK508kJWv0nFI+MHtIJI8/3XoKUCBOlhf82Ym9A4hdNB+ki/F\neLDpFlX6MppYiYp509rzK7tbmaZev+dfkJbbTvVBbZlAkh0TVp1w0FoKt+6m3hzd\nE9+S4gyHtaROr21GpaWA9aM958BWsA11BR4gNeq+MCiKntGyNCoU2OaSLf+03yqq\nhqgjT+YxIkABSry2zRU1roPxCgWTLsuYlyQCuaagq9NHp75MuNVPglx9OvPLMu+L\nGz1tH0nlsbgIqBIdjYXLUi+bI7qAbUbGLUWjEmMjf1A7rn1lqoVStBzKAUw869rm\nM6oEYZPPyFj7vkcRobmYrhaGIxn22GRUhAvHNE17H4Rj57a5/t+GbYTiVG0SKv1R\n9qfyxp4j9Ouwt6Af5d9CJ6E3FRww+ccp9DQJbv+He0c9QqbT+vqCPn5C5fMTvQYU\nGCl/kBZ2TQAtEoq4yBtt+ga/N2fZ5QKbZQKQLIf4Xu9AZSDxPMtFH9tdOAGLh/6I\nS+48HJzpJh8TloDnaVcnOZwyMyBpRbzs2Ckty8nptZ3IoOap78eEIsaOKxIclZ/S\nfoAiWDf0cqZnTQrqdZ7NDt/t1/Ps9dyEErUU7EsUQyij+7AkJypDisoF/uYTfw0q\n+VCPhbiU+SRTIbxBNuSnlqPkC70DpXtNoFxfWKHXlFfQnGRYwDA=\n=urSl\n-----END PGP SIGNATURE-----",
        "payload": "tree ced9dd66d5d4f4420c3ef1fd5b0490e7d8ad79c2\nparent fa46e489820b8d663cf76001da74125b2140a3a6\nparent 6084d2caed9b2c70c0f19898c33ecb141fe603c8\nauthor fanquake <fanquake@gmail.com> 1625137469 +0800\ncommitter fanquake <fanquake@gmail.com> 1625137880 +0800\n\nMerge bitcoin/bitcoin#22334: wallet: do not spam about non-existent spk managers\n\n6084d2caed9b2c70c0f19898c33ecb141fe603c8 wallet: do not spam about non-existent spk managers (S3RK)\n\nPull request description:\n\n  Avoid spam in logs during `loadwallet`, `listdescriptors` and probably other commands as well.\n\n  **`loadwallet` Before:**\n  ```\n  2021-06-24T06:31:45Z init message: Loading wallet\u2026\n  2021-06-24T06:31:45Z [desc] Wallet File Version = 169900\n  2021-06-24T06:31:45Z [desc] Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total. Unknown wallet records: 0\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Wallet completed loading in             197ms\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] setKeyPool.size() = 0\n  2021-06-24T06:31:45Z [desc] mapWallet.size() = 0\n  2021-06-24T06:31:45Z [desc] m_address_book.size() = 0\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] External scriptPubKey Manager for output type 2 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 0 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 1 does not exist\n  2021-06-24T06:31:45Z [desc] Internal scriptPubKey Manager for output type 2 does not exist\n  {\n    \"name\": \"desc\",\n    \"warning\": \"\"\n  }\n  ```\n\n  **After:**\n  ```\n  2021-06-24T06:26:58Z init message: Loading wallet\u2026\n  2021-06-24T06:26:58Z [desc] Wallet File Version = 169900\n  2021-06-24T06:26:58Z [desc] Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total. Unknown wallet records: 0\n  2021-06-24T06:26:58Z [desc] Wallet completed loading in             158ms\n  2021-06-24T06:26:58Z [desc] setKeyPool.size() = 0\n  2021-06-24T06:26:58Z [desc] mapWallet.size() = 0\n  2021-06-24T06:26:58Z [desc] m_address_book.size() = 0\n  {\n    \"name\": \"desc\",\n    \"warning\": \"\"\n  }\n  ```\n\nACKs for top commit:\n  achow101:\n    ACK 6084d2caed9b2c70c0f19898c33ecb141fe603c8\n\nTree-SHA512: c7d7345c3182a575db088fd731b7f6e428c42e4f3f2e10d5adb50bf74a2defe88768e65ebb91a08590be48cf766a5697e36fafa73f68ffe45e76a60600f072e2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/185acdb5e818ecdcf1361f8407f5bdb06ad79df8/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa46e489820b8d663cf76001da74125b2140a3a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa46e489820b8d663cf76001da74125b2140a3a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa46e489820b8d663cf76001da74125b2140a3a6"
      },
      {
        "sha": "6084d2caed9b2c70c0f19898c33ecb141fe603c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6084d2caed9b2c70c0f19898c33ecb141fe603c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6084d2caed9b2c70c0f19898c33ecb141fe603c8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "27565aefc9a5e61f2081d60993b04eda1d251bb6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/185acdb5e818ecdcf1361f8407f5bdb06ad79df8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/185acdb5e818ecdcf1361f8407f5bdb06ad79df8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
        "patch": "@@ -2982,7 +2982,6 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool intern\n     const std::map<OutputType, ScriptPubKeyMan*>& spk_managers = internal ? m_internal_spk_managers : m_external_spk_managers;\n     std::map<OutputType, ScriptPubKeyMan*>::const_iterator it = spk_managers.find(type);\n     if (it == spk_managers.end()) {\n-        WalletLogPrintf(\"%s scriptPubKey Manager for output type %d does not exist\\n\", internal ? \"Internal\" : \"External\", static_cast<int>(type));\n         return nullptr;\n     }\n     return it->second;"
      }
    ]
  },
  {
    "sha": "2749613020ed96a4e9204f8b98c44524b0a62d0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzQ5NjEzMDIwZWQ5NmE0ZTkyMDRmOGI5OGM0NDUyNGIwYTYyZDBk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T12:16:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T12:17:11Z"
      },
      "message": "Merge bitcoin/bitcoin#22348: build: Fix cross build for Windows with Boost Process\n\n67669ab425b52a2b6be3d2f3b3b7e3939b676a2c build: Fix Boost Process compatibility with mingw-w64 compiler (Hennadii Stepanov)\n\nPull request description:\n\n  On master (9c3751a0c940228c46461c4191f1a57153cb9037) the cross build for Win64 is broken if configured with `--enable-external-signer`:\n  ```\n  ...\n    CXX      crypto/libbitcoin_crypto_base_a-chacha_poly_aead.o\n  In file included from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handles.hpp:11,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/used_handles.hpp:17,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/async_in.hpp:20,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/async.hpp:49,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process.hpp:23,\n                   from util/system.cpp:9:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:208:51: error: expected \u2018)\u2019 before \u2018*\u2019 token\n    208 | typedef ::boost::winapi::NTSTATUS_ (__kernel_entry *nt_system_query_information_p )(\n        |                                    ~              ^~\n        |                                                   )\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:223:51: error: expected \u2018)\u2019 before \u2018*\u2019 token\n    223 | typedef ::boost::winapi::NTSTATUS_ (__kernel_entry *nt_query_object_p )(\n        |                                    ~              ^~\n        |                                                   )\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp: In function \u2018boost::winapi::NTSTATUS_ boost::process::detail::windows::workaround::nt_system_query_information(boost::process::detail::windows::workaround::SYSTEM_INFORMATION_CLASS_, void*, boost::winapi::ULONG_, boost::winapi::PULONG_)\u2019:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:239:12: error: \u2018nt_system_query_information_p\u2019 does not name a type; did you mean \u2018nt_system_query_information\u2019?\n    239 |     static nt_system_query_information_p f = reinterpret_cast<nt_system_query_information_p>(::boost::winapi::get_proc_address(h, \"NtQuerySystemInformation\"));\n        |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        |            nt_system_query_information\n  In file included from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handles.hpp:11,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/used_handles.hpp:17,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/async_in.hpp:20,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/async.hpp:49,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process.hpp:23,\n                   from util/system.cpp:9:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:241:14: error: \u2018f\u2019 was not declared in this scope\n    241 |     return (*f)(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);\n        |              ^\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp: In function \u2018boost::winapi::BOOL_ boost::process::detail::windows::workaround::nt_query_object(boost::winapi::HANDLE_, boost::process::detail::windows::workaround::OBJECT_INFORMATION_CLASS_, void*, boost::winapi::ULONG_, boost::winapi::PULONG_)\u2019:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:253:12: error: \u2018nt_query_object_p\u2019 does not name a type; did you mean \u2018nt_query_object\u2019?\n    253 |     static nt_query_object_p f = reinterpret_cast<nt_query_object_p>(::boost::winapi::get_proc_address(h, \"NtQueryObject\"));\n        |            ^~~~~~~~~~~~~~~~~\n        |            nt_query_object\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:255:14: error: \u2018f\u2019 was not declared in this scope\n    255 |     return (*f)(Handle, ObjectInformationClass, ObjectInformation, ObjectInformationLength, ReturnLength);\n        |              ^\n  make[2]: *** [Makefile:9906: util/libbitcoin_util_a-system.o] Error 1\n  make[2]: *** Waiting for unfinished jobs....\n    CXX      crypto/libbitcoin_crypto_base_a-chacha20.o\n  make[2]: Leaving directory '/home/hebasto/GitHub/bitcoin/src'\n  make[1]: *** [Makefile:16141: all-recursive] Error 1\n  make[1]: Leaving directory '/home/hebasto/GitHub/bitcoin/src'\n  make: *** [Makefile:820: all-recursive] Error 1\n  ```\n\n  The upstream bug: https://github.com/boostorg/process/issues/96\n  Also see: https://stackoverflow.com/a/59338759\n\n  https://github.com/bitcoin/bitcoin/pull/22348#issuecomment-871061160:\n  > [This commit](https://github.com/boostorg/process/commit/7fc41b2815822b632d524d5c17897abbdf0c4653), containing the `__kernel_entry` [SAL annotations](https://docs.microsoft.com/en-us/cpp/code-quality/using-sal-annotations-to-reduce-c-cpp-code-defects?view=msvc-160) was included in Boost Process as part of the `1.71.0` release, which broke support for compiling with mingw-w64 because it doesn't define the `__kernel_entry` SAL annotation (but it does define some others, i.e see [`sal.h`](https://github.com/mirror/mingw-w64/blob/master/mingw-w64-headers/include/sal.h)).\n  >\n  > A [commit was made](https://github.com/boostorg/process/pull/171/commits/d7a721ee0d6859847947f60911259e2c34b0d066) to remove the annotations, however, it hasn't made it into either of the two Boost releases that have happened since (1.75.0 & 1.76.0). Meaning that this is currently needed for all versions of Boost process from 1.71.0 onwards.\n\nACKs for top commit:\n  fanquake:\n    ACK 67669ab425b52a2b6be3d2f3b3b7e3939b676a2c - thanks for updating this.\n\nTree-SHA512: 5931ca1fb77ce38c042cf5a7556add024ea2386c208bf26c792a8ca4a771d97fac9802c32fa8aa2e3de1ad35f3362d8c066f0a83ee675859d226c602fd0bcf93",
      "tree": {
        "sha": "4e3440432cc4f61f10a9c1320aa73212b181d50e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e3440432cc4f61f10a9c1320aa73212b181d50e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2749613020ed96a4e9204f8b98c44524b0a62d0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDdskcACgkQLuufXMCV\nJsE+uA//Rs4sAV3dB9kvc76Y7FhERT1ZjFxqGZx3kIBN+JDyA2o+qp2pYF16pUaV\nUKtA5+ELZeCuDGOmDCmIf2dUy25ekMzwqefvkUYpEdTl4e8JndIZIwEdvyL2rZDH\nL2TMUQz+rzHlr/tw+TS7fulQLA9BSf6p4XqWz7hCmdWlKbCLrXY4M6o1RbL8ruYM\nuSPAzxnIehq/UcW/ZUzzs7lMKHCEZ3PSsCUXotyrugD9yg9wF/KEJzaWQw+ZNXKZ\nQTLwztCa1dCmk4CRNMQHqXlaQcClCAmtQ6Ywirmu/SfepHrhMuCBZ360o+7MJV0p\nR/O5eWMvfinfuXgrvC+rnTUQF66skGt5IisZ8tKOq7A8MnvWQLylcWABsNXBKxvj\nnf1DwHVxAmdEglO9BM2f0pBK8A1DwMh0e3GMLQmFuQHwh5FYmIqLXzCEYKIHd+Rl\nh//LiVBh1dXvH8kcLN+uvyKoZy+duYzYsvRzbjx4svqOKRyim6W0ctg4L+sa1kvr\nAz+9ZqSYFiuv2X8EkQcxSLwIFwT84bAjXHSBnkjfZ24ZpINu1z31cXgT4rphdsv9\noVHh7seJ5BCTkeV2IYXI3cHrn2Zl3VqypHht5fH1uA5dP+cVFsa3nIMRvOvL8+2Z\nCcX67A/PoB2x+sGEBspuxHmiEqWBasbs4Y4yTd1InE7hkbhb6lw=\n=Chdf\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e3440432cc4f61f10a9c1320aa73212b181d50e\nparent 185acdb5e818ecdcf1361f8407f5bdb06ad79df8\nparent 67669ab425b52a2b6be3d2f3b3b7e3939b676a2c\nauthor fanquake <fanquake@gmail.com> 1625141770 +0800\ncommitter fanquake <fanquake@gmail.com> 1625141831 +0800\n\nMerge bitcoin/bitcoin#22348: build: Fix cross build for Windows with Boost Process\n\n67669ab425b52a2b6be3d2f3b3b7e3939b676a2c build: Fix Boost Process compatibility with mingw-w64 compiler (Hennadii Stepanov)\n\nPull request description:\n\n  On master (9c3751a0c940228c46461c4191f1a57153cb9037) the cross build for Win64 is broken if configured with `--enable-external-signer`:\n  ```\n  ...\n    CXX      crypto/libbitcoin_crypto_base_a-chacha_poly_aead.o\n  In file included from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handles.hpp:11,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/used_handles.hpp:17,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/async_in.hpp:20,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/async.hpp:49,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process.hpp:23,\n                   from util/system.cpp:9:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:208:51: error: expected \u2018)\u2019 before \u2018*\u2019 token\n    208 | typedef ::boost::winapi::NTSTATUS_ (__kernel_entry *nt_system_query_information_p )(\n        |                                    ~              ^~\n        |                                                   )\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:223:51: error: expected \u2018)\u2019 before \u2018*\u2019 token\n    223 | typedef ::boost::winapi::NTSTATUS_ (__kernel_entry *nt_query_object_p )(\n        |                                    ~              ^~\n        |                                                   )\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp: In function \u2018boost::winapi::NTSTATUS_ boost::process::detail::windows::workaround::nt_system_query_information(boost::process::detail::windows::workaround::SYSTEM_INFORMATION_CLASS_, void*, boost::winapi::ULONG_, boost::winapi::PULONG_)\u2019:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:239:12: error: \u2018nt_system_query_information_p\u2019 does not name a type; did you mean \u2018nt_system_query_information\u2019?\n    239 |     static nt_system_query_information_p f = reinterpret_cast<nt_system_query_information_p>(::boost::winapi::get_proc_address(h, \"NtQuerySystemInformation\"));\n        |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        |            nt_system_query_information\n  In file included from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handles.hpp:11,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/used_handles.hpp:17,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/async_in.hpp:20,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/async.hpp:49,\n                   from /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process.hpp:23,\n                   from util/system.cpp:9:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:241:14: error: \u2018f\u2019 was not declared in this scope\n    241 |     return (*f)(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);\n        |              ^\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp: In function \u2018boost::winapi::BOOL_ boost::process::detail::windows::workaround::nt_query_object(boost::winapi::HANDLE_, boost::process::detail::windows::workaround::OBJECT_INFORMATION_CLASS_, void*, boost::winapi::ULONG_, boost::winapi::PULONG_)\u2019:\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:253:12: error: \u2018nt_query_object_p\u2019 does not name a type; did you mean \u2018nt_query_object\u2019?\n    253 |     static nt_query_object_p f = reinterpret_cast<nt_query_object_p>(::boost::winapi::get_proc_address(h, \"NtQueryObject\"));\n        |            ^~~~~~~~~~~~~~~~~\n        |            nt_query_object\n  /home/hebasto/GitHub/bitcoin/depends/x86_64-w64-mingw32/include/boost/process/detail/windows/handle_workaround.hpp:255:14: error: \u2018f\u2019 was not declared in this scope\n    255 |     return (*f)(Handle, ObjectInformationClass, ObjectInformation, ObjectInformationLength, ReturnLength);\n        |              ^\n  make[2]: *** [Makefile:9906: util/libbitcoin_util_a-system.o] Error 1\n  make[2]: *** Waiting for unfinished jobs....\n    CXX      crypto/libbitcoin_crypto_base_a-chacha20.o\n  make[2]: Leaving directory '/home/hebasto/GitHub/bitcoin/src'\n  make[1]: *** [Makefile:16141: all-recursive] Error 1\n  make[1]: Leaving directory '/home/hebasto/GitHub/bitcoin/src'\n  make: *** [Makefile:820: all-recursive] Error 1\n  ```\n\n  The upstream bug: https://github.com/boostorg/process/issues/96\n  Also see: https://stackoverflow.com/a/59338759\n\n  https://github.com/bitcoin/bitcoin/pull/22348#issuecomment-871061160:\n  > [This commit](https://github.com/boostorg/process/commit/7fc41b2815822b632d524d5c17897abbdf0c4653), containing the `__kernel_entry` [SAL annotations](https://docs.microsoft.com/en-us/cpp/code-quality/using-sal-annotations-to-reduce-c-cpp-code-defects?view=msvc-160) was included in Boost Process as part of the `1.71.0` release, which broke support for compiling with mingw-w64 because it doesn't define the `__kernel_entry` SAL annotation (but it does define some others, i.e see [`sal.h`](https://github.com/mirror/mingw-w64/blob/master/mingw-w64-headers/include/sal.h)).\n  >\n  > A [commit was made](https://github.com/boostorg/process/pull/171/commits/d7a721ee0d6859847947f60911259e2c34b0d066) to remove the annotations, however, it hasn't made it into either of the two Boost releases that have happened since (1.75.0 & 1.76.0). Meaning that this is currently needed for all versions of Boost process from 1.71.0 onwards.\n\nACKs for top commit:\n  fanquake:\n    ACK 67669ab425b52a2b6be3d2f3b3b7e3939b676a2c - thanks for updating this.\n\nTree-SHA512: 5931ca1fb77ce38c042cf5a7556add024ea2386c208bf26c792a8ca4a771d97fac9802c32fa8aa2e3de1ad35f3362d8c066f0a83ee675859d226c602fd0bcf93\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2749613020ed96a4e9204f8b98c44524b0a62d0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2749613020ed96a4e9204f8b98c44524b0a62d0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2749613020ed96a4e9204f8b98c44524b0a62d0d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/185acdb5e818ecdcf1361f8407f5bdb06ad79df8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/185acdb5e818ecdcf1361f8407f5bdb06ad79df8"
      },
      {
        "sha": "67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67669ab425b52a2b6be3d2f3b3b7e3939b676a2c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e97eab2c00fc92fccb8135f12c1e68fba5d4d736",
        "filename": "src/test/system_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2749613020ed96a4e9204f8b98c44524b0a62d0d/src/test/system_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2749613020ed96a4e9204f8b98c44524b0a62d0d/src/test/system_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/system_tests.cpp?ref=2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "patch": "@@ -7,6 +7,11 @@\n #include <univalue.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n+#if defined(WIN32) && !defined(__kernel_entry)\n+// A workaround for boost 1.71 incompatibility with mingw-w64 compiler.\n+// For details see https://github.com/bitcoin/bitcoin/pull/22348.\n+#define __kernel_entry\n+#endif\n #include <boost/process.hpp>\n #endif // ENABLE_EXTERNAL_SIGNER\n "
      },
      {
        "sha": "258ba2f23550afd09495396d6a1dd25401195338",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2749613020ed96a4e9204f8b98c44524b0a62d0d/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2749613020ed96a4e9204f8b98c44524b0a62d0d/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "patch": "@@ -6,6 +6,11 @@\n #include <util/system.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n+#if defined(WIN32) && !defined(__kernel_entry)\n+// A workaround for boost 1.71 incompatibility with mingw-w64 compiler.\n+// For details see https://github.com/bitcoin/bitcoin/pull/22348.\n+#define __kernel_entry\n+#endif\n #include <boost/process.hpp>\n #endif // ENABLE_EXTERNAL_SIGNER\n "
      }
    ]
  },
  {
    "sha": "c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2Y3NGYxYTdmZTZhZmQ0ODUxNzA1NzUxZjNjMGJhMjc4MDE2YWM1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T14:16:14Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T14:16:14Z"
      },
      "message": "Translations update\n\nTranslation string freeze, see Release schedule for 22.0.",
      "tree": {
        "sha": "3d76ccfdb371a53510cc7b371c9fb5af60c056c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d76ccfdb371a53510cc7b371c9fb5af60c056c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDdzi4ACgkQQQEIES5+\nqB9sUxAAhydzmwuTum9nMK81AcmHCiMOvbt9tUtIaCfmass8PR2quwsFz7dRtf0Q\nT5xtuEpwX4ozwmSXmxlmPm75NqxruXCU9FjWJ/S5OoQjESvWK7c9nRZlOhA9LVMb\nAvsZ4EO0S2ZV6fDI0e+JMkb2exanMys0kIUpwgOUnX/qlBsCzcV42cg3ltBYlQmb\n2cMxhL/IxePSEbNEZ7d3PHwvZXhgZvquwlKqPCcWgCwLil3C/MyKjn1UT7kBZoQI\nGDjghm9LEIp9u0AGsNmsQxmnyEQ1cxx8cp2zS6AmdRArlE46GK/PF0TuqzwB51sD\nxSV1gZFhyUgrmoyji2XgQXtOWv2h1kOvoMglrrgjHR5gqVyR59I9HZidlACjTZfg\nxx7Tc44o2vgRSqgaAapD2UKofqPQk4gHzdtyrvAfVydVsEbWVC3/jzGwRZqcodF8\nFCVtyWFfbZDIkclFqeOb7WdoDWAK5ersLtz4Xg1ODFA17P0UtBqaOlrWqd1jVifc\nee99RrbbZq7U8Y1/HEUrlqC8kHnqPLxC6EjcFD9D+I/F2y9xZv5jmdXh0G7WOQXd\nvXAQ2pAHH9voj53kmrMldJR4eLz8RDK7r0BU1SEDuGNFwyVXRErL1ZktWgRocWKQ\nrB382jI0b8KTgU7QBFfwcX3Mvu1pPvVJhQCVkVhWCEzz8MphjCA=\n=kom0\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d76ccfdb371a53510cc7b371c9fb5af60c056c0\nparent 2749613020ed96a4e9204f8b98c44524b0a62d0d\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625148974 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625148974 +0300\n\nTranslations update\n\nTranslation string freeze, see Release schedule for 22.0.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2749613020ed96a4e9204f8b98c44524b0a62d0d"
      }
    ],
    "stats": {
      "total": 3424,
      "additions": 1819,
      "deletions": 1605
    },
    "files": [
      {
        "sha": "d2d4079ea9748de34f715279d66faebeb9bb4f2f",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
        "patch": "@@ -42,6 +42,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Dumpfile version is not supported. This version of bitcoin-wallet \"\n \"only supports version 1 dumpfiles. Got dumpfile with version %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \"\n+\"\\\"bech32\\\" address types\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -\"\n@@ -103,9 +106,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Total length of network version string (%i) exceeds maximum length (%i). \"\n \"Reduce the number or size of uacomments.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Transaction needs a change address, but we can't generate it. Please call \"\n-\"keypoolrefill first.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to replay blocks. You will need to rebuild the database using -\"\n \"reindex-chainstate.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -160,6 +160,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got key that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got value that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Missing checksum\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: No %s addresses available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to parse version %u as a uint32_t\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to write record to new wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n@@ -216,6 +217,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amount too small\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must not be negative\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction has too long of a mempool chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction must have at least one recipient\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction needs a change address, but we can't generate it. %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n@@ -228,12 +230,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown -blockfilterindex value %s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown address type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown change type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading txindex database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n };"
      },
      {
        "sha": "7026f49c016de69dcefe13755f99641c2966059e",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 240,
        "deletions": 134,
        "changes": 374,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
        "patch": "@@ -55,11 +55,12 @@\n     </message>\n     <message>\n         <location line=\"-30\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"+122\"/>\n         <source>&amp;Delete</source>\n         <translation>&amp;Delete</translation>\n     </message>\n     <message>\n-        <location filename=\"../addressbookpage.cpp\" line=\"+84\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"-38\"/>\n         <source>Choose the address to send coins to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -96,26 +97,21 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n     </message>\n     <message>\n         <location line=\"+8\"/>\n-        <source>Copy Address</source>\n+        <source>&amp;Copy Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Label</source>\n+        <source>Copy &amp;Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Edit</source>\n+        <source>&amp;Edit</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Delete</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+161\"/>\n+        <location line=\"+164\"/>\n         <source>Export Address List</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -317,7 +313,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>BitcoinApplication</name>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+420\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+421\"/>\n         <source>Runaway exception</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -405,18 +401,18 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+358\"/>\n+        <location line=\"+373\"/>\n         <source>Network activity disabled.</source>\n         <extracomment>A substring of the tooltip.</extracomment>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+426\"/>\n+        <location line=\"+424\"/>\n         <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1096\"/>\n+        <location line=\"-1109\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -546,7 +542,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"+422\"/>\n+        <location line=\"+437\"/>\n         <source>Syncing Headers (%1%)\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -576,7 +572,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-766\"/>\n+        <location line=\"-781\"/>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -596,7 +592,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+678\"/>\n+        <location line=\"+693\"/>\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation>\n             <numerusform>Processed %n block of transaction history.</numerusform>\n@@ -644,7 +640,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-715\"/>\n+        <location line=\"-730\"/>\n         <source>Load Partially Signed Bitcoin Transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -744,7 +740,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+248\"/>\n+        <location line=\"+263\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -792,7 +788,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+110\"/>\n+        <location line=\"+108\"/>\n         <source>Date: %1\n </source>\n         <translation type=\"unfinished\"></translation>\n@@ -956,34 +952,38 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n-        <source>Copy address</source>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+66\"/>\n+        <source>Copy amount</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-11\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <location line=\"+9\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy transaction ID</source>\n+        <location line=\"+1\"/>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Lock unspent</source>\n+        <source>L&amp;ock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Unlock unspent</source>\n+        <source>&amp;Unlock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -1061,12 +1061,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>CreateWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+253\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+254\"/>\n         <source>Creating Wallet &lt;b&gt;%1&lt;/b&gt;\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+31\"/>\n         <source>Create wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1075,6 +1075,11 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <source>Create wallet warning</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+16\"/>\n+        <source>Can&apos;t list signers</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>CreateWalletDialog</name>\n@@ -1139,15 +1144,31 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../createwalletdialog.cpp\" line=\"+21\"/>\n+        <location line=\"+7\"/>\n+        <source>Use an external signing device such as a hardware wallet. Configure the external signer script in wallet preferences first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>External signer</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location filename=\"../createwalletdialog.cpp\" line=\"+22\"/>\n         <source>Create</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+42\"/>\n+        <location line=\"+68\"/>\n         <source>Compiled without sqlite support (required for descriptor wallets)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+14\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -1472,7 +1493,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>OpenWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+32\"/>\n         <source>Open wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1530,7 +1551,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+171\"/>\n+        <location line=\"+201\"/>\n         <location line=\"+187\"/>\n         <source>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1579,7 +1600,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Network</translation>\n     </message>\n     <message>\n-        <location line=\"-188\"/>\n+        <location line=\"-218\"/>\n         <source>Prune &amp;block storage to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1629,7 +1650,22 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+10\"/>\n+        <source>External Signer (e.g. hardware wallet)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>&amp;External signer script path</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Full path to a Bitcoin Core compatible script (e.g. C:\\Downloads\\hwi.exe or /Users/you/Downloads/hwi.py). Beware: malware can steal your coins!</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+32\"/>\n         <source>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</source>\n         <translation>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</translation>\n     </message>\n@@ -1762,12 +1798,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Choose the default subdivision unit to show in the interface and when sending coins.</translation>\n     </message>\n     <message>\n-        <location line=\"-463\"/>\n+        <location line=\"-493\"/>\n         <source>Whether to show coin control features or not.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+260\"/>\n+        <location line=\"+290\"/>\n         <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor onion services.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1812,7 +1848,13 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+104\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+97\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+12\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1822,7 +1864,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+91\"/>\n+        <location line=\"+93\"/>\n         <source>Confirm options reset</source>\n         <translation>Confirm options reset</translation>\n     </message>\n@@ -1962,7 +2004,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../overviewpage.cpp\" line=\"+193\"/>\n+        <location filename=\"../overviewpage.cpp\" line=\"+188\"/>\n         <source>Privacy mode activated for the Overview tab. To unmask the values, uncheck Settings-&gt;Mask values.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2168,7 +2210,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.h\" line=\"+101\"/>\n+        <location filename=\"../peertablemodel.h\" line=\"+107\"/>\n         <source>User Agent</source>\n         <extracomment>Title of Peers Table column which contains the peer&apos;s User Agent string.</extracomment>\n         <translation type=\"unfinished\"></translation>\n@@ -2384,7 +2426,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+112\"/>\n         <source>Error: Specified data directory &quot;%1&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2418,12 +2460,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     <name>QRImageWidget</name>\n     <message>\n         <location filename=\"../qrimagewidget.cpp\" line=\"+30\"/>\n-        <source>Save Image\u2026</source>\n+        <source>&amp;Save Image\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Image</source>\n+        <source>&amp;Copy Image</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -2467,7 +2509,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+722\"/>\n+        <location line=\"+692\"/>\n         <location line=\"+26\"/>\n         <location line=\"+26\"/>\n         <location line=\"+23\"/>\n@@ -2490,12 +2532,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../rpcconsole.h\" line=\"+138\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"+139\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-1549\"/>\n+        <location line=\"-1519\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -2536,12 +2578,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+29\"/>\n-        <location line=\"+922\"/>\n+        <location line=\"+892\"/>\n         <source>Network</source>\n         <translation>Network</translation>\n     </message>\n     <message>\n-        <location line=\"-915\"/>\n+        <location line=\"-885\"/>\n         <source>Name</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2581,7 +2623,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+241\"/>\n+        <location line=\"+211\"/>\n         <source>&amp;Reset</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2609,7 +2651,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+68\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+1091\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+1124\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2644,13 +2686,13 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1516\"/>\n-        <location line=\"+1081\"/>\n+        <location line=\"-1486\"/>\n+        <location line=\"+1051\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1155\"/>\n+        <location line=\"-1125\"/>\n         <source>Node window</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2665,17 +2707,17 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+84\"/>\n+        <location line=\"+78\"/>\n         <source>Decrease font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+20\"/>\n         <source>Increase font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+558\"/>\n+        <location line=\"+546\"/>\n         <source>Permissions</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2780,7 +2822,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1288\"/>\n+        <location line=\"-1258\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -2795,7 +2837,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation>&amp;Console</translation>\n     </message>\n     <message>\n-        <location line=\"+217\"/>\n+        <location line=\"+187\"/>\n         <source>&amp;Network Traffic</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2815,12 +2857,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"-321\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"-291\"/>\n         <source>Debug log file</source>\n         <translation>Debug log file</translation>\n     </message>\n     <message>\n-        <location line=\"+155\"/>\n+        <location line=\"+125\"/>\n         <source>Clear console</source>\n         <translation>Clear console</translation>\n     </message>\n@@ -2850,12 +2892,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+40\"/>\n         <source>Never</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-417\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-429\"/>\n         <source>Inbound: initiated by peer</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2924,52 +2966,52 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+385\"/>\n-        <source>Network activity disabled</source>\n+        <location line=\"+150\"/>\n+        <source>&amp;Disconnect</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n-        <source>Executing command without any wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-2\"/>\n-        <source>Executing command using &quot;%1&quot; wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 d&amp;ay</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-319\"/>\n-        <source>Disconnect</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;week</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>1 hour</source>\n+        <source>1 &amp;year</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 day</source>\n+        <location line=\"+22\"/>\n+        <source>&amp;Unban</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 week</source>\n+        <location line=\"+221\"/>\n+        <source>Network activity disabled</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 year</source>\n+        <location line=\"+77\"/>\n+        <source>Executing command without any wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n-        <source>Unban</source>\n+        <location line=\"-2\"/>\n+        <source>Executing command using &quot;%1&quot; wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+150\"/>\n+        <location line=\"-146\"/>\n         <source>Welcome to the %1 RPC console.\n Use up and down arrows to navigate history, and %2 to clear screen.\n Use %3 and %4 to increase or decrease the font size.\n@@ -2997,7 +3039,7 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.h\" line=\"-38\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"-40\"/>\n         <source>Unknown</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3102,27 +3144,27 @@ For more information on using this console, type %6.\n     </message>\n     <message>\n         <location filename=\"../receivecoinsdialog.cpp\" line=\"+47\"/>\n-        <source>Copy URI</source>\n+        <source>Copy &amp;URI</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy address</source>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy message</source>\n+        <source>Copy &amp;message</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -3178,6 +3220,16 @@ For more information on using this console, type %6.\n         <source>Copy &amp;Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>&amp;Verify</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Verify this address on e.g. a hardware wallet screen</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n         <source>&amp;Save Image\u2026</source>\n@@ -3189,15 +3241,15 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-221\"/>\n+        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-234\"/>\n         <source>Payment information</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+30\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+32\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3236,7 +3288,7 @@ For more information on using this console, type %6.\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+674\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+738\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -3423,7 +3475,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-582\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-646\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3463,7 +3515,24 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n+        <location line=\"+30\"/>\n+        <source>Sign on device</source>\n+        <extracomment>&quot;device&quot; usually means a hardware wallet</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Connect your hardware wallet first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Set external signer script path in Options -&gt; Wallet</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Cr&amp;eate Unsigned</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3508,7 +3577,29 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+0\"/>\n+        <source>Sign and send</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+25\"/>\n+        <source>Sign failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer not found</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer failure</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+58\"/>\n         <source>Save Transaction Data</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3524,7 +3615,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-76\"/>\n+        <location line=\"+175\"/>\n+        <source>External balance:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-302\"/>\n         <source>or</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3569,12 +3665,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Send</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+229\"/>\n+        <location line=\"+283\"/>\n         <source>Watch-only balance:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4434,62 +4525,62 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+75\"/>\n-        <source>Abandon transaction</source>\n+        <location line=\"-26\"/>\n+        <source>Range\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-3\"/>\n-        <source>Increase transaction fee</source>\n+        <location line=\"+90\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy address</source>\n+        <location line=\"+1\"/>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy transaction ID</source>\n+        <source>Copy &amp;raw transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy raw transaction</source>\n+        <source>Copy full transaction &amp;details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy full transaction details</source>\n+        <source>&amp;Show transaction details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>Edit address label</source>\n+        <location line=\"+2\"/>\n+        <source>Increase transaction &amp;fee</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-6\"/>\n-        <source>Show transaction details</source>\n+        <location line=\"+3\"/>\n+        <source>A&amp;bandon transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-96\"/>\n-        <source>Range\u2026</source>\n+        <location line=\"+1\"/>\n+        <source>&amp;Edit address label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+276\"/>\n+        <location line=\"+174\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4576,7 +4667,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletController</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"-250\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"-262\"/>\n         <source>Close wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4604,7 +4695,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletFrame</name>\n     <message>\n-        <location filename=\"../walletframe.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletframe.cpp\" line=\"+35\"/>\n         <source>No wallet has been loaded.\n Go to File &gt; Open Wallet to load a wallet.\n - OR -</source>\n@@ -4624,7 +4715,7 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+279\"/>\n+        <location line=\"+260\"/>\n         <location line=\"+52\"/>\n         <location line=\"+13\"/>\n         <location line=\"+5\"/>\n@@ -4692,7 +4783,12 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n+        <location line=\"+14\"/>\n+        <source>Can&apos;t display address</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+18\"/>\n         <source>default wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4840,6 +4936,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Error: Legacy wallets only support the &quot;legacy&quot;, &quot;p2sh-segwit&quot;, and &quot;bech32&quot; address types</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n@@ -4945,11 +5046,6 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+3\"/>\n-        <source>Transaction needs a change address, but we can&apos;t generate it. Please call keypoolrefill first.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.</source>\n@@ -5160,6 +5256,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Missing checksum</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error: No %s addresses available.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Error: Unable to parse version %u as a uint32_t</source>\n@@ -5440,6 +5541,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Transaction must have at least one recipient</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Transaction needs a change address, but we can&apos;t generate it. %s</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Transaction too large</source>\n@@ -5500,6 +5606,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unknown new rules activated (versionbit %i)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Unsupported logging category %s=%s.</source>\n@@ -5535,10 +5646,5 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Wallet needed to be rewritten: restart %s to complete</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Warning: unknown new rules activated (versionbit %i)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n </context>\n </TS>"
      },
      {
        "sha": "caefddc66332067d635453e134af8d5f016322c0",
        "filename": "src/qt/locale/bitcoin_en.xlf",
        "status": "modified",
        "additions": 1573,
        "deletions": 1467,
        "changes": 3040,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/locale/bitcoin_en.xlf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7f74f1a7fe6afd4851705751f3c0ba278016ac5/src/qt/locale/bitcoin_en.xlf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.xlf?ref=c7f74f1a7fe6afd4851705751f3c0ba278016ac5"
      }
    ]
  },
  {
    "sha": "091d35c70e88a89959cb2872a81dfad23126eec4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTFkMzVjNzBlODhhODk5NTljYjI4NzJhODFkZmFkMjMxMjZlZWM0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T14:38:30Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-01T14:40:30Z"
      },
      "message": "Merge bitcoin-core/gui#377: Translations update\n\nc7f74f1a7fe6afd4851705751f3c0ba278016ac5 Translations update (Hennadii Stepanov)\n\nPull request description:\n\n  Translation string freeze, see [Release schedule for 22.0](https://github.com/bitcoin/bitcoin/issues/20851).\n\nACKs for top commit:\n  laanwj:\n    ACK c7f74f1a7fe6afd4851705751f3c0ba278016ac5, I get the same output\n\nTree-SHA512: 85c12a88290f46db0d6724ef51c2789bb1f7dfc242682b95420cb1310cb986e8d8a53e628fb7e184008ca23236e36bb5dc8ea65c4e41e01ca2c8f17863894125",
      "tree": {
        "sha": "3d76ccfdb371a53510cc7b371c9fb5af60c056c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d76ccfdb371a53510cc7b371c9fb5af60c056c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/091d35c70e88a89959cb2872a81dfad23126eec4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDd094ACgkQQQEIES5+\nqB8wgRAAlH9K2QobX3JvUX4K8A0AcABCka4h/ltkaClLlU9a+MuGFi4k+4JO/oak\nXyNCesRtCNIYlBaNc8mhgqFmr1+NXhTTDAvfOuRtD8syBDh8GCayXY7YcRsl6Hzd\n0c+gN5gU8AeN7WkwWz5/EfPoYwWPO+y5T9nZ2xhX3UaC0fMoMm1MUcjnYV/7x+AY\nV27AF5kLnejafIR8Y25+0kDri2gvjPk0bw3WKFaUtAcJW69I29/z641vq1IHIhSt\nMOzZbcbvmFeG3t4enCt7B9bANHL+7qjn5iJIQGCQVh8kCDpf27VUmKuv712/lEMP\nAMLD2NH0+6skjuHb6IA1L2Mc1/qzTupg2LBZW6Iux2JPvqiaeyWRg81g07SNyGpW\ngdRNFeo3npP/W56LQo/HCmSp2PCbNwAihQpAtPdFmuaNWrXPO84snuBlM0ILBKff\nK+uGRZw3vE4zjo2SCAqwnSRFmRPTPrHjNU+itV2ViEpbTBFFwFmFVGfv+bhuSVOc\nJZoaOZJv+pOXSl07Yw8dezHnPTLZgLfGcfRPYMYJF/ex8YEtMnN1puwLrNMsAwPn\nM8XepEaZVifAAp1mc17+dzCBIcEXs4XZa9ymb4JR0x+c+tp0miEj87Mcm2Crql3N\n0P5VcyPgkHkqFIm0I6GReIoInnpjmSAqPpBJNefARpus4j0eC98=\n=lHop\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d76ccfdb371a53510cc7b371c9fb5af60c056c0\nparent 2749613020ed96a4e9204f8b98c44524b0a62d0d\nparent c7f74f1a7fe6afd4851705751f3c0ba278016ac5\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625150310 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625150430 +0300\n\nMerge bitcoin-core/gui#377: Translations update\n\nc7f74f1a7fe6afd4851705751f3c0ba278016ac5 Translations update (Hennadii Stepanov)\n\nPull request description:\n\n  Translation string freeze, see [Release schedule for 22.0](https://github.com/bitcoin/bitcoin/issues/20851).\n\nACKs for top commit:\n  laanwj:\n    ACK c7f74f1a7fe6afd4851705751f3c0ba278016ac5, I get the same output\n\nTree-SHA512: 85c12a88290f46db0d6724ef51c2789bb1f7dfc242682b95420cb1310cb986e8d8a53e628fb7e184008ca23236e36bb5dc8ea65c4e41e01ca2c8f17863894125\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/091d35c70e88a89959cb2872a81dfad23126eec4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/091d35c70e88a89959cb2872a81dfad23126eec4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/091d35c70e88a89959cb2872a81dfad23126eec4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2749613020ed96a4e9204f8b98c44524b0a62d0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2749613020ed96a4e9204f8b98c44524b0a62d0d"
      },
      {
        "sha": "c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f74f1a7fe6afd4851705751f3c0ba278016ac5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f74f1a7fe6afd4851705751f3c0ba278016ac5"
      }
    ],
    "stats": {
      "total": 3424,
      "additions": 1819,
      "deletions": 1605
    },
    "files": [
      {
        "sha": "d2d4079ea9748de34f715279d66faebeb9bb4f2f",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=091d35c70e88a89959cb2872a81dfad23126eec4",
        "patch": "@@ -42,6 +42,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Dumpfile version is not supported. This version of bitcoin-wallet \"\n \"only supports version 1 dumpfiles. Got dumpfile with version %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \"\n+\"\\\"bech32\\\" address types\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -\"\n@@ -103,9 +106,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Total length of network version string (%i) exceeds maximum length (%i). \"\n \"Reduce the number or size of uacomments.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Transaction needs a change address, but we can't generate it. Please call \"\n-\"keypoolrefill first.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to replay blocks. You will need to rebuild the database using -\"\n \"reindex-chainstate.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -160,6 +160,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got key that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got value that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Missing checksum\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: No %s addresses available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to parse version %u as a uint32_t\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to write record to new wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n@@ -216,6 +217,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amount too small\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must not be negative\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction has too long of a mempool chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction must have at least one recipient\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction needs a change address, but we can't generate it. %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n@@ -228,12 +230,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown -blockfilterindex value %s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown address type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown change type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading txindex database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n };"
      },
      {
        "sha": "7026f49c016de69dcefe13755f99641c2966059e",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 240,
        "deletions": 134,
        "changes": 374,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=091d35c70e88a89959cb2872a81dfad23126eec4",
        "patch": "@@ -55,11 +55,12 @@\n     </message>\n     <message>\n         <location line=\"-30\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"+122\"/>\n         <source>&amp;Delete</source>\n         <translation>&amp;Delete</translation>\n     </message>\n     <message>\n-        <location filename=\"../addressbookpage.cpp\" line=\"+84\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"-38\"/>\n         <source>Choose the address to send coins to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -96,26 +97,21 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n     </message>\n     <message>\n         <location line=\"+8\"/>\n-        <source>Copy Address</source>\n+        <source>&amp;Copy Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Label</source>\n+        <source>Copy &amp;Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Edit</source>\n+        <source>&amp;Edit</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Delete</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+161\"/>\n+        <location line=\"+164\"/>\n         <source>Export Address List</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -317,7 +313,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>BitcoinApplication</name>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+420\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+421\"/>\n         <source>Runaway exception</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -405,18 +401,18 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+358\"/>\n+        <location line=\"+373\"/>\n         <source>Network activity disabled.</source>\n         <extracomment>A substring of the tooltip.</extracomment>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+426\"/>\n+        <location line=\"+424\"/>\n         <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1096\"/>\n+        <location line=\"-1109\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -546,7 +542,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"+422\"/>\n+        <location line=\"+437\"/>\n         <source>Syncing Headers (%1%)\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -576,7 +572,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-766\"/>\n+        <location line=\"-781\"/>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -596,7 +592,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+678\"/>\n+        <location line=\"+693\"/>\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation>\n             <numerusform>Processed %n block of transaction history.</numerusform>\n@@ -644,7 +640,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-715\"/>\n+        <location line=\"-730\"/>\n         <source>Load Partially Signed Bitcoin Transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -744,7 +740,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+248\"/>\n+        <location line=\"+263\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -792,7 +788,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+110\"/>\n+        <location line=\"+108\"/>\n         <source>Date: %1\n </source>\n         <translation type=\"unfinished\"></translation>\n@@ -956,34 +952,38 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n-        <source>Copy address</source>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+66\"/>\n+        <source>Copy amount</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-11\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <location line=\"+9\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy transaction ID</source>\n+        <location line=\"+1\"/>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Lock unspent</source>\n+        <source>L&amp;ock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Unlock unspent</source>\n+        <source>&amp;Unlock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -1061,12 +1061,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>CreateWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+253\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+254\"/>\n         <source>Creating Wallet &lt;b&gt;%1&lt;/b&gt;\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+31\"/>\n         <source>Create wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1075,6 +1075,11 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <source>Create wallet warning</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+16\"/>\n+        <source>Can&apos;t list signers</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>CreateWalletDialog</name>\n@@ -1139,15 +1144,31 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../createwalletdialog.cpp\" line=\"+21\"/>\n+        <location line=\"+7\"/>\n+        <source>Use an external signing device such as a hardware wallet. Configure the external signer script in wallet preferences first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>External signer</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location filename=\"../createwalletdialog.cpp\" line=\"+22\"/>\n         <source>Create</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+42\"/>\n+        <location line=\"+68\"/>\n         <source>Compiled without sqlite support (required for descriptor wallets)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+14\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -1472,7 +1493,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>OpenWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+32\"/>\n         <source>Open wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1530,7 +1551,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+171\"/>\n+        <location line=\"+201\"/>\n         <location line=\"+187\"/>\n         <source>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1579,7 +1600,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Network</translation>\n     </message>\n     <message>\n-        <location line=\"-188\"/>\n+        <location line=\"-218\"/>\n         <source>Prune &amp;block storage to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1629,7 +1650,22 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+10\"/>\n+        <source>External Signer (e.g. hardware wallet)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>&amp;External signer script path</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Full path to a Bitcoin Core compatible script (e.g. C:\\Downloads\\hwi.exe or /Users/you/Downloads/hwi.py). Beware: malware can steal your coins!</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+32\"/>\n         <source>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</source>\n         <translation>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</translation>\n     </message>\n@@ -1762,12 +1798,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Choose the default subdivision unit to show in the interface and when sending coins.</translation>\n     </message>\n     <message>\n-        <location line=\"-463\"/>\n+        <location line=\"-493\"/>\n         <source>Whether to show coin control features or not.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+260\"/>\n+        <location line=\"+290\"/>\n         <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor onion services.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1812,7 +1848,13 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+104\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+97\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+12\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1822,7 +1864,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+91\"/>\n+        <location line=\"+93\"/>\n         <source>Confirm options reset</source>\n         <translation>Confirm options reset</translation>\n     </message>\n@@ -1962,7 +2004,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../overviewpage.cpp\" line=\"+193\"/>\n+        <location filename=\"../overviewpage.cpp\" line=\"+188\"/>\n         <source>Privacy mode activated for the Overview tab. To unmask the values, uncheck Settings-&gt;Mask values.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2168,7 +2210,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.h\" line=\"+101\"/>\n+        <location filename=\"../peertablemodel.h\" line=\"+107\"/>\n         <source>User Agent</source>\n         <extracomment>Title of Peers Table column which contains the peer&apos;s User Agent string.</extracomment>\n         <translation type=\"unfinished\"></translation>\n@@ -2384,7 +2426,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+112\"/>\n         <source>Error: Specified data directory &quot;%1&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2418,12 +2460,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     <name>QRImageWidget</name>\n     <message>\n         <location filename=\"../qrimagewidget.cpp\" line=\"+30\"/>\n-        <source>Save Image\u2026</source>\n+        <source>&amp;Save Image\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Image</source>\n+        <source>&amp;Copy Image</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -2467,7 +2509,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+722\"/>\n+        <location line=\"+692\"/>\n         <location line=\"+26\"/>\n         <location line=\"+26\"/>\n         <location line=\"+23\"/>\n@@ -2490,12 +2532,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../rpcconsole.h\" line=\"+138\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"+139\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-1549\"/>\n+        <location line=\"-1519\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -2536,12 +2578,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+29\"/>\n-        <location line=\"+922\"/>\n+        <location line=\"+892\"/>\n         <source>Network</source>\n         <translation>Network</translation>\n     </message>\n     <message>\n-        <location line=\"-915\"/>\n+        <location line=\"-885\"/>\n         <source>Name</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2581,7 +2623,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+241\"/>\n+        <location line=\"+211\"/>\n         <source>&amp;Reset</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2609,7 +2651,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+68\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+1091\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+1124\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2644,13 +2686,13 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1516\"/>\n-        <location line=\"+1081\"/>\n+        <location line=\"-1486\"/>\n+        <location line=\"+1051\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1155\"/>\n+        <location line=\"-1125\"/>\n         <source>Node window</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2665,17 +2707,17 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+84\"/>\n+        <location line=\"+78\"/>\n         <source>Decrease font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+20\"/>\n         <source>Increase font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+558\"/>\n+        <location line=\"+546\"/>\n         <source>Permissions</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2780,7 +2822,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1288\"/>\n+        <location line=\"-1258\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -2795,7 +2837,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation>&amp;Console</translation>\n     </message>\n     <message>\n-        <location line=\"+217\"/>\n+        <location line=\"+187\"/>\n         <source>&amp;Network Traffic</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2815,12 +2857,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"-321\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"-291\"/>\n         <source>Debug log file</source>\n         <translation>Debug log file</translation>\n     </message>\n     <message>\n-        <location line=\"+155\"/>\n+        <location line=\"+125\"/>\n         <source>Clear console</source>\n         <translation>Clear console</translation>\n     </message>\n@@ -2850,12 +2892,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+40\"/>\n         <source>Never</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-417\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-429\"/>\n         <source>Inbound: initiated by peer</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2924,52 +2966,52 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+385\"/>\n-        <source>Network activity disabled</source>\n+        <location line=\"+150\"/>\n+        <source>&amp;Disconnect</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n-        <source>Executing command without any wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-2\"/>\n-        <source>Executing command using &quot;%1&quot; wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 d&amp;ay</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-319\"/>\n-        <source>Disconnect</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;week</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>1 hour</source>\n+        <source>1 &amp;year</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 day</source>\n+        <location line=\"+22\"/>\n+        <source>&amp;Unban</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 week</source>\n+        <location line=\"+221\"/>\n+        <source>Network activity disabled</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 year</source>\n+        <location line=\"+77\"/>\n+        <source>Executing command without any wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n-        <source>Unban</source>\n+        <location line=\"-2\"/>\n+        <source>Executing command using &quot;%1&quot; wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+150\"/>\n+        <location line=\"-146\"/>\n         <source>Welcome to the %1 RPC console.\n Use up and down arrows to navigate history, and %2 to clear screen.\n Use %3 and %4 to increase or decrease the font size.\n@@ -2997,7 +3039,7 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.h\" line=\"-38\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"-40\"/>\n         <source>Unknown</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3102,27 +3144,27 @@ For more information on using this console, type %6.\n     </message>\n     <message>\n         <location filename=\"../receivecoinsdialog.cpp\" line=\"+47\"/>\n-        <source>Copy URI</source>\n+        <source>Copy &amp;URI</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy address</source>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy message</source>\n+        <source>Copy &amp;message</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -3178,6 +3220,16 @@ For more information on using this console, type %6.\n         <source>Copy &amp;Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>&amp;Verify</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Verify this address on e.g. a hardware wallet screen</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n         <source>&amp;Save Image\u2026</source>\n@@ -3189,15 +3241,15 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-221\"/>\n+        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-234\"/>\n         <source>Payment information</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+30\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+32\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3236,7 +3288,7 @@ For more information on using this console, type %6.\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+674\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+738\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -3423,7 +3475,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-582\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-646\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3463,7 +3515,24 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n+        <location line=\"+30\"/>\n+        <source>Sign on device</source>\n+        <extracomment>&quot;device&quot; usually means a hardware wallet</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Connect your hardware wallet first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Set external signer script path in Options -&gt; Wallet</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Cr&amp;eate Unsigned</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3508,7 +3577,29 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+0\"/>\n+        <source>Sign and send</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+25\"/>\n+        <source>Sign failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer not found</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer failure</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+58\"/>\n         <source>Save Transaction Data</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3524,7 +3615,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-76\"/>\n+        <location line=\"+175\"/>\n+        <source>External balance:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-302\"/>\n         <source>or</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3569,12 +3665,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Send</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+229\"/>\n+        <location line=\"+283\"/>\n         <source>Watch-only balance:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4434,62 +4525,62 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+75\"/>\n-        <source>Abandon transaction</source>\n+        <location line=\"-26\"/>\n+        <source>Range\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-3\"/>\n-        <source>Increase transaction fee</source>\n+        <location line=\"+90\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy address</source>\n+        <location line=\"+1\"/>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy transaction ID</source>\n+        <source>Copy &amp;raw transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy raw transaction</source>\n+        <source>Copy full transaction &amp;details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy full transaction details</source>\n+        <source>&amp;Show transaction details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>Edit address label</source>\n+        <location line=\"+2\"/>\n+        <source>Increase transaction &amp;fee</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-6\"/>\n-        <source>Show transaction details</source>\n+        <location line=\"+3\"/>\n+        <source>A&amp;bandon transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-96\"/>\n-        <source>Range\u2026</source>\n+        <location line=\"+1\"/>\n+        <source>&amp;Edit address label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+276\"/>\n+        <location line=\"+174\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4576,7 +4667,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletController</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"-250\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"-262\"/>\n         <source>Close wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4604,7 +4695,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletFrame</name>\n     <message>\n-        <location filename=\"../walletframe.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletframe.cpp\" line=\"+35\"/>\n         <source>No wallet has been loaded.\n Go to File &gt; Open Wallet to load a wallet.\n - OR -</source>\n@@ -4624,7 +4715,7 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+279\"/>\n+        <location line=\"+260\"/>\n         <location line=\"+52\"/>\n         <location line=\"+13\"/>\n         <location line=\"+5\"/>\n@@ -4692,7 +4783,12 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n+        <location line=\"+14\"/>\n+        <source>Can&apos;t display address</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+18\"/>\n         <source>default wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4840,6 +4936,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Error: Legacy wallets only support the &quot;legacy&quot;, &quot;p2sh-segwit&quot;, and &quot;bech32&quot; address types</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n@@ -4945,11 +5046,6 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+3\"/>\n-        <source>Transaction needs a change address, but we can&apos;t generate it. Please call keypoolrefill first.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.</source>\n@@ -5160,6 +5256,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Missing checksum</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error: No %s addresses available.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Error: Unable to parse version %u as a uint32_t</source>\n@@ -5440,6 +5541,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Transaction must have at least one recipient</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Transaction needs a change address, but we can&apos;t generate it. %s</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Transaction too large</source>\n@@ -5500,6 +5606,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unknown new rules activated (versionbit %i)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Unsupported logging category %s=%s.</source>\n@@ -5535,10 +5646,5 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Wallet needed to be rewritten: restart %s to complete</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Warning: unknown new rules activated (versionbit %i)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n </context>\n </TS>"
      },
      {
        "sha": "caefddc66332067d635453e134af8d5f016322c0",
        "filename": "src/qt/locale/bitcoin_en.xlf",
        "status": "modified",
        "additions": 1573,
        "deletions": 1467,
        "changes": 3040,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/locale/bitcoin_en.xlf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/091d35c70e88a89959cb2872a81dfad23126eec4/src/qt/locale/bitcoin_en.xlf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.xlf?ref=091d35c70e88a89959cb2872a81dfad23126eec4"
      }
    ]
  },
  {
    "sha": "a926d6dfd291da5578d8af422bde03fd17456d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTI2ZDZkZmQyOTFkYTU1NzhkOGFmNDIyYmRlMDNmZDE3NDU2ZDk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T16:36:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T16:36:17Z"
      },
      "message": "Merge bitcoin/bitcoin#22310: test: Add functional test for replacement relay fee check\n\nc4ddee64c7f80eee05a95116ef1b1dc8a7601183 test: Add test for replacement relay fee check (Antoine Riard)\n\nPull request description:\n\n  This PR adds rename the `reject_reason` of our implementation of BIP125 rule 4 and adds missing functional test coverage. Note, `insufficient fee` is already the `reject_reason` of few others `PreChecks` replacement checks and as such might be confusing.\n\n  > The replacement transaction must also pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting. For example, if the minimum relay fee is 1 satoshi/byte and the replacement transaction is 500 bytes total, then the replacement must pay a fee at least 500 satoshis higher than the sum of the originals.\n\n  ```\n          // Finally in addition to paying more fees than the conflicts the\n          // new transaction must pay for its own bandwidth.\n          CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n          if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n          {\n              return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n                      strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                          hash.ToString(),\n                          FormatMoney(nDeltaFees),\n                          FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n          }\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK c4ddee64c7f80eee05a95116ef1b1dc8a7601183\n  glozow:\n    ACK c4ddee6, one small suggestion if you retouch.\n\nTree-SHA512: 7c5d1065db6e6fe57a9f083bf051a7a55eb9892de3a2888679d4a6853491608c93b6e35887ef383a9988d14713fa13a0b1d6134b7354af5fd54765f0d4e98568",
      "tree": {
        "sha": "4053ebcb092bff37086ccc50c31d8f4d043ee91e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4053ebcb092bff37086ccc50c31d8f4d043ee91e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a926d6dfd291da5578d8af422bde03fd17456d96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgUagwArlaCZrf0SHux2X57fD8hIsdlUmcGywn9NYcSmZHCRV9+jrejknk3SC0/\nsHo3IFPC3Mc0SAW+bQo/u6Jt62PXIXiiPF+G6yfBqMQKBVFsuVADHFncrDCSnXRK\n+pPsuRRK9h0By0QPzDyGWBNXpEavp3sfkUsooSN/WkyXh4Q+mjFzEGZ939/Ubv2B\nQl3Mf6iFPbD0z5oqJsPR7hvp1sayl5Cx/5IKySSMHBEla2UTOnWR5q48i4GOUXNa\nuzm7SUEzt14ZK2D3Fpktl0ZdQ1YRbleDygS3hQTt4iS4SNB2RsfkF+EyRHSUqy+X\nwvDnZATLB18gHh0ywgcHL/9qOgijUPpfbJMogC6BNJPyfoJVd1l7HvZLYqxsIzYl\ntJtD8i5s2lpeUPDyCb+53FuwmxI16iAmjze44j9XLMZMZQGp8wArIiqe0YEmPSJl\nKbH0YMnWM9p+dbHJKRe0ORuX8sXH0QY8qzuzNx+eiTKf5RbHVmvEez7ePRlfwPTN\nLxvmGngy\n=/yl+\n-----END PGP SIGNATURE-----",
        "payload": "tree 4053ebcb092bff37086ccc50c31d8f4d043ee91e\nparent 091d35c70e88a89959cb2872a81dfad23126eec4\nparent c4ddee64c7f80eee05a95116ef1b1dc8a7601183\nauthor MarcoFalke <falke.marco@gmail.com> 1625157374 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625157377 +0200\n\nMerge bitcoin/bitcoin#22310: test: Add functional test for replacement relay fee check\n\nc4ddee64c7f80eee05a95116ef1b1dc8a7601183 test: Add test for replacement relay fee check (Antoine Riard)\n\nPull request description:\n\n  This PR adds rename the `reject_reason` of our implementation of BIP125 rule 4 and adds missing functional test coverage. Note, `insufficient fee` is already the `reject_reason` of few others `PreChecks` replacement checks and as such might be confusing.\n\n  > The replacement transaction must also pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting. For example, if the minimum relay fee is 1 satoshi/byte and the replacement transaction is 500 bytes total, then the replacement must pay a fee at least 500 satoshis higher than the sum of the originals.\n\n  ```\n          // Finally in addition to paying more fees than the conflicts the\n          // new transaction must pay for its own bandwidth.\n          CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n          if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n          {\n              return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n                      strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                          hash.ToString(),\n                          FormatMoney(nDeltaFees),\n                          FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n          }\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK c4ddee64c7f80eee05a95116ef1b1dc8a7601183\n  glozow:\n    ACK c4ddee6, one small suggestion if you retouch.\n\nTree-SHA512: 7c5d1065db6e6fe57a9f083bf051a7a55eb9892de3a2888679d4a6853491608c93b6e35887ef383a9988d14713fa13a0b1d6134b7354af5fd54765f0d4e98568\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a926d6dfd291da5578d8af422bde03fd17456d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a926d6dfd291da5578d8af422bde03fd17456d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a926d6dfd291da5578d8af422bde03fd17456d96/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "091d35c70e88a89959cb2872a81dfad23126eec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/091d35c70e88a89959cb2872a81dfad23126eec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/091d35c70e88a89959cb2872a81dfad23126eec4"
      },
      {
        "sha": "c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ddee64c7f80eee05a95116ef1b1dc8a7601183",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4ddee64c7f80eee05a95116ef1b1dc8a7601183"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed944274e3bd85a785cccae08dbc2e52564ef253",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a926d6dfd291da5578d8af422bde03fd17456d96/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a926d6dfd291da5578d8af422bde03fd17456d96/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=a926d6dfd291da5578d8af422bde03fd17456d96",
        "patch": "@@ -122,6 +122,9 @@ def run_test(self):\n         self.log.info(\"Running test no inherited signaling...\")\n         self.test_no_inherited_signaling()\n \n+        self.log.info(\"Running test replacement relay fee...\")\n+        self.test_replacement_relay_fee()\n+\n         self.log.info(\"Passed\")\n \n     def test_simple_doublespend(self):\n@@ -627,6 +630,15 @@ def test_no_inherited_signaling(self):\n         assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n+    def test_replacement_relay_fee(self):\n+        wallet = MiniWallet(self.nodes[0])\n+        wallet.scan_blocks(start=77, num=1)\n+        tx = wallet.send_self_transfer(from_node=self.nodes[0])['tx']\n+\n+        # Higher fee, higher feerate, different txid, but the replacement does not provide a relay\n+        # fee conforming to node's `incrementalrelayfee` policy of 1000 sat per KB.\n+        tx.vout[0].nValue -= 1\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGM2OTc5YjhiYWFiMDQ4YmJmMGM1YzJkZDIzMzQ1YThlYjVjNjBl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T17:15:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T17:15:09Z"
      },
      "message": "Merge bitcoin/bitcoin#19438: Introduce deploymentstatus\n\ne48826ad87b4f92261f7433e84f48dac9bd9e5c3 tests: remove ComputeBlockVersion shortcut from versionbits tests (Anthony Towns)\nc5f36725e877d8eb492383844f8ef7535466b366 [refactor] Move ComputeBlockVersion into VersionBitsCache (Anthony Towns)\n4a69b4dbe0d7f504811b67c399da7e6d11e4f805 [move-only] Move ComputeBlockVersion from validation to versionbits (Anthony Towns)\n0cfd6c6a8f929d5567ac41f95c21548f115efee5 [refactor] versionbits: make VersionBitsCache a full class (Anthony Towns)\n8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca [refactor] rpc/blockchain.cpp: SoftForkPushBack (Anthony Towns)\n92f48f360da5f425428b761219301f509826bec4 deploymentinfo: Add DeploymentName() (Anthony Towns)\nea68b3a5729f5d240e968388c4f88acffeb27228 [move-only] Rename versionbitsinfo to deploymentinfo (Anthony Towns)\nc64b2c6a0f79369624ae96b2e3d579d50aae4de6 scripted-diff: rename versionbitscache (Anthony Towns)\nde55304f6e7a8b607e6b3fc7436de50910747b0c [refactor] Add versionbits deployments to deploymentstatus.h (Anthony Towns)\n2b0d291da8f479739ff394dd92801da8c40b9f8e [refactor] Add deploymentstatus.h (Anthony Towns)\neccd736f3dc231ac0306ca763c3b72cf8247230a versionbits: Use dedicated lock instead of cs_main (Anthony Towns)\n36a4ba0aaaa9b35185d7178994e36bc02cca9887 versionbits: correct doxygen comments (Anthony Towns)\n\nPull request description:\n\n  Introduces helper functions to make it easy to bury future deployments, along the lines of the suggestion from [11398](https://github.com/bitcoin/bitcoin/pull/11398#issuecomment-335599326) \"I would prefer it if a buried deployment wouldn't require all code paths that check the BIP9 status to require changing\".\n\n  This provides three functions: `DeploymentEnabled()` which tests if a deployment can ever be active, `DeploymentActiveAt()` which checks if a deployment should be enforced in the given block, and `DeploymentActiveAfter()` which checks if a deployment should be enforced in the block following the given block, and overloads all three to work both with buried deployments and versionbits deployments.\n\n  This adds a dedicated lock for the versionbits cache, which is acquired internally by the versionbits functions, rather than relying on `cs_main`. It also moves moves versionbitscache into deploymentstatus to avoid a circular dependency with validation.\n\nACKs for top commit:\n  jnewbery:\n    ACK e48826ad87b4f92261f7433e84f48dac9bd9e5c3\n  gruve-p:\n    ACK https://github.com/bitcoin/bitcoin/pull/19438/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3\n  MarcoFalke:\n    re-ACK e48826ad87b4f92261f7433e84f48dac9bd9e5c3 \ud83e\udd48\n\nTree-SHA512: c846ba64436d36f8180046ad551d8b0d9e20509b9bc185aa2639055fc28803dd8ec2d6771ab337e80da0b40009ad959590d5772f84a0bf6199b65190d4155bed",
      "tree": {
        "sha": "8c487ac7c7819a027febc1e8578c413846ca6e96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c487ac7c7819a027febc1e8578c413846ca6e96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj2lwwAvB+yY4i3P4EqWLFPf6JYMOhRwfZHy/tnO4LozkIroUC+lcK8UUx4VQid\naGtPI+tD+dnsJPTItBskfz62oSERgLWZ7s6WsBxCUHmmYhkBm/8Qh/+wYygsseBH\nodEtIWG1GvYD2esAfxObgfSOrNQzo/Y7HEstBUzk7Y/9o8GnSOMuwQUvaWAJg+Tb\nHbbHUgo6wwpZBoUZsbdQCRhz6JKxk3QD7N2YIgosSbdLiX9JLTUcpavJtTyCMQVB\nHfjS0MIOCzZNSGLR8yaGtKgzpsNVuisytgge31Kn3Z8cmf1Duga1aqQdwYvQ80/l\n2QwR9TBW8NHw2XdsRwGxhJULAyncQ8w5hUxza4RJSp/OXm3v0/3N2VRSZL/Mvo19\nmIc5flrYZ7Qj0V6Dxk8Wb2wsV2PjetQCVDpfsLBogU6kuAAIOfyG2VWu7lLA0PBj\nPfUWDO13H2mBKHy/wvUPrSAcvIcYY9BR3OQucQkNOC+OIVzz7ZXI0JHFZayFLn9N\nqet3KdBj\n=uZvo\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c487ac7c7819a027febc1e8578c413846ca6e96\nparent a926d6dfd291da5578d8af422bde03fd17456d96\nparent e48826ad87b4f92261f7433e84f48dac9bd9e5c3\nauthor MarcoFalke <falke.marco@gmail.com> 1625159703 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625159709 +0200\n\nMerge bitcoin/bitcoin#19438: Introduce deploymentstatus\n\ne48826ad87b4f92261f7433e84f48dac9bd9e5c3 tests: remove ComputeBlockVersion shortcut from versionbits tests (Anthony Towns)\nc5f36725e877d8eb492383844f8ef7535466b366 [refactor] Move ComputeBlockVersion into VersionBitsCache (Anthony Towns)\n4a69b4dbe0d7f504811b67c399da7e6d11e4f805 [move-only] Move ComputeBlockVersion from validation to versionbits (Anthony Towns)\n0cfd6c6a8f929d5567ac41f95c21548f115efee5 [refactor] versionbits: make VersionBitsCache a full class (Anthony Towns)\n8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca [refactor] rpc/blockchain.cpp: SoftForkPushBack (Anthony Towns)\n92f48f360da5f425428b761219301f509826bec4 deploymentinfo: Add DeploymentName() (Anthony Towns)\nea68b3a5729f5d240e968388c4f88acffeb27228 [move-only] Rename versionbitsinfo to deploymentinfo (Anthony Towns)\nc64b2c6a0f79369624ae96b2e3d579d50aae4de6 scripted-diff: rename versionbitscache (Anthony Towns)\nde55304f6e7a8b607e6b3fc7436de50910747b0c [refactor] Add versionbits deployments to deploymentstatus.h (Anthony Towns)\n2b0d291da8f479739ff394dd92801da8c40b9f8e [refactor] Add deploymentstatus.h (Anthony Towns)\neccd736f3dc231ac0306ca763c3b72cf8247230a versionbits: Use dedicated lock instead of cs_main (Anthony Towns)\n36a4ba0aaaa9b35185d7178994e36bc02cca9887 versionbits: correct doxygen comments (Anthony Towns)\n\nPull request description:\n\n  Introduces helper functions to make it easy to bury future deployments, along the lines of the suggestion from [11398](https://github.com/bitcoin/bitcoin/pull/11398#issuecomment-335599326) \"I would prefer it if a buried deployment wouldn't require all code paths that check the BIP9 status to require changing\".\n\n  This provides three functions: `DeploymentEnabled()` which tests if a deployment can ever be active, `DeploymentActiveAt()` which checks if a deployment should be enforced in the given block, and `DeploymentActiveAfter()` which checks if a deployment should be enforced in the block following the given block, and overloads all three to work both with buried deployments and versionbits deployments.\n\n  This adds a dedicated lock for the versionbits cache, which is acquired internally by the versionbits functions, rather than relying on `cs_main`. It also moves moves versionbitscache into deploymentstatus to avoid a circular dependency with validation.\n\nACKs for top commit:\n  jnewbery:\n    ACK e48826ad87b4f92261f7433e84f48dac9bd9e5c3\n  gruve-p:\n    ACK https://github.com/bitcoin/bitcoin/pull/19438/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3\n  MarcoFalke:\n    re-ACK e48826ad87b4f92261f7433e84f48dac9bd9e5c3 \ud83e\udd48\n\nTree-SHA512: c846ba64436d36f8180046ad551d8b0d9e20509b9bc185aa2639055fc28803dd8ec2d6771ab337e80da0b40009ad959590d5772f84a0bf6199b65190d4155bed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a926d6dfd291da5578d8af422bde03fd17456d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a926d6dfd291da5578d8af422bde03fd17456d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a926d6dfd291da5578d8af422bde03fd17456d96"
      },
      {
        "sha": "e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e48826ad87b4f92261f7433e84f48dac9bd9e5c3"
      }
    ],
    "stats": {
      "total": 513,
      "additions": 321,
      "deletions": 192
    },
    "files": [
      {
        "sha": "37ba5ad75b5f6c30e35cdb981589e1e4fa7cb135",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -145,6 +145,8 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentinfo.h \\\n+  deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n   fs.h \\\n@@ -272,7 +274,6 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   wallet/bdb.h \\\n   wallet/coincontrol.h \\\n   wallet/coinselection.h \\\n@@ -328,6 +329,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n   dbwrapper.cpp \\\n+  deploymentstatus.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n@@ -540,6 +542,7 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  deploymentinfo.cpp \\\n   external_signer.cpp \\\n   init/common.cpp \\\n   key.cpp \\\n@@ -561,7 +564,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "58a27e053b9f3f8a17a4a072b5ec14416917e4f4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n #include <util/system.h>\n-#include <versionbitsinfo.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "174f4677fa08a475efb3b4697a1250064bfd496f",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -11,13 +11,25 @@\n \n namespace Consensus {\n \n-enum DeploymentPos\n+enum BuriedDeployment : int16_t\n+{\n+    // buried deployments get negative values to avoid overlap with DeploymentPos\n+    DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n+    DEPLOYMENT_CLTV,\n+    DEPLOYMENT_DERSIG,\n+    DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n+};\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+\n+enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n-    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9.\n@@ -100,7 +112,25 @@ struct Params {\n      */\n     bool signet_blocks{false};\n     std::vector<uint8_t> signet_challenge;\n+\n+    int DeploymentHeight(BuriedDeployment dep) const\n+    {\n+        switch (dep) {\n+        case DEPLOYMENT_HEIGHTINCB:\n+            return BIP34Height;\n+        case DEPLOYMENT_CLTV:\n+            return BIP65Height;\n+        case DEPLOYMENT_DERSIG:\n+            return BIP66Height;\n+        case DEPLOYMENT_CSV:\n+            return CSVHeight;\n+        case DEPLOYMENT_SEGWIT:\n+            return SegwitHeight;\n+        } // no default case, so the compiler can warn about missing cases\n+        return std::numeric_limits<int>::max();\n+    }\n };\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "030a7806dec010009fc566bd7f53a099d3edbc3a",
        "filename": "src/deploymentinfo.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentinfo.h>\n+\n+#include <consensus/params.h>\n+\n+const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+    {\n+        /*.name =*/ \"testdummy\",\n+        /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"taproot\",\n+        /*.gbt_force =*/ true,\n+    },\n+};\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep)\n+{\n+    assert(ValidDeployment(dep));\n+    switch (dep) {\n+    case Consensus::DEPLOYMENT_HEIGHTINCB:\n+        return \"bip34\";\n+    case Consensus::DEPLOYMENT_CLTV:\n+        return \"bip65\";\n+    case Consensus::DEPLOYMENT_DERSIG:\n+        return \"bip66\";\n+    case Consensus::DEPLOYMENT_CSV:\n+        return \"csv\";\n+    case Consensus::DEPLOYMENT_SEGWIT:\n+        return \"segwit\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}"
      },
      {
        "sha": "63d58a7da253913d0b3c81e6f66faa676932a5f4",
        "filename": "src/deploymentinfo.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTINFO_H\n+#define BITCOIN_DEPLOYMENTINFO_H\n+\n+#include <consensus/params.h>\n+\n+#include <string>\n+\n+struct VBDeploymentInfo {\n+    /** Deployment name */\n+    const char *name;\n+    /** Whether GBT clients can safely ignore this rule in simplified usage */\n+    bool gbt_force;\n+};\n+\n+extern const VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep);\n+\n+inline std::string DeploymentName(Consensus::DeploymentPos pos)\n+{\n+    assert(Consensus::ValidDeployment(pos));\n+    return VersionBitsDeploymentInfo[pos].name;\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTINFO_H"
      },
      {
        "sha": "9007800421870d61fda1a8ad984a5b0e5e3900b5",
        "filename": "src/deploymentstatus.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentstatus.h>\n+\n+#include <consensus/params.h>\n+#include <versionbits.h>\n+\n+VersionBitsCache g_versionbitscache;\n+\n+/* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n+ * ValidDeployment check */\n+\n+static_assert(ValidDeployment(Consensus::DEPLOYMENT_TESTDUMMY), \"sanity check of DeploymentPos failed (TESTDUMMY not valid)\");\n+static_assert(!ValidDeployment(Consensus::MAX_VERSION_BITS_DEPLOYMENTS), \"sanity check of DeploymentPos failed (MAX value considered valid)\");\n+static_assert(!ValidDeployment(static_cast<Consensus::BuriedDeployment>(Consensus::DEPLOYMENT_TESTDUMMY)), \"sanity check of BuriedDeployment failed (overlaps with DeploymentPos)\");"
      },
      {
        "sha": "84c5e54698c99684aa21748046845aa7fb0001a0",
        "filename": "src/deploymentstatus.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTSTATUS_H\n+#define BITCOIN_DEPLOYMENTSTATUS_H\n+\n+#include <chain.h>\n+#include <versionbits.h>\n+\n+#include <limits>\n+\n+/** Global cache for versionbits deployment status */\n+extern VersionBitsCache g_versionbitscache;\n+\n+/** Determine if a deployment is active for the next block */\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n+}\n+\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return ThresholdState::ACTIVE == g_versionbitscache.State(pindexPrev, params, dep);\n+}\n+\n+/** Determine if a deployment is active for this block */\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return index.nHeight >= params.DeploymentHeight(dep);\n+}\n+\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return DeploymentActiveAfter(index.pprev, params, dep);\n+}\n+\n+/** Determine if a deployment is enabled (can ever be active) */\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n+}\n+\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.vDeployments[dep].nTimeout != 0;\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "ae96f510bcb9d7fd1b9436c43457cb8e215e566c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -16,6 +16,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n+#include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -1587,7 +1588,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "d9186a5d6dc4c9cc8403903b6fb17397f82a11e0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <pow.h>\n@@ -120,7 +121,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = g_versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n@@ -137,12 +138,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // This is only needed in case the witness softfork activation is reverted\n     // (which would require a very deep reorganization).\n     // Note that the mempool would accept transactions with witness data before\n-    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // the deployment is active, but we would only ever mine blocks after activation\n     // unless there is a massive block reorganization with the witness softfork\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;"
      },
      {
        "sha": "315d2ac5cd82dea5af9da3b12b4faeb360ea95a5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -11,6 +11,7 @@\n #include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <merkleblock.h>\n@@ -997,7 +998,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+            if (!State(nodeid)->fHaveWitness && DeploymentActiveAt(*pindex, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n@@ -1467,7 +1468,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n+    bool fWitnessEnabled = DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -2082,7 +2083,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             while (pindexWalk && !m_chainman.ActiveChain().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !IsBlockRequested(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        (!DeploymentActiveAt(*pindexWalk, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -3397,7 +3398,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;"
      },
      {
        "sha": "183b5a5d9122f20b3cde5a5415de3133d7c5f661",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -6,6 +6,7 @@\n #include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <deploymentstatus.h>\n #include <external_signer.h>\n #include <init.h>\n #include <interfaces/chain.h>\n@@ -692,7 +693,7 @@ class ChainImpl : public Chain\n     {\n         LOCK(::cs_main);\n         const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n-        return VersionBitsState(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE;\n+        return DeploymentActiveAfter(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n     }\n     NodeContext& m_node;\n };"
      },
      {
        "sha": "b630458f2348add9a99be1b66d91517f38f3e759",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -10,8 +10,11 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n@@ -37,6 +40,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbits.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -1343,32 +1347,32 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n     // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (softfork_height == std::numeric_limits<int>::max()) return;\n+    if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", tip_height + 1 >= softfork_height);\n-    rv.pushKV(\"height\", softfork_height);\n-    softforks.pushKV(name, rv);\n+    rv.pushKV(\"active\", DeploymentActiveAfter(active_chain_tip, params, dep));\n+    rv.pushKV(\"height\", params.DeploymentHeight(dep));\n+    softforks.pushKV(DeploymentName(dep), rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments that are never active are hidden.\n     if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1382,12 +1386,12 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n+    int64_t since_height = g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n+        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n@@ -1405,7 +1409,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(DeploymentName(id), rv);\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1502,14 +1506,14 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, height);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, height);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\",             softforks);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    obj.pushKV(\"softforks\", softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;"
      },
      {
        "sha": "2762d78493b2a64e6ad0773ede84a1fd6cdf2993",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -10,6 +10,8 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n+#include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -34,7 +36,6 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>\n@@ -774,7 +775,7 @@ static RPCHelpMan getblocktemplate()\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = !DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n \n@@ -840,15 +841,15 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, consensusParams, pos);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+                pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n                 // FALL THROUGH to get vbavailable set...\n             case ThresholdState::STARTED:\n             {\n@@ -857,7 +858,7 @@ static RPCHelpMan getblocktemplate()\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                        pblock->nVersion &= ~g_versionbitscache.Mask(consensusParams, pos);\n                     }\n                 }\n                 break;"
      },
      {
        "sha": "690031cdc17fbe940f52c438b55a95d5bec2da13",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n+#include <deploymentstatus.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <versionbits.h>\n@@ -258,16 +259,16 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n /** Check that ComputeBlockVersion will set the appropriate bit correctly */\n static void check_computeblockversion(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n-    // This implicitly uses versionbitscache, so clear it every time\n-    versionbitscache.Clear();\n+    // This implicitly uses g_versionbitscache, so clear it every time\n+    g_versionbitscache.Clear();\n \n     int64_t bit = params.vDeployments[dep].bit;\n     int64_t nStartTime = params.vDeployments[dep].nStartTime;\n     int64_t nTimeout = params.vDeployments[dep].nTimeout;\n     int min_activation_height = params.vDeployments[dep].min_activation_height;\n \n     // should not be any signalling for first block\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n \n     // always/never active deployments shouldn't need to be tested further\n     if (nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE ||\n@@ -287,7 +288,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Check min_activation_height is on a retarget boundary\n     BOOST_REQUIRE_EQUAL(min_activation_height % params.nMinerConfirmationWindow, 0U);\n \n-    const uint32_t bitmask{VersionBitsMask(params, dep)};\n+    const uint32_t bitmask{g_versionbitscache.Mask(params, dep)};\n     BOOST_CHECK_EQUAL(bitmask, uint32_t{1} << bit);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n@@ -306,38 +307,38 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // earlier time, so will transition from DEFINED to STARTED at the\n         // end of the first period by mining blocks at nTime == 0\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then we'll keep mining at nStartTime...\n     } else {\n         // use a time 1s earlier than start time to check we stay DEFINED\n         --nTime;\n \n         // Start generating blocks before nStartTime\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n \n         // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n         for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n         // CBV should still not yet set the bit.\n         nTime = nStartTime;\n         for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Next we will advance to the next period and transition to STARTED,\n     }\n \n     lastBlock = firstChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n@@ -346,8 +347,8 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n@@ -361,20 +362,20 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // finish the last period before we start timing out\n         while (nHeight % params.nMinerConfirmationWindow != 0) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime - 1, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n \n         // FAILED is only triggered at the end of a period, so CBV should be setting\n         // the bit until the period transition.\n         for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n         // The next block should trigger no longer setting the bit.\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n     }\n \n     // On a new chain:\n@@ -385,30 +386,30 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n     lastBlock = secondChain.Mine((params.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n \n     if (lastBlock->nHeight + 1 < min_activation_height) {\n         // check signalling continues while min_activation_height is not reached\n         lastBlock = secondChain.Mine(min_activation_height - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then reach min_activation_height, which was already REQUIRE'd to start a new period\n         lastBlock = secondChain.Mine(min_activation_height, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     }\n \n     // Check that we don't signal after activation\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n@@ -425,7 +426,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n             // not take precedence over STARTED/LOCKED_IN. So all softforks on\n             // the same bit might overlap, even when non-overlapping start-end\n             // times are picked.\n-            const uint32_t dep_mask{VersionBitsMask(chainParams->GetConsensus(), dep)};\n+            const uint32_t dep_mask{g_versionbitscache.Mask(chainParams->GetConsensus(), dep)};\n             BOOST_CHECK(!(chain_all_vbits & dep_mask));\n             chain_all_vbits |= dep_mask;\n             check_computeblockversion(chainParams->GetConsensus(), dep);"
      },
      {
        "sha": "65d2dfa3b7add202583c3688b2b509b3d5d66b8c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 67,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <deploymentstatus.h>\n #include <flatfile.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -683,9 +684,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    const auto& params = args.m_chainparams.GetConsensus();\n-    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n+    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n \n@@ -1606,23 +1606,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n-\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    LOCK(cs_main);\n-    int32_t nVersion = VERSIONBITS_TOP_BITS;\n-\n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n-        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n-        }\n-    }\n-\n-    return nVersion;\n-}\n-\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */\n@@ -1644,24 +1627,14 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n         return pindex->nHeight >= params.MinBIP9WarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((g_versionbitscache.ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n     }\n };\n \n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-// 0.13.0 was shipped with a segwit deployment defined for testnet, but not for\n-// mainnet. We no longer need to support disabling the segwit deployment\n-// except for testing purposes, due to limitations of the functional test\n-// environment. See test/functional/p2p-segwit.py.\n-static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n {\n-    return params.SegwitHeight != std::numeric_limits<int>::max();\n-}\n-\n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n \n     // BIP16 didn't become active until Apr 1 2012 (on mainnet, and\n@@ -1678,32 +1651,32 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n \n     // Enforce WITNESS rules whenever P2SH is in effect (and the segwit\n     // deployment is defined).\n-    if (flags & SCRIPT_VERIFY_P2SH && IsScriptWitnessEnabled(consensusparams)) {\n+    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n-    // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+    // Enforce the DERSIG (BIP66) rule\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+    // Enforce CHECKLOCKTIMEVERIFY (BIP65)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n-    if (pindex->nHeight >= consensusparams.CSVHeight) {\n+    // Enforce CHECKSEQUENCEVERIFY (BIP112)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n-    // Start enforcing Taproot using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE) {\n+    // Enforce Taproot (BIP340-BIP342)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n \n-    // Start enforcing BIP147 NULLDUMMY (activated simultaneously with segwit)\n-    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n+    // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n@@ -1893,9 +1866,9 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks)\n+    // Enforce BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= m_params.GetConsensus().CSVHeight) {\n+    if (DeploymentActiveAt(*pindex, m_params.GetConsensus(), Consensus::DEPLOYMENT_CSV)) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -2988,7 +2961,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, m_params.GetConsensus())) {\n+    if (DeploymentActiveAt(*pindexNew, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3109,17 +3082,11 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     return true;\n }\n \n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n-    return (height >= params.SegwitHeight);\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != NO_WITNESS_COMMITMENT && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n+    if (commitpos != NO_WITNESS_COMMITMENT && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n         tx.vin[0].scriptWitness.stack.resize(1);\n         tx.vin[0].scriptWitness.stack[0] = nonce;\n@@ -3132,7 +3099,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         if (commitpos == NO_WITNESS_COMMITMENT) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n@@ -3210,13 +3177,13 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n         return state.Invalid(BlockValidationResult::BLOCK_TIME_FUTURE, \"time-too-new\", \"block timestamp too far in the future\");\n \n-    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    // Reject blocks with outdated version\n+    if ((block.nVersion < 2 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB)) ||\n+        (block.nVersion < 3 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_DERSIG)) ||\n+        (block.nVersion < 4 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLTV))) {\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n+    }\n \n     return true;\n }\n@@ -3231,9 +3198,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n-    // Start enforcing BIP113 (Median Time Past).\n+    // Enforce BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (nHeight >= consensusParams.CSVHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV)) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n@@ -3250,7 +3217,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n@@ -3268,7 +3235,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (nHeight >= consensusParams.SegwitHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != NO_WITNESS_COMMITMENT) {\n             bool malleated = false;\n@@ -4098,9 +4065,8 @@ bool CChainState::NeedsRedownload() const\n \n     // At and above m_params.SegwitHeight, segwit consensus rules must be validated\n     CBlockIndex* block{m_chain.Tip()};\n-    const int segwit_height{m_params.GetConsensus().SegwitHeight};\n \n-    while (block != nullptr && block->nHeight >= segwit_height) {\n+    while (block != nullptr && DeploymentActiveAt(*block, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         if (!(block->nStatus & BLOCK_OPT_WITNESS)) {\n             // block is insufficiently validated for a segwit client\n             return true;\n@@ -4130,7 +4096,7 @@ void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)\n     nLastBlockFile = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    versionbitscache.Clear();\n+    g_versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n     }\n@@ -5002,7 +4968,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n         // Fake BLOCK_OPT_WITNESS so that CChainState::NeedsRedownload()\n         // won't ask to rewind the entire assumed-valid chain on startup.\n-        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+        if (index->pprev && DeploymentActiveAt(*index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n             index->nStatus |= BLOCK_OPT_WITNESS;\n         }\n     }"
      },
      {
        "sha": "3d66e3161dd9a8c424d05db3ba44b668abdd8186",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -24,7 +24,6 @@\n #include <sync.h>\n #include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n-#include <versionbits.h>\n #include <serialize.h>\n #include <util/check.h>\n #include <util/hasher.h>\n@@ -345,10 +344,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckPOW = true,\n                        bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n- *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n@@ -1024,13 +1019,6 @@ class ChainstateManager\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-extern VersionBitsCache versionbitscache;\n-\n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n using FopenFn = std::function<FILE*(const fs::path&, const char*)>;\n \n /** Dump the mempool to disk. */"
      },
      {
        "sha": "94c3c9559f67250bde377d6db8a85b9145001390",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 7,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -190,29 +190,48 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n } // namespace\n \n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }\n \n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, m_caches[pos]);\n }\n \n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n+int32_t VersionBitsCache::ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(m_mutex);\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        Consensus::DeploymentPos pos = static_cast<Consensus::DeploymentPos>(i);\n+        ThresholdState state = VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n+        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n+            nVersion |= Mask(params, pos);\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n void VersionBitsCache::Clear()\n {\n+    LOCK(m_mutex);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n-        caches[d].clear();\n+        m_caches[d].clear();\n     }\n }"
      },
      {
        "sha": "0b2f4a0258a4047a5d195e393ed8f3df2008458b",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_VERSIONBITS_H\n \n #include <chain.h>\n+#include <sync.h>\n+\n #include <map>\n \n /** What block version to use for new blocks (pre versionbits) */\n@@ -71,21 +73,31 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n- *  keyed by the bit position used to signal support. */\n-struct VersionBitsCache\n+/** BIP 9 allows multiple softforks to be deployed in parallel. We cache\n+ *  per-period state for every one of them. */\n+class VersionBitsCache\n {\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+private:\n+    Mutex m_mutex;\n+    ThresholdConditionCache m_caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(m_mutex);\n+\n+public:\n+    /** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n+    static BIP9Stats Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n+    ThresholdState State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n+    int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Determine what nVersion a new block should use\n+     */\n+    int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      },
      {
        "sha": "fa41bad46d97a132447f34316c6475a3df6e58fa",
        "filename": "src/versionbitsinfo.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a926d6dfd291da5578d8af422bde03fd17456d96/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a926d6dfd291da5578d8af422bde03fd17456d96/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=a926d6dfd291da5578d8af422bde03fd17456d96",
        "patch": "@@ -1,18 +0,0 @@\n-// Copyright (c) 2016-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <versionbitsinfo.h>\n-\n-#include <consensus/params.h>\n-\n-const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n-    {\n-        /*.name =*/ \"testdummy\",\n-        /*.gbt_force =*/ true,\n-    },\n-    {\n-        /*.name =*/ \"taproot\",\n-        /*.gbt_force =*/ true,\n-    },\n-};"
      },
      {
        "sha": "a7822bc747a977df697e1e8975cd5558948820c8",
        "filename": "src/versionbitsinfo.h",
        "status": "removed",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a926d6dfd291da5578d8af422bde03fd17456d96/src/versionbitsinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a926d6dfd291da5578d8af422bde03fd17456d96/src/versionbitsinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.h?ref=a926d6dfd291da5578d8af422bde03fd17456d96",
        "patch": "@@ -1,17 +0,0 @@\n-// Copyright (c) 2016-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_VERSIONBITSINFO_H\n-#define BITCOIN_VERSIONBITSINFO_H\n-\n-struct VBDeploymentInfo {\n-    /** Deployment name */\n-    const char *name;\n-    /** Whether GBT clients can safely ignore this rule in simplified usage */\n-    bool gbt_force;\n-};\n-\n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n-\n-#endif // BITCOIN_VERSIONBITSINFO_H"
      }
    ]
  },
  {
    "sha": "fa11fecf0dac44846a08e1b325547641f2eca957",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTExZmVjZjBkYWM0NDg0NmEwOGUxYjMyNTU0NzY0MWYyZWNhOTU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T17:58:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T18:04:07Z"
      },
      "message": "doc: Move buried deployment doc to the enum that enumerates them\n\nThis is more visible than a comment hidden in an RPC helper function.",
      "tree": {
        "sha": "031d39fbdfced3bdb0558fcf7704b23949ceba8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/031d39fbdfced3bdb0558fcf7704b23949ceba8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa11fecf0dac44846a08e1b325547641f2eca957",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhIlQwArHoHZKSefPR0Ncqf5B2cGZzeIDu0pAp8OX/tdL/3w/3CIS657g6cWM4z\nAp1Hp4kDvAOHM8Jh2ueG5KHaxd04MGW8KEL2U3A5rl4zy2TlTPv7D/iRmBx4Vvue\niRGPGNtUNt9Zyji6lz3RbTrSpYaQTwyLjB/q2gHgpqGkDRF3QMiB2HB5HAk4e7Ta\nvNZFy0oq/F3mFNJf61tOiEntsZfbtAmvlSjZ0K0G1K1+HfDToulJFbnDcvrEPiNA\nCZxOK3iXBIqk/HlHulMaWJwZhJX9RbSuJH3qatnwMCc4iwy8Zy+sPnUDocq3lmLh\nvybF9WT4LxFO0e/jkp7twodeCr2XPMFklSm9bMqHJHKJoJM+2AMX/8Sr34Vd9VnY\nimLjLjY4gIekYXvA0cI9oVUvj2PVe5czt8CiIOpzg7lFxOaeTYMgOLlkx85PtvGn\nhdgH0NUDH0jAIgt9wKvrRL5sd5N0U1/cJIeiHhrcmy93LJFMpa8ivV36xD9d5O8b\nQ21/02gB\n=GF8o\n-----END PGP SIGNATURE-----",
        "payload": "tree 031d39fbdfced3bdb0558fcf7704b23949ceba8a\nparent ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e\nauthor MarcoFalke <falke.marco@gmail.com> 1625162296 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625162647 +0200\n\ndoc: Move buried deployment doc to the enum that enumerates them\n\nThis is more visible than a comment hidden in an RPC helper function.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa11fecf0dac44846a08e1b325547641f2eca957",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa11fecf0dac44846a08e1b325547641f2eca957",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa11fecf0dac44846a08e1b325547641f2eca957/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9205cfee874173316f97324421a6d2c8abf8915d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa11fecf0dac44846a08e1b325547641f2eca957/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa11fecf0dac44846a08e1b325547641f2eca957/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=fa11fecf0dac44846a08e1b325547641f2eca957",
        "patch": "@@ -11,8 +11,11 @@\n \n namespace Consensus {\n \n-enum BuriedDeployment : int16_t\n-{\n+/**\n+ * A buried deployment is one where the height of the activation has been hardcoded into\n+ * the client implementation long after the consensus change has activated. See BIP 90.\n+ */\n+enum BuriedDeployment : int16_t {\n     // buried deployments get negative values to avoid overlap with DeploymentPos\n     DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n     DEPLOYMENT_CLTV,\n@@ -22,8 +25,7 @@ enum BuriedDeployment : int16_t\n };\n constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n \n-enum DeploymentPos : uint16_t\n-{\n+enum DeploymentPos : uint16_t {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp"
      },
      {
        "sha": "e08dad2eb090e4f0b70e1e4c41257bd4923abc4c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa11fecf0dac44846a08e1b325547641f2eca957/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa11fecf0dac44846a08e1b325547641f2eca957/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa11fecf0dac44846a08e1b325547641f2eca957",
        "patch": "@@ -1350,8 +1350,6 @@ static RPCHelpMan verifychain()\n static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n-    // A buried deployment is one where the height of the activation has been hardcoded into\n-    // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n     if (!DeploymentEnabled(params, dep)) return;"
      }
    ]
  },
  {
    "sha": "fa5658ed077bfb02b6281d642dc649abdb99b6ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU2NThlZDA3N2JmYjAyYjYyODFkNjQyZGM2NDlhYmRiOTliNmVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T18:29:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T18:20:52Z"
      },
      "message": "Use DeploymentEnabled to hide VB deployments\n\nThe helper was previously unused. This commit changes it to be more\nmeaningful and puts it to use.\n\nSee previous discussion at https://github.com/bitcoin/bitcoin/pull/19438/files#r650687320",
      "tree": {
        "sha": "412bed2ed13aa79089e0b95731e0e5e7ab51b301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/412bed2ed13aa79089e0b95731e0e5e7ab51b301"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5658ed077bfb02b6281d642dc649abdb99b6ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiXSwwAh83ySYUYdxQOqdkZjPvPfLHiLO7aXr8Pr4QorlxndX2kzK2KuIsQ6NXI\nRrDdn0egaBcfAqRPac9yQWKbOnLoL/a19WO5mNAAZEFXadM7Ns0El+88v/zP2ZAp\nI6EMmG5p3KsYGjPz9M1I0u6joja8zljjw35gMAn2ggZRxNT1rptL7uA/83KU33CY\nJzQS8aRlOK8+xiFw6DKWMaUXd8nQW4fNmkiXH5aPV5fBa4HOugttVhbTj2/mMCA0\n/kbmxlkFV25tWTRoHuhKZVmOEmbQ2BEuTqzvRg+qg23TE7rZGjzUQB8vRSZ0VOD0\n3bZlei0EYLvGvsaS5LJpJa4PN8LnUb3dsfD0kfBz9hrRjvcnvvXnP71BPVnXIPIg\nwRtPsUkwiYztJO8zOFdf4TBQFe0FyLxM0vLw/85HqqvPv7vk/5EArbvLMaOkOxj/\nS370Kx+2u/+Jb87HhNwcedaHi7Itf4VaWg58uGyQzwR+VuFKKFc9Atuua2czyKrh\nFZVI4DVA\n=fao3\n-----END PGP SIGNATURE-----",
        "payload": "tree 412bed2ed13aa79089e0b95731e0e5e7ab51b301\nparent fa11fecf0dac44846a08e1b325547641f2eca957\nauthor MarcoFalke <falke.marco@gmail.com> 1625164161 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625163652 +0200\n\nUse DeploymentEnabled to hide VB deployments\n\nThe helper was previously unused. This commit changes it to be more\nmeaningful and puts it to use.\n\nSee previous discussion at https://github.com/bitcoin/bitcoin/pull/19438/files#r650687320\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5658ed077bfb02b6281d642dc649abdb99b6ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5658ed077bfb02b6281d642dc649abdb99b6ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5658ed077bfb02b6281d642dc649abdb99b6ee/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa11fecf0dac44846a08e1b325547641f2eca957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa11fecf0dac44846a08e1b325547641f2eca957",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa11fecf0dac44846a08e1b325547641f2eca957"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f95c5996f5e4c3071b0fbfda0d049cd9edcdb721",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5658ed077bfb02b6281d642dc649abdb99b6ee/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5658ed077bfb02b6281d642dc649abdb99b6ee/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=fa5658ed077bfb02b6281d642dc649abdb99b6ee",
        "patch": "@@ -49,7 +49,7 @@ inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::Buried\n inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return params.vDeployments[dep].nTimeout != 0;\n+    return params.vDeployments[dep].nStartTime != Consensus::BIP9Deployment::NEVER_ACTIVE;\n }\n \n #endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "c4a89c9772abfa94b85e7bc2d17dc933cc315e29",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5658ed077bfb02b6281d642dc649abdb99b6ee/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5658ed077bfb02b6281d642dc649abdb99b6ee/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa5658ed077bfb02b6281d642dc649abdb99b6ee",
        "patch": "@@ -1350,8 +1350,7 @@ static RPCHelpMan verifychain()\n static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n-    // Buried deployments with activation height value of\n-    // std::numeric_limits<int>::max() are disabled and thus hidden.\n+\n     if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n@@ -1366,8 +1365,8 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n-    // Deployments that are never active are hidden.\n-    if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n+\n+    if (!DeploymentEnabled(consensusParams, id)) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);"
      }
    ]
  },
  {
    "sha": "16b0a936e15b81710755303e11ef51f608b61475",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmIwYTkzNmUxNWI4MTcxMDc1NTMwM2UxMWVmNTFmNjA4YjYxNDc1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-26T00:49:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-01T20:17:03Z"
      },
      "message": "guix: Rebase toolchain on glibc 2.24 (2.27 for riscv64)\n\nSupport for riscv64 in glibc landed in 2.27 so it's unavoidable that we\nuse 2.27.\n\nRunning a Bitcoin build with toolchains based on 2.24 for platforms\nother than riscv64 seem to produce binaries which do not have 2.17\nsymbols. So use 2.24 since it's more recent and maintained by Debian\nStretch.",
      "tree": {
        "sha": "1f7bc959fc5453575da46a74aab8638e45bf6385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f7bc959fc5453575da46a74aab8638e45bf6385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16b0a936e15b81710755303e11ef51f608b61475",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16b0a936e15b81710755303e11ef51f608b61475",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e"
      }
    ],
    "stats": {
      "total": 521,
      "additions": 519,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4df4855fc460b2ae53b4f5c9e1de66d17840888",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -135,11 +135,25 @@ chain for \" target \" development.\"))\n   (package-with-extra-patches gcc-8\n     (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n \n+;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n+;; this function to disable for older glibcs\n+;;\n+;; From glibc 2.25 changelog:\n+;;\n+;;   * Most of glibc can now be built with the stack smashing protector enabled.\n+;;     It is recommended to build glibc with --enable-stack-protector=strong.\n+;;     Implemented by Nick Alcock (Oracle).\n+(define (make-glibc-without-ssp xglibc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    xglibc \"libc_cv_ssp\" \"no\")\n+   \"libc_cv_ssp_strong\" \"no\"))\n+\n (define* (make-bitcoin-cross-toolchain target\n                                        #:key\n                                        (base-gcc-for-libc gcc-7)\n                                        (base-kernel-headers linux-libre-headers-5.4)\n-                                       (base-libc glibc)  ; glibc 2.31\n+                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n                                        (base-gcc (make-gcc-rpath-link base-gcc)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n@@ -557,6 +571,28 @@ and endian independent.\")\n inspecting signatures in Mach-O binaries.\")\n       (license license:expat))))\n \n+(define-public glibc-2.24\n+  (package\n+    (inherit glibc)\n+    (version \"2.24\")\n+    (source (origin\n+              (method git-fetch)\n+              (uri (git-reference\n+                    (url \"https://sourceware.org/git/glibc.git\")\n+                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n+              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n+              (sha256\n+               (base32\n+                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n+              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n+                                           \"glibc-versioned-locpath.patch\"\n+                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n+                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n+\n+(define glibc-2.27/bitcoin-patched\n+  (package-with-extra-patches glibc-2.27\n+    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n+\n (packages->manifest\n  (append\n   (list ;; The Basics\n@@ -606,7 +642,10 @@ inspecting signatures in Mach-O binaries.\")\n                  (make-nsis-with-sde-support nsis-x86_64)\n                  osslsigncode))\n           ((string-contains target \"-linux-\")\n-           (list (make-bitcoin-cross-toolchain target)))\n+           (list (cond ((string-contains target \"riscv64-\")\n+                        (make-bitcoin-cross-toolchain target #:base-libc glibc-2.27/bitcoin-patched))\n+                       (else\n+                        (make-bitcoin-cross-toolchain target)))))\n           ((string-contains target \"darwin\")\n            (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n           (else '())))))"
      },
      {
        "sha": "54a7824345fa381dbfed01c4b7603d403a329fa2",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,60 @@\n+commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n+Date:   Wed Oct 18 17:26:23 2017 +0100\n+\n+    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n+    \n+    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n+    symbol instead of _dl_start.\n+    \n+    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n+    Here is the change which makes this solution work (part of binutils 2.24):\n+    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n+    \n+    i386, x86_64 targets use the same method to do this as well.\n+    \n+    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n+    being resolved at link time and the static address fits in the 32bits.\n+    However, in LP64, normally, the address is defined to be 64 bit.\n+    \n+    Here is the C version one which should be portable in all cases.\n+    \n+            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n+            _DYNAMIC symbol to calculate load address.\n+\n+diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n+index e86d8b5b63..5a5b8a5de5 100644\n+--- a/sysdeps/aarch64/dl-machine.h\n++++ b/sysdeps/aarch64/dl-machine.h\n+@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n+   /* To figure out the load address we use the definition that for any symbol:\n+      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n+ \n+-     The choice of symbol is arbitrary. The static address we obtain\n+-     by constructing a non GOT reference to the symbol, the dynamic\n+-     address of the symbol we compute using adrp/add to compute the\n+-     symbol's address relative to the PC.\n+-     This depends on 32bit relocations being resolved at link time\n+-     and that the static address fits in the 32bits.  */\n+-\n+-  ElfW(Addr) static_addr;\n+-  ElfW(Addr) dynamic_addr;\n+-\n+-  asm (\"\t\t\t\t\t\\n\"\n+-\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n+-\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n+-\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n+-\"\tb\t2f\t\t\t\t\\n\"\n+-\"1:\t\t\t\t\t\t\\n\"\n+-\"\t.word\t_dl_start\t\t\t\\n\"\n+-\"2:\t\t\t\t\t\t\\n\"\n+-    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n+-  return dynamic_addr - static_addr;\n++    _DYNAMIC sysmbol is used here as its link-time address stored in\n++    the special unrelocated first GOT entry.  */\n++\n++    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n++    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n+ }\n+ \n+ /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "5d7a148c62cf05e9eb2d55b5c1997462e303935d",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,98 @@\n+commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n+Author: Florian Weimer <fweimer@redhat.com>\n+Date:   Wed Sep 21 10:45:32 2016 +0200\n+\n+    Avoid running $(CXX) during build to obtain header file paths\n+    \n+    This reduces the build time somewhat and is particularly noticeable\n+    during rebuilds with few code changes.\n+\n+diff --git a/Makerules b/Makerules\n+index 7e4077ee50..c338850de5 100644\n+--- a/Makerules\n++++ b/Makerules\n+@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n+ # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n+ before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n+ \t          $(before-compile)\n+-cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n+-$(common-objpfx)cstdlib: $(cstdlib)\n++$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+-cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n+-$(common-objpfx)cmath: $(cmath)\n++$(common-objpfx)cmath: $(c++-cmath-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+ endif\n+diff --git a/config.make.in b/config.make.in\n+index 95c6f36876..04a8b3ed7f 100644\n+--- a/config.make.in\n++++ b/config.make.in\n+@@ -45,6 +45,8 @@ defines = @DEFINES@\n+ sysheaders = @sysheaders@\n+ sysincludes = @SYSINCLUDES@\n+ c++-sysincludes = @CXX_SYSINCLUDES@\n++c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n++c++-cmath-header = @CXX_CMATH_HEADER@\n+ all-warnings = @all_warnings@\n+ enable-werror = @enable_werror@\n+ \n+diff --git a/configure b/configure\n+index 17625e1041..6ff252744b 100755\n+--- a/configure\n++++ b/configure\n+@@ -635,6 +635,8 @@ BISON\n+ INSTALL_INFO\n+ PERL\n+ BASH_SHELL\n++CXX_CMATH_HEADER\n++CXX_CSTDLIB_HEADER\n+ CXX_SYSINCLUDES\n+ SYSINCLUDES\n+ AUTOCONF\n+@@ -5054,6 +5056,18 @@ fi\n+ \n+ \n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++\n++\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following\n+diff --git a/configure.ac b/configure.ac\n+index 33bcd62180..9938ab0dc2 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -1039,6 +1039,18 @@ fi\n+ AC_SUBST(SYSINCLUDES)\n+ AC_SUBST(CXX_SYSINCLUDES)\n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++AC_SUBST(CXX_CSTDLIB_HEADER)\n++AC_SUBST(CXX_CMATH_HEADER)\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "39c995ffb5c4caa8a572b221e40aaee7d0264dd1",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,70 @@\n+From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Mon, 31 Dec 2018 09:26:42 -0800\n+Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n+ #24022]\n+\n+<asm/syscalls.h> has been removed by\n+\n+commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n+Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n+Date:   Thu Nov 8 20:02:39 2018 +0100\n+\n+    riscv: add asm/unistd.h UAPI header\n+\n+    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n+    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n+    architectures.\n+\n+    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n+    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n+    - Adjust kernel asm/unistd.h\n+\n+    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n+\n+<asm/syscalls.h> may be restored by\n+\n+Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n+Date: Tue, 11 Dec 2018 09:09:35 +0100\n+\n+UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n+which did resolve issue with missing syscalls macros resulting in\n+glibc (2.28) build failure. It also broke glibc in a different way:\n+asm/syscalls.h is being used by glibc. I noticed this while doing\n+Fedora 30/Rawhide mass rebuild.\n+\n+The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n+I plan to send a patch to glibc to use asm/unistd.h instead of\n+asm/syscalls.h\n+\n+In the meantime, we use __has_include__, which was added to GCC 5, to\n+check if <asm/syscalls.h> exists before including it.  Tested with\n+build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n+\n+\t[BZ #24022]\n+\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n+\t<asm/syscalls.h> exists with __has_include__ before including it.\n+---\n+ sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n+ 1 file changed, 5 insertions(+), 1 deletion(-)\n+\n+diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+index d612ef4c6c..0b2042620b 100644\n+--- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n++++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+@@ -21,7 +21,11 @@\n+ #include <stdlib.h>\n+ #include <atomic.h>\n+ #include <sys/cachectl.h>\n+-#include <asm/syscalls.h>\n++#if __has_include__ (<asm/syscalls.h>)\n++# include <asm/syscalls.h>\n++#else\n++# include <asm/unistd.h>\n++#endif\n+ \n+ typedef int (*func_type) (void *, void *, unsigned long int);\n+ \n+-- \n+2.31.1\n+"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,10 @@\n+By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n+it's in 'lib/' for us.  This patch fixes that.\n+\n+--- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n++++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n+@@ -1,3 +1,3 @@\n+ /LD_TRACE_LOADED_OBJECTS=1/a\\\n+ add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n+-s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n++s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "added",
        "additions": 240,
        "deletions": 0,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,240 @@\n+The format of locale data can be incompatible between libc versions, and\n+loading incompatible data can lead to 'setlocale' returning EINVAL at best\n+or triggering an assertion failure at worst.  See\n+https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n+for background information.\n+\n+To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n+variable, and to look for locale data in version-specific sub-directories of\n+that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n+/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n+\n+That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n+versions coexist on the system.\n+\n+--- a/locale/newlocale.c\n++++ b/locale/newlocale.c\n+@@ -30,6 +30,7 @@\n+ /* Lock for protecting global data.  */\n+ __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n+ \n++extern error_t compute_locale_search_path (char **, size_t *);\n+ \n+ /* Use this when we come along an error.  */\n+ #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n+@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   __locale_t result_ptr;\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   int cnt;\n+   size_t names_len;\n+ \n+@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n+-    {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0)\n+-\treturn NULL;\n+-\n+-      if (__argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t  _nl_default_locale_path, ':') != 0)\n+-\treturn NULL;\n+-    }\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n++    return NULL;\n+ \n+   /* Get the names for the locales we are interested in.  We either\n+      allow a composite name or a single name.  */\n+diff --git a/locale/setlocale.c b/locale/setlocale.c\n+index ead030d..0c0e314 100644\n+--- a/locale/setlocale.c\n++++ b/locale/setlocale.c\n+@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n+     }\n+ }\n+ \n++/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n++   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n++error_t\n++compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n++{\n++  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n++  char *locpath_var = getenv (\"LOCPATH\");\n++\n++  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n++    {\n++      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n++\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n++\t libc version.  */\n++      if (__argz_create_sep (guix_locpath_var, ':',\n++\t\t\t     locale_path, locale_path_len) != 0\n++\t  || __argz_suffix_entries (locale_path, locale_path_len,\n++\t\t\t\t    \"/\" VERSION) != 0)\n++\tgoto bail_out;\n++    }\n++\n++  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++    {\n++      char *reg_locale_path = NULL;\n++      size_t reg_locale_path_len = 0;\n++\n++      if (__argz_create_sep (locpath_var, ':',\n++\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      if (__argz_append (locale_path, locale_path_len,\n++\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      free (reg_locale_path);\n++    }\n++\n++  if (*locale_path != NULL)\n++    {\n++      /* Append the system default locale directory.  */\n++      if (__argz_add_sep (locale_path, locale_path_len,\n++\t\t\t  _nl_default_locale_path, ':') != 0)\n++\tgoto bail_out;\n++    }\n++\n++  return 0;\n++\n++ bail_out:\n++  free (*locale_path);\n++  *locale_path = NULL;\n++  *locale_path_len = 0;\n++\n++  return ENOMEM;\n++}\n++\n+ char *\n+ setlocale (int category, const char *locale)\n+ {\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   char *composite;\n+ \n+   /* Sanity check for CATEGORY argument.  */\n+@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n+     {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0\n+-\t  || __argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t     _nl_default_locale_path, ':') != 0)\n+-\t{\n+-\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n+-\t  return NULL;\n+-\t}\n++      __libc_rwlock_unlock (__libc_setlocale_lock);\n++      return NULL;\n+     }\n+ \n+   if (category == LC_ALL)\n+diff --git a/string/Makefile b/string/Makefile\n+index 8424a61..f925503 100644\n+--- a/string/Makefile\n++++ b/string/Makefile\n+@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n+ \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n+ \t\t   $(addprefix argz-,append count create ctsep next\t\\\n+ \t\t\t\t     delete extract insert stringify\t\\\n+-\t\t\t\t     addsep replace)\t\t\t\\\n++\t\t\t\t     addsep replace suffix)\t\t\\\n+ \t\t   envz basename\t\t\t\t\t\\\n+ \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n+ \t\t   xpg-strerror strerror_l\n+diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n+new file mode 100644\n+index 0000000..505b0f2\n+--- /dev/null\n++++ b/string/argz-suffix.c\n+@@ -0,0 +1,56 @@\n++/* Copyright (C) 2015 Free Software Foundation, Inc.\n++   This file is part of the GNU C Library.\n++   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n++\n++   The GNU C Library is free software; you can redistribute it and/or\n++   modify it under the terms of the GNU Lesser General Public\n++   License as published by the Free Software Foundation; either\n++   version 2.1 of the License, or (at your option) any later version.\n++\n++   The GNU C Library is distributed in the hope that it will be useful,\n++   but WITHOUT ANY WARRANTY; without even the implied warranty of\n++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n++   Lesser General Public License for more details.\n++\n++   You should have received a copy of the GNU Lesser General Public\n++   License along with the GNU C Library; if not, see\n++   <http://www.gnu.org/licenses/>.  */\n++\n++#include <argz.h>\n++#include <errno.h>\n++#include <stdlib.h>\n++#include <string.h>\n++\n++\n++error_t\n++__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n++\n++{\n++  size_t suffix_len = strlen (suffix);\n++  size_t count = __argz_count (*argz, *argz_len);\n++  size_t new_argz_len = *argz_len + count * suffix_len;\n++  char *new_argz = malloc (new_argz_len);\n++\n++  if (new_argz)\n++    {\n++      char *p = new_argz, *entry;\n++\n++      for (entry = *argz;\n++\t   entry != NULL;\n++\t   entry = argz_next (*argz, *argz_len, entry))\n++\t{\n++\t  p = stpcpy (p, entry);\n++\t  p = stpcpy (p, suffix);\n++\t  p++;\n++\t}\n++\n++      free (*argz);\n++      *argz = new_argz;\n++      *argz_len = new_argz_len;\n++\n++      return 0;\n++    }\n++  else\n++    return ENOMEM;\n++}\n++weak_alias (__argz_suffix_entries, argz_suffix_entries)\n+diff --git a/string/argz.h b/string/argz.h\n+index bb62a31..d276a35 100644\n+--- a/string/argz.h\n++++ b/string/argz.h\n+@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n+ \t\t\t     const char *__restrict __str,\n+ \t\t\t     const char *__restrict __with,\n+ \t\t\t     unsigned int *__restrict __replace_count);\n++\n++/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n++   and ENOMEN if memory cannot be allocated.  */\n++extern error_t __argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t      size_t *__restrict __argz_len,\n++\t\t\t\t      const char *__restrict __suffix);\n++extern error_t argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t    size_t *__restrict __argz_len,\n++\t\t\t\t    const char *__restrict __suffix);\n++\n+ \f\n+ /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n+    are no more.  If entry is NULL, then the first entry is returned.  This"
      }
    ]
  },
  {
    "sha": "dc4137a60c99979b89f75d2bddba96d043f387b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQxMzdhNjBjOTk5NzliODlmNzVkMmJkZGJhOTZkMDQzZjM4N2I4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-28T20:55:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-01T20:20:28Z"
      },
      "message": "guix: Build depends/qt with our platform definition\n\nOur 'bitcoin-linux-g++' definition better integrates with our depends\nsystem than the stock linux-g++-64 definition.\n\nThis fixes a bug whereby Guix builds on x86_64 for x86_64 did not\nproduce a QMinimalIntegrationPlugin and led to bitcoin-qt not being\nbuilt.",
      "tree": {
        "sha": "91012748d67522898a2b048dfcc02ce0ac71d237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91012748d67522898a2b048dfcc02ce0ac71d237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4137a60c99979b89f75d2bddba96d043f387b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16b0a936e15b81710755303e11ef51f608b61475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16b0a936e15b81710755303e11ef51f608b61475"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9351c5422967b2fbd0193309e895792ae17acd05",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4137a60c99979b89f75d2bddba96d043f387b8/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4137a60c99979b89f75d2bddba96d043f387b8/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=dc4137a60c99979b89f75d2bddba96d043f387b8",
        "patch": "@@ -214,6 +214,7 @@ make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n                                    qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n                                    FORCE_USE_SYSTEM_CLANG=1\n \n "
      }
    ]
  },
  {
    "sha": "7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmMxZTE0Y2U2MGQ0ZTA1MzNjN2NjYzY1YTliMjQwNTJkN2E2MDhm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-02T02:29:03Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-02T02:29:03Z"
      },
      "message": "ci: use Ubuntu 20.04 as the default Docker container\n\nAll but 2 of the Ubuntu CIs are already using 20.04 or 21.04.",
      "tree": {
        "sha": "2129a4a80188d61a14397af418661b87b3de7203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2129a4a80188d61a14397af418661b87b3de7203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDeeh4ACgkQLuufXMCV\nJsEINw//Z/dQHTIoXXb7iiyg8RakQkNvYeYyus9q1NDzqd4y7Wu5cI4wi0l00GH1\njVpvbSmZ50Rn9iILMIc8tHAbXVR7djZAYk4BXBhpuDGCV0ruYRY6bMMcKLizQ798\nECqtxpmBI/2MbBMpYeS1M88d+IaZ4w1VQAR+n6Cpt0ghwayAX6LA+bVxMgu9Ylgm\nNYWldHTZF2QE2YdJg0I+f4/tg66okWLBBlKcq/U4i4d7lFdY6ksJDf+U5+6UC8mH\nDz0GuJw6zNHUjwwN4tDHrZj+BsfPgG4KR8exIiMllbNHAP78hHtTNzvy/+5G5Ufo\nAQehNkpxbcgD+I5J7wwvRoRndwdJCWWj1xyfZb+Qw6WX/z7oPkcFk4PY/y0XBPS7\nFm+coPbZkj8G7X9oe0e5vVnCsjIgZOJ0rE9HtcBPZhWOEK8M2E0w4/NwefKdZ6Om\nDjp+exa6gNAdNjZyBTPcQsA/6VnaurTyAtBam+ZTe1sG5gJIfbbs50oo0S8tJ+aF\nJc65yWEjd7M98SAXrZfFTQ11eM4IPW+exTgYv/RguVsnsJq0PwhUP1Is++FHhvAG\nmqRFzxZ2FLg13oK9+T7rzqs3dvb1NC0+7mDRxPkxD/mpCQ5PvK/pCcdKy/5Mvy8j\nELfSd7piSC2MpHrnpWfRs/O9G0NTGRxUWF8WukII9EH0j6gG4Q0=\n=w3Nj\n-----END PGP SIGNATURE-----",
        "payload": "tree 2129a4a80188d61a14397af418661b87b3de7203\nparent ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e\nauthor fanquake <fanquake@gmail.com> 1625192943 +0800\ncommitter fanquake <fanquake@gmail.com> 1625192943 +0800\n\nci: use Ubuntu 20.04 as the default Docker container\n\nAll but 2 of the Ubuntu CIs are already using 20.04 or 21.04.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a9d808f5de9aa9471d99e205ececc278d42ef7d",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
        "patch": "@@ -47,7 +47,7 @@ export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n \n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n-export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:20.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}"
      }
    ]
  },
  {
    "sha": "7a49fdc58115845ece3a9890bf9498bee6b559de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTQ5ZmRjNTgxMTU4NDVlY2UzYTk4OTBiZjk0OThiZWU2YjU1OWRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-02T05:29:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-02T05:29:12Z"
      },
      "message": "Merge bitcoin/bitcoin#22388: ci: use Ubuntu 20.04 as the default Docker container\n\n7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f ci: use Ubuntu 20.04 as the default Docker container (fanquake)\n\nPull request description:\n\n  All but 2 of the Ubuntu CIs (native qt5 & nowallet) are already using 20.04 or 21.04.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f\n\nTree-SHA512: f35d79a87af6c6955695b5e627884f94aed19bafaed4657d03ef4db66cf47cae5311464bb39961570140325652941283b9d88dff862776e8becfff9130162917",
      "tree": {
        "sha": "2129a4a80188d61a14397af418661b87b3de7203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2129a4a80188d61a14397af418661b87b3de7203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUio1Av/fs/qqvn0VsFnQ2+6gmquKD5odaknw+gsxikq11xARAh7MW1TSgCzaPe3\ntQHNKC7Tm4qgsfyOBguDgF87uj6cAELQm1j0SXf467Du3aicqYoP3aw9h40bazqI\nlHVWD4UiNlhT++3hmJbfSQAic6uqo0/ganCmKdL9n9tyI1nDrHosrbEC9tKBleYx\n59xjhdI8CwxMCrqdAUp5XWTsVKhmqXS4PwKImQlnjt5MpOBz7fxNfwICIzgsIGSq\n8HsW5zzWYd8PcC8pU3qv4EEZ5AtPSdo9FGB3IzaPEko9Y4dItwcakaTIIIlaFERF\nff2s87vh7oEshdqOVkI/g+yRqhWhzzxa9gm2I4PSjXKqs3cTuC/9PIE1Jxg8Go1d\nKamhrSaof2FBGY7pUB068DLxwevAccXD96bBj5cBA0SmCB+f9zqd+/euh5xHQF3F\n0pHSiiumdCc+XtgCPoRGAOTLfM16ezojm5jvV55ZRivEsHmVDjpN+hfSBXbGqr+b\n/AHeq9py\n=2fiY\n-----END PGP SIGNATURE-----",
        "payload": "tree 2129a4a80188d61a14397af418661b87b3de7203\nparent ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e\nparent 7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f\nauthor MarcoFalke <falke.marco@gmail.com> 1625203749 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625203752 +0200\n\nMerge bitcoin/bitcoin#22388: ci: use Ubuntu 20.04 as the default Docker container\n\n7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f ci: use Ubuntu 20.04 as the default Docker container (fanquake)\n\nPull request description:\n\n  All but 2 of the Ubuntu CIs (native qt5 & nowallet) are already using 20.04 or 21.04.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f\n\nTree-SHA512: f35d79a87af6c6955695b5e627884f94aed19bafaed4657d03ef4db66cf47cae5311464bb39961570140325652941283b9d88dff862776e8becfff9130162917\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a49fdc58115845ece3a9890bf9498bee6b559de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e"
      },
      {
        "sha": "7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fc1e14ce60d4e0533c7ccc65a9b24052d7a608f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a9d808f5de9aa9471d99e205ececc278d42ef7d",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a49fdc58115845ece3a9890bf9498bee6b559de/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a49fdc58115845ece3a9890bf9498bee6b559de/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=7a49fdc58115845ece3a9890bf9498bee6b559de",
        "patch": "@@ -47,7 +47,7 @@ export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n \n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n-export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:20.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}"
      }
    ]
  },
  {
    "sha": "647f7e5f1da1089d451f3c431efc635b8e87b064",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDdmN2U1ZjFkYTEwODlkNDUxZjNjNDMxZWZjNjM1YjhlODdiMDY0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T18:10:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T18:10:33Z"
      },
      "message": "guix: Also sort SHA256SUMS.part",
      "tree": {
        "sha": "e05b1bdcce216685054d197551c91f6f02028b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e05b1bdcce216685054d197551c91f6f02028b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/647f7e5f1da1089d451f3c431efc635b8e87b064",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647f7e5f1da1089d451f3c431efc635b8e87b064",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/647f7e5f1da1089d451f3c431efc635b8e87b064",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647f7e5f1da1089d451f3c431efc635b8e87b064/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc4137a60c99979b89f75d2bddba96d043f387b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4137a60c99979b89f75d2bddba96d043f387b8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e457840d1572f69cb8e7c924b87f09d60620b41c",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=647f7e5f1da1089d451f3c431efc635b8e87b064",
        "patch": "@@ -446,5 +446,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n       | xargs sha256sum \\\n+      | sort -k2 \\\n       | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=647f7e5f1da1089d451f3c431efc635b8e87b064",
        "patch": "@@ -108,5 +108,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n         | xargs sha256sum \\\n+        | sort -k2 \\\n         | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      }
    ]
  },
  {
    "sha": "258492982386dac174461f641965c8d78fa6f1ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTg0OTI5ODIzODZkYWMxNzQ0NjFmNjQxOTY1YzhkNzhmYTZmMWNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-03-15T06:50:59Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-03T19:31:26Z"
      },
      "message": "doc: Add steps for transifex to release process\n\nDocument how to update settings on and for the transifex website before\nand after branch-off of a new release.",
      "tree": {
        "sha": "2cea576d58cf075bb082712b98b242f82ab44933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cea576d58cf075bb082712b98b242f82ab44933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/258492982386dac174461f641965c8d78fa6f1ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDguw4ACgkQT1chs9Dj\nkh0GVRAAxt6GHBXN8BMEZzVvzBWia594Vl+hFQcvSukP7YSuD9z5aKQJIlpWsSfz\n4dcFOVCezqNGg2+CvChuwm3UivS6T2abxhdcaXxv5MIAvPZW9Y/sODkOaylYKsPU\ncZQlhJzmDTWmGRu8X1/JD+9RbfGzB8vtUTrl6xz73eAr+9/O1CAauefySF0zdYGJ\nK7CB3ui2jVGckE1VyEqASI60Pj0epiCmC14yJv3MPL6FCro3MHi0NFulAX6UqzMD\nFVkqrTIyBuo9RpTBl1p76oPisJY9Hra7n0Cu5ZblIKa5RQ+tBkZSBahvbPcxgn+P\nYsBeFB/vMFnSpMH7GU+7nIOM/qEbkUSkxWqAgnWyAkBpnZu0708ioTUbXuUWmLd5\nJOgqjzwGS1nuQ0sQVuF4Yo4mt5B4m+j9Wd4ePcSz7T1BBwfH9d1RNKF9q8GqbDmx\nrcCFfV8eZE5+DS9DTH3mf29JLkpiBntpHpl5wGIxvFR64lzTuQEFWcly9CG5eMQL\nZ5KkcQ7plv4AiPi2UKg5aL/HRoYMfa9kSYEqhMdxsiGZ0xPiftUsMcsq3+aGIO5H\nnG6boyG9LblQ68n2umsYWdgUwyCmJfNA38/mLcUR5mXV3CL/uQEz9QTENHc9iRww\nBIiICMPhL4nYc9H9cwJZRU/3dyTKtAFE5eoL53M+xneFedhcfAQ=\n=KN3C\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIB7nKLqCedjpozC5GoZmNAevOX9OkfzrorEE39NNlq1dCP/wEDqlAqhtloCC\n3IEEtHMQQUkI8QRg4LsR8Aj1auAzObv5WQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEE8xd3NhJbvBTIZZuL5dcjsI\n8CBLQBhoDuacIXgnQDNzELjGNdcC1DfcTM7Cx89OyHFd/AjwIPGtUpog6lLtMqa1\nTF2OsbHSJSTql3vpL0kL/RGTUIDRCPEEYOC7EPAIb16zfLvi7OoAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BBQ\ndky3hnR2YGjB1CuI81jpCPEgkar10D1yZFMDSyzRwiwys/57shqEe0pDrveZm+/Q\nuIgI8QRg4LsQ8Aie5Llr9K7ErwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BB5Fa47ZKpN7GT3t7lbjEvSCPEE\nYOC7D/AIe9txBTc19HEAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2cea576d58cf075bb082712b98b242f82ab44933\nparent a000cb013cc1104ddcd6431d5a9b89e90bde2593\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1615791059 +0100\ncommitter Jon Atack <jon@atack.com> 1625340686 +0200\n\ndoc: Add steps for transifex to release process\n\nDocument how to update settings on and for the transifex website before\nand after branch-off of a new release.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258492982386dac174461f641965c8d78fa6f1ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/258492982386dac174461f641965c8d78fa6f1ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258492982386dac174461f641965c8d78fa6f1ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a000cb013cc1104ddcd6431d5a9b89e90bde2593"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3aad3e12f69637b902b8a9aec95f34833d33dfc5",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/258492982386dac174461f641965c8d78fa6f1ce/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/258492982386dac174461f641965c8d78fa6f1ce/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=258492982386dac174461f641965c8d78fa6f1ce",
        "patch": "@@ -37,6 +37,12 @@ Release Process\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n - Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n+- Translations on Transifex\n+    - Create [a new resource](https://www.transifex.com/bitcoin/bitcoin/content/) named after the major version with the slug `[bitcoin.qt-translation-<RRR>x]`, where `RRR` is the major branch number padded with zeros. Use `src/qt/locale/bitcoin_en.xlf` to create it.\n+    - In the project workflow settings, ensure that [Translation Memory Fill-up](https://docs.transifex.com/translation-memory/enabling-autofill) is enabled and that [Translation Memory Context Matching](https://docs.transifex.com/translation-memory/translation-memory-with-context) is disabled.\n+    - Update the Transifex slug in [`.tx/config`](/.tx/config) to the slug of the resource created in the first step. This identifies which resource the translations will be synchronized from.\n+    - Make an announcement that translators can start translating for the new version. You can use one of the [previous announcements](https://www.transifex.com/bitcoin/bitcoin/announcements/) as a template.\n+    - Change the auto-update URL for the resource to `master`, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/qt/locale/bitcoin_en.xlf`. (Do this only after the previous steps, to prevent an auto-update from interfering.)\n \n #### After branch-off (on master)\n \n@@ -46,6 +52,8 @@ Release Process\n \n - Update the versions.\n - Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n+- Translations on Transifex\n+    - Change the auto-update URL for the new major version's resource away from `master` and to the branch, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/<branch>/src/qt/locale/bitcoin_en.xlf`. Do not forget this or it will keep tracking the translations on master instead, drifting away from the specific major release.\n \n #### Before final release\n "
      }
    ]
  },
  {
    "sha": "a16378e501199144b5aecda57d8bfbc014546764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTYzNzhlNTAxMTk5MTQ0YjVhZWNkYTU3ZDhiZmJjMDE0NTQ2NzY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-03-16T13:14:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-03T19:31:29Z"
      },
      "message": "doc: Remove unnecessary steps from translations update process\n\nThese have been integrated into the script long ago.",
      "tree": {
        "sha": "01ea3af18c8fdc32afbadab19b724d0af8f5a28c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01ea3af18c8fdc32afbadab19b724d0af8f5a28c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a16378e501199144b5aecda57d8bfbc014546764",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDguxEACgkQT1chs9Dj\nkh1Bpw/+JbESObJCGefrknpq47gmyGQzlRsu5O1v/taKzROXp/avmVeRxKa7raUJ\n0xIXFkp/ouOTsHVok+6IAFFkgJMUx+iRlrrZtM4UmFOcp47JO8SzcVRp6ayfgzqC\ndY4+HE5nJIORKHkDIxCoaW/Ci7o6eGXGKJd63yy7EROiwFHyPLdaizwE0+nBAk5y\nMfTI+jg7/KuLlIVtRB64xpGvbWYRDb3SZ78PeNthnVW20PhSdFsysuNqCT1FZSEJ\nY2dzDHCKWDV1zbrv7SFf1zGb7G2wF2D4J7KcMV36D1PNggUfuNvVoadYSLF52MzO\nY44FuirxXM/bSHcmy+4fNyIuaF0Dg0CKCLGLzEE/Ey8wvJck0Bk4GCvJy5qjs9ew\nl1NQ8AehVBOWkhU16okaFh0BF0XO18Th7+A6cz4eAFSNhbYvqzdIdn7WPB+O+5p1\njZZv2HPrUj7ihrG6lbJhkmBNAqIXTlJ7MP7lolICT+OtmBjaluwuXzZDuCvAh3nk\nG5fbZtaY2bZS5rusOuFWXeq5TTmhkR9YpxF5SsQflkjNxWlK8JGcy0NrPiYuaerQ\nbW7YYMoT6BbnhIfuq7elsH2OiO9p4gopbpJCYRjzyutdjF/mDrMK+lRMRcKzEqI1\nsO7ZjlRDGnupq+Ml+lMh/lCyPbBeo+/UJmoQFYb0Lz+xkbY/ZHU=\n=D4C1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKEiVysw+GN5ZTAOl5jZLElB7rnblSV2V4PyT11pbkN4CP/wEG5dbPFn3bHP\n1c/iEWdV+JoI8QRg4LsS8AihEPvFJFqWUgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wELtHVYzIs1KPAnRzgG+g\nFC8I8SBPESPmmrrl91WdjAxb2uP/LfPE7TVfP+0tqNqU85qctgjxBGDguxPwCOm0\n8wtptBMHAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t//AQ054Pjkjn2R//hQjb0nJ32gjxIGxk1Tz2FclKWXVY1loIgCxT\ntI1kSVrGUrYe0BZtJhQrCPEEYOC7EvAIvGOEanaYxq8Ag9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ8aHh6nES\nxDYuC/zDxzdRVgjxBGDguxLwCEEj4TeXctUKAIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 01ea3af18c8fdc32afbadab19b724d0af8f5a28c\nparent 258492982386dac174461f641965c8d78fa6f1ce\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1615900443 +0100\ncommitter Jon Atack <jon@atack.com> 1625340689 +0200\n\ndoc: Remove unnecessary steps from translations update process\n\nThese have been integrated into the script long ago.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16378e501199144b5aecda57d8bfbc014546764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a16378e501199144b5aecda57d8bfbc014546764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16378e501199144b5aecda57d8bfbc014546764/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "258492982386dac174461f641965c8d78fa6f1ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258492982386dac174461f641965c8d78fa6f1ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/258492982386dac174461f641965c8d78fa6f1ce"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "97a8fbfff21970a7c26c5ab29d1b0f597d221251",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a16378e501199144b5aecda57d8bfbc014546764/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a16378e501199144b5aecda57d8bfbc014546764/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=a16378e501199144b5aecda57d8bfbc014546764",
        "patch": "@@ -63,17 +63,12 @@ username = USERNAME\n The Transifex Bitcoin project config file is included as part of the repo. It can be found at `.tx/config`, however you shouldn\u2019t need to change anything.\n \n ### Synchronising translations\n-To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools).\n \n-1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n-2. `git add` new translations from `src/qt/locale/`\n-3. Update `src/qt/bitcoin_locale.qrc` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools). To use it and commit the result, simply do:\n+\n ```\n-4. Update `src/Makefile.qt_locale.include` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n+python3 ../bitcoin-maintainer-tools/update-translations.py\n+git commit -a\n ```\n \n **Do not directly download translations** one by one from the Transifex website, as we do a few post-processing steps before committing the translations."
      }
    ]
  },
  {
    "sha": "fa40c0964b751683774b79da4b72d330a9ff87e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQwYzA5NjRiNzUxNjgzNzc0Yjc5ZGE0YjcyZDMzMGE5ZmY4N2Uy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T12:22:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:28:04Z"
      },
      "message": "fuzz: Move ConsumeTxDestination to cpp file\n\nMoving the implementation out of the header will reduce compile time",
      "tree": {
        "sha": "a2f0629712f7bc115a4317f09bd896f420bcfd05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2f0629712f7bc115a4317f09bd896f420bcfd05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa40c0964b751683774b79da4b72d330a9ff87e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhZPQwApsF5b0HdIeKrCa79GVmqO0sgwq0xq4i+ytlmOjwqFMPvVZL1Efpiye0D\n+w9nirT4Coa5su6sfy0rheeo7PR1kmibSvWrZQBhtSYsg+NZ55iEVCtVksFsnvOZ\nb4rI7nONEjEVYrKbbYXhkActzGA7urJ0yoZFjDp4cSp/FjQgMEKZVBXUogfEU1Xz\nKkhzmWSNgMZMJJroRwmjUvgBUYv2wdNTRy20IPUr69UKQfj1nMr7cwbxai5lYklH\ntQfmrF9CgohNdUyNe0MT/lV+Bn2bJnjL75KhIYcSQKylOLgPdxB+9jUt1z3dDxjY\nZOJ6Ht5//6nXeO6RLKHFtQfVelnw4F8XdE/XickOxNJZp5bLYBL6BmMD2IjqAArw\nX2+chSAhv1cwqHOJyZjJR64LYSP+TfoReBzCSzkzh3bovBfHK5+2s1SecEd5RxH0\nILXiKnyqCYySsipgkKEkUXEr1yAjEip+pluLLTXx+etm4zG6aiR3nX05pDVMJmYD\n6TbQ9z8J\n=HFIL\n-----END PGP SIGNATURE-----",
        "payload": "tree a2f0629712f7bc115a4317f09bd896f420bcfd05\nparent 7a49fdc58115845ece3a9890bf9498bee6b559de\nauthor MarcoFalke <falke.marco@gmail.com> 1625401356 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625426884 +0200\n\nfuzz: Move ConsumeTxDestination to cpp file\n\nMoving the implementation out of the header will reduce compile time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40c0964b751683774b79da4b72d330a9ff87e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40c0964b751683774b79da4b72d330a9ff87e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40c0964b751683774b79da4b72d330a9ff87e2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a49fdc58115845ece3a9890bf9498bee6b559de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a49fdc58115845ece3a9890bf9498bee6b559de"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 32,
      "deletions": 30
    },
    "files": [
      {
        "sha": "a71b7e32fdbbd205499b68090972c67c99341014",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40c0964b751683774b79da4b72d330a9ff87e2/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40c0964b751683774b79da4b72d330a9ff87e2/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=fa40c0964b751683774b79da4b72d330a9ff87e2",
        "patch": "@@ -304,3 +304,34 @@ uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept\n                }) :\n                fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n }\n+\n+CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    CTxDestination tx_destination;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            tx_destination = CNoDestination{};\n+        },\n+        [&] {\n+            tx_destination = PKHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = ScriptHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = WitnessV0ScriptHash{ConsumeUInt256(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            WitnessUnknown witness_unknown{};\n+            witness_unknown.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+            witness_unknown.length = witness_unknown_program_1.size();\n+            std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n+            tx_destination = witness_unknown;\n+        });\n+    return tx_destination;\n+}"
      },
      {
        "sha": "60dc9050fee5308ae830d6c7c4a17a00cde32367",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 30,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40c0964b751683774b79da4b72d330a9ff87e2/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40c0964b751683774b79da4b72d330a9ff87e2/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=fa40c0964b751683774b79da4b72d330a9ff87e2",
        "patch": "@@ -178,36 +178,7 @@ template <typename WeakEnumType, size_t size>\n     return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n }\n \n-[[nodiscard]] inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    CTxDestination tx_destination;\n-    CallOneOf(\n-        fuzzed_data_provider,\n-        [&] {\n-            tx_destination = CNoDestination{};\n-        },\n-        [&] {\n-            tx_destination = PKHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = ScriptHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = WitnessV0ScriptHash{ConsumeUInt256(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            WitnessUnknown witness_unknown{};\n-            witness_unknown.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-            witness_unknown.length = witness_unknown_program_1.size();\n-            std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n-            tx_destination = witness_unknown;\n-        });\n-    return tx_destination;\n-}\n+[[nodiscard]] CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n template <typename T>\n [[nodiscard]] bool MultiplicationOverflow(const T i, const T j) noexcept"
      }
    ]
  },
  {
    "sha": "fab99865c0e62468a1b55d7e467398cc2343121b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI5OTg2NWMwZTYyNDY4YTFiNTVkN2U0NjczOThjYzIzNDMxMjFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T14:38:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:28:35Z"
      },
      "message": "fuzz: Improve ConsumeTxDestination\n\n* Assert when a type is missing\n* Add missing WitnessV1Taproot\n* Limit WitnessUnknown to version [2, 16], to avoid abiguity\n* Limit WitnessUnknown to size [2, 40], to avoid invalid sizes",
      "tree": {
        "sha": "6e598c5e9b8c18109a50ba927360ede4beba7da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e598c5e9b8c18109a50ba927360ede4beba7da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab99865c0e62468a1b55d7e467398cc2343121b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiWtQv+II4GqUvChW7PLdCG1Un0UeYn+SvKpbx8rLhzb193ISj6IhJ6zIStWffd\nd06Mb9EzyMM2kFXN10v6zpJsHc1FnBBTPk12yphqVZUzLq0LmxfuwE8Vc7xIzPc4\nBfjPIGt/R1pcBA3xbXVbbllYMw7qKxQm24/td6O5k8xjv4LZqZ0xQSAdL5WewOBv\n+U7SjmlqB4nvNtQRDS3THLQahzimgvQhKRNNrogduQ4tUa8Wbb024hY3kC/QKpAK\nxV9tQrkT0F5izOpA4En3/talFMKgfrtYxJyl0SSTbvOzuAoIIa3LOfyw+MsO54rr\nt5rgPo+8Qt9WZ1spH6lizUv8SR+97as7HQ3lTH0+WKXD19V/HlX/8rNMYCF4a3WS\n3071Cs23rmzlaso0X46bWC2Sgt9ml9P/ODWq6Jn6/YbfwnLgvVOVhny8Bl5cIQEK\nDUrcHysvORg+Kwccj8u2uJBgrLAreoK3/o/gK7ntB3oQdQoZAyEA3KDz7m8Ob7ES\nCsCB1amb\n=67iY\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e598c5e9b8c18109a50ba927360ede4beba7da9\nparent fa40c0964b751683774b79da4b72d330a9ff87e2\nauthor MarcoFalke <falke.marco@gmail.com> 1625409531 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625426915 +0200\n\nfuzz: Improve ConsumeTxDestination\n\n* Assert when a type is missing\n* Add missing WitnessV1Taproot\n* Limit WitnessUnknown to version [2, 16], to avoid abiguity\n* Limit WitnessUnknown to size [2, 40], to avoid invalid sizes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab99865c0e62468a1b55d7e467398cc2343121b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab99865c0e62468a1b55d7e467398cc2343121b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab99865c0e62468a1b55d7e467398cc2343121b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa40c0964b751683774b79da4b72d330a9ff87e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40c0964b751683774b79da4b72d330a9ff87e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40c0964b751683774b79da4b72d330a9ff87e2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ece3214ed5fcbc2ebae4ec59c48917ae20f29f10",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab99865c0e62468a1b55d7e467398cc2343121b/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab99865c0e62468a1b55d7e467398cc2343121b/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=fab99865c0e62468a1b55d7e467398cc2343121b",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <pubkey.h>\n #include <test/fuzz/util.h>\n #include <test/util/script.h>\n #include <util/rbf.h>\n@@ -308,7 +309,7 @@ uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept\n CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     CTxDestination tx_destination;\n-    CallOneOf(\n+    const size_t call_size{CallOneOf(\n         fuzzed_data_provider,\n         [&] {\n             tx_destination = CNoDestination{};\n@@ -325,13 +326,20 @@ CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) no\n         [&] {\n             tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n         },\n+        [&] {\n+            tx_destination = WitnessV1Taproot{XOnlyPubKey{ConsumeUInt256(fuzzed_data_provider)}};\n+        },\n         [&] {\n             WitnessUnknown witness_unknown{};\n-            witness_unknown.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+            witness_unknown.version = fuzzed_data_provider.ConsumeIntegralInRange(2, 16);\n+            std::vector<uint8_t> witness_unknown_program_1{fuzzed_data_provider.ConsumeBytes<uint8_t>(40)};\n+            if (witness_unknown_program_1.size() < 2) {\n+                witness_unknown_program_1 = {0, 0};\n+            }\n             witness_unknown.length = witness_unknown_program_1.size();\n             std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n             tx_destination = witness_unknown;\n-        });\n+        })};\n+    Assert(call_size == std::variant_size_v<CTxDestination>);\n     return tx_destination;\n }"
      },
      {
        "sha": "9f09395a9a1d5b1b8a0ea32f81af0ce80d4de326",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab99865c0e62468a1b55d7e467398cc2343121b/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab99865c0e62468a1b55d7e467398cc2343121b/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=fab99865c0e62468a1b55d7e467398cc2343121b",
        "patch": "@@ -37,14 +37,15 @@\n #include <vector>\n \n template <typename... Callables>\n-void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n+size_t CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n {\n     constexpr size_t call_size{sizeof...(callables)};\n     static_assert(call_size >= 1);\n     const size_t call_index{fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, call_size - 1)};\n \n     size_t i{0};\n     ((i++ == call_index ? callables() : void()), ...);\n+    return call_size;\n }\n \n template <typename Collection>"
      }
    ]
  },
  {
    "sha": "fa42800a51919bb50a1000ac4f58847e6a7092a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQyODAwYTUxOTE5YmI1MGExMDAwYWM0ZjU4ODQ3ZTZhNzA5MmEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:18:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:29:56Z"
      },
      "message": "fuzz: Simplify CTxDestination fuzzing in the script target\n\nThe WitnessUnknown operators == and < are already called indirectly by\nthe corresponding CTxDestination operators.",
      "tree": {
        "sha": "308bc11019eb09256d466409ac4ffa0da048d276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/308bc11019eb09256d466409ac4ffa0da048d276"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa42800a51919bb50a1000ac4f58847e6a7092a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiZtQv/Z3LFp4dVIsyjbSl/OSFUmY8V/csosItp1YehSB7kWZS9TJXeOOGKDck3\nLhZ7p64APQHFdq9PA4ksNpp2R7+JRMkARfCgQguZak0VJ56naGZx8r8ld7wqGn6M\nRzZSIXfEYvNMO9/F1PEA4lmw1VReISYpyjucpKGkWjJCA3v0pen0oBCjqZN6RtpI\nvzqDju4p0dlSUQ1xjg37BKlPmbLq+woLwxgP3RNmPdNgYhhPrS961nZmHQOSNf7r\nJYgkks5CZ5SiuuQPIEx3dRWxQwnCs0J5cK97o9xgv1CZc4utu3t3vwP/nwBfKMMk\nNH5ewDnOHIk6y/lsfPLLdQiPSOn6aw5CQj2f4EsLpgN+fDOKwQdAYDjWQYAMcPDb\nU+Uc+8zdnKHM7OAxkcyvEW6EGKGClpcqX2FL5Az3ZBvDiCEzkxylIQGB30Qk3CGS\nkXvejwygtHjz7ahaE8bNXLJsEYeSRM+5eD1oDPftYjy2OVappbTOLcpKcCqYPxcr\nuzOEZJHO\n=SzuO\n-----END PGP SIGNATURE-----",
        "payload": "tree 308bc11019eb09256d466409ac4ffa0da048d276\nparent fab99865c0e62468a1b55d7e467398cc2343121b\nauthor MarcoFalke <falke.marco@gmail.com> 1625426339 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625426996 +0200\n\nfuzz: Simplify CTxDestination fuzzing in the script target\n\nThe WitnessUnknown operators == and < are already called indirectly by\nthe corresponding CTxDestination operators.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa42800a51919bb50a1000ac4f58847e6a7092a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa42800a51919bb50a1000ac4f58847e6a7092a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa42800a51919bb50a1000ac4f58847e6a7092a3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab99865c0e62468a1b55d7e467398cc2343121b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab99865c0e62468a1b55d7e467398cc2343121b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab99865c0e62468a1b55d7e467398cc2343121b"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 5,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1d5f37d10933b305885096bf012784feb1dfe4c0",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa42800a51919bb50a1000ac4f58847e6a7092a3/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa42800a51919bb50a1000ac4f58847e6a7092a3/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=fa42800a51919bb50a1000ac4f58847e6a7092a3",
        "patch": "@@ -184,25 +184,12 @@ FUZZ_TARGET_INIT(script, initialize_script)\n     }\n \n     {\n-        WitnessUnknown witness_unknown_1{};\n-        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-        witness_unknown_1.length = witness_unknown_program_1.size();\n-        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n-\n-        WitnessUnknown witness_unknown_2{};\n-        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-        witness_unknown_2.length = witness_unknown_program_2.size();\n-        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n-\n-        (void)(witness_unknown_1 == witness_unknown_2);\n-        (void)(witness_unknown_1 < witness_unknown_2);\n-    }\n-\n-    {\n-        const CTxDestination tx_destination_1 = ConsumeTxDestination(fuzzed_data_provider);\n+        const CTxDestination tx_destination_1{\n+            fuzzed_data_provider.ConsumeBool() ?\n+                DecodeDestination(fuzzed_data_provider.ConsumeRandomLengthString()) :\n+                ConsumeTxDestination(fuzzed_data_provider)};\n         const CTxDestination tx_destination_2 = ConsumeTxDestination(fuzzed_data_provider);\n+\n         (void)(tx_destination_1 == tx_destination_2);\n         (void)(tx_destination_1 < tx_destination_2);\n     }"
      }
    ]
  },
  {
    "sha": "fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJmMTcwNTZjMTA0NmM2YWM3ZmE1ZDE0MDEyNTA1MGI3YTJiMGUw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:24:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-04T19:30:50Z"
      },
      "message": "fuzz: Move CTxDestination fuzzing to script fuzz target\n\nNo need to split it over several targets",
      "tree": {
        "sha": "57db01668b30fa7b97a43f64be95926d6e6340c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57db01668b30fa7b97a43f64be95926d6e6340c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJbgv+JVqvdzsokNtWO4JScdmf0xspNj2ebRVIDybPm4CzPHcM4n2VwXB7neo/\nd+rmEaufS69S5xiPpu/mHzrwhQMuk56LXApr0/sfTDCWU5gQ2DkmbmnWg5us1mF+\n8l09NLt8Sdcv+u6jmNReMiv6LNly73BaCzZqyio4dPalpqx+TVq+YCezzKnrxEOP\na4X7iPBRSlQ180Ck60I+7OPsTmPQbGSqpR1qNoI7axyHeq5zdPJfDGzPsdfAK9Pf\nBHl4NEenBsXOjwfY+F0zcvVbpq07+vH8kua2/CsvWsZ2jZaUg0zD6sLoYG9bwuPr\n0vYNqgo0rGhEtvYBv014Gr2/1NJMjvEkmGt2KDABav9lSv4PR8m4iySoIsJFLuTB\nudp4Tuaoko771zP+rd+xR578czem0A7wY79h+NrK1122a/dyL5Iz0zzNcQbeWmwG\n+yL3MRslLjmS5yHqcUsVug2rNcvvCcrgtSBVjg/VszUObuAcu8zR2YEkZ+I0GyBv\ntF7V9Mlk\n=jH6N\n-----END PGP SIGNATURE-----",
        "payload": "tree 57db01668b30fa7b97a43f64be95926d6e6340c0\nparent fa42800a51919bb50a1000ac4f58847e6a7092a3\nauthor MarcoFalke <falke.marco@gmail.com> 1625426667 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625427050 +0200\n\nfuzz: Move CTxDestination fuzzing to script fuzz target\n\nNo need to split it over several targets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa42800a51919bb50a1000ac4f58847e6a7092a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa42800a51919bb50a1000ac4f58847e6a7092a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa42800a51919bb50a1000ac4f58847e6a7092a3"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 17,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e28e2feb0a20c8d9c2d60fd810eefd15f45f3360",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
        "patch": "@@ -16,8 +16,6 @@\n #include <pow.h>\n #include <protocol.h>\n #include <pubkey.h>\n-#include <rpc/util.h>\n-#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n@@ -158,20 +156,6 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n \n     const CKeyID key_id{u160};\n     const CScriptID script_id{u160};\n-    // CTxDestination = CNoDestination \u222a PKHash \u222a ScriptHash \u222a WitnessV0ScriptHash \u222a WitnessV0KeyHash \u222a WitnessUnknown\n-    const PKHash pk_hash{u160};\n-    const ScriptHash script_hash{u160};\n-    const WitnessV0KeyHash witness_v0_key_hash{u160};\n-    const WitnessV0ScriptHash witness_v0_script_hash{u256};\n-    const std::vector<CTxDestination> destinations{pk_hash, script_hash, witness_v0_key_hash, witness_v0_script_hash};\n-    const SigningProvider store;\n-    for (const CTxDestination& destination : destinations) {\n-        (void)DescribeAddress(destination);\n-        (void)EncodeDestination(destination);\n-        (void)GetKeyForDestination(store, destination);\n-        (void)GetScriptForDestination(destination);\n-        (void)IsValidDestination(destination);\n-    }\n \n     {\n         CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);"
      },
      {
        "sha": "f58bf8b316db233e205b844ab33a390a95536a69",
        "filename": "src/test/fuzz/key_io.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key_io.cpp?ref=fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
        "patch": "@@ -4,9 +4,6 @@\n \n #include <chainparams.h>\n #include <key_io.h>\n-#include <rpc/util.h>\n-#include <script/signingprovider.h>\n-#include <script/standard.h>\n #include <test/fuzz/fuzz.h>\n \n #include <cassert>\n@@ -39,12 +36,4 @@ FUZZ_TARGET_INIT(key_io, initialize_key_io)\n     if (ext_pub_key.pubkey.size() == CPubKey::COMPRESSED_SIZE) {\n         assert(ext_pub_key == DecodeExtPubKey(EncodeExtPubKey(ext_pub_key)));\n     }\n-\n-    const CTxDestination tx_destination = DecodeDestination(random_string);\n-    (void)DescribeAddress(tx_destination);\n-    (void)GetKeyForDestination(/* store */ {}, tx_destination);\n-    (void)GetScriptForDestination(tx_destination);\n-    (void)IsValidDestination(tx_destination);\n-\n-    (void)IsValidDestinationString(random_string);\n }"
      },
      {
        "sha": "950ee45d1d10f63cf2b8855447f7ab50a628279a",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabf17056c1046c6ac7fa5d140125050b7a2b0e0/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
        "patch": "@@ -6,8 +6,10 @@\n #include <compressor.h>\n #include <core_io.h>\n #include <core_memusage.h>\n+#include <key_io.h>\n #include <policy/policy.h>\n #include <pubkey.h>\n+#include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/interpreter.h>\n #include <script/script.h>\n@@ -188,9 +190,22 @@ FUZZ_TARGET_INIT(script, initialize_script)\n             fuzzed_data_provider.ConsumeBool() ?\n                 DecodeDestination(fuzzed_data_provider.ConsumeRandomLengthString()) :\n                 ConsumeTxDestination(fuzzed_data_provider)};\n-        const CTxDestination tx_destination_2 = ConsumeTxDestination(fuzzed_data_provider);\n+        const CTxDestination tx_destination_2{ConsumeTxDestination(fuzzed_data_provider)};\n+        const std::string encoded_dest{EncodeDestination(tx_destination_1)};\n+        const UniValue json_dest{DescribeAddress(tx_destination_1)};\n+        Assert(tx_destination_1 == DecodeDestination(encoded_dest));\n+        (void)GetKeyForDestination(/* store */ {}, tx_destination_1);\n+        const CScript dest{GetScriptForDestination(tx_destination_1)};\n+        const bool valid{IsValidDestination(tx_destination_1)};\n+        Assert(dest.empty() != valid);\n+\n+        Assert(valid == IsValidDestinationString(encoded_dest));\n \n-        (void)(tx_destination_1 == tx_destination_2);\n         (void)(tx_destination_1 < tx_destination_2);\n+        if (tx_destination_1 == tx_destination_2) {\n+            Assert(encoded_dest == EncodeDestination(tx_destination_2));\n+            Assert(json_dest.write() == DescribeAddress(tx_destination_2).write());\n+            Assert(dest == GetScriptForDestination(tx_destination_2));\n+        }\n     }\n }"
      }
    ]
  },
  {
    "sha": "c609e10545492aba480ff17aff7eefc13a0b5cd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjA5ZTEwNTQ1NDkyYWJhNDgwZmYxN2FmZjdlZWZjMTNhMGI1Y2Q4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T00:47:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T00:47:36Z"
      },
      "message": "Merge bitcoin/bitcoin#22292: bench, doc: benchmarking updates and fixups\n\nd8513fe41102dcbfc05235f3b95e33eb1878f880 doc: update doc/benchmarking.md (Jon Atack)\n84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451 bench: bench_bitcoin.cpp help fixups (Jon Atack)\n10f4ce20783cbbcb0c0997c605452d9e60827e6d bench: bench.h fixes and improvements (Jon Atack)\n\nPull request description:\n\n  Fixups and updates I noticed while writing benchmarks for #22284.\n\nACKs for top commit:\n  za-kk:\n    ACK d8513fe41102dcbfc05235f3b95e33eb1878f880\n  theStack:\n    ACK d8513fe41102dcbfc05235f3b95e33eb1878f880 \ud83d\udea4\n\nTree-SHA512: d494956b5d6a3329e98e8b6f4405a10613b8fce51a04bbf4493d8b3497b8d5b177c1a9a3eeb828796eb4edb92b0ace769595151e223671c0dc8f09bcf631ebb5",
      "tree": {
        "sha": "21640a6539178aa1234483e9f75b458b042af881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21640a6539178aa1234483e9f75b458b042af881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c609e10545492aba480ff17aff7eefc13a0b5cd8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDiVqgACgkQLuufXMCV\nJsHpIg//Xr2pyumcBhWCVafNVj4owtvp+wtxS37rBdCNF+NYBvywgtbv21NuvhpC\nBngb1cGtCRzNYgWap0XCc/Gg2stLQj7kI4F1NT/ukNCaElvdVN/vFQ0/Ym/9B8H5\nC3qjBN/Ym7xknPxeFXTRbcQi8cWicYRJ3WuZmEA7JGxS8j9/HaIjSI0+bLOEODpj\nX25w7mNfIEJt9Cto0UUupLO4Uz0POWVTMcps36HWO0GQGKHKHZhaBaDAhMKVTtPL\ndB43RTeNXSaUaaOaDfqhmoUoxM8pYBp8vHY/yvfBvSvPTwHC6HySZzzZMNiZf3RW\n6k5ud0hCePVqAIfEuGJRLiiLtwnocPyEAfOgqPS9FMoaFAOQgOakTkE1dg0yI/SC\nA8n03i9CTf5wz2J4ewPLTsAq5SdQ+0fNHcs8FDN52qHCvlRy1C41UybflvEPcvBM\nCYklim0rUzpd4BMl47tMgLMkzwGO9adxkv12x3uA3X8sIsjdS+wRttuZE1+bM0wh\nd1Jkr57lLnBeXPxhykTDEdjzebSwioVsc8ga3gr5g364qGozbHAV/jOLb0QM0dyZ\nyZUHfhSXiHsBIBzpEXg6HGmaNLkyI3fa9Jf7AGzZl+R34puT8zeJ3l/pfNbLS/dP\nerWz0AyH3Ne34KwJ6HeCHdw7nWFIIKBtEGtMrT/4d8sb0Ft5sxY=\n=5Ew6\n-----END PGP SIGNATURE-----",
        "payload": "tree 21640a6539178aa1234483e9f75b458b042af881\nparent 7a49fdc58115845ece3a9890bf9498bee6b559de\nparent d8513fe41102dcbfc05235f3b95e33eb1878f880\nauthor fanquake <fanquake@gmail.com> 1625446030 +0800\ncommitter fanquake <fanquake@gmail.com> 1625446056 +0800\n\nMerge bitcoin/bitcoin#22292: bench, doc: benchmarking updates and fixups\n\nd8513fe41102dcbfc05235f3b95e33eb1878f880 doc: update doc/benchmarking.md (Jon Atack)\n84e2d5b78181d08b258c77f9c9c4e1bb7fdaa451 bench: bench_bitcoin.cpp help fixups (Jon Atack)\n10f4ce20783cbbcb0c0997c605452d9e60827e6d bench: bench.h fixes and improvements (Jon Atack)\n\nPull request description:\n\n  Fixups and updates I noticed while writing benchmarks for #22284.\n\nACKs for top commit:\n  za-kk:\n    ACK d8513fe41102dcbfc05235f3b95e33eb1878f880\n  theStack:\n    ACK d8513fe41102dcbfc05235f3b95e33eb1878f880 \ud83d\udea4\n\nTree-SHA512: d494956b5d6a3329e98e8b6f4405a10613b8fce51a04bbf4493d8b3497b8d5b177c1a9a3eeb828796eb4edb92b0ace769595151e223671c0dc8f09bcf631ebb5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c609e10545492aba480ff17aff7eefc13a0b5cd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c609e10545492aba480ff17aff7eefc13a0b5cd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c609e10545492aba480ff17aff7eefc13a0b5cd8/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a49fdc58115845ece3a9890bf9498bee6b559de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a49fdc58115845ece3a9890bf9498bee6b559de"
      },
      {
        "sha": "d8513fe41102dcbfc05235f3b95e33eb1878f880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8513fe41102dcbfc05235f3b95e33eb1878f880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8513fe41102dcbfc05235f3b95e33eb1878f880"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 34,
      "deletions": 19
    },
    "files": [
      {
        "sha": "84d5f2c444ba3e5f37b81c8cdb35223c48f538e1",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c609e10545492aba480ff17aff7eefc13a0b5cd8/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c609e10545492aba480ff17aff7eefc13a0b5cd8/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "patch": "@@ -8,8 +8,10 @@ thread queue, wallet balance.\n Running\n ---------------------\n \n-For benchmarks purposes you only need to compile `bitcoin_bench`. Beware of configuring without `--enable-debug` as this would impact\n-benchmarking by unlatching log printers and lock analysis.\n+For benchmarking, you only need to compile `bitcoin_bench`.  The bench runner\n+warns if you configure with `--enable-debug`, but consider if building without\n+it will impact the benchmark(s) you are interested in by unlatching log printers\n+and lock analysis.\n \n     make -C src bitcoin_bench\n \n@@ -19,19 +21,28 @@ After compiling bitcoin-core, the benchmarks can be run with:\n \n The output will look similar to:\n ```\n-|             ns/byte |              byte/s | error % | benchmark\n-|--------------------:|--------------------:|--------:|:----------------------------------------------\n-|               64.13 |       15,592,356.01 |    0.1% | `Base58CheckEncode`\n-|               24.56 |       40,722,672.68 |    0.2% | `Base58Decode`\n+|               ns/op |                op/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|       57,927,463.00 |               17.26 |    3.6% |      0.66 | `AddrManAdd`\n+|          677,816.00 |            1,475.33 |    4.9% |      0.01 | `AddrManGetAddr`\n+\n+...\n+\n+|             ns/byte |              byte/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|              127.32 |        7,854,302.69 |    0.3% |      0.00 | `Base58CheckEncode`\n+|               31.95 |       31,303,226.99 |    0.2% |      0.00 | `Base58Decode`\n+\n ...\n ```\n \n Help\n ---------------------\n \n-    src/bench/bench_bitcoin --help\n+    src/bench/bench_bitcoin -?\n \n-To print options like scaling factor or per-benchmark filter.\n+To print the various options, like listing the benchmarks without running them\n+or using a regex filter to only run certain benchmarks.\n \n Notes\n ---------------------"
      },
      {
        "sha": "c4fcd80e33b0987221eb9a5d2797529ba48d81fa",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c609e10545492aba480ff17aff7eefc13a0b5cd8/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c609e10545492aba480ff17aff7eefc13a0b5cd8/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "patch": "@@ -18,16 +18,19 @@\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::Bench& bench)\n+static void NameOfYourBenchmarkFunction(benchmark::Bench& bench)\n {\n-    ... do any setup needed...\n-    nanobench::Config().run([&] {\n-       ... do stuff you want to time...\n+    ...do any setup needed...\n+\n+    bench.run([&] {\n+         ...do stuff you want to time; refer to src/bench/nanobench.h\n+            for more information and the options that can be passed here...\n     });\n-    ... do any cleanup needed...\n+\n+    ...do any cleanup needed...\n }\n \n-BENCHMARK(CODE_TO_TIME);\n+BENCHMARK(NameOfYourBenchmarkFunction);\n \n  */\n \n@@ -55,7 +58,8 @@ class BenchRunner\n \n     static void RunAll(const Args& args);\n };\n-}\n+} // namespace benchmark\n+\n // BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);\n #define BENCHMARK(n) \\\n     benchmark::BenchRunner PASTE2(bench_, PASTE2(__LINE__, n))(STRINGIZE(n), n);"
      },
      {
        "sha": "aab777cac15259675ea06f6de1958eef933113c2",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c609e10545492aba480ff17aff7eefc13a0b5cd8/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c609e10545492aba480ff17aff7eefc13a0b5cd8/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "patch": "@@ -16,11 +16,11 @@ static void SetupBenchArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", strprintf(\"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\"), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n // parses a comma separated list like \"10,20,30,50\""
      }
    ]
  },
  {
    "sha": "014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTQxMTBjNDdkOTRlY2U2ZTNlNjU1Y2RiZjAyZWQ4YzkxYzdhNWNm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-03-13T19:23:17Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T05:59:38Z"
      },
      "message": "Use C++17 [[fallthrough]] attribute, and drop -Wno-implicit-fallthrough",
      "tree": {
        "sha": "e8081ec6eb17c133d84b3457561021f5252e0807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8081ec6eb17c133d84b3457561021f5252e0807"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDin8oACgkQQQEIES5+\nqB+nhw//RzsbgIAahtRQfXyjINDVvQ+cSV5de4zQ8obXdTt0ekyZ0jQ5JjyzG3+/\nc6dmhFTN/6BLkSHe13WumABOWFdGdiieQS2bhzBom2shT1dG3PTqy6Wt3Ko/+pyk\nbTDCUVmMyVoFWeVmQYGAvyTW1TtMVkOgznqdIvtzBq9SR1o0keuGPa7GyLLCqPkm\n16JCH1s0av8L2cD3dr5YLeDBBnRCYd/DPb2htt6IlcyjdqnoV/X7RsXyWb5t6ykx\n+eQ/i4PvuXCIU4zo8d7hXB1YuPn3aTcZz0LYEpqj9jNZV149hDYHOG6nKcQlwShu\nemOYnEIzyMzYiZ8oZWEPmLkOkG+++574oNioxUDjhzgS0uZI8Npyk0f/45GAesFO\npx6SRT24jGpUkn9ddM1a6gwUgiaaHyMymgEXwV3aKqGRiakabXm/pNFoW92ONI2t\nG0TieEjY4AJNnPq1OkGLCJsGKgLuPhODgyOkcjGJuS9h47iORC8EpIeQfVrR2m7p\nxeWDVDyazi8e6V+amg17oadodHV0vfV8rT7+R5CHWrjer75YTZyPtaSezI0anLmd\nMJlIc+oZH1HgEjpmxvF3Q63U94L8qcsBzBbP4GAvpXvHOk5csTa+RmS6bZzXmzCb\nErszKt9nrkV197UBU6/ukApXCz/k4koH6C6Mtq+IZNgBezBcc+s=\n=6aMW\n-----END PGP SIGNATURE-----",
        "payload": "tree e8081ec6eb17c133d84b3457561021f5252e0807\nparent 7a49fdc58115845ece3a9890bf9498bee6b559de\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1615663397 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625464778 +0300\n\nUse C++17 [[fallthrough]] attribute, and drop -Wno-implicit-fallthrough\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a49fdc58115845ece3a9890bf9498bee6b559de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a49fdc58115845ece3a9890bf9498bee6b559de"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a1ddeb127107ef4adea0295a70fbe57d8c11c57b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -463,6 +463,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n@@ -474,7 +475,6 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n   if test x$suppress_external_warnings != xyes ; then\n     AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n   fi"
      },
      {
        "sha": "ce1f93f11f3b50d1e30f439b56767e7199205ff8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -22,6 +22,7 @@ LEVELDB_CPPFLAGS_INT += -DHAVE_SNAPPY=0 -DHAVE_CRC32C=1\n LEVELDB_CPPFLAGS_INT += -DHAVE_FDATASYNC=@HAVE_FDATASYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_FULLFSYNC=@HAVE_FULLFSYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_O_CLOEXEC=@HAVE_O_CLOEXEC@\n+LEVELDB_CPPFLAGS_INT += -DFALLTHROUGH_INTENDED=[[fallthrough]]\n \n if WORDS_BIGENDIAN\n LEVELDB_CPPFLAGS_INT += -DLEVELDB_IS_BIG_ENDIAN=1"
      },
      {
        "sha": "3465caa3a937cad71670a06ae810c8a9af54bdb1",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -47,8 +47,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vData\n     switch (vDataToHash.size() & 3) {\n         case 3:\n             k1 ^= tail[2] << 16;\n+            [[fallthrough]];\n         case 2:\n             k1 ^= tail[1] << 8;\n+            [[fallthrough]];\n         case 1:\n             k1 ^= tail[0];\n             k1 *= c1;"
      },
      {
        "sha": "9bb675a5fceed1e4f8a6740db928f089611303f1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -287,6 +287,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 }\n                 if (breakParsing)\n                     break;\n+                [[fallthrough]];\n             }\n             case STATE_ARGUMENT: // In or after argument\n             case STATE_EATING_SPACES_IN_ARG:\n@@ -400,6 +401,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 strResult = lastResult.get_str();\n             else\n                 strResult = lastResult.write(2);\n+            [[fallthrough]];\n         case STATE_ARGUMENT:\n         case STATE_EATING_SPACES:\n             return true;"
      },
      {
        "sha": "e50ab33e5440a9fe40b39b1b927f9fc1dec90842",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -524,6 +524,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n         // convert hex to bin, continue then with bin part\n         std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n         strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n+        [[fallthrough]];\n     }\n \n     case RetFormat::BINARY: {"
      },
      {
        "sha": "692096367c8ed2b422a81cdd81652989eb73dd3e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -850,7 +850,7 @@ static RPCHelpMan getblocktemplate()\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n                 pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n-                // FALL THROUGH to get vbavailable set...\n+                [[fallthrough]];\n             case ThresholdState::STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];"
      },
      {
        "sha": "bedaa14007f1074e81c96d898ada5bdd87a1b71d",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "patch": "@@ -797,27 +797,27 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode\n             break;\n         case 'X':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'x': case 'p':\n             out.setf(std::ios::hex, std::ios::basefield);\n             intConversion = true;\n             break;\n         case 'E':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'e':\n             out.setf(std::ios::scientific, std::ios::floatfield);\n             out.setf(std::ios::dec, std::ios::basefield);\n             break;\n         case 'F':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n         case 'A':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'a':\n #           ifdef _MSC_VER\n             // Workaround https://developercommunity.visualstudio.com/content/problem/520472/hexfloat-stream-output-does-not-ignore-precision-a.html\n@@ -829,7 +829,7 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode\n             break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'g':\n             out.setf(std::ios::dec, std::ios::basefield);\n             // As in boost::format, let stream decide float format."
      }
    ]
  },
  {
    "sha": "3c4c8e79baf02af97ba1502189f649b04ef2198d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzRjOGU3OWJhZjAyYWY5N2JhMTUwMjE4OWY2NDliMDRlZjIxOThk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-03-13T19:30:41Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T05:59:54Z"
      },
      "message": "build: Add -Werror=implicit-fallthrough compile flag",
      "tree": {
        "sha": "31306249f0fcf9736cf5e0b27b1c6d25d3953e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31306249f0fcf9736cf5e0b27b1c6d25d3953e0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c4c8e79baf02af97ba1502189f649b04ef2198d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDin9oACgkQQQEIES5+\nqB8hJg//RAUbgiSFsay2CLjXv0CO4RnE+XYj3XMR8vqKrT0u15RpiEHA280xCbz0\nDa5gZ+t5O30VmsyF+xwlFZAZ2XeLc9JUvHjzFcRyb6lgCl63QVHIecfsBIgaNuKH\n1QdnH5wuEreC+dST90x2NEZPZVLfTk4ijlXBnAK0etKLbXl8H9S7e7CDUYCLl4Qn\nXC3zEOXcaIomDBsAcw0KCotZAisespzQIjXYitSnE95lM2kTrx1aYXKRStcBfusi\nvTzdRQ+TTL2UQnmpjnXI38zH/tb7MCyiDJofK1yeSUEQTcvwuNuTZiq2NHk2oAPE\neHRBKmn4fjiyYmqzaIWQhoqJ8VmHrGViwXR0i2w1yKa0rAsZWmIADTWv+1YvEgC+\nN49GqveVv50nFxT9TeklSlacUIl5al71nE6GXenrRbUkr7gaDlpU103xzzAZ0n1r\ncFiAJeb5wp3CoAb4bIiMZUS7ubJnpGIJfrbeotYiAa6P+XgH2oiGM4KjxAHxXEBr\nn4ZEjwV7U3gKF845yWIqxPGr+JefETp88IPOdt5vmMEjEBcpbPfmILlOKEPu0BMh\nSTlmLBrudYqu3+H0vvC4TEu8BoduxxXvKFUoNE2RPI47KvmqAvLxVWFy9b+1CO8+\nl/QScMVATvUpyOtRzC8ZayRQprTCO68uDajh2/36zzHVbgxhIfs=\n=b3St\n-----END PGP SIGNATURE-----",
        "payload": "tree 31306249f0fcf9736cf5e0b27b1c6d25d3953e0b\nparent 014110c47d94ece6e3e655cdbf02ed8c91c7a5cf\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1615663841 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625464794 +0300\n\nbuild: Add -Werror=implicit-fallthrough compile flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c8e79baf02af97ba1502189f649b04ef2198d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c8e79baf02af97ba1502189f649b04ef2198d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c8e79baf02af97ba1502189f649b04ef2198d/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/014110c47d94ece6e3e655cdbf02ed8c91c7a5cf"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd187a4e572e6c322b3535195776e5c36d1f8de5",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c4c8e79baf02af97ba1502189f649b04ef2198d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c4c8e79baf02af97ba1502189f649b04ef2198d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3c4c8e79baf02af97ba1502189f649b04ef2198d",
        "patch": "@@ -433,6 +433,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Werror=implicit-fallthrough], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=implicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])"
      }
    ]
  },
  {
    "sha": "cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGI0MWQ1NTczYjFlMmVkMWJjMWQ4ZDFkYzlmNzdlODI2NzJlZTFm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T10:42:14Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-07-05T10:42:14Z"
      },
      "message": "doc: Install Rosetta on M1-macOS for qt in depends",
      "tree": {
        "sha": "804272d553dedd02cdd6ac367a17b8356b8c19ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/804272d553dedd02cdd6ac367a17b8356b8c19ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4uIGCRBK7hj4Ov3rIwAANEUIADcp1Hsyr/XeVrtztPSDS725\nE+hy8BStggkY4t3uGlCtaixeZqPL6BckdEECtdICFe7583EJs8iyveK/J8sYz6T+\nh3fgyG9lPzIG0DqeafcSXST6Vz9OYoh7hNcHWEyYvWZ4jJ8mZeRRU95K98U1CnzY\nhfqaqGPkGbJIgLOdSMpky40W/NUVWbCyPgqT0hYiG1WRTzUdFhBkiqtyf5CZPvgn\n5Y/3biafZQRo0XLaADLhNjiQw9Am8iYIlZ3/e1Y+EWy0s5PK7nFLOk2BfTKpHBBn\n3r1d2M2fwfs90oOo+FZae2+odEM2+KxJH8d89YblJBC2frhWLbePANBUcZaq36M=\n=tJs3\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 804272d553dedd02cdd6ac367a17b8356b8c19ea\nparent c609e10545492aba480ff17aff7eefc13a0b5cd8\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625481734 +0300\ncommitter GitHub <noreply@github.com> 1625481734 +0300\n\ndoc: Install Rosetta on M1-macOS for qt in depends"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c609e10545492aba480ff17aff7eefc13a0b5cd8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4f3b6df4871a340f6c3816a759bb2f285770c76b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
        "patch": "@@ -87,6 +87,14 @@ For linux S390X cross compilation:\n \n     sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n \n+### Install the required dependencies: M1-based macOS\n+\n+To be able to build the `qt` package, ensure that Rosetta 2 is installed:\n+\n+```\n+softwareupdate --install-rosetta\n+```\n+\n ### Dependency Options\n \n The following can be set when running make: `make FOO=bar`"
      }
    ]
  },
  {
    "sha": "271155984574a5bba9619d8f6da9bb0606d93f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzExNTU5ODQ1NzRhNWJiYTk2MTlkOGY2ZGE5YmIwNjA2ZDkzZjhj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T14:40:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T14:40:29Z"
      },
      "message": "Merge bitcoin/bitcoin#22365: guix: Avoid relying on newer symbols by rebasing our cross toolchains on older glibcs\n\n647f7e5f1da1089d451f3c431efc635b8e87b064 guix: Also sort SHA256SUMS.part (Carl Dong)\ndc4137a60c99979b89f75d2bddba96d043f387b8 guix: Build depends/qt with our platform definition (Carl Dong)\n16b0a936e15b81710755303e11ef51f608b61475 guix: Rebase toolchain on glibc 2.24 (2.27 for riscv64) (Carl Dong)\n\nPull request description:\n\n  After this PR, we'll have the following:\n  - riscv64 -> build with a toolchain targeting glibc 2.27\n  - everything else -> builds with a toolchain targeting glibc 2.24, but will not have symbols > 2.17 (checked by `symbol-check.py`)\n\nACKs for top commit:\n  achow101:\n    reACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  hebasto:\n    ACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  MarcoFalke:\n    review ACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  fanquake:\n    ACK 647f7e5f1da1089d451f3c431efc635b8e87b064 - documentation can be fixed shortly.\n\nTree-SHA512: ddff57a5d7c053687b0a273720d4ad7d28c6fc8816226d4304869284d017af5e3630d4b57565d91e74f2e1b7583c9c83ee8b2e5e70e41d619ab618e602c97a94",
      "tree": {
        "sha": "bab83010726866f319fc36917c0794fb0c151f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bab83010726866f319fc36917c0794fb0c151f50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/271155984574a5bba9619d8f6da9bb0606d93f8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDjGd0ACgkQLuufXMCV\nJsG5YBAAhZ82WAv4YTz+lEjmXCrKQwQrbD+9c/wU4hBuYOZ9/0dHDK2sIryp3owR\nahZevlXKJaehriHQXtaZOL/yGNLxmqv1wwfK5fP+gxJOOzx+sKlw8Fvf1HO7mDmr\nb1cHJJavu+0n2Zy8BjSGVPFCOOm6VzmzmxqLMwYCyp2fTn3ArEI2osqLIJt702JS\n4sRM8iELeW2WGmW2h3hu22YCM/+BN6ahxUTucOAtANvJakc/BTF9z0nfPp0+PjH2\nkCf9xMcyy0I2jJhjGkuUsvGqTscAyKfGYfq042BKCRFmWeLEz4mQI2vuLW3oSOvb\n7/J+uFgcu5vUA2RP4yTWAtmkdsa0B6klwrEWZTbDcUNoQp4ApLV+rJW/rLmNZpRN\nPZjuUkYgLoR6OaDIHEc/mnb/FByfF2en1v4sUBMINJN2olIDOnrknpvVBshPSZKR\n9UHES7V+l0k7KhBSgkoCej1aX9u8fBXm8AtJmy4Q6Hu4xIWVX9fd+eFLVjbbeEoe\n+dOhEQ5jx+gzYR+OfvnpJAqr9lvvuo19anLgXaOvCc/8JlmJXegjg5mA7nxRJtMj\nKIoFSuNUyHJb5eQPHcggpoOz5P8SA1oZ9S3RGbRIr5yYB4BWbMapiOcNP2S0rqwo\nSo9Vcmn+5UUfi/7XmkDgpSBjIc0Zu8IbPhI+gzLlvJtlmcjrF/c=\n=eat+\n-----END PGP SIGNATURE-----",
        "payload": "tree bab83010726866f319fc36917c0794fb0c151f50\nparent c609e10545492aba480ff17aff7eefc13a0b5cd8\nparent 647f7e5f1da1089d451f3c431efc635b8e87b064\nauthor fanquake <fanquake@gmail.com> 1625496008 +0800\ncommitter fanquake <fanquake@gmail.com> 1625496029 +0800\n\nMerge bitcoin/bitcoin#22365: guix: Avoid relying on newer symbols by rebasing our cross toolchains on older glibcs\n\n647f7e5f1da1089d451f3c431efc635b8e87b064 guix: Also sort SHA256SUMS.part (Carl Dong)\ndc4137a60c99979b89f75d2bddba96d043f387b8 guix: Build depends/qt with our platform definition (Carl Dong)\n16b0a936e15b81710755303e11ef51f608b61475 guix: Rebase toolchain on glibc 2.24 (2.27 for riscv64) (Carl Dong)\n\nPull request description:\n\n  After this PR, we'll have the following:\n  - riscv64 -> build with a toolchain targeting glibc 2.27\n  - everything else -> builds with a toolchain targeting glibc 2.24, but will not have symbols > 2.17 (checked by `symbol-check.py`)\n\nACKs for top commit:\n  achow101:\n    reACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  hebasto:\n    ACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  MarcoFalke:\n    review ACK 647f7e5f1da1089d451f3c431efc635b8e87b064\n  fanquake:\n    ACK 647f7e5f1da1089d451f3c431efc635b8e87b064 - documentation can be fixed shortly.\n\nTree-SHA512: ddff57a5d7c053687b0a273720d4ad7d28c6fc8816226d4304869284d017af5e3630d4b57565d91e74f2e1b7583c9c83ee8b2e5e70e41d619ab618e602c97a94\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271155984574a5bba9619d8f6da9bb0606d93f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/271155984574a5bba9619d8f6da9bb0606d93f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271155984574a5bba9619d8f6da9bb0606d93f8c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c609e10545492aba480ff17aff7eefc13a0b5cd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c609e10545492aba480ff17aff7eefc13a0b5cd8"
      },
      {
        "sha": "647f7e5f1da1089d451f3c431efc635b8e87b064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647f7e5f1da1089d451f3c431efc635b8e87b064",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/647f7e5f1da1089d451f3c431efc635b8e87b064"
      }
    ],
    "stats": {
      "total": 524,
      "additions": 522,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e457840d1572f69cb8e7c924b87f09d60620b41c",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -214,6 +214,7 @@ make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n                                    qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n                                    FORCE_USE_SYSTEM_CLANG=1\n \n \n@@ -445,5 +446,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n       | xargs sha256sum \\\n+      | sort -k2 \\\n       | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -108,5 +108,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n         | xargs sha256sum \\\n+        | sort -k2 \\\n         | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      },
      {
        "sha": "f4df4855fc460b2ae53b4f5c9e1de66d17840888",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -135,11 +135,25 @@ chain for \" target \" development.\"))\n   (package-with-extra-patches gcc-8\n     (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n \n+;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n+;; this function to disable for older glibcs\n+;;\n+;; From glibc 2.25 changelog:\n+;;\n+;;   * Most of glibc can now be built with the stack smashing protector enabled.\n+;;     It is recommended to build glibc with --enable-stack-protector=strong.\n+;;     Implemented by Nick Alcock (Oracle).\n+(define (make-glibc-without-ssp xglibc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    xglibc \"libc_cv_ssp\" \"no\")\n+   \"libc_cv_ssp_strong\" \"no\"))\n+\n (define* (make-bitcoin-cross-toolchain target\n                                        #:key\n                                        (base-gcc-for-libc gcc-7)\n                                        (base-kernel-headers linux-libre-headers-5.4)\n-                                       (base-libc glibc)  ; glibc 2.31\n+                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n                                        (base-gcc (make-gcc-rpath-link base-gcc)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n@@ -557,6 +571,28 @@ and endian independent.\")\n inspecting signatures in Mach-O binaries.\")\n       (license license:expat))))\n \n+(define-public glibc-2.24\n+  (package\n+    (inherit glibc)\n+    (version \"2.24\")\n+    (source (origin\n+              (method git-fetch)\n+              (uri (git-reference\n+                    (url \"https://sourceware.org/git/glibc.git\")\n+                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n+              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n+              (sha256\n+               (base32\n+                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n+              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n+                                           \"glibc-versioned-locpath.patch\"\n+                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n+                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n+\n+(define glibc-2.27/bitcoin-patched\n+  (package-with-extra-patches glibc-2.27\n+    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n+\n (packages->manifest\n  (append\n   (list ;; The Basics\n@@ -606,7 +642,10 @@ inspecting signatures in Mach-O binaries.\")\n                  (make-nsis-with-sde-support nsis-x86_64)\n                  osslsigncode))\n           ((string-contains target \"-linux-\")\n-           (list (make-bitcoin-cross-toolchain target)))\n+           (list (cond ((string-contains target \"riscv64-\")\n+                        (make-bitcoin-cross-toolchain target #:base-libc glibc-2.27/bitcoin-patched))\n+                       (else\n+                        (make-bitcoin-cross-toolchain target)))))\n           ((string-contains target \"darwin\")\n            (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n           (else '())))))"
      },
      {
        "sha": "54a7824345fa381dbfed01c4b7603d403a329fa2",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -0,0 +1,60 @@\n+commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n+Date:   Wed Oct 18 17:26:23 2017 +0100\n+\n+    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n+    \n+    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n+    symbol instead of _dl_start.\n+    \n+    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n+    Here is the change which makes this solution work (part of binutils 2.24):\n+    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n+    \n+    i386, x86_64 targets use the same method to do this as well.\n+    \n+    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n+    being resolved at link time and the static address fits in the 32bits.\n+    However, in LP64, normally, the address is defined to be 64 bit.\n+    \n+    Here is the C version one which should be portable in all cases.\n+    \n+            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n+            _DYNAMIC symbol to calculate load address.\n+\n+diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n+index e86d8b5b63..5a5b8a5de5 100644\n+--- a/sysdeps/aarch64/dl-machine.h\n++++ b/sysdeps/aarch64/dl-machine.h\n+@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n+   /* To figure out the load address we use the definition that for any symbol:\n+      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n+ \n+-     The choice of symbol is arbitrary. The static address we obtain\n+-     by constructing a non GOT reference to the symbol, the dynamic\n+-     address of the symbol we compute using adrp/add to compute the\n+-     symbol's address relative to the PC.\n+-     This depends on 32bit relocations being resolved at link time\n+-     and that the static address fits in the 32bits.  */\n+-\n+-  ElfW(Addr) static_addr;\n+-  ElfW(Addr) dynamic_addr;\n+-\n+-  asm (\"\t\t\t\t\t\\n\"\n+-\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n+-\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n+-\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n+-\"\tb\t2f\t\t\t\t\\n\"\n+-\"1:\t\t\t\t\t\t\\n\"\n+-\"\t.word\t_dl_start\t\t\t\\n\"\n+-\"2:\t\t\t\t\t\t\\n\"\n+-    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n+-  return dynamic_addr - static_addr;\n++    _DYNAMIC sysmbol is used here as its link-time address stored in\n++    the special unrelocated first GOT entry.  */\n++\n++    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n++    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n+ }\n+ \n+ /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "5d7a148c62cf05e9eb2d55b5c1997462e303935d",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -0,0 +1,98 @@\n+commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n+Author: Florian Weimer <fweimer@redhat.com>\n+Date:   Wed Sep 21 10:45:32 2016 +0200\n+\n+    Avoid running $(CXX) during build to obtain header file paths\n+    \n+    This reduces the build time somewhat and is particularly noticeable\n+    during rebuilds with few code changes.\n+\n+diff --git a/Makerules b/Makerules\n+index 7e4077ee50..c338850de5 100644\n+--- a/Makerules\n++++ b/Makerules\n+@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n+ # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n+ before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n+ \t          $(before-compile)\n+-cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n+-$(common-objpfx)cstdlib: $(cstdlib)\n++$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+-cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n+-$(common-objpfx)cmath: $(cmath)\n++$(common-objpfx)cmath: $(c++-cmath-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+ endif\n+diff --git a/config.make.in b/config.make.in\n+index 95c6f36876..04a8b3ed7f 100644\n+--- a/config.make.in\n++++ b/config.make.in\n+@@ -45,6 +45,8 @@ defines = @DEFINES@\n+ sysheaders = @sysheaders@\n+ sysincludes = @SYSINCLUDES@\n+ c++-sysincludes = @CXX_SYSINCLUDES@\n++c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n++c++-cmath-header = @CXX_CMATH_HEADER@\n+ all-warnings = @all_warnings@\n+ enable-werror = @enable_werror@\n+ \n+diff --git a/configure b/configure\n+index 17625e1041..6ff252744b 100755\n+--- a/configure\n++++ b/configure\n+@@ -635,6 +635,8 @@ BISON\n+ INSTALL_INFO\n+ PERL\n+ BASH_SHELL\n++CXX_CMATH_HEADER\n++CXX_CSTDLIB_HEADER\n+ CXX_SYSINCLUDES\n+ SYSINCLUDES\n+ AUTOCONF\n+@@ -5054,6 +5056,18 @@ fi\n+ \n+ \n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++\n++\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following\n+diff --git a/configure.ac b/configure.ac\n+index 33bcd62180..9938ab0dc2 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -1039,6 +1039,18 @@ fi\n+ AC_SUBST(SYSINCLUDES)\n+ AC_SUBST(CXX_SYSINCLUDES)\n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++AC_SUBST(CXX_CSTDLIB_HEADER)\n++AC_SUBST(CXX_CMATH_HEADER)\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "39c995ffb5c4caa8a572b221e40aaee7d0264dd1",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -0,0 +1,70 @@\n+From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Mon, 31 Dec 2018 09:26:42 -0800\n+Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n+ #24022]\n+\n+<asm/syscalls.h> has been removed by\n+\n+commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n+Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n+Date:   Thu Nov 8 20:02:39 2018 +0100\n+\n+    riscv: add asm/unistd.h UAPI header\n+\n+    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n+    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n+    architectures.\n+\n+    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n+    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n+    - Adjust kernel asm/unistd.h\n+\n+    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n+\n+<asm/syscalls.h> may be restored by\n+\n+Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n+Date: Tue, 11 Dec 2018 09:09:35 +0100\n+\n+UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n+which did resolve issue with missing syscalls macros resulting in\n+glibc (2.28) build failure. It also broke glibc in a different way:\n+asm/syscalls.h is being used by glibc. I noticed this while doing\n+Fedora 30/Rawhide mass rebuild.\n+\n+The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n+I plan to send a patch to glibc to use asm/unistd.h instead of\n+asm/syscalls.h\n+\n+In the meantime, we use __has_include__, which was added to GCC 5, to\n+check if <asm/syscalls.h> exists before including it.  Tested with\n+build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n+\n+\t[BZ #24022]\n+\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n+\t<asm/syscalls.h> exists with __has_include__ before including it.\n+---\n+ sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n+ 1 file changed, 5 insertions(+), 1 deletion(-)\n+\n+diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+index d612ef4c6c..0b2042620b 100644\n+--- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n++++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+@@ -21,7 +21,11 @@\n+ #include <stdlib.h>\n+ #include <atomic.h>\n+ #include <sys/cachectl.h>\n+-#include <asm/syscalls.h>\n++#if __has_include__ (<asm/syscalls.h>)\n++# include <asm/syscalls.h>\n++#else\n++# include <asm/unistd.h>\n++#endif\n+ \n+ typedef int (*func_type) (void *, void *, unsigned long int);\n+ \n+-- \n+2.31.1\n+"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -0,0 +1,10 @@\n+By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n+it's in 'lib/' for us.  This patch fixes that.\n+\n+--- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n++++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n+@@ -1,3 +1,3 @@\n+ /LD_TRACE_LOADED_OBJECTS=1/a\\\n+ add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n+-s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n++s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "added",
        "additions": 240,
        "deletions": 0,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/271155984574a5bba9619d8f6da9bb0606d93f8c/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=271155984574a5bba9619d8f6da9bb0606d93f8c",
        "patch": "@@ -0,0 +1,240 @@\n+The format of locale data can be incompatible between libc versions, and\n+loading incompatible data can lead to 'setlocale' returning EINVAL at best\n+or triggering an assertion failure at worst.  See\n+https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n+for background information.\n+\n+To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n+variable, and to look for locale data in version-specific sub-directories of\n+that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n+/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n+\n+That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n+versions coexist on the system.\n+\n+--- a/locale/newlocale.c\n++++ b/locale/newlocale.c\n+@@ -30,6 +30,7 @@\n+ /* Lock for protecting global data.  */\n+ __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n+ \n++extern error_t compute_locale_search_path (char **, size_t *);\n+ \n+ /* Use this when we come along an error.  */\n+ #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n+@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   __locale_t result_ptr;\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   int cnt;\n+   size_t names_len;\n+ \n+@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n+-    {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0)\n+-\treturn NULL;\n+-\n+-      if (__argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t  _nl_default_locale_path, ':') != 0)\n+-\treturn NULL;\n+-    }\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n++    return NULL;\n+ \n+   /* Get the names for the locales we are interested in.  We either\n+      allow a composite name or a single name.  */\n+diff --git a/locale/setlocale.c b/locale/setlocale.c\n+index ead030d..0c0e314 100644\n+--- a/locale/setlocale.c\n++++ b/locale/setlocale.c\n+@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n+     }\n+ }\n+ \n++/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n++   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n++error_t\n++compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n++{\n++  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n++  char *locpath_var = getenv (\"LOCPATH\");\n++\n++  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n++    {\n++      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n++\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n++\t libc version.  */\n++      if (__argz_create_sep (guix_locpath_var, ':',\n++\t\t\t     locale_path, locale_path_len) != 0\n++\t  || __argz_suffix_entries (locale_path, locale_path_len,\n++\t\t\t\t    \"/\" VERSION) != 0)\n++\tgoto bail_out;\n++    }\n++\n++  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++    {\n++      char *reg_locale_path = NULL;\n++      size_t reg_locale_path_len = 0;\n++\n++      if (__argz_create_sep (locpath_var, ':',\n++\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      if (__argz_append (locale_path, locale_path_len,\n++\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      free (reg_locale_path);\n++    }\n++\n++  if (*locale_path != NULL)\n++    {\n++      /* Append the system default locale directory.  */\n++      if (__argz_add_sep (locale_path, locale_path_len,\n++\t\t\t  _nl_default_locale_path, ':') != 0)\n++\tgoto bail_out;\n++    }\n++\n++  return 0;\n++\n++ bail_out:\n++  free (*locale_path);\n++  *locale_path = NULL;\n++  *locale_path_len = 0;\n++\n++  return ENOMEM;\n++}\n++\n+ char *\n+ setlocale (int category, const char *locale)\n+ {\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   char *composite;\n+ \n+   /* Sanity check for CATEGORY argument.  */\n+@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n+     {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0\n+-\t  || __argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t     _nl_default_locale_path, ':') != 0)\n+-\t{\n+-\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n+-\t  return NULL;\n+-\t}\n++      __libc_rwlock_unlock (__libc_setlocale_lock);\n++      return NULL;\n+     }\n+ \n+   if (category == LC_ALL)\n+diff --git a/string/Makefile b/string/Makefile\n+index 8424a61..f925503 100644\n+--- a/string/Makefile\n++++ b/string/Makefile\n+@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n+ \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n+ \t\t   $(addprefix argz-,append count create ctsep next\t\\\n+ \t\t\t\t     delete extract insert stringify\t\\\n+-\t\t\t\t     addsep replace)\t\t\t\\\n++\t\t\t\t     addsep replace suffix)\t\t\\\n+ \t\t   envz basename\t\t\t\t\t\\\n+ \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n+ \t\t   xpg-strerror strerror_l\n+diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n+new file mode 100644\n+index 0000000..505b0f2\n+--- /dev/null\n++++ b/string/argz-suffix.c\n+@@ -0,0 +1,56 @@\n++/* Copyright (C) 2015 Free Software Foundation, Inc.\n++   This file is part of the GNU C Library.\n++   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n++\n++   The GNU C Library is free software; you can redistribute it and/or\n++   modify it under the terms of the GNU Lesser General Public\n++   License as published by the Free Software Foundation; either\n++   version 2.1 of the License, or (at your option) any later version.\n++\n++   The GNU C Library is distributed in the hope that it will be useful,\n++   but WITHOUT ANY WARRANTY; without even the implied warranty of\n++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n++   Lesser General Public License for more details.\n++\n++   You should have received a copy of the GNU Lesser General Public\n++   License along with the GNU C Library; if not, see\n++   <http://www.gnu.org/licenses/>.  */\n++\n++#include <argz.h>\n++#include <errno.h>\n++#include <stdlib.h>\n++#include <string.h>\n++\n++\n++error_t\n++__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n++\n++{\n++  size_t suffix_len = strlen (suffix);\n++  size_t count = __argz_count (*argz, *argz_len);\n++  size_t new_argz_len = *argz_len + count * suffix_len;\n++  char *new_argz = malloc (new_argz_len);\n++\n++  if (new_argz)\n++    {\n++      char *p = new_argz, *entry;\n++\n++      for (entry = *argz;\n++\t   entry != NULL;\n++\t   entry = argz_next (*argz, *argz_len, entry))\n++\t{\n++\t  p = stpcpy (p, entry);\n++\t  p = stpcpy (p, suffix);\n++\t  p++;\n++\t}\n++\n++      free (*argz);\n++      *argz = new_argz;\n++      *argz_len = new_argz_len;\n++\n++      return 0;\n++    }\n++  else\n++    return ENOMEM;\n++}\n++weak_alias (__argz_suffix_entries, argz_suffix_entries)\n+diff --git a/string/argz.h b/string/argz.h\n+index bb62a31..d276a35 100644\n+--- a/string/argz.h\n++++ b/string/argz.h\n+@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n+ \t\t\t     const char *__restrict __str,\n+ \t\t\t     const char *__restrict __with,\n+ \t\t\t     unsigned int *__restrict __replace_count);\n++\n++/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n++   and ENOMEN if memory cannot be allocated.  */\n++extern error_t __argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t      size_t *__restrict __argz_len,\n++\t\t\t\t      const char *__restrict __suffix);\n++extern error_t argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t    size_t *__restrict __argz_len,\n++\t\t\t\t    const char *__restrict __suffix);\n++\n+ \f\n+ /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n+    are no more.  If entry is NULL, then the first entry is returned.  This"
      }
    ]
  },
  {
    "sha": "e46287853f3a41c3f0772d3448d8df4ea01a156f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDYyODc4NTNmM2E0MWMzZjA3NzJkMzQ0OGQ4ZGY0ZWEwMWExNTZm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-09T02:53:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T15:53:20Z"
      },
      "message": "build: remove --enable-determinism configure option",
      "tree": {
        "sha": "a9cda50744d29ab3e63fedba233f5caaff75cfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9cda50744d29ab3e63fedba233f5caaff75cfdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e46287853f3a41c3f0772d3448d8df4ea01a156f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDjKvAACgkQLuufXMCV\nJsHtaQ//bxWzajch++beYD0PVgCoNOvIL7WuJRfIISnd3ABFFGZK0/MdsVniT4ZH\nMMaTQu/HCpZZihFckm2LPTtkjDw/9GPbgOoFE3EaPEQ8JEMX6D3MxO3lQkxzSj2e\nAgMKYsU0Mtyj/y9XTaK9cICK8m0S84uYQUWFjWcpbt/Bm+nnZiud7//XpWjMoOZJ\nWUwuXFLtD20f6Qkg+Oru6RPQ4Aa50m81E4JSL86UglZ2GqoyStRFAsjk8amPirHo\nW3UbsyxE5iSkWoqX1re7RfUtJQalzzf4REU9Zi7EkJtodTS2ZdVcE/9IzH6TJtFA\nmsjtRj2XcPVncDAqv42V+IOMlQ7fe4hkGKCK7q3qNKeR461Cd8Kp+BxvNu9SpxiM\nOJo0i2Rf0+ugHDMpDNyidEeVLf2z1R2BD90HqUZDYtLvVzzhGLGDxqX0FaOotY5d\nkJEuq3+70DWRhXw1WU3S3D1p9NlLRvoBeolTtXf4+2OwBFwoQ4u8MMQe4jeEVEq6\n5VFg2TP2Nl32x2xworYizj4wlFkDNHqaTKRXv8Mh9HLdIUo8D++MAkJkWWVU/8RM\n9YNElrjAcMP6PSNzvDEZzi/DAWo9eIznNXSzrKGAR9nHGpewb/ZvzS8C0lfmO/di\nr2OVeLCIWwMZ1pKa4wtrjzgYMcHBeVlJOhWB9DBRIty3NLss/DI=\n=T9PC\n-----END PGP SIGNATURE-----",
        "payload": "tree a9cda50744d29ab3e63fedba233f5caaff75cfdd\nparent 271155984574a5bba9619d8f6da9bb0606d93f8c\nauthor fanquake <fanquake@gmail.com> 1623207193 +0800\ncommitter fanquake <fanquake@gmail.com> 1625500400 +0800\n\nbuild: remove --enable-determinism configure option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46287853f3a41c3f0772d3448d8df4ea01a156f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e46287853f3a41c3f0772d3448d8df4ea01a156f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46287853f3a41c3f0772d3448d8df4ea01a156f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "271155984574a5bba9619d8f6da9bb0606d93f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271155984574a5bba9619d8f6da9bb0606d93f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271155984574a5bba9619d8f6da9bb0606d93f8c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "94f01a51a64e4f1855407ff4d99a176abcf804dc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46287853f3a41c3f0772d3448d8df4ea01a156f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46287853f3a41c3f0772d3448d8df4ea01a156f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e46287853f3a41c3f0772d3448d8df4ea01a156f",
        "patch": "@@ -318,13 +318,6 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-dnl Pass compiler & linker flags that make builds deterministic\n-AC_ARG_ENABLE([determinism],\n-    [AS_HELP_STRING([--enable-determinism],\n-                    [Enable compilation flags that make builds deterministic (default is no)])],\n-    [enable_determinism=$enableval],\n-    [enable_determinism=no])\n-\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n@@ -931,12 +924,6 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n-if test x$enable_determinism = xyes; then\n-  if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n-  fi\n-fi\n-\n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n AC_CHECK_DECLS([getifaddrs, freeifaddrs],[CHECK_SOCKET],,"
      }
    ]
  },
  {
    "sha": "285a65ccfde2e811cfe01e916b998c02ee534a97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODVhNjVjY2ZkZTJlODExY2ZlMDFlOTE2Yjk5OGMwMmVlNTM0YTk3",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T21:52:38Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T18:40:47Z"
      },
      "message": "test: use script_util helpers for creating P2SH scripts",
      "tree": {
        "sha": "969a94f117d2a7ef637d2a06b4ef97c940d9b544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/969a94f117d2a7ef637d2a06b4ef97c940d9b544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/285a65ccfde2e811cfe01e916b998c02ee534a97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b57b633b942da162045b1fe7743a8abdfeaf60e2"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 57,
      "deletions": 64
    },
    "files": [
      {
        "sha": "c5dc96f9fb6e7d2b9bd8c2bbbe35ed4d8ed63140",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -29,27 +29,32 @@\n     CTxOut,\n     MAX_MONEY,\n )\n-from test_framework import script as sc\n from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n from test_framework.script import (\n     CScript,\n+    OP_0,\n+    OP_2DIV,\n+    OP_2MUL,\n+    OP_AND,\n     OP_CAT,\n-    OP_SUBSTR,\n-    OP_LEFT,\n-    OP_RIGHT,\n+    OP_CHECKSIG,\n+    OP_DIV,\n     OP_INVERT,\n-    OP_AND,\n+    OP_LEFT,\n+    OP_LSHIFT,\n+    OP_MOD,\n+    OP_MUL,\n     OP_OR,\n+    OP_RIGHT,\n+    OP_RSHIFT,\n+    OP_SUBSTR,\n+    OP_TRUE,\n     OP_XOR,\n-    OP_2MUL,\n-    OP_2DIV,\n-    OP_MUL,\n-    OP_DIV,\n-    OP_MOD,\n-    OP_LSHIFT,\n-    OP_RSHIFT\n )\n-basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n+basic_p2sh = script_to_p2sh_script(CScript([OP_0]))\n \n \n class BadTxTemplate:\n@@ -116,7 +121,7 @@ class SizeTooSmall(BadTxTemplate):\n     def get_tx(self):\n         tx = CTransaction()\n         tx.vin.append(self.valid_txin)\n-        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE])))\n+        tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx.calc_sha256()\n         return tx\n \n@@ -217,7 +222,7 @@ class TooManySigops(BadTxTemplate):\n     expect_disconnect = False\n \n     def get_tx(self):\n-        lotsa_checksigs = sc.CScript([sc.OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n+        lotsa_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         return create_tx_with_script(\n             self.spend_tx, 0,\n             script_pub_key=lotsa_checksigs,"
      },
      {
        "sha": "c11eabc91730f47e33585c5537214269574bd42e",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -37,17 +37,17 @@\n     OP_CHECKSIGVERIFY,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n     OP_DROP,\n     OP_FALSE,\n-    OP_HASH160,\n     OP_IF,\n     OP_INVALIDOPCODE,\n     OP_RETURN,\n     OP_TRUE,\n     SIGHASH_ALL,\n     LegacySignatureHash,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -469,8 +469,7 @@ def run_test(self):\n \n         # Build the redeem script, hash it, use hash to create the p2sh script\n         redeem_script = CScript([self.coinbase_pubkey] + [OP_2DUP, OP_CHECKSIGVERIFY] * 5 + [OP_CHECKSIG])\n-        redeem_script_hash = hash160(redeem_script)\n-        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n+        p2sh_script = script_to_p2sh_script(redeem_script)\n \n         # Create a transaction that spends one satoshi to the p2sh_script, the rest to OP_TRUE\n         # This must be signed because it is spending a coinbase"
      },
      {
        "sha": "5322b024141b1dde1e04be449a2c459406446960",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -18,10 +18,10 @@\n     OP_1,\n     OP_2,\n     OP_DROP,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_TRUE,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -37,8 +37,8 @@\n # time signing.\n REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n+P2SH_1 = script_to_p2sh_script(REDEEM_SCRIPT_1)\n+P2SH_2 = script_to_p2sh_script(REDEEM_SCRIPT_2)\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]"
      },
      {
        "sha": "dadccbd73ede16d2b828b9523ac7b9153afcf922",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -34,13 +34,12 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_TRUE,\n     hash160,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -354,7 +353,7 @@ def run_test(self):\n \n         multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])['address']\n         script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n-        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+        solvable_after_importaddress.append(script_to_p2sh_script(script))\n \n         for i in compressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n@@ -430,7 +429,7 @@ def run_test(self):\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n         unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n-        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n+        p2shop0 = script_to_p2sh_script(op0)\n         p2wshop1 = CScript([OP_0, sha256(op1)])\n         unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n@@ -616,21 +615,21 @@ def p2sh_address_to_script(self, v):\n         bare = CScript(hex_str_to_bytes(v['hex']))\n         p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n         p2wsh = CScript([OP_0, sha256(bare)])\n-        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = hex_str_to_bytes(v['pubkey'])\n         p2wpkh = CScript([OP_0, hash160(pubkey)])\n-        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n         p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n-        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n+        p2sh_p2pk = script_to_p2sh_script(p2pk)\n+        p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n         p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n         p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n-        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n-        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        p2sh_p2wsh_p2pk = script_to_p2sh_script(p2wsh_p2pk)\n+        p2sh_p2wsh_p2pkh = script_to_p2sh_script(p2wsh_p2pkh)\n         return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n \n     def create_and_mine_tx_from_txids(self, txids, success=True):"
      },
      {
        "sha": "fefa369ffec6f519315d3657c88c3fd2042c9ca4",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -57,7 +57,6 @@\n     OP_ENDIF,\n     OP_EQUAL,\n     OP_EQUALVERIFY,\n-    OP_HASH160,\n     OP_IF,\n     OP_NOP,\n     OP_NOT,\n@@ -78,6 +77,7 @@\n )\n from test_framework.script_util import (\n     keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n@@ -499,7 +499,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n     if p2sh:\n         # P2SH wrapper can be combined with anything else\n         conf[\"script_p2sh\"] = spk\n-        spk = CScript([OP_HASH160, hash160(spk), OP_EQUAL])\n+        spk = script_to_p2sh_script(spk)\n \n     conf = {**conf, **kwargs}\n "
      },
      {
        "sha": "43e6a157a4db27523867d626b0c6319d3733167d",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -19,16 +19,17 @@\n     tx_from_hex,\n )\n from test_framework.script import (\n-    hash160,\n     CScript,\n     OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_EQUAL,\n     OP_HASH160,\n     OP_RETURN,\n )\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -291,7 +292,7 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx = tx_from_hex(raw_tx_reference)\n-        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n+        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=script_to_p2sh_script(b'burn'))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result("
      },
      {
        "sha": "6a1cb8c1b410a38bf0ba3645ec801e3250a3e5fd",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 18,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -62,8 +62,6 @@\n     OP_DROP,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n@@ -77,6 +75,7 @@\n )\n from test_framework.script_util import (\n     keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -491,9 +490,7 @@ def test_v0_outputs_arent_spendable(self):\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(script_pubkey)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        p2sh_script_pubkey = script_to_p2sh_script(script_pubkey)\n \n         value = self.utxo[0].nValue // 3\n \n@@ -630,9 +627,7 @@ def test_standardness_v0(self):\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(witness_program)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        p2sh_script_pubkey = script_to_p2sh_script(witness_program)\n \n         # First prepare a p2sh output (so that spending it will pass standardness)\n         p2sh_tx = CTransaction()\n@@ -739,8 +734,7 @@ def test_p2sh_witness(self):\n         witness_program = CScript([OP_DROP, OP_TRUE])\n         witness_hash = sha256(witness_program)\n         p2wsh_pubkey = CScript([OP_0, witness_hash])\n-        p2sh_witness_hash = hash160(p2wsh_pubkey)\n-        script_pubkey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        script_pubkey = script_to_p2sh_script(p2wsh_pubkey)\n         script_sig = CScript([p2wsh_pubkey])  # a push of the redeem script\n \n         # Fund the P2SH output\n@@ -1328,9 +1322,8 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Add too-large for IsStandard witness and check that it does not enter reject filter\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n         witness_program2 = CScript([b'a' * 400000])\n-        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, script_to_p2sh_script(p2sh_program)))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program2]\n         tx3.rehash()\n \n@@ -1564,8 +1557,7 @@ def test_uncompressed_pubkey(self):\n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n         # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n-        p2sh_witness_hash = hash160(script_wsh)\n-        script_p2sh = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        script_p2sh = script_to_p2sh_script(script_wsh)\n         script_sig = CScript([script_wsh])\n \n         tx3 = CTransaction()\n@@ -1803,8 +1795,7 @@ def test_non_standard_witness_blinding(self):\n         # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n         # in P2SH).\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n-        script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        script_pubkey = script_to_p2sh_script(p2sh_program)\n \n         # Now check that unnecessary witnesses can't be used to blind a node\n         # to a transaction, eg by violating standardness checks.\n@@ -1870,10 +1861,9 @@ def test_non_standard_witness(self):\n         outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n         for i in scripts:\n             p2wsh = CScript([OP_0, sha256(i)])\n-            p2sh = hash160(p2wsh)\n             p2wsh_scripts.append(p2wsh)\n             tx.vout.append(CTxOut(outputvalue, p2wsh))\n-            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+            tx.vout.append(CTxOut(outputvalue, script_to_p2sh_script(p2wsh)))\n         tx.rehash()\n         txid = tx.sha256\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)"
      },
      {
        "sha": "76f1a1edfcafd429fece816622d85f5a097adad4",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -21,13 +21,12 @@\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_EQUAL,\n-    OP_HASH160,\n     hash160,\n     sha256,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.util import hex_str_to_bytes\n \n@@ -64,7 +63,7 @@ def get_key(node):\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n                p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n@@ -83,7 +82,7 @@ def get_generate_key():\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n                p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n@@ -101,12 +100,12 @@ def get_multisig(node):\n     witness_script = CScript([OP_0, sha256(script_code)])\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,\n-                    p2sh_script=CScript([OP_HASH160, hash160(script_code), OP_EQUAL]).hex(),\n+                    p2sh_script=script_to_p2sh_script(script_code).hex(),\n                     p2sh_addr=script_to_p2sh(script_code),\n                     redeem_script=script_code.hex(),\n                     p2wsh_script=witness_script.hex(),\n                     p2wsh_addr=script_to_p2wsh(script_code),\n-                    p2sh_p2wsh_script=CScript([OP_HASH160, hash160(witness_script), OP_EQUAL]).hex(),\n+                    p2sh_p2wsh_script=script_to_p2sh_script(witness_script).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n def test_address(node, address, **kwargs):"
      }
    ]
  },
  {
    "sha": "905d672b743edf31531d095ffe800449eaffec69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDVkNjcyYjc0M2VkZjMxNTMxZDA5NWZmZTgwMDQ0OWVhZmZlYzY5",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:45:04Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T18:40:52Z"
      },
      "message": "test: use script_util helpers for creating P2W{PKH,SH} scripts",
      "tree": {
        "sha": "e027a699270a2c863d944573fa30265060516ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e027a699270a2c863d944573fa30265060516ba4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/905d672b743edf31531d095ffe800449eaffec69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905d672b743edf31531d095ffe800449eaffec69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/905d672b743edf31531d095ffe800449eaffec69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905d672b743edf31531d095ffe800449eaffec69/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "285a65ccfde2e811cfe01e916b998c02ee534a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/285a65ccfde2e811cfe01e916b998c02ee534a97"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 58,
      "deletions": 80
    },
    "files": [
      {
        "sha": "9cf46d9d11b3d3e1f8f34bcd629c6b69ca005bc5",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -23,7 +23,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n@@ -35,11 +34,12 @@\n     OP_CHECKSIG,\n     OP_DROP,\n     OP_TRUE,\n-    hash160,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -428,9 +428,9 @@ def run_test(self):\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n-        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n+        unsolvablep2wshp2pkh = script_to_p2wsh_script(unsolvablep2pkh)\n         p2shop0 = script_to_p2sh_script(op0)\n-        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        p2wshop1 = script_to_p2wsh_script(op1)\n         unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n         unsolvable_after_importaddress.append(op1)  # OP_1 will be imported as script\n@@ -450,16 +450,16 @@ def run_test(self):\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bare.hex())\n-                importlist.append(CScript([OP_0, sha256(bare)]).hex())\n+                importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n                 p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n-                importlist.append(CScript([OP_0, hash160(pubkey)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pk)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pkh)]).hex())\n+                importlist.append(key_to_p2wpkh_script(pubkey).hex())\n+                importlist.append(script_to_p2wsh_script(p2pk).hex())\n+                importlist.append(script_to_p2wsh_script(p2pkh).hex())\n \n         importlist.append(unsolvablep2pkh.hex())\n         importlist.append(unsolvablep2wshp2pkh.hex())\n@@ -614,20 +614,20 @@ def mine_and_test_listunspent(self, script_list, ismine):\n     def p2sh_address_to_script(self, v):\n         bare = CScript(hex_str_to_bytes(v['hex']))\n         p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2wsh = CScript([OP_0, sha256(bare)])\n+        p2wsh = script_to_p2wsh_script(bare)\n         p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = hex_str_to_bytes(v['pubkey'])\n-        p2wpkh = CScript([OP_0, hash160(pubkey)])\n+        p2wpkh = key_to_p2wpkh_script(pubkey)\n         p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n         p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n         p2sh_p2pk = script_to_p2sh_script(p2pk)\n         p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n-        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n-        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n+        p2wsh_p2pk = script_to_p2wsh_script(p2pk)\n+        p2wsh_p2pkh = script_to_p2wsh_script(p2pkh)\n         p2sh_p2wsh_p2pk = script_to_p2sh_script(p2wsh_p2pk)\n         p2sh_p2wsh_p2pkh = script_to_p2sh_script(p2wsh_p2pkh)\n         return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]"
      },
      {
        "sha": "17be29c7bfe7dcae358b1ad48a8e6c228edc57a2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -76,15 +76,16 @@\n     taproot_construct,\n )\n from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n from test_framework.address import (\n     hash160,\n-    sha256,\n )\n from collections import OrderedDict, namedtuple\n from io import BytesIO\n@@ -461,13 +462,13 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2WPKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_0, pubkeyhash])\n+            spk = key_to_p2wpkh_script(pkh)\n             conf[\"scriptcode\"] = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"script_witv0\"] = None\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n             # P2WSH\n-            spk = CScript([OP_0, sha256(script)])\n+            spk = script_to_p2wsh_script(script)\n             conf[\"scriptcode\"] = script\n             conf[\"script_witv0\"] = script\n         else:"
      },
      {
        "sha": "ead9d852febf3bda8d432db11e38e93135027139",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -41,7 +41,6 @@\n     ser_vector,\n     sha256,\n     tx_from_hex,\n-    uint256_from_str,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -74,8 +73,10 @@\n     hash160,\n )\n from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -488,8 +489,7 @@ def test_v0_outputs_arent_spendable(self):\n \n         # Create two outputs, a p2wsh and p2sh-p2wsh\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         p2sh_script_pubkey = script_to_p2sh_script(script_pubkey)\n \n         value = self.utxo[0].nValue // 3\n@@ -625,8 +625,7 @@ def test_standardness_v0(self):\n         V0 segwit inputs may only be mined after activation, but not before.\"\"\"\n \n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         p2sh_script_pubkey = script_to_p2sh_script(witness_program)\n \n         # First prepare a p2sh output (so that spending it will pass standardness)\n@@ -654,6 +653,7 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n+        witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n         tx2 = CTransaction()\n         # tx was accepted, so we spend the second output.\n@@ -732,8 +732,7 @@ def test_p2sh_witness(self):\n \n         # Prepare the p2sh-wrapped witness output\n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        p2wsh_pubkey = CScript([OP_0, witness_hash])\n+        p2wsh_pubkey = script_to_p2wsh_script(witness_program)\n         script_pubkey = script_to_p2sh_script(p2wsh_pubkey)\n         script_sig = CScript([p2wsh_pubkey])  # a push of the redeem script\n \n@@ -828,8 +827,7 @@ def test_witness_commitments(self):\n \n         # Let's construct a witness program\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n@@ -942,8 +940,7 @@ def test_witness_block_size(self):\n         NUM_OUTPUTS = 50\n \n         witness_program = CScript([OP_2DROP] * NUM_DROPS + [OP_TRUE])\n-        witness_hash = uint256_from_str(sha256(witness_program))\n-        script_pubkey = CScript([OP_0, ser_uint256(witness_hash)])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n         value = self.utxo[0].nValue\n@@ -1045,8 +1042,7 @@ def test_extra_witness_data(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First try extra witness data on a tx that doesn't require a witness\n         tx = CTransaction()\n@@ -1118,8 +1114,7 @@ def test_max_witness_push_length(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -1157,8 +1152,7 @@ def test_max_witness_program_length(self):\n         # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n         long_witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 63 + [OP_TRUE])\n         assert len(long_witness_program) == MAX_PROGRAM_LENGTH + 1\n-        long_witness_hash = sha256(long_witness_program)\n-        long_script_pubkey = CScript([OP_0, long_witness_hash])\n+        long_script_pubkey = script_to_p2wsh_script(long_witness_program)\n \n         block = self.build_next_block()\n \n@@ -1181,8 +1175,7 @@ def test_max_witness_program_length(self):\n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n         assert len(witness_program) == MAX_PROGRAM_LENGTH\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx.vout[0] = CTxOut(tx.vout[0].nValue, script_pubkey)\n         tx.rehash()\n@@ -1201,8 +1194,7 @@ def test_witness_input_length(self):\n         \"\"\"Test that vin length must match vtxinwit length.\"\"\"\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # Create a transaction that splits our utxo into many outputs\n         tx = CTransaction()\n@@ -1309,8 +1301,7 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_pubkey))\n@@ -1472,8 +1463,7 @@ def test_premature_coinbase_witness_spend(self):\n         block = self.build_next_block()\n         # Change the output of the block to be a witness output.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         block.vtx[0].vout[0].scriptPubKey = script_pubkey\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n@@ -1520,7 +1510,7 @@ def test_uncompressed_pubkey(self):\n         # Test 1: P2WPKH\n         # First create a P2WPKH output that uses an uncompressed pubkey\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n         tx.vout.append(CTxOut(utxo.nValue - 1000, script_pkh))\n@@ -1534,8 +1524,7 @@ def test_uncompressed_pubkey(self):\n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_wsh = CScript([OP_0, witness_hash])\n+        script_wsh = script_to_p2wsh_script(witness_program)\n \n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n@@ -1613,8 +1602,7 @@ def test_signature_version_1(self):\n         pubkey = key.get_pubkey().get_bytes()\n \n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First create a witness output for use in the tests.\n         tx = CTransaction()\n@@ -1733,7 +1721,7 @@ def test_signature_version_1(self):\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n         tx.vout.append(CTxOut(temp_utxos[0].nValue, script_pkh))\n@@ -1860,7 +1848,7 @@ def test_non_standard_witness(self):\n         # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n         outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n         for i in scripts:\n-            p2wsh = CScript([OP_0, sha256(i)])\n+            p2wsh = script_to_p2wsh_script(i)\n             p2wsh_scripts.append(p2wsh)\n             tx.vout.append(CTxOut(outputvalue, p2wsh))\n             tx.vout.append(CTxOut(outputvalue, script_to_p2sh_script(p2wsh)))\n@@ -1877,13 +1865,13 @@ def test_non_standard_witness(self):\n         for i in range(len(scripts)):\n             p2wsh_tx = CTransaction()\n             p2wsh_tx.vin.append(CTxIn(COutPoint(txid, i * 2)))\n-            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2wsh_tx.rehash()\n             p2wsh_txs.append(p2wsh_tx)\n             p2sh_tx = CTransaction()\n             p2sh_tx.vin.append(CTxIn(COutPoint(txid, i * 2 + 1), CScript([p2wsh_scripts[i]])))\n-            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2sh_tx.rehash()\n             p2sh_txs.append(p2sh_tx)\n@@ -1978,8 +1966,7 @@ def test_witness_sigops(self):\n \n         # Keep this under MAX_OPS_PER_SCRIPT (201)\n         witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG] * 5 + [OP_CHECKSIG] * 193 + [OP_ENDIF])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         sigops_per_script = 20 * 5 + 193 * 1\n         # We'll produce 2 extra outputs, one with a program that would take us\n@@ -1995,14 +1982,12 @@ def test_witness_sigops(self):\n         # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n         # would push us just over the block sigop limit.\n         witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available + 1) + [OP_ENDIF])\n-        witness_hash_toomany = sha256(witness_program_toomany)\n-        script_pubkey_toomany = CScript([OP_0, witness_hash_toomany])\n+        script_pubkey_toomany = script_to_p2wsh_script(witness_program_toomany)\n \n         # If we spend this script instead, we would exactly reach our sigop\n         # limit (for witness sigops).\n         witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available) + [OP_ENDIF])\n-        witness_hash_justright = sha256(witness_program_justright)\n-        script_pubkey_justright = CScript([OP_0, witness_hash_justright])\n+        script_pubkey_justright = script_to_p2wsh_script(witness_program_justright)\n \n         # First split our available utxo into a bunch of outputs\n         split_value = self.utxo[0].nValue // outputs\n@@ -2135,8 +2120,7 @@ def received_wtxidrelay():\n         # Create a Segwit output from the latest UTXO\n         # and announce it to the network\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))"
      },
      {
        "sha": "f3627d1e37b06c01817233635c685535ec6c20c2",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -6,7 +6,6 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import (\n-    check_script,\n     script_to_p2sh,\n     script_to_p2wsh,\n )\n@@ -20,12 +19,10 @@\n )\n from test_framework.messages import (\n     CTxInWitness,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_CHECKLOCKTIMEVERIFY,\n     OP_CHECKSIG,\n     OP_CHECKSEQUENCEVERIFY,\n@@ -233,7 +230,7 @@ def verify_txn_with_witness_script(self, tx_type):\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n             'P2PK': CScript([hex_str_to_bytes(embedded_pubkey), OP_CHECKSIG]).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n-        redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n+        redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)\n         script_pub_key = self.nodes[1].validateaddress(addr)['scriptPubKey']\n         # Fund that address"
      },
      {
        "sha": "833a2159938255bbe9f24b1ee07dbd64d10b8d3f",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -26,21 +26,22 @@\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n-    sha256,\n     tx_from_hex,\n     uint256_from_str,\n )\n from .script import (\n     CScript,\n     CScriptNum,\n     CScriptOp,\n-    OP_0,\n     OP_1,\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n-    hash160,\n+)\n+from .script_util import (\n+    key_to_p2wpkh_script,\n+    script_to_p2wsh_script,\n )\n from .util import assert_equal\n \n@@ -206,13 +207,11 @@ def witness_script(use_p2wsh, pubkey):\n     scriptPubKey.\"\"\"\n     if not use_p2wsh:\n         # P2WPKH instead\n-        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n-        pkscript = CScript([OP_0, pubkeyhash])\n+        pkscript = key_to_p2wpkh_script(pubkey)\n     else:\n         # 1-of-1 multisig\n         witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n-        scripthash = sha256(witness_program)\n-        pkscript = CScript([OP_0, scripthash])\n+        pkscript = script_to_p2wsh_script(witness_program)\n     return pkscript.hex()\n \n def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):"
      },
      {
        "sha": "acbc040741c2feac46cebfbf8ad2d2f5c29fa998",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -17,16 +17,15 @@\n from test_framework.key import ECKey\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    hash160,\n-    sha256,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.util import hex_str_to_bytes\n \n@@ -56,15 +55,14 @@ def get_key(node):\n     Returns a named tuple of privkey, pubkey and all address and scripts.\"\"\"\n     addr = node.getnewaddress()\n     pubkey = node.getaddressinfo(addr)['pubkey']\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=node.dumpprivkey(addr),\n                pubkey=pubkey,\n                p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_generate_key():\n@@ -75,15 +73,14 @@ def get_generate_key():\n     eckey.generate()\n     privkey = bytes_to_wif(eckey.get_bytes())\n     pubkey = eckey.get_pubkey().get_bytes().hex()\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=privkey,\n                pubkey=pubkey,\n                p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_multisig(node):\n@@ -97,7 +94,7 @@ def get_multisig(node):\n         addrs.append(addr['address'])\n         pubkeys.append(addr['pubkey'])\n     script_code = CScript([OP_2] + [hex_str_to_bytes(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n-    witness_script = CScript([OP_0, sha256(script_code)])\n+    witness_script = script_to_p2wsh_script(script_code)\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,\n                     p2sh_script=script_to_p2sh_script(script_code).hex(),"
      }
    ]
  },
  {
    "sha": "484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODRkNGVlMjI2ZTJiYmIyYWIxNzVjYjFhYmU0ZTEzYjk4NDg5ZWFk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T20:43:26Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T20:48:21Z"
      },
      "message": "Merge bitcoin-core/gui#365: Draw \"eye\" sign at the beginning of watch-only addresses\n\ncd46c11577a05f3dc9eac94f27a6985f6ba0509e qt: Draw \"eye\" sign at the beginning of watch-only addresses (Hennadii Stepanov)\n9ea1da6fc91e17bdaa722001b97aadf576f07f65 qt: Do not extend recent transaction width to address/label string (Hennadii Stepanov)\n\nPull request description:\n\n  This PR guaranties that the \"eye\" sign won't be hidden for very long addresses/labels.\n\n  No longer need to extend `TransactionOverviewWidget` widget width to make \"eye\" signs shown:\n\n  ![Screenshot from 2021-06-15 00-21-05](https://user-images.githubusercontent.com/32963518/121961807-9123b600-cd70-11eb-8cdd-8b2b0d1bf44f.png)\n\n  Fixes https://github.com/bitcoin-core/gui/issues/373\n\nACKs for top commit:\n  jarolrod:\n    ACK cd46c11577a05f3dc9eac94f27a6985f6ba0509e\n\nTree-SHA512: 0602b5bb65d53c5b18e86260750006bba03adbae181917b5a2b7f89b17290bd1f57b4f80adaba32f42cc6fb468598a888b12c0b6b09005d2f2c07bd4d1ad334a",
      "tree": {
        "sha": "af6ba2ddac73da5728c620108fe77e0bbce5377e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af6ba2ddac73da5728c620108fe77e0bbce5377e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDjcBUACgkQQQEIES5+\nqB8M6w//UyJpyXa2b8PXOXOlBpKDiV7K8YtS8ic39w9qCzknKBe75hvz0dl9nrl6\nXgi9tRtuXRdadhApA4YvX4PWNTp9+3MxUyB35EZVBdtsgYV8cpbiIq7zK+mEzYP6\nDNEpmofKi6LD6VGS82gq8R276LbqW6AgopPQGxhxvviT0RKv2jT3IV/5csp6CY8X\nChXEmgRLkrD/dku7Z35xkrqd48kHtBJe63gGBZUBa4/ptO9jI205SKqsCDqwiY6C\nrZZr480L8mTbHTbfHsd7zCgAPywYG2v17KgFlc7HOvxsVEzLMBFdfj07Tz1yaz8U\nDgY55/oD6ip14T8J3xRTELlm/ts2XPP0wFrQ0pEp531E/PCq7QEHY1vhoOSW5hrR\nGl14IHK7VBc5atbuAUTEmawjNJ1JjRlRrYBdtPvIKC4vydQ2xwcU+cei+8Y3erVF\noMMJhRhQ+7YlbAYEtM7yj5c+3XdgxpmKqDKd4LR2s/4X0MXgfLJz2nGDwlINgPYT\nHBizcdFvyYHVP+ZWleb6589z9SEMDMdAgH46sRqYicJbn8lIVMZaLmdX0onMreAS\n5BUgpRxRiki0PY+h1n0tVtuV0f2Lc1QVF6lBLBU/o6gqAJXnX2jOlUb6jDKelzAg\nPG9uICz/8UP05ahkcZiLxdOhf2rz6AfceGLojom4IPBqHpxk/wA=\n=Yxam\n-----END PGP SIGNATURE-----",
        "payload": "tree af6ba2ddac73da5728c620108fe77e0bbce5377e\nparent 271155984574a5bba9619d8f6da9bb0606d93f8c\nparent cd46c11577a05f3dc9eac94f27a6985f6ba0509e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625517806 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625518101 +0300\n\nMerge bitcoin-core/gui#365: Draw \"eye\" sign at the beginning of watch-only addresses\n\ncd46c11577a05f3dc9eac94f27a6985f6ba0509e qt: Draw \"eye\" sign at the beginning of watch-only addresses (Hennadii Stepanov)\n9ea1da6fc91e17bdaa722001b97aadf576f07f65 qt: Do not extend recent transaction width to address/label string (Hennadii Stepanov)\n\nPull request description:\n\n  This PR guaranties that the \"eye\" sign won't be hidden for very long addresses/labels.\n\n  No longer need to extend `TransactionOverviewWidget` widget width to make \"eye\" signs shown:\n\n  ![Screenshot from 2021-06-15 00-21-05](https://user-images.githubusercontent.com/32963518/121961807-9123b600-cd70-11eb-8cdd-8b2b0d1bf44f.png)\n\n  Fixes https://github.com/bitcoin-core/gui/issues/373\n\nACKs for top commit:\n  jarolrod:\n    ACK cd46c11577a05f3dc9eac94f27a6985f6ba0509e\n\nTree-SHA512: 0602b5bb65d53c5b18e86260750006bba03adbae181917b5a2b7f89b17290bd1f57b4f80adaba32f42cc6fb468598a888b12c0b6b09005d2f2c07bd4d1ad334a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/484d4ee226e2bbb2ab175cb1abe4e13b98489ead/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "271155984574a5bba9619d8f6da9bb0606d93f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271155984574a5bba9619d8f6da9bb0606d93f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271155984574a5bba9619d8f6da9bb0606d93f8c"
      },
      {
        "sha": "cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd46c11577a05f3dc9eac94f27a6985f6ba0509e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd46c11577a05f3dc9eac94f27a6985f6ba0509e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "864a62edc84b32c15504983f1a158793526676f2",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/484d4ee226e2bbb2ab175cb1abe4e13b98489ead/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/484d4ee226e2bbb2ab175cb1abe4e13b98489ead/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
        "patch": "@@ -69,20 +69,18 @@ class TxViewDelegate : public QAbstractItemDelegate\n             foreground = brush.color();\n         }\n \n-        painter->setPen(foreground);\n-        QRect boundingRect;\n-        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n-        int address_rect_min_width = boundingRect.width();\n-\n-        if (index.data(TransactionTableModel::WatchonlyRole).toBool())\n-        {\n+        if (index.data(TransactionTableModel::WatchonlyRole).toBool()) {\n             QIcon iconWatchonly = qvariant_cast<QIcon>(index.data(TransactionTableModel::WatchonlyDecorationRole));\n-            QRect watchonlyRect(boundingRect.right() + 5, mainRect.top()+ypad+halfheight, 16, halfheight);\n+            QRect watchonlyRect(addressRect.left(), addressRect.top(), 16, addressRect.height());\n             iconWatchonly = platformStyle->TextColorIcon(iconWatchonly);\n             iconWatchonly.paint(painter, watchonlyRect);\n-            address_rect_min_width += 5 + watchonlyRect.width();\n+            addressRect.setLeft(addressRect.left() + watchonlyRect.width() + 5);\n         }\n \n+        painter->setPen(foreground);\n+        QRect boundingRect;\n+        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n+\n         if(amount < 0)\n         {\n             foreground = COLOR_NEGATIVE;\n@@ -109,7 +107,8 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QRect date_bounding_rect;\n         painter->drawText(amountRect, Qt::AlignLeft | Qt::AlignVCenter, GUIUtil::dateTimeStr(date), &date_bounding_rect);\n \n-        const int minimum_width = std::max(address_rect_min_width, amount_bounding_rect.width() + date_bounding_rect.width());\n+        // 0.4*date_bounding_rect.width() is used to visually distinguish a date from an amount.\n+        const int minimum_width = 1.4 * date_bounding_rect.width() + amount_bounding_rect.width();\n         const auto search = m_minimum_width.find(index.row());\n         if (search == m_minimum_width.end() || search->second != minimum_width) {\n             m_minimum_width[index.row()] = minimum_width;"
      }
    ]
  },
  {
    "sha": "aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTBhNWJiNzBkNzc3MzlkNDNkNWE5Y2VhZTc4ZmIwYzZmYWZkNDM1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T20:49:52Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T21:00:41Z"
      },
      "message": "test: add `bad-txns-prevout-null` test case to invalid_txs.py\n\nThis reject reason is triggered for non-coinbase transactions with\na coinbase-like outpoint, i.e. hash=0, n=0xffffffff.\n\nNote that the invalid tx templates are currently used in the\nfunctional tests feature_block.py and p2p_invalid_tx.py.",
      "tree": {
        "sha": "23451658efbf00f20138133afec337b7cd7fe86b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23451658efbf00f20138133afec337b7cd7fe86b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "271155984574a5bba9619d8f6da9bb0606d93f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271155984574a5bba9619d8f6da9bb0606d93f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271155984574a5bba9619d8f6da9bb0606d93f8c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "95c7370995f888fc2094c0d7ab0e9f489cec49f3",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
        "patch": "@@ -151,6 +151,19 @@ def get_tx(self):\n         return tx\n \n \n+class PrevoutNullInput(BadTxTemplate):\n+    reject_reason = 'bad-txns-prevout-null'\n+    expect_disconnect = True\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(self.valid_txin)\n+        tx.vin.append(CTxIn(COutPoint(hash=0, n=0xffffffff)))\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n class NonexistentInput(BadTxTemplate):\n     reject_reason = None  # Added as an orphan tx.\n     expect_disconnect = False"
      }
    ]
  },
  {
    "sha": "a62fc35a150da584d39d7cd01ade14bbb5002fb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjJmYzM1YTE1MGRhNTg0ZDM5ZDdjZDAxYWRlMTRiYmI1MDAyZmI5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T21:00:33Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-05T21:02:49Z"
      },
      "message": "Merge bitcoin-core/gui#375: Emit dataChanged signal to dynamically re-sort Peers table\n\n986bf78d7e8fd9b69841ecb0decaff840efe9cff qt: Emit dataChanged signal to dynamically re-sort Peers table (Hennadii Stepanov)\n\nPull request description:\n\n  [By default](https://doc.qt.io/qt-5/qsortfilterproxymodel.html#details), the `PeerTableSortProxy`\n  > dynamically re-sorts ... data whenever the original model changes.\n\n  That is not the case on master (8cdf91735f2bdc55577d84a9915f5920ce23b00a) as in ecbd91153875c8cdd5b92b840afc116f65e457fb (#164) no signals are emitted to notify about model changes.\n\n  This PR uses a dedicated [`dataChanged`](https://doc.qt.io/qt-5/qabstractitemmodel.html#dataChanged) signal.\n\n  Fixes #367.\n\n  An alternative to #374.\n\nACKs for top commit:\n  jarolrod:\n    ACK 986bf78d7e8fd9b69841ecb0decaff840efe9cff\n\nTree-SHA512: dcb92c2f9a2c632880429e9528007db426d2ad938c64dfa1f1538c03e4b62620df52ad7daf33b582976c67b472ff76bc0dae707049f4bbbd4941232cee9ce3d4",
      "tree": {
        "sha": "1067ca830ee185c9a2f921d0630d5712088eb8f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1067ca830ee185c9a2f921d0630d5712088eb8f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a62fc35a150da584d39d7cd01ade14bbb5002fb9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDjc3kACgkQQQEIES5+\nqB80nRAAseq3Epb8sBwqCeIxJ/7c+kV84oseog5oVP1D0QUkl1JqeWSAoY/SScT7\nbyahGagXexp983oPOCXNyvkcb7tRHeokKajJdQfEh/yqCADVW4qSmiSHdTbBxVas\n6OACEPHCraPltnCU0BEbNF0nC3sL6REU2XUWvJaUipvZKR9GRSxDK9h0Th4vkPcZ\nd0gsEJmodcFyopKmd+z7F9sRtYhlR9mWNoFANIxS47gPVdTUxYRLdSuOK0LvXBbe\n3DccUdg9DXHu9Kixkvu9fU+YUAGo5jCj+noK7wMpaPZ3o9D8vRw//s7GE6dMdgju\niIeR8tAOfpGDGjii6exqdWoEfD4jR/qnMUdWknTCl7Xt6c8YV/+Qi/xhISupDPo+\nJZGuGymzU5gTPHo/MYGyLlAV1MXd2IB6R6spXeI+dlO5OQBKuiD806yV16Rxa28w\n36IyKRPvBcFGamtJY3wjkzyd7+oR9X5c73Z2nk3cmVYWdkvM6RsfAFQdUl8QrrPM\n+3D8+AiWmKm24b6SW/lw0P/S7ZdurZCc97OnlUF/YecoP/156pT117O3d90xL+oK\nJiaDt5OUpb6ijNNt5MKqbqm2/on4vMN+i3LuaZuL2JqWySJr9NIRH2wcf3Op9GGs\nABBDALbiSYO+POyPHtrPWrvzRO83zEObo26w7J+9CTDy6lMykL8=\n=oN3x\n-----END PGP SIGNATURE-----",
        "payload": "tree 1067ca830ee185c9a2f921d0630d5712088eb8f1\nparent 484d4ee226e2bbb2ab175cb1abe4e13b98489ead\nparent 986bf78d7e8fd9b69841ecb0decaff840efe9cff\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625518833 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1625518969 +0300\n\nMerge bitcoin-core/gui#375: Emit dataChanged signal to dynamically re-sort Peers table\n\n986bf78d7e8fd9b69841ecb0decaff840efe9cff qt: Emit dataChanged signal to dynamically re-sort Peers table (Hennadii Stepanov)\n\nPull request description:\n\n  [By default](https://doc.qt.io/qt-5/qsortfilterproxymodel.html#details), the `PeerTableSortProxy`\n  > dynamically re-sorts ... data whenever the original model changes.\n\n  That is not the case on master (8cdf91735f2bdc55577d84a9915f5920ce23b00a) as in ecbd91153875c8cdd5b92b840afc116f65e457fb (#164) no signals are emitted to notify about model changes.\n\n  This PR uses a dedicated [`dataChanged`](https://doc.qt.io/qt-5/qabstractitemmodel.html#dataChanged) signal.\n\n  Fixes #367.\n\n  An alternative to #374.\n\nACKs for top commit:\n  jarolrod:\n    ACK 986bf78d7e8fd9b69841ecb0decaff840efe9cff\n\nTree-SHA512: dcb92c2f9a2c632880429e9528007db426d2ad938c64dfa1f1538c03e4b62620df52ad7daf33b582976c67b472ff76bc0dae707049f4bbbd4941232cee9ce3d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62fc35a150da584d39d7cd01ade14bbb5002fb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a62fc35a150da584d39d7cd01ade14bbb5002fb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62fc35a150da584d39d7cd01ade14bbb5002fb9/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/484d4ee226e2bbb2ab175cb1abe4e13b98489ead",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/484d4ee226e2bbb2ab175cb1abe4e13b98489ead"
      },
      {
        "sha": "986bf78d7e8fd9b69841ecb0decaff840efe9cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986bf78d7e8fd9b69841ecb0decaff840efe9cff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/986bf78d7e8fd9b69841ecb0decaff840efe9cff"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1b7fda6e7752db341ac2138508515e61e09f7f4a",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=a62fc35a150da584d39d7cd01ade14bbb5002fb9",
        "patch": "@@ -179,5 +179,7 @@ void PeerTableModel::refresh()\n         m_peers_data.swap(new_peers_data);\n     }\n \n-    Q_EMIT changed();\n+    const auto top_left = index(0, 0);\n+    const auto bottom_right = index(rowCount() - 1, columnCount() - 1);\n+    Q_EMIT dataChanged(top_left, bottom_right);\n }"
      },
      {
        "sha": "0d841ebf28c5728df7457cbade158395d5da6fd4",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=a62fc35a150da584d39d7cd01ade14bbb5002fb9",
        "patch": "@@ -73,9 +73,6 @@ class PeerTableModel : public QAbstractTableModel\n public Q_SLOTS:\n     void refresh();\n \n-Q_SIGNALS:\n-    void changed();\n-\n private:\n     //! Internal peer data structure.\n     QList<CNodeCombinedStats> m_peers_data{};"
      },
      {
        "sha": "9c57816f91d67ca41aae9e4df23ea8033568820b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a62fc35a150da584d39d7cd01ade14bbb5002fb9",
        "patch": "@@ -35,6 +35,7 @@\n #endif\n \n #include <QAbstractButton>\n+#include <QAbstractItemModel>\n #include <QDateTime>\n #include <QFont>\n #include <QKeyEvent>\n@@ -686,7 +687,7 @@ void RPCConsole::setClientModel(ClientModel *model, int bestblock_height, int64_\n \n         // peer table signal handling - update peer details when selecting new node\n         connect(ui->peerWidget->selectionModel(), &QItemSelectionModel::selectionChanged, this, &RPCConsole::updateDetailWidget);\n-        connect(model->getPeerTableModel(), &PeerTableModel::changed, this, &RPCConsole::updateDetailWidget);\n+        connect(model->getPeerTableModel(), &QAbstractItemModel::dataChanged, [this] { updateDetailWidget(); });\n \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());"
      }
    ]
  },
  {
    "sha": "1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjQ0OTU4NmE5ZTM5YmM0ZmI1M2NiNWM3YTMxMzYyZTQ3YWVhMTli",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T21:06:06Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T21:06:06Z"
      },
      "message": "test: add `bad-txns-prevout-null` test to mempool_accept.py",
      "tree": {
        "sha": "023050e6a48efef100c79f805d01cb94821609a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/023050e6a48efef100c79f805d01cb94821609a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa0a5bb70d77739d43d5a9ceae78fb0c6fafd435"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3b69c55f2ca88251147c672522cf8fc5df645036",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f449586a9e39bc4fb53cb5c7a31362e47aea19b/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f449586a9e39bc4fb53cb5c7a31362e47aea19b/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
        "patch": "@@ -13,6 +13,7 @@\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n     COutPoint,\n+    CTxIn,\n     CTxOut,\n     MAX_BLOCK_BASE_SIZE,\n     MAX_MONEY,\n@@ -247,6 +248,14 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n \n+        self.log.info('A non-coinbase transaction with coinbase-like outpoint')\n+        tx = tx_from_hex(raw_tx_reference)\n+        tx.vin.append(CTxIn(COutPoint(hash=0, n=0xffffffff)))\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-prevout-null'}],\n+            rawtxs=[tx.serialize().hex()],\n+        )\n+\n         self.log.info('A coinbase transaction')\n         # Pick the input of the first tx we signed, so it has to be a coinbase tx\n         raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])"
      }
    ]
  },
  {
    "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODhiMzQ4ZGJlODI2ODljZTE3ODI2NTNjOGZkY2ViYjNiNjM2ZWI1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T06:11:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T06:11:38Z"
      },
      "message": "Merge bitcoin/bitcoin#22406: build: remove --enable-determinism configure option\n\ne46287853f3a41c3f0772d3448d8df4ea01a156f build: remove --enable-determinism configure option (fanquake)\n\nPull request description:\n\n  This was added by me a while back, with the intention of expanding what this did. That hasn't happened, and this hasn't gained much use. There's also been some discussion of some configure option fatigue, so just remove it for now. Note that `-Wl,--no-insert-timestamp` is also already used in the Guix build.\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK e46287853f3a41c3f0772d3448d8df4ea01a156f\n  jarolrod:\n    Code Review ACK e46287853f3a41c3f0772d3448d8df4ea01a156f\n\nTree-SHA512: ac976f88203eca2a49e296a98693dbe53330e0cb0e273c5ff1fcded30daeb6070cc5beeae35cf9acfdc2279cd64c274d5aeb588aef077aa9bfde39bb23570491",
      "tree": {
        "sha": "595487946ab3b9a5bf1e0c544943de38e6a63951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/595487946ab3b9a5bf1e0c544943de38e6a63951"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDj9BoACgkQLuufXMCV\nJsHBLhAAnpbpo06OhtWDVnpCvudyzC5wahhymgPD8uNloOAI1R8KqgSLkbo0VQAz\nWQMikB/KlRsCUrHrwPpOE/AaALEgnsHU8vBz2jXxSMCcoek0QRLO0VE+38ixwQEV\n48/CAlbzvKDYWrr904YNfnhbRXo9eUGqpv/tKcSTjim536v9DyFjDZ5TEsQrTMP1\n2YW1xpozaeDqDkT6uwLICVT/cNQtowOKPw9VzVkDzFouHxE+HbkA0smNZwGL4c/D\nQXxztMXTo0oMicJaSPvWyJlLKFovyjjt0Vr/1hViwbXwGea2FfTP+7ByOYbxLEks\nqgF/qUYutWpqzzYHmv9+rn/AoiGpDlqfHERlZTl8s7GTq2jHihpyB+i0Vkt+Zt11\nZp3S48pW0fcCm4jVTl09t9UEIMNLOosckfsPEnOh2tBPpgUKPO1MzGiHumX1eh/g\nAW3UejP/IVUWSW0vr+WIaGNwrugzFDgnGkoqcKKavmcH0n/GpK0hNkg/VzTHwu37\nXPp7jm56AmU3ffTSQbWhX9kTzNRJaZiMwaE9m+4N9SeVTE1FsxaGEACB67UghRYa\nwd1W1mBsrXJK0Pa/6tfDZmg7JoeD0rqgpp0d/VaMecAAhb9zKvXs0NrNSWyKNFdJ\nCnccJN8Tz1/RnZJ9mmC9XI4KSeCBFPHUzbB1TJ0IxB4qVQHpaF4=\n=Xu9Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 595487946ab3b9a5bf1e0c544943de38e6a63951\nparent a62fc35a150da584d39d7cd01ade14bbb5002fb9\nparent e46287853f3a41c3f0772d3448d8df4ea01a156f\nauthor fanquake <fanquake@gmail.com> 1625551880 +0800\ncommitter fanquake <fanquake@gmail.com> 1625551898 +0800\n\nMerge bitcoin/bitcoin#22406: build: remove --enable-determinism configure option\n\ne46287853f3a41c3f0772d3448d8df4ea01a156f build: remove --enable-determinism configure option (fanquake)\n\nPull request description:\n\n  This was added by me a while back, with the intention of expanding what this did. That hasn't happened, and this hasn't gained much use. There's also been some discussion of some configure option fatigue, so just remove it for now. Note that `-Wl,--no-insert-timestamp` is also already used in the Guix build.\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK e46287853f3a41c3f0772d3448d8df4ea01a156f\n  jarolrod:\n    Code Review ACK e46287853f3a41c3f0772d3448d8df4ea01a156f\n\nTree-SHA512: ac976f88203eca2a49e296a98693dbe53330e0cb0e273c5ff1fcded30daeb6070cc5beeae35cf9acfdc2279cd64c274d5aeb588aef077aa9bfde39bb23570491\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62fc35a150da584d39d7cd01ade14bbb5002fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62fc35a150da584d39d7cd01ade14bbb5002fb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62fc35a150da584d39d7cd01ade14bbb5002fb9"
      },
      {
        "sha": "e46287853f3a41c3f0772d3448d8df4ea01a156f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46287853f3a41c3f0772d3448d8df4ea01a156f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e46287853f3a41c3f0772d3448d8df4ea01a156f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "94f01a51a64e4f1855407ff4d99a176abcf804dc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/088b348dbe82689ce1782653c8fdcebb3b636eb5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/088b348dbe82689ce1782653c8fdcebb3b636eb5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "patch": "@@ -318,13 +318,6 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-dnl Pass compiler & linker flags that make builds deterministic\n-AC_ARG_ENABLE([determinism],\n-    [AS_HELP_STRING([--enable-determinism],\n-                    [Enable compilation flags that make builds deterministic (default is no)])],\n-    [enable_determinism=$enableval],\n-    [enable_determinism=no])\n-\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n@@ -931,12 +924,6 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n-if test x$enable_determinism = xyes; then\n-  if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n-  fi\n-fi\n-\n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n AC_CHECK_DECLS([getifaddrs, freeifaddrs],[CHECK_SOCKET],,"
      }
    ]
  },
  {
    "sha": "84dd81fb5bf7308b8070b53520266854fb6efad3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGRkODFmYjViZjczMDhiODA3MGI1MzUyMDI2Njg1NGZiNmVmYWQz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T03:41:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T07:21:17Z"
      },
      "message": "build: remove glibc backcompat requirement for Linux symbol checks",
      "tree": {
        "sha": "6825b6cc58748e051955eb2944ae90d85b24c36d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6825b6cc58748e051955eb2944ae90d85b24c36d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84dd81fb5bf7308b8070b53520266854fb6efad3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDkBG0ACgkQLuufXMCV\nJsFSwRAAgcVhEkxnBqqlau4QFojdIHNvSVse74bQ/4wKg3StM8LaDlalVawtPRLN\n/LVjJ5NxBVG98H3Bd44fhUkGlV4SdlfCFCHrUVQPSG7thLUaDq6J/njKNceLQ1RT\n9Qq5Ca46aZLD6YTRJaxhYpxBNvtouMshn3bTA4RgssP7//KDDmiK+nzUHjYG2op9\nyW/rycBVamVBQq5cndXpfbByctqpyKd8mgXImbDG5ZspfRLASPujTfhsaRzxRjWa\n7veyeQ7NPCDmgBtcVYxhc8BNQosXCzXNCAaKReN98yShoI0DbtRjfT2HVHm6mxjx\nS8GKYIfHJJ3EaV6FrUtdj4azz+r8odM7K2e5CaiiKLQclJiArdQyLFbqNdLzbSFL\nda8VMxgnV6Ipwn1GU0Hhe6z762rhBE66KCH3hdQIEhDPAItz9QEGhXSBXMvCAjWb\ndzcXZI0uraT+uY2q4dNkV64Ch5t+hL4Bhcni4EL8zA2PI5COWcDxjNmjyD25ceBl\npv+j4szzmJFqj2ocWqVr0JQN8wC3HVOJE+/Rdt0M/O9uVb0NOAj+9CLR3Ri0CDXQ\n0koRwCbJpazo74oD/dabAr7iSibsxKT39cF5CnI/mFzc+llHjUw39YbaAdcMYs0Z\nBEm+phKJhOwcNeJif7WztoKxDwfKD4g8gqWYVNLw51erIP/BVck=\n=s4rq\n-----END PGP SIGNATURE-----",
        "payload": "tree 6825b6cc58748e051955eb2944ae90d85b24c36d\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nauthor fanquake <fanquake@gmail.com> 1625542910 +0800\ncommitter fanquake <fanquake@gmail.com> 1625556077 +0800\n\nbuild: remove glibc backcompat requirement for Linux symbol checks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84dd81fb5bf7308b8070b53520266854fb6efad3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84dd81fb5bf7308b8070b53520266854fb6efad3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84dd81fb5bf7308b8070b53520266854fb6efad3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9430b778f09cdbd83cbc500b94e615d711a82205",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84dd81fb5bf7308b8070b53520266854fb6efad3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84dd81fb5bf7308b8070b53520266854fb6efad3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=84dd81fb5bf7308b8070b53520266854fb6efad3",
        "patch": "@@ -822,7 +822,7 @@ if TARGET_WINDOWS\n \t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n-if GLIBC_BACK_COMPAT\n+if TARGET_LINUX\n \t@echo \"Checking glibc back compat...\"\n \t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif"
      }
    ]
  },
  {
    "sha": "de6ca41a52d2646598daae5f4620bbe766757e21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTZjYTQxYTUyZDI2NDY1OThkYWFlNWY0NjIwYmJlNzY2NzU3ZTIx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T14:43:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T12:50:40Z"
      },
      "message": "guix: no-longer pass --enable-glibc-back-compat to Guix\n\nNow that our Guix builds are performed on glibc 2.24 and 2.27 (RISCV),\nwe no-longer need to pass the --enable-glibc-back-compat option.\n\nReplace it with --disable-threadlocal, to prevent the usage of symbols\nfrom glibc 2.18.\n\nNone of the binaries produced required symbols later than 2.17, and 2.27\n(RISCV).",
      "tree": {
        "sha": "8c07b3b0eec9c73273768e63470711fc0945c024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c07b3b0eec9c73273768e63470711fc0945c024"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de6ca41a52d2646598daae5f4620bbe766757e21",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDkUaEACgkQLuufXMCV\nJsHmbw//aW/DmHlMdQb/Xq7Oh3brECi0f3GQP2K8NzYT+pG4QOmta5Btlb7ZPlyq\nWIlCIHOsGPM9Na0BYfEFgEbw0s+ykU3R5rcbSk9BRPGnwWJh33/fAZVz2cnoAuIV\nbPWxD4yIksMvGWu1SEe3aPZEHYx3mjTh/9niRZhKEBPtRdtzUm6znxIBx5rxEiho\nc8Fpwl7gsuwp6gsIjWfXageDLG0hHnlZMQH+iiuR59FCHMYn5n2EzzkYRppkUe03\n9Tl5eS0Ce1ba5/ggeZPfCU2mnfE8y/74D5HXJYTViQnche0PN1d6f+O8nQogYfnF\nVotQlIMsq+v8UcO7ORVPXX4Sw/b48LaHlSHB/1Hhr4rOOTCvSvNocwriirZCVjHG\neeJVTawb6DLopMsWzRWPf5rBWf5NaimK81Z6R78ds7pN1i5irbkHCj/DWFV55k4P\nscDiQIaWBVmBgZcUSyjSu/ElqdDTj2Oxvf646PMmUEuLSvcn+OCDJKSPwcw7LsgP\nN2iWjodrTDFXT9DYjh16/lUq/bp0p/fo1lp4EEUVJZ15N59zGTAFGNE375GVB6cc\njKBI/NZqA1hr1IOvM72qKmsxZiiIE3Zqttj2EJJ5szZw+HrcgYZtVXZ+faZPRzey\nJbnVc6A9tj7XxpV/lsOr1xxuEbPbHBA6AvrD1U4lhsJRfQrpgg8=\n=9mZj\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c07b3b0eec9c73273768e63470711fc0945c024\nparent 84dd81fb5bf7308b8070b53520266854fb6efad3\nauthor fanquake <fanquake@gmail.com> 1625496201 +0800\ncommitter fanquake <fanquake@gmail.com> 1625575840 +0800\n\nguix: no-longer pass --enable-glibc-back-compat to Guix\n\nNow that our Guix builds are performed on glibc 2.24 and 2.27 (RISCV),\nwe no-longer need to pass the --enable-glibc-back-compat option.\n\nReplace it with --disable-threadlocal, to prevent the usage of symbols\nfrom glibc 2.18.\n\nNone of the binaries produced required symbols later than 2.17, and 2.27\n(RISCV).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6ca41a52d2646598daae5f4620bbe766757e21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de6ca41a52d2646598daae5f4620bbe766757e21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6ca41a52d2646598daae5f4620bbe766757e21/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84dd81fb5bf7308b8070b53520266854fb6efad3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84dd81fb5bf7308b8070b53520266854fb6efad3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84dd81fb5bf7308b8070b53520266854fb6efad3"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02ef8009639f6468c79cb47d5fabcbd824240160",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de6ca41a52d2646598daae5f4620bbe766757e21/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de6ca41a52d2646598daae5f4620bbe766757e21/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=de6ca41a52d2646598daae5f4620bbe766757e21",
        "patch": "@@ -240,7 +240,7 @@ mkdir -p \"$OUTDIR\"\n # CONFIGFLAGS\n CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n case \"$HOST\" in\n-    *linux*) CONFIGFLAGS+=\" --enable-glibc-back-compat\" ;;\n+    *linux*) CONFIGFLAGS+=\" --disable-threadlocal\" ;;\n esac\n \n # CFLAGS\n@@ -260,6 +260,13 @@ case \"$HOST\" in\n     *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n esac\n \n+# Using --no-tls-get-addr-optimize retains compatibility with glibc 2.17, by\n+# avoiding a PowerPC64 optimisation available in glibc 2.22 and later.\n+# https://sourceware.org/binutils/docs-2.35/ld/PowerPC64-ELF64.html\n+case \"$HOST\" in\n+    *powerpc64*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,--no-tls-get-addr-optimize\" ;;\n+esac\n+\n case \"$HOST\" in\n     powerpc64-linux-*|riscv64-linux-*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,-z,noexecstack\" ;;\n esac"
      }
    ]
  },
  {
    "sha": "4516e5ec9223486fe2eba7f4320d786d074a58fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTE2ZTVlYzkyMjM0ODZmZTJlYmE3ZjQzMjBkNzg2ZDA3NGE1OGZk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T14:48:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T12:50:46Z"
      },
      "message": "lint: exclude Guix patches from spell-checking\n\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "f10972e4c61f674734daa4d4faa11c928d9add9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f10972e4c61f674734daa4d4faa11c928d9add9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4516e5ec9223486fe2eba7f4320d786d074a58fd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDkUacACgkQLuufXMCV\nJsGwPQ//f+Ig0OBLGMfagHwqE/xeq06rR6/Xdv6U237uskYq0OtyG8E39sq5D+uz\nCTYz4HZ8hNN2lzZ+N7ZRBV+0S5V3FzjspiKG9BQ9Ost0KLJPQm+HeF5KoD/CyRiR\n/UAcA/6/8hNSuVPdHvKKLWVsGv6OYRnPlyRoPT7HNyX6XMwBTO1ILeFPxVIR6sDS\nbUSeu1pZXy209/Cu+qUc88NTI8FHB3vuMeGy2fO/nlJvwLqL1bLlkQkph9VfMVMZ\n1dKIddRAg728WvwN4WdYZ7Qe759PafWfu6hb+afkZRgP/v2SZJmcabHim8lBGyPp\nYB4zOy6a4t1YV1qS3GXgHIVzpETOSSAnluMvWvp5nUTUDOB/rOhsXJK/55a4iFcg\n87GKmtDuKQn2nX23wr+fM62G+HyGx2bb1R6di0iRvM8yfxIb0JHAnD3i6FP5/63L\nCylUVv7aIeHeIV89U0+uz+AdVca+oFYKLbliKhLpcjVE68+G3MjAahveOMJR0IG1\nY6FW0783801KZ3jSjEuUt5CJOqLVHwBBw8EuqT863O57JPzosjrad89c9LYW4VJN\n/wyoNEocxr/ORe010sKvWp8gBamWia1cmSVEXdydY+SygwYPNL+yCL7GRjUkeZr8\nvtqaRT0xEmPAw2O/Oh1vR5ohjs0w3IeZisKRWmu1WeLdiJEu3Fo=\n=ztjC\n-----END PGP SIGNATURE-----",
        "payload": "tree f10972e4c61f674734daa4d4faa11c928d9add9c\nparent de6ca41a52d2646598daae5f4620bbe766757e21\nauthor fanquake <fanquake@gmail.com> 1625496539 +0800\ncommitter fanquake <fanquake@gmail.com> 1625575846 +0800\n\nlint: exclude Guix patches from spell-checking\n\nCo-authored-by: Carl Dong <contact@carldong.me>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4516e5ec9223486fe2eba7f4320d786d074a58fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4516e5ec9223486fe2eba7f4320d786d074a58fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4516e5ec9223486fe2eba7f4320d786d074a58fd/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de6ca41a52d2646598daae5f4620bbe766757e21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6ca41a52d2646598daae5f4620bbe766757e21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de6ca41a52d2646598daae5f4620bbe766757e21"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "238fa63c45c3d804bd72c70721b0cc382f04cc23",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4516e5ec9223486fe2eba7f4320d786d074a58fd/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4516e5ec9223486fe2eba7f4320d786d074a58fd/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=4516e5ec9223486fe2eba7f4320d786d074a58fd",
        "patch": "@@ -15,6 +15,6 @@ if ! command -v codespell > /dev/null; then\n fi\n \n IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n-if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\"); then\n+if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\" \":(exclude)contrib/guix/patches\"); then\n     echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\"\n fi"
      }
    ]
  },
  {
    "sha": "15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWZjOWEwMjk5MDkxYmZlYjMzNzBmOTkzYWQ5NWZmNjM4ZjZiYThj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-05T15:05:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T12:50:47Z"
      },
      "message": "guix: add additional documentation to patches",
      "tree": {
        "sha": "4bd00d19e65199ecd77d05df01fc10f052a0b204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bd00d19e65199ecd77d05df01fc10f052a0b204"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDkUacACgkQLuufXMCV\nJsELYQ//Y0GJewTrEV/UAWlDgZcBNJdGaxvaX5W/cTZOWsfWoDDuLJZY67XusGbJ\ntT8d2zTBUuGKMFdeNNo4DmSsvzhLs/c/KSjoxgxR9S2pp3CwjHSKBAqD+3zsUINo\nMW651UKIHFMBMQnEZpMb+bvguVbcUU7glUXWgNGuOYLIpYJSMDK9lRjYhrheZx9C\n5QMYhJ1A9NvEzVzMyw8mw6PJ/RJCv1pzHMVydy+cMb7lWTPvlSA2ldtwLNsAoEA0\nBVrUPBurM3eobXfZgsyJxsySHBneac0yZvOOiqbHkwVF/QC4jOpAqTfLOCmM0ZF5\n5LPx4YDRk6WDIiLdfInbm4mwjl5z0+6ymrumsZk9QNS5zH7ydg6/kzfccHyBdymm\njoXNyhhguPcN4UZfT9m0+oUeM9xKr65wBMszTdPBDyl9hAQKtGRd26mIVDUrsbVW\nnLQc7vnjiU0r8xtMs1QrZPTojNcueiStnjS1KeVTr+P8UrW3tWvQw0rL9l2oCTn1\nlVBVP9vAswuGeW0TTVEwJoijs9kc+MjlPF+sbB74NqPkoCEc4ftZ4npPjMklw1Yx\nZUGdG/ZPik4paofyO8wuNILz0M2Ymnx5YBXpdXPE+GLJTCxvQljsSwxgi6On9LB0\n8HmQu+YKDVygmL6RbQWsxbyh79g8VRYlCgk6HG0u0863g4amvdI=\n=nhLh\n-----END PGP SIGNATURE-----",
        "payload": "tree 4bd00d19e65199ecd77d05df01fc10f052a0b204\nparent 4516e5ec9223486fe2eba7f4320d786d074a58fd\nauthor fanquake <fanquake@gmail.com> 1625497530 +0800\ncommitter fanquake <fanquake@gmail.com> 1625575847 +0800\n\nguix: add additional documentation to patches\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4516e5ec9223486fe2eba7f4320d786d074a58fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4516e5ec9223486fe2eba7f4320d786d074a58fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4516e5ec9223486fe2eba7f4320d786d074a58fd"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f327c464f3ec3ca38140300e7e099bbe20afd6d3",
        "filename": "contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch?ref=15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "patch": "@@ -1,3 +1,11 @@\n+guix: repro: Sort find output in libtool for gcc-8\n+\n+Otherwise the resulting .a static libraries (e.g. libstdc++.a) will not\n+be reproducible and end up making the Bitcoin binaries non-reproducible\n+as well.\n+\n+See: https://reproducible-builds.org/docs/archives/#gnu-libtool\n+\n diff --git a/gcc/configure b/gcc/configure\n index 97ba7d7d69c..e37a96f0c0c 100755\n --- a/gcc/configure"
      },
      {
        "sha": "5c4d0c6ebe19699444a222e7fc0ec8bdd175ea3a",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=a68ba2f3cd3cbe32c1f31e13c20ed13487727b32\n+\n commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n Date:   Wed Oct 18 17:26:23 2017 +0100"
      },
      {
        "sha": "11fe7fdc99c05c89c01ca7d2278be2d17f109aef",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=fc3e1337be1c6935ab58bd13520f97a535cf70cc\n+\n commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n Author: Florian Weimer <fweimer@redhat.com>\n Date:   Wed Sep 21 10:45:32 2016 +0200"
      },
      {
        "sha": "d6217157ee57e9b67af70db0fe22964caa34afb4",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=0b9c84906f653978fb8768c7ebd0ee14a47e662e\n+\n From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n From: \"H.J. Lu\" <hjl.tools@gmail.com>\n Date: Mon, 31 Dec 2018 09:26:42 -0800"
      },
      {
        "sha": "f58406a7a08901a413dec1223f1f881e04de956d",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fc9a0299091bfeb3370f993ad95ff638f6ba8c/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "patch": "@@ -1,3 +1,6 @@\n+https://github.com/kichik/nsis/pull/13\n+https://sourceforge.net/p/nsis/code/7248/\n+\n diff --git a/SConstruct b/SConstruct\n index e8252c9..41786f2 100755\n --- a/SConstruct"
      }
    ]
  },
  {
    "sha": "797b3ed9090030f32fade81803b580562d4a90a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTdiM2VkOTA5MDAzMGYzMmZhZGU4MTgwM2I1ODA1NjJkNGE5MGEz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T03:44:37Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-06T12:50:47Z"
      },
      "message": "script: remove gitian reference from symbol-check.py",
      "tree": {
        "sha": "5582e7267abdc25a1cd6a9e69ea099d7c776653b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5582e7267abdc25a1cd6a9e69ea099d7c776653b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/797b3ed9090030f32fade81803b580562d4a90a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDkUacACgkQLuufXMCV\nJsHYFg/+MO0ehK9EW609pdw3CeoOaLAaYdv8lseUnv5w7yQ/Ys6NoVJzUmDsd2FJ\nTz3QEZBiOOKXGWF67hKFU0PtccgQgfFGyHyPl7jcrLGTlMWM94rTB6XWGzud+bil\nvHKyJSD//BSTf5ZLcEB9KJoKDCDuIooy+oyJE2AKo8JI12opY55HKUL9FG2RIik/\n3DYgw8T1YvKMZ0pwWfBsOfsELV6gIvQ5fOHP43re6EU2IIyHgGR3XXrUUHXPUW/V\nCKHVgXamQ/JoC/XDRlziHfsU+G30qumtBL3okow/bgSyhjpcSkQ/w4yXw1EtPa3P\nC7rzG4J7fNlfypuhfZ4JCRrOFyc5rcrAua9rll6QzypUDgjDyseFBygDHK4WNSWO\nE0NDCMaO4ldf+tCXu5fRrQG1yncgGT/H1OQm/+VsNHb+9619Sq/s/lbaVsOvEynB\nrMi/6HWlr0Z+PUMga28ZxKPE7UPhe5VLXJBIoegNsa7zf1EZsbLberhU07BGnvdn\n2IFl2k9EiUdtGWMuWNdZjdYVG+DNWQkpL9C1qVFBzDZwnIeCMMSvOr1wGInPrEiA\nPG8xaRB5hqGKOD3I5oN6JUjKKGJb6L71MTWPATNH0ktQSeFjb2unbA5aO3DMBmQ8\nitugROhGHDRG5h/Cb92GOpqupmB47pgwObBWImIkt0pjZHmQ4W8=\n=1Fsf\n-----END PGP SIGNATURE-----",
        "payload": "tree 5582e7267abdc25a1cd6a9e69ea099d7c776653b\nparent 15fc9a0299091bfeb3370f993ad95ff638f6ba8c\nauthor fanquake <fanquake@gmail.com> 1625543077 +0800\ncommitter fanquake <fanquake@gmail.com> 1625575847 +0800\n\nscript: remove gitian reference from symbol-check.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/797b3ed9090030f32fade81803b580562d4a90a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/797b3ed9090030f32fade81803b580562d4a90a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/797b3ed9090030f32fade81803b580562d4a90a3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15fc9a0299091bfeb3370f993ad95ff638f6ba8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15fc9a0299091bfeb3370f993ad95ff638f6ba8c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "407c0a2d722b670f1032b9d135260ad40530ce8c",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/797b3ed9090030f32fade81803b580562d4a90a3/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/797b3ed9090030f32fade81803b580562d4a90a3/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=797b3ed9090030f32fade81803b580562d4a90a3",
        "patch": "@@ -3,12 +3,12 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that the executables produced by gitian only contain\n-certain symbols and are only linked against allowed libraries.\n+A script to check that release executables only contain certain symbols\n+and are only linked against allowed libraries.\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../path/to/binaries -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n import sys"
      }
    ]
  },
  {
    "sha": "fa84caebc7b647d9483262b6634bfe6b02b90a69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg0Y2FlYmM3YjY0N2Q5NDgzMjYyYjY2MzRiZmU2YjAyYjkwYTY5",
    "commit": {
      "author": {
        "name": "Brian Liotti",
        "email": "bliotti@protonmail.com",
        "date": "2021-07-06T13:32:37Z"
      },
      "committer": {
        "name": "Brian Liotti",
        "email": "bliotti@protonmail.com",
        "date": "2021-07-06T13:32:37Z"
      },
      "message": "doc: added info to bitcoin.conf doc",
      "tree": {
        "sha": "8a7d456bd021c0e2f3c140659ae68274b684714e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a7d456bd021c0e2f3c140659ae68274b684714e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEle5g5ZkqgxVivtqmdUaYZxZ/+58FAmDkW3UACgkQdUaYZxZ/\n+5+nRQ//YDc49sUVi89uBZ6gTfFYsQ+iT0YYVmjxpmoOsmhe0qiNsdVhjtYsFx6U\nwWJvYu8t1O+3KXFqHhUu5zHVY6fQ6IgDTC/k6mWi9Ql/gKbWqH/dXH3fB2SGvcXA\nRF6T4wFEvArrhc2Gl2PflN4mEowfZ0JcxDje2ODhz1aoyp1H2LnbEmKT3POXrYWu\nzt30ennTu2CJoKplyhEzzo/Kg9/PVgJZE2XBYgUurNQukZYSuXUojrdUHbqQ9Opx\n5xe7pX0M5A3pF1fuP8dgH3j2yVvMuexvnn6UgYPfnVxQwuqi1/fYzsIuBynBrsDI\ndb8ExNZcVL1NYaZzzMNTv+In8NDoARS1DzDdeB1kCqz/GOSvrE3KG0V2Z7qW/xss\nb5FMuas5kLNRdg7ZCOLpyAmjlVmPlvVuJFoz7HDxBIK+JUTnj2l3INrLTH8dTlK+\nUX9IBJUmBEN3s5OFzgoUX5btx8Zpr+Bs/+8YNuuO0DrXnaAOGxD6qeDNRhHBnQn4\n/HHSjmHec6UbgpGSZZST3e0l5WXfXXK3v3yBPs1eMoLUysVTtelxrAUGmtqm2Qqk\nEqektUW+OkCJZ9C71J27UiIsrCZY8JE235noCSwVMq3bXPFVWgmIEijYsLAFqnoR\nW8l7kF+gEnt82wtAMdcYZqMAhb3eyva/4w3XspETGij0JYBszVI=\n=1OJh\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a7d456bd021c0e2f3c140659ae68274b684714e\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nauthor Brian Liotti <bliotti@protonmail.com> 1625578357 -0400\ncommitter Brian Liotti <bliotti@protonmail.com> 1625578357 -0400\n\ndoc: added info to bitcoin.conf doc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa84caebc7b647d9483262b6634bfe6b02b90a69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69/comments",
    "author": {
      "login": "bliotti",
      "id": 29641364,
      "node_id": "MDQ6VXNlcjI5NjQxMzY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/29641364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bliotti",
      "html_url": "https://github.com/bliotti",
      "followers_url": "https://api.github.com/users/bliotti/followers",
      "following_url": "https://api.github.com/users/bliotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/bliotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bliotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bliotti/subscriptions",
      "organizations_url": "https://api.github.com/users/bliotti/orgs",
      "repos_url": "https://api.github.com/users/bliotti/repos",
      "events_url": "https://api.github.com/users/bliotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bliotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bliotti",
      "id": 29641364,
      "node_id": "MDQ6VXNlcjI5NjQxMzY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/29641364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bliotti",
      "html_url": "https://github.com/bliotti",
      "followers_url": "https://api.github.com/users/bliotti/followers",
      "following_url": "https://api.github.com/users/bliotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/bliotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bliotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bliotti/subscriptions",
      "organizations_url": "https://api.github.com/users/bliotti/orgs",
      "repos_url": "https://api.github.com/users/bliotti/repos",
      "events_url": "https://api.github.com/users/bliotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bliotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c9035c45b6fc258bd12d4c1b11a925b00f5942a",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa84caebc7b647d9483262b6634bfe6b02b90a69/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa84caebc7b647d9483262b6634bfe6b02b90a69/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=fa84caebc7b647d9483262b6634bfe6b02b90a69",
        "patch": "@@ -4,6 +4,8 @@ The configuration file is used by `bitcoind`, `bitcoin-qt` and `bitcoin-cli`.\n \n All command-line options (except for `-?`, `-help`, `-version` and `-conf`) may be specified in a configuration file, and all configuration file options (except for `includeconf`) may also be specified on the command line. Command-line options override values set in the configuration file and configuration file options override values set in the GUI.\n \n+Changes to the configuration file while `bitcoind` or `bitcoin-qt` is running only take effect after restarting.\n+\n ## Configuration File Format\n \n The configuration file is a plain text file and consists of `option=value` entries, one per line. Leading and trailing whitespaces are removed."
      }
    ]
  },
  {
    "sha": "566357f8f7471f74729297868917aa32f6d3c390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjYzNTdmOGY3NDcxZjc0NzI5Mjk3ODY4OTE3YWEzMmY2ZDNjMzkw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-01T10:48:51Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-06T15:28:15Z"
      },
      "message": "refactor: move GetRandomNodeEvictionCandidates() to test utilities\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "tree": {
        "sha": "1ae0de3c612f40af7af9cbc76adc88f6935ec48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ae0de3c612f40af7af9cbc76adc88f6935ec48f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/566357f8f7471f74729297868917aa32f6d3c390",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDkdpAACgkQT1chs9Dj\nkh1yABAApNw3iZEQNUUxZJrTAH/oozi/yubDKcDvWM9ihcfbGf4UKX3JQ1ZRkkUW\n9Ahei/hSUcJvnmKU4+Qy5sKz1+SKto0Qd0pda4qanfS2W+0Jc9owDsPjPsSWx3tk\np+65/H1PtkiPKHQmHxFC6kgWXsobwdW4WDgOYowrmbQlGi9EkQl+YzfRV/Vf1zIG\nAWep/8dx74EiOjGOeEsvw1e9WY2ydCIdH2wdVmbgkl571ahoNhbI1OjtvkKd59xE\n1dNCNuM44vkmcOSayB2TMt3BNH6xozdh4WMjeCU/qUF4NJnyAbCFCl6YOaeLwFQm\nlAHFB5JCgkm2RblM6Ttp2aFnQ2jvoCnhMD1L7gOd7fP8Hu6bQ0WMLNy3joNEUsBi\njqCGycNY4cDcX5x5JNjKHeD+L5wpYwgA1BSoc0Ata3iJ9rCWMOUelqHOqZAatoBC\n2BG1EORcYE2QXAW5C45MXZFZ2xjwKfrxEnlYMTxX6mfHrmAZdkHICXD4UI5GDogq\nnawy8qaA4wWPrmy5CwgCmDEera7kjQ/SxxZhz/NOe4+OFgmOhKl6vZJM7t/kXwi2\nFODnGEd0DbvD1VcU3RKkRKpyCtTWAnJlJnLRkeyNRY/bK8V/DmljYnQlncKQDf6I\nMDMv9kVWnXJWOSOeYDEwIPknWgXFnYJQRpTl/xSw7Ic1uJ+A4Aw=\n=Ssmz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICgTAjWfVX9JI54MCE+PCvhFRL0guAia9Vvcz4R282fDCP/wEAUpgjGId9Ry\nwIxjh9iYW2EI8SBFjcuZgdOfCDZbtc1Vt7bbx6/16iYcE4WHoHJCDSet8wjxBGDk\ndpLwCJJxi25sa8XuAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BAnwv7YNAOQaKP2eyDal6dTCPEEYOR2kvAI\nrzpNP7tgmV8Ag9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BBJxTme/Au5IWKknLFZpvFQCPEEYOR2kfAIDzILc4Fe\nx/sAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nEJhbr47f16WiUyAeTpdvh+cI8QRg5HaR8Aj6BZwsvb/gSwCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1ae0de3c612f40af7af9cbc76adc88f6935ec48f\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nauthor Jon Atack <jon@atack.com> 1625136531 +0200\ncommitter Jon Atack <jon@atack.com> 1625585295 +0200\n\nrefactor: move GetRandomNodeEvictionCandidates() to test utilities\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566357f8f7471f74729297868917aa32f6d3c390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/566357f8f7471f74729297868917aa32f6d3c390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566357f8f7471f74729297868917aa32f6d3c390/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 27,
      "deletions": 22
    },
    "files": [
      {
        "sha": "5eb280b498945bf5d040d484cd1d276fb548a29e",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/566357f8f7471f74729297868917aa32f6d3c390/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/566357f8f7471f74729297868917aa32f6d3c390/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=566357f8f7471f74729297868917aa32f6d3c390",
        "patch": "@@ -17,28 +17,6 @@\n \n BOOST_FIXTURE_TEST_SUITE(net_peer_eviction_tests, BasicTestingSetup)\n \n-std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n-{\n-    std::vector<NodeEvictionCandidate> candidates;\n-    for (int id = 0; id < n_candidates; ++id) {\n-        candidates.push_back({\n-            /* id */ id,\n-            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n-            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* fRelevantServices */ random_context.randbool(),\n-            /* fRelayTxes */ random_context.randbool(),\n-            /* fBloomFilter */ random_context.randbool(),\n-            /* nKeyedNetGroup */ random_context.randrange(100),\n-            /* prefer_evict */ random_context.randbool(),\n-            /* m_is_local */ random_context.randbool(),\n-            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n-        });\n-    }\n-    return candidates;\n-}\n-\n // Create `num_peers` random nodes, apply setup function `candidate_setup_fn`,\n // call ProtectEvictionCandidatesByRatio() to apply protection logic, and then\n // return true if all of `protected_peer_ids` and none of `unprotected_peer_ids`"
      },
      {
        "sha": "28d79670786bbbba3ff926459a7eb5704b27cfc0",
        "filename": "src/test/util/net.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/566357f8f7471f74729297868917aa32f6d3c390/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/566357f8f7471f74729297868917aa32f6d3c390/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=566357f8f7471f74729297868917aa32f6d3c390",
        "patch": "@@ -6,6 +6,9 @@\n \n #include <chainparams.h>\n #include <net.h>\n+#include <span.h>\n+\n+#include <vector>\n \n void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n {\n@@ -37,3 +40,25 @@ bool ConnmanTestMsg::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) con\n     NodeReceiveMsgBytes(node, ser_msg.data, complete);\n     return complete;\n }\n+\n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n+        });\n+    }\n+    return candidates;\n+}"
      },
      {
        "sha": "939ec322ede73d21887e91dbd420afaf356b4b11",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/566357f8f7471f74729297868917aa32f6d3c390/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/566357f8f7471f74729297868917aa32f6d3c390/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=566357f8f7471f74729297868917aa32f6d3c390",
        "patch": "@@ -141,4 +141,6 @@ class StaticContentsSock : public Sock\n     mutable size_t m_consumed;\n };\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context);\n+\n #endif // BITCOIN_TEST_UTIL_NET_H"
      }
    ]
  },
  {
    "sha": "1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWRkZGY1ZGU0MWIwNTMwNDljZTBiMGJkYmMzOWMyZmJiNzQzYzQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-07-06T17:37:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-07-06T17:41:43Z"
      },
      "message": "Avoid GCC 7.1 ABI change warning in guix build",
      "tree": {
        "sha": "59a5d271f3e99cf6a7ae8a61dae2e252bf537553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a5d271f3e99cf6a7ae8a61dae2e252bf537553"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edddf5de41b053049ce0b0bdbc39c2fbb743c40/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5528b76b50f3ffded73b5a3c733ef7a6bb50e1ea",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1edddf5de41b053049ce0b0bdbc39c2fbb743c40/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1edddf5de41b053049ce0b0bdbc39c2fbb743c40/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
        "patch": "@@ -254,6 +254,10 @@ esac\n # CXXFLAGS\n HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n \n+case \"$HOST\" in\n+    arm-linux-gnueabihf) HOST_CXXFLAGS=\"${HOST_CXXFLAGS} -Wno-psabi\" ;;\n+esac\n+\n # LDFLAGS\n case \"$HOST\" in\n     *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;"
      }
    ]
  },
  {
    "sha": "692b78793bda5a06bd0f7907d6f62286f53c8e74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTJiNzg3OTNiZGE1YTA2YmQwZjc5MDdkNmY2MjI4NmY1M2M4ZTc0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T06:44:22Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T06:45:41Z"
      },
      "message": "Merge bitcoin/bitcoin#22360: doc: Remove unused section from release process\n\nfa051d3e5e50fb5726fc25464fef348255599e1e doc: Remove unused section from release process (MarcoFalke)\n\nPull request description:\n\n  The section does not apply to us, because it is being done by the maintainers of the `bitcoin.org` website, see https://github.com/bitcoin-dot-org/Bitcoin.org/issues/3641#issuecomment-819586576 . Documentation about the process is in their repo: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n\nACKs for top commit:\n  jarolrod:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n  Zero-1729:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n  fanquake:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n\nTree-SHA512: eadc192958bb0d1009ad94c2ec79087b87514e3d19e2e6d759440392fa4abc432c512ba60692018e789c822a98a515a5f9a42966de4f8fe6b0a8b99470a76b5c",
      "tree": {
        "sha": "a99a8416a93bf451010648e9b34d4f0ed4db012f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a99a8416a93bf451010648e9b34d4f0ed4db012f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/692b78793bda5a06bd0f7907d6f62286f53c8e74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlTZUACgkQLuufXMCV\nJsF2dg//Wn3eQZSXAGaiplP5mbkklCZZuqfh69YUed8U3D0vW32Oei17vxrx7PmW\n+TSGaPRXTQKEAiY/c+lzGLe+P3UcP3AcIG7b4s1rwT/Huz/PGXB+Rngfs7FHpCP7\n8beqig+Jp3lN3V9s3jnlsXmc1SQiK6nnh2X6fuDhEnnPYTejy0fIm2W/00AopaKc\nw5rQbCr+I0rODeCra24yHCxcReJVDYAduGaSrPGYqqQAvpwF3vzK96VqeC2LhwgD\nMwQwXS0t9iaxp9Q7xLOdhFGu6Or9Di2SASB51VEq5oOrlS3YbWKDPKYs2/rdHAwJ\nNp2ub6EymbSmJ3uB7+JTHPxCUlxNgUGf2oRre1e+NwdMb3pM8TKVKDR63dPVTlxg\nwKZkyWt8jGnqlxHEy8wdW8ozA8gZCYOg7C7EsEa9KUw0lgvUFheYR+I9sjGBtimz\nICKXYA/l2ZX7RI+VaetifyFLJeSnxq2RqlC0acmN6cmiCFWAVBmyXrsstTJpgr1s\nI0hVl0E/nZn06Eczf5THU8FYOrcfFjop/C9NfEMnDvuC8ylTXfhRxqOb8264VILM\nX1EJUVdgNh6FQtBKbOfPGcYBJlU1rNc6HPVYosFKpmKklq8ESUNgE0WkYREviyVt\nX729E5iu7fC7iqIJiRa/TPVAU4uuwF5NfCYcR7HO7UZqdTOw2pY=\n=uLAd\n-----END PGP SIGNATURE-----",
        "payload": "tree a99a8416a93bf451010648e9b34d4f0ed4db012f\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nparent fa051d3e5e50fb5726fc25464fef348255599e1e\nauthor fanquake <fanquake@gmail.com> 1625640262 +0800\ncommitter fanquake <fanquake@gmail.com> 1625640341 +0800\n\nMerge bitcoin/bitcoin#22360: doc: Remove unused section from release process\n\nfa051d3e5e50fb5726fc25464fef348255599e1e doc: Remove unused section from release process (MarcoFalke)\n\nPull request description:\n\n  The section does not apply to us, because it is being done by the maintainers of the `bitcoin.org` website, see https://github.com/bitcoin-dot-org/Bitcoin.org/issues/3641#issuecomment-819586576 . Documentation about the process is in their repo: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n\nACKs for top commit:\n  jarolrod:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n  Zero-1729:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n  fanquake:\n    ACK fa051d3e5e50fb5726fc25464fef348255599e1e\n\nTree-SHA512: eadc192958bb0d1009ad94c2ec79087b87514e3d19e2e6d759440392fa4abc432c512ba60692018e789c822a98a515a5f9a42966de4f8fe6b0a8b99470a76b5c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692b78793bda5a06bd0f7907d6f62286f53c8e74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/692b78793bda5a06bd0f7907d6f62286f53c8e74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692b78793bda5a06bd0f7907d6f62286f53c8e74/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      },
      {
        "sha": "fa051d3e5e50fb5726fc25464fef348255599e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa051d3e5e50fb5726fc25464fef348255599e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa051d3e5e50fb5726fc25464fef348255599e1e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 4,
      "deletions": 19
    },
    "files": [
      {
        "sha": "546169df8d3898e92f8f869a3f19475044f34e10",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 19,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692b78793bda5a06bd0f7907d6f62286f53c8e74/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692b78793bda5a06bd0f7907d6f62286f53c8e74/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=692b78793bda5a06bd0f7907d6f62286f53c8e74",
        "patch": "@@ -278,7 +278,7 @@ The `*-debug*` files generated by the gitian build contain debug symbols\n for troubleshooting by developers. It is assumed that anyone that is interested\n in debugging can run gitian to generate the files for themselves. To avoid\n end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n - GPG-sign it, delete the unsigned file:\n ```\n@@ -288,32 +288,17 @@ rm SHA256SUMS\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n+- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n   into `/var/www/bin/bitcoin-core-${VERSION}`\n \n - A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n ```bash\n transmission-show -m <torrent file>\n ```\n Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoin.org` to download the binary distribution.\n+people without access to `bitcoincore.org` to download the binary distribution.\n Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoin.org (see below for bitcoin.org update instructions).\n-\n-- Update bitcoin.org version\n-\n-  - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n-\n-      - If they have, it will have previously failed their CI\n-        checks because the final release files weren't uploaded.\n-        Trigger a CI rebuild---if it passes, merge.\n-\n-  - If they have not prepared a release, follow the Bitcoin.org release\n-    instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n-\n-  - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links.\n+bitcoincore.org.\n \n - Update other repositories and websites for new version\n "
      }
    ]
  },
  {
    "sha": "914c0cad97762b2dbc42e111a4d5daeeab9d0377",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTRjMGNhZDk3NzYyYjJkYmM0MmUxMTFhNGQ1ZGFlZWFiOWQwMzc3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-07T10:03:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-07T10:03:49Z"
      },
      "message": "Merge bitcoin/bitcoin#22399: fuzz: Rework CTxDestination fuzzing\n\nfabf17056c1046c6ac7fa5d140125050b7a2b0e0 fuzz: Move CTxDestination fuzzing to script fuzz target (MarcoFalke)\nfa42800a51919bb50a1000ac4f58847e6a7092a3 fuzz: Simplify CTxDestination fuzzing in the script target (MarcoFalke)\nfab99865c0e62468a1b55d7e467398cc2343121b fuzz: Improve ConsumeTxDestination (MarcoFalke)\nfa40c0964b751683774b79da4b72d330a9ff87e2 fuzz: Move ConsumeTxDestination to cpp file (MarcoFalke)\n\nPull request description:\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fabf17056c1046c6ac7fa5d140125050b7a2b0e0\n\nTree-SHA512: afd2cf384d04a810c0c462c6d80849bd0fefd017d7acac877f64f2bffae3fc8d687701bc479e67a727a05f43431a17cb4ccaf09c6b3c68106562c94b7ed19250",
      "tree": {
        "sha": "8bbc44f647fe335eb54f95fce909ca7085f5f37c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bbc44f647fe335eb54f95fce909ca7085f5f37c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/914c0cad97762b2dbc42e111a4d5daeeab9d0377",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgXtQv8CC+VNMOHyDw5TI0GJ9H2q55XK/LqLlqd0hkZds12e5AUxbekQJTjm0R6\npKroTlEvIAKfJ8hUaN8i3E/vA6+z1SdUjVF4/fboQ/hQQxduv5LALyqHyq2plx/a\nWgo+rzxCdw1mCgKY30tAWjvVm9v38gVu0pQLB8IKuCPaZ+xew+gH+cPFC3o7K27V\nKTcaqcZsn8zCxphUyuguDT4zFPOnIgt16i5VINtJZ5/vx60w2qVF7vxmihXvxzoh\ndUvPHooWaDmYM0adeCK6DNe0VhvI+CpoSW3od2O5LdR1PKSRAbODJQaU4jKLWE6t\nCJxLGmYNB+rlDZ5ysuQ/0jHRWv1ZgvFcF4hj462B/cmHcZKsBUlAsKNBItpacQgh\n+vYgmZH682+m4XXUDdA7MLyls3XJHFCbdpUK24/uOjc9ge9O46EsIhxXGDKp5ruX\nfHplWyfR/F+q4A6H/vl+sNRz2UpN6b7mFSDNjQqDJwjKZpVgkNHb7XM4LR59Yayg\naGxMCpGI\n=mUxN\n-----END PGP SIGNATURE-----",
        "payload": "tree 8bbc44f647fe335eb54f95fce909ca7085f5f37c\nparent 692b78793bda5a06bd0f7907d6f62286f53c8e74\nparent fabf17056c1046c6ac7fa5d140125050b7a2b0e0\nauthor MarcoFalke <falke.marco@gmail.com> 1625652223 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625652229 +0200\n\nMerge bitcoin/bitcoin#22399: fuzz: Rework CTxDestination fuzzing\n\nfabf17056c1046c6ac7fa5d140125050b7a2b0e0 fuzz: Move CTxDestination fuzzing to script fuzz target (MarcoFalke)\nfa42800a51919bb50a1000ac4f58847e6a7092a3 fuzz: Simplify CTxDestination fuzzing in the script target (MarcoFalke)\nfab99865c0e62468a1b55d7e467398cc2343121b fuzz: Improve ConsumeTxDestination (MarcoFalke)\nfa40c0964b751683774b79da4b72d330a9ff87e2 fuzz: Move ConsumeTxDestination to cpp file (MarcoFalke)\n\nPull request description:\n\nACKs for top commit:\n  practicalswift:\n    cr ACK fabf17056c1046c6ac7fa5d140125050b7a2b0e0\n\nTree-SHA512: afd2cf384d04a810c0c462c6d80849bd0fefd017d7acac877f64f2bffae3fc8d687701bc479e67a727a05f43431a17cb4ccaf09c6b3c68106562c94b7ed19250\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914c0cad97762b2dbc42e111a4d5daeeab9d0377",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/914c0cad97762b2dbc42e111a4d5daeeab9d0377",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914c0cad97762b2dbc42e111a4d5daeeab9d0377/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "692b78793bda5a06bd0f7907d6f62286f53c8e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692b78793bda5a06bd0f7907d6f62286f53c8e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692b78793bda5a06bd0f7907d6f62286f53c8e74"
      },
      {
        "sha": "fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabf17056c1046c6ac7fa5d140125050b7a2b0e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabf17056c1046c6ac7fa5d140125050b7a2b0e0"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 63,
      "deletions": 77
    },
    "files": [
      {
        "sha": "e28e2feb0a20c8d9c2d60fd810eefd15f45f3360",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "patch": "@@ -16,8 +16,6 @@\n #include <pow.h>\n #include <protocol.h>\n #include <pubkey.h>\n-#include <rpc/util.h>\n-#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n@@ -158,20 +156,6 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n \n     const CKeyID key_id{u160};\n     const CScriptID script_id{u160};\n-    // CTxDestination = CNoDestination \u222a PKHash \u222a ScriptHash \u222a WitnessV0ScriptHash \u222a WitnessV0KeyHash \u222a WitnessUnknown\n-    const PKHash pk_hash{u160};\n-    const ScriptHash script_hash{u160};\n-    const WitnessV0KeyHash witness_v0_key_hash{u160};\n-    const WitnessV0ScriptHash witness_v0_script_hash{u256};\n-    const std::vector<CTxDestination> destinations{pk_hash, script_hash, witness_v0_key_hash, witness_v0_script_hash};\n-    const SigningProvider store;\n-    for (const CTxDestination& destination : destinations) {\n-        (void)DescribeAddress(destination);\n-        (void)EncodeDestination(destination);\n-        (void)GetKeyForDestination(store, destination);\n-        (void)GetScriptForDestination(destination);\n-        (void)IsValidDestination(destination);\n-    }\n \n     {\n         CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);"
      },
      {
        "sha": "f58bf8b316db233e205b844ab33a390a95536a69",
        "filename": "src/test/fuzz/key_io.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key_io.cpp?ref=914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "patch": "@@ -4,9 +4,6 @@\n \n #include <chainparams.h>\n #include <key_io.h>\n-#include <rpc/util.h>\n-#include <script/signingprovider.h>\n-#include <script/standard.h>\n #include <test/fuzz/fuzz.h>\n \n #include <cassert>\n@@ -39,12 +36,4 @@ FUZZ_TARGET_INIT(key_io, initialize_key_io)\n     if (ext_pub_key.pubkey.size() == CPubKey::COMPRESSED_SIZE) {\n         assert(ext_pub_key == DecodeExtPubKey(EncodeExtPubKey(ext_pub_key)));\n     }\n-\n-    const CTxDestination tx_destination = DecodeDestination(random_string);\n-    (void)DescribeAddress(tx_destination);\n-    (void)GetKeyForDestination(/* store */ {}, tx_destination);\n-    (void)GetScriptForDestination(tx_destination);\n-    (void)IsValidDestination(tx_destination);\n-\n-    (void)IsValidDestinationString(random_string);\n }"
      },
      {
        "sha": "950ee45d1d10f63cf2b8855447f7ab50a628279a",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "patch": "@@ -6,8 +6,10 @@\n #include <compressor.h>\n #include <core_io.h>\n #include <core_memusage.h>\n+#include <key_io.h>\n #include <policy/policy.h>\n #include <pubkey.h>\n+#include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/interpreter.h>\n #include <script/script.h>\n@@ -184,26 +186,26 @@ FUZZ_TARGET_INIT(script, initialize_script)\n     }\n \n     {\n-        WitnessUnknown witness_unknown_1{};\n-        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-        witness_unknown_1.length = witness_unknown_program_1.size();\n-        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n-\n-        WitnessUnknown witness_unknown_2{};\n-        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-        witness_unknown_2.length = witness_unknown_program_2.size();\n-        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n-\n-        (void)(witness_unknown_1 == witness_unknown_2);\n-        (void)(witness_unknown_1 < witness_unknown_2);\n-    }\n+        const CTxDestination tx_destination_1{\n+            fuzzed_data_provider.ConsumeBool() ?\n+                DecodeDestination(fuzzed_data_provider.ConsumeRandomLengthString()) :\n+                ConsumeTxDestination(fuzzed_data_provider)};\n+        const CTxDestination tx_destination_2{ConsumeTxDestination(fuzzed_data_provider)};\n+        const std::string encoded_dest{EncodeDestination(tx_destination_1)};\n+        const UniValue json_dest{DescribeAddress(tx_destination_1)};\n+        Assert(tx_destination_1 == DecodeDestination(encoded_dest));\n+        (void)GetKeyForDestination(/* store */ {}, tx_destination_1);\n+        const CScript dest{GetScriptForDestination(tx_destination_1)};\n+        const bool valid{IsValidDestination(tx_destination_1)};\n+        Assert(dest.empty() != valid);\n+\n+        Assert(valid == IsValidDestinationString(encoded_dest));\n \n-    {\n-        const CTxDestination tx_destination_1 = ConsumeTxDestination(fuzzed_data_provider);\n-        const CTxDestination tx_destination_2 = ConsumeTxDestination(fuzzed_data_provider);\n-        (void)(tx_destination_1 == tx_destination_2);\n         (void)(tx_destination_1 < tx_destination_2);\n+        if (tx_destination_1 == tx_destination_2) {\n+            Assert(encoded_dest == EncodeDestination(tx_destination_2));\n+            Assert(json_dest.write() == DescribeAddress(tx_destination_2).write());\n+            Assert(dest == GetScriptForDestination(tx_destination_2));\n+        }\n     }\n }"
      },
      {
        "sha": "ece3214ed5fcbc2ebae4ec59c48917ae20f29f10",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <pubkey.h>\n #include <test/fuzz/util.h>\n #include <test/util/script.h>\n #include <util/rbf.h>\n@@ -304,3 +305,41 @@ uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept\n                }) :\n                fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n }\n+\n+CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    CTxDestination tx_destination;\n+    const size_t call_size{CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            tx_destination = CNoDestination{};\n+        },\n+        [&] {\n+            tx_destination = PKHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = ScriptHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = WitnessV0ScriptHash{ConsumeUInt256(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n+        },\n+        [&] {\n+            tx_destination = WitnessV1Taproot{XOnlyPubKey{ConsumeUInt256(fuzzed_data_provider)}};\n+        },\n+        [&] {\n+            WitnessUnknown witness_unknown{};\n+            witness_unknown.version = fuzzed_data_provider.ConsumeIntegralInRange(2, 16);\n+            std::vector<uint8_t> witness_unknown_program_1{fuzzed_data_provider.ConsumeBytes<uint8_t>(40)};\n+            if (witness_unknown_program_1.size() < 2) {\n+                witness_unknown_program_1 = {0, 0};\n+            }\n+            witness_unknown.length = witness_unknown_program_1.size();\n+            std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n+            tx_destination = witness_unknown;\n+        })};\n+    Assert(call_size == std::variant_size_v<CTxDestination>);\n+    return tx_destination;\n+}"
      },
      {
        "sha": "9f09395a9a1d5b1b8a0ea32f81af0ce80d4de326",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 31,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914c0cad97762b2dbc42e111a4d5daeeab9d0377/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "patch": "@@ -37,14 +37,15 @@\n #include <vector>\n \n template <typename... Callables>\n-void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n+size_t CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n {\n     constexpr size_t call_size{sizeof...(callables)};\n     static_assert(call_size >= 1);\n     const size_t call_index{fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, call_size - 1)};\n \n     size_t i{0};\n     ((i++ == call_index ? callables() : void()), ...);\n+    return call_size;\n }\n \n template <typename Collection>\n@@ -178,36 +179,7 @@ template <typename WeakEnumType, size_t size>\n     return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n }\n \n-[[nodiscard]] inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    CTxDestination tx_destination;\n-    CallOneOf(\n-        fuzzed_data_provider,\n-        [&] {\n-            tx_destination = CNoDestination{};\n-        },\n-        [&] {\n-            tx_destination = PKHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = ScriptHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = WitnessV0ScriptHash{ConsumeUInt256(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n-        },\n-        [&] {\n-            WitnessUnknown witness_unknown{};\n-            witness_unknown.version = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n-            witness_unknown.length = witness_unknown_program_1.size();\n-            std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n-            tx_destination = witness_unknown;\n-        });\n-    return tx_destination;\n-}\n+[[nodiscard]] CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n template <typename T>\n [[nodiscard]] bool MultiplicationOverflow(const T i, const T j) noexcept"
      }
    ]
  },
  {
    "sha": "137f3b9ba3857b879e934a93847520ed91bc4eb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzdmM2I5YmEzODU3Yjg3OWU5MzRhOTM4NDc1MjBlZDkxYmM0ZWIy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:21:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:21:57Z"
      },
      "message": "Merge bitcoin/bitcoin#22405: build: remove --enable-glibc-back-compat from Guix build\n\n797b3ed9090030f32fade81803b580562d4a90a3 script: remove gitian reference from symbol-check.py (fanquake)\n15fc9a0299091bfeb3370f993ad95ff638f6ba8c guix: add additional documentation to patches (fanquake)\n4516e5ec9223486fe2eba7f4320d786d074a58fd lint: exclude Guix patches from spell-checking (fanquake)\nde6ca41a52d2646598daae5f4620bbe766757e21 guix: no-longer pass --enable-glibc-back-compat to Guix (fanquake)\n84dd81fb5bf7308b8070b53520266854fb6efad3 build: remove glibc backcompat requirement for Linux symbol checks (fanquake)\n\nPull request description:\n\n  Now that our Guix toolchains are based on glibc 2.24 and 2.27 (RISCV), we don't need to use the `--enable-glibc-back-compat` option to produce binaries that don't use any symbols from glibc 2.17 and 2.27 or later.\n\n  This also adds additional documentation to some Guix patches (pointed out in #22365) and removes Guix patches from the spelling linter, because that isn't our spelling.\n\n  Symbol usage: https://gist.github.com/fanquake/d15604fc580718444c5aa4b3c3c75fdc.\n\n  Guix Builds:\n  ```bash\n  bash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\n  ed54e6a6cf4fab328557c0c72eb08c73f2a58c6c70959544cf4b1882e75ea69e  guix-build-797b3ed90900/output/aarch64-linux-gnu/SHA256SUMS.part\n  83bd9dadc59f89f848d143fa4fc3964f16fe0b4bdf35e5093b577ff2c4bd1f43  guix-build-797b3ed90900/output/aarch64-linux-gnu/bitcoin-797b3ed90900-aarch64-linux-gnu-debug.tar.gz\n  94cb8c35281f12dec6ea5b390b66cad5e27ac8c45a30c42c8d38c438695d54c0  guix-build-797b3ed90900/output/aarch64-linux-gnu/bitcoin-797b3ed90900-aarch64-linux-gnu.tar.gz\n  7318b63d65c0aa52d2446de8e1f40658d2e47ab8fb0268820c3b7585d140fb23  guix-build-797b3ed90900/output/arm-linux-gnueabihf/SHA256SUMS.part\n  95e1ffb372964b73f539653ca703b70cf0c018801a9c4c0ffc46a0b63539253c  guix-build-797b3ed90900/output/arm-linux-gnueabihf/bitcoin-797b3ed90900-arm-linux-gnueabihf-debug.tar.gz\n  039d3842e6499626cf955ae0a7590dd6b3d0935cdc217c98aaf9d156b0ebd3b4  guix-build-797b3ed90900/output/arm-linux-gnueabihf/bitcoin-797b3ed90900-arm-linux-gnueabihf.tar.gz\n  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  guix-build-797b3ed90900/output/dist-archive/SKIPATTEST.TAG\n  2c4e7b6e7aff63ba811e5bf59362d16866c3a358f8844fba8739a61192870622  guix-build-797b3ed90900/output/dist-archive/bitcoin-797b3ed90900.tar.gz\n  955029b949c368eabd517dd33040d2f01e2ac6a55e7b4f9107907a7c6e0c6060  guix-build-797b3ed90900/output/powerpc64-linux-gnu/SHA256SUMS.part\n  fd6d6b137f8efedf58a879d11205b1d4649e1f97d7f91e193239ef206fcc285d  guix-build-797b3ed90900/output/powerpc64-linux-gnu/bitcoin-797b3ed90900-powerpc64-linux-gnu-debug.tar.gz\n  51736ac8e77737999f1b5bd4c381b0016f19a8d5e40e786fe941ff04e84c11c9  guix-build-797b3ed90900/output/powerpc64-linux-gnu/bitcoin-797b3ed90900-powerpc64-linux-gnu.tar.gz\n  8c244c16bfa46c1efdb120e1d91fdd14d3f14eefee8d7e1fbb0a9b4664a5c315  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/SHA256SUMS.part\n  704ee593251a1b1c65a5bebeef93b23f266af4e8cbf8ae556150c3b2e8f06a6c  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/bitcoin-797b3ed90900-powerpc64le-linux-gnu-debug.tar.gz\n  0ec06ae7d344de20d61e3965d8b383747ef20b0e9d93a3165733ea23bdf2ead8  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/bitcoin-797b3ed90900-powerpc64le-linux-gnu.tar.gz\n  2dd6c6ecc67b0ea40ca9c43f92efca81ccd054b8db8c197ad84ad9674d510a25  guix-build-797b3ed90900/output/riscv64-linux-gnu/SHA256SUMS.part\n  5ebb27a855a677f7a188d83995be6b2a3ea8606be152abb7fc7832713fb0677a  guix-build-797b3ed90900/output/riscv64-linux-gnu/bitcoin-797b3ed90900-riscv64-linux-gnu-debug.tar.gz\n  bdaf1783f5e1861597afa37c1880364e118d9a7a7af8017302d82202791019f6  guix-build-797b3ed90900/output/riscv64-linux-gnu/bitcoin-797b3ed90900-riscv64-linux-gnu.tar.gz\n  726c9092b60ac2e7d7e14b2c24467fcf276a6f89170a871ddab9dce6ac230699  guix-build-797b3ed90900/output/x86_64-apple-darwin18/SHA256SUMS.part\n  2af4d709b44952654f3c08c86593bf2ccc9a44ed422783a1b95b8a199a894db2  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx-unsigned.dmg\n  fd49ba445aa6cf3d8c47019a05e9e5740cb0f53349344dd80671297127f49f1a  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx-unsigned.tar.gz\n  3f51cbf8cf18420d4be70e656aa993675cf5e828a255c2030047ae2e059ed5b7  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx64.tar.gz\n  afd1edee1447bb88d81e972abfae4c4e065b5b1827769f033cff9472084c7c1b  guix-build-797b3ed90900/output/x86_64-linux-gnu/SHA256SUMS.part\n  ec468ef886d25e685f4f7a18b4f7d497dedf757495e0d5beb72c23cc32ab69b5  guix-build-797b3ed90900/output/x86_64-linux-gnu/bitcoin-797b3ed90900-x86_64-linux-gnu-debug.tar.gz\n  1934d7294f0c9e083d38a3f68d4a61cd679defa79ce0a89f77386978692b9b18  guix-build-797b3ed90900/output/x86_64-linux-gnu/bitcoin-797b3ed90900-x86_64-linux-gnu.tar.gz\n  94c11c328a628052eb6f50e9816aa768f87ea7acfbbbafdab60f6928da766811  guix-build-797b3ed90900/output/x86_64-w64-mingw32/SHA256SUMS.part\n  fd371922ba93d81bd4a2b711d617af6756f9f0494db6d83aa0e5f491a24168ef  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win-unsigned.tar.gz\n  4e4ad976bc029bbbf9596ad8493accaaba8b0d5c598dd342f8da330609bbdf21  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64-debug.zip\n  3a89a16b9101e9a17d98efb9234b5bdd264c0bba2c6326511017730e1a08311f  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64-setup-unsigned.exe\n  e285ab737e3c843fd3f1c26c2f053e421a3c39b33995747ce48281884d3f28d1  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64.zip\n  ```\n\nACKs for top commit:\n  sipa:\n    utACK 797b3ed9090030f32fade81803b580562d4a90a3\n  hebasto:\n    ACK 797b3ed9090030f32fade81803b580562d4a90a3\n\nTree-SHA512: 3a569702d8832c155c5ce8d2f6d823f7f12603885576078bc5192bc9038a48261ecb541800f79d1e9bc86d71fa640265c5b8b89df9d8bb680b3bb05d9d78a666",
      "tree": {
        "sha": "d5932cbaee66e9be1c940dd694a756adfff39e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5932cbaee66e9be1c940dd694a756adfff39e45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/137f3b9ba3857b879e934a93847520ed91bc4eb2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDljlUACgkQLuufXMCV\nJsGg5A//e7yJlpwcHdFgp8a96CKIypk3X+ZLt+ikryvnwYqPhehMHxOVNlY4XaXf\nwH/hRt2Q1a7ARkV75H2/rSKN7r4ByGGuOU/z3Cr5QbI8pCiQLyX76TToT6ARMtxF\nK9kguKFZYVog7ewTfp+78iRALgWjlmF7SMmrFBX7BFAsv4h9O9IDX4OSbr7KQlfJ\nB5y0jIhOnoK0euB7Mah256c0DTfaUfEL2s38q63SKySgQvZv95ht3oiy/opmqaHJ\nmfpFVykSLFWirmRRmPu7gmtq5gTLjkeIyqq2Jqy8xMikIRwZbQeBSbYjy378PjIb\niEHDesBdYzbF7vqPiA0kyV3wFeA3WOnTlWRcDMXa24neSmW/qDY59grPv0ePOw8W\nCLhaLn5rwTmPRs6YrRoUgGao4O9vpDO101rS3dkPntf76cbKB98EFLvRm1ImS5zY\n8nm3yZYfP2Nbxyum9r7D2rY08DXQ1s2F2vAOFWHuaGvC/23TY0KoAn2TDjgB22NP\nqGUoiOWwEOgUcFXYUWElMcWShcVnlHLVVYLfFaQnANGJLFY78ppOGg14pluOiPrO\ncpy4Jn9+vibbbvfR2+4KGIvSHJx/A1csBzVfpaB6ic+5NMVpgdicUPS+XG/WDrZj\nuXJpR7MzNaW+Q8pX3SM6VLFMZY7K5x1kTYAB81W1NcZPfI48nWY=\n=p5g8\n-----END PGP SIGNATURE-----",
        "payload": "tree d5932cbaee66e9be1c940dd694a756adfff39e45\nparent 914c0cad97762b2dbc42e111a4d5daeeab9d0377\nparent 797b3ed9090030f32fade81803b580562d4a90a3\nauthor fanquake <fanquake@gmail.com> 1625656890 +0800\ncommitter fanquake <fanquake@gmail.com> 1625656917 +0800\n\nMerge bitcoin/bitcoin#22405: build: remove --enable-glibc-back-compat from Guix build\n\n797b3ed9090030f32fade81803b580562d4a90a3 script: remove gitian reference from symbol-check.py (fanquake)\n15fc9a0299091bfeb3370f993ad95ff638f6ba8c guix: add additional documentation to patches (fanquake)\n4516e5ec9223486fe2eba7f4320d786d074a58fd lint: exclude Guix patches from spell-checking (fanquake)\nde6ca41a52d2646598daae5f4620bbe766757e21 guix: no-longer pass --enable-glibc-back-compat to Guix (fanquake)\n84dd81fb5bf7308b8070b53520266854fb6efad3 build: remove glibc backcompat requirement for Linux symbol checks (fanquake)\n\nPull request description:\n\n  Now that our Guix toolchains are based on glibc 2.24 and 2.27 (RISCV), we don't need to use the `--enable-glibc-back-compat` option to produce binaries that don't use any symbols from glibc 2.17 and 2.27 or later.\n\n  This also adds additional documentation to some Guix patches (pointed out in #22365) and removes Guix patches from the spelling linter, because that isn't our spelling.\n\n  Symbol usage: https://gist.github.com/fanquake/d15604fc580718444c5aa4b3c3c75fdc.\n\n  Guix Builds:\n  ```bash\n  bash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\n  ed54e6a6cf4fab328557c0c72eb08c73f2a58c6c70959544cf4b1882e75ea69e  guix-build-797b3ed90900/output/aarch64-linux-gnu/SHA256SUMS.part\n  83bd9dadc59f89f848d143fa4fc3964f16fe0b4bdf35e5093b577ff2c4bd1f43  guix-build-797b3ed90900/output/aarch64-linux-gnu/bitcoin-797b3ed90900-aarch64-linux-gnu-debug.tar.gz\n  94cb8c35281f12dec6ea5b390b66cad5e27ac8c45a30c42c8d38c438695d54c0  guix-build-797b3ed90900/output/aarch64-linux-gnu/bitcoin-797b3ed90900-aarch64-linux-gnu.tar.gz\n  7318b63d65c0aa52d2446de8e1f40658d2e47ab8fb0268820c3b7585d140fb23  guix-build-797b3ed90900/output/arm-linux-gnueabihf/SHA256SUMS.part\n  95e1ffb372964b73f539653ca703b70cf0c018801a9c4c0ffc46a0b63539253c  guix-build-797b3ed90900/output/arm-linux-gnueabihf/bitcoin-797b3ed90900-arm-linux-gnueabihf-debug.tar.gz\n  039d3842e6499626cf955ae0a7590dd6b3d0935cdc217c98aaf9d156b0ebd3b4  guix-build-797b3ed90900/output/arm-linux-gnueabihf/bitcoin-797b3ed90900-arm-linux-gnueabihf.tar.gz\n  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  guix-build-797b3ed90900/output/dist-archive/SKIPATTEST.TAG\n  2c4e7b6e7aff63ba811e5bf59362d16866c3a358f8844fba8739a61192870622  guix-build-797b3ed90900/output/dist-archive/bitcoin-797b3ed90900.tar.gz\n  955029b949c368eabd517dd33040d2f01e2ac6a55e7b4f9107907a7c6e0c6060  guix-build-797b3ed90900/output/powerpc64-linux-gnu/SHA256SUMS.part\n  fd6d6b137f8efedf58a879d11205b1d4649e1f97d7f91e193239ef206fcc285d  guix-build-797b3ed90900/output/powerpc64-linux-gnu/bitcoin-797b3ed90900-powerpc64-linux-gnu-debug.tar.gz\n  51736ac8e77737999f1b5bd4c381b0016f19a8d5e40e786fe941ff04e84c11c9  guix-build-797b3ed90900/output/powerpc64-linux-gnu/bitcoin-797b3ed90900-powerpc64-linux-gnu.tar.gz\n  8c244c16bfa46c1efdb120e1d91fdd14d3f14eefee8d7e1fbb0a9b4664a5c315  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/SHA256SUMS.part\n  704ee593251a1b1c65a5bebeef93b23f266af4e8cbf8ae556150c3b2e8f06a6c  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/bitcoin-797b3ed90900-powerpc64le-linux-gnu-debug.tar.gz\n  0ec06ae7d344de20d61e3965d8b383747ef20b0e9d93a3165733ea23bdf2ead8  guix-build-797b3ed90900/output/powerpc64le-linux-gnu/bitcoin-797b3ed90900-powerpc64le-linux-gnu.tar.gz\n  2dd6c6ecc67b0ea40ca9c43f92efca81ccd054b8db8c197ad84ad9674d510a25  guix-build-797b3ed90900/output/riscv64-linux-gnu/SHA256SUMS.part\n  5ebb27a855a677f7a188d83995be6b2a3ea8606be152abb7fc7832713fb0677a  guix-build-797b3ed90900/output/riscv64-linux-gnu/bitcoin-797b3ed90900-riscv64-linux-gnu-debug.tar.gz\n  bdaf1783f5e1861597afa37c1880364e118d9a7a7af8017302d82202791019f6  guix-build-797b3ed90900/output/riscv64-linux-gnu/bitcoin-797b3ed90900-riscv64-linux-gnu.tar.gz\n  726c9092b60ac2e7d7e14b2c24467fcf276a6f89170a871ddab9dce6ac230699  guix-build-797b3ed90900/output/x86_64-apple-darwin18/SHA256SUMS.part\n  2af4d709b44952654f3c08c86593bf2ccc9a44ed422783a1b95b8a199a894db2  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx-unsigned.dmg\n  fd49ba445aa6cf3d8c47019a05e9e5740cb0f53349344dd80671297127f49f1a  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx-unsigned.tar.gz\n  3f51cbf8cf18420d4be70e656aa993675cf5e828a255c2030047ae2e059ed5b7  guix-build-797b3ed90900/output/x86_64-apple-darwin18/bitcoin-797b3ed90900-osx64.tar.gz\n  afd1edee1447bb88d81e972abfae4c4e065b5b1827769f033cff9472084c7c1b  guix-build-797b3ed90900/output/x86_64-linux-gnu/SHA256SUMS.part\n  ec468ef886d25e685f4f7a18b4f7d497dedf757495e0d5beb72c23cc32ab69b5  guix-build-797b3ed90900/output/x86_64-linux-gnu/bitcoin-797b3ed90900-x86_64-linux-gnu-debug.tar.gz\n  1934d7294f0c9e083d38a3f68d4a61cd679defa79ce0a89f77386978692b9b18  guix-build-797b3ed90900/output/x86_64-linux-gnu/bitcoin-797b3ed90900-x86_64-linux-gnu.tar.gz\n  94c11c328a628052eb6f50e9816aa768f87ea7acfbbbafdab60f6928da766811  guix-build-797b3ed90900/output/x86_64-w64-mingw32/SHA256SUMS.part\n  fd371922ba93d81bd4a2b711d617af6756f9f0494db6d83aa0e5f491a24168ef  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win-unsigned.tar.gz\n  4e4ad976bc029bbbf9596ad8493accaaba8b0d5c598dd342f8da330609bbdf21  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64-debug.zip\n  3a89a16b9101e9a17d98efb9234b5bdd264c0bba2c6326511017730e1a08311f  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64-setup-unsigned.exe\n  e285ab737e3c843fd3f1c26c2f053e421a3c39b33995747ce48281884d3f28d1  guix-build-797b3ed90900/output/x86_64-w64-mingw32/bitcoin-797b3ed90900-win64.zip\n  ```\n\nACKs for top commit:\n  sipa:\n    utACK 797b3ed9090030f32fade81803b580562d4a90a3\n  hebasto:\n    ACK 797b3ed9090030f32fade81803b580562d4a90a3\n\nTree-SHA512: 3a569702d8832c155c5ce8d2f6d823f7f12603885576078bc5192bc9038a48261ecb541800f79d1e9bc86d71fa640265c5b8b89df9d8bb680b3bb05d9d78a666\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137f3b9ba3857b879e934a93847520ed91bc4eb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/137f3b9ba3857b879e934a93847520ed91bc4eb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137f3b9ba3857b879e934a93847520ed91bc4eb2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914c0cad97762b2dbc42e111a4d5daeeab9d0377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/914c0cad97762b2dbc42e111a4d5daeeab9d0377"
      },
      {
        "sha": "797b3ed9090030f32fade81803b580562d4a90a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/797b3ed9090030f32fade81803b580562d4a90a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/797b3ed9090030f32fade81803b580562d4a90a3"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 30,
      "deletions": 6
    },
    "files": [
      {
        "sha": "407c0a2d722b670f1032b9d135260ad40530ce8c",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -3,12 +3,12 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that the executables produced by gitian only contain\n-certain symbols and are only linked against allowed libraries.\n+A script to check that release executables only contain certain symbols\n+and are only linked against allowed libraries.\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../path/to/binaries -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n import sys"
      },
      {
        "sha": "02ef8009639f6468c79cb47d5fabcbd824240160",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -240,7 +240,7 @@ mkdir -p \"$OUTDIR\"\n # CONFIGFLAGS\n CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n case \"$HOST\" in\n-    *linux*) CONFIGFLAGS+=\" --enable-glibc-back-compat\" ;;\n+    *linux*) CONFIGFLAGS+=\" --disable-threadlocal\" ;;\n esac\n \n # CFLAGS\n@@ -260,6 +260,13 @@ case \"$HOST\" in\n     *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n esac\n \n+# Using --no-tls-get-addr-optimize retains compatibility with glibc 2.17, by\n+# avoiding a PowerPC64 optimisation available in glibc 2.22 and later.\n+# https://sourceware.org/binutils/docs-2.35/ld/PowerPC64-ELF64.html\n+case \"$HOST\" in\n+    *powerpc64*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,--no-tls-get-addr-optimize\" ;;\n+esac\n+\n case \"$HOST\" in\n     powerpc64-linux-*|riscv64-linux-*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,-z,noexecstack\" ;;\n esac"
      },
      {
        "sha": "f327c464f3ec3ca38140300e7e099bbe20afd6d3",
        "filename": "contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -1,3 +1,11 @@\n+guix: repro: Sort find output in libtool for gcc-8\n+\n+Otherwise the resulting .a static libraries (e.g. libstdc++.a) will not\n+be reproducible and end up making the Bitcoin binaries non-reproducible\n+as well.\n+\n+See: https://reproducible-builds.org/docs/archives/#gnu-libtool\n+\n diff --git a/gcc/configure b/gcc/configure\n index 97ba7d7d69c..e37a96f0c0c 100755\n --- a/gcc/configure"
      },
      {
        "sha": "5c4d0c6ebe19699444a222e7fc0ec8bdd175ea3a",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=a68ba2f3cd3cbe32c1f31e13c20ed13487727b32\n+\n commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n Date:   Wed Oct 18 17:26:23 2017 +0100"
      },
      {
        "sha": "11fe7fdc99c05c89c01ca7d2278be2d17f109aef",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=fc3e1337be1c6935ab58bd13520f97a535cf70cc\n+\n commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n Author: Florian Weimer <fweimer@redhat.com>\n Date:   Wed Sep 21 10:45:32 2016 +0200"
      },
      {
        "sha": "d6217157ee57e9b67af70db0fe22964caa34afb4",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -1,3 +1,5 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=0b9c84906f653978fb8768c7ebd0ee14a47e662e\n+\n From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n From: \"H.J. Lu\" <hjl.tools@gmail.com>\n Date: Mon, 31 Dec 2018 09:26:42 -0800"
      },
      {
        "sha": "f58406a7a08901a413dec1223f1f881e04de956d",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -1,3 +1,6 @@\n+https://github.com/kichik/nsis/pull/13\n+https://sourceforge.net/p/nsis/code/7248/\n+\n diff --git a/SConstruct b/SConstruct\n index e8252c9..41786f2 100755\n --- a/SConstruct"
      },
      {
        "sha": "9430b778f09cdbd83cbc500b94e615d711a82205",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -822,7 +822,7 @@ if TARGET_WINDOWS\n \t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n-if GLIBC_BACK_COMPAT\n+if TARGET_LINUX\n \t@echo \"Checking glibc back compat...\"\n \t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif"
      },
      {
        "sha": "238fa63c45c3d804bd72c70721b0cc382f04cc23",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137f3b9ba3857b879e934a93847520ed91bc4eb2/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137f3b9ba3857b879e934a93847520ed91bc4eb2/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "patch": "@@ -15,6 +15,6 @@ if ! command -v codespell > /dev/null; then\n fi\n \n IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n-if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\"); then\n+if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\" \":(exclude)contrib/guix/patches\"); then\n     echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\"\n fi"
      }
    ]
  },
  {
    "sha": "d6ef3543ae16847d5a91fa9271acee9bd2164b32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmVmMzU0M2FlMTY4NDdkNWE5MWZhOTI3MWFjZWU5YmQyMTY0YjMy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T18:35:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:30:47Z"
      },
      "message": "lint: Run mypy with --show-error-codes\n\nWhen using mypy ignore directives, the error code needs to be specified.\nSomehow mypy doesn't print it by default...",
      "tree": {
        "sha": "0987a2b0daabe0d730e85c2eb4d713fa80840fb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0987a2b0daabe0d730e85c2eb4d713fa80840fb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6ef3543ae16847d5a91fa9271acee9bd2164b32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkGcACgkQLuufXMCV\nJsGHYw/9HkhY4f1zyNs402vwfAPLLpUMaFznHOrZ3VJGOoT/VXyRofkVo8tbZo6p\n5xhuT1gEaeDc0ONIylyKuKoKyWG4qo3d9PnL1SobPsdXtu0GzaDdPebLQJhPZydX\nymcrWx1RAhNKUjzkkDtiFUvCNPFsnulU9GOALAbvrsDaC501TBSxMu7G+DHj3PhH\nL7OYPh1WWs+3/WEm/Sn0ZI7YFF1Mcd0AJZMg0mCTpX7yNN7P3S29Hpycxuj3rxEQ\ntqYbUA/KhKQSs8T7l/U2NYbfEmo4NrGYTBGcYS6ElKYeVxlS/+U3FxXvr2yWK7Mp\nDHmZ6vdtwAjKNZ1YW62SKDmpZ4o+pGTtTeEL94z1DFN/NNECnr3v2n4Y7j2A38/Z\nB14347HesQNTzf4dBZPymp6pLhraFA/wY5NMbws0jV0aTOHlXk+j1gTFkV8GPJ8W\ncbzX0QG9fSo4B8Uq4abJHVjjmokXlrNf89exNzabGoch0msNXWgBCL9O9M4dAlzv\nZ//y+SMSMGc337oWzpR4Hr29zrulqDGJRIGKB8n+YLyppn2OXQh5Zsow5lyDO1VM\nqqs+epKm9HcQ4/r5Watsw9oz+/b8hq3aEK1ViiCCZYZgzZYT6VRL1/cKoCDFm9WU\nyXQORklmSwPNm2NzP+iPfiDZ+XEWVuWZ09JHCzG64gncq9dD7lo=\n=MOJw\n-----END PGP SIGNATURE-----",
        "payload": "tree 0987a2b0daabe0d730e85c2eb4d713fa80840fb5\nparent 137f3b9ba3857b879e934a93847520ed91bc4eb2\nauthor Carl Dong <contact@carldong.me> 1612290945 -0500\ncommitter fanquake <fanquake@gmail.com> 1625657447 +0800\n\nlint: Run mypy with --show-error-codes\n\nWhen using mypy ignore directives, the error code needs to be specified.\nSomehow mypy doesn't print it by default...\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ef3543ae16847d5a91fa9271acee9bd2164b32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ef3543ae16847d5a91fa9271acee9bd2164b32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ef3543ae16847d5a91fa9271acee9bd2164b32/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/137f3b9ba3857b879e934a93847520ed91bc4eb2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c448fa6f9a6fbb2fb0bd188e1da2faed96f4a010",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ef3543ae16847d5a91fa9271acee9bd2164b32/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ef3543ae16847d5a91fa9271acee9bd2164b32/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=d6ef3543ae16847d5a91fa9271acee9bd2164b32",
        "patch": "@@ -102,7 +102,7 @@ if ! PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; e\n     EXIT_CODE=1\n fi\n \n-if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n+if ! mypy --ignore-missing-imports --show-error-codes $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n     EXIT_CODE=1\n fi\n "
      }
    ]
  },
  {
    "sha": "bda62eab38c5dd74e222eddedbca19ace9df6daa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGE2MmVhYjM4YzVkZDc0ZTIyMmVkZGVkYmNhMTlhY2U5ZGY2ZGFh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T06:35:38Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:31:37Z"
      },
      "message": "ci: skip running the Linux test-security-check target for now\n\nThe CI environment is a moving target, and these tests are somewhat\nfragile, so for now, disable them.",
      "tree": {
        "sha": "d763e80ec293462e0c01157032096e48baa34f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d763e80ec293462e0c01157032096e48baa34f7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bda62eab38c5dd74e222eddedbca19ace9df6daa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkJkACgkQLuufXMCV\nJsHlZxAAhH/MtzLrwdgYtdbwwFQTAtqzUHSA1SysJ9grHpOkXd1/jZkfblQQfBVI\ngxPopvM1DbaMLzhp/fXXnVghoDhUdb6dn4na32hVgv5YSthrJLSfS3BxNhKqvF/z\ngD04m9xfmAkPJn1GkacObZC1U11Tye/XB4aIkpeKExOGdtOznpIeQTdV5EWAgJkH\nlytqosVAcW5qlMIyvUw9gEcSIcMdjwYeV/hL2OEgw2SIdrO2+Ln0cN0+c0g01nWc\nv0Sqi979Cnqch4X7fZE0rQxc3oGHBpjWWUALQcG6Naf1aBFx79QgBfG1CGmGGqyT\nt3WW+vAaUQ/s1E9JVYhXZy2W1olGA7q+SXOfwfEM5jEw1W7e3gFyyeMDdmLHK8Zf\n5Dcw11p4XE9WIgr8q97TEQUkDsu4oI8CzLwpYbBHDdg9KJgkgkATyy3+wS3sM+Vf\nJMbqQxcyROvqG0x4FQfo77V/nVbCHvmb+rF/QJqlMud2nA3T8EqSdUD4M+9bufW7\nR46J4H6C+65EGuOsMHd2dVPoRmVfxozdn9A+4j8xmW11qNzFXO57o06U7CrPBFA1\nsJyrMJ9LcDGCcJ8uU+XBCdkK+TWMJzZ/OOFICRRf9ZR6mFEJMO3odOygP+cvgbLt\nUq7aRk/UGC7jSXNDjcYta4Ki/mIYkjrSgYAZZfFhIbXlHF86hqI=\n=ZXSS\n-----END PGP SIGNATURE-----",
        "payload": "tree d763e80ec293462e0c01157032096e48baa34f7f\nparent d6ef3543ae16847d5a91fa9271acee9bd2164b32\nauthor fanquake <fanquake@gmail.com> 1625639738 +0800\ncommitter fanquake <fanquake@gmail.com> 1625657497 +0800\n\nci: skip running the Linux test-security-check target for now\n\nThe CI environment is a moving target, and these tests are somewhat\nfragile, so for now, disable them.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda62eab38c5dd74e222eddedbca19ace9df6daa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bda62eab38c5dd74e222eddedbca19ace9df6daa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda62eab38c5dd74e222eddedbca19ace9df6daa/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6ef3543ae16847d5a91fa9271acee9bd2164b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ef3543ae16847d5a91fa9271acee9bd2164b32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ef3543ae16847d5a91fa9271acee9bd2164b32"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8869b2a08396a24be4f67b1397cb7a8973f057c0",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bda62eab38c5dd74e222eddedbca19ace9df6daa/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bda62eab38c5dd74e222eddedbca19ace9df6daa/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=bda62eab38c5dd74e222eddedbca19ace9df6daa",
        "patch": "@@ -13,5 +13,4 @@ export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n-export RUN_SECURITY_TESTS=\"true\"\n export PIP_PACKAGES=\"lief\""
      }
    ]
  },
  {
    "sha": "9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmRjOGFmZTExN2I3YjFlYTg0NWY4YWNhZTllODMxOTIyYjhmOTJi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-21T18:52:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:31:37Z"
      },
      "message": "devtools: Improve *-check.py tool detection\n\nThis is important to make sure that we're not testing tools different\nfrom the one we're building with.\n\nIntroduce determine_wellknown_cmd, which encapsulates how we\nshould handle well-known tools specification (IFS splitting, env\noverride, etc.).",
      "tree": {
        "sha": "a8add8f24a05ac933e831d16e1b798259eabfd8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8add8f24a05ac933e831d16e1b798259eabfd8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkJkACgkQLuufXMCV\nJsE9TQ//QHxfpGVZV4fVV3djLi8cD3bTwKnrFNJXWmlL+q0IhIx9JgRQOA6vCn5V\nj9zWcMaCAd4fax0wmQ/EVHTApYMoMSJMCh167D2C4hpwWEgZIn7EtbT5+dyPTYXY\nGDkbH23TrjNgbkj/MwQgns2t6hV8DAQ80N+U6HmGQYwB/u37tFWCUgGyBM/MAvIv\nsrZfhiwPQIDg4+NwtUzyyAMoTPaxV3vWmXIExeFnrlF3DnlCoibAa0tWlMM7vG0X\nw/q4s0eur6kZk4h26dq0pFc8cYtb2H0OvazEAKJVZbiuCk+BFNcQtJmlj/ckhzar\npllLUDLvUTW+afyfgZXS7hlN0CnYSjTu0rhKKJpmsmIcF/aszZOu0MfWWPiTYA2y\nUBkW3WYtf3hXJ5I2tBpvvt+7E7h9qZG98lqP2X1HSjQH71iHAUlCRn4TvkWV7kfA\nZ47/EwEnGU5DbnYJg+CWombc4/tULIcxTbisqgghGpw4+lsc5xZVpiZ21W/HoPtF\nbm0HuDtsSjcsxXdIbTlQBfhS0vwVZTixTnM2vFW0IlUYif64sNQtrXBr2GHgHss+\nqq8ViqNNjx/AhMwBx0QLBfUgiyuBA0l5zEfj+ME/0KmYa42z8apIiNfQ/Lf1VL8H\nSDjQsZ9YWSmiyKHYgtNlgy5adCSsIWBSbgloz2WhKaxXj/Whl9k=\n=H+0J\n-----END PGP SIGNATURE-----",
        "payload": "tree a8add8f24a05ac933e831d16e1b798259eabfd8f\nparent bda62eab38c5dd74e222eddedbca19ace9df6daa\nauthor Carl Dong <contact@carldong.me> 1611255160 -0500\ncommitter fanquake <fanquake@gmail.com> 1625657497 +0800\n\ndevtools: Improve *-check.py tool detection\n\nThis is important to make sure that we're not testing tools different\nfrom the one we're building with.\n\nIntroduce determine_wellknown_cmd, which encapsulates how we\nshould handle well-known tools specification (IFS splitting, env\noverride, etc.).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bda62eab38c5dd74e222eddedbca19ace9df6daa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bda62eab38c5dd74e222eddedbca19ace9df6daa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bda62eab38c5dd74e222eddedbca19ace9df6daa"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 50,
      "deletions": 24
    },
    "files": [
      {
        "sha": "3ac698b96f3fb73bb37b74299ad3aecf6e42ec16",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -58,6 +58,7 @@ DIST_SHARE = \\\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/utils.py \\\n            $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n@@ -366,14 +367,14 @@ clean-local: clean-docs\n \n test-security-check:\n if TARGET_DARWIN\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n endif\n if TARGET_LINUX\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "61f727fa6342689775e2301c2d5736b59d906cce",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -12,12 +12,13 @@\n '''\n import subprocess\n import sys\n-import os\n from typing import List, Optional\n \n import lief\n import pixie\n \n+from utils import determine_wellknown_cmd\n+\n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n # - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n@@ -60,7 +61,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -140,7 +140,7 @@ class CPPFilt(object):\n     Use a pipe to the 'c++filt' command.\n     '''\n     def __init__(self):\n-        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+        self.proc = subprocess.Popen(determine_wellknown_cmd('CPPFILT', 'c++filt'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n \n     def __call__(self, mangled):\n         self.proc.stdin.write(mangled + '\\n')"
      },
      {
        "sha": "73c8732bb6d3c2fcf4f8bc572add5f55132909fe",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -9,6 +9,8 @@\n import subprocess\n import unittest\n \n+from utils import determine_wellknown_cmd\n+\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -25,15 +27,15 @@ def clean_files(source, executable):\n     os.remove(executable)\n \n def call_security_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n@@ -54,7 +56,7 @@ def test_ELF(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n@@ -73,7 +75,7 @@ def test_PE(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n@@ -95,4 +97,3 @@ def test_MACHO(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "56ea02719ddfa3efc1b4eaaf9e837d1967c06b97",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -7,10 +7,13 @@\n '''\n import os\n import subprocess\n+from typing import List\n import unittest\n \n-def call_symbol_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+from utils import determine_wellknown_cmd\n+\n+def call_symbol_check(cc: List[str], source, executable, options):\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     os.remove(source)\n     os.remove(executable)\n@@ -20,7 +23,7 @@ class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n \n         # renameat2 was introduced in GLIBC 2.28, so is newer than the upper limit\n         # of glibc for all platforms\n@@ -82,7 +85,7 @@ def test_ELF(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -132,7 +135,7 @@ def test_MACHO(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -182,4 +185,3 @@ def test_PE(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Common utility functions\n+'''\n+import shutil\n+import sys\n+import os\n+from typing import List\n+\n+\n+def determine_wellknown_cmd(envvar, progname) -> List[str]:\n+    maybe_env = os.getenv(envvar)\n+    maybe_which = shutil.which(progname)\n+    if maybe_env:\n+        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n+    elif maybe_which:\n+        return [ maybe_which ]\n+    else:\n+        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "7de5fb36ed4789f15f027705726f8b48ed936ea3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdc8afe117b7b1ea845f8acae9e831922b8f92b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "patch": "@@ -814,23 +814,23 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if TARGET_DARWIN\n \t@echo \"Checking macOS dynamic libraries...\"\n-\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_WINDOWS\n \t@echo \"Checking Windows dynamic libraries...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_LINUX\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n libbitcoin_ipc_mpgen_input = \\"
      }
    ]
  },
  {
    "sha": "678348db515c770c4dddfac512cdd97be11d407d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzgzNDhkYjUxNWM3NzBjNGRkZGZhYzUxMmNkZDk3YmUxMWQ0MDdk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-11T01:46:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:31:37Z"
      },
      "message": "guix: Patch binutils to add security-related disable flags\n\nWe use these flags in our test-security-check make target, but they are\nonly available because debian patches them in.\n\nWe can patch them in for our Guix builds so that we can check the sanity\nof our security/symbol checking suite before running them.",
      "tree": {
        "sha": "18346f2db5394107adf5f828a29e1f9e41ee14d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18346f2db5394107adf5f828a29e1f9e41ee14d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/678348db515c770c4dddfac512cdd97be11d407d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkJkACgkQLuufXMCV\nJsE1Eg//YP7Rj9N4SxpYZ8SBG+7ocAinzOzrVGS4U7zJdOPLS1szz1kLi0z9keCP\nllsXaO/smGCX+G3Z9qvIrHZqiLql7zcnXsVHFLkkgr6ER+h0MWb1BLB0Z7i1Hsyt\nDHsvv8o/AtBscKFLtcTHbk2CjeqKXl2u3NXU9DPQukuhJliB71JYOSYoDHBeIhKx\n3y50uJeFwk0ocJIIzSgRif3ExT2MB+d/hlu8CbAsKvRv4ZuPposwI/Wa8DZ/dA2O\nlTbzY1VlTm4D77nuIkTHZF+3wpjxeaQYAuBFLJ7isgFcvMfRrZU10xkgZWUz2wPJ\n7WWfGnuCjrwhduU3Kb+dh9uTR7n+8tAbiqINLJ0X/Pg1WReNZn4UOHyXYT3NjpBt\noSsN/8JZQL4TZGcxGuVZVdoqmmzmmTR/VNTp/QVZumTB49BtKxddmZ7iLHfRJXvI\nX+BgjEHZUQt3SL5Xf7FAaLILVldJ8wmnUXoXPXqLLgMYevg1//eSqGPOFjBkKrpI\ntgJYYimrkNFCaXOu4dJerpCqLILH7QfgFgR1JAXW+ETeYfLFq+1q+xxEif52/rRR\nLEb/r4k7xcfzDqKIvKmrQTGhblN8gkcwWmjLoypRg78ecr4r2NBb6rMgZClFHepf\nRohvYouUdkDVCa39lbHY2jR9fWHzx3sYf6sv2ND1IikS8SZlAWo=\n=Imm4\n-----END PGP SIGNATURE-----",
        "payload": "tree 18346f2db5394107adf5f828a29e1f9e41ee14d5\nparent 9fdc8afe117b7b1ea845f8acae9e831922b8f92b\nauthor Carl Dong <contact@carldong.me> 1607651165 -0500\ncommitter fanquake <fanquake@gmail.com> 1625657497 +0800\n\nguix: Patch binutils to add security-related disable flags\n\nWe use these flags in our test-security-check make target, but they are\nonly available because debian patches them in.\n\nWe can patch them in for our Guix builds so that we can check the sanity\nof our security/symbol checking suite before running them.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678348db515c770c4dddfac512cdd97be11d407d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/678348db515c770c4dddfac512cdd97be11d407d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678348db515c770c4dddfac512cdd97be11d407d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fdc8afe117b7b1ea845f8acae9e831922b8f92b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fdc8afe117b7b1ea845f8acae9e831922b8f92b"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 176,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e71cf525332d7a3d6c330a13c1b2878178beaa0f",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/678348db515c770c4dddfac512cdd97be11d407d/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/678348db515c770c4dddfac512cdd97be11d407d/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=678348db515c770c4dddfac512cdd97be11d407d",
        "patch": "@@ -80,6 +80,10 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n                  ((\"-rpath=\") \"-rpath-link=\"))\n                #t))))))))\n \n+(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n+  (package-with-extra-patches xbinutils\n+    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n+\n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n                               base-kernel-headers\n@@ -168,7 +172,7 @@ desirable for building Bitcoin Core release binaries.\"\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (cross-binutils target))\n+  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n          (pthreads-xgcc (make-gcc-with-pthreads\n                          (cross-gcc target"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/678348db515c770c4dddfac512cdd97be11d407d/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/678348db515c770c4dddfac512cdd97be11d407d/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=678348db515c770c4dddfac512cdd97be11d407d",
        "patch": "@@ -0,0 +1,171 @@\n+Description: Add disable opposites to the security-related flags\n+Author: Stephen Kitt <skitt@debian.org>\n+\n+This patch adds \"no-\" variants to disable the various security flags:\n+\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n+\n+--- a/ld/emultempl/pe.em\n++++ b/ld/emultempl/pe.em\n+@@ -259,9 +261,11 @@\n+ \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n+ /* DLLCharacteristics flags.  */\n+ #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n+-#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n+ #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n+-#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n+ #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n+ #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n+ #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n+@@ -271,6 +275,7 @@\n+ #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n+ #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n+ #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n++#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n+ \n+ static void\n+ gld${EMULATION_NAME}_add_options\n+@@ -342,8 +347,10 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -351,6 +358,7 @@\n+     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -485,9 +494,12 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -862,12 +874,21 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pe_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pe_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;\n+--- a/ld/emultempl/pep.em\n++++ b/ld/emultempl/pep.em\n+@@ -237,9 +240,12 @@\n+   OPTION_ENABLE_LONG_SECTION_NAMES,\n+   OPTION_DISABLE_LONG_SECTION_NAMES,\n+   OPTION_HIGH_ENTROPY_VA,\n++  OPTION_NO_HIGH_ENTROPY_VA,\n+   OPTION_DYNAMIC_BASE,\n++  OPTION_NO_DYNAMIC_BASE,\n+   OPTION_FORCE_INTEGRITY,\n+   OPTION_NX_COMPAT,\n++  OPTION_NO_NX_COMPAT,\n+   OPTION_NO_ISOLATION,\n+   OPTION_NO_SEH,\n+   OPTION_NO_BIND,\n+@@ -248,7 +254,8 @@\n+   OPTION_NO_INSERT_TIMESTAMP,\n+   OPTION_TERMINAL_SERVER_AWARE,\n+   OPTION_BUILD_ID,\n+-  OPTION_ENABLE_RELOC_SECTION\n++  OPTION_ENABLE_RELOC_SECTION,\n++  OPTION_DISABLE_RELOC_SECTION\n+ };\n+ \n+ static void\n+@@ -315,9 +322,12 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n++    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -327,6 +337,7 @@\n+     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -448,11 +461,15 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n+                                        layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -809,12 +826,24 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pep_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pep_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      /* fall through */\n++    case OPTION_NO_HIGH_ENTROPY_VA:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;"
      }
    ]
  },
  {
    "sha": "a8127b34bce3597b8091e14057c926197966a234",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODEyN2IzNGJjZTM1OTdiODA5MWUxNDA1N2M5MjYxOTc5NjZhMjM0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-02T22:19:03Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:31:37Z"
      },
      "message": "build: Use and test PE binutils with --reloc-section\n\nAlso fix test-security-check.py to account for new PE PIE failure\nindication.",
      "tree": {
        "sha": "5229c1de235d6c103a5f6908171bddc90a4bd55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5229c1de235d6c103a5f6908171bddc90a4bd55c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8127b34bce3597b8091e14057c926197966a234",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkJkACgkQLuufXMCV\nJsG8sQ//Xv0TRfUK+d6prtFmqHJeEMt4RVCbPUIaaAU/d0lKlLkNOTDS7AYyyXM+\nuHJOPNSnggq7R35DFvEzq7Q8/sUtIJ3rrNZ6ljBXqZctYdN8RSvTk6NcaxInRq9p\n9gHktexuzGANYet6jMD+ez7JiTbLy85zPO9ZAexKr8oYQIe+v1m6Y58T48jFaRlD\nrkK4d/cSz3AdEV2/E9fReDQxrkKa1RGE70mnE4xK9YMUxR2t+pKNTGenixd3a/vF\nA0ld6/l2Nl1Mnh18SC31KxC+o1mpo8X/vgifGXt9LhKm771tDzgwOqXnWegkRkG+\nxD+gNzkG+14JBbZlFQT/VD8YfAzKNSTBqvIE5ykDHDbO6CThhkpWWnDy5YeoZuD1\n7IxQsI7Caw3lJJ1uLrzh+i2+Kj6WOd151nFj8XzOM8vLVbbsiobVWapCAFxXOnAV\nBeoyO401SQAsJotUJx5UkJmLA+ZnLJ6Oho2j+gpF4crmUuJqsAjxADOCbifNuWDO\nde7U8W4dqJmJdqSoAu2l+JGDcE+NuUZwfBsuqL5lRHLvkYzngLYCDwPU6xIFvrfD\nzcyiaIEb9jW6KtK6kmXY3YwkvwGiG9iYxXX8Ez0RMYdtB7U2nN7apbHZytBPb8xT\n61VBDg4cVACmHTcLOOi0VGr41ekOnfdK0iG5LaCYt7UB2qQIymM=\n=Wafg\n-----END PGP SIGNATURE-----",
        "payload": "tree 5229c1de235d6c103a5f6908171bddc90a4bd55c\nparent 678348db515c770c4dddfac512cdd97be11d407d\nauthor Carl Dong <contact@carldong.me> 1614723543 -0500\ncommitter fanquake <fanquake@gmail.com> 1625657497 +0800\n\nbuild: Use and test PE binutils with --reloc-section\n\nAlso fix test-security-check.py to account for new PE PIE failure\nindication.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8127b34bce3597b8091e14057c926197966a234",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8127b34bce3597b8091e14057c926197966a234",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8127b34bce3597b8091e14057c926197966a234/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "678348db515c770c4dddfac512cdd97be11d407d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678348db515c770c4dddfac512cdd97be11d407d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/678348db515c770c4dddfac512cdd97be11d407d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f78e8dec425283deb02b18f89e6756a5fdf33ae",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8127b34bce3597b8091e14057c926197966a234/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8127b34bce3597b8091e14057c926197966a234/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a8127b34bce3597b8091e14057c926197966a234",
        "patch": "@@ -900,6 +900,7 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n+  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])"
      },
      {
        "sha": "14058e2cc8d5295ebcaa6007ac681d87e6b53a98",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8127b34bce3597b8091e14057c926197966a234/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8127b34bce3597b8091e14057c926197966a234/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=a8127b34bce3597b8091e14057c926197966a234",
        "patch": "@@ -59,15 +59,17 @@ def test_PE(self):\n         cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n         clean_files(source, executable)"
      }
    ]
  },
  {
    "sha": "1946b5f77cb5a6bb37500252079c3582cac4a6c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTQ2YjVmNzdjYjVhNmJiMzc1MDAyNTIwNzljMzU4MmNhYzRhNmM5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-01T12:18:03Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:31:37Z"
      },
      "message": "scripts: more robustly test macOS symbol checks",
      "tree": {
        "sha": "c4d64c83fca9f82b951d016de2ab4a188e3da224",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4d64c83fca9f82b951d016de2ab4a188e3da224"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1946b5f77cb5a6bb37500252079c3582cac4a6c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlkJkACgkQLuufXMCV\nJsFC3Q/+N8VMsApNh5fixliw1sm6Gx3zh0MhBDogXF4JxzbXk0FkPKTWWCuvaYja\n4V35RE7v24WqJMEaEDtskv39YRTYhOJ0yvnGJ3VP+d22qMDBylSPq71iEM87Ad06\nvREl4QBwtvs3updEUnmZsnLEgF3ZzSTkmEZF2tdlMFY6fsyoHUz/VtFvpI0IWVpq\nPWCc4Incp3kx2bi7sxKjitQ0LouEh2Sbg5CuIFKuLRgI1CsVHNXE0ZQAC3P4EwcG\nGSitkMAkhWlUijnVALjkdzl8Q5cNhgJ93mpflWxmLG92c9Snn4G3zWTivrXucgzT\nGUpYFGrOAVzyyqnxn0cGzmxaeWPCQtx0V77XDyZNHDfJRI1AlRx+t7njAn0eDjUh\nhpaMiqBOGtoawRKtPAwJpf9gHysEVa3tXkCSZigYEEKvQLDOwA+uu6v/gQNsuz0X\n/1XAjeUcQRy5XkQJaTj/NpmbxpEFnSO0HLR6atGh40AV7lRhO3cNRBhD4ezklu8c\nEWkPJ7zJ4Wxfoq4YM4vmGa5wBhqEmrA6BspmcepkcmvseqZhNE5MwYGOwCb817pT\nhLdb1abd5NFpgj8XruLmNbVtI+W4fXZ5XhWOTgpjKU6GTgExN3YhR9hwZLAHFTyb\ndG2dlxHwwNycPvhb4atPOtRBN4MM367pRCWW+9/nsSyR3rWgtfs=\n=7cqr\n-----END PGP SIGNATURE-----",
        "payload": "tree c4d64c83fca9f82b951d016de2ab4a188e3da224\nparent a8127b34bce3597b8091e14057c926197966a234\nauthor fanquake <fanquake@gmail.com> 1625141883 +0800\ncommitter fanquake <fanquake@gmail.com> 1625657497 +0800\n\nscripts: more robustly test macOS symbol checks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1946b5f77cb5a6bb37500252079c3582cac4a6c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1946b5f77cb5a6bb37500252079c3582cac4a6c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1946b5f77cb5a6bb37500252079c3582cac4a6c9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8127b34bce3597b8091e14057c926197966a234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8127b34bce3597b8091e14057c926197966a234",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8127b34bce3597b8091e14057c926197966a234"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "68e479009b5cec0efbd398add271ee4543d104f5",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1946b5f77cb5a6bb37500252079c3582cac4a6c9/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1946b5f77cb5a6bb37500252079c3582cac4a6c9/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=1946b5f77cb5a6bb37500252079c3582cac4a6c9",
        "patch": "@@ -99,7 +99,7 @@ def test_MACHO(self):\n \n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n             (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n                 f'{executable}: failed DYNAMIC_LIBRARIES MIN_OS SDK'))\n \n@@ -116,7 +116,7 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n                 (1, f'{executable}: failed MIN_OS SDK'))\n \n         source = 'test3.c'\n@@ -129,7 +129,7 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-mmacosx-version-min=10.14']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),\n                 (1, f'{executable}: failed SDK'))\n \n     def test_PE(self):"
      }
    ]
  },
  {
    "sha": "6cf3345297d371b4785d80d54e802b52ff09e8c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2YzMzQ1Mjk3ZDM3MWI0Nzg1ZDgwZDU0ZTgwMmI1MmZmMDllOGMy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T11:59:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T12:29:01Z"
      },
      "message": "scripts: adjust test-symbol-check for guix release environment\n\nNow that our release binaries are build in a glibc 2.24 and 2.27\nenvironment, we can't use a symbol from glibc 2.28 to test our checks.\nReplace renameat2() with nextup(), which was introduced in 2.24.\n\nNote that this also means re-disabling the test for RISC-V, however\nRISC-V is built in a glibc 2.27 environment, and our minimum required\nglibc for that binary is 2.27.",
      "tree": {
        "sha": "2df9fa1718954ea41fc1a81c70cfba75cedc8dd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2df9fa1718954ea41fc1a81c70cfba75cedc8dd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cf3345297d371b4785d80d54e802b52ff09e8c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlng4ACgkQLuufXMCV\nJsEg2A/9Gyv5AGZP7QYjEjTd/FkW7WUcdgOPVxPMXeAvbR3nhDbMUeZNRH1lQq98\n+Cqvn/qXIj6ALGR1H3Q4njXLCQhtbBTcCkXt7ncU/R+4X/FXU9hxJbyayN1OYo32\nQ3HVebpGgi7WxeWM1WBNSV5aOePU2PCCVsC6yOG4T7PK2VEyy2r/JlmTxgjDlcr+\nSDPx7hxAufy+goUFI1U9pd52InbvvPNbatLPLTbvx5XgSZrh6Htv1ayv4YEF4XGl\nBw8w1zNbkxyNsIIaCknxsQ7wa81Q0GTK9pbzODH2ws8XR3WeGifpwWyVMwyFXuYe\ndstVca0Gh68xoKw3tkmIB9lsONwioFYtb0IUYPi2yK+ej9EwbGfUAQBmSiMSEoJU\nVsdmalmFSH7Pd8JMfGtHMAkukgJzmPU55g3kIJVAw7cX2DVLGY1R+ausCZVHHJyl\nr2Sy9Sz574zaNFhijlYS52y+sVjWy6SGUyEwV3a0SJx+xmqLVpKv7K0PY8ikQdRH\ndN8uLOMUAG5ZiGw+2vrrcYiswyKDIXZKdR8RuwjjondInppa4Ey+IANhh7eTyYA9\npb9j3hFepzn+TChvXC4Im23cBJ4P7ehnZzT/7iCjvmX47EOj7y3DKsX07HssgeZK\nymwm4E4rXTgNYBXVDrk7wXXuFzbdFVcofLWWs9vftYTTDeaR4oE=\n=MOeJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 2df9fa1718954ea41fc1a81c70cfba75cedc8dd4\nparent 1946b5f77cb5a6bb37500252079c3582cac4a6c9\nauthor fanquake <fanquake@gmail.com> 1625659171 +0800\ncommitter fanquake <fanquake@gmail.com> 1625660941 +0800\n\nscripts: adjust test-symbol-check for guix release environment\n\nNow that our release binaries are build in a glibc 2.24 and 2.27\nenvironment, we can't use a symbol from glibc 2.28 to test our checks.\nReplace renameat2() with nextup(), which was introduced in 2.24.\n\nNote that this also means re-disabling the test for RISC-V, however\nRISC-V is built in a glibc 2.27 environment, and our minimum required\nglibc for that binary is 2.27.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf3345297d371b4785d80d54e802b52ff09e8c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf3345297d371b4785d80d54e802b52ff09e8c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf3345297d371b4785d80d54e802b52ff09e8c2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1946b5f77cb5a6bb37500252079c3582cac4a6c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1946b5f77cb5a6bb37500252079c3582cac4a6c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1946b5f77cb5a6bb37500252079c3582cac4a6c9"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7d83c5f751f0f901cd8cdc953bfa6435a7238aeb",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf3345297d371b4785d80d54e802b52ff09e8c2/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf3345297d371b4785d80d54e802b52ff09e8c2/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=6cf3345297d371b4785d80d54e802b52ff09e8c2",
        "patch": "@@ -19,32 +19,39 @@ def call_symbol_check(cc: List[str], source, executable, options):\n     os.remove(executable)\n     return (p.returncode, p.stdout.rstrip())\n \n+def get_machine(cc: List[str]):\n+    p = subprocess.run([*cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n         cc = determine_wellknown_cmd('CC', 'gcc')\n \n-        # renameat2 was introduced in GLIBC 2.28, so is newer than the upper limit\n-        # of glibc for all platforms\n+        # there's no way to do this test for RISC-V at the moment; we build for\n+        # RISC-V in a glibc 2.27 envinonment and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n+\n+        # nextup was introduced in GLIBC 2.24, so is newer than our supported\n+        # glibc (2.17), and available in our release build environment (2.24).\n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n                 #define _GNU_SOURCE\n-                #include <stdio.h>\n-                #include <linux/fs.h>\n+                #include <math.h>\n \n-                int renameat2(int olddirfd, const char *oldpath,\n-                    int newdirfd, const char *newpath, unsigned int flags);\n+                double nextup(double x);\n \n                 int main()\n                 {\n-                    renameat2(0, \"test\", 0, \"test_\", RENAME_EXCHANGE);\n+                    nextup(3.14);\n                     return 0;\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, []),\n-                (1, executable + ': symbol renameat2 from unsupported version GLIBC_2.28\\n' +\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (1, executable + ': symbol nextup from unsupported version GLIBC_2.24\\n' +\n                     executable + ': failed IMPORTED_SYMBOLS'))\n \n         # -lutil is part of the libc6 package so a safe bet that it's installed"
      }
    ]
  },
  {
    "sha": "5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQ3MDNjNmE3MGRiMmZhNzJmY2FjZTU2YTE1ZGIwN2Q0YjBhY2Yx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-21T19:04:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T12:29:05Z"
      },
      "message": "guix: Test security-check sanity before performing them",
      "tree": {
        "sha": "aa4564b63d2cee8e1386916594dcd3f6ce4877a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4564b63d2cee8e1386916594dcd3f6ce4877a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlnhEACgkQLuufXMCV\nJsGb1Q//Zgwg263ubTqM2+HQzlNNuHHlrLxlIEPLn9H1qYR8dQSTeD0xsZ6isJd1\nUd05fKWU4Dp5nmyySTzG2BSBS6BJHqbK0MrGwLHkt2agSiCQzSD6umuC5tdV2A2K\nDIxujqbBlV/YPN7AX31k+QmkIhr/WZsl8xWXUBkKg8mAJQTCkc8oHXUj27PBQs5L\nlCgwcTnagt+lfAeeFmPSRYOtJa3kQv3n5bUOIOLUXTnAD/91CoMVgCXx7/yZU/Ki\nC1cd0gg1QwTMf3Q4efpCz3/bAE+EOFbe72TXgTyIT/dKGsqkxxui2jp9ffxgBJXh\nvlGdFQ7r+yxuddt+HhVSFA1Mz4wVQqdio2OIqXofhaSp8aad/L4doMne2GM87FlX\ncf2Efo8gwAEwkzCqjChgMrg5yTIPV57YpfFJ/RIGtzUa/1EtyA+5pZkzdMTXoiNU\npuRzw1LlThskmC90d488f6ozPvkJEo/K0j00PgPnhT8Eq4CObHF+H8p91wqSJm13\na/ka/paM+F4Ioxn28QrgqCX98s54S7OcLKtN5XWJsS5M6mwYUThiy0VOogE3Hs7A\nAb61RD5oBUlN0hiEjw4nuWQkCDsg6PajqoB/QmJmG4JzIe1JV+l9iMIKqPJwyTaq\nc2LCB4gHT508zo4nbVPrRwbCnm6wtTMcUtt5Va3AzTLc4+paL64=\n=nZmq\n-----END PGP SIGNATURE-----",
        "payload": "tree aa4564b63d2cee8e1386916594dcd3f6ce4877a0\nparent 6cf3345297d371b4785d80d54e802b52ff09e8c2\nauthor Carl Dong <contact@carldong.me> 1611255853 -0500\ncommitter fanquake <fanquake@gmail.com> 1625660945 +0800\n\nguix: Test security-check sanity before performing them\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4703c6a70db2fa72fcace56a15db07d4b0acf1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf3345297d371b4785d80d54e802b52ff09e8c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf3345297d371b4785d80d54e802b52ff09e8c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf3345297d371b4785d80d54e802b52ff09e8c2"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0b96949a6b57cddca902ae1add88d916262e297f",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4703c6a70db2fa72fcace56a15db07d4b0acf1/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4703c6a70db2fa72fcace56a15db07d4b0acf1/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
        "patch": "@@ -299,10 +299,11 @@ mkdir -p \"$DISTSRC\"\n     # Build Bitcoin Core\n     make --jobs=\"$JOBS\" ${V:+V=1}\n \n-    # Perform basic ELF security checks on a series of executables.\n+    # Check that symbol/security checks tools are sane.\n+    make test-security-check ${V:+V=1}\n+    # Perform basic security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed gcc, glibc and libstdc++\n-    # version symbols for Linux distro back-compatibility.\n+    # Check that executables only contain allowed version symbols.\n     make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n     mkdir -p \"$OUTDIR\""
      }
    ]
  },
  {
    "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTI5MTM0ZTg0NGY3OGE4OWY4NTE1Y2YzMGRhZDRiNjA3NDcwM2M3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T12:59:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-07T12:59:35Z"
      },
      "message": "Merge bitcoin/bitcoin#22402: doc: Install Rosetta on M1-macOS for qt in depends\n\ncdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f doc: Install Rosetta on M1-macOS for qt in depends (Hennadii Stepanov)\n\nPull request description:\n\n  On master (c609e10545492aba480ff17aff7eefc13a0b5cd8) `make -C depends qt` on Apple Silicon based macOS 11.4 ends with an error:\n  ```\n  /bin/sh: /Users/hebasto/bitcoin/depends/work/build/aarch64-apple-darwin20.5.0/qt/5.12.11-6c4d47a8f8f/qtbase/bin/moc: Bad CPU type in executable\n  ```\n\n  Installing Rosetta 2 fixes it.\n\n  Explanation. On Apple Silicon macOS the `qt` package in depends actually is cross compiled. All native tools (including `moc`) are x86_64 binaries, that require Rosetta 2 to run.\n\nACKs for top commit:\n  promag:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f.\n  fanquake:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f - I have not tested after installing Rosetta 2, but I saw the same issue during my first cross-compile on an M1 box.\n  Zero-1729:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f\n\nTree-SHA512: fb06a32d6fb40f405ce856b44f5d3af0c51089886f3be79e509e5c325614d7af58ce4480c064c17e0efb695a1f69f68d533c417f9631d46d8a630aba60ce4433",
      "tree": {
        "sha": "ba97898455dbe162eb5d381fdd32338a9fa278b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba97898455dbe162eb5d381fdd32338a9fa278b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDlpTcACgkQLuufXMCV\nJsH/aRAAmCECqo4FhZobqGs6zO4dstJBiPJPfQop30940GOmR12cWPtdkPVLi8Px\nd32JGjmQQPBkeQp5oaX2/JL967fZVmFtRlPQvEXeqOe1mee6b9sG+/Hki9+eLAWd\nS0vXg9ZeQO7qZupsgcXqep0U/dsBPSXqN5zgY6chqjfD4BJXzmca37wfOouuq+U6\nyxdqOoOHhOWTFO2Xs9o5Y85tUgYiJrjM2iZGAesRxuyM8bgtcsmIRY1PK9yIWuxl\ndTdjy3WHssZB4qKqG+U1SLAzpvtQJl/Wl+Gp1Hj3E9u+Vnd7F+39wUDwjVLLrS2f\n7XM4qrT8hmi34lgkj9rdZ6sFLR/oKbMMAlPrKqqkgOtbtiKHMVZh6RJQSxHgCj3J\nMcD0MGmg9j8CHCg7AdGCPbVDUSzCe9PABWbWBGwTVM1pL+XitUMrrif5uCyCxQ3p\ndo9CjOCs+eBuzIg3QP4iWr1px63ta2MyXyDyJNd/3GGSmKiKmeZUOc1RlDI5Y2xa\naptbzgEvCjvudQlX64EdWqj6D45OSM7Xpi4r5DubrTFxOg7HHA2TD30E4oY5kgnx\neN/3lKNaai0NekqKWvaA5a4OmPf7+bj8XzKOikTf7zLzM4xfcH2NXg93yo7sYAFh\nalJJ0AlShCkh02abn+MaROR1kxjyNyABWwb7p9VTVbUDca5nriU=\n=Jgih\n-----END PGP SIGNATURE-----",
        "payload": "tree ba97898455dbe162eb5d381fdd32338a9fa278b4\nparent 137f3b9ba3857b879e934a93847520ed91bc4eb2\nparent cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f\nauthor fanquake <fanquake@gmail.com> 1625662765 +0800\ncommitter fanquake <fanquake@gmail.com> 1625662775 +0800\n\nMerge bitcoin/bitcoin#22402: doc: Install Rosetta on M1-macOS for qt in depends\n\ncdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f doc: Install Rosetta on M1-macOS for qt in depends (Hennadii Stepanov)\n\nPull request description:\n\n  On master (c609e10545492aba480ff17aff7eefc13a0b5cd8) `make -C depends qt` on Apple Silicon based macOS 11.4 ends with an error:\n  ```\n  /bin/sh: /Users/hebasto/bitcoin/depends/work/build/aarch64-apple-darwin20.5.0/qt/5.12.11-6c4d47a8f8f/qtbase/bin/moc: Bad CPU type in executable\n  ```\n\n  Installing Rosetta 2 fixes it.\n\n  Explanation. On Apple Silicon macOS the `qt` package in depends actually is cross compiled. All native tools (including `moc`) are x86_64 binaries, that require Rosetta 2 to run.\n\nACKs for top commit:\n  promag:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f.\n  fanquake:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f - I have not tested after installing Rosetta 2, but I saw the same issue during my first cross-compile on an M1 box.\n  Zero-1729:\n    ACK cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f\n\nTree-SHA512: fb06a32d6fb40f405ce856b44f5d3af0c51089886f3be79e509e5c325614d7af58ce4480c064c17e0efb695a1f69f68d533c417f9631d46d8a630aba60ce4433\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137f3b9ba3857b879e934a93847520ed91bc4eb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/137f3b9ba3857b879e934a93847520ed91bc4eb2"
      },
      {
        "sha": "cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdb41d5573b1e2ed1bc1d8d1dc9f77e82672ee1f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4f3b6df4871a340f6c3816a759bb2f285770c76b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4129134e844f78a89f8515cf30dad4b6074703c7/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4129134e844f78a89f8515cf30dad4b6074703c7/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=4129134e844f78a89f8515cf30dad4b6074703c7",
        "patch": "@@ -87,6 +87,14 @@ For linux S390X cross compilation:\n \n     sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n \n+### Install the required dependencies: M1-based macOS\n+\n+To be able to build the `qt` package, ensure that Rosetta 2 is installed:\n+\n+```\n+softwareupdate --install-rosetta\n+```\n+\n ### Dependency Options\n \n The following can be set when running make: `make FOO=bar`"
      }
    ]
  },
  {
    "sha": "2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmVlYzNjZTMxMzA5NjFmOThjZWIwMzA5NTFkMGU0NmQzYjkwOTZj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T18:34:31Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-07T13:46:38Z"
      },
      "message": "net: don't bind on 0.0.0.0 if binds are restricted to Tor\n\nThe semantic of `-bind` is to restrict the binding only to some address.\nIf not specified, then the user does not care and we bind to `0.0.0.0`.\nIf specified then we should honor the restriction and bind only to the\nspecified address.\n\nBefore this change, if no `-bind` is given then we would bind to\n`0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\nthe user does not care to restrict the binding.\n\nHowever, if only `-bind=addr:port=onion` is given (without ordinary\n`-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\naddition.\n\nChange the above to not do the additional bind: if only\n`-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\nto `addr:port` (only) and consider incoming connections to that as Tor\nand do not advertise it. I.e. a Tor-only node.",
      "tree": {
        "sha": "8145e4d5633c15ea6ec9957877a6b65df961eb0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8145e4d5633c15ea6ec9957877a6b65df961eb0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDlsD8ACgkQVN8G9ktV\ny7/NYh/+NWLKWrpZBspYw/DFi90shYkwwI33ovbHGWeFr5D9Bd/q2dyXhybBe35v\nHy5WUzZErgTQnsM30BDXTldJAd111XT2LIy3y2ANwWVrudxdPhaU1mR4sZoo+bsq\n1UWLzpCZGXXvQxef403GstFdcKtWGI3Q5agfHGN/9vpLkc0JNpzjQJ7a/smAs2d2\nmZUJAYUz1BEWZrPGqAaT2gjraYUDbabMuFxAvBEGMOYrB+phFF2i96WFhBccdnqK\nHXSoRjLyJh3ct5NRTbvTZ/oHukVb6COPCsLjw0Bq4iHqqRHq+S0vMy7uHmlYnS/c\nf/JHlgSEfAbBcJrHguUfEfc9rv0yDDDu5UoAfi4GK4/OydqUo0kbG48kcqmXqeD6\ndPkzC5uZNKxXU8jVGot4+tXTM2VIAs+G0XQUxdqrvofhXb8yd9oaFJI8a99dLWu4\nFqvLOyOxaZVFwF/kxScwxcGk81fCOSJlo4HJxhmA3KQRD8wykmtalkLMpItieYxi\nDku5wd9jJ36B/st70dkwF3OkSwgo7qpmUoKRl5UHfrivM1xudpCW5MaJeAtEjCHo\nETH+hXX8/MFgE3FFRRC1kVCxdAUoTRl59ROxy29SmXjZSJPTN/B/YaSC5UMhmCGK\nz7xSoCbyzfCAtdSzxC3CihbNlfzQGB5/3xc/zJjl0fSeixie8UesZtVq7kexDWAg\n3z0xlzxOZ9urkVRvsmsmAPeftJxzLQC8TedqQI6HdJUVAnEt3gyYvu1XFYP7chND\nuRkGRZRXkfmhkyiGHvBpjxsYnTgkJHuTu5H91yONGPYeylXCcEt6YsEyCzN79jWX\nGVBPvv01a//u3G4trJXFUczjprZDjwfhhtKf7ZrEymCw2pHU/GuT2tBLV7ObUSm3\nwH+voB9v9AFBap7Go/LFzcVXuC2jseC8VE+IbEAFNWr3EFzfKPc421KqIsCkRW4w\nQZwk3hKjeYKofo5dfDhuhiCT3BUtyD/7A8yMZEm0fi+cAFgd3TittKx/8fVJVz79\n0fIfoAX2+6AaG8qVAOSvzjn0Yqtp4zQUvxIiR1J+oSpl1uKFEr9CkwNJiw5xVfc6\nZf/NPyNzcoxwZoSiDKP/4tEId91MvpG7TqzXMZKYWXolgf3jiKJg3j2IO+qHHUKL\nZMqJwU6nPgtW35bXQh9w62A69T3PQRqnjDOIJyThTRHRk+7AZUEUaB56RQNCIu0F\nORJBlLQ5foppKnoK8Xhf3zI032efG34ypHxzb8so9pZ0WYcL96pN79mInK4wmu22\n4GIyMUPzkiQDgrgxMzi/OHJ9bJdO7Te3W4d+064dKdlRjXola/CLTjy8+Gsax8md\nDDYJ0YxWANlIqXqz9+IwMdiJpOywKA==\n=ivIp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8145e4d5633c15ea6ec9957877a6b65df961eb0b\nparent 4da26fb85d6d6d205a2794ccb98beee1302b4a25\nauthor Vasil Dimov <vd@FreeBSD.org> 1603391671 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625665598 +0200\n\nnet: don't bind on 0.0.0.0 if binds are restricted to Tor\n\nThe semantic of `-bind` is to restrict the binding only to some address.\nIf not specified, then the user does not care and we bind to `0.0.0.0`.\nIf specified then we should honor the restriction and bind only to the\nspecified address.\n\nBefore this change, if no `-bind` is given then we would bind to\n`0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\nthe user does not care to restrict the binding.\n\nHowever, if only `-bind=addr:port=onion` is given (without ordinary\n`-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\naddition.\n\nChange the above to not do the additional bind: if only\n`-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\nto `addr:port` (only) and consider incoming connections to that as Tor\nand do not advertise it. I.e. a Tor-only node.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4da26fb85d6d6d205a2794ccb98beee1302b4a25"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 129,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e60ec093f227f7e0387cdebdffdd422061cdefbc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -1721,25 +1721,34 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         return InitError(ResolveErrMsg(\"bind\", bind_arg));\n     }\n \n-    if (connOptions.onion_binds.empty()) {\n-        connOptions.onion_binds.push_back(DefaultOnionServiceTarget());\n-    }\n-\n-    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n-        const auto bind_addr = connOptions.onion_binds.front();\n-        if (connOptions.onion_binds.size() > 1) {\n-            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s for the automatically created Tor onion service.\"), bind_addr.ToStringIPPort()));\n-        }\n-        StartTorControl(bind_addr);\n-    }\n-\n     for (const std::string& strBind : args.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         bilingual_str error;\n         if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n+    // If the user did not specify -bind= or -whitebind= then we bind\n+    // on any address - 0.0.0.0 (IPv4) and :: (IPv6).\n+    connOptions.bind_on_any = args.GetArgs(\"-bind\").empty() && args.GetArgs(\"-whitebind\").empty();\n+\n+    CService onion_service_target;\n+    if (!connOptions.onion_binds.empty()) {\n+        onion_service_target = connOptions.onion_binds.front();\n+    } else {\n+        onion_service_target = DefaultOnionServiceTarget();\n+        connOptions.onion_binds.push_back(onion_service_target);\n+    }\n+\n+    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n+        if (connOptions.onion_binds.size() > 1) {\n+            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s \"\n+                                    \"for the automatically created Tor onion service.\"),\n+                                  onion_service_target.ToStringIPPort()));\n+        }\n+        StartTorControl(onion_service_target);\n+    }\n+\n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;"
      },
      {
        "sha": "51c16d348303120735fff5458cf08a1fcedbd2e1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -2418,38 +2418,33 @@ bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags\n     return true;\n }\n \n-bool CConnman::InitBinds(\n-    const std::vector<CService>& binds,\n-    const std::vector<NetWhitebindPermissions>& whiteBinds,\n-    const std::vector<CService>& onion_binds)\n+bool CConnman::InitBinds(const Options& options)\n {\n     bool fBound = false;\n-    for (const auto& addrBind : binds) {\n+    for (const auto& addrBind : options.vBinds) {\n         fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::None);\n     }\n-    for (const auto& addrBind : whiteBinds) {\n+    for (const auto& addrBind : options.vWhiteBinds) {\n         fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n     }\n-    if (binds.empty() && whiteBinds.empty()) {\n+    for (const auto& addr_bind : options.onion_binds) {\n+        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n+    }\n+    if (options.bind_on_any) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = htonl(INADDR_ANY);\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n         fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::None);\n         fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::None);\n     }\n-\n-    for (const auto& addr_bind : onion_binds) {\n-        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n-    }\n-\n     return fBound;\n }\n \n bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds, connOptions.onion_binds)) {\n+    if (fListen && !InitBinds(connOptions)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n                 _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),"
      },
      {
        "sha": "5e84f7a9d9e76ba72cb69402bfeb3bbea361be89",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -824,6 +824,9 @@ class CConnman\n         std::vector<NetWhitebindPermissions> vWhiteBinds;\n         std::vector<CService> vBinds;\n         std::vector<CService> onion_binds;\n+        /// True if the user did not specify -bind= or -whitebind= and thus\n+        /// we should bind on `0.0.0.0` (IPv4) and `::` (IPv6).\n+        bool bind_on_any;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n@@ -1033,10 +1036,7 @@ class CConnman\n \n     bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n-    bool InitBinds(\n-        const std::vector<CService>& binds,\n-        const std::vector<NetWhitebindPermissions>& whiteBinds,\n-        const std::vector<CService>& onion_binds);\n+    bool InitBinds(const Options& options);\n \n     void ThreadOpenAddedConnections();\n     void AddAddrFetch(const std::string& strDest);"
      },
      {
        "sha": "6802da8d4898faf06bb91423b96dec54614ba8c0",
        "filename": "test/functional/feature_bind_extra.py",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/feature_bind_extra.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/feature_bind_extra.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_extra.py?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -0,0 +1,95 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test starting bitcoind with -bind and/or -bind=...=onion and confirm\n+that bind happens on the expected ports.\n+\"\"\"\n+\n+import sys\n+\n+from test_framework.netutil import (\n+    addr_to_hex,\n+    get_bind_addrs,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+    SkipTest,\n+)\n+from test_framework.util import (\n+    PORT_MIN,\n+    PORT_RANGE,\n+    assert_equal,\n+    rpc_port,\n+)\n+\n+class BindExtraTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        # Avoid any -bind= on the command line. Force the framework to avoid\n+        # adding -bind=127.0.0.1.\n+        self.bind_to_localhost_only = False\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        # Override setup_network() because we want to put the result of\n+        # p2p_port() in self.extra_args[], before the nodes are started.\n+        # p2p_port() is not usable in set_test_params() because PortSeed.n is\n+        # not set at that time.\n+\n+        # Due to OS-specific network stats queries, we only run on Linux.\n+        self.log.info(\"Checking for Linux\")\n+        if not sys.platform.startswith('linux'):\n+            raise SkipTest(\"This test can only be run on Linux.\")\n+\n+        loopback_ipv4 = addr_to_hex(\"127.0.0.1\")\n+\n+        # Start custom ports after p2p and rpc ports.\n+        port = PORT_MIN + 2 * PORT_RANGE\n+\n+        # Array of tuples [command line arguments, expected bind addresses].\n+        self.expected = []\n+\n+        # Node0, no normal -bind=... with -bind=...=onion, thus only the tor target.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}=onion\"],\n+                [(loopback_ipv4, port)]\n+            ],\n+        )\n+        port += 1\n+\n+        # Node1, both -bind=... and -bind=...=onion.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}\", f\"-bind=127.0.0.1:{port + 1}=onion\"],\n+                [(loopback_ipv4, port), (loopback_ipv4, port + 1)]\n+            ],\n+        )\n+        port += 2\n+\n+        self.extra_args = list(map(lambda e: e[0], self.expected))\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        # Don't start the nodes, as some of them would collide trying to bind on the same port.\n+\n+    def run_test(self):\n+        for i in range(len(self.expected)):\n+            self.log.info(f\"Starting node {i} with {self.expected[i][0]}\")\n+            self.start_node(i)\n+            pid = self.nodes[i].process.pid\n+            binds = set(get_bind_addrs(pid))\n+            # Remove IPv6 addresses because on some CI environments \"::1\" is not configured\n+            # on the system (so our test_ipv6_local() would return False), but it is\n+            # possible to bind on \"::\". This makes it unpredictable whether to expect\n+            # that bitcoind has bound on \"::1\" (for RPC) and \"::\" (for P2P).\n+            ipv6_addr_len_bytes = 32\n+            binds = set(filter(lambda e: len(e[0]) != ipv6_addr_len_bytes, binds))\n+            # Remove RPC ports. They are not relevant for this test.\n+            binds = set(filter(lambda e: e[1] != rpc_port(i), binds))\n+            assert_equal(binds, set(self.expected[i][1]))\n+            self.stop_node(i)\n+            self.log.info(f\"Stopped node {i}\")\n+\n+if __name__ == '__main__':\n+    BindExtraTest().main()"
      },
      {
        "sha": "85ecb569cbd782f406e67e7105c2ba44d8dbd21c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -138,6 +138,7 @@\n     'interface_zmq.py',\n     'rpc_invalid_address_message.py',\n     'interface_bitcoin_cli.py',\n+    'feature_bind_extra.py',\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n     'tool_wallet.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGI0ODE2M2JmYmYzNGY3OWRjNzhmZmFhMmJiZjllMzlhZjk2Njg3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T09:18:47Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-08T08:31:45Z"
      },
      "message": "[validation] distinguish same txid different wtxid in mempool\n\nChanges behavior.",
      "tree": {
        "sha": "9b4da57d1a09ac5ad00cd24a6fcc952d788b4b35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b4da57d1a09ac5ad00cd24a6fcc952d788b4b35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c80f015143a4d5d06152fef550c10d9c0575c307",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "patch": "@@ -587,9 +587,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n-    // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {\n+        // Exact transaction already exists in the mempool.\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n+    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {\n+        // Transaction with the same non-witness data but different witness (same txid, different\n+        // wtxid) already exists in the mempool.\n+        return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-same-nonwitness-data-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions"
      }
    ]
  },
  {
    "sha": "b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2E4Y2Q5OTYzZTgxMDI2NGQzYjQ1ZDBhZDE1YWY4NjM5NjVjNDdh",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-11T13:49:19Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-08T08:31:45Z"
      },
      "message": "[test] submit same txid different wtxid as mempool tx\n\nCo-authored-by: Antoine Riard <ariard@student.42.fr>\nCo-authored-by: Antoine Riard <antoine.riard@gmail.com>",
      "tree": {
        "sha": "6377feb06e1377549b1f1f4f62c201500b9dcbe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6377feb06e1377549b1f1f4f62c201500b9dcbe8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 117,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd1f8997ad301d4fbe5fec204d51d1f1ddb297f2",
        "filename": "test/functional/mempool_accept_wtxid.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/mempool_accept_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/mempool_accept_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept_wtxid.py?ref=b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    sha256,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_TRUE,\n+    hash160,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool and 101 blocks')\n+        # The last 100 coinbase transactions are premature\n+        blockhash = node.generate(101)[0]\n+        txid = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0][\"txid\"]\n+        assert_equal(node.getmempoolinfo()['size'], 0)\n+\n+        self.log.info(\"Submit parent with multiple script branches to mempool\")\n+        hashlock = hash160(b'Preimage')\n+        witness_script = CScript([OP_IF, OP_HASH160, hashlock, OP_EQUAL, OP_ELSE, OP_TRUE, OP_ENDIF])\n+        witness_program = sha256(witness_script)\n+        script_pubkey = CScript([OP_0, witness_program])\n+\n+        parent = CTransaction()\n+        parent.vin.append(CTxIn(COutPoint(int(txid, 16), 0), b\"\"))\n+        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\n+        parent.rehash()\n+\n+        privkeys = [node.get_deterministic_priv_key().key]\n+        raw_parent = node.signrawtransactionwithkey(hexstring=parent.serialize().hex(), privkeys=privkeys)['hex']\n+        parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n+        node.generate(1)\n+\n+        # Create a new transaction with witness solving first branch\n+        child_witness_script = CScript([OP_TRUE])\n+        child_witness_program = sha256(child_witness_script)\n+        child_script_pubkey = CScript([OP_0, child_witness_program])\n+\n+        child_one = CTransaction()\n+        child_one.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_one.wit.vtxinwit.append(CTxInWitness())\n+        child_one.wit.vtxinwit[0].scriptWitness.stack = [b'Preimage', b'\\x01', witness_script]\n+        child_one_wtxid = child_one.getwtxid()\n+        child_one_txid = child_one.rehash()\n+\n+        # Create another identical transaction with witness solving second branch\n+        child_two = CTransaction()\n+        child_two.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_two.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_two.wit.vtxinwit.append(CTxInWitness())\n+        child_two.wit.vtxinwit[0].scriptWitness.stack = [b'', witness_script]\n+        child_two_wtxid = child_two.getwtxid()\n+        child_two_txid = child_two.rehash()\n+\n+        assert_equal(child_one_txid, child_two_txid)\n+        assert child_one_wtxid != child_two_wtxid\n+\n+        self.log.info(\"Submit one child to the mempool\")\n+        txid_submitted = node.sendrawtransaction(child_one.serialize().hex())\n+        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+\n+        # testmempoolaccept reports the \"already in mempool\" error\n+        assert_equal(node.testmempoolaccept([child_one.serialize().hex()]), [{\n+            \"txid\": child_one_txid,\n+            \"wtxid\": child_one_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-already-in-mempool\"\n+        }])\n+        testres_child_two = node.testmempoolaccept([child_two.serialize().hex()])[0]\n+        assert_equal(testres_child_two, {\n+            \"txid\": child_two_txid,\n+            \"wtxid\": child_two_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-same-nonwitness-data-in-mempool\"\n+        })\n+\n+        # sendrawtransaction will not throw but quits early when the exact same transaction is already in mempool\n+        node.sendrawtransaction(child_one.serialize().hex())\n+        # sendrawtransaction will not throw but quits early when a transaction with the same non-witness data is already in mempool\n+        node.sendrawtransaction(child_two.serialize().hex())\n+\n+\n+if __name__ == '__main__':\n+    MempoolWtxidTest().main()"
      },
      {
        "sha": "303742236f4e08f604817efda9bc5b47de6929c5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "patch": "@@ -279,6 +279,7 @@\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',\n     'mempool_compatibility.py',\n+    'mempool_accept_wtxid.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'p2p_ping.py',"
      }
    ]
  },
  {
    "sha": "5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWRiMDY0NTc0MDNmOGMxZDg3NGU5YzY3NDhlY2JiNzhlZjhmYTJi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-20T11:04:45Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-08T10:28:23Z"
      },
      "message": "bench: add peer eviction protection benchmarks\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "tree": {
        "sha": "b4b66f51f14a7c79fcd2522577e91baaab3d5123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4b66f51f14a7c79fcd2522577e91baaab3d5123"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDm01EACgkQT1chs9Dj\nkh2UUg//Qw8N+pdeULXrSqlZprb6e+QmW8bUmW7uarcqgNElihK64UulPROcyzVb\nAkMohygOwUsfoF+2Y4If8E3qCyXdckcNyw5gZAuX7/Z3hvwkiMq/MVzkxO2Wme+b\nPQE5OgvE56w4XTI/f4Fua6xMbLdygiPzGn5YUWHsTAyt9db/FkRq10gdk1V2Cm/W\nElIU1ti20Ek9Ypu+AtcXi/M8jJa1WWPFriYl8Od88onW+X9CS9my66lDyfhWyXup\nfYI/EIvpjKwz6Vt799gFHihzk6hJC0ZGxy3fYH8YagKYltbZOWEotuwgct5mDrO9\n55U+XYdg1FXLbHit+zmwRdgCS8JvFG6YN99hLNuEr9NlyyfB1Q9uy5y+WitFz8mJ\n4QCSBA+BhFYJF2+T/Yp1cJpJIehqOdbXcnJdcRkQQoth8t8PDTM2ZCSfBrAfr0LA\nHjevzFZ8zBPXWbFt/DRz5auOZlGU9tGMe6I86ksbKBpkh1/pgqr5I3OtjU8Enu5+\n+3fG4mhmC8LjcqSpVTqGFpVrm5lpT55XaaJFl7HIeqZNZIMJJF7feVEC2HKgcgXP\nHAyphh+5eOUk8qIydQDFd9iCms5yEW4R5coNENZAtjmi5E98wTUv3Ca4u1bxYUvJ\n3/sHR8Rd8H4WEEJleM5MeykEKMyr1bxR9/4L3aki7nT1NWT9DpI=\n=YEpZ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBCJ6ZcfCa26GIFvvDCvEvo+ZwUsQEQs2FPwk3mWuNJuCP/wEAt09qWQm56i\nxPAI/AbPYQcI8QRg5tNS8AiurtT6+xo2RACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECcyvf932YNKFOvhVrUr\nV18I8SCmzYAdbAG2A8MNCNIxYbcilhosyB3I4t7ftrb20cQ5EwjwIJ3e0zrQ+1oJ\nSaL1hEeGpDqM9HUeLuZRZemChPjj97OcCPEEYObTU/AIPAGFBfqtq2oAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBM\ny09ABSW0bXIKGgPQW0SuCPEEYObTUvAIoI0Wyv4Uu/YAg9/jDS75DI4jImh0dHBz\nOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEK7xKt4xI3zvN+sjZif/w7EI\n8QRg5tNS8AjRxi7MJNs5SwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b4b66f51f14a7c79fcd2522577e91baaab3d5123\nparent 566357f8f7471f74729297868917aa32f6d3c390\nauthor Jon Atack <jon@atack.com> 1624187085 +0200\ncommitter Jon Atack <jon@atack.com> 1625740103 +0200\n\nbench: add peer eviction protection benchmarks\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "566357f8f7471f74729297868917aa32f6d3c390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566357f8f7471f74729297868917aa32f6d3c390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/566357f8f7471f74729297868917aa32f6d3c390"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 157,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a8e4a0aaca0b6f83487290e3b47f1b1f138142f",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/mempool_stress.cpp \\\n   bench/nanobench.h \\\n   bench/nanobench.cpp \\\n+  bench/peer_eviction.cpp \\\n   bench/rpc_blockchain.cpp \\\n   bench/rpc_mempool.cpp \\\n   bench/util_time.cpp \\"
      },
      {
        "sha": "0469f0cb4c0db537200041e06c497c5cfeb7f461",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
        "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <net.h>\n+#include <netaddress.h>\n+#include <random.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <vector>\n+\n+static void EvictionProtectionCommon(\n+    benchmark::Bench& bench,\n+    int num_candidates,\n+    std::function<void(NodeEvictionCandidate&)> candidate_setup_fn)\n+{\n+    using Candidates = std::vector<NodeEvictionCandidate>;\n+    FastRandomContext random_context{true};\n+    bench.warmup(100).epochIterations(1100);\n+\n+    Candidates candidates{GetRandomNodeEvictionCandidates(num_candidates, random_context)};\n+    for (auto& c : candidates) {\n+        candidate_setup_fn(c);\n+    }\n+\n+    std::vector<Candidates> copies{bench.epochs() * bench.epochIterations(), candidates};\n+    size_t i{0};\n+    bench.run([&] {\n+        ProtectEvictionCandidatesByRatio(copies.at(i));\n+        ++i;\n+    });\n+}\n+\n+/* Benchmarks */\n+\n+static void EvictionProtection0Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_network = NET_IPV4;\n+        });\n+}\n+\n+static void EvictionProtection1Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 130 && c.id < 240) { // 110 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection2Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 90 && c.id < 160) { // 70 Tor\n+                c.m_network = NET_ONION;\n+            } else if (c.id >= 170 && c.id < 250) { // 80 I2P\n+                c.m_network = NET_I2P;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks050Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        50 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id == 28 || c.id == 47); //  2 localhost\n+            if (c.id >= 30 && c.id < 47) {             // 17 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 24 && c.id < 28) { //  4 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks100Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        100 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 55 && c.id < 60); //  5 localhost\n+            if (c.id >= 70 && c.id < 80) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 80 && c.id < 96) { // 16 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 140 && c.id < 160); // 20 localhost\n+            if (c.id >= 170 && c.id < 180) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 190 && c.id < 240) { // 50 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+// Candidate numbers used for the benchmarks:\n+// -  50 candidates simulates a possible use of -maxconnections\n+// - 100 candidates approximates an average node with default settings\n+// - 250 candidates is the number of peers reported by operators of busy nodes\n+\n+// No disadvantaged networks, with 250 eviction candidates.\n+BENCHMARK(EvictionProtection0Networks250Candidates);\n+\n+// 1 disadvantaged network (Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection1Networks250Candidates);\n+\n+// 2 disadvantaged networks (I2P, Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection2Networks250Candidates);\n+\n+// 3 disadvantaged networks (I2P/localhost/Tor) with 50/100/250 eviction candidates.\n+BENCHMARK(EvictionProtection3Networks050Candidates);\n+BENCHMARK(EvictionProtection3Networks100Candidates);\n+BENCHMARK(EvictionProtection3Networks250Candidates);"
      }
    ]
  },
  {
    "sha": "02e411ec456af80d1da76085a814c68bb3aca6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmU0MTFlYzQ1NmFmODBkMWRhNzYwODVhODE0YzY4YmIzYWNhNmRl",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-19T15:19:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-08T10:28:35Z"
      },
      "message": "p2p: iterate eviction protection only on networks having candidates\n\nin ProtectEvictionCandidatesByRatio().\n\nThank you to Vasil Dimov, whose suggestions during a post-merge\ndiscussion about PR 21261 reminded me that I had done this in\nearlier versions of the PR, e.g. commits like ef411cd2.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "tree": {
        "sha": "e0ededf60f9f9734d6388e5df90f1634561afa1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0ededf60f9f9734d6388e5df90f1634561afa1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02e411ec456af80d1da76085a814c68bb3aca6de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDm01QACgkQT1chs9Dj\nkh0YxRAAqNdNwNAaS3yK894Yo4j7wugj5sBAH8bkYL2lttd2To6R+PdXaHjqtUMq\n5/HiDh40MJ9QYHvMnaPEcYgjs4+L5XPgwqW/q1c8z8/QIlkAX2YnaZ9/Rs28Chse\nxmUvzDtJRA/sLjyL6Qi/AIwYtHb7MMxa0qeV1K20iBF75NOYKASbTQu9TyUhgYHr\ndkh9IDldpmTKSDifYUb5WhC6lBZr/eQkwXJmgbi97UHmZO4fC2d8/db/HCx113Ft\nwWznEgnlSvrSUU6Z2ui/IFF9lp9pJpxLjteS5TBbkVQ+Mh+iLhGQuvSMKgtnACNZ\nqrOHP5bw2/1qgtpz2CJRkA53Y/XFOiUOvzyZby2ZZH4Uqb1VD74DHsJ5qZAy+3oa\nMo9UES5rbk++w09rm0/k0KSNLCeQp5XwNn7cdT6LcGCT2nBNi3y1mnlnL90mqhxa\npu/J1/Bp8/9pOfVOLtZMp1LN6BaaVq/uhzcZb2ard8lCrEkqcx2QubzGRbNnhrEH\nMemx9LtJaFV0VuaDlrduGHNTSSl3cjkzfvoJjCj2mBz71UFAkbzO5cm2y6azNDA3\nEz0ON9BckEW89w33x0VMOpb/yo9dCCG+EN+IsEpCNNC1x4DB5eOtauckD3hjpHgN\nuhN06Y29EKUsBexrqhKYN7JBWs5HK6WoBzTRC0Xx/enrAmUJ6og=\n=J/wG\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEnzYaes4cp4T5NKXPRU3EewIaIj98HQ8lWijaeD6McsCP/wEFFqC+M1GruG\nlSlgFFM4EnYI8QRg5tNV8Ah8fLNNR2rTQACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQXJE2E+0t1cbA4+7Z\nfPhrFgjwIG8u3+m5DKNVuJ2tYCLsTYZ+KlTrAJuJMMAgOMfS3FxoCPAgxHn4U3iG\nQilXpIqblbHq6gHFi7W8dRkqWfhNs+XgesQI8QRg5tNV8Ajq0kJ24sdSNwCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wELfGMC7G2o9koPTnaNhYYW0I8QRg5tNV8Ahl16MS2e51wgCD3+MNLvkMjiko\naHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQxpmb+f1E\nyRxpu7l1uMpITgjxBGDm01XwCBrtcPx+t653AIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e0ededf60f9f9734d6388e5df90f1634561afa1e\nparent 5adb06457403f8c1d874e9c6748ecbb78ef8fa2b\nauthor Jon Atack <jon@atack.com> 1624115978 +0200\ncommitter Jon Atack <jon@atack.com> 1625740115 +0200\n\np2p: iterate eviction protection only on networks having candidates\n\nin ProtectEvictionCandidatesByRatio().\n\nThank you to Vasil Dimov, whose suggestions during a post-merge\ndiscussion about PR 21261 reminded me that I had done this in\nearlier versions of the PR, e.g. commits like ef411cd2.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e411ec456af80d1da76085a814c68bb3aca6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02e411ec456af80d1da76085a814c68bb3aca6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e411ec456af80d1da76085a814c68bb3aca6de/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5adb06457403f8c1d874e9c6748ecbb78ef8fa2b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1611b1a24b90755e0d1ab9a2b4735654f28652ed",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02e411ec456af80d1da76085a814c68bb3aca6de/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02e411ec456af80d1da76085a814c68bb3aca6de/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02e411ec456af80d1da76085a814c68bb3aca6de",
        "patch": "@@ -935,7 +935,10 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n     const size_t max_protect_by_network{total_protect_size / 2};\n     size_t num_protected{0};\n \n-    while (num_protected < max_protect_by_network) {\n+    // Count the number of disadvantaged networks from which we have peers to protect.\n+    auto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    while (num_networks != 0 && num_protected < max_protect_by_network) {\n         const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\n         const size_t protect_per_network{\n             std::max(disadvantaged_to_protect / networks.size(), static_cast<size_t>(1))};"
      }
    ]
  },
  {
    "sha": "c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWU4ZDhmOWIxNjhkZWMyYmM3Yjg0NWRhMzg0NDllOTY3MDhjZjhl",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-06T15:01:15Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-08T10:28:38Z"
      },
      "message": "p2p: process more candidates per protection iteration\n\nfor the usual case when some of the protected networks\ndon't have eviction candidates, to reduce the number\nof iterations in ProtectEvictionCandidatesByRatio().\n\nPicks up an idea in ef411cd2 that I had dropped.",
      "tree": {
        "sha": "71c7fc6042432899fd99324faf26257e8082d1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71c7fc6042432899fd99324faf26257e8082d1c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDm01YACgkQT1chs9Dj\nkh3tRg//Xm66YKK5RGrOHNRJB05FFwBur/GXpLzWK9a5BsJKJhgCr3Ki7bJvXADJ\nskX/a7fgr1fQDwDwlMVx11AppWGnN2bRIODEmdQFyNz8Q8akiT4ca0T7JNhhnXuk\ngl2hZktWCNsL9QvRHsNqWkSJQrOTT4cI1MHTA9V5qKqsIMveSGvtIYBB4VDrtF5H\nUoe/u9+JSKuPJFvK3pQDIr/+6RE1QVQk8yLzTgw8FKH7E0BxKPvAiW1EtkFA4WRE\n9PMlU5y9YS5IQ0pIGkW14WezEa5W5sp5BU22sAmWmo/4t8/SRYLRWIhj62SXy0nI\ndTIz/kU8ZanYNEe8aYS26fhAE/V861Ui4C/i9as4+D4XJLvkhCLSk5zwrwgjM/gp\njHYymlK2UntbRjkl5sOPWuur6JAT1LA0TgPC6kiMr7QI6o7uEQXWA3ZYNckrwG6g\n33ZKq/ku+uHfHqJDfD+L1G93msTxVio+W3A2pPvyXS9H/0436gaoN4HCWvfbkWKE\neRWCD+uE/dGKyndg8smEZlhqtfg3AovKbMiMT2iun5escXk9gAHgsRkJex+M/ad3\nx7B8x3VfUVhrwbeY0X1UiGwnn0q24TPsrx5lBrfe1aZmKjfgUUEqLIsePe9aRefI\noKvfT5+FLyTcQL0Idq4SZzKmv7p+TZhYzO4l/lGiiT+XE/0mKY0=\n=F5G1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwII4sVLzuFv0MbFg0PUgv2i0H4pDNlToaODhLQHEqxqm8CP/wEAtNEujkHbVx\nDZch72445aAI8QRg5tNX8AgBK575EokwrwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEED8CSOBbW9DdG0TL/k4vucI\n8QRg5tNX8AhKSS4FpFYlXgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEJLhCVgvV7KtObEGj8FLKeEI8QRg5tNX8AgtpenyRrr8\nFACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQ0WnGKuw5nTPOQeAkdEVlQAjxBGDm01fwCEryaPP8m9SWAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 71c7fc6042432899fd99324faf26257e8082d1c1\nparent 02e411ec456af80d1da76085a814c68bb3aca6de\nauthor Jon Atack <jon@atack.com> 1625583675 +0200\ncommitter Jon Atack <jon@atack.com> 1625740118 +0200\n\np2p: process more candidates per protection iteration\n\nfor the usual case when some of the protected networks\ndon't have eviction candidates, to reduce the number\nof iterations in ProtectEvictionCandidatesByRatio().\n\nPicks up an idea in ef411cd2 that I had dropped.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e8d8f9b168dec2bc7b845da38449e96708cf8e/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e411ec456af80d1da76085a814c68bb3aca6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e411ec456af80d1da76085a814c68bb3aca6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e411ec456af80d1da76085a814c68bb3aca6de"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9567e2b0cf97c61bd3ea34bcc20d74c173c97b79",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e8d8f9b168dec2bc7b845da38449e96708cf8e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e8d8f9b168dec2bc7b845da38449e96708cf8e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
        "patch": "@@ -940,9 +940,7 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n \n     while (num_networks != 0 && num_protected < max_protect_by_network) {\n         const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\n-        const size_t protect_per_network{\n-            std::max(disadvantaged_to_protect / networks.size(), static_cast<size_t>(1))};\n-\n+        const size_t protect_per_network{std::max(disadvantaged_to_protect / num_networks, static_cast<size_t>(1))};\n         // Early exit flag if there are no remaining candidates by disadvantaged network.\n         bool protected_at_least_one{false};\n "
      }
    ]
  },
  {
    "sha": "b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWQ5MDVjMjI1ZTg3YTRhMjg5YzBjZDM1OTNjNmMyMWNlYTNmYmE3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-19T15:07:01Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-08T10:28:40Z"
      },
      "message": "p2p: earlier continuation when no remaining eviction candidates\n\nin ProtectEvictionCandidatesByRatio().\n\nWith this change, `if (n.count == 0) continue;` will be true\nif a network had candidates protected in the first iterations\nand has no candidates remaining to be protected in later iterations.\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "1e351bba3f84d5ca0f8f795304da3a44fe29abb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e351bba3f84d5ca0f8f795304da3a44fe29abb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDm01gACgkQT1chs9Dj\nkh36bQ/+LGtYWhK0lfoFTi+FC0tpdzwaAMTUILfP36eNt64yzRczWy8X7A1ir54y\nXfLKuhoQSl4EKrMSeB/a03RsxfvXDi8sYTsSdMO62OigVYS2Wd1BrUn6ALRupmvl\n3dkSEDIjJ8s78RC5bgVMEP5flJe891MEZc4srlj6GRN8c3a234awE+90kjDmCQFI\nUbkipgawL7j+culZY3d9iSlkhbMsVwkZyJVIEF3CB0x6VKG+2GiPzjflqUNW9S3b\niHGcX77cnUrc7FNeNnHYvmf4D1ULf4CTuRQw/Jl5V97H4pQC95B/Ns9XAMyvYsSg\ngoXjnTJ9XLMRWfbwF5kKHRa1WqsaJILjHlL0AOZun9nosueZD/b9RtT8SMJRkU9W\nEHCjF8g1QM7bh3AxIgqiAeok/qpPn8zccSKTDC/5UxQHebpGFSijHXZvAhMlmm5V\nBSR1CN9jGmvYHP+VeSERwfyMAQXF4NutokyT8qyUB5/LnLu/5e21BgbRNyPS2A3A\ncnTAhvfsUAboa52ble/6o99CPl1mkuhqTXEws9Y9IxwH/FL/iHmZXfsAUE/nD5XS\nD87GTdsQ+EtA8lxYFXvn9sElZ69IEuM+6llGepuL0FfI4YiAq0tnI+ucJBcrrLFn\ns50TgpoDrj9uyI5NdbB1QKwxsbW/OYq/m8YIXkSd+kQNuXLo7qo=\n=/6UC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFK0FyH3Etirowk+TjMM9MZh8vnn84ktwT9bYMLUG5cXCP/wEDXo/ePcEIBA\nUqTYkvoPZFUI8CDv15qT0wG9rNB3vHaJxopfVE5H1IFNr5r9nXiLIoXchgjxBGDm\n01nwCMRINnMU5v+AAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t//AQTxpCuoJqvmn1YnBnzWynrwjwIILu2wJwtuUq3e71LTNEdf0X\n8WBYrNV8eMitZQK4j8XdCPEEYObTWfAIMUDCi45qDpoAg9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wENYCVUJ4\ni/bHOWZM3iHFcDoI8CCHBcG2/MAoEOV7JGsyfcTzY9UCRzoT3IjvI0Bq8LfhEQjx\nBGDm01nwCCYmeXaEEdLwAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDd84yB7DlIfuw3Su4jlTM5CPEg/bLqxJJf\nfHR1N+sVoSF6k0LBxLLrCeDhS6DB0Anse5cI8QRg5tNZ8AhYRaMI0U96rQCD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1e351bba3f84d5ca0f8f795304da3a44fe29abb7\nparent c9e8d8f9b168dec2bc7b845da38449e96708cf8e\nauthor Vasil Dimov <vd@FreeBSD.org> 1624115221 +0200\ncommitter Jon Atack <jon@atack.com> 1625740120 +0200\n\np2p: earlier continuation when no remaining eviction candidates\n\nin ProtectEvictionCandidatesByRatio().\n\nWith this change, `if (n.count == 0) continue;` will be true\nif a network had candidates protected in the first iterations\nand has no candidates remaining to be protected in later iterations.\n\nCo-authored-by: Jon Atack <jon@atack.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1d905c225e87a4a289c0cd3593c6c21cea3fba7/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e8d8f9b168dec2bc7b845da38449e96708cf8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e8d8f9b168dec2bc7b845da38449e96708cf8e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f7d46881ee18e68c04a8d8fdde87f10fa81f245f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1d905c225e87a4a289c0cd3593c6c21cea3fba7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1d905c225e87a4a289c0cd3593c6c21cea3fba7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
        "patch": "@@ -935,16 +935,18 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n     const size_t max_protect_by_network{total_protect_size / 2};\n     size_t num_protected{0};\n \n-    // Count the number of disadvantaged networks from which we have peers to protect.\n-    auto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n-\n-    while (num_networks != 0 && num_protected < max_protect_by_network) {\n+    while (num_protected < max_protect_by_network) {\n+        // Count the number of disadvantaged networks from which we have peers to protect.\n+        auto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+        if (num_networks == 0) {\n+            break;\n+        }\n         const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\n         const size_t protect_per_network{std::max(disadvantaged_to_protect / num_networks, static_cast<size_t>(1))};\n         // Early exit flag if there are no remaining candidates by disadvantaged network.\n         bool protected_at_least_one{false};\n \n-        for (const Net& n : networks) {\n+        for (Net& n : networks) {\n             if (n.count == 0) continue;\n             const size_t before = eviction_candidates.size();\n             EraseLastKElements(eviction_candidates, CompareNodeNetworkTime(n.is_local, n.id),\n@@ -954,10 +956,12 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n             const size_t after = eviction_candidates.size();\n             if (before > after) {\n                 protected_at_least_one = true;\n-                num_protected += before - after;\n+                const size_t delta{before - after};\n+                num_protected += delta;\n                 if (num_protected >= max_protect_by_network) {\n                     break;\n                 }\n+                n.count -= delta;\n             }\n         }\n         if (!protected_at_least_one) {"
      }
    ]
  },
  {
    "sha": "d9686164220041b8839039732295f165d9e5d015",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTY4NjE2NDIyMDA0MWI4ODM5MDM5NzMyMjk1ZjE2NWQ5ZTVkMDE1",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-08T14:52:25Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-08T15:20:35Z"
      },
      "message": "Merge bitcoin/bitcoin#22179: Torv2 removal followups\n\n00b875ba9414463d0041da6924fd9b54d6a06dee addrman: remove invalid addresses when unserializing (Vasil Dimov)\nbdb62096f0109b2ec76849d33d6cf7187dea299f fuzz: reduce possible networks check (Vasil Dimov)\na164cd3ba694ffeba03b2887a411b7f82f6c087e net: simplify CNetAddr::IsRoutable() (Vasil Dimov)\n\nPull request description:\n\n  * Simplify some code, now that we know `CNetAddr::IsRFC4193()` and `CNetAddr::IsTor()` cannot be `true` at the same time.\n  * Drop Tor v2 addresses when loading addrman from `peers.dat` - they would have been loaded as dummy-all-zeros IPv6 addresses and linger in addrman, wasting space.\n\nACKs for top commit:\n  sipa:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee. Reviewed the code, and tested with -DDEBUG_ADDRMAN (unit tests + mainnet run with peers.dat that contained v2 onions).\n  laanwj:\n    Code review and lightly tested ACK 00b875ba9414463d0041da6924fd9b54d6a06dee\n  jonatack:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee reviewed, debug-built with -DEBUG_ADDRMAN rebased to current master, restarted node on mainnet/signet/testnet and verified that on each chain -addrinfo shows no change in address counts (as expected). Added some sanity check asserts, rebuilt/re-ran test. Checked that the new test fails on master with \"test/addrman_tests.cpp(824): error: in \"addrman_tests/remove_invalid\": check addrman.size() == 2 has failed [4 != 2]\"\n  jarolrod:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee\n\nTree-SHA512: 6ed8e6745134b1b94fffaba28482de909ea39483b46b7f57bda61cdbae7a51251d15cb674de3631772fbeabe153d77a19269f96e62a89102a2d5c01e48f0ba06",
      "tree": {
        "sha": "9de408d5f1ef01cb18f1eca91a979b8fed4952ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9de408d5f1ef01cb18f1eca91a979b8fed4952ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9686164220041b8839039732295f165d9e5d015",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDnF8QACgkQHkrtYphs\n0l01eAf8D+dwjQvvmyF6uqc6lsVjdOLuwb1iI0T4wWnZ2IWYVMlR9flpc5hcE6cZ\nP5ELilHVOXF64GV4QBX+X/ms2HTomNKWTM6CB1lfZdiBr4/hppcbowZ2p91dQQ5I\nTxxViUYTn/LK2FJCyddWHkV4/lKYblQFkwvEUAtCg++ZSRhsZjSV1JzmgPH9aS3G\nqiHWWx/shZlLOow8CBr/wARtZVlj2m6AOnS9N2FgW25kW2iWsEKZ91aPlb9sHenU\noQoRUrzjMOH5XGVao9067oSDJ3m/bo0sGjL4DZ9J2kqmQbGo1JowRhAZp/62K/M5\nKaEfwPjCxinmjav8P5QqXdQwjWWhTg==\n=w0VS\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMGd74eRZ8W1/B8aaMWI/rAq/5nwFWoWuOCgpRodYK3qCP/wEChR07M7XkFr\n8AnnTAoUefwI8QRg5xfN8AislAA4QoVdfgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJ62E6vv4HvqUH1yWkqo\nzEoI8QRg5xfN8Ai90t+8b526VQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEKC5x5Xkfn7nI1OK2gQDPikI8SClYw/Kr+2ascKw\nzviNoVDBnY5OVpPyxYbB4di26Vr+0AjwIFEble9G7ddnaohMPnYizlMfoWCu02nf\nyRo7rcc4c4fWCPEEYOcXzfAIK//diY9FpgAAg9/jDS75DI4pKGh0dHBzOi8vZmlu\nbmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEPD9DVWkAPQbSJlRPcLkMl0I\n8SDl+3BN8HLtnA3JZRHr+VxxHrCp8ytk7YTQlsaCVqquOgjxBGDnF83wCLlpc/3W\ntYxWAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9de408d5f1ef01cb18f1eca91a979b8fed4952ec\nparent 4129134e844f78a89f8515cf30dad4b6074703c7\nparent 00b875ba9414463d0041da6924fd9b54d6a06dee\nauthor W. J. van der Laan <laanwj@protonmail.com> 1625755945 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1625757635 +0200\n\nMerge bitcoin/bitcoin#22179: Torv2 removal followups\n\n00b875ba9414463d0041da6924fd9b54d6a06dee addrman: remove invalid addresses when unserializing (Vasil Dimov)\nbdb62096f0109b2ec76849d33d6cf7187dea299f fuzz: reduce possible networks check (Vasil Dimov)\na164cd3ba694ffeba03b2887a411b7f82f6c087e net: simplify CNetAddr::IsRoutable() (Vasil Dimov)\n\nPull request description:\n\n  * Simplify some code, now that we know `CNetAddr::IsRFC4193()` and `CNetAddr::IsTor()` cannot be `true` at the same time.\n  * Drop Tor v2 addresses when loading addrman from `peers.dat` - they would have been loaded as dummy-all-zeros IPv6 addresses and linger in addrman, wasting space.\n\nACKs for top commit:\n  sipa:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee. Reviewed the code, and tested with -DDEBUG_ADDRMAN (unit tests + mainnet run with peers.dat that contained v2 onions).\n  laanwj:\n    Code review and lightly tested ACK 00b875ba9414463d0041da6924fd9b54d6a06dee\n  jonatack:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee reviewed, debug-built with -DEBUG_ADDRMAN rebased to current master, restarted node on mainnet/signet/testnet and verified that on each chain -addrinfo shows no change in address counts (as expected). Added some sanity check asserts, rebuilt/re-ran test. Checked that the new test fails on master with \"test/addrman_tests.cpp(824): error: in \"addrman_tests/remove_invalid\": check addrman.size() == 2 has failed [4 != 2]\"\n  jarolrod:\n    ACK 00b875ba9414463d0041da6924fd9b54d6a06dee\n\nTree-SHA512: 6ed8e6745134b1b94fffaba28482de909ea39483b46b7f57bda61cdbae7a51251d15cb674de3631772fbeabe153d77a19269f96e62a89102a2d5c01e48f0ba06\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9686164220041b8839039732295f165d9e5d015",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9686164220041b8839039732295f165d9e5d015",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9686164220041b8839039732295f165d9e5d015/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7"
      },
      {
        "sha": "00b875ba9414463d0041da6924fd9b54d6a06dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00b875ba9414463d0041da6924fd9b54d6a06dee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00b875ba9414463d0041da6924fd9b54d6a06dee"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 79,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8192b4eba666c6d20eff9de1ce1f1ffd0dd4b0ff",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9686164220041b8839039732295f165d9e5d015/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9686164220041b8839039732295f165d9e5d015/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d9686164220041b8839039732295f165d9e5d015",
        "patch": "@@ -77,6 +77,38 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n+void CAddrMan::RemoveInvalid()\n+{\n+    for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n+        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvNew[bucket][i];\n+            if (id != -1 && !mapInfo[id].IsValid()) {\n+                ClearNew(bucket, i);\n+            }\n+        }\n+    }\n+\n+    for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n+        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvTried[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            const auto& addr_info = mapInfo[id];\n+            if (addr_info.IsValid()) {\n+                continue;\n+            }\n+            vvTried[bucket][i] = -1;\n+            --nTried;\n+            SwapRandom(addr_info.nRandomPos, vRandom.size() - 1);\n+            vRandom.pop_back();\n+            mapAddr.erase(addr_info);\n+            mapInfo.erase(id);\n+            m_tried_collisions.erase(id);\n+        }\n+    }\n+}\n+\n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n     AssertLockHeld(cs);"
      },
      {
        "sha": "c2f425f2fa8f343eee138e2208e378005c138159",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9686164220041b8839039732295f165d9e5d015/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9686164220041b8839039732295f165d9e5d015/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d9686164220041b8839039732295f165d9e5d015",
        "patch": "@@ -450,6 +450,8 @@ class CAddrMan\n             LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions\\n\", nLostUnk, nLost);\n         }\n \n+        RemoveInvalid();\n+\n         Check();\n     }\n \n@@ -762,6 +764,9 @@ class CAddrMan\n     //! Update an entry's service bits.\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    //! Remove invalid addresses.\n+    void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     friend class CAddrManTest;\n };\n "
      },
      {
        "sha": "e7b3377475bc0687bbc7baf792f97249040f9d59",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9686164220041b8839039732295f165d9e5d015/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9686164220041b8839039732295f165d9e5d015/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=d9686164220041b8839039732295f165d9e5d015",
        "patch": "@@ -489,7 +489,7 @@ bool CNetAddr::IsValid() const\n  */\n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsRFC7343() || IsLocal() || IsInternal());\n+    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || IsRFC4193() || IsRFC4843() || IsRFC7343() || IsLocal() || IsInternal());\n }\n \n /**"
      },
      {
        "sha": "1103292c1a8738e6d111d8fc49ea8c840498de75",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9686164220041b8839039732295f165d9e5d015/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9686164220041b8839039732295f165d9e5d015/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d9686164220041b8839039732295f165d9e5d015",
        "patch": "@@ -783,6 +783,46 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     BOOST_CHECK(bucketAndEntry_asmap1_deser_addr1.second != bucketAndEntry_asmap1_deser_addr2.second);\n }\n \n+BOOST_AUTO_TEST_CASE(remove_invalid)\n+{\n+    // Confirm that invalid addresses are ignored in unserialization.\n+\n+    CAddrManTest addrman;\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    const CAddress new1{ResolveService(\"5.5.5.5\"), NODE_NONE};\n+    const CAddress new2{ResolveService(\"6.6.6.6\"), NODE_NONE};\n+    const CAddress tried1{ResolveService(\"7.7.7.7\"), NODE_NONE};\n+    const CAddress tried2{ResolveService(\"8.8.8.8\"), NODE_NONE};\n+\n+    addrman.Add({new1, tried1, new2, tried2}, CNetAddr{});\n+    addrman.Good(tried1);\n+    addrman.Good(tried2);\n+    BOOST_REQUIRE_EQUAL(addrman.size(), 4);\n+\n+    stream << addrman;\n+\n+    const std::string str{stream.str()};\n+    size_t pos;\n+\n+    const char new2_raw[]{6, 6, 6, 6};\n+    const uint8_t new2_raw_replacement[]{0, 0, 0, 0}; // 0.0.0.0 is !IsValid()\n+    pos = str.find(new2_raw, 0, sizeof(new2_raw));\n+    BOOST_REQUIRE(pos != std::string::npos);\n+    BOOST_REQUIRE(pos + sizeof(new2_raw_replacement) <= stream.size());\n+    memcpy(stream.data() + pos, new2_raw_replacement, sizeof(new2_raw_replacement));\n+\n+    const char tried2_raw[]{8, 8, 8, 8};\n+    const uint8_t tried2_raw_replacement[]{255, 255, 255, 255}; // 255.255.255.255 is !IsValid()\n+    pos = str.find(tried2_raw, 0, sizeof(tried2_raw));\n+    BOOST_REQUIRE(pos != std::string::npos);\n+    BOOST_REQUIRE(pos + sizeof(tried2_raw_replacement) <= stream.size());\n+    memcpy(stream.data() + pos, tried2_raw_replacement, sizeof(tried2_raw_replacement));\n+\n+    addrman.Clear();\n+    stream >> addrman;\n+    BOOST_CHECK_EQUAL(addrman.size(), 2);\n+}\n \n BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n {"
      },
      {
        "sha": "6cb81901cb34a45552db9322fed0e9987046a0b7",
        "filename": "src/test/fuzz/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9686164220041b8839039732295f165d9e5d015/src/test/fuzz/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9686164220041b8839039732295f165d9e5d015/src/test/fuzz/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/netaddress.cpp?ref=d9686164220041b8839039732295f165d9e5d015",
        "patch": "@@ -54,7 +54,7 @@ FUZZ_TARGET(netaddress)\n     (void)net_addr.IsRFC3927();\n     (void)net_addr.IsRFC3964();\n     if (net_addr.IsRFC4193()) {\n-        assert(net_addr.GetNetwork() == Network::NET_ONION || net_addr.GetNetwork() == Network::NET_INTERNAL || net_addr.GetNetwork() == Network::NET_UNROUTABLE);\n+        assert(net_addr.GetNetwork() == Network::NET_INTERNAL || net_addr.GetNetwork() == Network::NET_UNROUTABLE);\n     }\n     (void)net_addr.IsRFC4380();\n     (void)net_addr.IsRFC4843();"
      }
    ]
  },
  {
    "sha": "df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjJiNWRhZGZiMmRjMjFiMDVlNWE2MGI3MTk4N2ZiNWI5NjIwMWY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-08T15:43:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-08T15:43:14Z"
      },
      "message": "Merge bitcoin/bitcoin#22408: test: add tests for `bad-txns-prevout-null` reject reason\n\n1f449586a9e39bc4fb53cb5c7a31362e47aea19b test: add `bad-txns-prevout-null` test to mempool_accept.py (Sebastian Falbesoner)\naa0a5bb70d77739d43d5a9ceae78fb0c6fafd435 test: add `bad-txns-prevout-null` test case to invalid_txs.py (Sebastian Falbesoner)\n\nPull request description:\n\n  This simple PR adds missing tests for the reject reason `bad-txns-prevout-null`, which is thrown in the function `CheckTransaction()`: https://github.com/bitcoin/bitcoin/blob/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/consensus/tx_check.cpp#L52-L54\n\n  Basically this condition is met for non-coinbase transactions (the code snippet above only hits if `!tx.IsCoinBase()`) with coinbase-like outpoints, i.e. hash=0, n=0xffffffff.\n\n  Can be tested by running the functional tests `feature_block.py`, `p2p_invalid_tx.py` and `mempool_accept.py`. Not sure if the redundancy in the tests is desired (I guess it would make sense if the mempool acceptance test also makes use of the invalid_txs templates?).\n\nACKs for top commit:\n  rajarshimaitra:\n    tACK https://github.com/bitcoin/bitcoin/pull/22408/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b\n  brunoerg:\n    tACK 1f449586a9e39bc4fb53cb5c7a31362e47aea19b\n  kristapsk:\n    ACK 1f449586a9e39bc4fb53cb5c7a31362e47aea19b, code looks correct and all tests pass.\n\nTree-SHA512: 2d4f940a6ac8e0d80d2670c9e1111cbf43ae6ac62809a2ccf17cffee9a41d387ea4d889ee300eb4a407c055b13bfa5d37102a32ed59964a9b6950bd907ba7204",
      "tree": {
        "sha": "37f3dbc6503dbd92bd43ada813a6132a61829859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37f3dbc6503dbd92bd43ada813a6132a61829859"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUji0AwAxepCYjbr6N6wsEu9GctyUfIvSPVR5Usl3c8D7PZqt4I0g7Dfrs2h9Ab5\nXx23IFYLqmLDQvi8OpT812zq9iRBIpOdhFOoeZDSB6c3T3QV2D+qmpq1q9KTy0/W\niLfBVBsN0zZ4RopvX4gUNsIqDolCHKQ1iwAOhhSJISxGqX8SmAFaiSy5fLRnF/tq\n5DSciq5pEeKgcVsWuYPnsmnVI0RlQaExhwWTJZtrLmqRqsiwrV3tRqNv0u5qNnW0\nftZFmoNUDow94hu2Ks0iR2Xp5NdmWKUg63570KhCbueCR3wR2HDy+oRByetodvgV\ny3NfMk+M/nqKaCpAHX0+OxqQI6Z/vHYK5Zh3MNoYVdXONoAWLY2pnh4bHfr0hESI\nRFQTwTFWFrWjoLJbPHVpfFeSKg8Fd7Gof48r4CP60W1hgJfFnuHMicLyZp0AFmvq\nxevTMrUE5TawqSNA8c1L4y3RHtTdMuUD5ZEFcbuIK8xkM7/S0CdpYq2jJE7gVzvx\nVX4lhOHu\n=jiyp\n-----END PGP SIGNATURE-----",
        "payload": "tree 37f3dbc6503dbd92bd43ada813a6132a61829859\nparent d9686164220041b8839039732295f165d9e5d015\nparent 1f449586a9e39bc4fb53cb5c7a31362e47aea19b\nauthor MarcoFalke <falke.marco@gmail.com> 1625758992 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625758994 +0200\n\nMerge bitcoin/bitcoin#22408: test: add tests for `bad-txns-prevout-null` reject reason\n\n1f449586a9e39bc4fb53cb5c7a31362e47aea19b test: add `bad-txns-prevout-null` test to mempool_accept.py (Sebastian Falbesoner)\naa0a5bb70d77739d43d5a9ceae78fb0c6fafd435 test: add `bad-txns-prevout-null` test case to invalid_txs.py (Sebastian Falbesoner)\n\nPull request description:\n\n  This simple PR adds missing tests for the reject reason `bad-txns-prevout-null`, which is thrown in the function `CheckTransaction()`: https://github.com/bitcoin/bitcoin/blob/a62fc35a150da584d39d7cd01ade14bbb5002fb9/src/consensus/tx_check.cpp#L52-L54\n\n  Basically this condition is met for non-coinbase transactions (the code snippet above only hits if `!tx.IsCoinBase()`) with coinbase-like outpoints, i.e. hash=0, n=0xffffffff.\n\n  Can be tested by running the functional tests `feature_block.py`, `p2p_invalid_tx.py` and `mempool_accept.py`. Not sure if the redundancy in the tests is desired (I guess it would make sense if the mempool acceptance test also makes use of the invalid_txs templates?).\n\nACKs for top commit:\n  rajarshimaitra:\n    tACK https://github.com/bitcoin/bitcoin/pull/22408/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b\n  brunoerg:\n    tACK 1f449586a9e39bc4fb53cb5c7a31362e47aea19b\n  kristapsk:\n    ACK 1f449586a9e39bc4fb53cb5c7a31362e47aea19b, code looks correct and all tests pass.\n\nTree-SHA512: 2d4f940a6ac8e0d80d2670c9e1111cbf43ae6ac62809a2ccf17cffee9a41d387ea4d889ee300eb4a407c055b13bfa5d37102a32ed59964a9b6950bd907ba7204\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9686164220041b8839039732295f165d9e5d015",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9686164220041b8839039732295f165d9e5d015",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9686164220041b8839039732295f165d9e5d015"
      },
      {
        "sha": "1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f449586a9e39bc4fb53cb5c7a31362e47aea19b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f449586a9e39bc4fb53cb5c7a31362e47aea19b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "95c7370995f888fc2094c0d7ab0e9f489cec49f3",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "patch": "@@ -151,6 +151,19 @@ def get_tx(self):\n         return tx\n \n \n+class PrevoutNullInput(BadTxTemplate):\n+    reject_reason = 'bad-txns-prevout-null'\n+    expect_disconnect = True\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(self.valid_txin)\n+        tx.vin.append(CTxIn(COutPoint(hash=0, n=0xffffffff)))\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n class NonexistentInput(BadTxTemplate):\n     reject_reason = None  # Added as an orphan tx.\n     expect_disconnect = False"
      },
      {
        "sha": "3b69c55f2ca88251147c672522cf8fc5df645036",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "patch": "@@ -13,6 +13,7 @@\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n     COutPoint,\n+    CTxIn,\n     CTxOut,\n     MAX_BLOCK_BASE_SIZE,\n     MAX_MONEY,\n@@ -247,6 +248,14 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n \n+        self.log.info('A non-coinbase transaction with coinbase-like outpoint')\n+        tx = tx_from_hex(raw_tx_reference)\n+        tx.vin.append(CTxIn(COutPoint(hash=0, n=0xffffffff)))\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bad-txns-prevout-null'}],\n+            rawtxs=[tx.serialize().hex()],\n+        )\n+\n         self.log.info('A coinbase transaction')\n         # Pick the input of the first tx we signed, so it has to be a coinbase tx\n         raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])"
      }
    ]
  },
  {
    "sha": "34d1d6a112709cada2c415deae7f7989b2d8c2f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGQxZDZhMTEyNzA5Y2FkYTJjNDE1ZGVhZTdmNzk4OWIyZDhjMmYz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-09T02:17:57Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-09T02:20:16Z"
      },
      "message": "Merge bitcoin/bitcoin#22381: guix: Test security-check sanity before performing them (with macOS)\n\n5b4703c6a70db2fa72fcace56a15db07d4b0acf1 guix: Test security-check sanity before performing them (Carl Dong)\n6cf3345297d371b4785d80d54e802b52ff09e8c2 scripts: adjust test-symbol-check for guix release environment (fanquake)\n1946b5f77cb5a6bb37500252079c3582cac4a6c9 scripts: more robustly test macOS symbol checks (fanquake)\na8127b34bce3597b8091e14057c926197966a234 build: Use and test PE binutils with --reloc-section (Carl Dong)\n678348db515c770c4dddfac512cdd97be11d407d guix: Patch binutils to add security-related disable flags (Carl Dong)\n9fdc8afe117b7b1ea845f8acae9e831922b8f92b devtools: Improve *-check.py tool detection (Carl Dong)\nbda62eab38c5dd74e222eddedbca19ace9df6daa ci: skip running the Linux test-security-check target for now (fanquake)\nd6ef3543ae16847d5a91fa9271acee9bd2164b32 lint: Run mypy with --show-error-codes (Carl Dong)\n\nPull request description:\n\n  This is #20980 rebased (to include the Boost Process fix), and with an additional commit (892d6897f1e613084aa0517a660eab2412308e6e) to fix running the `test-security-check` target for the macOS build. It should pass inside Guix, as well as when cross-compiling on Ubuntu, or building natively on macOS.\n\n  Note that the `test-security-check` may output some warnings (similar too):\n  ```bash\n  ld: warning: passed two min versions (10.14, 11.4) for platform macOS. Using 11.4.\n  ld: warning: passed two min versions (10.14, 11.4) for platform macOS. Using 11.4.\n  ld: warning: passed two min versions (10.14, 10.14) for platform macOS. Using 10.14.\n  ```\n  but those can be ignored, and come about due to us passing `-platform_version` when `-mmacosx-version-min` is already part of `CC`.\n\n  Guix builds:\n  ```bash\n  71ed0c7a13a4726300779ffc87f7d271086a2744c36896fe6dc51fe3dc33df2e  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/SHA256SUMS.part\n  9273980a17052c8ec45b77579781c14ab5d189fa25aa29907d5115513dd302b1  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/bitcoin-5b4703c6a70d-aarch64-linux-gnu-debug.tar.gz\n  9c042179af43c8896eb95a34294df15d4910308dcdba40b2010cd36e192938b8  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/bitcoin-5b4703c6a70d-aarch64-linux-gnu.tar.gz\n  1ceddecac113f50a952ba6a201cdcdb722e3dc804e663f219bfac8268ce42bf0  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/SHA256SUMS.part\n  759597c4e925e75db4a2381c06cda9b9f4e4674c23436148676b31c9be05c7aa  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/bitcoin-5b4703c6a70d-arm-linux-gnueabihf-debug.tar.gz\n  34e3b6beabaf8c95d7c2ca0d2c3ac4411766694ef43e00bd9783badbbaf045a7  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/bitcoin-5b4703c6a70d-arm-linux-gnueabihf.tar.gz\n  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  guix-build-5b4703c6a70d/output/dist-archive/SKIPATTEST.TAG\n  3664f6ceee7898caa374281fd877a7597fe491fa2e9f0c174c28d889d60b559c  guix-build-5b4703c6a70d/output/dist-archive/bitcoin-5b4703c6a70d.tar.gz\n  d6bc35ba0750c1440bb32831b8c12cddee62f6dce10fec2650897444c2bf4748  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/SHA256SUMS.part\n  a836edf6474ba0c16c19bb217549bac7936c1b44306ed512df58f607ee5568f2  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/bitcoin-5b4703c6a70d-powerpc64-linux-gnu-debug.tar.gz\n  7cc91c6805d5069ca3bd1771e77d95f83eb184b137198cbf84d1d11d0a5c5afe  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/bitcoin-5b4703c6a70d-powerpc64-linux-gnu.tar.gz\n  93b4cb7b83c4975120ad5de5a92f050f5760a2a3f2c37c204c647f5a581c924a  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/SHA256SUMS.part\n  2266e2c5d0dafa28c6c057ccfc1c439baeab1d714d8c3f64a83015d2827116d2  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/bitcoin-5b4703c6a70d-powerpc64le-linux-gnu-debug.tar.gz\n  85f41f42c319b83d049d6fd2e2278c07b40a1e28a2eac596427822c0eef9dc3f  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/bitcoin-5b4703c6a70d-powerpc64le-linux-gnu.tar.gz\n  1499ca9119926083d8c3714ca10d8d4c8d864cbeee8848fd8445b7a1d081222d  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/SHA256SUMS.part\n  1995fc1a2e45c49d4b0718aff5dcdac931917e8ae9e762fd23f1126abcecc248  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/bitcoin-5b4703c6a70d-riscv64-linux-gnu-debug.tar.gz\n  266889eb58429a470f0fd7bb123f2ae09b0aef86c47b0390938b3634a8f748a9  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/bitcoin-5b4703c6a70d-riscv64-linux-gnu.tar.gz\n  cdc3a0dcf80b110443dac5ddf8bc951001a776a651c898c5ea49bb2d487bfe29  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/SHA256SUMS.part\n  8538d1eab96c97866b24546c453d95822f24cf9c6638b42ba523eb7aa441cb26  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx-unsigned.dmg\n  d1b73133f1da68586b07292a8425f7f851e93f599c016376f23728c041cf39cc  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx-unsigned.tar.gz\n  5ad94c5f8a5f29405955ff3ab35d137de1acc04398d6c8298fb187b57a6e316a  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx64.tar.gz\n  8c6d7b3f847faa7b4d16ceecf228f26f146ea982615c1d7a00c57f9230a0c484  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/SHA256SUMS.part\n  d0a8c99750319ad8046cfa132a54e5c13a08351f94439ae9af0f8e5486c2c2ea  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/bitcoin-5b4703c6a70d-x86_64-linux-gnu-debug.tar.gz\n  d816bb26dd4b0e309f2f576b1cccc6d78743fb2f357daad2da09bb1177330971  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/bitcoin-5b4703c6a70d-x86_64-linux-gnu.tar.gz\n  65caaa7f648c7eab1eb82c3331a2ca25b8cd4fe41439de55604501e02571de55  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/SHA256SUMS.part\n  5bf6f7328cbceb0db22a2d7babb07b60cb6dcc19a6db84a1698589b7f5173a06  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win-unsigned.tar.gz\n  7aabcb56115decef78d3797840b6e49dbc9b202d56f892490e92616fb06fec9e  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64-debug.zip\n  2f369694648ff9dc5ca1261a1e5874b1c7408ccf2802f9caef56c1334e8a5b7c  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64-setup-unsigned.exe\n  1c1f92513c4aad38419ff49a7b80bf10e6b1eca01ee8c5e3b2acd1768cf1e3d5  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64.zip\n  ```\n\nACKs for top commit:\n  hebasto:\n    Approach ACK 5b4703c6a70db2fa72fcace56a15db07d4b0acf1.\n\nTree-SHA512: 2cd92a245ea64ef7176cf402a1fa5348a9421c30a4d30d01c950c48f6dcc15cf22ce69ffe1657be97e5fccc14bd933d64683c4439b695528ce3dc34d72dda927",
      "tree": {
        "sha": "b2872af5f082317d0c9664399bfad142c4e8af8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2872af5f082317d0c9664399bfad142c4e8af8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34d1d6a112709cada2c415deae7f7989b2d8c2f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDnsmAACgkQLuufXMCV\nJsEYchAApFcDrALVIriRoQXRR7a13XJqFmZXeVq6j+oIy/FkK8BsQDFwgZhONJAR\n7TUFPwZT98T3RdA3A7XRtnEs2jqr+b1DWLwvQ3MuURyAspYVddmd2iY253TvkuNg\nRhtllvL+cii9oVkZQHixfiBt3Z5ClUlDyQmU3lvIikqV+5JiY4+mpVykCeqcPLOE\nFKDNbZ8geSAnuvPFMJk3NGdo42ZB7CIOhmWhwUS8cAq8q4o5kyXVUQ35W7k2GHY8\n5PDXqjWE1NgMntum6UCRTDdgW45Et4XuZLoNnQqvWZ5oumFRP+a/HBCnRJ5+Wv00\nHoy/anqXldShYb7GCis55GBzCFCELah/VIQvED0/w1jlChKF7DPwmRwNlzB9LcHd\nMIYanmJbq4CViRLkn2WqE5HzZY5YcUMeSsT2p5DqIRx6SxhCXheP8hjlFiZLKORY\n7D5h+yPrTUHrOEy69Jn6sOgV5YYYhkrsUziUS93qkWdh6M3EO7G8TqL/vcs4ZQVb\nnKXWWChSqUiAvY/yG90Ryyz+zK5jJyUdABV6WY9toPbH4qr+BH2HYK8q1UxvJWk3\naDYP+yL06Fvcwb6Y3QfMeR352LsiFYzrVWsHHEO4J0oOobMbtlmaVVdo4r2oDwME\nwpigIKIozcanzC5mvuVvb3bcfN9+4wmE7nfn8Hu0IQFUjZnYETA=\n=uAkY\n-----END PGP SIGNATURE-----",
        "payload": "tree b2872af5f082317d0c9664399bfad142c4e8af8f\nparent df2b5dadfb2dc21b05e5a60b71987fb5b96201f5\nparent 5b4703c6a70db2fa72fcace56a15db07d4b0acf1\nauthor fanquake <fanquake@gmail.com> 1625797077 +0800\ncommitter fanquake <fanquake@gmail.com> 1625797216 +0800\n\nMerge bitcoin/bitcoin#22381: guix: Test security-check sanity before performing them (with macOS)\n\n5b4703c6a70db2fa72fcace56a15db07d4b0acf1 guix: Test security-check sanity before performing them (Carl Dong)\n6cf3345297d371b4785d80d54e802b52ff09e8c2 scripts: adjust test-symbol-check for guix release environment (fanquake)\n1946b5f77cb5a6bb37500252079c3582cac4a6c9 scripts: more robustly test macOS symbol checks (fanquake)\na8127b34bce3597b8091e14057c926197966a234 build: Use and test PE binutils with --reloc-section (Carl Dong)\n678348db515c770c4dddfac512cdd97be11d407d guix: Patch binutils to add security-related disable flags (Carl Dong)\n9fdc8afe117b7b1ea845f8acae9e831922b8f92b devtools: Improve *-check.py tool detection (Carl Dong)\nbda62eab38c5dd74e222eddedbca19ace9df6daa ci: skip running the Linux test-security-check target for now (fanquake)\nd6ef3543ae16847d5a91fa9271acee9bd2164b32 lint: Run mypy with --show-error-codes (Carl Dong)\n\nPull request description:\n\n  This is #20980 rebased (to include the Boost Process fix), and with an additional commit (892d6897f1e613084aa0517a660eab2412308e6e) to fix running the `test-security-check` target for the macOS build. It should pass inside Guix, as well as when cross-compiling on Ubuntu, or building natively on macOS.\n\n  Note that the `test-security-check` may output some warnings (similar too):\n  ```bash\n  ld: warning: passed two min versions (10.14, 11.4) for platform macOS. Using 11.4.\n  ld: warning: passed two min versions (10.14, 11.4) for platform macOS. Using 11.4.\n  ld: warning: passed two min versions (10.14, 10.14) for platform macOS. Using 10.14.\n  ```\n  but those can be ignored, and come about due to us passing `-platform_version` when `-mmacosx-version-min` is already part of `CC`.\n\n  Guix builds:\n  ```bash\n  71ed0c7a13a4726300779ffc87f7d271086a2744c36896fe6dc51fe3dc33df2e  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/SHA256SUMS.part\n  9273980a17052c8ec45b77579781c14ab5d189fa25aa29907d5115513dd302b1  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/bitcoin-5b4703c6a70d-aarch64-linux-gnu-debug.tar.gz\n  9c042179af43c8896eb95a34294df15d4910308dcdba40b2010cd36e192938b8  guix-build-5b4703c6a70d/output/aarch64-linux-gnu/bitcoin-5b4703c6a70d-aarch64-linux-gnu.tar.gz\n  1ceddecac113f50a952ba6a201cdcdb722e3dc804e663f219bfac8268ce42bf0  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/SHA256SUMS.part\n  759597c4e925e75db4a2381c06cda9b9f4e4674c23436148676b31c9be05c7aa  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/bitcoin-5b4703c6a70d-arm-linux-gnueabihf-debug.tar.gz\n  34e3b6beabaf8c95d7c2ca0d2c3ac4411766694ef43e00bd9783badbbaf045a7  guix-build-5b4703c6a70d/output/arm-linux-gnueabihf/bitcoin-5b4703c6a70d-arm-linux-gnueabihf.tar.gz\n  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  guix-build-5b4703c6a70d/output/dist-archive/SKIPATTEST.TAG\n  3664f6ceee7898caa374281fd877a7597fe491fa2e9f0c174c28d889d60b559c  guix-build-5b4703c6a70d/output/dist-archive/bitcoin-5b4703c6a70d.tar.gz\n  d6bc35ba0750c1440bb32831b8c12cddee62f6dce10fec2650897444c2bf4748  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/SHA256SUMS.part\n  a836edf6474ba0c16c19bb217549bac7936c1b44306ed512df58f607ee5568f2  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/bitcoin-5b4703c6a70d-powerpc64-linux-gnu-debug.tar.gz\n  7cc91c6805d5069ca3bd1771e77d95f83eb184b137198cbf84d1d11d0a5c5afe  guix-build-5b4703c6a70d/output/powerpc64-linux-gnu/bitcoin-5b4703c6a70d-powerpc64-linux-gnu.tar.gz\n  93b4cb7b83c4975120ad5de5a92f050f5760a2a3f2c37c204c647f5a581c924a  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/SHA256SUMS.part\n  2266e2c5d0dafa28c6c057ccfc1c439baeab1d714d8c3f64a83015d2827116d2  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/bitcoin-5b4703c6a70d-powerpc64le-linux-gnu-debug.tar.gz\n  85f41f42c319b83d049d6fd2e2278c07b40a1e28a2eac596427822c0eef9dc3f  guix-build-5b4703c6a70d/output/powerpc64le-linux-gnu/bitcoin-5b4703c6a70d-powerpc64le-linux-gnu.tar.gz\n  1499ca9119926083d8c3714ca10d8d4c8d864cbeee8848fd8445b7a1d081222d  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/SHA256SUMS.part\n  1995fc1a2e45c49d4b0718aff5dcdac931917e8ae9e762fd23f1126abcecc248  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/bitcoin-5b4703c6a70d-riscv64-linux-gnu-debug.tar.gz\n  266889eb58429a470f0fd7bb123f2ae09b0aef86c47b0390938b3634a8f748a9  guix-build-5b4703c6a70d/output/riscv64-linux-gnu/bitcoin-5b4703c6a70d-riscv64-linux-gnu.tar.gz\n  cdc3a0dcf80b110443dac5ddf8bc951001a776a651c898c5ea49bb2d487bfe29  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/SHA256SUMS.part\n  8538d1eab96c97866b24546c453d95822f24cf9c6638b42ba523eb7aa441cb26  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx-unsigned.dmg\n  d1b73133f1da68586b07292a8425f7f851e93f599c016376f23728c041cf39cc  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx-unsigned.tar.gz\n  5ad94c5f8a5f29405955ff3ab35d137de1acc04398d6c8298fb187b57a6e316a  guix-build-5b4703c6a70d/output/x86_64-apple-darwin18/bitcoin-5b4703c6a70d-osx64.tar.gz\n  8c6d7b3f847faa7b4d16ceecf228f26f146ea982615c1d7a00c57f9230a0c484  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/SHA256SUMS.part\n  d0a8c99750319ad8046cfa132a54e5c13a08351f94439ae9af0f8e5486c2c2ea  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/bitcoin-5b4703c6a70d-x86_64-linux-gnu-debug.tar.gz\n  d816bb26dd4b0e309f2f576b1cccc6d78743fb2f357daad2da09bb1177330971  guix-build-5b4703c6a70d/output/x86_64-linux-gnu/bitcoin-5b4703c6a70d-x86_64-linux-gnu.tar.gz\n  65caaa7f648c7eab1eb82c3331a2ca25b8cd4fe41439de55604501e02571de55  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/SHA256SUMS.part\n  5bf6f7328cbceb0db22a2d7babb07b60cb6dcc19a6db84a1698589b7f5173a06  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win-unsigned.tar.gz\n  7aabcb56115decef78d3797840b6e49dbc9b202d56f892490e92616fb06fec9e  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64-debug.zip\n  2f369694648ff9dc5ca1261a1e5874b1c7408ccf2802f9caef56c1334e8a5b7c  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64-setup-unsigned.exe\n  1c1f92513c4aad38419ff49a7b80bf10e6b1eca01ee8c5e3b2acd1768cf1e3d5  guix-build-5b4703c6a70d/output/x86_64-w64-mingw32/bitcoin-5b4703c6a70d-win64.zip\n  ```\n\nACKs for top commit:\n  hebasto:\n    Approach ACK 5b4703c6a70db2fa72fcace56a15db07d4b0acf1.\n\nTree-SHA512: 2cd92a245ea64ef7176cf402a1fa5348a9421c30a4d30d01c950c48f6dcc15cf22ce69ffe1657be97e5fccc14bd933d64683c4439b695528ce3dc34d72dda927\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d1d6a112709cada2c415deae7f7989b2d8c2f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34d1d6a112709cada2c415deae7f7989b2d8c2f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d1d6a112709cada2c415deae7f7989b2d8c2f3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5"
      },
      {
        "sha": "5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4703c6a70db2fa72fcace56a15db07d4b0acf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4703c6a70db2fa72fcace56a15db07d4b0acf1"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 262,
      "deletions": 51
    },
    "files": [
      {
        "sha": "3ac698b96f3fb73bb37b74299ad3aecf6e42ec16",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -58,6 +58,7 @@ DIST_SHARE = \\\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/utils.py \\\n            $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n@@ -366,14 +367,14 @@ clean-local: clean-docs\n \n test-security-check:\n if TARGET_DARWIN\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n endif\n if TARGET_LINUX\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "8869b2a08396a24be4f67b1397cb7a8973f057c0",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -13,5 +13,4 @@ export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n-export RUN_SECURITY_TESTS=\"true\"\n export PIP_PACKAGES=\"lief\""
      },
      {
        "sha": "6f78e8dec425283deb02b18f89e6756a5fdf33ae",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -900,6 +900,7 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n+  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])"
      },
      {
        "sha": "61f727fa6342689775e2301c2d5736b59d906cce",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -12,12 +12,13 @@\n '''\n import subprocess\n import sys\n-import os\n from typing import List, Optional\n \n import lief\n import pixie\n \n+from utils import determine_wellknown_cmd\n+\n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n # - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n@@ -60,7 +61,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -140,7 +140,7 @@ class CPPFilt(object):\n     Use a pipe to the 'c++filt' command.\n     '''\n     def __init__(self):\n-        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+        self.proc = subprocess.Popen(determine_wellknown_cmd('CPPFILT', 'c++filt'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n \n     def __call__(self, mangled):\n         self.proc.stdin.write(mangled + '\\n')"
      },
      {
        "sha": "14058e2cc8d5295ebcaa6007ac681d87e6b53a98",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -9,6 +9,8 @@\n import subprocess\n import unittest\n \n+from utils import determine_wellknown_cmd\n+\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -25,15 +27,15 @@ def clean_files(source, executable):\n     os.remove(executable)\n \n def call_security_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n@@ -54,26 +56,28 @@ def test_ELF(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n         clean_files(source, executable)\n \n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n@@ -95,4 +99,3 @@ def test_MACHO(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "7d83c5f751f0f901cd8cdc953bfa6435a7238aeb",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -7,41 +7,51 @@\n '''\n import os\n import subprocess\n+from typing import List\n import unittest\n \n-def call_symbol_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+from utils import determine_wellknown_cmd\n+\n+def call_symbol_check(cc: List[str], source, executable, options):\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     os.remove(source)\n     os.remove(executable)\n     return (p.returncode, p.stdout.rstrip())\n \n+def get_machine(cc: List[str]):\n+    p = subprocess.run([*cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n+\n+        # there's no way to do this test for RISC-V at the moment; we build for\n+        # RISC-V in a glibc 2.27 envinonment and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n \n-        # renameat2 was introduced in GLIBC 2.28, so is newer than the upper limit\n-        # of glibc for all platforms\n+        # nextup was introduced in GLIBC 2.24, so is newer than our supported\n+        # glibc (2.17), and available in our release build environment (2.24).\n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n                 #define _GNU_SOURCE\n-                #include <stdio.h>\n-                #include <linux/fs.h>\n+                #include <math.h>\n \n-                int renameat2(int olddirfd, const char *oldpath,\n-                    int newdirfd, const char *newpath, unsigned int flags);\n+                double nextup(double x);\n \n                 int main()\n                 {\n-                    renameat2(0, \"test\", 0, \"test_\", RENAME_EXCHANGE);\n+                    nextup(3.14);\n                     return 0;\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, []),\n-                (1, executable + ': symbol renameat2 from unsupported version GLIBC_2.28\\n' +\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (1, executable + ': symbol nextup from unsupported version GLIBC_2.24\\n' +\n                     executable + ': failed IMPORTED_SYMBOLS'))\n \n         # -lutil is part of the libc6 package so a safe bet that it's installed\n@@ -82,7 +92,7 @@ def test_ELF(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -96,7 +106,7 @@ def test_MACHO(self):\n \n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n             (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n                 f'{executable}: failed DYNAMIC_LIBRARIES MIN_OS SDK'))\n \n@@ -113,7 +123,7 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n                 (1, f'{executable}: failed MIN_OS SDK'))\n \n         source = 'test3.c'\n@@ -126,13 +136,13 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-mmacosx-version-min=10.14']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),\n                 (1, f'{executable}: failed SDK'))\n \n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -182,4 +192,3 @@ def test_PE(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Common utility functions\n+'''\n+import shutil\n+import sys\n+import os\n+from typing import List\n+\n+\n+def determine_wellknown_cmd(envvar, progname) -> List[str]:\n+    maybe_env = os.getenv(envvar)\n+    maybe_which = shutil.which(progname)\n+    if maybe_env:\n+        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n+    elif maybe_which:\n+        return [ maybe_which ]\n+    else:\n+        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "0b96949a6b57cddca902ae1add88d916262e297f",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -299,10 +299,11 @@ mkdir -p \"$DISTSRC\"\n     # Build Bitcoin Core\n     make --jobs=\"$JOBS\" ${V:+V=1}\n \n-    # Perform basic ELF security checks on a series of executables.\n+    # Check that symbol/security checks tools are sane.\n+    make test-security-check ${V:+V=1}\n+    # Perform basic security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed gcc, glibc and libstdc++\n-    # version symbols for Linux distro back-compatibility.\n+    # Check that executables only contain allowed version symbols.\n     make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n     mkdir -p \"$OUTDIR\""
      },
      {
        "sha": "e71cf525332d7a3d6c330a13c1b2878178beaa0f",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -80,6 +80,10 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n                  ((\"-rpath=\") \"-rpath-link=\"))\n                #t))))))))\n \n+(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n+  (package-with-extra-patches xbinutils\n+    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n+\n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n                               base-kernel-headers\n@@ -168,7 +172,7 @@ desirable for building Bitcoin Core release binaries.\"\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (cross-binutils target))\n+  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n          (pthreads-xgcc (make-gcc-with-pthreads\n                          (cross-gcc target"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -0,0 +1,171 @@\n+Description: Add disable opposites to the security-related flags\n+Author: Stephen Kitt <skitt@debian.org>\n+\n+This patch adds \"no-\" variants to disable the various security flags:\n+\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n+\n+--- a/ld/emultempl/pe.em\n++++ b/ld/emultempl/pe.em\n+@@ -259,9 +261,11 @@\n+ \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n+ /* DLLCharacteristics flags.  */\n+ #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n+-#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n+ #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n+-#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n+ #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n+ #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n+ #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n+@@ -271,6 +275,7 @@\n+ #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n+ #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n+ #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n++#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n+ \n+ static void\n+ gld${EMULATION_NAME}_add_options\n+@@ -342,8 +347,10 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -351,6 +358,7 @@\n+     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -485,9 +494,12 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -862,12 +874,21 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pe_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pe_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;\n+--- a/ld/emultempl/pep.em\n++++ b/ld/emultempl/pep.em\n+@@ -237,9 +240,12 @@\n+   OPTION_ENABLE_LONG_SECTION_NAMES,\n+   OPTION_DISABLE_LONG_SECTION_NAMES,\n+   OPTION_HIGH_ENTROPY_VA,\n++  OPTION_NO_HIGH_ENTROPY_VA,\n+   OPTION_DYNAMIC_BASE,\n++  OPTION_NO_DYNAMIC_BASE,\n+   OPTION_FORCE_INTEGRITY,\n+   OPTION_NX_COMPAT,\n++  OPTION_NO_NX_COMPAT,\n+   OPTION_NO_ISOLATION,\n+   OPTION_NO_SEH,\n+   OPTION_NO_BIND,\n+@@ -248,7 +254,8 @@\n+   OPTION_NO_INSERT_TIMESTAMP,\n+   OPTION_TERMINAL_SERVER_AWARE,\n+   OPTION_BUILD_ID,\n+-  OPTION_ENABLE_RELOC_SECTION\n++  OPTION_ENABLE_RELOC_SECTION,\n++  OPTION_DISABLE_RELOC_SECTION\n+ };\n+ \n+ static void\n+@@ -315,9 +322,12 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n++    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -327,6 +337,7 @@\n+     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -448,11 +461,15 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n+                                        layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -809,12 +826,24 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pep_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pep_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      /* fall through */\n++    case OPTION_NO_HIGH_ENTROPY_VA:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;"
      },
      {
        "sha": "7de5fb36ed4789f15f027705726f8b48ed936ea3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -814,23 +814,23 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if TARGET_DARWIN\n \t@echo \"Checking macOS dynamic libraries...\"\n-\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_WINDOWS\n \t@echo \"Checking Windows dynamic libraries...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_LINUX\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n libbitcoin_ipc_mpgen_input = \\"
      },
      {
        "sha": "c448fa6f9a6fbb2fb0bd188e1da2faed96f4a010",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d1d6a112709cada2c415deae7f7989b2d8c2f3/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d1d6a112709cada2c415deae7f7989b2d8c2f3/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "patch": "@@ -102,7 +102,7 @@ if ! PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; e\n     EXIT_CODE=1\n fi\n \n-if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n+if ! mypy --ignore-missing-imports --show-error-codes $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n     EXIT_CODE=1\n fi\n "
      }
    ]
  },
  {
    "sha": "efff9c3494a944a1a9288fec13e8bb5f23235920",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmZmOWMzNDk0YTk0NGExYTkyODhmZWMxM2U4YmI1ZjIzMjM1OTIw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-09T02:21:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-09T02:22:43Z"
      },
      "message": "Merge bitcoin/bitcoin#22176: test: Correct outstanding -Werror=sign-compare errors\n\n4e44f5bac4481d49ac53c458dcc5ca48e8b28414 test: Correct outstanding -Werror=sign-compare errors (Ben Woosley)\n\nPull request description:\n\n  I'm unclear on why these aren't failing on CI, but they failed for me locally, e.g.:\n\n  ```\n  In file included from /usr/local/include/boost/test/test_tools.hpp:46:\n  /usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned int' and 'const int' [-Werror,-Wsign-compare]\n      return left == right;\n             ~~~~ ^  ~~~~~\n  /usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned int, int>' requested here\n          return equal_impl( left, right );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned int, int>' requested here\n          return call_impl( left, right, left_is_array() );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned int, int>' requested here\n  BOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                   ^\n  /usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                           ^\n  /usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                                 ^\n  /usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                   ^\n  <scratch space>:153:1: note: expanded from here\n  BOOST_PP_REPEAT_1\n  ^\n  test/streams_tests.cpp:122:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n      BOOST_CHECK_EQUAL(varint, 54321);\n      ^\n\n  /usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned long long' and 'const long' [-Werror,-Wsign-compare]\n      return left == right;\n             ~~~~ ^  ~~~~~\n  /usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned long long, long>' requested here\n          return equal_impl( left, right );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned long long, long>' requested here\n          return call_impl( left, right, left_is_array() );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned long long, long>' requested here\n  BOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                   ^\n  /usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                           ^\n  /usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                                 ^\n  /usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                   ^\n  <scratch space>:161:1: note: expanded from here\n  BOOST_PP_REPEAT_1\n  ^\n  test/serfloat_tests.cpp:41:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned long long, long>' requested here\n      BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n      ^\n\nACKs for top commit:\n  theStack:\n    ACK 4e44f5bac4481d49ac53c458dcc5ca48e8b28414\n\nTree-SHA512: 8d9e5245676c61207ceacdf78c78a78ccc9fd2a2551d4d8df023513795591334aa2f5e1f4a2a8ed2bfeb381f1e226b6ba84c07e0de29a1f3f00da71f3a257bc1",
      "tree": {
        "sha": "9bf6b9aaf0909fd6e3a1dde4c133fa6e0fccc971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bf6b9aaf0909fd6e3a1dde4c133fa6e0fccc971"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efff9c3494a944a1a9288fec13e8bb5f23235920",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDnsvMACgkQLuufXMCV\nJsFtVBAAqLzKFfE1TsBf4PUQwDSboRT3/097Ycx/KxhGP1P7XemC33t9Fsd4sxv2\noPltednLsRTZJMCn9TEakwlhMZfGVgYU5LgbF4JRqRkE7PWX/av2WUstoXhiKri8\nMLOsj9HyYNIHkiJcUuCI6AN+WVfG23b7Um4dUGsoXiZ4P126w+COhxn7AarfX3UM\nYNPYjrlpKU7U2FqYwSQrcpw84NTDUquzmhb8DGGozrR4hFR50AHnCwf+6LizSmzB\nj6dX1JwXBoQD1bkI3YmahnAhSkeZHMx6frs7N160J75UK2efhMtsY7OvKcd3EI00\nhN4hqfgeirqbLpASGj0V/l/JUtpnaraUVYw1y5WwJ1Np3YFo0DL7fA0P08mp8mWZ\nG6T+47apF1g7XVeeKG/wP/6U1O+KfBsDbpglWrzMjCQBlhek7u5dXjLE6FcTDb0t\nCvrkNS/Pk7Rdo7kQVKslKtPi2o21aP30IEUr//uVFN+bmaG2jOpTY5ROAhFivPSS\nqSBTlVYXrVeEcH1ED3xTmnBxzLwvLkljF9hLJbK8OSPmH7Enl9naYELOQYrpZbsv\nAbCwYJ9x64xv35AHZTrU2kDHvPqcnBwMTzKRh4GPNGlpkQ5+fBL9xTzOAWF8h1KZ\nxrSbMC/5kFMKkOKq6uJdeqK8E2yfEOqsPxEWnJOO9x4QcHUPnMU=\n=n7dg\n-----END PGP SIGNATURE-----",
        "payload": "tree 9bf6b9aaf0909fd6e3a1dde4c133fa6e0fccc971\nparent 34d1d6a112709cada2c415deae7f7989b2d8c2f3\nparent 4e44f5bac4481d49ac53c458dcc5ca48e8b28414\nauthor fanquake <fanquake@gmail.com> 1625797290 +0800\ncommitter fanquake <fanquake@gmail.com> 1625797363 +0800\n\nMerge bitcoin/bitcoin#22176: test: Correct outstanding -Werror=sign-compare errors\n\n4e44f5bac4481d49ac53c458dcc5ca48e8b28414 test: Correct outstanding -Werror=sign-compare errors (Ben Woosley)\n\nPull request description:\n\n  I'm unclear on why these aren't failing on CI, but they failed for me locally, e.g.:\n\n  ```\n  In file included from /usr/local/include/boost/test/test_tools.hpp:46:\n  /usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned int' and 'const int' [-Werror,-Wsign-compare]\n      return left == right;\n             ~~~~ ^  ~~~~~\n  /usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned int, int>' requested here\n          return equal_impl( left, right );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned int, int>' requested here\n          return call_impl( left, right, left_is_array() );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned int, int>' requested here\n  BOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                   ^\n  /usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                           ^\n  /usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                                 ^\n  /usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                   ^\n  <scratch space>:153:1: note: expanded from here\n  BOOST_PP_REPEAT_1\n  ^\n  test/streams_tests.cpp:122:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n      BOOST_CHECK_EQUAL(varint, 54321);\n      ^\n\n  /usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned long long' and 'const long' [-Werror,-Wsign-compare]\n      return left == right;\n             ~~~~ ^  ~~~~~\n  /usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned long long, long>' requested here\n          return equal_impl( left, right );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned long long, long>' requested here\n          return call_impl( left, right, left_is_array() );\n                 ^\n  /usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned long long, long>' requested here\n  BOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                   ^\n  /usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                           ^\n  /usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                                 ^\n  /usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                   ^\n  <scratch space>:161:1: note: expanded from here\n  BOOST_PP_REPEAT_1\n  ^\n  test/serfloat_tests.cpp:41:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned long long, long>' requested here\n      BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n      ^\n\nACKs for top commit:\n  theStack:\n    ACK 4e44f5bac4481d49ac53c458dcc5ca48e8b28414\n\nTree-SHA512: 8d9e5245676c61207ceacdf78c78a78ccc9fd2a2551d4d8df023513795591334aa2f5e1f4a2a8ed2bfeb381f1e226b6ba84c07e0de29a1f3f00da71f3a257bc1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efff9c3494a944a1a9288fec13e8bb5f23235920",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efff9c3494a944a1a9288fec13e8bb5f23235920",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efff9c3494a944a1a9288fec13e8bb5f23235920/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d1d6a112709cada2c415deae7f7989b2d8c2f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34d1d6a112709cada2c415deae7f7989b2d8c2f3"
      },
      {
        "sha": "4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e44f5bac4481d49ac53c458dcc5ca48e8b28414"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7876c0bcdaf66e8aa34ce165fbb96d7fb9072100",
        "filename": "src/test/serfloat_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efff9c3494a944a1a9288fec13e8bb5f23235920/src/test/serfloat_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efff9c3494a944a1a9288fec13e8bb5f23235920/src/test/serfloat_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serfloat_tests.cpp?ref=efff9c3494a944a1a9288fec13e8bb5f23235920",
        "patch": "@@ -36,9 +36,9 @@ uint64_t TestDouble(double f) {\n } // namespace\n \n BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n-    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0U);\n     BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n-    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000U);\n     BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n     BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n     BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n@@ -48,8 +48,8 @@ BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n \n     // Roundtrip test on IEC559-compatible systems\n     if (std::numeric_limits<double>::is_iec559) {\n-        BOOST_CHECK_EQUAL(sizeof(double), 8);\n-        BOOST_CHECK_EQUAL(sizeof(uint64_t), 8);\n+        BOOST_CHECK_EQUAL(sizeof(double), 8U);\n+        BOOST_CHECK_EQUAL(sizeof(uint64_t), 8U);\n         // Test extreme values\n         TestDouble(std::numeric_limits<double>::min());\n         TestDouble(-std::numeric_limits<double>::min());"
      },
      {
        "sha": "acd0151e1a134db484731c7bdf8fa46f100fe737",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efff9c3494a944a1a9288fec13e8bb5f23235920/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efff9c3494a944a1a9288fec13e8bb5f23235920/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=efff9c3494a944a1a9288fec13e8bb5f23235920",
        "patch": "@@ -119,7 +119,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader_rvalue)\n     uint32_t varint = 0;\n     // Deserialize into r-value\n     reader >> VARINT(varint);\n-    BOOST_CHECK_EQUAL(varint, 54321);\n+    BOOST_CHECK_EQUAL(varint, 54321U);\n     BOOST_CHECK(reader.empty());\n }\n "
      }
    ]
  },
  {
    "sha": "d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWU0YzU2MzA5YWViNzM3NzJlM2E5ZDc3OWE5YzE1NzAyNGM5ZTFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-09T09:17:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-09T09:17:58Z"
      },
      "message": "Merge bitcoin/bitcoin#22363: test: refactor: use `script_util` helpers for creating P2{PKH,SH,WPKH,WSH} scripts\n\n905d672b743edf31531d095ffe800449eaffec69 test: use script_util helpers for creating P2W{PKH,SH} scripts (Sebastian Falbesoner)\n285a65ccfde2e811cfe01e916b998c02ee534a97 test: use script_util helpers for creating P2SH scripts (Sebastian Falbesoner)\nb57b633b942da162045b1fe7743a8abdfeaf60e2 test: use script_util helpers for creating P2PKH scripts (Sebastian Falbesoner)\n61b6a017a9f99ef072b2d1980dd547eb20093352 test: wallet util: fix multisig P2SH-P2WSH script creation (Sebastian Falbesoner)\n\nPull request description:\n\n  PR #18788 (commit 08067aebfd7e838e6ce6b030c31a69422260fc6f) introduced functions to generate output scripts for various types. This PR replaces all manual CScript creations in the P2PKH, P2SH, P2WPKH, P2WSH formats with those helpers in order to increase readability and maintainability over the functional test codebase. The first commit fixes a bug in the wallet_util helper module w.r.t. to P2SH-P2WSH script creation (the result is not used in any test so far, hence it can still be seen as refactoring).\n\n  The following table shows a summary of the output script patterns tackled in this PR:\n\n  | Type | master branch  | PR branch |\n  | ---------- | ------------- | ------------- |\n  | P2PKH | `CScript([OP_DUP, OP_HASH160, hash160(key), OP_EQUALVERIFY, OP_CHECKSIG])` | `key_to_p2pkh_script(key)`  |\n  |             | `CScript([OP_DUP, OP_HASH160, keyhash, OP_EQUALVERIFY, OP_CHECKSIG])` | `keyhash_to_p2pkh_script(keyhash)` |\n  | P2SH  | `CScript([OP_HASH160, hash160(script), OP_EQUAL])`  | `script_to_p2sh_script(script)` |\n  | P2WPKH | `CScript([OP_0, hash160(key)])` | `key_to_p2wpkh_script(key)` |\n  | P2WSH | `CScript([OP_0, sha256(script)])` | `script_to_p2wsh_script(script)` |\n\n  Note that the `key_to_...` helpers can't be used if an invalid key size (not 33 or 65 bytes) is passed, which is the case in some rare instances where the scripts still have to be created manually.\n\n  Possible follow-up ideas:\n  * further simplify by identifying P2SH-wrapped scripts and using `key_to_p2sh_p2wpkh_script()` and `script_to_p2sh_p2wsh_script()` helpers\n  * introduce and use `key_to_p2pk_script()` helper for P2PK scripts\n\nACKs for top commit:\n  rajarshimaitra:\n    tACK https://github.com/bitcoin/bitcoin/pull/22363/commits/905d672b743edf31531d095ffe800449eaffec69\n  LarryRuane:\n    tACK 905d672b743edf31531d095ffe800449eaffec69\n  0xB10C:\n    ACK 905d672b743edf31531d095ffe800449eaffec69\n  MarcoFalke:\n    review ACK 905d672b743edf31531d095ffe800449eaffec69 \ud83d\udd79\n\nTree-SHA512: 7ccfe69699bc81168ac122b03536720013355c1b2fbb088355b616015318644c4d1cd27e20c4f56c89ad083ae609add4bc838cf6316794d0edb0ce9cf7fa0fd8",
      "tree": {
        "sha": "44d388741f0652db899b35565d7f37ecddb697c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44d388741f0652db899b35565d7f37ecddb697c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjplgwAkxe9xO/LFf261S+wZbAVIH+NhHFRIyy4QZm2ZCsCkuu8IP3QFHrviULt\nvQu1a1i8qGI6JdWQ0HiN7W4C7vXGyFR139Bk6jAw5ZXHbI5QrILWfiL3Ws6ocVRz\nWPO0Q/ZKLiONWmRJNVmPOCGBxhIjp8nm0MSoTbWgzJvdRKR/vx1JoqdFz98j5pgl\nJT5GB7gnvbBr9hAczJhiykJTJBRXuKs68c2q0tr2vDOYT4qiuwSBRdceMcAwkZqG\nlGD+/DnXiJdTSRIEQgzhKXmiU7cdYE3EtZw4rY4eGNBm3AmvNB1TPtIVr7avyOFk\nj99ApKpO6BlyDf8Z2h2lqieLZ7qqwTjIAyx9Y1sEC0ppI364kEQae9Dp61SN3SKn\nW+A0Xfz2zIm9bzl4EJdpKNEszrkFdi/9qfEaQrVkMeRvpjIp58QU8y1k5Nt0W2mn\nx5XCEAuU8qPdOGN3zHyGTzVkC82x1pODIUxaAwT4Ph6hpe4dE7iBhiWBtwu+8TmE\ngZPD6/9c\n=IBBG\n-----END PGP SIGNATURE-----",
        "payload": "tree 44d388741f0652db899b35565d7f37ecddb697c0\nparent efff9c3494a944a1a9288fec13e8bb5f23235920\nparent 905d672b743edf31531d095ffe800449eaffec69\nauthor MarcoFalke <falke.marco@gmail.com> 1625822272 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1625822278 +0200\n\nMerge bitcoin/bitcoin#22363: test: refactor: use `script_util` helpers for creating P2{PKH,SH,WPKH,WSH} scripts\n\n905d672b743edf31531d095ffe800449eaffec69 test: use script_util helpers for creating P2W{PKH,SH} scripts (Sebastian Falbesoner)\n285a65ccfde2e811cfe01e916b998c02ee534a97 test: use script_util helpers for creating P2SH scripts (Sebastian Falbesoner)\nb57b633b942da162045b1fe7743a8abdfeaf60e2 test: use script_util helpers for creating P2PKH scripts (Sebastian Falbesoner)\n61b6a017a9f99ef072b2d1980dd547eb20093352 test: wallet util: fix multisig P2SH-P2WSH script creation (Sebastian Falbesoner)\n\nPull request description:\n\n  PR #18788 (commit 08067aebfd7e838e6ce6b030c31a69422260fc6f) introduced functions to generate output scripts for various types. This PR replaces all manual CScript creations in the P2PKH, P2SH, P2WPKH, P2WSH formats with those helpers in order to increase readability and maintainability over the functional test codebase. The first commit fixes a bug in the wallet_util helper module w.r.t. to P2SH-P2WSH script creation (the result is not used in any test so far, hence it can still be seen as refactoring).\n\n  The following table shows a summary of the output script patterns tackled in this PR:\n\n  | Type | master branch  | PR branch |\n  | ---------- | ------------- | ------------- |\n  | P2PKH | `CScript([OP_DUP, OP_HASH160, hash160(key), OP_EQUALVERIFY, OP_CHECKSIG])` | `key_to_p2pkh_script(key)`  |\n  |             | `CScript([OP_DUP, OP_HASH160, keyhash, OP_EQUALVERIFY, OP_CHECKSIG])` | `keyhash_to_p2pkh_script(keyhash)` |\n  | P2SH  | `CScript([OP_HASH160, hash160(script), OP_EQUAL])`  | `script_to_p2sh_script(script)` |\n  | P2WPKH | `CScript([OP_0, hash160(key)])` | `key_to_p2wpkh_script(key)` |\n  | P2WSH | `CScript([OP_0, sha256(script)])` | `script_to_p2wsh_script(script)` |\n\n  Note that the `key_to_...` helpers can't be used if an invalid key size (not 33 or 65 bytes) is passed, which is the case in some rare instances where the scripts still have to be created manually.\n\n  Possible follow-up ideas:\n  * further simplify by identifying P2SH-wrapped scripts and using `key_to_p2sh_p2wpkh_script()` and `script_to_p2sh_p2wsh_script()` helpers\n  * introduce and use `key_to_p2pk_script()` helper for P2PK scripts\n\nACKs for top commit:\n  rajarshimaitra:\n    tACK https://github.com/bitcoin/bitcoin/pull/22363/commits/905d672b743edf31531d095ffe800449eaffec69\n  LarryRuane:\n    tACK 905d672b743edf31531d095ffe800449eaffec69\n  0xB10C:\n    ACK 905d672b743edf31531d095ffe800449eaffec69\n  MarcoFalke:\n    review ACK 905d672b743edf31531d095ffe800449eaffec69 \ud83d\udd79\n\nTree-SHA512: 7ccfe69699bc81168ac122b03536720013355c1b2fbb088355b616015318644c4d1cd27e20c4f56c89ad083ae609add4bc838cf6316794d0edb0ce9cf7fa0fd8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efff9c3494a944a1a9288fec13e8bb5f23235920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efff9c3494a944a1a9288fec13e8bb5f23235920",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efff9c3494a944a1a9288fec13e8bb5f23235920"
      },
      {
        "sha": "905d672b743edf31531d095ffe800449eaffec69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905d672b743edf31531d095ffe800449eaffec69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/905d672b743edf31531d095ffe800449eaffec69"
      }
    ],
    "stats": {
      "total": 296,
      "additions": 134,
      "deletions": 162
    },
    "files": [
      {
        "sha": "cde0399d8bd15ecef8aa29b0dcf8eb6587a61cc3",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -29,27 +29,32 @@\n     CTxOut,\n     MAX_MONEY,\n )\n-from test_framework import script as sc\n from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n from test_framework.script import (\n     CScript,\n+    OP_0,\n+    OP_2DIV,\n+    OP_2MUL,\n+    OP_AND,\n     OP_CAT,\n-    OP_SUBSTR,\n-    OP_LEFT,\n-    OP_RIGHT,\n+    OP_CHECKSIG,\n+    OP_DIV,\n     OP_INVERT,\n-    OP_AND,\n+    OP_LEFT,\n+    OP_LSHIFT,\n+    OP_MOD,\n+    OP_MUL,\n     OP_OR,\n+    OP_RIGHT,\n+    OP_RSHIFT,\n+    OP_SUBSTR,\n+    OP_TRUE,\n     OP_XOR,\n-    OP_2MUL,\n-    OP_2DIV,\n-    OP_MUL,\n-    OP_DIV,\n-    OP_MOD,\n-    OP_LSHIFT,\n-    OP_RSHIFT\n )\n-basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n+basic_p2sh = script_to_p2sh_script(CScript([OP_0]))\n \n \n class BadTxTemplate:\n@@ -116,7 +121,7 @@ class SizeTooSmall(BadTxTemplate):\n     def get_tx(self):\n         tx = CTransaction()\n         tx.vin.append(self.valid_txin)\n-        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE])))\n+        tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx.calc_sha256()\n         return tx\n \n@@ -230,7 +235,7 @@ class TooManySigops(BadTxTemplate):\n     expect_disconnect = False\n \n     def get_tx(self):\n-        lotsa_checksigs = sc.CScript([sc.OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n+        lotsa_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         return create_tx_with_script(\n             self.spend_tx, 0,\n             script_pub_key=lotsa_checksigs,"
      },
      {
        "sha": "c11eabc91730f47e33585c5537214269574bd42e",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -37,17 +37,17 @@\n     OP_CHECKSIGVERIFY,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n     OP_DROP,\n     OP_FALSE,\n-    OP_HASH160,\n     OP_IF,\n     OP_INVALIDOPCODE,\n     OP_RETURN,\n     OP_TRUE,\n     SIGHASH_ALL,\n     LegacySignatureHash,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -469,8 +469,7 @@ def run_test(self):\n \n         # Build the redeem script, hash it, use hash to create the p2sh script\n         redeem_script = CScript([self.coinbase_pubkey] + [OP_2DUP, OP_CHECKSIGVERIFY] * 5 + [OP_CHECKSIG])\n-        redeem_script_hash = hash160(redeem_script)\n-        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n+        p2sh_script = script_to_p2sh_script(redeem_script)\n \n         # Create a transaction that spends one satoshi to the p2sh_script, the rest to OP_TRUE\n         # This must be signed because it is spending a coinbase"
      },
      {
        "sha": "5322b024141b1dde1e04be449a2c459406446960",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -18,10 +18,10 @@\n     OP_1,\n     OP_2,\n     OP_DROP,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_TRUE,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -37,8 +37,8 @@\n # time signing.\n REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n+P2SH_1 = script_to_p2sh_script(REDEEM_SCRIPT_1)\n+P2SH_2 = script_to_p2sh_script(REDEEM_SCRIPT_2)\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]"
      },
      {
        "sha": "9cf46d9d11b3d3e1f8f34bcd629c6b69ca005bc5",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -23,7 +23,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n@@ -34,12 +33,13 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n-    OP_EQUAL,\n-    OP_EQUALVERIFY,\n-    OP_HASH160,\n     OP_TRUE,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n+    script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -353,7 +353,7 @@ def run_test(self):\n \n         multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])['address']\n         script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n-        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+        solvable_after_importaddress.append(script_to_p2sh_script(script))\n \n         for i in compressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n@@ -427,10 +427,10 @@ def run_test(self):\n         op0 = CScript([OP_0])\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n-        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n-        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n-        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n-        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n+        unsolvablep2wshp2pkh = script_to_p2wsh_script(unsolvablep2pkh)\n+        p2shop0 = script_to_p2sh_script(op0)\n+        p2wshop1 = script_to_p2wsh_script(op1)\n         unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n         unsolvable_after_importaddress.append(op1)  # OP_1 will be imported as script\n@@ -450,16 +450,16 @@ def run_test(self):\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bare.hex())\n-                importlist.append(CScript([OP_0, sha256(bare)]).hex())\n+                importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n-                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n-                importlist.append(CScript([OP_0, hash160(pubkey)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pk)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pkh)]).hex())\n+                importlist.append(key_to_p2wpkh_script(pubkey).hex())\n+                importlist.append(script_to_p2wsh_script(p2pk).hex())\n+                importlist.append(script_to_p2wsh_script(p2pkh).hex())\n \n         importlist.append(unsolvablep2pkh.hex())\n         importlist.append(unsolvablep2wshp2pkh.hex())\n@@ -614,22 +614,22 @@ def mine_and_test_listunspent(self, script_list, ismine):\n     def p2sh_address_to_script(self, v):\n         bare = CScript(hex_str_to_bytes(v['hex']))\n         p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2wsh = CScript([OP_0, sha256(bare)])\n-        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        p2wsh = script_to_p2wsh_script(bare)\n+        p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = hex_str_to_bytes(v['pubkey'])\n-        p2wpkh = CScript([OP_0, hash160(pubkey)])\n-        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2wpkh = key_to_p2wpkh_script(pubkey)\n+        p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n         p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n-        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n-        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n-        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n-        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n-        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        p2sh_p2pk = script_to_p2sh_script(p2pk)\n+        p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n+        p2wsh_p2pk = script_to_p2wsh_script(p2pk)\n+        p2wsh_p2pkh = script_to_p2wsh_script(p2pkh)\n+        p2sh_p2wsh_p2pk = script_to_p2sh_script(p2wsh_p2pk)\n+        p2sh_p2wsh_p2pkh = script_to_p2sh_script(p2wsh_p2pkh)\n         return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n \n     def create_and_mine_tx_from_txids(self, txids, success=True):"
      },
      {
        "sha": "17be29c7bfe7dcae358b1ad48a8e6c228edc57a2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -57,7 +57,6 @@\n     OP_ENDIF,\n     OP_EQUAL,\n     OP_EQUALVERIFY,\n-    OP_HASH160,\n     OP_IF,\n     OP_NOP,\n     OP_NOT,\n@@ -76,12 +75,17 @@\n     is_op_success,\n     taproot_construct,\n )\n+from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n+    keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n+    script_to_p2wsh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n from test_framework.address import (\n     hash160,\n-    sha256,\n )\n from collections import OrderedDict, namedtuple\n from io import BytesIO\n@@ -458,13 +462,13 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2WPKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_0, pubkeyhash])\n-            conf[\"scriptcode\"] = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            spk = key_to_p2wpkh_script(pkh)\n+            conf[\"scriptcode\"] = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"script_witv0\"] = None\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n             # P2WSH\n-            spk = CScript([OP_0, sha256(script)])\n+            spk = script_to_p2wsh_script(script)\n             conf[\"scriptcode\"] = script\n             conf[\"script_witv0\"] = script\n         else:\n@@ -475,7 +479,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2PKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            spk = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"scriptcode\"] = spk\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n@@ -496,7 +500,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n     if p2sh:\n         # P2SH wrapper can be combined with anything else\n         conf[\"script_p2sh\"] = spk\n-        spk = CScript([OP_HASH160, hash160(spk), OP_EQUAL])\n+        spk = script_to_p2sh_script(spk)\n \n     conf = {**conf, **kwargs}\n "
      },
      {
        "sha": "60c0953f6feb50cb77c4d93522fcec6cfd7d5b77",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -20,16 +20,17 @@\n     tx_from_hex,\n )\n from test_framework.script import (\n-    hash160,\n     CScript,\n     OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_EQUAL,\n     OP_HASH160,\n     OP_RETURN,\n )\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -300,7 +301,7 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx = tx_from_hex(raw_tx_reference)\n-        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n+        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=script_to_p2sh_script(b'burn'))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result("
      },
      {
        "sha": "ead9d852febf3bda8d432db11e38e93135027139",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 40,
        "deletions": 69,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -41,7 +41,6 @@\n     ser_vector,\n     sha256,\n     tx_from_hex,\n-    uint256_from_str,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -60,12 +59,8 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n-    OP_EQUALVERIFY,\n-    OP_HASH160,\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n@@ -77,6 +72,12 @@\n     LegacySignatureHash,\n     hash160,\n )\n+from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n+    keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n+    script_to_p2wsh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -100,10 +101,6 @@ def __init__(self, sha256, n, value):\n         self.n = n\n         self.nValue = value\n \n-def get_p2pkh_script(pubkeyhash):\n-    \"\"\"Get the script associated with a P2PKH.\"\"\"\n-    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n-\n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness program.\"\"\"\n     tx_hash = SegwitV0SignatureHash(script, tx_to, in_idx, hashtype, value)\n@@ -492,11 +489,8 @@ def test_v0_outputs_arent_spendable(self):\n \n         # Create two outputs, a p2wsh and p2sh-p2wsh\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(script_pubkey)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n+        p2sh_script_pubkey = script_to_p2sh_script(script_pubkey)\n \n         value = self.utxo[0].nValue // 3\n \n@@ -631,11 +625,8 @@ def test_standardness_v0(self):\n         V0 segwit inputs may only be mined after activation, but not before.\"\"\"\n \n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(witness_program)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n+        p2sh_script_pubkey = script_to_p2sh_script(witness_program)\n \n         # First prepare a p2sh output (so that spending it will pass standardness)\n         p2sh_tx = CTransaction()\n@@ -662,6 +653,7 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n+        witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n         tx2 = CTransaction()\n         # tx was accepted, so we spend the second output.\n@@ -740,10 +732,8 @@ def test_p2sh_witness(self):\n \n         # Prepare the p2sh-wrapped witness output\n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        p2wsh_pubkey = CScript([OP_0, witness_hash])\n-        p2sh_witness_hash = hash160(p2wsh_pubkey)\n-        script_pubkey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        p2wsh_pubkey = script_to_p2wsh_script(witness_program)\n+        script_pubkey = script_to_p2sh_script(p2wsh_pubkey)\n         script_sig = CScript([p2wsh_pubkey])  # a push of the redeem script\n \n         # Fund the P2SH output\n@@ -837,8 +827,7 @@ def test_witness_commitments(self):\n \n         # Let's construct a witness program\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n@@ -951,8 +940,7 @@ def test_witness_block_size(self):\n         NUM_OUTPUTS = 50\n \n         witness_program = CScript([OP_2DROP] * NUM_DROPS + [OP_TRUE])\n-        witness_hash = uint256_from_str(sha256(witness_program))\n-        script_pubkey = CScript([OP_0, ser_uint256(witness_hash)])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n         value = self.utxo[0].nValue\n@@ -1054,8 +1042,7 @@ def test_extra_witness_data(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First try extra witness data on a tx that doesn't require a witness\n         tx = CTransaction()\n@@ -1127,8 +1114,7 @@ def test_max_witness_push_length(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -1166,8 +1152,7 @@ def test_max_witness_program_length(self):\n         # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n         long_witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 63 + [OP_TRUE])\n         assert len(long_witness_program) == MAX_PROGRAM_LENGTH + 1\n-        long_witness_hash = sha256(long_witness_program)\n-        long_script_pubkey = CScript([OP_0, long_witness_hash])\n+        long_script_pubkey = script_to_p2wsh_script(long_witness_program)\n \n         block = self.build_next_block()\n \n@@ -1190,8 +1175,7 @@ def test_max_witness_program_length(self):\n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n         assert len(witness_program) == MAX_PROGRAM_LENGTH\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx.vout[0] = CTxOut(tx.vout[0].nValue, script_pubkey)\n         tx.rehash()\n@@ -1210,8 +1194,7 @@ def test_witness_input_length(self):\n         \"\"\"Test that vin length must match vtxinwit length.\"\"\"\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # Create a transaction that splits our utxo into many outputs\n         tx = CTransaction()\n@@ -1318,8 +1301,7 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_pubkey))\n@@ -1331,9 +1313,8 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Add too-large for IsStandard witness and check that it does not enter reject filter\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n         witness_program2 = CScript([b'a' * 400000])\n-        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, script_to_p2sh_script(p2sh_program)))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program2]\n         tx3.rehash()\n \n@@ -1482,8 +1463,7 @@ def test_premature_coinbase_witness_spend(self):\n         block = self.build_next_block()\n         # Change the output of the block to be a witness output.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         block.vtx[0].vout[0].scriptPubKey = script_pubkey\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n@@ -1530,7 +1510,7 @@ def test_uncompressed_pubkey(self):\n         # Test 1: P2WPKH\n         # First create a P2WPKH output that uses an uncompressed pubkey\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n         tx.vout.append(CTxOut(utxo.nValue - 1000, script_pkh))\n@@ -1544,13 +1524,12 @@ def test_uncompressed_pubkey(self):\n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_wsh = CScript([OP_0, witness_hash])\n+        script_wsh = script_to_p2wsh_script(witness_program)\n \n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_wsh))\n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1567,8 +1546,7 @@ def test_uncompressed_pubkey(self):\n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n         # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n-        p2sh_witness_hash = hash160(script_wsh)\n-        script_p2sh = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        script_p2sh = script_to_p2sh_script(script_wsh)\n         script_sig = CScript([script_wsh])\n \n         tx3 = CTransaction()\n@@ -1587,7 +1565,7 @@ def test_uncompressed_pubkey(self):\n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n         # Send it to a P2PKH output, which we'll use in the next test.\n-        script_pubkey = get_p2pkh_script(pubkeyhash)\n+        script_pubkey = keyhash_to_p2pkh_script(pubkeyhash)\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), script_sig))\n         tx4.vout.append(CTxOut(tx3.vout[0].nValue - 1000, script_pubkey))\n@@ -1624,8 +1602,7 @@ def test_signature_version_1(self):\n         pubkey = key.get_pubkey().get_bytes()\n \n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First create a witness output for use in the tests.\n         tx = CTransaction()\n@@ -1744,7 +1721,7 @@ def test_signature_version_1(self):\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n         tx.vout.append(CTxOut(temp_utxos[0].nValue, script_pkh))\n@@ -1754,7 +1731,7 @@ def test_signature_version_1(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n \n@@ -1806,8 +1783,7 @@ def test_non_standard_witness_blinding(self):\n         # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n         # in P2SH).\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n-        script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        script_pubkey = script_to_p2sh_script(p2sh_program)\n \n         # Now check that unnecessary witnesses can't be used to blind a node\n         # to a transaction, eg by violating standardness checks.\n@@ -1872,11 +1848,10 @@ def test_non_standard_witness(self):\n         # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n         outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n         for i in scripts:\n-            p2wsh = CScript([OP_0, sha256(i)])\n-            p2sh = hash160(p2wsh)\n+            p2wsh = script_to_p2wsh_script(i)\n             p2wsh_scripts.append(p2wsh)\n             tx.vout.append(CTxOut(outputvalue, p2wsh))\n-            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+            tx.vout.append(CTxOut(outputvalue, script_to_p2sh_script(p2wsh)))\n         tx.rehash()\n         txid = tx.sha256\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n@@ -1890,13 +1865,13 @@ def test_non_standard_witness(self):\n         for i in range(len(scripts)):\n             p2wsh_tx = CTransaction()\n             p2wsh_tx.vin.append(CTxIn(COutPoint(txid, i * 2)))\n-            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2wsh_tx.rehash()\n             p2wsh_txs.append(p2wsh_tx)\n             p2sh_tx = CTransaction()\n             p2sh_tx.vin.append(CTxIn(COutPoint(txid, i * 2 + 1), CScript([p2wsh_scripts[i]])))\n-            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2sh_tx.rehash()\n             p2sh_txs.append(p2sh_tx)\n@@ -1991,8 +1966,7 @@ def test_witness_sigops(self):\n \n         # Keep this under MAX_OPS_PER_SCRIPT (201)\n         witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG] * 5 + [OP_CHECKSIG] * 193 + [OP_ENDIF])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         sigops_per_script = 20 * 5 + 193 * 1\n         # We'll produce 2 extra outputs, one with a program that would take us\n@@ -2008,14 +1982,12 @@ def test_witness_sigops(self):\n         # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n         # would push us just over the block sigop limit.\n         witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available + 1) + [OP_ENDIF])\n-        witness_hash_toomany = sha256(witness_program_toomany)\n-        script_pubkey_toomany = CScript([OP_0, witness_hash_toomany])\n+        script_pubkey_toomany = script_to_p2wsh_script(witness_program_toomany)\n \n         # If we spend this script instead, we would exactly reach our sigop\n         # limit (for witness sigops).\n         witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available) + [OP_ENDIF])\n-        witness_hash_justright = sha256(witness_program_justright)\n-        script_pubkey_justright = CScript([OP_0, witness_hash_justright])\n+        script_pubkey_justright = script_to_p2wsh_script(witness_program_justright)\n \n         # First split our available utxo into a bunch of outputs\n         split_value = self.utxo[0].nValue // outputs\n@@ -2148,8 +2120,7 @@ def received_wtxidrelay():\n         # Create a Segwit output from the latest UTXO\n         # and announce it to the network\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))"
      },
      {
        "sha": "f3627d1e37b06c01817233635c685535ec6c20c2",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -6,7 +6,6 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import (\n-    check_script,\n     script_to_p2sh,\n     script_to_p2wsh,\n )\n@@ -20,12 +19,10 @@\n )\n from test_framework.messages import (\n     CTxInWitness,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_CHECKLOCKTIMEVERIFY,\n     OP_CHECKSIG,\n     OP_CHECKSEQUENCEVERIFY,\n@@ -233,7 +230,7 @@ def verify_txn_with_witness_script(self, tx_type):\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n             'P2PK': CScript([hex_str_to_bytes(embedded_pubkey), OP_CHECKSIG]).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n-        redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n+        redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)\n         script_pub_key = self.nodes[1].validateaddress(addr)['scriptPubKey']\n         # Fund that address"
      },
      {
        "sha": "833a2159938255bbe9f24b1ee07dbd64d10b8d3f",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -26,21 +26,22 @@\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n-    sha256,\n     tx_from_hex,\n     uint256_from_str,\n )\n from .script import (\n     CScript,\n     CScriptNum,\n     CScriptOp,\n-    OP_0,\n     OP_1,\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n-    hash160,\n+)\n+from .script_util import (\n+    key_to_p2wpkh_script,\n+    script_to_p2wsh_script,\n )\n from .util import assert_equal\n \n@@ -206,13 +207,11 @@ def witness_script(use_p2wsh, pubkey):\n     scriptPubKey.\"\"\"\n     if not use_p2wsh:\n         # P2WPKH instead\n-        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n-        pkscript = CScript([OP_0, pubkeyhash])\n+        pkscript = key_to_p2wpkh_script(pubkey)\n     else:\n         # 1-of-1 multisig\n         witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n-        scripthash = sha256(witness_program)\n-        pkscript = CScript([OP_0, scripthash])\n+        pkscript = script_to_p2wsh_script(witness_program)\n     return pkscript.hex()\n \n def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):"
      },
      {
        "sha": "acbc040741c2feac46cebfbf8ad2d2f5c29fa998",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1e4c56309aeb73772e3a9d779a9c157024c9e1e/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "patch": "@@ -17,17 +17,15 @@\n from test_framework.key import ECKey\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n-    OP_DUP,\n-    OP_EQUAL,\n-    OP_EQUALVERIFY,\n-    OP_HASH160,\n-    hash160,\n-    sha256,\n+)\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n+    script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.util import hex_str_to_bytes\n \n@@ -57,15 +55,14 @@ def get_key(node):\n     Returns a named tuple of privkey, pubkey and all address and scripts.\"\"\"\n     addr = node.getnewaddress()\n     pubkey = node.getaddressinfo(addr)['pubkey']\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=node.dumpprivkey(addr),\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_generate_key():\n@@ -76,15 +73,14 @@ def get_generate_key():\n     eckey.generate()\n     privkey = bytes_to_wif(eckey.get_bytes())\n     pubkey = eckey.get_pubkey().get_bytes().hex()\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=privkey,\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_multisig(node):\n@@ -98,15 +94,15 @@ def get_multisig(node):\n         addrs.append(addr['address'])\n         pubkeys.append(addr['pubkey'])\n     script_code = CScript([OP_2] + [hex_str_to_bytes(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n-    witness_script = CScript([OP_0, sha256(script_code)])\n+    witness_script = script_to_p2wsh_script(script_code)\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,\n-                    p2sh_script=CScript([OP_HASH160, hash160(script_code), OP_EQUAL]).hex(),\n+                    p2sh_script=script_to_p2sh_script(script_code).hex(),\n                     p2sh_addr=script_to_p2sh(script_code),\n                     redeem_script=script_code.hex(),\n                     p2wsh_script=witness_script.hex(),\n                     p2wsh_addr=script_to_p2wsh(script_code),\n-                    p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n+                    p2sh_p2wsh_script=script_to_p2sh_script(witness_script).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n def test_address(node, address, **kwargs):"
      }
    ]
  },
  {
    "sha": "38f900290cc3a839e99bef13474d35e1c02e6b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGY5MDAyOTBjYzNhODM5ZTk5YmVmMTM0NzRkMzVlMWMwMmU2YjBk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-31T15:18:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:35Z"
      },
      "message": "net: change assumed I2P port to 0\n\n* When accepting an I2P connection, assume the peer has port 0 instead\n  of the default 8333 (for mainnet). It is not being sent to us, so we\n  must assume something.\n* When deriving our own I2P listen CService use port 0 instead of the\n  default 8333 (for mainnet). So that we later advertise it to peers\n  with port 0.\n\nIn the I2P protocol SAM 3.1 and older (we use 3.1) ports are not used,\nso they are irrelevant. However in SAM 3.2 and newer ports are used and\nfrom the point of view of SAM 3.2, a peer using SAM 3.1 seems to have\nspecified port=0.",
      "tree": {
        "sha": "a2b675570fd8095ebbd14876c3297626a80e1354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2b675570fd8095ebbd14876c3297626a80e1354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38f900290cc3a839e99bef13474d35e1c02e6b0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKcACgkQVN8G9ktV\ny7+t3x/+J1g2JtSGfyl+5ZxQlnqK//uiDzWa2PM8A1zGtJTUgLhkgt32mjmMuWgQ\nWkUUuoV404U7ae1fLY5FKhTg6mA9SzwQuhIVpmuAy8Y3jTCLN1JRsSeyrGapZ4SA\n4kS9BDfFQb3V3oji+nxR0wFSCcs1N4XiBrhnpdJ5q7wh7wx2pTzzq75OoDqfpvjk\n0Rx3OUklK/blY5zKmHtASwBr8l5N4Zhe1ToA43+8OQ4s1uKDb2+sZ0zkYi3W3tnQ\njprK1XK5TI5JQ4rS0bIq4TEr+VOpUFxHsa6q0mNSGWBw/En2kvysrcEsF0XPCFhW\nhW4X86Be6KqttuS8arsN3np8hnpaPOzBQAYVwj864HhSxPTmT4ebIvyIebYWPWuT\n39cSFVg6pvyHDGMh78Y2LfpTwVPTpQlN1Kkk6l3yOR9MjUky7m4H7RsPrfpyCnvU\nbX55T+AzO0ZrMaD0kHTk0eFQD5z43NWukXLzU/uYe0/6sEZm4AQoTiMB4xyu1zzv\nR8Y9t84vJAUtpeVBCIKpOc+DR93AaQ6KeAbfp+CayLB58oEaCtC4eVwJJLCzR6L7\npa7ytYNfuSfMnGniW9yZhkYd4y+h8obDiEZY/kAI5l/j8y50pEx2LfKpqsew2GQZ\n+4ctfBLPgBrXBr1npiX8gOqjcCF3yLb2/OP5x3FdhD6pOcbiiuY6BDVK0Nw6pqER\nfGHKoHI03eQMBihHgrxfGpIXt1fKP6105x9Dm6p4q1+/UlGN5TxlDLNaPJO2YMft\naAN/hPlQ/tVPQOWumMWw2EJJ1YcbtrlQnfuugPjhHBH5jaXjoLENwE/ADAgDrr9E\nbCDSIySijS43pCN9rtL8Wsqpz5CQR03LN5n9o7nroekO4iuU3yqLyduVwPvdawQc\n/PVAFxJ5qxjHNgimum+RWMGLXyuFNoFidEMFn9GZ7XZPFeZKhC7n3R1ax1Ziv3b9\ngHqB0LhPrwzRiSFsOCt2fWYYgSJZs7s4W3PZVvTN725xC2Tn3s3vF5wC1LT/RoRg\nPio70vHTVJKsXgwI1fJNoCjZ5XpQIAVCscEc0e4zDKrm5tP+grHsJUbknMsEyvj7\ntFjmnh/VmabMFMhkb8JzeJzPyyM8VG62uwKVQ9StK7xD/QFRJkGXbjJHENgFL1IA\nd4CAx/VIQvfwNKcmq0nWHiJUKF2o84+0ME9nnUZ9TG86ZeFe5o/2FuznBLfxxPff\nZlpjzgPpR84KYTMciQj6CZPCoZqWz7aC0Ix6XxhwnNqvjefCjvnDbIYVheFt+hP6\nRpQEekwEQZtEwYhyNkhwIUrtIaxBgxSq8IVDGxAK197FK/lKp23XUXSjfiDoqiFJ\npfavhB1ocT5CEau1sh6NdVA2rLnp4A==\n=CHc1\n-----END PGP SIGNATURE-----",
        "payload": "tree a2b675570fd8095ebbd14876c3297626a80e1354\nparent efff9c3494a944a1a9288fec13e8bb5f23235920\nauthor Vasil Dimov <vd@FreeBSD.org> 1622474329 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822375 +0200\n\nnet: change assumed I2P port to 0\n\n* When accepting an I2P connection, assume the peer has port 0 instead\n  of the default 8333 (for mainnet). It is not being sent to us, so we\n  must assume something.\n* When deriving our own I2P listen CService use port 0 instead of the\n  default 8333 (for mainnet). So that we later advertise it to peers\n  with port 0.\n\nIn the I2P protocol SAM 3.1 and older (we use 3.1) ports are not used,\nso they are irrelevant. However in SAM 3.2 and newer ports are used and\nfrom the point of view of SAM 3.2, a peer using SAM 3.1 seems to have\nspecified port=0.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38f900290cc3a839e99bef13474d35e1c02e6b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38f900290cc3a839e99bef13474d35e1c02e6b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38f900290cc3a839e99bef13474d35e1c02e6b0d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efff9c3494a944a1a9288fec13e8bb5f23235920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efff9c3494a944a1a9288fec13e8bb5f23235920",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efff9c3494a944a1a9288fec13e8bb5f23235920"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dbd4d46baa73116096bbf7f7bc0db1d0f50bd4f9",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=38f900290cc3a839e99bef13474d35e1c02e6b0d",
        "patch": "@@ -159,7 +159,7 @@ bool Session::Accept(Connection& conn)\n             const std::string& peer_dest =\n                 conn.sock->RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n \n-            conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n+            conn.peer = CService(DestB64ToAddr(peer_dest), I2P_SAM31_PORT);\n \n             return true;\n         }\n@@ -366,7 +366,7 @@ void Session::CreateIfNotCreatedAlready()\n     SendRequestAndGetReply(*sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n                                             session_id, private_key_b64));\n \n-    m_my_addr = CService(DestBinToAddr(MyDestination()), Params().GetDefaultPort());\n+    m_my_addr = CService(DestBinToAddr(MyDestination()), I2P_SAM31_PORT);\n     m_session_id = session_id;\n     m_control_sock = std::move(sock);\n "
      },
      {
        "sha": "7dc822bcf6a355ad067a0885c05e5adc89165213",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=38f900290cc3a839e99bef13474d35e1c02e6b0d",
        "patch": "@@ -442,7 +442,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections. Not relevant for I2P (see doc/i2p.md).\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "d5049963472511f2432f6023b997952ebf46560f",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38f900290cc3a839e99bef13474d35e1c02e6b0d/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=38f900290cc3a839e99bef13474d35e1c02e6b0d",
        "patch": "@@ -112,6 +112,9 @@ static constexpr size_t ADDR_CJDNS_SIZE = 16;\n /// Size of \"internal\" (NET_INTERNAL) address (in bytes).\n static constexpr size_t ADDR_INTERNAL_SIZE = 10;\n \n+/// SAM 3.1 and earlier do not support specifying ports and force the port to 0.\n+static constexpr uint16_t I2P_SAM31_PORT{0};\n+\n /**\n  * Network address.\n  */"
      }
    ]
  },
  {
    "sha": "aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWFjM2JjZTNlYWQxZjI0Y2E3ODIwNzllZjBkZWZhODZmZDhjYjk4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-31T15:26:02Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:35Z"
      },
      "message": "net: change I2P seeds' ports to 0",
      "tree": {
        "sha": "918f94458e1928c03271524e68fe00533058935a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/918f94458e1928c03271524e68fe00533058935a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKgACgkQVN8G9ktV\ny78Oox/9FBHkFUeF/e+uFvqCJLUs485ng3pWLI3PVQvfnWrel4tFBkPoSTe8k5VC\nNj833wivXrzQhuFC/2MCLtqCFf421vprAh8r8iBHaprDRosXtwaKbQBEgdvzAuZx\n9AnoJbscD8VQyW/drO6mEe8NcMAo5y/wanZrUSlBSgjE5h+wbsCqcvas49VF+DY2\nyuhaUfKL2wCy5nWxvcOmNgalNI6/C0+INVPPMybtU+blNBuyPcWsB+Wo9B8THuqr\nNyLzMjPZoK+grKHtD1KO8PODujybzO4w++ZBXX58Y+fbr0mSfoj35bACMc+WCjKH\neueH4uYS6NKUKsq146a8gKDCKtcuJxkEQzYWUQqJxhBY4QiOi8uY+XZhE90r5jnc\ndaCb/BPOk1AOtvikU8uDu5LgLTwmqAtpYSSnY5Defg6KOon0dYtCYziURy9lhEoo\nlEbWGyVC+rQRMjRNYVjboGG1QaJ6MqyYdEjDsKtRAd7zGuxGYiazWmjQBpwoiXvR\nsoaD2lUugpb0aXJ5Ycjjt0B6ZHA68aQwZGIlToK1Lex8Q5IAQMbb6+kpEQdK10vk\nJQWwCV0czW6Sr5r6OpugzlS2NlK3HTNrB+SskH8G/KKnlf7kNQfQvYjpm9ySIEcJ\n8R6VuH/3iRg3m3TbZmhUMJDC2CHPvOD9ClxoIgXURzRzEwLakdYxYyWdJj+OZ990\nrwxEI1+xs4thdDk/ojLlt727sV0rv4tkApo5GzY249/9HdUbzc6Byfa2OmGtVXgr\n31ktvWiGR1E8ceacN9TEbymZOBJTrizWECU9xfcp67ladAg6aI1yvAnjmHio1Kg6\n6rXw1vtFYbtISleg9s2R4T6S4Sonk0EU/2SrOgRLLLPRwdKgCjNtpRchQWBjUFp2\nE7cyHd2apccm3oL46ztDLg8JHkBt2CqUg8XRSSz3w8Hr0rfObG74ner3c51mPiCg\n8jVcMDFJdxJIkVN8D/pAnj6UopBpJjj8ytlucFTB27kprVicNFW5RulcGtRGuBzn\nDDnVOx05zNPCRh9IjIGWgssg6btrzhXVh9/+bFyooMtuQj+4iNPJjhd1G7DbILFl\nNYGpKL9YVb+8h15S/FA025dkCgCEoYHZeteEM9Pu4d7de/u/IN8ZrprzrEIvQ3f+\nRQidTBUqVB630fBxKVuely9H7ZtNMv5F5YkZD3VtBuusMZL4XGoK0f1dBT3lTHQl\neFvRH264C/6Rhmug7QQooRtGO1mY0KT7RhykO69vyJXPdoicr2wT37235AH1JEBs\n+wqp2fIN6tCKAGWadYryMYFjccgWVZW1mf/qwvsB9jv5ygfuQnHqMXGb+5fFyGIC\neYJA/cKrJyNTqi6VFdEXAoKumacgHw==\n=3qXu\n-----END PGP SIGNATURE-----",
        "payload": "tree 918f94458e1928c03271524e68fe00533058935a\nparent 38f900290cc3a839e99bef13474d35e1c02e6b0d\nauthor Vasil Dimov <vd@FreeBSD.org> 1622474762 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822375 +0200\n\nnet: change I2P seeds' ports to 0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac3bce3ead1f24ca782079ef0defa86fd8cb98/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38f900290cc3a839e99bef13474d35e1c02e6b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38f900290cc3a839e99bef13474d35e1c02e6b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38f900290cc3a839e99bef13474d35e1c02e6b0d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f7bfb6eb0a239ba17ff2aa8579a4ba85217cc498",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeac3bce3ead1f24ca782079ef0defa86fd8cb98/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeac3bce3ead1f24ca782079ef0defa86fd8cb98/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
        "patch": "@@ -678,11 +678,11 @@ vi5bnbxkleeqi6hfccjochnn65lcxlfqs4uwgmhudph554zibiusqnad.onion:8333\n xqt25cobm5zqucac3634zfght72he6u3eagfyej5ellbhcdgos7t2had.onion:8333\n \n # manually added 2021-05 for minimal i2p bootstrap support\n-72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:8333\n-c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:8333\n-gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:8333\n-h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:8333\n-hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:8333\n-pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:8333\n-wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:8333\n-zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:8333\n+72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:0\n+c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:0\n+gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:0\n+h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\n+hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:0\n+pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:0\n+wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:0\n+zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:0"
      },
      {
        "sha": "a22529c38659d8714718b24ec7e0e5fc89df0363",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeac3bce3ead1f24ca782079ef0defa86fd8cb98/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeac3bce3ead1f24ca782079ef0defa86fd8cb98/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
        "patch": "@@ -683,14 +683,14 @@ static const uint8_t chainparams_seed_main[] = {\n     0x04,0x20,0x98,0xc6,0x44,0x27,0x90,0x41,0xa6,0x98,0xf9,0x25,0x6c,0x59,0x0f,0x06,0x6d,0x44,0x59,0x0e,0xb2,0x46,0xb0,0xa4,0x37,0x88,0x69,0x8f,0xc1,0x32,0xcd,0x9f,0x15,0xd7,0x20,0x8d,\n     0x04,0x20,0xaa,0x3a,0x16,0x86,0xea,0x59,0x09,0x04,0x78,0xe5,0x10,0x92,0xe1,0x1d,0xad,0xf7,0x56,0x2b,0xac,0xb0,0x97,0x29,0x63,0x30,0xf4,0x1b,0xcf,0xde,0xf3,0x28,0x0a,0x29,0x20,0x8d,\n     0x04,0x20,0xbc,0x27,0xae,0x89,0xc1,0x67,0x73,0x0a,0x08,0x02,0xdf,0xb7,0xcc,0x94,0xc7,0x9f,0xf4,0x72,0x7a,0x9b,0x20,0x0c,0x5c,0x11,0x3d,0x22,0xd6,0x13,0x88,0x66,0x74,0xbf,0x20,0x8d,\n-    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x20,0x8d,\n-    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x20,0x8d,\n-    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x20,0x8d,\n-    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x20,0x8d,\n-    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x20,0x8d,\n-    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x20,0x8d,\n-    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x20,0x8d,\n-    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x20,0x8d,\n+    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x00,0x00,\n+    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x00,0x00,\n+    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x00,0x00,\n+    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x00,0x00,\n+    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x00,0x00,\n+    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x00,0x00,\n+    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x00,0x00,\n+    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x00,0x00,\n };\n \n static const uint8_t chainparams_seed_test[] = {"
      }
    ]
  },
  {
    "sha": "1f096f091ebd88efb18154b8894a38122c39624f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA5NmYwOTFlYmQ4OGVmYjE4MTU0Yjg4OTRhMzgxMjJjMzk2MjRm",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-31T15:30:18Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:36Z"
      },
      "message": "net: distinguish default port per network\n\nChange `CChainParams::GetDefaultPort()` to return 0 if the network is\nI2P.",
      "tree": {
        "sha": "5c1883100bfd0705e1d40ab1144d56ee0fe18fa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1883100bfd0705e1d40ab1144d56ee0fe18fa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f096f091ebd88efb18154b8894a38122c39624f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKgACgkQVN8G9ktV\ny79QUB//X3H7j5IHTGe2bO1BrZw4UQjNy7vOQNUPiMlf/r2rdW0dSnlfNkNHFQqz\nKW83YMric+OEZvYUiG1BxIr4URqk2tOF6VnYuC/1RjXuy0hD7WNjLCGVw8xxVpBF\nrVEzg/yjh6OEFZsxJT1kifxaA6PyrZ+eCm+3XCF+ZhrBrKWEe0PibkBFAMhbO0tg\ngXBlfQqQlf3ALDSMzlNnoZMIpRyVyPzOG2WAepbjXzIK6dy+nyVkDCeXASNrV7yJ\nKCtQl/WBSAYeatP4oyt/6hyZiY1Gp3T9W/2potSp9dXHUGyJPEava6f1NlFj6JEt\nYbXbER012qUbP1yiVIzXsrrXJHz7RULH3G6Jq/NUsz+ILusRD4AFsTcwoqju2x+y\no/a6CrPyzuq9/DgHVEL2KM51+/eSldKCrZswDA0bk0Rt5tZnsqAleKmL7v7NZDbO\nBk9iluyi3CIjr0/yl9y50nlelCZVby10DopCM4WiqHSPvzpxfINEGuRn8m24FKM7\ngQLxY1kDs/0czXEn74sALtWJHtkqfNLWX4zWj3MHARV4SFp8xzlWNBahXLaZWyBm\nPVH62gWXtucxPYBgkp5jLtgnsZQnTvLOiOusUYXw6iTlaBNloYS7NE7/ZrK5/Xdx\nTkuw5/+RW7M/6QE2yoKCY8W1if0lkwKWg8Gjk02SVFRDJ/G07GP3CpFHwfUMjFK8\nIqVr1EQXDYwjt1d2TR8pmFnQRetxBPrfeJ5QDBXuB6OWMLOkiZ/Q66IYLlLjvfUI\nr0QF4qaJmrBKm0N0qYcEiPl5JDWTVOQ6R9/g54+q6IsOy5fc37BQhhoyGtrAWx76\nvUkN3oKoa/j+m2IJ8x5p05Zi64ptSjOfGcBrZB4m8GA2hSboMFhH02ElKjeaSROv\nCir1nBvLSBRksB0oWU/gEFGDLNTYtiz/SVdIOXvpBTMEvYb0BZgMvAJzGfuXLAuq\nlQ4oMZ3Hq0R0nwmx/zKz3r7YZRFtMDDBJ7bbNf0r6NZwo8fpqUi4Ky/cjDUMrHCa\nU3fn8p7Cwi9+UhoUlcNMghW9FdhmRNQ3iK0UdTigynm0laFF1L3l4vxC21RsKshE\nI5Hi3QHtCWYbuKfziIa+2Gn9hhuQCmSqHJMmi32QArG+xox9w4GC/XtsA0kxk88d\nvRTqbJoQa+eV1dwCdMUBd9NNFUoMBqCHlOdPwra0JbHg7TjRwH+kIRRacaw9bQ2J\ntEyllTlh45jz8818GA6fGy/ZKvdZlQvnWNkIckVZRHta2YItc0WsDVZyzmNRPh/Q\nZWCHObuVj0VhxJahcZHUqrQCtco3dJg6I0SaCaJXc568Rf2ePBwUzIc0jb3XEln8\nCdChOPTk5QpFcjcbc57hE+9TmEkY8g==\n=AXtw\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c1883100bfd0705e1d40ab1144d56ee0fe18fa9\nparent aeac3bce3ead1f24ca782079ef0defa86fd8cb98\nauthor Vasil Dimov <vd@FreeBSD.org> 1622475018 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822376 +0200\n\nnet: distinguish default port per network\n\nChange `CChainParams::GetDefaultPort()` to return 0 if the network is\nI2P.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f096f091ebd88efb18154b8894a38122c39624f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f096f091ebd88efb18154b8894a38122c39624f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f096f091ebd88efb18154b8894a38122c39624f/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac3bce3ead1f24ca782079ef0defa86fd8cb98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac3bce3ead1f24ca782079ef0defa86fd8cb98"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 16,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4faa6f8d06a1cfe482347fa606dc8685a4cd97c1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f096f091ebd88efb18154b8894a38122c39624f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f096f091ebd88efb18154b8894a38122c39624f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1f096f091ebd88efb18154b8894a38122c39624f",
        "patch": "@@ -8,11 +8,13 @@\n \n #include <chainparamsbase.h>\n #include <consensus/params.h>\n+#include <netaddress.h>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <util/hash_type.h>\n \n #include <memory>\n+#include <string>\n #include <vector>\n \n typedef std::map<int, uint256> MapCheckpoints;\n@@ -80,6 +82,15 @@ class CChainParams\n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     uint16_t GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort(Network net) const\n+    {\n+        return net == NET_I2P ? I2P_SAM31_PORT : GetDefaultPort();\n+    }\n+    uint16_t GetDefaultPort(const std::string& addr) const\n+    {\n+        CNetAddr a;\n+        return a.SetSpecial(addr) ? GetDefaultPort(a.GetNetwork()) : GetDefaultPort();\n+    }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Default value for -checkmempool and -checkblockindex argument */"
      },
      {
        "sha": "a6f439674f8081dd188d6a4ebeb05748f5ac26cb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f096f091ebd88efb18154b8894a38122c39624f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f096f091ebd88efb18154b8894a38122c39624f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1f096f091ebd88efb18154b8894a38122c39624f",
        "patch": "@@ -402,7 +402,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Resolve\n-    const uint16_t default_port{Params().GetDefaultPort()};\n+    const uint16_t default_port{pszDest != nullptr ? Params().GetDefaultPort(pszDest) :\n+                                                     Params().GetDefaultPort()};\n     if (pszDest) {\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n@@ -2059,8 +2060,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // from advertising themselves as a service on another host and\n             // port, causing a DoS attack as nodes around the network attempt\n             // to connect to it fruitlessly.\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != Params().GetDefaultPort(addr.GetNetwork()) && nTries < 50) {\n                 continue;\n+            }\n \n             addrConnect = addr;\n             break;\n@@ -2123,7 +2125,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort(strAddNode)));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port"
      }
    ]
  },
  {
    "sha": "4f432bd738c420512a86a51ab3e00323f396b89e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjQzMmJkNzM4YzQyMDUxMmE4NmE1MWFiM2UwMDMyM2YzOTZiODll",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-31T16:07:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:37Z"
      },
      "message": "net: do not connect to I2P hosts on port!=0\n\nWhen connecting to an I2P host we don't specify destination port and it\nis being forced to 0 by the SAM 3.1 proxy, so if we connect to the same\nhost on two different ports, that would be actually two connections to\nthe same service (listening on port 0).\n\nFixes https://github.com/bitcoin/bitcoin/issues/21389",
      "tree": {
        "sha": "7ca2d736342bd8861265e9164b800abdf15867d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ca2d736342bd8861265e9164b800abdf15867d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f432bd738c420512a86a51ab3e00323f396b89e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKkACgkQVN8G9ktV\ny7+VjB//QftD2PbdsAcgP4yt0iFPQcd1eRMWo7BhcpUxHmRUDRI/KODWzuGzdVoa\nwA12YFsYVOjcW8nSBcmMOX2fSsXffxX6WdE2eqaOF96bD3bEqt2v89f9EW9cnF5T\n+qdcAMB4Mu1UPiM6a4shtSRALhQH/Zx2GJPLmY4342S+k2F7aGc3slrQkPeV2694\nKof0vfbVjGuCiDad5CSZRFah/dWvBpucXcp4RARvt+KRnQ4s59IlhqXBXdV30R17\nao9/Y8yoVWZFqtm8MwRlk34tLq95k6BHkGV0hVYvuKwubdG4WbdX6EyuHbNUxgh6\nSbLX5z+Y1Hm852LatYflKv5xxRPRgC+1IIdLC7YSAu5RGNYsOhkZLEPuzO/vc7eT\n4VsD9SbOEYzKJk8B54GsNxMiRyzIsGYvklteBF5Rr7/NhPKJj2evVO4z6YERwIII\njGznLg6hxUelkZm5b7VY8TY/ZC+UZnc1jsJ8Xq/+NNGkpYUejHGqT8XhnCXCHq85\n48MR8p7nMn+49bPsbYwflVLlAR+fAAzDB15Pq2ai94rD6OT5XzjyuKBu2wVg7C7E\noJuRxFDWYqCUnhf+n9dHlsAKUnFelGzegTfJQONyuW/MUeuw8D3tt98ciOa7NN0E\nXzCxIySYg/IkSK4M8XEcsTPec2s4sXhYX0YB2m6LRW5yf1sW6WmWtvY9jL1POMPt\nw+FtUPE4lZeL+06Zrdl/KmLHLOaDIZ4BWax1qRmDYLM1OUAEjK6CZ5lGUj7sp0Zj\nnJ7g/0ADvaz2bmLNIYWwOYXIr5FC+f6gVUdiVTo/HDlmBBl0EpbOCx6v3YNdHhmD\noZglZJSk6KtCNQrpddgkphb3Jf7m5j7HURE2E0ITEClW+5T2qWCodqX2gvtLGgDF\ngZ85xu4werb0kplhM0wVYa8gkABLyNE6wyOo/BwchD+4O/PwkJJYfEtlTdtpR1ZN\nYBH7Wf7Q4DhoiOYZqzcZBloE5KaX294T29TuBu21FpYSFPqQ92aVjsUM/QOdY57x\nI4b3uf3u+na60Lb59TiOdid6IzRQ3CuCst8eSX75uKoVbjXVpyL9I4kA8SB8pQKR\nRl90xojEh7La6dvNrRA4gGjqIIxB3Act23m6A/RrTOuQWUJLekyvv67ZXEbTAABz\nV4mYGYWyFedybcVAoV7lIo8ZupUL7d3mqFhG3R8eGqbCnyXFbpvcYuuBGezMSI2v\nXnUzG5KVRwn8nTLiRY8ym21KU1Nbl/GwaMGVaQ2JxOzKPrDzGS0R8YGc8Q08aEeB\nDf7weivOYP1C4TuJOubxEMKlkKpMZ+0plo4iULycAvDzFv56iHiK2WKrJY7+g5JW\ngmO4KOUpu16DiAz31BByXDdmmtgfVA==\n=E0PK\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ca2d736342bd8861265e9164b800abdf15867d1\nparent 1f096f091ebd88efb18154b8894a38122c39624f\nauthor Vasil Dimov <vd@FreeBSD.org> 1622477260 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822377 +0200\n\nnet: do not connect to I2P hosts on port!=0\n\nWhen connecting to an I2P host we don't specify destination port and it\nis being forced to 0 by the SAM 3.1 proxy, so if we connect to the same\nhost on two different ports, that would be actually two connections to\nthe same service (listening on port 0).\n\nFixes https://github.com/bitcoin/bitcoin/issues/21389\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f432bd738c420512a86a51ab3e00323f396b89e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f432bd738c420512a86a51ab3e00323f396b89e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f432bd738c420512a86a51ab3e00323f396b89e/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f096f091ebd88efb18154b8894a38122c39624f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f096f091ebd88efb18154b8894a38122c39624f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f096f091ebd88efb18154b8894a38122c39624f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e7e42fb775ad24c08130bfe8379d269c572fff6",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f432bd738c420512a86a51ab3e00323f396b89e/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f432bd738c420512a86a51ab3e00323f396b89e/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=4f432bd738c420512a86a51ab3e00323f396b89e",
        "patch": "@@ -172,6 +172,13 @@ bool Session::Accept(Connection& conn)\n \n bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n {\n+    // Refuse connecting to arbitrary ports. We don't specify any destination port to the SAM proxy\n+    // when connecting (SAM 3.1 does not use ports) and it forces/defaults it to I2P_SAM31_PORT.\n+    if (to.GetPort() != I2P_SAM31_PORT) {\n+        proxy_error = false;\n+        return false;\n+    }\n+\n     proxy_error = true;\n \n     std::string session_id;"
      }
    ]
  },
  {
    "sha": "41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWNkYTlkMDc1ZWJjYWIxZGJiOTUwMTYwZWJlOWQwYmE3YjU3NDVl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-23T08:57:28Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:37Z"
      },
      "message": "test: ensure I2P ports are handled as expected",
      "tree": {
        "sha": "3090758b4a26ef20c6229d73228d7e535772bfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3090758b4a26ef20c6229d73228d7e535772bfb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKoACgkQVN8G9ktV\ny7/Wch//cdwM/aEgW9xqpY3/WFNTglRE1Wc/meX/qhBm4yWo67oigA9dKz3Qc7MP\nwNDeg32joB4ycqhSi/zpzdXLeEL2QyEc9z829RrrWfgYKq7mB+RClDPqTGLQyRaU\nxrfjh63G2YItkqSUNNzq+epzYJ7JUiR7rzm+LLOz5AlC/rvW4rPEK0xAxpzID+JT\nDpJnw7heW3LP4po19D1y4snuRdMUs7UHOwPnP+6IQINPohdVLOpYriHFAZTqG+kP\nQtvOAAvagJc6u0b0r//LtyTsBGe8YLJbCnvCQhaEhs7VbNfXJaexxhBR1blp2JUO\nGq+A9qC7fBVyIWjCH9HGn3DgnXo1kNs/3Gvxh5VxTB1J3WigjkMX5jahs7DBHbWf\niNkkleT544XWgKTwaSOvqid52LyD85J/+7/qWJGk6R+XWyiTIli2AZHupfw/6gy8\nsDdUmdnACcUYXm2wZKx1rVQSIPhkNRggnDozqc52Ia4fYEE86SZQSgbkpWnJ7ZeJ\nd1P3N2SrDEQtwBiz0PipWImevqU4WHfzkOvGuwU33S7aEkr6BCZzi7Fs3iZyOBb8\nXLteMyUhPjz/I0uCqsu3B5MeOHmZ7ojDj+QSZEsoPyTF9EMBtSzA0IvQY/FlfPc2\nPTEiXfgMXvMQOZChLQRrwx5BLhL1mtIZNwOD62eJpnD8ibbObzExDId5uLgWrgVK\nULcQ6VHUCCP86OXrS7/OmPsqlq5b290LG4NoyvFoe5cUibJ1rzom0OMq4adF/SDp\nmm7fqS0CE/XtPGQ6EwAyAMXMInHpFqsjvNBejrrXQo76V0SG19Vnb+UcwHYm9+xd\nOR72FyjLqSXJSUylhdrQbqeOQHgQMjWNzW1sN5GaHYlnVvEAjm/oQ2VTSZeJZ0fr\n+O4KetADrhTSlIhOdWPP61WfxuhVLLwG3zTt/lPPf2eXnm7CE7vGKbmti9Q80eNx\n9I5CrHqRxisNSzsJCYFQr5iHQTlp1n37l0goLi4Zv69HBnMNC1hCLC1VSPc4DKxY\nmaSWjocA5yBOeBU+n6fDpfFN+yEsW3RERrb0mTPrBY/jHMVPTEpE2AmUFRTaF+5W\nVv0v/FvhYTLqDBdQDA8NL3sdlNVBodWo7RsHnJjPp1T/zGmbmnqAY8tDp8jT05ig\nO2m6G0dIeaUNe5hhdThAj4Gy74+nyE+Avm69ga+t6eEfbvZACaRJcsn1eIk9Vto2\n38yW670rGuDTofqVeiPWyqF4ceTWik6OJ0dbbIwjqf0/R6zi+ZduJpCDiOojtkAR\nUWLR/JyU2AIzwcXcP/swzjNaIHtCB5zhbE61bXgAKmU359Wnj8hpM10N8G8GZTks\nyvmMN6Y5xMMcBQ+s+GOp4m90b/HAxQ==\n=3qLs\n-----END PGP SIGNATURE-----",
        "payload": "tree 3090758b4a26ef20c6229d73228d7e535772bfb9\nparent 4f432bd738c420512a86a51ab3e00323f396b89e\nauthor Vasil Dimov <vd@FreeBSD.org> 1624438648 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822377 +0200\n\ntest: ensure I2P ports are handled as expected\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f432bd738c420512a86a51ab3e00323f396b89e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f432bd738c420512a86a51ab3e00323f396b89e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f432bd738c420512a86a51ab3e00323f396b89e"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "13188b9305773178e19bf56f19588c4ac970faa4",
        "filename": "test/functional/p2p_i2p_ports.py",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e/test/functional/p2p_i2p_ports.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e/test/functional/p2p_i2p_ports.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_i2p_ports.py?ref=41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
        "patch": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test ports handling for I2P hosts\n+\"\"\"\n+\n+import re\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class I2PPorts(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # The test assumes that an I2P SAM proxy is not listening here.\n+        self.extra_args = [[\"-i2psam=127.0.0.1:60000\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Ensure we don't try to connect if port!=0\")\n+        addr = \"zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:8333\"\n+        raised = False\n+        try:\n+            with node.assert_debug_log(expected_msgs=[f\"Error connecting to {addr}\"]):\n+                node.addnode(node=addr, command=\"onetry\")\n+        except AssertionError as e:\n+            raised = True\n+            if not re.search(r\"Expected messages .* does not partially match log\", str(e)):\n+                raise AssertionError(f\"Assertion raised as expected, but with an unexpected message: {str(e)}\")\n+        if not raised:\n+            raise AssertionError(\"Assertion should have been raised\")\n+\n+        self.log.info(\"Ensure we try to connect if port=0 and get an error due to missing I2P proxy\")\n+        addr = \"h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\"\n+        with node.assert_debug_log(expected_msgs=[f\"Error connecting to {addr}\"]):\n+            node.addnode(node=addr, command=\"onetry\")\n+\n+\n+if __name__ == '__main__':\n+    I2PPorts().main()"
      },
      {
        "sha": "fbd9d6028a854e09d42cd4f792255fe4c9d6abf0",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
        "patch": "@@ -291,6 +291,7 @@\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n     'wallet_startup.py',\n+    'p2p_i2p_ports.py',\n     'feature_config_args.py',\n     'feature_settings.py',\n     'rpc_getdescriptorinfo.py',"
      }
    ]
  },
  {
    "sha": "e0a2b390c144e123e2fc8a289fdff36815476964",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGEyYjM5MGMxNDRlMTIzZTJmYzhhMjg5ZmRmZjM2ODE1NDc2OTY0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-28T14:54:45Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:38Z"
      },
      "message": "addrman: reset I2P ports to 0 when loading from disk\n\nThis is a temporary change to convert I2P addresses that have propagated\nwith port 8333 to ones with port 0.\n\nIt would cause a problem some day if indeed some bitcoin software is\nlistening on port 8333 only and rejects connections to port 0 and we are\nstill using SAM 3.1 which only supports port 0. In this case we would\nreplace 8333 with 0 and try to connect to such nodes.\n\nThis commit should be included in 22.0 and be reverted before 23.0 is\nreleased.",
      "tree": {
        "sha": "82fbf2ebcdd5ccb38cb1add7ec8390801013eb8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82fbf2ebcdd5ccb38cb1add7ec8390801013eb8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0a2b390c144e123e2fc8a289fdff36815476964",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKoACgkQVN8G9ktV\ny79U/h//VMtpDsb2+elbB/kNSBBsbhsdIKTRYTxYrbO5LGcoGu+S6YfGlHV94ATG\nAyCCfeJ5WLwjb19lQM9n7Q3FT7yr8poSfQR/PQyP1ijhMvgVcT5kpzm8Ylwnp52N\nPI2ot5a5QgKNvmmZEfR10sk30WhiKPlse2W9bt99z2+ptvkf8HbAtW5lni3cl/mT\nbipvw3ORhClb/Lxd91xGx2w3DdFIxWp0wDJmpaTvzjOjkjFn6ERS0mefgrk9kLhz\n5rlGlRifq/uCseaxcDgfRVf54lvLO3bx+dZIds33W7jgNT3xflEwhD75seTGkufr\n42f7PzD0JPxzgUYGgSPXaJtTBKRX+SQYs5aV7tzF7uwavwZ3e/VaUXh8DKMYcr4t\nCtqIHYBvgBDfqObHId6UT9vXmhSMDx4MAs/DUEOPwKfPXxUU+Xb8e+PjIrc/w0m9\n1S/CU3WUeu9/7i/hk4rnueUszqkwg2A1GWRQjkiNM8r5IfQkukvLikqYw5BWxkki\nKIvZHsmpYHDpb9YIuyiP5KdZbp2k/8ew5sKkVTjZs3ArkMEoGQYyb9Fjq5VXPRuF\n2UkakKboBi8rY6j/UXOyGcnCAwZeAB1gtnYbY/u4NAx0FET9yJ0XFaSFz1yxjtrd\nmZrZVkNd8FCXDsOnVS59FuC03AVsqPI8LBVbD5C1DKDhIfIWPnTr17YUS+MKbQ73\nteALtYcYqO5s3FgJMr8nzbv52eqxQJxYIsMfZ1+eSBEX8IglMjFmajlw0zXBA07S\nKyv2iPLTQFKXYXRhDERrqbHLuCwmJQZVycEz1N21kwtKN8w+hS5qVBW/y9I5yDrv\nne61JtpeR2wEOkJILJi7ZU7o8Dntcue38JxKCg8syTa9rdmQLwgyy/hiME+9/zGb\nnVMKiUh9OBblgkBVcNSX/wjTEvJ9/9DiHHpnMnCXNnwpN4EC7pzcMw0LN8H/JJ+J\nihl3HtMpoFZ7Z06A8+v6Vocu6ppqrwVaW0O0zvUbNsv2THCDnW+36V31TP9glQpu\nqnrKUfjyNNlotW5necIqL2YKUYdCxLRTtcY4UN3yJPPn4cBFh4ARNl17u57JlXBi\nV6KZdHCS6K1p3qNNVhuq29ue911EtzWzUAjozzd8iDIVbz671/4Bb7ta2/hACYDm\n3k/7MoxYDKiHhDmr1jz/N/k+RCnm5HG4gJqOprWjjH5Qq4kzinNmKBoiqUurEqXF\nMMs681gS1zJuWaSbCsHS5avCGi5H/uTu1CtH2ploJsaJZXjzpUPgLa2gBp1cUWRb\nO2HnrZk5gDMXAPZFPja//mfNi5V2DqZa/hEy0azbcZln6kZK54HGBcRx36ekMtns\nZRPg+lQrObTTmBDEY2PJt9ZdownySg==\n=Tr3J\n-----END PGP SIGNATURE-----",
        "payload": "tree 82fbf2ebcdd5ccb38cb1add7ec8390801013eb8a\nparent 41cda9d075ebcab1dbb950160ebe9d0ba7b5745e\nauthor Vasil Dimov <vd@FreeBSD.org> 1624892085 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822378 +0200\n\naddrman: reset I2P ports to 0 when loading from disk\n\nThis is a temporary change to convert I2P addresses that have propagated\nwith port 8333 to ones with port 0.\n\nIt would cause a problem some day if indeed some bitcoin software is\nlistening on port 8333 only and rejects connections to port 0 and we are\nstill using SAM 3.1 which only supports port 0. In this case we would\nreplace 8333 with 0 and try to connect to such nodes.\n\nThis commit should be included in 22.0 and be reverted before 23.0 is\nreleased.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a2b390c144e123e2fc8a289fdff36815476964",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a2b390c144e123e2fc8a289fdff36815476964",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a2b390c144e123e2fc8a289fdff36815476964/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cda9d075ebcab1dbb950160ebe9d0ba7b5745e"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 225,
      "deletions": 0
    },
    "files": [
      {
        "sha": "389d106164d5995f195067ccec7c58edb733ab39",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a2b390c144e123e2fc8a289fdff36815476964/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a2b390c144e123e2fc8a289fdff36815476964/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=e0a2b390c144e123e2fc8a289fdff36815476964",
        "patch": "@@ -6,6 +6,7 @@\n #include <addrman.h>\n \n #include <hash.h>\n+#include <i2p.h>\n #include <logging.h>\n #include <netaddress.h>\n #include <serialize.h>\n@@ -731,3 +732,100 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n     }\n     return bits;\n }\n+\n+void CAddrMan::ResetI2PPorts()\n+{\n+    for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvNew[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            // Reposition entries of vvNew within the same bucket because we don't know the source\n+            // address which led to the decision to store the entry in vvNew[bucket] so we can't\n+            // re-evaluate that decision, but even if we could, CAddrInfo::GetNewBucket() does not\n+            // use CAddrInfo::GetKey() so it would end up in the same bucket as before the port\n+            // change.\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, true, bucket);\n+\n+            if (i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from i to i_target, removing the entry from i_target (if any).\n+            ClearNew(bucket, i_target);\n+            vvNew[bucket][i_target] = id;\n+            vvNew[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+\n+    for (int bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvTried[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            const auto bucket_target = addr_info_newport.GetTriedBucket(nKey, m_asmap);\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, false, bucket_target);\n+\n+            if (bucket_target == bucket && i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from (bucket, i) to (bucket_target, i_target). If the latter is\n+            // occupied, then move the entry from there to vvNew.\n+\n+            const auto old_target_id = vvTried[bucket_target][i_target];\n+            if (old_target_id != -1) {\n+                CAddrInfo& old_target_info = mapInfo[old_target_id];\n+\n+                old_target_info.fInTried = false;\n+                vvTried[bucket_target][i_target] = -1;\n+                --nTried;\n+\n+                const auto new_bucket = old_target_info.GetNewBucket(nKey, m_asmap);\n+                const auto new_bucket_i = old_target_info.GetBucketPosition(nKey, true, new_bucket);\n+                ClearNew(new_bucket, new_bucket_i);\n+\n+                old_target_info.nRefCount = 1;\n+                vvNew[new_bucket][new_bucket_i] = old_target_id;\n+                ++nNew;\n+            }\n+\n+            vvTried[bucket_target][i_target] = id;\n+            vvTried[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+}"
      },
      {
        "sha": "2a5c6c06b4ef722a5a826d02506d3bb9151aa305",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a2b390c144e123e2fc8a289fdff36815476964/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a2b390c144e123e2fc8a289fdff36815476964/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=e0a2b390c144e123e2fc8a289fdff36815476964",
        "patch": "@@ -452,6 +452,8 @@ class CAddrMan\n \n         RemoveInvalid();\n \n+        ResetI2PPorts();\n+\n         Check();\n     }\n \n@@ -767,6 +769,14 @@ class CAddrMan\n     //! Remove invalid addresses.\n     void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /**\n+     * Reset the ports of I2P peers to 0.\n+     * This is needed as a temporary measure because now we enforce port 0 and\n+     * only connect to I2P hosts if the port is 0, but in the early days some\n+     * I2P addresses with port 8333 were rumoured and persisted into addrmans.\n+     */\n+    void ResetI2PPorts() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     friend class CAddrManTest;\n };\n "
      },
      {
        "sha": "f2eed956cd6ed9b8c6f66aaf44389c168f59a1b4",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a2b390c144e123e2fc8a289fdff36815476964/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a2b390c144e123e2fc8a289fdff36815476964/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=e0a2b390c144e123e2fc8a289fdff36815476964",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <addrman.h>\n+#include <i2p.h>\n #include <test/data/asmap.raw.h>\n #include <test/util/setup_common.h>\n #include <util/asmap.h>\n@@ -966,5 +967,121 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n }\n \n+BOOST_AUTO_TEST_CASE(reset_i2p_ports)\n+{\n+    CAddrManTest addrman1;\n+    CAddrManTest addrman2;\n+    const uint32_t good_time{static_cast<uint32_t>(GetAdjustedTime())};\n+    constexpr uint16_t port = 8333;\n+\n+    // Has its port changed, will be re-positioned within the same bucket in vvNew.\n+    const CAddress i2p_new1{\n+        ResolveService(\"72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, will not be re-positioned in vvNew because ports 0 and 10075 result in\n+    // the same bucket position.\n+    const CAddress i2p_new2{\n+        ResolveService(\"gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p\", 10075),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged, port is already as it should be.\n+    const CAddress i2p_new3{\n+        ResolveService(\"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+                       I2P_SAM31_PORT),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, re-positioning in vvNew will cause i2p_new3 to be evicted.\n+    const CAddress i2p_new4{\n+        ResolveService(\"c4cbbkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged.\n+    const CAddress ipv4_new{ResolveService(\"1.2.3.4\", port), NODE_NONE, good_time};\n+\n+    // Has its port changed, will be re-positioned in vvTried.\n+    const CAddress i2p_tried1{\n+        ResolveService(\"h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, will not be re-positioned in vvTried because ports 0 and 10537\n+    // result in the same position (bucket, i).\n+    const CAddress i2p_tried2{\n+        ResolveService(\"pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p\", 10537),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged, port is already as it should be.\n+    const CAddress i2p_tried3{\n+        ResolveService(\"hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p\",\n+                       I2P_SAM31_PORT),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, re-positioning in vvTried will cause i2p_tried3 to be moved to vvNew.\n+    const CAddress i2p_tried4{\n+        ResolveService(\"hna37nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged.\n+    const CAddress ipv4_tried{ResolveService(\"2.3.4.5\", port), NODE_NONE, good_time};\n+\n+    const CNetAddr source;\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    addrman1.Add(i2p_new1, source);\n+    addrman1.Add(i2p_new2, source);\n+    addrman1.Add(i2p_new3, source);\n+    addrman1.Add(i2p_new4, source);\n+    addrman1.Add(ipv4_new, source);\n+\n+    addrman1.Add(i2p_tried1, source);\n+    addrman1.Good(i2p_tried1);\n+    addrman1.Add(i2p_tried2, source);\n+    addrman1.Good(i2p_tried2);\n+    addrman1.Add(i2p_tried3, source);\n+    addrman1.Good(i2p_tried3);\n+    addrman1.Add(i2p_tried4, source);\n+    addrman1.Good(i2p_tried4);\n+    addrman1.Add(ipv4_tried, source);\n+    addrman1.Good(ipv4_tried);\n+\n+    stream << addrman1;\n+    stream >> addrman2;\n+\n+    const size_t max_addresses{0};\n+    const size_t max_pct{0};\n+\n+    auto addresses = addrman2.GetAddr(max_addresses, max_pct, NET_I2P);\n+    BOOST_REQUIRE_EQUAL(addresses.size(), 7UL);\n+    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n+    BOOST_CHECK_EQUAL(addresses[0].ToStringIP(), i2p_new4.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[0].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[1].ToStringIP(), i2p_new2.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[1].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[2].ToStringIP(), i2p_tried4.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[2].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[3].ToStringIP(), i2p_tried3.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[3].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[4].ToStringIP(), i2p_tried1.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[4].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[5].ToStringIP(), i2p_tried2.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[5].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[6].ToStringIP(), i2p_new1.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[6].GetPort(), I2P_SAM31_PORT);\n+\n+    addresses = addrman2.GetAddr(max_addresses, max_pct, NET_IPV4);\n+    BOOST_REQUIRE_EQUAL(addresses.size(), 2UL);\n+    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n+    BOOST_CHECK_EQUAL(addresses[0].ToStringIPPort(), ipv4_new.ToStringIPPort());\n+    BOOST_CHECK_EQUAL(addresses[1].ToStringIPPort(), ipv4_tried.ToStringIPPort());\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAxZWM5ZDJlMDVhMzVjMzVmNTg3YTI4ZjFmZWVlNmNlYmNjNjFi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-02T08:33:38Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-09T09:19:38Z"
      },
      "message": "doc: mention that we enforce port=0 in I2P\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "203e74f7ffc8a65674e5d159737d2892cec8d860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203e74f7ffc8a65674e5d159737d2892cec8d860"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDoFKsACgkQVN8G9ktV\ny7+Sjh//Q75fZICRt0S+dJpU7P2i0I+QaqQV30xmtex4g/OqIX0K/hcQLxDUMQrg\n8z1b4dFKQ5z/kVgkIsxDj7AjkpokLt/kQDtbWnYhE48zY7oHglBZj/xGxOsvxfao\nmUhb3eyjB/a1TbJIfRMx5gKeyYYtz4CRrqUDYNuvGK6fy+UH2uBzV4G7DTgHMpIx\nKSYWc8fzA/OBTyp1+E2xtXxPntl8RKtL8MfVryXGnoXRy7gHn3fNL993sa8wE8vu\nqyBfsuSpgfFRtdB1Iu2xsSc2AICxYrhUwRavjSRWemHDYYAQvxcNRLWIFaIwE64c\nuSJ2UWxOUyx8KpqXwG1F3/rKbAtHdfvAHPX1wY1BstskwPbSX70hud/ch04r23vM\nGeVtyVX95+WxZrJIxqCTnW0SSPNl/rpi3cXBDooJr9Z9JuyxqCqiNfY/0c3at33M\ntmcqdhpyoMklB0Ikni0qWdBNe2Pk45lT0ijFtL90ZavqXWZQAN/wPKIjve0TZG8I\no+g293i4HyaRygR4LokZeCa4KhFHzYHdds/apeR+cVY+9DdFFGbZop27p6v77ULS\nGN3kBM6fvwokuWNfrMAwLIIpCs+t7PZN6Ahkwzc99E432G7EH0geHkasCcRTIeMd\nN3CWmlzEd4rPlULNWnOuKgY+rOWuvttx9raI2R+8sbJoSJsOtpser3nSHIrSxnlC\nfAcfty1/qY2P1e0rEXghRwS0fymifqdZg3oO39Pps4On85Vp1k/r4ke6DUtjHb/8\nHWtXgSyzCsW1zUVn5MgfXzKOCQMqnoJDa+p/lCvTbxs7rG6Ga4JIhbJVCYN81O5B\nZ7JmjMyruCzp44qK67TS8Jfe2ZDGgZWDkFaGu1iACxPZRnex+pYEHth6HCoAyaKL\nCSec/KU+gxYkyOmi7PAwKwdvMj9x8HGS4m2xDd9rMBrIoPguBByvaaFRa+FPru+z\noha3hZ1Qm7nVrvDxSE8oXBCHnaMEjT3E2aywddrkb+wvQ87N2iRYLAGg49MBt35E\nH+jKdChJxFuVdbS/41tKz0G7fiF5myD0Sh7tFub3x6DQLk1iQ5n6vAN8gv7dyUNO\n8Aivsu/0tt7cIJUtfUyLwn+vpERkXW94NqMHlNo4vDTkuIszScNSSAUo+nDaxLgZ\nnQISuZ4L3GN7c7B5840VCXk7DpESmb6ijZsVTwxgisy5GcMnXMDmNIoBeq3/kv1a\nfWCbmhZiAwfJluggcPduCEeQd+g0mcq/Om4PShHfTwpdBrFElVyB0kMFnVvYcjVg\ng2/+u592hzUN9BcpIh8THPOZTx0Nl1hf+KpsvbPAEIZWWACes72dN4lV3G6IAGko\nn0MA+B49FFz0U/ByiQTAWKUPTAqwBQ==\n=Cu5q\n-----END PGP SIGNATURE-----",
        "payload": "tree 203e74f7ffc8a65674e5d159737d2892cec8d860\nparent e0a2b390c144e123e2fc8a289fdff36815476964\nauthor Vasil Dimov <vd@FreeBSD.org> 1625214818 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625822378 +0200\n\ndoc: mention that we enforce port=0 in I2P\n\nCo-authored-by: Jon Atack <jon@atack.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4101ec9d2e05a35c35f587a28f1feee6cebcc61b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a2b390c144e123e2fc8a289fdff36815476964",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a2b390c144e123e2fc8a289fdff36815476964",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a2b390c144e123e2fc8a289fdff36815476964"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "27ef4d9d9f0d995bbebff7af816bc0f55b655693",
        "filename": "doc/i2p.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4101ec9d2e05a35c35f587a28f1feee6cebcc61b/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4101ec9d2e05a35c35f587a28f1feee6cebcc61b/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
        "patch": "@@ -70,3 +70,18 @@ RPC.\n \n Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3) protocol\n to connect to the I2P network. Any I2P router that supports it can be used.\n+\n+## Ports in I2P and Bitcoin Core\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3)\n+protocol. One particularity of SAM v3.1 is that it does not support ports,\n+unlike newer versions of SAM (v3.2 and up) that do support them and default the\n+port numbers to 0. From the point of view of peers that use newer versions of\n+SAM or other protocols that support ports, a SAM v3.1 peer is connecting to them\n+on port 0, from source port 0.\n+\n+To allow future upgrades to newer versions of SAM, Bitcoin Core sets its\n+listening port to 0 when listening for incoming I2P connections and advertises\n+its own I2P address with port 0. Furthermore, it will not attempt to connect to\n+I2P addresses with a non-zero port number because with SAM v3.1 the destination\n+port (`TO_PORT`) is always set to 0 and is not in the control of Bitcoin Core."
      }
    ]
  },
  {
    "sha": "8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWIwYzc3Mjk5YTViMTg0YThkMGVkZjM4ZjI2YTk3YmY5YmJlZDZl",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-09T15:16:48Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-09T15:34:46Z"
      },
      "message": "Merge bitcoin/bitcoin#22253: validation: distinguish between same tx and same-nonwitness-data tx in mempool\n\nb7a8cd9963e810264d3b45d0ad15af863965c47a [test] submit same txid different wtxid as mempool tx (glozow)\nfdb48163bfbf34f79dc78ffaa2bbf9e39af96687 [validation] distinguish same txid different wtxid in mempool (glozow)\n\nPull request description:\n\n  On master, if you submit a transaction with the same txid but different witness to the mempool, it thinks the transactions are the same. Users submitting through `BroadcastTransaction()` (i.e. `sendrawtransaction` or the wallet) don't get notified that there's a different transaction in the mempool, although it doesn't crash. Users submitting through `testmempoolaccept()` will get a \"txn-already-in-mempool\" error.\n\n  This PR simply distinguishes between `txn-already-in-mempool` and `txn-same-nonwitness-data-in-mempool`, without handling them differently: `sendrawtransaction` still will not throw, but `testmempoolaccept` will give you a different error.\n\n  I believe the intention of #19645 is to allow full swaps of transactions that have different witnesses but identical nonwitness data. Returning a different error message + adding a test was suggested: https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-705109193 so this is that PR.\n\nACKs for top commit:\n  naumenkogs:\n    ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  jnewbery:\n    Code review ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  theStack:\n    Code-review ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  darosior:\n    re-utACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n\nTree-SHA512: 9c6591edaf8727ba5b4675977adb8cbdef7288584003b6cd659828032dc92d2ae915800a8ef8b6fdffe112c1b660df72297a3dcf2e2e3e1f959c6cb3678c63ee",
      "tree": {
        "sha": "c88996243687fda5819f8eace6b844578effd0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c88996243687fda5819f8eace6b844578effd0fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDobJYACgkQHkrtYphs\n0l3gDAf/Rl6nVIFefOy2q4+i7tIF+kUjIscFAIel+F/jDMbYXvgvic010x0FYJaf\nSrgsskegfGO/KyUUj5k7IGVch2VCZLgCVvi42fJr770esiZFPZMh3tN4OqmEsmHV\nRvWj6VT+B+UkS9BVr6meh4MtJCF3DbhRCdktVbfdcC90sBLZf6Kubu6ztZbqSZvn\nb8E96HKd4GFPM2nEnHyoQjhA+1Vkal9Kww6/fwfDb61JNl7jXSWXRfD8Ms8BqlXx\nfoNGZjl1Dk/z6HGfR5BsXu1fD3q09hyw57Xijmd8ZEDajZWlgBU4mTtM3yNpLS2G\nf8ekeGPi2+EKhNimHa1mMSoPoBb5ZQ==\n=iRa1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEnUchzIbgXA5PtEorxOxwzXRLZHyAQCENS/3PW31DR7CP/wEHBz6YIBrGhn\noDMbnzHiE30I8QRg6Gya8AjfOYzJcuNVdACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEKVMM+HL9lY2bnX6j31Ndv4I8SCzywKu\n9luIf+c7V56i+lgjLz/WSwcfyoOpIhs5xlHKcgjxBGDobJzwCJ7/GZ2L5uP+AIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BCro2byy6mYEFTy3+9mWHMiCPAg7Im5zERviAyaqN6uooL8zlrytt7f\n9+zUWNODqHQjyfkI8QRg6Gyb8AhIDqhopSN27ACD3+MNLvkMjiwraHR0cHM6Ly9i\nb2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQrHw4+CGxbdPl2/Un\n8fGrngjwIB5u08omzzt/mUi223Ztz860bjXfcHYo9kyt20CVk2nOCPEg5yvjblRH\n4rb+zRMYXDHU0ja6wKnkiNiDsKuXOd+U5tMI8QRg6Gyb8AirNJlgavDS3wCD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c88996243687fda5819f8eace6b844578effd0fe\nparent d1e4c56309aeb73772e3a9d779a9c157024c9e1e\nparent b7a8cd9963e810264d3b45d0ad15af863965c47a\nauthor W. J. van der Laan <laanwj@protonmail.com> 1625843808 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1625844886 +0200\n\nMerge bitcoin/bitcoin#22253: validation: distinguish between same tx and same-nonwitness-data tx in mempool\n\nb7a8cd9963e810264d3b45d0ad15af863965c47a [test] submit same txid different wtxid as mempool tx (glozow)\nfdb48163bfbf34f79dc78ffaa2bbf9e39af96687 [validation] distinguish same txid different wtxid in mempool (glozow)\n\nPull request description:\n\n  On master, if you submit a transaction with the same txid but different witness to the mempool, it thinks the transactions are the same. Users submitting through `BroadcastTransaction()` (i.e. `sendrawtransaction` or the wallet) don't get notified that there's a different transaction in the mempool, although it doesn't crash. Users submitting through `testmempoolaccept()` will get a \"txn-already-in-mempool\" error.\n\n  This PR simply distinguishes between `txn-already-in-mempool` and `txn-same-nonwitness-data-in-mempool`, without handling them differently: `sendrawtransaction` still will not throw, but `testmempoolaccept` will give you a different error.\n\n  I believe the intention of #19645 is to allow full swaps of transactions that have different witnesses but identical nonwitness data. Returning a different error message + adding a test was suggested: https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-705109193 so this is that PR.\n\nACKs for top commit:\n  naumenkogs:\n    ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  jnewbery:\n    Code review ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  theStack:\n    Code-review ACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n  darosior:\n    re-utACK b7a8cd9963e810264d3b45d0ad15af863965c47a\n\nTree-SHA512: 9c6591edaf8727ba5b4675977adb8cbdef7288584003b6cd659828032dc92d2ae915800a8ef8b6fdffe112c1b660df72297a3dcf2e2e3e1f959c6cb3678c63ee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1e4c56309aeb73772e3a9d779a9c157024c9e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1e4c56309aeb73772e3a9d779a9c157024c9e1e"
      },
      {
        "sha": "b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a8cd9963e810264d3b45d0ad15af863965c47a"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 123,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c80f015143a4d5d06152fef550c10d9c0575c307",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "patch": "@@ -587,9 +587,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n-    // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {\n+        // Exact transaction already exists in the mempool.\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n+    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {\n+        // Transaction with the same non-witness data but different witness (same txid, different\n+        // wtxid) already exists in the mempool.\n+        return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-same-nonwitness-data-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions"
      },
      {
        "sha": "dd1f8997ad301d4fbe5fec204d51d1f1ddb297f2",
        "filename": "test/functional/mempool_accept_wtxid.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/test/functional/mempool_accept_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/test/functional/mempool_accept_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept_wtxid.py?ref=8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    sha256,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_TRUE,\n+    hash160,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool and 101 blocks')\n+        # The last 100 coinbase transactions are premature\n+        blockhash = node.generate(101)[0]\n+        txid = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0][\"txid\"]\n+        assert_equal(node.getmempoolinfo()['size'], 0)\n+\n+        self.log.info(\"Submit parent with multiple script branches to mempool\")\n+        hashlock = hash160(b'Preimage')\n+        witness_script = CScript([OP_IF, OP_HASH160, hashlock, OP_EQUAL, OP_ELSE, OP_TRUE, OP_ENDIF])\n+        witness_program = sha256(witness_script)\n+        script_pubkey = CScript([OP_0, witness_program])\n+\n+        parent = CTransaction()\n+        parent.vin.append(CTxIn(COutPoint(int(txid, 16), 0), b\"\"))\n+        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\n+        parent.rehash()\n+\n+        privkeys = [node.get_deterministic_priv_key().key]\n+        raw_parent = node.signrawtransactionwithkey(hexstring=parent.serialize().hex(), privkeys=privkeys)['hex']\n+        parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n+        node.generate(1)\n+\n+        # Create a new transaction with witness solving first branch\n+        child_witness_script = CScript([OP_TRUE])\n+        child_witness_program = sha256(child_witness_script)\n+        child_script_pubkey = CScript([OP_0, child_witness_program])\n+\n+        child_one = CTransaction()\n+        child_one.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_one.wit.vtxinwit.append(CTxInWitness())\n+        child_one.wit.vtxinwit[0].scriptWitness.stack = [b'Preimage', b'\\x01', witness_script]\n+        child_one_wtxid = child_one.getwtxid()\n+        child_one_txid = child_one.rehash()\n+\n+        # Create another identical transaction with witness solving second branch\n+        child_two = CTransaction()\n+        child_two.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_two.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_two.wit.vtxinwit.append(CTxInWitness())\n+        child_two.wit.vtxinwit[0].scriptWitness.stack = [b'', witness_script]\n+        child_two_wtxid = child_two.getwtxid()\n+        child_two_txid = child_two.rehash()\n+\n+        assert_equal(child_one_txid, child_two_txid)\n+        assert child_one_wtxid != child_two_wtxid\n+\n+        self.log.info(\"Submit one child to the mempool\")\n+        txid_submitted = node.sendrawtransaction(child_one.serialize().hex())\n+        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+\n+        # testmempoolaccept reports the \"already in mempool\" error\n+        assert_equal(node.testmempoolaccept([child_one.serialize().hex()]), [{\n+            \"txid\": child_one_txid,\n+            \"wtxid\": child_one_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-already-in-mempool\"\n+        }])\n+        testres_child_two = node.testmempoolaccept([child_two.serialize().hex()])[0]\n+        assert_equal(testres_child_two, {\n+            \"txid\": child_two_txid,\n+            \"wtxid\": child_two_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-same-nonwitness-data-in-mempool\"\n+        })\n+\n+        # sendrawtransaction will not throw but quits early when the exact same transaction is already in mempool\n+        node.sendrawtransaction(child_one.serialize().hex())\n+        # sendrawtransaction will not throw but quits early when a transaction with the same non-witness data is already in mempool\n+        node.sendrawtransaction(child_two.serialize().hex())\n+\n+\n+if __name__ == '__main__':\n+    MempoolWtxidTest().main()"
      },
      {
        "sha": "303742236f4e08f604817efda9bc5b47de6929c5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "patch": "@@ -279,6 +279,7 @@\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',\n     'mempool_compatibility.py',\n+    'mempool_accept_wtxid.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'p2p_ping.py',"
      }
    ]
  },
  {
    "sha": "e0fe658b863ee06c778274d677b8a8d520cf4f73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGZlNjU4Yjg2M2VlMDZjNzc4Mjc0ZDY3N2I4YThkNTIwY2Y0Zjcz",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-12T08:01:36Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-12T08:01:48Z"
      },
      "message": "Merge bitcoin/bitcoin#22335: doc: recommend `--disable-external-signer` in OpenBSD build guide\n\ne65d1d49864d047764eb2b444b2fc806b67e051c doc: recommend `--disable-external-signer` in OpenBSD build guide (Sebastian Falbesoner)\n\nPull request description:\n\n  Building the master branch with the default build settings (i.e. with external signer support enabled) leads to the following errors on my OpenBSD 6.9 machine:\n\n  ```\n  In file included from util/system.cpp:9:\n  In file included from /usr/local/include/boost/process.hpp:25:\n  In file included from /usr/local/include/boost/process/group.hpp:32:\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:17: error: no member named 'waitid' in the global namespace\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                ~~^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:24: error: use of undeclared identifier 'P_PGID'\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                         ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:48: error: use of undeclared identifier 'WEXITED'\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                                                 ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:17: error: no member named 'waitid' in the global namespace\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                ~~^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:24: error: use of undeclared identifier 'P_PGID'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                         ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:49: error: use of undeclared identifier 'WEXITED'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                                                  ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:59: error: use of undeclared identifier 'WSTOPPED'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                                                            ^\n  7 errors generated.\n  ```\n\n  This PR recommends passing `--disable-external-signer` in the OpenBSD build guide ([as suggested by laanwj](https://github.com/bitcoin/bitcoin/pull/22294#issuecomment-867452411)). The same commit also bumps the OpenBSD version mentioned in the header to 6.9 -- I recently used this document to setup a Bitcoin Core build on 6.9 and the description and all mentioned versions were still valid (before external signer support was enabled by default).\n\n  Would be nice if another OpenBSD user could confirm the build error.\n\nACKs for top commit:\n  laanwj:\n    ACK e65d1d49864d047764eb2b444b2fc806b67e051c\n\nTree-SHA512: c3ae7eca29cf42b4b52024477e1c3fb7242bbf9d809bc95f8fa08b2f9bf4bcfd4f22457d58569a208ac1d8e5fe41b270addd13d85a5bba0521a0f9e325288448",
      "tree": {
        "sha": "bd1133f1a943b0ec479c0c4f9d79d8556ff3a595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd1133f1a943b0ec479c0c4f9d79d8556ff3a595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0fe658b863ee06c778274d677b8a8d520cf4f73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDr9u0ACgkQHkrtYphs\n0l25cAf/ZxZq/KD4jbNuQwqtdAacrglaxXl2IPlUTKhBfcRd6aS/5Y9jiyXIQXHl\n7Ljx7ky2yItZhbzg1Is4fLZZhwV8Fef7SvoKGD3VHQdOKrcMn4PkHf+oKG2txDBl\nE548d651DUEA0WyT5/44cUlQ1PnHFw96HyT82Un5R8XCPhditg/47vP2W0hmLJG/\nBV4BLLmKsEXKFq5dOb6/jWjMJo9ZnJSnkw4TBApms+n2czJ3aflyFr3P205+ioaU\nMp6tEt3q7/psd45K1+K3zEw79DqIBDgXkqgGc0aWWq10luWO8OwJOwu9DZCeBM4F\n6OOh0I5YcBDve2nhYSfZl+XDpZ5nXQ==\n=rofH\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGfjte+PIJVqI2VNkthPLbAnXxA423vPMz+GdDqCFOIiCP/wEFKOqLk2dcHR\nkaqXjXQdghoI8CAtitN6QJkbom4dzmLwItjJmAbRdgGDipQu+ZxvLlriWAjwIHMo\nsq/diDZ0vxi0SY/LFeV7it/RSk1uGEStCGUcM7tfCPEEYOv29PAIOhnmrV/P04MA\ng9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ//wEFRy2xq65a1hh1jxPC6k7FAI8QRg6/b08AhxetEYsVnciQCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ/AQqCdmKIpRzD5VpNc289ih+wjxIC5WICSoIEKdGuyC/B++oeGGV9CPdx8e3E/k\nMpX14szcCPAgpDsGAX8/3IFTlSce8ZW1Cj3dE/h6gIwFbDBQegBAv40I8QRg6/bz\n8AiJLAzhMY7CTQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree bd1133f1a943b0ec479c0c4f9d79d8556ff3a595\nparent 8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e\nparent e65d1d49864d047764eb2b444b2fc806b67e051c\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626076896 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626076908 +0200\n\nMerge bitcoin/bitcoin#22335: doc: recommend `--disable-external-signer` in OpenBSD build guide\n\ne65d1d49864d047764eb2b444b2fc806b67e051c doc: recommend `--disable-external-signer` in OpenBSD build guide (Sebastian Falbesoner)\n\nPull request description:\n\n  Building the master branch with the default build settings (i.e. with external signer support enabled) leads to the following errors on my OpenBSD 6.9 machine:\n\n  ```\n  In file included from util/system.cpp:9:\n  In file included from /usr/local/include/boost/process.hpp:25:\n  In file included from /usr/local/include/boost/process/group.hpp:32:\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:17: error: no member named 'waitid' in the global namespace\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                ~~^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:24: error: use of undeclared identifier 'P_PGID'\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                         ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:38:48: error: use of undeclared identifier 'WEXITED'\n          ret = ::waitid(P_PGID, p.grp, &status, WEXITED | WNOHANG);\n                                                 ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:17: error: no member named 'waitid' in the global namespace\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                ~~^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:24: error: use of undeclared identifier 'P_PGID'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                         ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:49: error: use of undeclared identifier 'WEXITED'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                                                  ^\n  /usr/local/include/boost/process/detail/posix/wait_group.hpp:144:59: error: use of undeclared identifier 'WSTOPPED'\n          ret = ::waitid(P_PGID, p.grp, &siginfo, WEXITED | WSTOPPED | WNOHANG);\n                                                            ^\n  7 errors generated.\n  ```\n\n  This PR recommends passing `--disable-external-signer` in the OpenBSD build guide ([as suggested by laanwj](https://github.com/bitcoin/bitcoin/pull/22294#issuecomment-867452411)). The same commit also bumps the OpenBSD version mentioned in the header to 6.9 -- I recently used this document to setup a Bitcoin Core build on 6.9 and the description and all mentioned versions were still valid (before external signer support was enabled by default).\n\n  Would be nice if another OpenBSD user could confirm the build error.\n\nACKs for top commit:\n  laanwj:\n    ACK e65d1d49864d047764eb2b444b2fc806b67e051c\n\nTree-SHA512: c3ae7eca29cf42b4b52024477e1c3fb7242bbf9d809bc95f8fa08b2f9bf4bcfd4f22457d58569a208ac1d8e5fe41b270addd13d85a5bba0521a0f9e325288448\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0fe658b863ee06c778274d677b8a8d520cf4f73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0fe658b863ee06c778274d677b8a8d520cf4f73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0fe658b863ee06c778274d677b8a8d520cf4f73/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e"
      },
      {
        "sha": "e65d1d49864d047764eb2b444b2fc806b67e051c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d1d49864d047764eb2b444b2fc806b67e051c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e65d1d49864d047764eb2b444b2fc806b67e051c"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "89fd506f1399a7d4b8d4b64918cd54fea7303cc0",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0fe658b863ee06c778274d677b8a8d520cf4f73/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0fe658b863ee06c778274d677b8a8d520cf4f73/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=e0fe658b863ee06c778274d677b8a8d520cf4f73",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.7)\n+(updated for OpenBSD 6.9)\n \n This guide describes how to build bitcoind, bitcoin-qt, and command-line utilities on OpenBSD.\n \n@@ -67,22 +67,29 @@ export AUTOMAKE_VERSION=1.16\n ```\n Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n+Note that building with external signer support currently fails on OpenBSD,\n+hence you have to explicitely disable it by passing the parameter\n+`--disable-external-signer` to the configure script.\n+(Background: the feature requires the header-only library boost::process, which\n+is available on OpenBSD 6.9 via Boost 1.72.0, but contains certain system calls\n+and preprocessor defines like `waitid()` and `WEXITED` that are not available.)\n+\n To configure with wallet:\n ```bash\n-./configure --with-gui=no CC=cc CXX=c++ \\\n+./configure --with-gui=no --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n+./configure --disable-wallet --with-gui=no --disable-external-signer CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n ```\n \n To configure with GUI:\n ```bash\n-./configure --with-gui=yes CC=cc CXX=c++ \\\n+./configure --with-gui=yes --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake"
      }
    ]
  },
  {
    "sha": "842e2a9c54bd27865712b154a1582f6f368713f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDJlMmE5YzU0YmQyNzg2NTcxMmIxNTRhMTU4MmY2ZjM2ODcxM2Yx",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-12T08:08:16Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-12T08:08:22Z"
      },
      "message": "Merge bitcoin/bitcoin#20234: net: don't bind on 0.0.0.0 if binds are restricted to Tor\n\n2feec3ce3130961f98ceb030951d0e46d3b9096c net: don't bind on 0.0.0.0 if binds are restricted to Tor (Vasil Dimov)\n\nPull request description:\n\n  The semantic of `-bind` is to restrict the binding only to some address.\n  If not specified, then the user does not care and we bind to `0.0.0.0`.\n  If specified then we should honor the restriction and bind only to the\n  specified address.\n\n  Before this change, if no `-bind` is given then we would bind to\n  `0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\n  the user does not care to restrict the binding.\n\n  However, if only `-bind=addr:port=onion` is given (without ordinary\n  `-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\n  addition.\n\n  Change the above to not do the additional bind: if only\n  `-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\n  to `addr:port` (only) and consider incoming connections to that as Tor\n  and do not advertise it. I.e. a Tor-only node.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 2feec3ce3130961f98ceb030951d0e46d3b9096c\n  jonatack:\n    utACK 2feec3ce3130961f98ceb030951d0e46d3b9096c per `git diff a004833 2feec3c`\n  hebasto:\n    ACK 2feec3ce3130961f98ceb030951d0e46d3b9096c, tested on Linux Mint 20.1 (x86_64):\n\nTree-SHA512: a04483af601706da928958b92dc560f9cfcc78ab0bb9d74414636eed1c6f29ed538ce1fb5a17d41ed82c9c9a45ca94899d0966e7ef93da809c9bcdcdb1d1f040",
      "tree": {
        "sha": "4b6e8556a1e0117003039d456958c7e569386c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b6e8556a1e0117003039d456958c7e569386c8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/842e2a9c54bd27865712b154a1582f6f368713f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDr+HYACgkQHkrtYphs\n0l0s+wf/Zd0IcZs8PN2WSZQYJSRWmk7wQK0ngJfyj1SWhbCfKaQFawatdt6Zjhbe\nS6W+6MYWswU8UcAL1PVc4U9sZ0+GOyKoQ4ZeUAqr1u6UC1M8AceEHCODCuDf1EQd\nF8JAEse4VWwc/+RQ4AcJS5bMvWU+3ua/S8GUGoREhaiwKwU0BAmJ8coAr980lI+2\nGnnEjadQqSPP08POSg9+rnJKiqBVY7CBiRySjHnfsyxiTWVh72AcyLaJ6UEEg4Ld\na5TfJEvUhNQcvw8pVAJ0kUctNuSWrbqo9xZ4IRpUJnkSBU4XOtvzqoGI/lTAD4zI\n9Or9HcGR41fem4VEAo+ZEzcBC3cLRg==\n=35Jj\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIN62tL3XgfFgowidQmxlCGBR391D/KuIhH+ZtiU9poD7CP/wEAXNTz1Wk7YR\noiiI5U5k39gI8SBPjhxrEGEMz2usLuXsqTXfcohuv5T/4kPjOvedvyr5ywjxIFCX\n3nra3ExAi6UUcvBJHlN2BWgbwe79PLCip5O8H29CCPEEYOv4efAImlW5wPQcoVsA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BAkrG6DGLcf+ERsnnymZi/5CPEgCSTzeVc8eSJ+YnaMIYm63bMX48IY\nTQ7DaJB3O3yc+7YI8QRg6/h68AjPdM5wTlCDuACD3+MNLvkMjiMiaHR0cHM6Ly9i\ndGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEEUCzkbwzLLZTbUCoaOKX88I8SCh\nAMYjJ2k8DwO66DR88A3072Vvf6dXcfxHFabBUa11VwjxILMP40/n/3DRB9EYDeXB\nImA++X13qBO0Vif4PAs4oKepCPEEYOv4evAI5+Pvl+o1gH8Ag9/jDS75DI4pKGh0\ndHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEFVIV5OCIpWw\nUvVj2ulsod4I8QRg6/h68AiIw3dUfgkO8gCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4b6e8556a1e0117003039d456958c7e569386c8d\nparent e0fe658b863ee06c778274d677b8a8d520cf4f73\nparent 2feec3ce3130961f98ceb030951d0e46d3b9096c\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626077296 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626077302 +0200\n\nMerge bitcoin/bitcoin#20234: net: don't bind on 0.0.0.0 if binds are restricted to Tor\n\n2feec3ce3130961f98ceb030951d0e46d3b9096c net: don't bind on 0.0.0.0 if binds are restricted to Tor (Vasil Dimov)\n\nPull request description:\n\n  The semantic of `-bind` is to restrict the binding only to some address.\n  If not specified, then the user does not care and we bind to `0.0.0.0`.\n  If specified then we should honor the restriction and bind only to the\n  specified address.\n\n  Before this change, if no `-bind` is given then we would bind to\n  `0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\n  the user does not care to restrict the binding.\n\n  However, if only `-bind=addr:port=onion` is given (without ordinary\n  `-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\n  addition.\n\n  Change the above to not do the additional bind: if only\n  `-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\n  to `addr:port` (only) and consider incoming connections to that as Tor\n  and do not advertise it. I.e. a Tor-only node.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 2feec3ce3130961f98ceb030951d0e46d3b9096c\n  jonatack:\n    utACK 2feec3ce3130961f98ceb030951d0e46d3b9096c per `git diff a004833 2feec3c`\n  hebasto:\n    ACK 2feec3ce3130961f98ceb030951d0e46d3b9096c, tested on Linux Mint 20.1 (x86_64):\n\nTree-SHA512: a04483af601706da928958b92dc560f9cfcc78ab0bb9d74414636eed1c6f29ed538ce1fb5a17d41ed82c9c9a45ca94899d0966e7ef93da809c9bcdcdb1d1f040\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842e2a9c54bd27865712b154a1582f6f368713f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/842e2a9c54bd27865712b154a1582f6f368713f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842e2a9c54bd27865712b154a1582f6f368713f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0fe658b863ee06c778274d677b8a8d520cf4f73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0fe658b863ee06c778274d677b8a8d520cf4f73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0fe658b863ee06c778274d677b8a8d520cf4f73"
      },
      {
        "sha": "2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2feec3ce3130961f98ceb030951d0e46d3b9096c"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 129,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c7565a841c790dcee43e6947fd4ce38af22f9696",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842e2a9c54bd27865712b154a1582f6f368713f1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842e2a9c54bd27865712b154a1582f6f368713f1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=842e2a9c54bd27865712b154a1582f6f368713f1",
        "patch": "@@ -1717,25 +1717,34 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         return InitError(ResolveErrMsg(\"bind\", bind_arg));\n     }\n \n-    if (connOptions.onion_binds.empty()) {\n-        connOptions.onion_binds.push_back(DefaultOnionServiceTarget());\n-    }\n-\n-    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n-        const auto bind_addr = connOptions.onion_binds.front();\n-        if (connOptions.onion_binds.size() > 1) {\n-            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s for the automatically created Tor onion service.\"), bind_addr.ToStringIPPort()));\n-        }\n-        StartTorControl(bind_addr);\n-    }\n-\n     for (const std::string& strBind : args.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         bilingual_str error;\n         if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n+    // If the user did not specify -bind= or -whitebind= then we bind\n+    // on any address - 0.0.0.0 (IPv4) and :: (IPv6).\n+    connOptions.bind_on_any = args.GetArgs(\"-bind\").empty() && args.GetArgs(\"-whitebind\").empty();\n+\n+    CService onion_service_target;\n+    if (!connOptions.onion_binds.empty()) {\n+        onion_service_target = connOptions.onion_binds.front();\n+    } else {\n+        onion_service_target = DefaultOnionServiceTarget();\n+        connOptions.onion_binds.push_back(onion_service_target);\n+    }\n+\n+    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n+        if (connOptions.onion_binds.size() > 1) {\n+            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s \"\n+                                    \"for the automatically created Tor onion service.\"),\n+                                  onion_service_target.ToStringIPPort()));\n+        }\n+        StartTorControl(onion_service_target);\n+    }\n+\n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;"
      },
      {
        "sha": "dd667793d8217082f31c37d25d801ee4f778c59d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842e2a9c54bd27865712b154a1582f6f368713f1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842e2a9c54bd27865712b154a1582f6f368713f1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=842e2a9c54bd27865712b154a1582f6f368713f1",
        "patch": "@@ -2465,38 +2465,33 @@ bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags\n     return true;\n }\n \n-bool CConnman::InitBinds(\n-    const std::vector<CService>& binds,\n-    const std::vector<NetWhitebindPermissions>& whiteBinds,\n-    const std::vector<CService>& onion_binds)\n+bool CConnman::InitBinds(const Options& options)\n {\n     bool fBound = false;\n-    for (const auto& addrBind : binds) {\n+    for (const auto& addrBind : options.vBinds) {\n         fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::None);\n     }\n-    for (const auto& addrBind : whiteBinds) {\n+    for (const auto& addrBind : options.vWhiteBinds) {\n         fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n     }\n-    if (binds.empty() && whiteBinds.empty()) {\n+    for (const auto& addr_bind : options.onion_binds) {\n+        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n+    }\n+    if (options.bind_on_any) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = htonl(INADDR_ANY);\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n         fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::None);\n         fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::None);\n     }\n-\n-    for (const auto& addr_bind : onion_binds) {\n-        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n-    }\n-\n     return fBound;\n }\n \n bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds, connOptions.onion_binds)) {\n+    if (fListen && !InitBinds(connOptions)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n                 _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),"
      },
      {
        "sha": "e1f109a2c4340e7461cf5176e9ac73c12b223ddf",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842e2a9c54bd27865712b154a1582f6f368713f1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842e2a9c54bd27865712b154a1582f6f368713f1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=842e2a9c54bd27865712b154a1582f6f368713f1",
        "patch": "@@ -768,6 +768,9 @@ class CConnman\n         std::vector<NetWhitebindPermissions> vWhiteBinds;\n         std::vector<CService> vBinds;\n         std::vector<CService> onion_binds;\n+        /// True if the user did not specify -bind= or -whitebind= and thus\n+        /// we should bind on `0.0.0.0` (IPv4) and `::` (IPv6).\n+        bool bind_on_any;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n@@ -962,10 +965,7 @@ class CConnman\n \n     bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n-    bool InitBinds(\n-        const std::vector<CService>& binds,\n-        const std::vector<NetWhitebindPermissions>& whiteBinds,\n-        const std::vector<CService>& onion_binds);\n+    bool InitBinds(const Options& options);\n \n     void ThreadOpenAddedConnections();\n     void AddAddrFetch(const std::string& strDest);"
      },
      {
        "sha": "6802da8d4898faf06bb91423b96dec54614ba8c0",
        "filename": "test/functional/feature_bind_extra.py",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842e2a9c54bd27865712b154a1582f6f368713f1/test/functional/feature_bind_extra.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842e2a9c54bd27865712b154a1582f6f368713f1/test/functional/feature_bind_extra.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_extra.py?ref=842e2a9c54bd27865712b154a1582f6f368713f1",
        "patch": "@@ -0,0 +1,95 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test starting bitcoind with -bind and/or -bind=...=onion and confirm\n+that bind happens on the expected ports.\n+\"\"\"\n+\n+import sys\n+\n+from test_framework.netutil import (\n+    addr_to_hex,\n+    get_bind_addrs,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+    SkipTest,\n+)\n+from test_framework.util import (\n+    PORT_MIN,\n+    PORT_RANGE,\n+    assert_equal,\n+    rpc_port,\n+)\n+\n+class BindExtraTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        # Avoid any -bind= on the command line. Force the framework to avoid\n+        # adding -bind=127.0.0.1.\n+        self.bind_to_localhost_only = False\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        # Override setup_network() because we want to put the result of\n+        # p2p_port() in self.extra_args[], before the nodes are started.\n+        # p2p_port() is not usable in set_test_params() because PortSeed.n is\n+        # not set at that time.\n+\n+        # Due to OS-specific network stats queries, we only run on Linux.\n+        self.log.info(\"Checking for Linux\")\n+        if not sys.platform.startswith('linux'):\n+            raise SkipTest(\"This test can only be run on Linux.\")\n+\n+        loopback_ipv4 = addr_to_hex(\"127.0.0.1\")\n+\n+        # Start custom ports after p2p and rpc ports.\n+        port = PORT_MIN + 2 * PORT_RANGE\n+\n+        # Array of tuples [command line arguments, expected bind addresses].\n+        self.expected = []\n+\n+        # Node0, no normal -bind=... with -bind=...=onion, thus only the tor target.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}=onion\"],\n+                [(loopback_ipv4, port)]\n+            ],\n+        )\n+        port += 1\n+\n+        # Node1, both -bind=... and -bind=...=onion.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}\", f\"-bind=127.0.0.1:{port + 1}=onion\"],\n+                [(loopback_ipv4, port), (loopback_ipv4, port + 1)]\n+            ],\n+        )\n+        port += 2\n+\n+        self.extra_args = list(map(lambda e: e[0], self.expected))\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        # Don't start the nodes, as some of them would collide trying to bind on the same port.\n+\n+    def run_test(self):\n+        for i in range(len(self.expected)):\n+            self.log.info(f\"Starting node {i} with {self.expected[i][0]}\")\n+            self.start_node(i)\n+            pid = self.nodes[i].process.pid\n+            binds = set(get_bind_addrs(pid))\n+            # Remove IPv6 addresses because on some CI environments \"::1\" is not configured\n+            # on the system (so our test_ipv6_local() would return False), but it is\n+            # possible to bind on \"::\". This makes it unpredictable whether to expect\n+            # that bitcoind has bound on \"::1\" (for RPC) and \"::\" (for P2P).\n+            ipv6_addr_len_bytes = 32\n+            binds = set(filter(lambda e: len(e[0]) != ipv6_addr_len_bytes, binds))\n+            # Remove RPC ports. They are not relevant for this test.\n+            binds = set(filter(lambda e: e[1] != rpc_port(i), binds))\n+            assert_equal(binds, set(self.expected[i][1]))\n+            self.stop_node(i)\n+            self.log.info(f\"Stopped node {i}\")\n+\n+if __name__ == '__main__':\n+    BindExtraTest().main()"
      },
      {
        "sha": "9f4a6f3c15bf8edbbeeb50f8b9bc520b3501cfef",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842e2a9c54bd27865712b154a1582f6f368713f1/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842e2a9c54bd27865712b154a1582f6f368713f1/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=842e2a9c54bd27865712b154a1582f6f368713f1",
        "patch": "@@ -139,6 +139,7 @@\n     'interface_zmq.py',\n     'rpc_invalid_address_message.py',\n     'interface_bitcoin_cli.py',\n+    'feature_bind_extra.py',\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n     'tool_wallet.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "9169be09f49c82fece034285e92f8ffa41e19ee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTY5YmUwOWY0OWM4MmZlY2UwMzQyODVlOTJmOGZmYTQxZTE5ZWUy",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-12T07:29:30Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-12T09:57:52Z"
      },
      "message": "fix incorrect testmempoolaccept doc",
      "tree": {
        "sha": "16009584c0cbb148b7af42fb3d1616eaa989063b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16009584c0cbb148b7af42fb3d1616eaa989063b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9169be09f49c82fece034285e92f8ffa41e19ee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9169be09f49c82fece034285e92f8ffa41e19ee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9169be09f49c82fece034285e92f8ffa41e19ee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9169be09f49c82fece034285e92f8ffa41e19ee2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "617dfec98f84509be7748fa4af91aa12332d90fd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9169be09f49c82fece034285e92f8ffa41e19ee2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9169be09f49c82fece034285e92f8ffa41e19ee2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9169be09f49c82fece034285e92f8ffa41e19ee2",
        "patch": "@@ -894,8 +894,7 @@ static RPCHelpMan testmempoolaccept()\n                 \"\\nThis checks if transactions violate the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n-            \"                                        Length must be one for now.\",\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\",\n                         {\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },"
      }
    ]
  },
  {
    "sha": "839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzlmNWQwNmQ2ZGVjNTJkMDVlYWQ0ZjNmZmU3ZWU3ZTg3NjBkZjI0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-12T12:30:41Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-12T12:31:29Z"
      },
      "message": "Merge bitcoin/bitcoin#22432: doc: fix incorrect testmempoolaccept doc\n\n9169be09f49c82fece034285e92f8ffa41e19ee2 fix incorrect testmempoolaccept doc (glozow)\n\nPull request description:\n\n  Sorry, I somehow missed this...\n\nACKs for top commit:\n  jnewbery:\n    Tested ACK 9169be09f49c82fece034285e92f8ffa41e19ee2\n\nTree-SHA512: d44f81655669e338af298b7b5d616eb4ca15cbaac667c49251408cb92cee2fb9f440fcfbbac6a17744f24ceeafaf6cea6b9c49a37a464f7eaeeda6e655a56f7a",
      "tree": {
        "sha": "1773f697ca9e49ca185218539293375a4ee2ab67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1773f697ca9e49ca185218539293375a4ee2ab67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDsNiEACgkQLuufXMCV\nJsGCyRAAgYu+TBVRAe9JN/D+VCUL+gl4DnVLDayREhRzP62dvMQ+aAb0G16zbayv\nAEFBWdccPb35CVXDH9Dwpb7rjiWk5u5+EB4KuiIw5DSyUyzbd7Vg7ft/aCRmMfVs\nVOf+q4dHOUir9Jki+880/5LoMqfD+8QeAyMwu6si9sOc797ZSc0MIJmZdnSo/3Rf\n3gBnTJ5UXIN8lFyVDXeFjG0nXkTf9ZtIC5j7J5IbHqJDszqjIWATJkQ5vnTpTlru\nyVYI8u4KsoBbflHpPQn8ASMtQ3kBSSvYlumrHcKiegQKclPmJGAeIBt/wFoHYI3T\n0QgDlGDE5TDVj4WGbnn9HDAioN4NFWHcFklXj6iVrTa5qoWeFUr8ZnD+McRFTvjV\nkmEQ+4iOXb9PiSpElSu7MgytsRzjdlqKnCAoI+FBQX/C7+9tmDaFWm+lrbLDLF6J\n7SkS5Yude3IM6SMrLoqlFeMSAKDstGj1gQ/LcnVPC+bZJ+MT6IzS8BjJ753dEr1T\nsYUDYyNx/NdapcWVKdCSaWv67dT+m4mj3IxInQno3bYZ7CcIC4xCdAn89etlrHyj\nxZFee6v9cMBKy3bJ6cTec2iQVhJTnWyD9f6nF5maMx6RqXx1ypf2J+8fXODOA9cI\n2m8rvokDu6mgKWGKXrPEV54mf45vPsvB3w3jF73JqVCmK7chaYg=\n=Lc1m\n-----END PGP SIGNATURE-----",
        "payload": "tree 1773f697ca9e49ca185218539293375a4ee2ab67\nparent 842e2a9c54bd27865712b154a1582f6f368713f1\nparent 9169be09f49c82fece034285e92f8ffa41e19ee2\nauthor fanquake <fanquake@gmail.com> 1626093041 +0800\ncommitter fanquake <fanquake@gmail.com> 1626093089 +0800\n\nMerge bitcoin/bitcoin#22432: doc: fix incorrect testmempoolaccept doc\n\n9169be09f49c82fece034285e92f8ffa41e19ee2 fix incorrect testmempoolaccept doc (glozow)\n\nPull request description:\n\n  Sorry, I somehow missed this...\n\nACKs for top commit:\n  jnewbery:\n    Tested ACK 9169be09f49c82fece034285e92f8ffa41e19ee2\n\nTree-SHA512: d44f81655669e338af298b7b5d616eb4ca15cbaac667c49251408cb92cee2fb9f440fcfbbac6a17744f24ceeafaf6cea6b9c49a37a464f7eaeeda6e655a56f7a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "842e2a9c54bd27865712b154a1582f6f368713f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842e2a9c54bd27865712b154a1582f6f368713f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/842e2a9c54bd27865712b154a1582f6f368713f1"
      },
      {
        "sha": "9169be09f49c82fece034285e92f8ffa41e19ee2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9169be09f49c82fece034285e92f8ffa41e19ee2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9169be09f49c82fece034285e92f8ffa41e19ee2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "617dfec98f84509be7748fa4af91aa12332d90fd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
        "patch": "@@ -894,8 +894,7 @@ static RPCHelpMan testmempoolaccept()\n                 \"\\nThis checks if transactions violate the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n-            \"                                        Length must be one for now.\",\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\",\n                         {\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },"
      }
    ]
  },
  {
    "sha": "aa72ffb1c297177dfb79acf69729666a2ef50c5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTcyZmZiMWMyOTcxNzdkZmI3OWFjZjY5NzI5NjY2YTJlZjUwYzVl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-12T13:46:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-12T13:46:59Z"
      },
      "message": "init: remove straggling boost thread_group code\n\nboost::thread_group usage was removed in #21016.",
      "tree": {
        "sha": "ae334ddbb52f47312cb3b614c65f0bb86860118a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae334ddbb52f47312cb3b614c65f0bb86860118a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa72ffb1c297177dfb79acf69729666a2ef50c5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDsSCoACgkQLuufXMCV\nJsG1Pg//WQRcaqp4B8ehMUwdwAm3Yuri/tf1iifdeAuWEgKjo/fpSENNCTjBxYLN\nLBURCdMWqHj5ngQCJlwoUSUFaujlQb+Edj0Bv2+a5YBd8/4TDBqbTIo2xLetuzNg\ntoetxnmNl87AzjOKUlj7m7QexViERXp5fKbn0wwNojhuNJ3NK5nwY5MP6fFRMHG/\ndnkjMSuGl4YOQIJY0njhvEx7BQSMFqjbNgf0dQo/B09rPzvEmePUkflMZrdnqW7J\n+sacVHiWs/Y2Psubxmg9SRWX3Z7+wnYlZ+ndN6kNP/L8tIUKKjPi0JpT+olco4EL\nLX9B9QgMr9OuaRikdvnOQ5edAU5hKucNtTkgCQC+JfZZ1yqH4q3OuI9aK8Coc4Vf\ncMdevC/64Y6hxrz6p593f5/S4JUWdmw4VzIG1t6ArSG8MzVEcwSEC5f9V/3Pfu54\nudxwRUryVPA3ITEKLEQFpKlel91nVnGM/gadYdBu5/VuqJae/Y4P3hHAqW+5FgQk\nfnQUlkl1b4QlJx3mXpHzsJdI/RHZ89yGLpl1dnm7WIwo7Q9DkrmF5ovB45Rul4aC\n/kq3EQN7D5y+/RR0W00kvAxIK2Jke5OFFSsbegEVo69orbnUuHmQsuu5Ems7j0+a\n3PL8GOj51XNtWrD7cwvwk586VA1woG7L6990X6ORtZUlRQ/wHt0=\n=ZamN\n-----END PGP SIGNATURE-----",
        "payload": "tree ae334ddbb52f47312cb3b614c65f0bb86860118a\nparent 839f5d06d6dec52d05ead4f3ffe7ee7e8760df24\nauthor fanquake <fanquake@gmail.com> 1626097619 +0800\ncommitter fanquake <fanquake@gmail.com> 1626097619 +0800\n\ninit: remove straggling boost thread_group code\n\nboost::thread_group usage was removed in #21016.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa72ffb1c297177dfb79acf69729666a2ef50c5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa72ffb1c297177dfb79acf69729666a2ef50c5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa72ffb1c297177dfb79acf69729666a2ef50c5e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5af6930a16cdbc966511f4952bb3c2dea9194644",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa72ffb1c297177dfb79acf69729666a2ef50c5e/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa72ffb1c297177dfb79acf69729666a2ef50c5e/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=aa72ffb1c297177dfb79acf69729666a2ef50c5e",
        "patch": "@@ -20,9 +20,6 @@ struct NodeContext;\n namespace interfaces {\n struct BlockAndHeaderTipInfo;\n }\n-namespace boost {\n-class thread_group;\n-} // namespace boost\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);"
      }
    ]
  },
  {
    "sha": "7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTFiYTM3YjVkYWNlZGEyMjJiMTM4Y2JmNjFiYmRlZGE4N2QyMWZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-12T17:08:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-12T17:08:25Z"
      },
      "message": "Merge bitcoin/bitcoin#22433: init: remove straggling boost thread_group related code\n\naa72ffb1c297177dfb79acf69729666a2ef50c5e init: remove straggling boost thread_group code (fanquake)\n\nPull request description:\n\n  `boost::thread_group` was removed in #21016.\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK aa72ffb1c297177dfb79acf69729666a2ef50c5e\n\nTree-SHA512: c7ac3c2cde38fb752e0103d563b506732a403aad765a5db6be8d82399df3783044a77b071cc9c71aec3824397b04611894cf115576e63e8ee714eacf62729ab9",
      "tree": {
        "sha": "ae334ddbb52f47312cb3b614c65f0bb86860118a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae334ddbb52f47312cb3b614c65f0bb86860118a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi11Av+O6/Z7U+bM4LjQ3sD+Nj0EKqWnFeuqwjAZd9TAfrM/mabFcEqPUqzqm41\nABWmWU+caDmmDBClu0keyJS2VAtf/OuwrrL274prabgS1jEt2J/DPDeAFqUyDdtn\nTkWO5jVVW5zVOw9pFp8LCG6mry1GrFEO7WN39rVYDZ3tRM+gFHOPSg+s2udcXDP/\nkSU5uHwLQMo53Bko11WXAh8yFpzR42/sTQU2bYjVkRsKvrPUHxfTHBqZ1Mm41BHr\nHR0BNq564saw5Q9dn2cErp+7hK7bHg1fhlxugziJN4q+GeYanU++O6lpJ7taaUzJ\n9OGTIr6yU7NlQuf12VGzUGRP4i3JdnBwHT9kWCJ41M0Hh/vC83lcDIZ3njjKOQxQ\nUiGrMvn0sJ1VYtchqSC8NrgALKOj47wbyxOQ7BN9AaHHNqMaSV3R0kLxWAlRNc2A\nmOtL/b5fp+rAJ0TZF6sqKvvSyFbngcwppXkmjh6C2ZQnc8J5YJgur3c0+7Y6vV+S\nj6LV3CjO\n=LZvE\n-----END PGP SIGNATURE-----",
        "payload": "tree ae334ddbb52f47312cb3b614c65f0bb86860118a\nparent 839f5d06d6dec52d05ead4f3ffe7ee7e8760df24\nparent aa72ffb1c297177dfb79acf69729666a2ef50c5e\nauthor MarcoFalke <falke.marco@gmail.com> 1626109701 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626109705 +0200\n\nMerge bitcoin/bitcoin#22433: init: remove straggling boost thread_group related code\n\naa72ffb1c297177dfb79acf69729666a2ef50c5e init: remove straggling boost thread_group code (fanquake)\n\nPull request description:\n\n  `boost::thread_group` was removed in #21016.\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK aa72ffb1c297177dfb79acf69729666a2ef50c5e\n\nTree-SHA512: c7ac3c2cde38fb752e0103d563b506732a403aad765a5db6be8d82399df3783044a77b071cc9c71aec3824397b04611894cf115576e63e8ee714eacf62729ab9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e1ba37b5daceda222b138cbf61bbdeda87d21fd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/839f5d06d6dec52d05ead4f3ffe7ee7e8760df24"
      },
      {
        "sha": "aa72ffb1c297177dfb79acf69729666a2ef50c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa72ffb1c297177dfb79acf69729666a2ef50c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa72ffb1c297177dfb79acf69729666a2ef50c5e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5af6930a16cdbc966511f4952bb3c2dea9194644",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e1ba37b5daceda222b138cbf61bbdeda87d21fd/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e1ba37b5daceda222b138cbf61bbdeda87d21fd/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
        "patch": "@@ -20,9 +20,6 @@ struct NodeContext;\n namespace interfaces {\n struct BlockAndHeaderTipInfo;\n }\n-namespace boost {\n-class thread_group;\n-} // namespace boost\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);"
      }
    ]
  },
  {
    "sha": "d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGYxZTEzMjdmOWMyZjlmY2M4MDQ0NjhmNmE5ODE1ODBhY2RmMzBh",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-13T12:19:19Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-13T12:52:41Z"
      },
      "message": "Merge bitcoin/bitcoin#22112: Force port 0 in I2P\n\n4101ec9d2e05a35c35f587a28f1feee6cebcc61b doc: mention that we enforce port=0 in I2P (Vasil Dimov)\ne0a2b390c144e123e2fc8a289fdff36815476964 addrman: reset I2P ports to 0 when loading from disk (Vasil Dimov)\n41cda9d075ebcab1dbb950160ebe9d0ba7b5745e test: ensure I2P ports are handled as expected (Vasil Dimov)\n4f432bd738c420512a86a51ab3e00323f396b89e net: do not connect to I2P hosts on port!=0 (Vasil Dimov)\n1f096f091ebd88efb18154b8894a38122c39624f net: distinguish default port per network (Vasil Dimov)\naeac3bce3ead1f24ca782079ef0defa86fd8cb98 net: change I2P seeds' ports to 0 (Vasil Dimov)\n38f900290cc3a839e99bef13474d35e1c02e6b0d net: change assumed I2P port to 0 (Vasil Dimov)\n\nPull request description:\n\n  _This is an alternative to https://github.com/bitcoin/bitcoin/pull/21514, inspired by https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-815049933. They are mutually exclusive. Just one of them should be merged._\n\n  Change assumed ports for I2P to 0 (instead of the default 8333) as this is closer to what actually happens underneath with SAM 3.1 (https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812632520, https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-816564719).\n\n  Don't connect to I2P peers with advertised port != 0 (we don't specify a port to our SAM 3.1 proxy and it always connects to port = 0).\n\n  Note, this change:\n  * Keeps I2P addresses with port != 0 in addrman and relays them to others via P2P gossip. There may be non-bitcoin-core-22.0 peers using SAM 3.2 and for them such addresses may be useful.\n  * Silently refuses to connect to I2P hosts with port != 0. This is ok for automatically chosen peers from addrman. Not so ok for peers provided via `-addnode` or `-connect` - a user who specifies `foo.b32.i2p:1234` (non zero port) may wonder why \"nothing is happening\".\n\n  Fixes #21389\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 4101ec9d2e05a35c35f587a28f1feee6cebcc61b\n  jonatack:\n    re-ACK 4101ec9d2e05a35c35f587a28f1feee6cebcc61b per `git range-diff efff9c3 0b0ee03 4101ec9`, built with DDEBUG_ADDRMAN, did fairly extensive testing on mainnet both with and without a peers.dat / -dnsseeds=0 to test boostrapping.\n\nTree-SHA512: 0e3c019e1dc05e54f559275859d3450e0c735596d179e30b66811aad9d5b5fabe3dcc44571e8f7b99f9fe16453eee393d6e153454dd873b9ff14907d4e6354fe",
      "tree": {
        "sha": "81111099ea2ba2270a3d800dde323f4f1450a004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81111099ea2ba2270a3d800dde323f4f1450a004"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDtjJkACgkQHkrtYphs\n0l1uYAgAt4ZhVbCxiLuZXnM5NiFpQyUjbBACh5ilp1I8JVGXttuqiKq73JxQrJCi\nsYOLjDdBu+TNjVvraDi8Uww5LfS0CyqrHrzQdqHTL/0nthniS4rmpABrcYSQ8/CH\n3/QFEiLsiisgKKzTlkcvKN0CX3eNYtUrI1D+Kit/BNTAEFlkB25nOzCGyO7O8ONv\nIP81nf2ppcbUuDpb6gMU/Oivbz4aUjb2CZVH132Up1xib4fxdpLtLxs419ucwgBe\n1Z71Ms0IFAdfvjKuVTPbqQ3HF7SIUfjcgpVQyAzJN3wsI15wnHCjozymvJ5gVJtc\nGEO5FQxKZ4MZygVVA2yOqgyOR3871Q==\n=5tdv\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIC75gmpjEuKQUWGhIKPfWnYC6egD5Z4EoxfyRp37shNTCP/wECMcO1noqNNg\nDq7Tgwez19oI8QRg7Yyh8AiBcTdLEEJ5/ACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIWKxD9OT3QXUzUZDT3dT3UI8QRg7Yyh\n8AgOTt05CHVzCQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEKjCEK/8fdcpQPCUj6frOeUI8QRg7Yyh8AiSF64c\nCqOLfgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BD5k/ufpcPXMJEmbl4+DJPPCPEgW1lb8M63PyZrPI54KbCt\nFcygXvlHyMvsPjB6sCMzPKQI8QRg7Yyg8Ag3IUNAmtwf8ACD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 81111099ea2ba2270a3d800dde323f4f1450a004\nparent 7e1ba37b5daceda222b138cbf61bbdeda87d21fd\nparent 4101ec9d2e05a35c35f587a28f1feee6cebcc61b\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626178759 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626180761 +0200\n\nMerge bitcoin/bitcoin#22112: Force port 0 in I2P\n\n4101ec9d2e05a35c35f587a28f1feee6cebcc61b doc: mention that we enforce port=0 in I2P (Vasil Dimov)\ne0a2b390c144e123e2fc8a289fdff36815476964 addrman: reset I2P ports to 0 when loading from disk (Vasil Dimov)\n41cda9d075ebcab1dbb950160ebe9d0ba7b5745e test: ensure I2P ports are handled as expected (Vasil Dimov)\n4f432bd738c420512a86a51ab3e00323f396b89e net: do not connect to I2P hosts on port!=0 (Vasil Dimov)\n1f096f091ebd88efb18154b8894a38122c39624f net: distinguish default port per network (Vasil Dimov)\naeac3bce3ead1f24ca782079ef0defa86fd8cb98 net: change I2P seeds' ports to 0 (Vasil Dimov)\n38f900290cc3a839e99bef13474d35e1c02e6b0d net: change assumed I2P port to 0 (Vasil Dimov)\n\nPull request description:\n\n  _This is an alternative to https://github.com/bitcoin/bitcoin/pull/21514, inspired by https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-815049933. They are mutually exclusive. Just one of them should be merged._\n\n  Change assumed ports for I2P to 0 (instead of the default 8333) as this is closer to what actually happens underneath with SAM 3.1 (https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-812632520, https://github.com/bitcoin/bitcoin/pull/21514#issuecomment-816564719).\n\n  Don't connect to I2P peers with advertised port != 0 (we don't specify a port to our SAM 3.1 proxy and it always connects to port = 0).\n\n  Note, this change:\n  * Keeps I2P addresses with port != 0 in addrman and relays them to others via P2P gossip. There may be non-bitcoin-core-22.0 peers using SAM 3.2 and for them such addresses may be useful.\n  * Silently refuses to connect to I2P hosts with port != 0. This is ok for automatically chosen peers from addrman. Not so ok for peers provided via `-addnode` or `-connect` - a user who specifies `foo.b32.i2p:1234` (non zero port) may wonder why \"nothing is happening\".\n\n  Fixes #21389\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 4101ec9d2e05a35c35f587a28f1feee6cebcc61b\n  jonatack:\n    re-ACK 4101ec9d2e05a35c35f587a28f1feee6cebcc61b per `git range-diff efff9c3 0b0ee03 4101ec9`, built with DDEBUG_ADDRMAN, did fairly extensive testing on mainnet both with and without a peers.dat / -dnsseeds=0 to test boostrapping.\n\nTree-SHA512: 0e3c019e1dc05e54f559275859d3450e0c735596d179e30b66811aad9d5b5fabe3dcc44571e8f7b99f9fe16453eee393d6e153454dd873b9ff14907d4e6354fe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e1ba37b5daceda222b138cbf61bbdeda87d21fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e1ba37b5daceda222b138cbf61bbdeda87d21fd"
      },
      {
        "sha": "4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4101ec9d2e05a35c35f587a28f1feee6cebcc61b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4101ec9d2e05a35c35f587a28f1feee6cebcc61b"
      }
    ],
    "stats": {
      "total": 351,
      "additions": 329,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f7bfb6eb0a239ba17ff2aa8579a4ba85217cc498",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -678,11 +678,11 @@ vi5bnbxkleeqi6hfccjochnn65lcxlfqs4uwgmhudph554zibiusqnad.onion:8333\n xqt25cobm5zqucac3634zfght72he6u3eagfyej5ellbhcdgos7t2had.onion:8333\n \n # manually added 2021-05 for minimal i2p bootstrap support\n-72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:8333\n-c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:8333\n-gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:8333\n-h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:8333\n-hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:8333\n-pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:8333\n-wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:8333\n-zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:8333\n+72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:0\n+c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:0\n+gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:0\n+h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\n+hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:0\n+pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:0\n+wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:0\n+zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:0"
      },
      {
        "sha": "27ef4d9d9f0d995bbebff7af816bc0f55b655693",
        "filename": "doc/i2p.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -70,3 +70,18 @@ RPC.\n \n Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3) protocol\n to connect to the I2P network. Any I2P router that supports it can be used.\n+\n+## Ports in I2P and Bitcoin Core\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3)\n+protocol. One particularity of SAM v3.1 is that it does not support ports,\n+unlike newer versions of SAM (v3.2 and up) that do support them and default the\n+port numbers to 0. From the point of view of peers that use newer versions of\n+SAM or other protocols that support ports, a SAM v3.1 peer is connecting to them\n+on port 0, from source port 0.\n+\n+To allow future upgrades to newer versions of SAM, Bitcoin Core sets its\n+listening port to 0 when listening for incoming I2P connections and advertises\n+its own I2P address with port 0. Furthermore, it will not attempt to connect to\n+I2P addresses with a non-zero port number because with SAM v3.1 the destination\n+port (`TO_PORT`) is always set to 0 and is not in the control of Bitcoin Core."
      },
      {
        "sha": "389d106164d5995f195067ccec7c58edb733ab39",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -6,6 +6,7 @@\n #include <addrman.h>\n \n #include <hash.h>\n+#include <i2p.h>\n #include <logging.h>\n #include <netaddress.h>\n #include <serialize.h>\n@@ -731,3 +732,100 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n     }\n     return bits;\n }\n+\n+void CAddrMan::ResetI2PPorts()\n+{\n+    for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvNew[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            // Reposition entries of vvNew within the same bucket because we don't know the source\n+            // address which led to the decision to store the entry in vvNew[bucket] so we can't\n+            // re-evaluate that decision, but even if we could, CAddrInfo::GetNewBucket() does not\n+            // use CAddrInfo::GetKey() so it would end up in the same bucket as before the port\n+            // change.\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, true, bucket);\n+\n+            if (i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from i to i_target, removing the entry from i_target (if any).\n+            ClearNew(bucket, i_target);\n+            vvNew[bucket][i_target] = id;\n+            vvNew[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+\n+    for (int bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvTried[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            const auto bucket_target = addr_info_newport.GetTriedBucket(nKey, m_asmap);\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, false, bucket_target);\n+\n+            if (bucket_target == bucket && i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from (bucket, i) to (bucket_target, i_target). If the latter is\n+            // occupied, then move the entry from there to vvNew.\n+\n+            const auto old_target_id = vvTried[bucket_target][i_target];\n+            if (old_target_id != -1) {\n+                CAddrInfo& old_target_info = mapInfo[old_target_id];\n+\n+                old_target_info.fInTried = false;\n+                vvTried[bucket_target][i_target] = -1;\n+                --nTried;\n+\n+                const auto new_bucket = old_target_info.GetNewBucket(nKey, m_asmap);\n+                const auto new_bucket_i = old_target_info.GetBucketPosition(nKey, true, new_bucket);\n+                ClearNew(new_bucket, new_bucket_i);\n+\n+                old_target_info.nRefCount = 1;\n+                vvNew[new_bucket][new_bucket_i] = old_target_id;\n+                ++nNew;\n+            }\n+\n+            vvTried[bucket_target][i_target] = id;\n+            vvTried[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+}"
      },
      {
        "sha": "2a5c6c06b4ef722a5a826d02506d3bb9151aa305",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -452,6 +452,8 @@ class CAddrMan\n \n         RemoveInvalid();\n \n+        ResetI2PPorts();\n+\n         Check();\n     }\n \n@@ -767,6 +769,14 @@ class CAddrMan\n     //! Remove invalid addresses.\n     void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /**\n+     * Reset the ports of I2P peers to 0.\n+     * This is needed as a temporary measure because now we enforce port 0 and\n+     * only connect to I2P hosts if the port is 0, but in the early days some\n+     * I2P addresses with port 8333 were rumoured and persisted into addrmans.\n+     */\n+    void ResetI2PPorts() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     friend class CAddrManTest;\n };\n "
      },
      {
        "sha": "4faa6f8d06a1cfe482347fa606dc8685a4cd97c1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -8,11 +8,13 @@\n \n #include <chainparamsbase.h>\n #include <consensus/params.h>\n+#include <netaddress.h>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <util/hash_type.h>\n \n #include <memory>\n+#include <string>\n #include <vector>\n \n typedef std::map<int, uint256> MapCheckpoints;\n@@ -80,6 +82,15 @@ class CChainParams\n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     uint16_t GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort(Network net) const\n+    {\n+        return net == NET_I2P ? I2P_SAM31_PORT : GetDefaultPort();\n+    }\n+    uint16_t GetDefaultPort(const std::string& addr) const\n+    {\n+        CNetAddr a;\n+        return a.SetSpecial(addr) ? GetDefaultPort(a.GetNetwork()) : GetDefaultPort();\n+    }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Default value for -checkmempool and -checkblockindex argument */"
      },
      {
        "sha": "a22529c38659d8714718b24ec7e0e5fc89df0363",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -683,14 +683,14 @@ static const uint8_t chainparams_seed_main[] = {\n     0x04,0x20,0x98,0xc6,0x44,0x27,0x90,0x41,0xa6,0x98,0xf9,0x25,0x6c,0x59,0x0f,0x06,0x6d,0x44,0x59,0x0e,0xb2,0x46,0xb0,0xa4,0x37,0x88,0x69,0x8f,0xc1,0x32,0xcd,0x9f,0x15,0xd7,0x20,0x8d,\n     0x04,0x20,0xaa,0x3a,0x16,0x86,0xea,0x59,0x09,0x04,0x78,0xe5,0x10,0x92,0xe1,0x1d,0xad,0xf7,0x56,0x2b,0xac,0xb0,0x97,0x29,0x63,0x30,0xf4,0x1b,0xcf,0xde,0xf3,0x28,0x0a,0x29,0x20,0x8d,\n     0x04,0x20,0xbc,0x27,0xae,0x89,0xc1,0x67,0x73,0x0a,0x08,0x02,0xdf,0xb7,0xcc,0x94,0xc7,0x9f,0xf4,0x72,0x7a,0x9b,0x20,0x0c,0x5c,0x11,0x3d,0x22,0xd6,0x13,0x88,0x66,0x74,0xbf,0x20,0x8d,\n-    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x20,0x8d,\n-    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x20,0x8d,\n-    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x20,0x8d,\n-    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x20,0x8d,\n-    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x20,0x8d,\n-    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x20,0x8d,\n-    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x20,0x8d,\n-    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x20,0x8d,\n+    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x00,0x00,\n+    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x00,0x00,\n+    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x00,0x00,\n+    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x00,0x00,\n+    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x00,0x00,\n+    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x00,0x00,\n+    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x00,0x00,\n+    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x00,0x00,\n };\n \n static const uint8_t chainparams_seed_test[] = {"
      },
      {
        "sha": "5e7e42fb775ad24c08130bfe8379d269c572fff6",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -159,7 +159,7 @@ bool Session::Accept(Connection& conn)\n             const std::string& peer_dest =\n                 conn.sock->RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n \n-            conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n+            conn.peer = CService(DestB64ToAddr(peer_dest), I2P_SAM31_PORT);\n \n             return true;\n         }\n@@ -172,6 +172,13 @@ bool Session::Accept(Connection& conn)\n \n bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n {\n+    // Refuse connecting to arbitrary ports. We don't specify any destination port to the SAM proxy\n+    // when connecting (SAM 3.1 does not use ports) and it forces/defaults it to I2P_SAM31_PORT.\n+    if (to.GetPort() != I2P_SAM31_PORT) {\n+        proxy_error = false;\n+        return false;\n+    }\n+\n     proxy_error = true;\n \n     std::string session_id;\n@@ -366,7 +373,7 @@ void Session::CreateIfNotCreatedAlready()\n     SendRequestAndGetReply(*sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n                                             session_id, private_key_b64));\n \n-    m_my_addr = CService(DestBinToAddr(MyDestination()), Params().GetDefaultPort());\n+    m_my_addr = CService(DestBinToAddr(MyDestination()), I2P_SAM31_PORT);\n     m_session_id = session_id;\n     m_control_sock = std::move(sock);\n "
      },
      {
        "sha": "9a4475466c5e19b6702c085b0283dd98f03c9cc7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -442,7 +442,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections. Not relevant for I2P (see doc/i2p.md).\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "0078d711421abea783dd09cecc29600c3d7ca69b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -402,7 +402,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Resolve\n-    const uint16_t default_port{Params().GetDefaultPort()};\n+    const uint16_t default_port{pszDest != nullptr ? Params().GetDefaultPort(pszDest) :\n+                                                     Params().GetDefaultPort()};\n     if (pszDest) {\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n@@ -2059,8 +2060,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // from advertising themselves as a service on another host and\n             // port, causing a DoS attack as nodes around the network attempt\n             // to connect to it fruitlessly.\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != Params().GetDefaultPort(addr.GetNetwork()) && nTries < 50) {\n                 continue;\n+            }\n \n             addrConnect = addr;\n             break;\n@@ -2123,7 +2125,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort(strAddNode)));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port"
      },
      {
        "sha": "d5049963472511f2432f6023b997952ebf46560f",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -112,6 +112,9 @@ static constexpr size_t ADDR_CJDNS_SIZE = 16;\n /// Size of \"internal\" (NET_INTERNAL) address (in bytes).\n static constexpr size_t ADDR_INTERNAL_SIZE = 10;\n \n+/// SAM 3.1 and earlier do not support specifying ports and force the port to 0.\n+static constexpr uint16_t I2P_SAM31_PORT{0};\n+\n /**\n  * Network address.\n  */"
      },
      {
        "sha": "f2eed956cd6ed9b8c6f66aaf44389c168f59a1b4",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <addrman.h>\n+#include <i2p.h>\n #include <test/data/asmap.raw.h>\n #include <test/util/setup_common.h>\n #include <util/asmap.h>\n@@ -966,5 +967,121 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n }\n \n+BOOST_AUTO_TEST_CASE(reset_i2p_ports)\n+{\n+    CAddrManTest addrman1;\n+    CAddrManTest addrman2;\n+    const uint32_t good_time{static_cast<uint32_t>(GetAdjustedTime())};\n+    constexpr uint16_t port = 8333;\n+\n+    // Has its port changed, will be re-positioned within the same bucket in vvNew.\n+    const CAddress i2p_new1{\n+        ResolveService(\"72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, will not be re-positioned in vvNew because ports 0 and 10075 result in\n+    // the same bucket position.\n+    const CAddress i2p_new2{\n+        ResolveService(\"gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p\", 10075),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged, port is already as it should be.\n+    const CAddress i2p_new3{\n+        ResolveService(\"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+                       I2P_SAM31_PORT),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, re-positioning in vvNew will cause i2p_new3 to be evicted.\n+    const CAddress i2p_new4{\n+        ResolveService(\"c4cbbkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged.\n+    const CAddress ipv4_new{ResolveService(\"1.2.3.4\", port), NODE_NONE, good_time};\n+\n+    // Has its port changed, will be re-positioned in vvTried.\n+    const CAddress i2p_tried1{\n+        ResolveService(\"h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, will not be re-positioned in vvTried because ports 0 and 10537\n+    // result in the same position (bucket, i).\n+    const CAddress i2p_tried2{\n+        ResolveService(\"pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p\", 10537),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged, port is already as it should be.\n+    const CAddress i2p_tried3{\n+        ResolveService(\"hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p\",\n+                       I2P_SAM31_PORT),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Has its port changed, re-positioning in vvTried will cause i2p_tried3 to be moved to vvNew.\n+    const CAddress i2p_tried4{\n+        ResolveService(\"hna37nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p\", port),\n+        NODE_NONE,\n+        good_time};\n+\n+    // Remains unchanged.\n+    const CAddress ipv4_tried{ResolveService(\"2.3.4.5\", port), NODE_NONE, good_time};\n+\n+    const CNetAddr source;\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    addrman1.Add(i2p_new1, source);\n+    addrman1.Add(i2p_new2, source);\n+    addrman1.Add(i2p_new3, source);\n+    addrman1.Add(i2p_new4, source);\n+    addrman1.Add(ipv4_new, source);\n+\n+    addrman1.Add(i2p_tried1, source);\n+    addrman1.Good(i2p_tried1);\n+    addrman1.Add(i2p_tried2, source);\n+    addrman1.Good(i2p_tried2);\n+    addrman1.Add(i2p_tried3, source);\n+    addrman1.Good(i2p_tried3);\n+    addrman1.Add(i2p_tried4, source);\n+    addrman1.Good(i2p_tried4);\n+    addrman1.Add(ipv4_tried, source);\n+    addrman1.Good(ipv4_tried);\n+\n+    stream << addrman1;\n+    stream >> addrman2;\n+\n+    const size_t max_addresses{0};\n+    const size_t max_pct{0};\n+\n+    auto addresses = addrman2.GetAddr(max_addresses, max_pct, NET_I2P);\n+    BOOST_REQUIRE_EQUAL(addresses.size(), 7UL);\n+    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n+    BOOST_CHECK_EQUAL(addresses[0].ToStringIP(), i2p_new4.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[0].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[1].ToStringIP(), i2p_new2.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[1].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[2].ToStringIP(), i2p_tried4.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[2].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[3].ToStringIP(), i2p_tried3.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[3].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[4].ToStringIP(), i2p_tried1.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[4].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[5].ToStringIP(), i2p_tried2.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[5].GetPort(), I2P_SAM31_PORT);\n+    BOOST_CHECK_EQUAL(addresses[6].ToStringIP(), i2p_new1.ToStringIP());\n+    BOOST_CHECK_EQUAL(addresses[6].GetPort(), I2P_SAM31_PORT);\n+\n+    addresses = addrman2.GetAddr(max_addresses, max_pct, NET_IPV4);\n+    BOOST_REQUIRE_EQUAL(addresses.size(), 2UL);\n+    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n+    BOOST_CHECK_EQUAL(addresses[0].ToStringIPPort(), ipv4_new.ToStringIPPort());\n+    BOOST_CHECK_EQUAL(addresses[1].ToStringIPPort(), ipv4_tried.ToStringIPPort());\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "13188b9305773178e19bf56f19588c4ac970faa4",
        "filename": "test/functional/p2p_i2p_ports.py",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/test/functional/p2p_i2p_ports.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/test/functional/p2p_i2p_ports.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_i2p_ports.py?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test ports handling for I2P hosts\n+\"\"\"\n+\n+import re\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class I2PPorts(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # The test assumes that an I2P SAM proxy is not listening here.\n+        self.extra_args = [[\"-i2psam=127.0.0.1:60000\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Ensure we don't try to connect if port!=0\")\n+        addr = \"zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:8333\"\n+        raised = False\n+        try:\n+            with node.assert_debug_log(expected_msgs=[f\"Error connecting to {addr}\"]):\n+                node.addnode(node=addr, command=\"onetry\")\n+        except AssertionError as e:\n+            raised = True\n+            if not re.search(r\"Expected messages .* does not partially match log\", str(e)):\n+                raise AssertionError(f\"Assertion raised as expected, but with an unexpected message: {str(e)}\")\n+        if not raised:\n+            raise AssertionError(\"Assertion should have been raised\")\n+\n+        self.log.info(\"Ensure we try to connect if port=0 and get an error due to missing I2P proxy\")\n+        addr = \"h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\"\n+        with node.assert_debug_log(expected_msgs=[f\"Error connecting to {addr}\"]):\n+            node.addnode(node=addr, command=\"onetry\")\n+\n+\n+if __name__ == '__main__':\n+    I2PPorts().main()"
      },
      {
        "sha": "3344e53d94a4346ffe5e3bacc453d96f017a102e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f1e1327f9c2f9fcc804468f6a981580acdf30a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "patch": "@@ -293,6 +293,7 @@\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n     'wallet_startup.py',\n+    'p2p_i2p_ports.py',\n     'feature_config_args.py',\n     'feature_settings.py',\n     'rpc_getdescriptorinfo.py',"
      }
    ]
  },
  {
    "sha": "617661703ac29e0744f21de74501d033fdc53ff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTc2NjE3MDNhYzI5ZTA3NDRmMjFkZTc0NTAxZDAzM2ZkYzUzZmY2",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-06T21:05:25Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:11:35Z"
      },
      "message": "validation: make CChainState::m_mempool optional\n\nSince we now have multiple chainstate objects, only one of them is active at any given\ntime. An active chainstate has a mempool, but there's no point to others having one.\n\nThis change will simplify proposed assumeutxo semantics. See the discussion here:\nhttps://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "0c1914add1d688e1df8025516f555e89ee782544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c1914add1d688e1df8025516f555e89ee782544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/617661703ac29e0744f21de74501d033fdc53ff6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrSkACgkQepNdrbLE\nTwW7hA//YWGNbwCxw/7W63nl6zlDwNaXjWs5RtYR4LheMgRwMgy6z52cpNu1FpyI\nGVt3H33kma9mtPHcgR6srxmXxHK6POXl2o/RJ3bHJXt3ETGMRleg3XXw8j6lgxDL\nZwDTbMBBTcaqm+Kv9XkU6mdN4uxBvNalTRUct0K7u3N/Xwz3KocU5NstsYIe66tO\n+Ce697MtuZXbi5ubyZhC+DgUBcDz+nE+mA9jNMIn2WQM+neSHgH3cfemfAOh2oOV\nlvQKl+gtty4FM4t5ABs7c8X9fbHeR62huOrXKSHuX6YTf2NpTeE0kNOE9/vqvJPD\nwlUWtrIXzixhaZp+HT4+ptaecVJGLznNKfPSHjCPVqwHYSGN74tsYznFvLh3GDhs\nuyR/bYjZ+0E9bDv/9SIGSTC20azSKwtz1JErFOlyd5Z3X3VsTQ13YWxEu7QjjYl1\ng8YLiD+bL23nn4t76pmFbe9XCBDCknL/j2PoN5WjVUc9IUXdHrZruOvCWyU89+yJ\n2vDMPaYWbLy0Rcs7u3bvXexBS4OQaMNHs8eG+83pkpcJHI4XZ0qUIDHBiRQVmFfJ\nQzhcitZz7IHX36iAhVjq0PXM0l7Fp1BRbNWaVpj2JrkNZF3Z8C3HFAWk7mAsBE4F\nmqbRMp7y5pKSXymYKQ0yf2kv1X5IPCKS+X1ZBYcvvco0j2PEBeU=\n=5SPH\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c1914add1d688e1df8025516f555e89ee782544\nparent 088b348dbe82689ce1782653c8fdcebb3b636eb5\nauthor James O'Beirne <james.obeirne@pm.me> 1625605525 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189095 -0400\n\nvalidation: make CChainState::m_mempool optional\n\nSince we now have multiple chainstate objects, only one of them is active at any given\ntime. An active chainstate has a mempool, but there's no point to others having one.\n\nThis change will simplify proposed assumeutxo semantics. See the discussion here:\nhttps://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/617661703ac29e0744f21de74501d033fdc53ff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 64,
      "deletions": 40
    },
    "files": [
      {
        "sha": "d85dc2380ec5d3cd40b9c8a46c181598e59262ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -1349,7 +1349,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate(*Assert(node.mempool));\n+                chainman.InitializeChainstate(Assert(node.mempool.get()));\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n "
      },
      {
        "sha": "d9d236be1d5e66c24c12f5db66f9bcaf256b6c53",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -180,7 +180,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n+    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n     m_node.chainman->ActiveChainstate().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());"
      },
      {
        "sha": "2893b412fbabaf91883a168d037899253428d19a",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n         return outp;\n     };\n \n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "0bd378631b97f2ec6c7c5b0b55da38faf0bdcfd8",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -36,7 +36,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     //\n     const uint256 snapshot_blockhash = GetRandHash();\n     CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(\n-        mempool, snapshot_blockhash));\n+        &mempool, snapshot_blockhash));\n     chainstates.push_back(&c2);\n \n     BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n+    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);"
      },
      {
        "sha": "2572e2025b8f40da8c630de452dc1d849e3671c4",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -20,7 +20,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n {\n     CTxMemPool mempool;\n     BlockManager blockman{};\n-    CChainState chainstate{mempool, blockman};\n+    CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n     CTxMemPool tx_pool{};"
      },
      {
        "sha": "1658b2cb763c17783d42995e96ca300a503f4189",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 25,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -329,7 +329,8 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n-/* Make mempool consistent after a reorg, by re-adding or recursively erasing\n+/**\n+ * Make mempool consistent after a reorg, by re-adding or recursively erasing\n  * disconnected block transactions from the mempool, and also removing any\n  * other transactions from the mempool that are no longer valid given the new\n  * tip/height.\n@@ -1208,7 +1209,7 @@ void CoinsViews::InitCache()\n     m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n-CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n+CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n       m_params(::Params()),\n       m_blockman(blockman),\n@@ -2053,7 +2054,7 @@ bool CChainState::FlushStateToDisk(\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n \n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&m_mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(m_mempool);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             // make sure we don't prune above the blockfilterindexes bestblocks\n@@ -2205,11 +2206,13 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n }\n \n /** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n+static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n     EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n {\n     // New best block\n-    mempool.AddTransactionsUpdated(1);\n+    if (mempool) {\n+        mempool->AddTransactionsUpdated(1);\n+    }\n \n     {\n         LOCK(g_best_block_mutex);\n@@ -2254,7 +2257,7 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     CBlockIndex *pindexDelete = m_chain.Tip();\n     assert(pindexDelete);\n@@ -2280,15 +2283,15 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n         return false;\n     }\n \n-    if (disconnectpool) {\n+    if (disconnectpool && m_mempool) {\n         // Save transactions to re-add to mempool at end of reorg\n         for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n             disconnectpool->addTransaction(*it);\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n             auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n             disconnectpool->removeEntry(it);\n         }\n     }\n@@ -2357,7 +2360,7 @@ class ConnectTrace {\n bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     assert(pindexNew->pprev == m_chain.Tip());\n     // Read block from disk.\n@@ -2401,8 +2404,10 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n-    m_mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n-    disconnectpool.removeForBlock(blockConnecting.vtx);\n+    if (m_mempool) {\n+        m_mempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n+        disconnectpool.removeForBlock(blockConnecting.vtx);\n+    }\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n     UpdateTip(m_mempool, pindexNew, m_params, *this);\n@@ -2495,7 +2500,7 @@ void CChainState::PruneBlockIndexCandidates() {\n bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2507,7 +2512,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+            if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2551,7 +2556,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+                    if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2565,12 +2570,12 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         }\n     }\n \n-    if (fBlocksDisconnected) {\n+    if (fBlocksDisconnected && m_mempool) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, true);\n+        UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, true);\n     }\n-    m_mempool.check(*this);\n+    if (m_mempool) m_mempool->check(*this);\n \n     CheckForkWarningConditions();\n \n@@ -2642,7 +2647,8 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n         {\n             LOCK(cs_main);\n-            LOCK(m_mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            LOCK(MempoolMutex());\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -2792,7 +2798,9 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        LOCK(m_mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n+        // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is\n+        // called after DisconnectTip without unlocking in between\n+        LOCK(MempoolMutex());\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -2806,7 +2814,9 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (m_mempool) {\n+            UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        }\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n \n@@ -3817,10 +3827,11 @@ bool CChainState::LoadBlockIndexDB()\n \n void CChainState::LoadMempool(const ArgsManager& args)\n {\n+    if (!m_mempool) return;\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool, *this);\n+        ::LoadMempool(*m_mempool, *this);\n     }\n-    m_mempool.SetIsLoaded(!ShutdownRequested());\n+    m_mempool->SetIsLoaded(!ShutdownRequested());\n }\n \n bool CChainState::LoadChainTip()\n@@ -4684,7 +4695,8 @@ std::vector<CChainState*> ChainstateManager::GetAll()\n     return out;\n }\n \n-CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash)\n+CChainState& ChainstateManager::InitializeChainstate(\n+    CTxMemPool* mempool, const std::optional<uint256>& snapshot_blockhash)\n {\n     bool is_snapshot = snapshot_blockhash.has_value();\n     std::unique_ptr<CChainState>& to_modify =\n@@ -4763,7 +4775,7 @@ bool ChainstateManager::ActivateSnapshot(\n     }\n \n     auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(\n-            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+        /* mempool */ nullptr, m_blockman, base_blockhash));\n \n     {\n         LOCK(::cs_main);\n@@ -4879,7 +4891,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             }\n \n             const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n-                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+                return snapshot_chainstate.GetCoinsCacheSizeState(snapshot_chainstate.m_mempool));\n \n             if (snapshot_cache_state >=\n                     CoinsCacheSizeState::CRITICAL) {"
      },
      {
        "sha": "4823505cfc9ab8ed896d30bd9d5f897b7c27695a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/617661703ac29e0744f21de74501d033fdc53ff6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=617661703ac29e0744f21de74501d033fdc53ff6",
        "patch": "@@ -587,8 +587,9 @@ class CChainState\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! mempool that is kept in sync with the chain\n-    CTxMemPool& m_mempool;\n+    //! Optional mempool that is kept in sync with the chain.\n+    //! Only the active chainstate has a mempool.\n+    CTxMemPool* m_mempool;\n \n     const CChainParams& m_params;\n \n@@ -600,7 +601,10 @@ class CChainState\n     //! CChainState instances.\n     BlockManager& m_blockman;\n \n-    explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n+    explicit CChainState(\n+        CTxMemPool* mempool,\n+        BlockManager& blockman,\n+        std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n \n     /**\n      * Initialize the CoinsViews UTXO set database management data structures. The in-memory\n@@ -729,7 +733,7 @@ class CChainState\n                       CCoinsViewCache& view, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     // Manual block validity manipulation:\n     /** Mark a block as precious and reorganize.\n@@ -784,8 +788,8 @@ class CChainState\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     void InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -798,6 +802,12 @@ class CChainState\n \n     bool LoadBlockIndexDB() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Indirection necessary to make lock annotations work with an optional mempool.\n+    RecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs)\n+    {\n+        return m_mempool ? &m_mempool->cs : nullptr;\n+    }\n+\n     friend ChainstateManager;\n };\n \n@@ -907,7 +917,9 @@ class ChainstateManager\n     //                                  constructor\n     //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n     //!                                 is based on a snapshot.\n-    CChainState& InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n+    CChainState& InitializeChainstate(\n+        CTxMemPool* mempool,\n+        const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Get all chainstates currently being used."
      }
    ]
  },
  {
    "sha": "46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmUzZWZkMWU0YWUyZjA1OGVjZmZmZGFlZTdlODgyYzQzMDVlYjM1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T17:06:19Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:12:16Z"
      },
      "message": "refactor: move UpdateMempoolForReorg into CChainState\n\nAllows fewer arguments and simplification of call sites.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "dc0f17b5617d2f467215bfcaef902f0f7481bef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0f17b5617d2f467215bfcaef902f0f7481bef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrVEACgkQepNdrbLE\nTwVq5A//SUbDr+OgxLItrq0YtnZ1ahQmXCDalxoDkCQQNCo3LiZEtcpOnAq5RMa6\n1HOPpK9e4+MC/ESGXL//B3HA2CzsDAAnNA7cCSycD0mKHXQAxPkae8/RpCWlB281\np3NAX/7GgCFIuLBSm2YDiSBus2VLIfzV2s0OO9SqOEgoWcDwMVvIfFF5SN18UWxR\nzbjLDrX3adhV7PE/Xz5o0glUNT5jyUKBTFu9Ln0L9S2Otkf084waGE06dAh7SWmP\n1xzsxakOU6EyLpy2KXmKpRhYp7E8KbFSSD5rKY7MFqVGSNRW1UlWCMejuK8uz1KB\ntNNlNqx+w4z73RiFCDmvP4Rf7EVnW37WuJgeyCfsWChfF6J2DbF8kp1RBqQekfjm\nIvCyvqR6G5Oy/FMHvyAXA2eF/WQkOS4YQdoK34YVcjn/IYbp6WNWWsDp4mwhyjfC\n95/9pNMRf3h9CmH1O28cNUh+MhQ5qBMcn8cPZGWd//NqXyQyLIX9v0s5osWpJa2Z\nUOaWPYODI2jmr/pFkH6LVUoPzRxPSg/tMdchMP8IdI5p41etrcLV2dZrBQOWmSsl\n9/eawOSxgNkwoTmzd056FqbwTcYQo9k7CACON//QUNFjtJHJh5doEJj23wILbY/Y\nA368cTNJZOEFANAn2ARhFLpyh/NNJaExMtQrgTRUmrtrjgSMegA=\n=/dl9\n-----END PGP SIGNATURE-----",
        "payload": "tree dc0f17b5617d2f467215bfcaef902f0f7481bef6\nparent 617661703ac29e0744f21de74501d033fdc53ff6\nauthor James O'Beirne <james.obeirne@pm.me> 1625850379 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189136 -0400\n\nrefactor: move UpdateMempoolForReorg into CChainState\n\nAllows fewer arguments and simplification of call sites.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "617661703ac29e0744f21de74501d033fdc53ff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/617661703ac29e0744f21de74501d033fdc53ff6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/617661703ac29e0744f21de74501d033fdc53ff6"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 42,
      "deletions": 31
    },
    "files": [
      {
        "sha": "65fd20f7849746827401401d6cd02f534b8c93ef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 31,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "patch": "@@ -329,24 +329,14 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n-/**\n- * Make mempool consistent after a reorg, by re-adding or recursively erasing\n- * disconnected block transactions from the mempool, and also removing any\n- * other transactions from the mempool that are no longer valid given the new\n- * tip/height.\n- *\n- * Note: we assume that disconnectpool only contains transactions that are NOT\n- * confirmed in the current chain nor already in the mempool (otherwise,\n- * in-mempool descendants of such transactions would be removed).\n- *\n- * Passing fAddToMempool=false will skip trying to add the transactions back,\n- * and instead just erase from the mempool as needed.\n- */\n-\n-static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n+void CChainState::MaybeUpdateMempoolForReorg(\n+    DisconnectedBlockTransactions& disconnectpool,\n+    bool fAddToMempool)\n {\n+    if (!m_mempool) return;\n+\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -358,11 +348,13 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(active_chainstate, mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            AcceptToMemoryPool(\n+                *this, *m_mempool, *it, true /* bypass_limits */).m_result_type !=\n+                    MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n-            mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (mempool.exists((*it)->GetHash())) {\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n+        } else if (m_mempool->exists((*it)->GetHash())) {\n             vHashUpdate.push_back((*it)->GetHash());\n         }\n         ++it;\n@@ -373,12 +365,16 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     // previously-confirmed transactions back to the mempool.\n     // UpdateTransactionsFromBlock finds descendants of any transactions in\n     // the disconnectpool that were added back and cleans up the mempool state.\n-    mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+    m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(active_chainstate, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    m_mempool->removeForReorg(*this, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(\n+        *m_mempool,\n+        this->CoinsTip(),\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -2247,7 +2243,7 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n /** Disconnect m_chain's tip.\n   * After calling, the mempool will be in an inconsistent state, with\n   * transactions from disconnected blocks being added to disconnectpool.  You\n-  * should make the mempool consistent again by calling UpdateMempoolForReorg.\n+  * should make the mempool consistent again by calling MaybeUpdateMempoolForReorg.\n   * with cs_main held.\n   *\n   * If disconnectpool is nullptr, then no disconnected transactions are added to\n@@ -2512,7 +2508,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n+            MaybeUpdateMempoolForReorg(disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2556,7 +2552,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    if (m_mempool) UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, false);\n+                    MaybeUpdateMempoolForReorg(disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2570,10 +2566,10 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         }\n     }\n \n-    if (fBlocksDisconnected && m_mempool) {\n+    if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, true);\n+        MaybeUpdateMempoolForReorg(disconnectpool, true);\n     }\n     if (m_mempool) m_mempool->check(*this);\n \n@@ -2798,7 +2794,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is\n+        // Lock for as long as disconnectpool is in scope to make sure MaybeUpdateMempoolForReorg is\n         // called after DisconnectTip without unlocking in between\n         LOCK(MempoolMutex());\n         if (!m_chain.Contains(pindex)) break;\n@@ -2814,9 +2810,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        if (m_mempool) {\n-            UpdateMempoolForReorg(*this, *m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n-        }\n+        MaybeUpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n "
      },
      {
        "sha": "68616f036afba59230fab1c5c3da8859a02b5e93",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "patch": "@@ -808,6 +808,23 @@ class CChainState\n         return m_mempool ? &m_mempool->cs : nullptr;\n     }\n \n+    /**\n+     * Make mempool consistent after a reorg, by re-adding or recursively erasing\n+     * disconnected block transactions from the mempool, and also removing any\n+     * other transactions from the mempool that are no longer valid given the new\n+     * tip/height.\n+     *\n+     * Note: we assume that disconnectpool only contains transactions that are NOT\n+     * confirmed in the current chain nor already in the mempool (otherwise,\n+     * in-mempool descendants of such transactions would be removed).\n+     *\n+     * Passing fAddToMempool=false will skip trying to add the transactions back,\n+     * and instead just erase from the mempool as needed.\n+     */\n+    void MaybeUpdateMempoolForReorg(\n+        DisconnectedBlockTransactions& disconnectpool,\n+        bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "4abf0779d6594e97222279110c328b75b5f3db7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWJmMDc3OWQ2NTk0ZTk3MjIyMjc5MTEwYzMyOGI3NWI1ZjNkYjdi",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T13:24:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:16:30Z"
      },
      "message": "refactor: no mempool arg to GetCoinsCacheSizeState\n\nUnnecessary argument since we can make use of this->m_mempool\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "6b51997a3fcf69120f55712cbcf20962860485b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b51997a3fcf69120f55712cbcf20962860485b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrlEACgkQepNdrbLE\nTwXLnw/+O8mNkqzl99Y0iBH0Syb3yE1FcABG2oZdn4CSHTk3hITw+3my+4t+qhkr\n8IXABjZjr8SBgbBjPV9qSjM+vgoFGF95qw833uIGIZHhdz9u/AokT3Ds9H8GD8Jj\nVvc/06euA8+Z16LFfuPNw65zkZbktgXhz3kbThmkzwQ/SfiI2b1oEwk2tdDvW5yl\nHckJtifHFHX3rp3xGO6+zu8d/TfJyInRCEn7LQ90VPQCUt5CuZUM/uELv+XmnjYG\nymGbiKfMPt7HgL/+Sp6TUB+dIF7fMBoJIcCTxhAwuyX+5wnjZ6BwjR/r/40U9Def\ne1t3EsLxxZsLEvddXrxpTxCkvK9va50ANpBYKiLUMLeqdT+Wir5MJXpBbcFL21Mn\nsif1Wqjzeqio2ZS3UsEHVFY8Fwzk3QkWxtpeBfeGfujBmtmY25Wy4hCmMCgq3Atp\nr9nmdrJRW2np9vbsBJZBdP2jEoHUZlVBlFVIG38Zjkmnl78q2+D5+61lqhMJrDqJ\nymSQrACudGQaHyMKEm5KPAEDTp0Xdl8UQVBPjXf2KbC2cDaXcv5PKbzUcZynGHvD\nVpLAw3nUqpDVu9vqSE+do0mj9LQ9DeHNpXeGad4b/K23fJoYTcpYGshwblcGbqvA\nofPEFDW7DeX0n3LcYI/jiYPxW2GLFo10r/CpEYxE1GCUU/8bjp4=\n=jUdH\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b51997a3fcf69120f55712cbcf20962860485b4\nparent 46e3efd1e4ae2f058ecfffdaee7e882c4305eb35\nauthor James O'Beirne <james.obeirne@pm.me> 1625837067 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189390 -0400\n\nrefactor: no mempool arg to GetCoinsCacheSizeState\n\nUnnecessary argument since we can make use of this->m_mempool\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4abf0779d6594e97222279110c328b75b5f3db7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46e3efd1e4ae2f058ecfffdaee7e882c4305eb35"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "22aafcaa6c69f7b2ef4599b3f865a22450e4c39f",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -23,7 +23,6 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n-    CTxMemPool tx_pool{};\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;\n \n@@ -57,7 +56,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     // Without any coins in the cache, we shouldn't need to flush.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -72,7 +71,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         }\n \n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -93,34 +92,34 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        if (chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n \n@@ -136,31 +135,31 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         BOOST_CHECK(usage_percentage >= 0.9);\n         BOOST_CHECK(usage_percentage < 1);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 1 << 10),\n             CoinsCacheSizeState::LARGE);\n     }\n \n     // Using the default max_* values permits way more coins to be added.\n     for (int i{0}; i < 1000; ++i) {\n         add_coin(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool),\n+            chainstate.GetCoinsCacheSizeState(),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Flushing the view doesn't take us back to OK because cacheCoins has\n     // preallocated memory that doesn't get reclaimed even after flush.\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     view.SetBestBlock(InsecureRand256());\n     BOOST_CHECK(view.Flush());\n     print_view_mem_usage(view);\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n }\n "
      },
      {
        "sha": "f3737392baee7dc2294ff6641bdda1c267238ac9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -1998,20 +1998,18 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n-CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n-        tx_pool,\n         m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n-    const CTxMemPool* tx_pool,\n     size_t max_coins_cache_size_bytes,\n     size_t max_mempool_size_bytes)\n {\n-    const int64_t nMempoolUsage = tx_pool ? tx_pool->DynamicMemoryUsage() : 0;\n+    const int64_t nMempoolUsage = m_mempool ? m_mempool->DynamicMemoryUsage() : 0;\n     int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n     int64_t nTotalSpace =\n         max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n@@ -2050,7 +2048,7 @@ bool CChainState::FlushStateToDisk(\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n \n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(m_mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState();\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             // make sure we don't prune above the blockfilterindexes bestblocks\n@@ -4885,7 +4883,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             }\n \n             const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n-                return snapshot_chainstate.GetCoinsCacheSizeState(snapshot_chainstate.m_mempool));\n+                return snapshot_chainstate.GetCoinsCacheSizeState());\n \n             if (snapshot_cache_state >=\n                     CoinsCacheSizeState::CRITICAL) {"
      },
      {
        "sha": "5505ec463f3fe9202ec4b56deba8d3aab9fa24ad",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abf0779d6594e97222279110c328b75b5f3db7b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4abf0779d6594e97222279110c328b75b5f3db7b",
        "patch": "@@ -777,11 +777,9 @@ class CChainState\n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n     //! @return the state of the size of the coins cache.\n-    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    CoinsCacheSizeState GetCoinsCacheSizeState() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     CoinsCacheSizeState GetCoinsCacheSizeState(\n-        const CTxMemPool* tx_pool,\n         size_t max_coins_cache_size_bytes,\n         size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n "
      }
    ]
  },
  {
    "sha": "ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWI3YjM1YTM5MTQ1NzE3ZTJkOWQzNTZmZDM4MmJkMWY5NWQyYTVh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-09T13:34:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-13T15:16:37Z"
      },
      "message": "refactor: move UpdateTip into CChainState\n\nMakes sense and saves on arguments.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "60a127d8fc290b5d46fbdd4959e898b6eba37ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60a127d8fc290b5d46fbdd4959e898b6eba37ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmDtrlUACgkQepNdrbLE\nTwWK/A/7Bl5m+Akeoh18atWdPk8/0IvFTHXbgUyBRFIDcibYTeKZabTbeThqJnYy\nFvPROFRCaigq+B0SQnopT19Vkwc922jIfqGyA+GoyUX7Upm+5VXiPllkzJxtkoKP\nZi05+hCXwZEds9Yoifa1k6r9HeAy4D9BY+b4KM+a6Ir7ZuoQ2gWl1iOSN7gEqOmA\nwSj/1g947mEqzeUupyULIpWU0pU/a4TxmOZ1JtW+EkjM5LjbkpI5H9qaBMRRwg6i\nXASPp0biSlKVRGxR5Kc1635KdEUn+1gmlAeS2srqn/Lapj5bhB6Pzu3hvifQucFk\n2QJD+LlWLirF2i78hLxY+go/bmz7hNtkYeD4K9BYGsG0+cAcFhpgZqsvw4P1yzho\ngrMj1dRRh0W4R8ypVsCEe+XrRf6E9kmhd4PCxx2GNKZ7BwEmeoaKBdwlVtMH61KX\nnwoZXI/fjmA9yYliGrwnAJJ3cjtp6ATMglbHzLSzyk6yx6hIgzwhiCZxymyK8vhu\nZGdj8lzP4bsN4okXZ5N4KgQxK8qLT5jIX0o5AmYtWosrtmuodDDSFahMMWwcMgFl\nXkJjvVdHjLJonc+16QylHFGqB5ESBW9GYg574d2iwTiIhXDbCiBoTiyMnoK9TUlN\nsRB+0EyzNoj1svXArl7S1k9VzUOw6G3uA2xgwwLxo0vMO68pK/E=\n=4hy8\n-----END PGP SIGNATURE-----",
        "payload": "tree 60a127d8fc290b5d46fbdd4959e898b6eba37ab0\nparent 4abf0779d6594e97222279110c328b75b5f3db7b\nauthor James O'Beirne <james.obeirne@pm.me> 1625837679 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1626189397 -0400\n\nrefactor: move UpdateTip into CChainState\n\nMakes sense and saves on arguments.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4abf0779d6594e97222279110c328b75b5f3db7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abf0779d6594e97222279110c328b75b5f3db7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4abf0779d6594e97222279110c328b75b5f3db7b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bc72b619e7b829bb03ecc4292cc014d3cd83857f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "patch": "@@ -2199,13 +2199,11 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n     res += warn;\n }\n \n-/** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n-    EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+void CChainState::UpdateTip(const CBlockIndex* pindexNew)\n {\n     // New best block\n-    if (mempool) {\n-        mempool->AddTransactionsUpdated(1);\n+    if (m_mempool) {\n+        m_mempool->AddTransactionsUpdated(1);\n     }\n \n     {\n@@ -2215,11 +2213,11 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    if (!active_chainstate.IsInitialBlockDownload()) {\n+    if (!this->IsInitialBlockDownload()) {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n-            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            ThresholdState state = checker.GetStateFor(pindex, m_params.GetConsensus(), warningcache[bit]);\n             if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {\n                 const bilingual_str warning = strprintf(_(\"Unknown new rules activated (versionbit %i)\"), bit);\n                 if (state == ThresholdState::ACTIVE) {\n@@ -2234,7 +2232,7 @@ static void UpdateTip(CTxMemPool* mempool, const CBlockIndex* pindexNew, const C\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), pindexNew), active_chainstate.CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), active_chainstate.CoinsTip().GetCacheSize(),\n+      GuessVerificationProgress(m_params.TxData(), pindexNew), this->CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), this->CoinsTip().GetCacheSize(),\n       !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n }\n \n@@ -2292,7 +2290,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(m_mempool, pindexDelete->pprev, m_params, *this);\n+    UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2404,7 +2402,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     }\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(m_mempool, pindexNew, m_params, *this);\n+    UpdateTip(pindexNew);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);"
      },
      {
        "sha": "9a2be3ad9726023bb787d08e8023bfa753868cc6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "patch": "@@ -823,6 +823,10 @@ class CChainState\n         DisconnectedBlockTransactions& disconnectpool,\n         bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n+    /** Check warning conditions and do some notifications on new chain tip set. */\n+    void UpdateTip(const CBlockIndex* pindexNew)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzFjMmI3YzA0ODk4ZjVhMjA5N2Y0NGU4YzEyYmZiMmY1M2FhZjli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-14T08:54:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-14T08:57:06Z"
      },
      "message": "Merge bitcoin/bitcoin#20354: test: Add feature_taproot.py --previous_release\n\nfa80e10d94dbf86da84fc761b09fb631155a5b25 test: Add feature_taproot.py --previous_release (MarcoFalke)\n85ccffa26686c6c9adbd18bdde37fc1747281bab test: move releases download incantation to README (Sjors Provoost)\n29d6b1da2a862bfbb14e7821979c97416c5400e8 test: previous releases: add v0.20.1 (Sjors Provoost)\n\nPull request description:\n\n  Disabling the new consensus code at runtime is fine, but potentially fragile and incomplete. Fix that by giving the option to run with a version that has been compiled without any taproot code.\n\nACKs for top commit:\n  Sjors:\n    tACK fa80e10\n  NelsonGaldeman:\n    tACK fa80e10d94dbf86da84fc761b09fb631155a5b25\n\nTree-SHA512: 1a1feef823f08c05268759645a8974e1b2d39a024258f5e6acecbe25097aae3fa9302c27262978b40f1aa8e7b525b60c0047199010f2a5d6017dd6434b4066f0",
      "tree": {
        "sha": "1f0d47663519b32d0859d77044b243b21dd5a3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f0d47663519b32d0859d77044b243b21dd5a3f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUijJgwAqD6YaucQ0EGWLU4PweNM+faKaPauxAfDkM4s6fdm0OtHVyXI2MSGNTi/\ny7EjrTQqaAL9O8q2RpzQWgV9uW4LzJG9ABz5Q6eJC9bF9L7WXLQ7vpXNMkQVD4/D\nBWBpG23LuUqrAqqwrd29HhPIPHG5DvzpI/Pk1KkF6AkwhUIdLLnNkCHcJPu8Vz1S\n5Yz4hhPNegzQnKcIdiTX04R+vJ7Oe/zXUZvORuSTuj/NBWIhTlpBtgzFqPUGQPTS\n2z+6fO/sFJDsCWb4gNePjhPxkGXwcbdv7b6yPmSxVZ6bA2Dqm8b/MLcVGtQaFscy\nYMwGjTyB/hWPFfhBX9clHTWRuLBNthNI6rywg9bBL2HFQRPyXkmzSC7di0M817am\ncphkzQRtrwcB39nheyw5oy3VzQE9DxFEFbqQA0G3Ps21j6qxKac6tizZuELSYBDw\nFBJGD86UZbpD5cqWic3jw3pUdbmpS4gV9VAmDJgivodWntnx9XjezyuObsZmZNN2\nzNZKcQma\n=NSNj\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f0d47663519b32d0859d77044b243b21dd5a3f9\nparent d8f1e1327f9c2f9fcc804468f6a981580acdf30a\nparent fa80e10d94dbf86da84fc761b09fb631155a5b25\nauthor MarcoFalke <falke.marco@gmail.com> 1626252896 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626253026 +0200\n\nMerge bitcoin/bitcoin#20354: test: Add feature_taproot.py --previous_release\n\nfa80e10d94dbf86da84fc761b09fb631155a5b25 test: Add feature_taproot.py --previous_release (MarcoFalke)\n85ccffa26686c6c9adbd18bdde37fc1747281bab test: move releases download incantation to README (Sjors Provoost)\n29d6b1da2a862bfbb14e7821979c97416c5400e8 test: previous releases: add v0.20.1 (Sjors Provoost)\n\nPull request description:\n\n  Disabling the new consensus code at runtime is fine, but potentially fragile and incomplete. Fix that by giving the option to run with a version that has been compiled without any taproot code.\n\nACKs for top commit:\n  Sjors:\n    tACK fa80e10\n  NelsonGaldeman:\n    tACK fa80e10d94dbf86da84fc761b09fb631155a5b25\n\nTree-SHA512: 1a1feef823f08c05268759645a8974e1b2d39a024258f5e6acecbe25097aae3fa9302c27262978b40f1aa8e7b525b60c0047199010f2a5d6017dd6434b4066f0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f1e1327f9c2f9fcc804468f6a981580acdf30a"
      },
      {
        "sha": "fa80e10d94dbf86da84fc761b09fb631155a5b25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80e10d94dbf86da84fc761b09fb631155a5b25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80e10d94dbf86da84fc761b09fb631155a5b25"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 73,
      "deletions": 46
    },
    "files": [
      {
        "sha": "b3e967c89866eb44809b1da6f236eca98795b772",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -14,6 +14,6 @@ export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude fe\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1\"\n+export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports\n --enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "51e61562a41300f0878d792a2c679d20a8bfe756",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -84,6 +84,12 @@ Run all possible tests with\n test/functional/test_runner.py --extended\n ```\n \n+In order to run backwards compatibility tests, download the previous node binaries:\n+\n+```\n+test/get_previous_releases.py -b v0.20.1 v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2\n+```\n+\n By default, up to 4 tests will be run in parallel by test_runner. To specify\n how many jobs to run, append `--jobs=n`\n "
      },
      {
        "sha": "e0ba835f9957849eaa18a9bf856b4314ae8864a0",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -4,9 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Backwards compatibility functional test\n \n-Test various backwards compatibility scenarios. Download the previous node binaries:\n-\n-test/get_previous_releases.py -b v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2\n+Test various backwards compatibility scenarios. Requires previous releases binaries,\n+see test/README.md.\n \n v0.15.2 is not required by this test, but it is used in wallet_upgradewallet.py.\n Due to a hardfork in regtest, it can't be used to sync nodes."
      },
      {
        "sha": "f27ab2057cff7a4008e190ff284b95eb12b4570e",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -522,9 +522,9 @@ def add_spender(spenders, *args, **kwargs):\n def random_checksig_style(pubkey):\n     \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n     opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n-    if (opcode == OP_CHECKSIGVERIFY):\n+    if opcode == OP_CHECKSIGVERIFY:\n         ret = CScript([pubkey, opcode, OP_1])\n-    elif (opcode == OP_CHECKSIGADD):\n+    elif opcode == OP_CHECKSIGADD:\n         num = random.choice([0, 0x7fffffff, -0x7fffffff])\n         ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n     else:\n@@ -1193,19 +1193,36 @@ def dump_witness(wit):\n # Data type to keep track of UTXOs, where they were created, and how to spend them.\n UTXOData = namedtuple('UTXOData', 'outpoint,output,spender')\n \n+\n class TaprootTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_argument(\"--dumptests\", dest=\"dump_tests\", default=False, action=\"store_true\",\n                             help=\"Dump generated test cases to directory set by TEST_DUMP_DIR environment variable\")\n+        parser.add_argument(\"--previous_release\", dest=\"previous_release\", default=False, action=\"store_true\",\n+                            help=\"Use a previous release as taproot-inactive node\")\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        if self.options.previous_release:\n+            self.skip_if_no_previous_releases()\n \n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n-        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:1:1\"], [\"-par=1\"]]\n+        self.extra_args = [[\"-par=1\"], [\"-par=1\"]]\n+        if self.options.previous_release:\n+            self.wallet_names = [None, self.default_wallet_name]\n+        else:\n+            self.extra_args[0].append(\"-vbparams=taproot:1:1\")\n+\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.extra_args, versions=[\n+            200100 if self.options.previous_release else None,\n+            None,\n+        ])\n+        self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n \n     def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n \n@@ -1227,7 +1244,7 @@ def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_w\n         block_response = node.submitblock(block.serialize().hex())\n         if err_msg is not None:\n             assert block_response is not None and err_msg in block_response, \"Missing error message '%s' from block response '%s': %s\" % (err_msg, \"(None)\" if block_response is None else block_response, msg)\n-        if (accept):\n+        if accept:\n             assert node.getbestblockhash() == block.hash, \"Failed to accept: %s (response: %s)\" % (msg, block_response)\n             self.tip = block.sha256\n             self.lastblockhash = block.hash"
      },
      {
        "sha": "87f40b7f2bbf81764550c64e69b6af64432146ba",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -7,10 +7,7 @@\n NOTE: The test is designed to prevent cases when compatibility is broken accidentally.\n In case we need to break mempool compatibility we can continue to use the test by just bumping the version number.\n \n-Download node binaries:\n-test/get_previous_releases.py -b v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2\n-\n-Only v0.15.2 is required by this test. The rest is used in other backwards compatibility tests.\n+The previous release v0.15.2 is required by this test, see test/README.md.\n \"\"\"\n \n import os"
      },
      {
        "sha": "c3c2f571996d30ce9f9abdf945738011784925a9",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -111,6 +111,7 @@\n     'wallet_dump.py --legacy-wallet',\n     'wallet_listtransactions.py --legacy-wallet',\n     'wallet_listtransactions.py --descriptors',\n+    'feature_taproot.py --previous_release',\n     'feature_taproot.py',\n     'rpc_signer.py',\n     'wallet_signer.py --descriptors',"
      },
      {
        "sha": "ad11f4b244e8273846e0c989e71b5acc516eb1fc",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -6,9 +6,8 @@\n \n Test upgradewallet RPC. Download node binaries:\n \n-test/get_previous_releases.py -b v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2\n-\n-Only v0.15.2 and v0.16.3 are required by this test. The others are used in feature_backwards_compatibility.py\n+Requires previous releases binaries, see test/README.md.\n+Only v0.15.2 and v0.16.3 are required by this test.\n \"\"\"\n \n import os"
      },
      {
        "sha": "01e4ef47a7b1da2b064484ee129257239d4295e8",
        "filename": "test/get_previous_releases.py",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/get_previous_releases.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b/test/get_previous_releases.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/get_previous_releases.py?ref=531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "patch": "@@ -21,39 +21,47 @@\n \n \n SHA256_SUMS = {\n-\"d40f18b4e43c6e6370ef7db9131f584fbb137276ec2e3dba67a4b267f81cb644\": \"bitcoin-0.15.2-aarch64-linux-gnu.tar.gz\",\n-\"54fb877a148a6ad189a1e1ab1ff8b11181e58ff2aaf430da55b3fd46ae549a6b\": \"bitcoin-0.15.2-arm-linux-gnueabihf.tar.gz\",\n-\"2b843506c3f1af0eeca5854a920264f9a829f02d0d50328005950ddcbe88874d\": \"bitcoin-0.15.2-i686-pc-linux-gnu.tar.gz\",\n-\"87e9340ff3d382d543b2b69112376077f0c8b4f7450d372e83b68f5a1e22b2df\": \"bitcoin-0.15.2-osx64.tar.gz\",\n-\"566be44190fd76daa01f13d428939dadfb8e3daacefc8fa17f433cad28f73bd5\": \"bitcoin-0.15.2-x86_64-linux-gnu.tar.gz\",\n-\n-\"0768c6c15caffbaca6524824c9563b42c24f70633c681c2744649158aa3fd484\": \"bitcoin-0.16.3-aarch64-linux-gnu.tar.gz\",\n-\"fb2818069854a6ad20ea03b28b55dbd35d8b1f7d453e90b83eace5d0098a2a87\": \"bitcoin-0.16.3-arm-linux-gnueabihf.tar.gz\",\n-\"75a537844313b0a84bdb61ffcdc5c4ce19a738f7ddf71007cd2edf664efd7c37\": \"bitcoin-0.16.3-i686-pc-linux-gnu.tar.gz\",\n-\"78c3bff3b619a19aed575961ea43cc9e142959218835cf51aede7f0b764fc25d\": \"bitcoin-0.16.3-osx64.tar.gz\",\n-\"5d422a9d544742bc0df12427383f9c2517433ce7b58cf672b9a9b17c2ef51e4f\": \"bitcoin-0.16.3-x86_64-linux-gnu.tar.gz\",\n-\n-\"5a6b35d1a348a402f2d2d6ab5aed653a1a1f13bc63aaaf51605e3501b0733b7a\": \"bitcoin-0.17.2-aarch64-linux-gnu.tar.gz\",\n-\"d1913a5d19c8e8da4a67d1bd5205d03c8614dfd2e02bba2fe3087476643a729e\": \"bitcoin-0.17.2-arm-linux-gnueabihf.tar.gz\",\n-\"d295fc93f39bbf0fd937b730a93184899a2eb6c3a6d53f3d857cbe77ef89b98c\": \"bitcoin-0.17.2-i686-pc-linux-gnu.tar.gz\",\n-\"a783ba20706dbfd5b47fbedf42165fce70fbbc7d78003305d964f6b3da14887f\": \"bitcoin-0.17.2-osx64.tar.gz\",\n-\"943f9362b9f11130177839116f48f809d83478b4c28591d486ee9a7e35179da6\": \"bitcoin-0.17.2-x86_64-linux-gnu.tar.gz\",\n-\n-\"88f343af72803b851c7da13874cc5525026b0b55e63e1b5e1298390c4688adc6\": \"bitcoin-0.18.1-aarch64-linux-gnu.tar.gz\",\n-\"cc7d483e4b20c5dabd4dcaf304965214cf4934bcc029ca99cbc9af00d3771a1f\": \"bitcoin-0.18.1-arm-linux-gnueabihf.tar.gz\",\n-\"989e847b3e95fc9fedc0b109cae1b4fa43348f2f712e187a118461876af9bd16\": \"bitcoin-0.18.1-i686-pc-linux-gnu.tar.gz\",\n-\"b7bbcee7a7540f711b171d6981f939ca8482005fde22689bc016596d80548bb1\": \"bitcoin-0.18.1-osx64.tar.gz\",\n-\"425ee5ec631ae8da71ebc1c3f5c0269c627cf459379b9b030f047107a28e3ef8\": \"bitcoin-0.18.1-riscv64-linux-gnu.tar.gz\",\n-\"600d1db5e751fa85903e935a01a74f5cc57e1e7473c15fd3e17ed21e202cfe5a\": \"bitcoin-0.18.1-x86_64-linux-gnu.tar.gz\",\n-\n-\"3a80431717842672df682bdb619e66523b59541483297772a7969413be3502ff\": \"bitcoin-0.19.1-aarch64-linux-gnu.tar.gz\",\n-\"657f28213823d240dd3324d14829702f9ad6f0710f8bdd1c379cb3c447197f48\": \"bitcoin-0.19.1-arm-linux-gnueabihf.tar.gz\",\n-\"10d1e53208aa7603022f4acc084a046299ab4ccf25fe01e81b3fb6f856772589\": \"bitcoin-0.19.1-i686-pc-linux-gnu.tar.gz\",\n-\"1ae1b87de26487075cd2fd22e0d4ead87d969bd55c44f2f1d873ecdc6147ebb3\": \"bitcoin-0.19.1-osx64.tar.gz\",\n-\"aa7a9563b48aa79252c8e7b6a41c07a5441bd9f14c5e4562cc72720ea6cb0ee5\": \"bitcoin-0.19.1-riscv64-linux-gnu.tar.gz\",\n-\"5fcac9416e486d4960e1a946145566350ca670f9aaba99de6542080851122e4c\": \"bitcoin-0.19.1-x86_64-linux-gnu.tar.gz\"\n+    \"d40f18b4e43c6e6370ef7db9131f584fbb137276ec2e3dba67a4b267f81cb644\": \"bitcoin-0.15.2-aarch64-linux-gnu.tar.gz\",\n+    \"54fb877a148a6ad189a1e1ab1ff8b11181e58ff2aaf430da55b3fd46ae549a6b\": \"bitcoin-0.15.2-arm-linux-gnueabihf.tar.gz\",\n+    \"2b843506c3f1af0eeca5854a920264f9a829f02d0d50328005950ddcbe88874d\": \"bitcoin-0.15.2-i686-pc-linux-gnu.tar.gz\",\n+    \"87e9340ff3d382d543b2b69112376077f0c8b4f7450d372e83b68f5a1e22b2df\": \"bitcoin-0.15.2-osx64.tar.gz\",\n+    \"566be44190fd76daa01f13d428939dadfb8e3daacefc8fa17f433cad28f73bd5\": \"bitcoin-0.15.2-x86_64-linux-gnu.tar.gz\",\n+    #\n+    \"0768c6c15caffbaca6524824c9563b42c24f70633c681c2744649158aa3fd484\": \"bitcoin-0.16.3-aarch64-linux-gnu.tar.gz\",\n+    \"fb2818069854a6ad20ea03b28b55dbd35d8b1f7d453e90b83eace5d0098a2a87\": \"bitcoin-0.16.3-arm-linux-gnueabihf.tar.gz\",\n+    \"75a537844313b0a84bdb61ffcdc5c4ce19a738f7ddf71007cd2edf664efd7c37\": \"bitcoin-0.16.3-i686-pc-linux-gnu.tar.gz\",\n+    \"78c3bff3b619a19aed575961ea43cc9e142959218835cf51aede7f0b764fc25d\": \"bitcoin-0.16.3-osx64.tar.gz\",\n+    \"5d422a9d544742bc0df12427383f9c2517433ce7b58cf672b9a9b17c2ef51e4f\": \"bitcoin-0.16.3-x86_64-linux-gnu.tar.gz\",\n+    #\n+    \"5a6b35d1a348a402f2d2d6ab5aed653a1a1f13bc63aaaf51605e3501b0733b7a\": \"bitcoin-0.17.2-aarch64-linux-gnu.tar.gz\",\n+    \"d1913a5d19c8e8da4a67d1bd5205d03c8614dfd2e02bba2fe3087476643a729e\": \"bitcoin-0.17.2-arm-linux-gnueabihf.tar.gz\",\n+    \"d295fc93f39bbf0fd937b730a93184899a2eb6c3a6d53f3d857cbe77ef89b98c\": \"bitcoin-0.17.2-i686-pc-linux-gnu.tar.gz\",\n+    \"a783ba20706dbfd5b47fbedf42165fce70fbbc7d78003305d964f6b3da14887f\": \"bitcoin-0.17.2-osx64.tar.gz\",\n+    \"943f9362b9f11130177839116f48f809d83478b4c28591d486ee9a7e35179da6\": \"bitcoin-0.17.2-x86_64-linux-gnu.tar.gz\",\n+    #\n+    \"88f343af72803b851c7da13874cc5525026b0b55e63e1b5e1298390c4688adc6\": \"bitcoin-0.18.1-aarch64-linux-gnu.tar.gz\",\n+    \"cc7d483e4b20c5dabd4dcaf304965214cf4934bcc029ca99cbc9af00d3771a1f\": \"bitcoin-0.18.1-arm-linux-gnueabihf.tar.gz\",\n+    \"989e847b3e95fc9fedc0b109cae1b4fa43348f2f712e187a118461876af9bd16\": \"bitcoin-0.18.1-i686-pc-linux-gnu.tar.gz\",\n+    \"b7bbcee7a7540f711b171d6981f939ca8482005fde22689bc016596d80548bb1\": \"bitcoin-0.18.1-osx64.tar.gz\",\n+    \"425ee5ec631ae8da71ebc1c3f5c0269c627cf459379b9b030f047107a28e3ef8\": \"bitcoin-0.18.1-riscv64-linux-gnu.tar.gz\",\n+    \"600d1db5e751fa85903e935a01a74f5cc57e1e7473c15fd3e17ed21e202cfe5a\": \"bitcoin-0.18.1-x86_64-linux-gnu.tar.gz\",\n+    #\n+    \"3a80431717842672df682bdb619e66523b59541483297772a7969413be3502ff\": \"bitcoin-0.19.1-aarch64-linux-gnu.tar.gz\",\n+    \"657f28213823d240dd3324d14829702f9ad6f0710f8bdd1c379cb3c447197f48\": \"bitcoin-0.19.1-arm-linux-gnueabihf.tar.gz\",\n+    \"10d1e53208aa7603022f4acc084a046299ab4ccf25fe01e81b3fb6f856772589\": \"bitcoin-0.19.1-i686-pc-linux-gnu.tar.gz\",\n+    \"1ae1b87de26487075cd2fd22e0d4ead87d969bd55c44f2f1d873ecdc6147ebb3\": \"bitcoin-0.19.1-osx64.tar.gz\",\n+    \"aa7a9563b48aa79252c8e7b6a41c07a5441bd9f14c5e4562cc72720ea6cb0ee5\": \"bitcoin-0.19.1-riscv64-linux-gnu.tar.gz\",\n+    \"5fcac9416e486d4960e1a946145566350ca670f9aaba99de6542080851122e4c\": \"bitcoin-0.19.1-x86_64-linux-gnu.tar.gz\",\n+    #\n+    \"60c93e3462c303eb080be7cf623f1a7684b37fd47a018ad3848bc23e13c84e1c\": \"bitcoin-0.20.1-aarch64-linux-gnu.tar.gz\",\n+    \"55b577e0fb306fb429d4be6c9316607753e8543e5946b542d75d876a2f08654c\": \"bitcoin-0.20.1-arm-linux-gnueabihf.tar.gz\",\n+    \"b9024dde373ea7dad707363e07ec7e265383204127539ae0c234bff3a61da0d1\": \"bitcoin-0.20.1-osx64.tar.gz\",\n+    \"c378d4e21109f09e8829f3591e015c66632dff2925a60b64d259be05a334c30b\": \"bitcoin-0.20.1-osx.dmg\",\n+    \"fa71cb52ee5e0459cbf5248cdec72df27995840c796f58b304607a1ed4c165af\": \"bitcoin-0.20.1-riscv64-linux-gnu.tar.gz\",\n+    \"376194f06596ecfa40331167c39bc70c355f960280bd2a645fdbf18f66527397\": \"bitcoin-0.20.1-x86_64-linux-gnu.tar.gz\",\n }\n \n+\n @contextlib.contextmanager\n def pushd(new_dir) -> None:\n     previous_dir = os.getcwd()"
      }
    ]
  },
  {
    "sha": "a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmFjYTIwN2IxYWQwMGVjMDVkNzUzM2RiZDc1YmJmZjgzMGUxZDc1",
    "commit": {
      "author": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-14T09:48:25Z"
      },
      "committer": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-14T13:15:53Z"
      },
      "message": "Move implementations of non-template fuzz helpers\n\nMoved implementations of `ConsumeTxMemPoolEntry`, `ContainsSpentInput`, `ConsumeNetAddr`, and the methods(open, read, write, seek, close) of FuzzedFileProvider from test/fuzz/util.h to test/fuzz/util.cpp.",
      "tree": {
        "sha": "9e09633afb1fea890b4bc994aae20d91dcd4f442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e09633afb1fea890b4bc994aae20d91dcd4f442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/comments",
    "author": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f1e1327f9c2f9fcc804468f6a981580acdf30a"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 163,
      "deletions": 147
    },
    "files": [
      {
        "sha": "0d87f687d3a3f6f7f38eded08232d07ed6fb0ae6",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "patch": "@@ -343,3 +343,158 @@ CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) no\n     Assert(call_size == std::variant_size_v<CTxDestination>);\n     return tx_destination;\n }\n+\n+CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n+{\n+    // Avoid:\n+    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n+    //\n+    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n+    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n+    assert(MoneyRange(fee));\n+    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n+    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n+    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n+}\n+\n+bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+{\n+    for (const CTxIn& tx_in : tx.vin) {\n+        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n+        if (coin.IsSpent()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n+    CNetAddr net_addr;\n+    if (network == Network::NET_IPV4) {\n+        in_addr v4_addr = {};\n+        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+        net_addr = CNetAddr{v4_addr};\n+    } else if (network == Network::NET_IPV6) {\n+        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n+            in6_addr v6_addr = {};\n+            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n+            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        }\n+    } else if (network == Network::NET_INTERNAL) {\n+        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    } else if (network == Network::NET_ONION) {\n+        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    }\n+    return net_addr;\n+}\n+\n+FILE* FuzzedFileProvider::open()\n+{\n+    SetFuzzedErrNo(m_fuzzed_data_provider);\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return nullptr;\n+    }\n+    std::string mode;\n+    CallOneOf(\n+        m_fuzzed_data_provider,\n+        [&] {\n+            mode = \"r\";\n+        },\n+        [&] {\n+            mode = \"r+\";\n+        },\n+        [&] {\n+            mode = \"w\";\n+        },\n+        [&] {\n+            mode = \"w+\";\n+        },\n+        [&] {\n+            mode = \"a\";\n+        },\n+        [&] {\n+            mode = \"a+\";\n+        });\n+#if defined _GNU_SOURCE && !defined __ANDROID__\n+    const cookie_io_functions_t io_hooks = {\n+        FuzzedFileProvider::read,\n+        FuzzedFileProvider::write,\n+        FuzzedFileProvider::seek,\n+        FuzzedFileProvider::close,\n+    };\n+    return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+    (void)mode;\n+    return nullptr;\n+#endif\n+}\n+\n+ssize_t FuzzedFileProvider::read(void* cookie, char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+    if (random_bytes.empty()) {\n+        return 0;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += random_bytes.size();\n+    return random_bytes.size();\n+}\n+\n+ssize_t FuzzedFileProvider::write(void* cookie, const char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += n;\n+    return n;\n+}\n+\n+int FuzzedFileProvider::seek(void* cookie, int64_t* offset, int whence)\n+{\n+    assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    int64_t new_offset = 0;\n+    if (whence == SEEK_SET) {\n+        new_offset = *offset;\n+    } else if (whence == SEEK_CUR) {\n+        if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n+            return -1;\n+        }\n+        new_offset = fuzzed_file->m_offset + *offset;\n+    } else if (whence == SEEK_END) {\n+        const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n+        if (AdditionOverflow(n, *offset)) {\n+            return -1;\n+        }\n+        new_offset = n + *offset;\n+    }\n+    if (new_offset < 0) {\n+        return -1;\n+    }\n+    fuzzed_file->m_offset = new_offset;\n+    *offset = new_offset;\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}\n+\n+int FuzzedFileProvider::close(void* cookie)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}"
      },
      {
        "sha": "bb017b3497fb55f1d1539c28e94d91525d3b7352",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 147,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "patch": "@@ -164,20 +164,7 @@ template <typename WeakEnumType, size_t size>\n     return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n }\n \n-[[nodiscard]] inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n-{\n-    // Avoid:\n-    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n-    //\n-    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n-    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n-    assert(MoneyRange(fee));\n-    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n-    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n-    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n-    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n-    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n-}\n+[[nodiscard]] CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept;\n \n [[nodiscard]] CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n@@ -215,16 +202,7 @@ template <class T>\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n-[[nodiscard]] inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n-{\n-    for (const CTxIn& tx_in : tx.vin) {\n-        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n-        if (coin.IsSpent()) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n+[[nodiscard]] bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept;\n \n /**\n  * Sets errno to a value selected from the given std::array `errnos`.\n@@ -259,27 +237,7 @@ inline void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     return result;\n }\n \n-inline CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n-    CNetAddr net_addr;\n-    if (network == Network::NET_IPV4) {\n-        in_addr v4_addr = {};\n-        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        net_addr = CNetAddr{v4_addr};\n-    } else if (network == Network::NET_IPV6) {\n-        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n-            in6_addr v6_addr = {};\n-            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n-            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n-        }\n-    } else if (network == Network::NET_INTERNAL) {\n-        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    } else if (network == Network::NET_ONION) {\n-        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    }\n-    return net_addr;\n-}\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n inline CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n@@ -329,112 +287,15 @@ class FuzzedFileProvider\n     {\n     }\n \n-    FILE* open()\n-    {\n-        SetFuzzedErrNo(m_fuzzed_data_provider);\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            return nullptr;\n-        }\n-        std::string mode;\n-        CallOneOf(\n-            m_fuzzed_data_provider,\n-            [&] {\n-                mode = \"r\";\n-            },\n-            [&] {\n-                mode = \"r+\";\n-            },\n-            [&] {\n-                mode = \"w\";\n-            },\n-            [&] {\n-                mode = \"w+\";\n-            },\n-            [&] {\n-                mode = \"a\";\n-            },\n-            [&] {\n-                mode = \"a+\";\n-            });\n-#if defined _GNU_SOURCE && !defined __ANDROID__\n-        const cookie_io_functions_t io_hooks = {\n-            FuzzedFileProvider::read,\n-            FuzzedFileProvider::write,\n-            FuzzedFileProvider::seek,\n-            FuzzedFileProvider::close,\n-        };\n-        return fopencookie(this, mode.c_str(), io_hooks);\n-#else\n-        (void)mode;\n-        return nullptr;\n-#endif\n-    }\n+    FILE* open();\n \n-    static ssize_t read(void* cookie, char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n-        if (random_bytes.empty()) {\n-            return 0;\n-        }\n-        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += random_bytes.size();\n-        return random_bytes.size();\n-    }\n+    static ssize_t read(void* cookie, char* buf, size_t size);\n \n-    static ssize_t write(void* cookie, const char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += n;\n-        return n;\n-    }\n+    static ssize_t write(void* cookie, const char* buf, size_t size);\n \n-    static int seek(void* cookie, int64_t* offset, int whence)\n-    {\n-        assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        int64_t new_offset = 0;\n-        if (whence == SEEK_SET) {\n-            new_offset = *offset;\n-        } else if (whence == SEEK_CUR) {\n-            if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n-                return -1;\n-            }\n-            new_offset = fuzzed_file->m_offset + *offset;\n-        } else if (whence == SEEK_END) {\n-            const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n-            if (AdditionOverflow(n, *offset)) {\n-                return -1;\n-            }\n-            new_offset = n + *offset;\n-        }\n-        if (new_offset < 0) {\n-            return -1;\n-        }\n-        fuzzed_file->m_offset = new_offset;\n-        *offset = new_offset;\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int seek(void* cookie, int64_t* offset, int whence);\n \n-    static int close(void* cookie)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int close(void* cookie);\n };\n \n [[nodiscard]] inline FuzzedFileProvider ConsumeFile(FuzzedDataProvider& fuzzed_data_provider) noexcept"
      }
    ]
  },
  {
    "sha": "0c845e3f8995eb8dc543a63899e5633a46091b4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzg0NWUzZjg5OTVlYjhkYzU0M2E2Mzg5OWU1NjMzYTQ2MDkxYjRl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-14T13:26:08Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-07-14T13:26:08Z"
      },
      "message": "test: Fix wallet_listdescriptors.py if bdb is not compiled",
      "tree": {
        "sha": "778d8abf94e8312027999ff73860eae1e2ac3327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/778d8abf94e8312027999ff73860eae1e2ac3327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c845e3f8995eb8dc543a63899e5633a46091b4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmDu5fAACgkQQQEIES5+\nqB/CBg//V9FnaBWtZdJPPHlaq5nmL5IFap+8dtZ90KhHcQLJ6EHcBhSQUFDt+ep8\nXEB0TPT6+Ypapj552Wsx/r8k7u8H0ZvpqdRUjLXQatNFUZNyszZ9ShrtdmndJi3K\ntIOoGYMkfQeakuCNkxRzmTi2yOWuEhZyWPBaUeeKV7o+jbe/g5WGnQmndk6p6idZ\nRdR+D1wEGmNjCLeoUsYvVmAFkheX3z8s/MeymfZLBoOLoM1ASYqumi1WNc+2bbZc\nB/OdxyJBGfUkHWQ7oIoR2WTu9KKa36RDE7T2YhL2WO1VycFKsrlzurB6dpKJcI9f\nJAsnQHkjRR/Rb2rUzysRQnSj6pbQoz8/bnixRdDD0P3PcuqgI1bUtF4wEp6thYsC\nzlUgq8F0FfcsczbN8/CWdIGkvVavO2cnsKFZup1VF4TtwK2eS4hF2RB5ixrMlZPD\n2fzI3sr90GCDIQidvk3DsiM2om3iTsvKXFbXAEzY0UElaRaXOMDaDqGPrx3KWn0s\nur3rIaazHo3q+EL5Zdp+aGeETC5sGj5BPFwdn0ClLfwKtcpINhe9tm83cK/ja9DC\nF9wY+s6VKL7Fyo5d2eWEa019jktgLmBgbxeSKwUJZwUvXbJlDd6wpswLs3AicnN/\n7QcWR141bBNCLiNZuXPv5gUXMQ7TlJw2OcagUm+ATP9vbZn/6qA=\n=ZNVI\n-----END PGP SIGNATURE-----",
        "payload": "tree 778d8abf94e8312027999ff73860eae1e2ac3327\nparent 531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1626269168 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1626269168 +0300\n\ntest: Fix wallet_listdescriptors.py if bdb is not compiled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c845e3f8995eb8dc543a63899e5633a46091b4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c845e3f8995eb8dc543a63899e5633a46091b4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c845e3f8995eb8dc543a63899e5633a46091b4e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c2565d84f680ab9dcb294c6311a9f5380d73be8e",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c845e3f8995eb8dc543a63899e5633a46091b4e/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c845e3f8995eb8dc543a63899e5633a46091b4e/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=0c845e3f8995eb8dc543a63899e5633a46091b4e",
        "patch": "@@ -30,9 +30,10 @@ def run_test(self):\n         node = self.nodes[0]\n         assert_raises_rpc_error(-18, 'No wallet is loaded.', node.listdescriptors)\n \n-        self.log.info('Test that the command is not available for legacy wallets.')\n-        node.createwallet(wallet_name='w1', descriptors=False)\n-        assert_raises_rpc_error(-4, 'listdescriptors is not available for non-descriptor wallets', node.listdescriptors)\n+        if self.is_bdb_compiled():\n+            self.log.info('Test that the command is not available for legacy wallets.')\n+            node.createwallet(wallet_name='w1', descriptors=False)\n+            assert_raises_rpc_error(-4, 'listdescriptors is not available for non-descriptor wallets', node.listdescriptors)\n \n         self.log.info('Test the command for empty descriptors wallet.')\n         node.createwallet(wallet_name='w2', blank=True, descriptors=True)"
      }
    ]
  },
  {
    "sha": "5a1ed96077852c739034c21d399da65db09e7714",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTFlZDk2MDc3ODUyYzczOTAzNGMyMWQzOTlkYTY1ZGIwOWU3NzE0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-13T13:41:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-14T14:03:15Z"
      },
      "message": "test: whitelist rpc_rawtransaction peers to speed up tests\n\nin my testing from 45-55 seconds to 15.",
      "tree": {
        "sha": "9d6532ee487b441cf8015162929a075f84224216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d6532ee487b441cf8015162929a075f84224216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a1ed96077852c739034c21d399da65db09e7714",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDu7qMACgkQT1chs9Dj\nkh2CLBAAsYgLto9EMiHGhczy+oV3JnxtwnnksxiPTVsGyRVdHLhHnUTK81GunTHQ\nQdeWCqMm8xTX/rZpOfFsmVrbXj+Rt19+L7F+sHkC7cl9rxyC5wx3esM/IRBlB7NZ\n655lcIj0o9kqunXEOfO6gCAwRRAyR8oK6QkgJAHlMo1pVc9qeOLRGb11g7gPo5FS\nkszJdjeOU9k4pV89pmIsBOG+Bbz9RlBBl0VRFdD+bw9s3K30KVN72B0UOCnzGWY2\n9bEE5CAyD6ML63fo0X8mRT8tE0dc8XnI+THs0lpacltsMOyqwr7ExyeSYubGb/as\nHSqyCs7gMoWa4eGZI00cF5o2N1UJnfmL/S/e0YclUxOm+mbnILfPgbq6jrIkJZNN\nELoZXujeH/QELq53bOTD4oLGKBk1DwcNAJQ01fMObG3P5EXRixnzsCqLjkTnlrQA\nycqY4nD1/pPzhDccupUZ6LGjXa21rPh9tzHNjaQJibuO1qyVT1MygiwvixPsPpKO\n/knOintrJrSuvs+t9N4YHSxKH8UlP05mIYDbE7Fup9PYK5KTHl5y3oyGUo3WhfRJ\nFXR55YM+37KM9DF2i49Rngp2/ZH+QU9D+mbScL/Gk+fakuHk91W0uca8muKEL2s1\nEbmqORLDEliG6iMDsrMM1xNjsAOgvnzDU6ywEf7J5PIUwgXhtlw=\n=iwz+\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICD8Sl6gM7JmsIPJVQdITyW2tSKqLl4FZrer+NyfIZnBCP/wELKPNVDd1y1w\nOY1XR+YGAnAI8CARS6wXV1yCLOIME2gXs3q/1cNVOT97TNJ9jeM70nESWQjxBGDu\n7qXwCDzjdqcr4vXXAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQwOLXUyM3oA2LKeWEo5B4GQjxBGDu7qTwCBpi\nsOemGPoiAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQy0z7VtmqV+JiXOd9w572bgjxBGDu7qXwCJRbNr6sXN1tAIPf4w0u+QyO\nKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t8BDxtiI6\nOUt3GqCgMG6AETLkCPEguZ0riwXTHzGtyqP0S4EczVMwlI6N5Fz3FBExB9nalnwI\n8QRg7u6l8AjFQabdyWv8NQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9d6532ee487b441cf8015162929a075f84224216\nparent 531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b\nauthor Jon Atack <jon@atack.com> 1626183676 +0200\ncommitter Jon Atack <jon@atack.com> 1626271395 +0200\n\ntest: whitelist rpc_rawtransaction peers to speed up tests\n\nin my testing from 45-55 seconds to 15.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a1ed96077852c739034c21d399da65db09e7714",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a1ed96077852c739034c21d399da65db09e7714",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a1ed96077852c739034c21d399da65db09e7714/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3ff74dc5a476d9be71a26bd73051aea0419fe719",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a1ed96077852c739034c21d399da65db09e7714/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a1ed96077852c739034c21d399da65db09e7714/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=5a1ed96077852c739034c21d399da65db09e7714",
        "patch": "@@ -56,6 +56,10 @@ def set_test_params(self):\n             [\"-txindex\"],\n             [\"-txindex\"],\n         ]\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        for args in self.extra_args:\n+            args.append(\"-whitelist=noban@127.0.0.1\")\n+\n         self.supports_cli = False\n \n     def skip_test_if_missing_module(self):"
      }
    ]
  },
  {
    "sha": "a3d6ec5bb567481a634638cea7ae37c355119a7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2Q2ZWM1YmI1Njc0ODFhNjM0NjM4Y2VhN2FlMzdjMzU1MTE5YTdi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-14T14:08:21Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-14T14:08:21Z"
      },
      "message": "test: move rpc_rawtransaction tests to < 30s group",
      "tree": {
        "sha": "0a0a7f7f07b774bbb47b79a450bfc7926ac4b71c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a0a7f7f07b774bbb47b79a450bfc7926ac4b71c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3d6ec5bb567481a634638cea7ae37c355119a7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDu79YACgkQT1chs9Dj\nkh2tNA//UFzC06OAKpMHyHX+o4yg4JEg+gyayHX0Ko0nIu0ntlJ07alKRPZUuRsF\nr9FGMp8iRunc02WEt9piV/sRCfcwI998OG6pa/s/I7JeMWrWE46biSr9IhlHZ3bV\nyo5f8TE3/ExARffp/8dsZjoOX4SgZgoWBCEtWetmeXJjuS+Zsyprfb7qsYHLlQw6\nxAiImNOvR7BE5CAH8n4ClzqfuwgHhfcWOkPTQUvjRnE/k2brkY8FA7Gr9va9Peo/\ncLhbjqLpBCw3EAdR/hyMvpChbTypzcYgZK9evZa6z/6x0PsaiC3NeR4X7ccHQWhK\nI7ToB6BwIGk6uczgZF42zbjDbW56iVm0sfzfeMHP3adT+xbkPCPW8bh0axY9Wq3Z\nBcI4zkr4iOe5oBHxUgjdnlC7ebxdkVFXoYxhYffUyfgcgwfrflHJ4m+lgP/FVaoB\nld4VzNR5DS3aEfW8u4USOUANsnobHTVeQpumSL0EGHVvR2LW0tkVAbxpC5fAcwKo\n1CTxi/rifoJ6fKvncSh3eQVFQrdfVPLw78f22YH9uINtHucn2DtScG12au+7bz+B\nRF5p+XJyzeci3XSm9Pe8MKCXuz3/Hnjyh19WsuD+Ddyw7sCHdf1OqsULJKhCwrkz\noyD/vuAeMIBWWPqMM094S/1bzI3aSjP+sprpw2aKqeSTT0gELpQ=\n=hbXZ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIILxYsHS6wjJ37EoKgxkwl6MTZjU3LZ8Sn0KXL1pxg5ECP/wEBH2Em3n/Lbj\nVi/9h/X0YB0I8SBk/DpWGcG5NVGlQpxqKb1tin3uvbmbxU0/sJ2dh/+CFgjwIKeH\nfzrC7CMRNIlQ7Bzy6EbAvb/Px/dx8A7O9IomO0vICPEEYO7v1/AIdvMvA+4CdRQA\ng9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BBK\nhSzrN9wM6VyNZxv252p1CPAg5P1EdROYbNFfCu3dbkwLD7AZ8TBiYtlPWBsyCukj\nnMcI8SAK44JAF9prTc4UpxDt9A0aZUT/ky+cGPSwpIIHVdqt+wjxBGDu79fwCHk3\nQnAh3z7AAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t//AQmPBaTEUkVLnEMYw5Blu2hwjxIPtc9EJ2Wv+yds5VT9oxrM9o\n14vOJg98TDNyDynITRtKCPAgkEArjbLzW3ei3DN8CZiM9TBKI48nTysKYVA0pFKb\n9jgI8QRg7u/X8AgvIfcSiijo4gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BCsyKJHE32hq9nwt35rXzQWCPEg\n2udvRKpqae5aok0RDY08Xxo3kcx9p9bJ+9I4dFe1FK4I8QRg7u/X8AiLgf6FdlmJ\nIwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0a0a7f7f07b774bbb47b79a450bfc7926ac4b71c\nparent 5a1ed96077852c739034c21d399da65db09e7714\nauthor Jon Atack <jon@atack.com> 1626271701 +0200\ncommitter Jon Atack <jon@atack.com> 1626271701 +0200\n\ntest: move rpc_rawtransaction tests to < 30s group\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d6ec5bb567481a634638cea7ae37c355119a7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d6ec5bb567481a634638cea7ae37c355119a7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d6ec5bb567481a634638cea7ae37c355119a7b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a1ed96077852c739034c21d399da65db09e7714",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a1ed96077852c739034c21d399da65db09e7714",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a1ed96077852c739034c21d399da65db09e7714"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8afd8b3bc100843b5a6ddd295302847ee4459d1b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3d6ec5bb567481a634638cea7ae37c355119a7b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3d6ec5bb567481a634638cea7ae37c355119a7b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a3d6ec5bb567481a634638cea7ae37c355119a7b",
        "patch": "@@ -125,8 +125,6 @@\n     'wallet_abandonconflict.py --legacy-wallet',\n     'wallet_abandonconflict.py --descriptors',\n     'feature_csv_activation.py',\n-    'rpc_rawtransaction.py --legacy-wallet',\n-    'rpc_rawtransaction.py --descriptors',\n     'wallet_address_types.py --legacy-wallet',\n     'wallet_address_types.py --descriptors',\n     'feature_bip68_sequence.py',\n@@ -173,6 +171,8 @@\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py --legacy-wallet',\n     'rpc_signrawtransaction.py --descriptors',\n+    'rpc_rawtransaction.py --legacy-wallet',\n+    'rpc_rawtransaction.py --descriptors',\n     'wallet_groups.py --legacy-wallet',\n     'p2p_addrv2_relay.py',\n     'wallet_groups.py --descriptors',"
      }
    ]
  },
  {
    "sha": "fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY5YjNlYmEzYmM0MjY0ZTc3ZTg2NzBkMjUwNmE1MDE1YTI5NmVk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-15T05:36:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-15T05:36:54Z"
      },
      "message": "Merge bitcoin/bitcoin#22446: test: Fix wallet_listdescriptors.py if bdb is not compiled\n\n0c845e3f8995eb8dc543a63899e5633a46091b4e test: Fix wallet_listdescriptors.py if bdb is not compiled (Hennadii Stepanov)\n\nPull request description:\n\n  If build system is configured `--without-bdb`, the `wallet_listdescriptors.py` fails:\n  ```\n  $ test/functional/wallet_listdescriptors.py --descriptors\n  2021-07-14T13:20:52.931000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_02p7o1c9\n  2021-07-14T13:21:23.377000Z TestFramework (INFO): Test that the command is not available for legacy wallets.\n  2021-07-14T13:21:23.381000Z TestFramework (ERROR): JSONRPC error\n  Traceback (most recent call last):\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/test_framework.py\", line 128, in main\n      self.run_test()\n    File \"test/functional/wallet_listdescriptors.py\", line 34, in run_test\n      node.createwallet(wallet_name='w1', descriptors=False)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/test_node.py\", line 685, in createwallet\n      return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors, load_on_startup, external_signer)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/coverage.py\", line 47, in __call__\n      return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/authproxy.py\", line 146, in __call__\n      raise JSONRPCException(response['error'], status)\n  test_framework.authproxy.JSONRPCException: Compiled without bdb support (required for legacy wallets) (-4)\n  2021-07-14T13:21:23.436000Z TestFramework (INFO): Stopping nodes\n  2021-07-14T13:21:24.092000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_02p7o1c9\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_02p7o1c9/test_framework.log\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): Hint: Call /home/hebasto/GitHub/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_02p7o1c9' to consolidate all logs\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  ```\n\n  This PR fixes this issue.\n\n  Also see #20267.\n\nACKs for top commit:\n  achow101:\n    ACK 0c845e3f8995eb8dc543a63899e5633a46091b4e\n\nTree-SHA512: d7116a9ae30c7b7e3f55f55d2eea66f9e293c38d6757ed66d0477e4256ff5fedca5ddedafa0ef0c09f4dc1f7f973163e5a46090da26b067fdddbd9ea2ee76633",
      "tree": {
        "sha": "778d8abf94e8312027999ff73860eae1e2ac3327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/778d8abf94e8312027999ff73860eae1e2ac3327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDvyXYACgkQLuufXMCV\nJsHl3w//SjVPoOcbRfWm3Ydu8CMOSHW+AoEPJcPDJNlilonLNue7REYgtz8mOBgG\n40hw0kyh+dAieAWFfIgcKBnFw497MZP4aN/3tgp6RN5WF+4A0A+vavVfD85i+zMy\naZ+pXR+yGMhALhT3bS11z5RSdQ7DNoCiEpxA7Ey1YBwNf2/yST+/Ui9xVxN3PcTj\n2Z0A3WBghDJllDqozVpZCAWbWrWs0jUwjwSxejNpJpY1s32AFPnhzKVZb2o67+2t\nsM8rB3keeFycKcmdUlrmEaCIpG2ezc//EfuCdGQL95CAaCmYHHN7aRKfgqnysy3r\n0V3EhJ4OyRjlom0aSw3rTis1nOjOPxrPzD5YrlBMZeeWSz0ReL3c2UwLfB5aBZfl\nd4jxR4y+3+CHUYZnRDnOn+ZFpkk0g8BYQA0u5itZoyGos5aNQB2yNlUVbYosJevw\nWnz1bM8Z7HLEMwKu/P3jOwR0xU0+TP7on/ELvHyLeamm0SiJf6BsyISR0OBrxouv\n7k5xNHkRkjwl2Kk2FB5gJnv89uWzaPDj8FZZyskGRIdZfBGknWD+SQRo7MDJNOoH\ncOtCnzNmoRok5Ql0TJvuiXuGZnT1XDlyMJLkITJThqy2Kp840YetveNbc4rGjgf7\nd4flFVD598sgn8e+F2JmZbK1muZ+gsXAcZp35EabAxZAWOiacds=\n=I7W3\n-----END PGP SIGNATURE-----",
        "payload": "tree 778d8abf94e8312027999ff73860eae1e2ac3327\nparent 531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b\nparent 0c845e3f8995eb8dc543a63899e5633a46091b4e\nauthor fanquake <fanquake@gmail.com> 1626327400 +0800\ncommitter fanquake <fanquake@gmail.com> 1626327414 +0800\n\nMerge bitcoin/bitcoin#22446: test: Fix wallet_listdescriptors.py if bdb is not compiled\n\n0c845e3f8995eb8dc543a63899e5633a46091b4e test: Fix wallet_listdescriptors.py if bdb is not compiled (Hennadii Stepanov)\n\nPull request description:\n\n  If build system is configured `--without-bdb`, the `wallet_listdescriptors.py` fails:\n  ```\n  $ test/functional/wallet_listdescriptors.py --descriptors\n  2021-07-14T13:20:52.931000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_02p7o1c9\n  2021-07-14T13:21:23.377000Z TestFramework (INFO): Test that the command is not available for legacy wallets.\n  2021-07-14T13:21:23.381000Z TestFramework (ERROR): JSONRPC error\n  Traceback (most recent call last):\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/test_framework.py\", line 128, in main\n      self.run_test()\n    File \"test/functional/wallet_listdescriptors.py\", line 34, in run_test\n      node.createwallet(wallet_name='w1', descriptors=False)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/test_node.py\", line 685, in createwallet\n      return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors, load_on_startup, external_signer)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/coverage.py\", line 47, in __call__\n      return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\n    File \"/home/hebasto/GitHub/bitcoin/test/functional/test_framework/authproxy.py\", line 146, in __call__\n      raise JSONRPCException(response['error'], status)\n  test_framework.authproxy.JSONRPCException: Compiled without bdb support (required for legacy wallets) (-4)\n  2021-07-14T13:21:23.436000Z TestFramework (INFO): Stopping nodes\n  2021-07-14T13:21:24.092000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_02p7o1c9\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_02p7o1c9/test_framework.log\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): Hint: Call /home/hebasto/GitHub/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_02p7o1c9' to consolidate all logs\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\n  2021-07-14T13:21:24.092000Z TestFramework (ERROR):\n  ```\n\n  This PR fixes this issue.\n\n  Also see #20267.\n\nACKs for top commit:\n  achow101:\n    ACK 0c845e3f8995eb8dc543a63899e5633a46091b4e\n\nTree-SHA512: d7116a9ae30c7b7e3f55f55d2eea66f9e293c38d6757ed66d0477e4256ff5fedca5ddedafa0ef0c09f4dc1f7f973163e5a46090da26b067fdddbd9ea2ee76633\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf9b3eba3bc4264e77e8670d2506a5015a296ed/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/531c2b7c04898f5a2097f44e8c12bfb2f53aaf9b"
      },
      {
        "sha": "0c845e3f8995eb8dc543a63899e5633a46091b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c845e3f8995eb8dc543a63899e5633a46091b4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c845e3f8995eb8dc543a63899e5633a46091b4e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c2565d84f680ab9dcb294c6311a9f5380d73be8e",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf9b3eba3bc4264e77e8670d2506a5015a296ed/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf9b3eba3bc4264e77e8670d2506a5015a296ed/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
        "patch": "@@ -30,9 +30,10 @@ def run_test(self):\n         node = self.nodes[0]\n         assert_raises_rpc_error(-18, 'No wallet is loaded.', node.listdescriptors)\n \n-        self.log.info('Test that the command is not available for legacy wallets.')\n-        node.createwallet(wallet_name='w1', descriptors=False)\n-        assert_raises_rpc_error(-4, 'listdescriptors is not available for non-descriptor wallets', node.listdescriptors)\n+        if self.is_bdb_compiled():\n+            self.log.info('Test that the command is not available for legacy wallets.')\n+            node.createwallet(wallet_name='w1', descriptors=False)\n+            assert_raises_rpc_error(-4, 'listdescriptors is not available for non-descriptor wallets', node.listdescriptors)\n \n         self.log.info('Test the command for empty descriptors wallet.')\n         node.createwallet(wallet_name='w2', blank=True, descriptors=True)"
      }
    ]
  },
  {
    "sha": "e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmM0YWM3Y2ZiNThlNzQxNjZmYzE1NDJhOWY2MGFmNDVjMTMxM2Y0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-15T05:37:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-15T06:31:19Z"
      },
      "message": "Merge bitcoin/bitcoin#22447: test: whitelist rpc_rawtransaction peers to speed up tests\n\na3d6ec5bb567481a634638cea7ae37c355119a7b test: move rpc_rawtransaction tests to < 30s group (Jon Atack)\n5a1ed96077852c739034c21d399da65db09e7714 test: whitelist rpc_rawtransaction peers to speed up tests (Jon Atack)\n\nPull request description:\n\n  Speed up the somewhat slow `rpc_rawtransaction.py` test by more than 3x (from 45-55 seconds to 15 seconds on a laptop running 2 x 2.5GHz).\n\nACKs for top commit:\n  mjdietzx:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n  kristapsk:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n  theStack:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b \ud83d\udc0e\n  brunoerg:\n    tACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n\nTree-SHA512: f1d105594c9b5b257a7096b631a6fa5aeb50e330a351f75c2d6ffa7dd73abdb6e1f596a78c16d204a9bac3fe506e0519f9ad96bb8477ab6424c8e18125ccb659",
      "tree": {
        "sha": "3c9a0fd38f2e7c6f696bdf179677f0112d9ce364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c9a0fd38f2e7c6f696bdf179677f0112d9ce364"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDv1jcACgkQLuufXMCV\nJsFy4hAAnNYHZAMXkCHKoNDshTdMHRWosO934vSkTHhs4f5IFSpgYzH1EoP7fWT8\nJumZ59Pmj/ZVtid0fQMx1A4v1IlHykjLAdeb4H89wjeyVk+BxR4j+J1KxlHe0sXZ\nprPu2NZp7gOl8M9ijTpzQ7KJQXl6rsIUQPA6z2Uiu1ntR88RCY3YwoSuNhipmyWW\n76aD/QKSvvmcXANXRrgSRBabXyX+L5caVYUKdXwiW0R6TEyqel5noyG9WFVYMsrd\nyMpdis5JVKUjG79UweyftVjdQbWDL20OGAh2cOsQuc2NoRYTVU7LKFONAptCZkrw\nv8BQ3hsdBipp7di4klxrhYPbJvtAc7zuNOSXytH0/Y0OtGzTIUKoz5ZIimik5kzg\nApHsCoUK8CdqbzW7xBEHJ3u6+qGB2vWfalPdrNMmjBvuM4GIvkAWu0j5XaCtaMHe\n1rylKfejc7S45FXtsfZ3bGvg+DeKny8WPRvCmjbcd7mnNJTyinnM5vY9OeWyyVo3\nM8TZpNapsCaX/mdwb2MYNJr8/bp4WKb+xeto4paotG2vCIUOqC3AEci25hCuHBJK\nmflwEnzr5rG+olLXooYlaihzhK+XXsWfMn6RcLZgVdbSVIDx6KKZR8TRJIiHBkk9\nZBbC5h5uKzJIdl6xIfGcAoDCSyIWBWv0cIhjAhE4B0RxL/YKl0Y=\n=HPRY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c9a0fd38f2e7c6f696bdf179677f0112d9ce364\nparent fdf9b3eba3bc4264e77e8670d2506a5015a296ed\nparent a3d6ec5bb567481a634638cea7ae37c355119a7b\nauthor fanquake <fanquake@gmail.com> 1626327456 +0800\ncommitter fanquake <fanquake@gmail.com> 1626330679 +0800\n\nMerge bitcoin/bitcoin#22447: test: whitelist rpc_rawtransaction peers to speed up tests\n\na3d6ec5bb567481a634638cea7ae37c355119a7b test: move rpc_rawtransaction tests to < 30s group (Jon Atack)\n5a1ed96077852c739034c21d399da65db09e7714 test: whitelist rpc_rawtransaction peers to speed up tests (Jon Atack)\n\nPull request description:\n\n  Speed up the somewhat slow `rpc_rawtransaction.py` test by more than 3x (from 45-55 seconds to 15 seconds on a laptop running 2 x 2.5GHz).\n\nACKs for top commit:\n  mjdietzx:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n  kristapsk:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n  theStack:\n    ACK a3d6ec5bb567481a634638cea7ae37c355119a7b \ud83d\udc0e\n  brunoerg:\n    tACK a3d6ec5bb567481a634638cea7ae37c355119a7b\n\nTree-SHA512: f1d105594c9b5b257a7096b631a6fa5aeb50e330a351f75c2d6ffa7dd73abdb6e1f596a78c16d204a9bac3fe506e0519f9ad96bb8477ab6424c8e18125ccb659\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf9b3eba3bc4264e77e8670d2506a5015a296ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf9b3eba3bc4264e77e8670d2506a5015a296ed"
      },
      {
        "sha": "a3d6ec5bb567481a634638cea7ae37c355119a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d6ec5bb567481a634638cea7ae37c355119a7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d6ec5bb567481a634638cea7ae37c355119a7b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3ff74dc5a476d9be71a26bd73051aea0419fe719",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
        "patch": "@@ -56,6 +56,10 @@ def set_test_params(self):\n             [\"-txindex\"],\n             [\"-txindex\"],\n         ]\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        for args in self.extra_args:\n+            args.append(\"-whitelist=noban@127.0.0.1\")\n+\n         self.supports_cli = False\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "8afd8b3bc100843b5a6ddd295302847ee4459d1b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
        "patch": "@@ -125,8 +125,6 @@\n     'wallet_abandonconflict.py --legacy-wallet',\n     'wallet_abandonconflict.py --descriptors',\n     'feature_csv_activation.py',\n-    'rpc_rawtransaction.py --legacy-wallet',\n-    'rpc_rawtransaction.py --descriptors',\n     'wallet_address_types.py --legacy-wallet',\n     'wallet_address_types.py --descriptors',\n     'feature_bip68_sequence.py',\n@@ -173,6 +171,8 @@\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py --legacy-wallet',\n     'rpc_signrawtransaction.py --descriptors',\n+    'rpc_rawtransaction.py --legacy-wallet',\n+    'rpc_rawtransaction.py --descriptors',\n     'wallet_groups.py --legacy-wallet',\n     'p2p_addrv2_relay.py',\n     'wallet_groups.py --descriptors',"
      }
    ]
  },
  {
    "sha": "97153a702600430bdaf6af4f6f4eb8593e32819f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzE1M2E3MDI2MDA0MzBiZGFmNmFmNGY2ZjRlYjg1OTNlMzI4MTlm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T06:34:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T06:34:40Z"
      },
      "message": "Merge bitcoin/bitcoin#22385: refactor: Use DeploymentEnabled to hide VB deployments\n\nfa5658ed077bfb02b6281d642dc649abdb99b6ee Use DeploymentEnabled to hide VB deployments (MarcoFalke)\nfa11fecf0dac44846a08e1b325547641f2eca957 doc: Move buried deployment doc to the enum that enumerates them (MarcoFalke)\n\nPull request description:\n\n  Plus a doc commit.\n\nACKs for top commit:\n  jnewbery:\n    utACK fa5658ed077bfb02b6281d642dc649abdb99b6ee\n  ajtowns:\n    utACK fa5658ed077bfb02b6281d642dc649abdb99b6ee\n\nTree-SHA512: 2aeceee0674feb603d76656eff40695b7d7305de309f837bbb6a8c1dbb1d0b962b741f06ab7b9a8b1dbd1964c9c0c9aa5dc9588fd8e6d896e620b69e08eedbaa",
      "tree": {
        "sha": "27a185c8cb33415626a1d3ccf70bd2a3b7ea0d09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27a185c8cb33415626a1d3ccf70bd2a3b7ea0d09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97153a702600430bdaf6af4f6f4eb8593e32819f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiQSQv+L58wIGQkprxshHBwqBTncwZplJpZ2xVoBN5nx+7sgyHD0LdLIYeg4nIJ\nO1rsDM9MZ5F0wNtHtiTaQ7HbNad/8wwT/TJSX3j08yrCI5TEzW4IQFH15zkcwK6W\nvKSX+qZ6BB9NUskZmE6g+uVPLC6f+gq69OE23uMiUfcl4tXIHzpsLbet0ht/IIY8\nOoIb2LpGpLC+MDYqclEfa6wkbPn5ph2+xtqCTiPJBVGJQ2RcThyAyT1o9ec/qjxo\nkIcKyasc8iPTHs27GDhH0a3+LVrFUW4n5ARSbRK0T/egxhRE06sF3s4eEG+z6oSh\nUJXkDN1C1t0g+tTZv7+E5dNzfomrFfNAhz7KYAXnJ0tB0kAY3LDOwtqTZ3tqp3Db\naGVh3Kvj+sI8bPg8BXGCrI+113x13YnSY3A57egIEqSCU35XEyyMxyjfRHTbOZbb\nNUcwhs19JAWUhEVKVrQ601Cdr9ZS5Uh7JvSWE00K44YUx50n/uNf8Zn3ObhoIlBr\nbZVWY0pk\n=S4Cf\n-----END PGP SIGNATURE-----",
        "payload": "tree 27a185c8cb33415626a1d3ccf70bd2a3b7ea0d09\nparent e2c4ac7cfb58e74166fc1542a9f60af45c1313f4\nparent fa5658ed077bfb02b6281d642dc649abdb99b6ee\nauthor MarcoFalke <falke.marco@gmail.com> 1626330871 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626330880 +0200\n\nMerge bitcoin/bitcoin#22385: refactor: Use DeploymentEnabled to hide VB deployments\n\nfa5658ed077bfb02b6281d642dc649abdb99b6ee Use DeploymentEnabled to hide VB deployments (MarcoFalke)\nfa11fecf0dac44846a08e1b325547641f2eca957 doc: Move buried deployment doc to the enum that enumerates them (MarcoFalke)\n\nPull request description:\n\n  Plus a doc commit.\n\nACKs for top commit:\n  jnewbery:\n    utACK fa5658ed077bfb02b6281d642dc649abdb99b6ee\n  ajtowns:\n    utACK fa5658ed077bfb02b6281d642dc649abdb99b6ee\n\nTree-SHA512: 2aeceee0674feb603d76656eff40695b7d7305de309f837bbb6a8c1dbb1d0b962b741f06ab7b9a8b1dbd1964c9c0c9aa5dc9588fd8e6d896e620b69e08eedbaa\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97153a702600430bdaf6af4f6f4eb8593e32819f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97153a702600430bdaf6af4f6f4eb8593e32819f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97153a702600430bdaf6af4f6f4eb8593e32819f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c4ac7cfb58e74166fc1542a9f60af45c1313f4"
      },
      {
        "sha": "fa5658ed077bfb02b6281d642dc649abdb99b6ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5658ed077bfb02b6281d642dc649abdb99b6ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5658ed077bfb02b6281d642dc649abdb99b6ee"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9205cfee874173316f97324421a6d2c8abf8915d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97153a702600430bdaf6af4f6f4eb8593e32819f/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97153a702600430bdaf6af4f6f4eb8593e32819f/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=97153a702600430bdaf6af4f6f4eb8593e32819f",
        "patch": "@@ -11,8 +11,11 @@\n \n namespace Consensus {\n \n-enum BuriedDeployment : int16_t\n-{\n+/**\n+ * A buried deployment is one where the height of the activation has been hardcoded into\n+ * the client implementation long after the consensus change has activated. See BIP 90.\n+ */\n+enum BuriedDeployment : int16_t {\n     // buried deployments get negative values to avoid overlap with DeploymentPos\n     DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n     DEPLOYMENT_CLTV,\n@@ -22,8 +25,7 @@ enum BuriedDeployment : int16_t\n };\n constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n \n-enum DeploymentPos : uint16_t\n-{\n+enum DeploymentPos : uint16_t {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp"
      },
      {
        "sha": "f95c5996f5e4c3071b0fbfda0d049cd9edcdb721",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97153a702600430bdaf6af4f6f4eb8593e32819f/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97153a702600430bdaf6af4f6f4eb8593e32819f/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=97153a702600430bdaf6af4f6f4eb8593e32819f",
        "patch": "@@ -49,7 +49,7 @@ inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::Buried\n inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return params.vDeployments[dep].nTimeout != 0;\n+    return params.vDeployments[dep].nStartTime != Consensus::BIP9Deployment::NEVER_ACTIVE;\n }\n \n #endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "c4a89c9772abfa94b85e7bc2d17dc933cc315e29",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97153a702600430bdaf6af4f6f4eb8593e32819f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97153a702600430bdaf6af4f6f4eb8593e32819f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=97153a702600430bdaf6af4f6f4eb8593e32819f",
        "patch": "@@ -1350,10 +1350,7 @@ static RPCHelpMan verifychain()\n static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n-    // A buried deployment is one where the height of the activation has been hardcoded into\n-    // the client implementation long after the consensus change has activated. See BIP 90.\n-    // Buried deployments with activation height value of\n-    // std::numeric_limits<int>::max() are disabled and thus hidden.\n+\n     if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n@@ -1368,8 +1365,8 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n-    // Deployments that are never active are hidden.\n-    if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n+\n+    if (!DeploymentEnabled(consensusParams, id)) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);"
      }
    ]
  },
  {
    "sha": "c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDIyNGJjOTYyODdiMDRjOWFjNGQyYWU5MzYyMWM3MmJlNWMyYmFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T11:35:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T11:40:03Z"
      },
      "message": "Merge bitcoin/bitcoin#22415: Make m_mempool optional in CChainState\n\nceb7b35a39145717e2d9d356fd382bd1f95d2a5a refactor: move UpdateTip into CChainState (James O'Beirne)\n4abf0779d6594e97222279110c328b75b5f3db7b refactor: no mempool arg to GetCoinsCacheSizeState (James O'Beirne)\n46e3efd1e4ae2f058ecfffdaee7e882c4305eb35 refactor: move UpdateMempoolForReorg into CChainState (James O'Beirne)\n617661703ac29e0744f21de74501d033fdc53ff6 validation: make CChainState::m_mempool optional (James O'Beirne)\n\nPull request description:\n\n  Make `CChainState::m_mempool` optional by making it a pointer instead of a reference. This will allow a simplification to assumeutxo semantics (see https://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905) and help facilitate the `-nomempool` option.\n\nACKs for top commit:\n  jnewbery:\n    ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  naumenkogs:\n    ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  ryanofsky:\n    Code review ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a (just minor style and test tweaks since last review)\n  lsilva01:\n    Code review ACK and tested on Signet ACK https://github.com/bitcoin/bitcoin/pull/22415/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  MarcoFalke:\n    review ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a \ud83d\ude0c\n\nTree-SHA512: cc445ad33439d5918cacf80a6354eea8f3d33bb7719573ed5b970fad1a0dab410bcd70be44c862b8aba1b71263b82d79876688c553e339362653dfb3d8ec81e6",
      "tree": {
        "sha": "ec03c4571a6b96b77f18576064880dad113c6218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec03c4571a6b96b77f18576064880dad113c6218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjgFAv/Sa8Jcw0zHBW7oHon1SmURX0tpKTE3XoAblTIcfX/JIhDni5Mm2C/XJCD\nutraJoq/N/+JVKJ+3IXaSVAJHNnTk9ZDoKOmEwHezow4S8cnw77X9gAY78DJqkpr\n6Ec23nK7YpJ9+ZE3OD2ykl32/NOtw7yTNTfDzSLENsg0BlvV/MsKpPpL1E7f/956\nqfyI/IebhDvjqWi7yLgDSuqloFRiTUt6/RnBqIlrkl37XZrN85iPGaFoQB14JqPI\nfAtoCuxwUR2mrrjK9HOXfVmuSWOhZC5Sp+9Nl2moSSrH2uXapPiZyxjfYDfQw0Do\nkojYRQObpyikwRmiTR+Jmt0ZE99C4Sq37lrurA8turp+mEJ0706LJ9OSuiDElTOI\nLF42kEkD941PFr9RzRnAkITPgcZb9p2pbRy0DyNmTlHmcXGX5knGboju3AsWvS2d\naiQ7u25XySZUj1UZxtZewhN5AjeSBfze5RdfX3OAMc9InKNR3aNd0rQaoHsoBUbw\njlfqKli7\n=kE4g\n-----END PGP SIGNATURE-----",
        "payload": "tree ec03c4571a6b96b77f18576064880dad113c6218\nparent 97153a702600430bdaf6af4f6f4eb8593e32819f\nparent ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\nauthor MarcoFalke <falke.marco@gmail.com> 1626348917 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626349203 +0200\n\nMerge bitcoin/bitcoin#22415: Make m_mempool optional in CChainState\n\nceb7b35a39145717e2d9d356fd382bd1f95d2a5a refactor: move UpdateTip into CChainState (James O'Beirne)\n4abf0779d6594e97222279110c328b75b5f3db7b refactor: no mempool arg to GetCoinsCacheSizeState (James O'Beirne)\n46e3efd1e4ae2f058ecfffdaee7e882c4305eb35 refactor: move UpdateMempoolForReorg into CChainState (James O'Beirne)\n617661703ac29e0744f21de74501d033fdc53ff6 validation: make CChainState::m_mempool optional (James O'Beirne)\n\nPull request description:\n\n  Make `CChainState::m_mempool` optional by making it a pointer instead of a reference. This will allow a simplification to assumeutxo semantics (see https://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905) and help facilitate the `-nomempool` option.\n\nACKs for top commit:\n  jnewbery:\n    ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  naumenkogs:\n    ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  ryanofsky:\n    Code review ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a (just minor style and test tweaks since last review)\n  lsilva01:\n    Code review ACK and tested on Signet ACK https://github.com/bitcoin/bitcoin/pull/22415/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a\n  MarcoFalke:\n    review ACK ceb7b35a39145717e2d9d356fd382bd1f95d2a5a \ud83d\ude0c\n\nTree-SHA512: cc445ad33439d5918cacf80a6354eea8f3d33bb7719573ed5b970fad1a0dab410bcd70be44c862b8aba1b71263b82d79876688c553e339362653dfb3d8ec81e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97153a702600430bdaf6af4f6f4eb8593e32819f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97153a702600430bdaf6af4f6f4eb8593e32819f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97153a702600430bdaf6af4f6f4eb8593e32819f"
      },
      {
        "sha": "ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb7b35a39145717e2d9d356fd382bd1f95d2a5a"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 118,
      "deletions": 86
    },
    "files": [
      {
        "sha": "9afd76d62d4ce04bf4bedd803128abc195706e5f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -1349,7 +1349,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate(*Assert(node.mempool));\n+                chainman.InitializeChainstate(Assert(node.mempool.get()));\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n "
      },
      {
        "sha": "d9d236be1d5e66c24c12f5db66f9bcaf256b6c53",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -180,7 +180,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n+    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n     m_node.chainman->ActiveChainstate().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());"
      },
      {
        "sha": "2893b412fbabaf91883a168d037899253428d19a",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n         return outp;\n     };\n \n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "0bd378631b97f2ec6c7c5b0b55da38faf0bdcfd8",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -36,7 +36,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     //\n     const uint256 snapshot_blockhash = GetRandHash();\n     CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(\n-        mempool, snapshot_blockhash));\n+        &mempool, snapshot_blockhash));\n     chainstates.push_back(&c2);\n \n     BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool));\n+    CChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n+    CChainState& c2 = WITH_LOCK(cs_main, return manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);"
      },
      {
        "sha": "22aafcaa6c69f7b2ef4599b3f865a22450e4c39f",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -20,10 +20,9 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n {\n     CTxMemPool mempool;\n     BlockManager blockman{};\n-    CChainState chainstate{mempool, blockman};\n+    CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n-    CTxMemPool tx_pool{};\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;\n \n@@ -57,7 +56,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     // Without any coins in the cache, we shouldn't need to flush.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -72,7 +71,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         }\n \n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -93,34 +92,34 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        if (chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n \n@@ -136,31 +135,31 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         BOOST_CHECK(usage_percentage >= 0.9);\n         BOOST_CHECK(usage_percentage < 1);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 1 << 10),\n             CoinsCacheSizeState::LARGE);\n     }\n \n     // Using the default max_* values permits way more coins to be added.\n     for (int i{0}; i < 1000; ++i) {\n         add_coin(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool),\n+            chainstate.GetCoinsCacheSizeState(),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Flushing the view doesn't take us back to OK because cacheCoins has\n     // preallocated memory that doesn't get reclaimed even after flush.\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     view.SetBestBlock(InsecureRand256());\n     BOOST_CHECK(view.Flush());\n     print_view_mem_usage(view);\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n }\n "
      },
      {
        "sha": "26333d7026cc5ef2c16adc00282204eea30b63b6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 56,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -329,23 +329,14 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n-/* Make mempool consistent after a reorg, by re-adding or recursively erasing\n- * disconnected block transactions from the mempool, and also removing any\n- * other transactions from the mempool that are no longer valid given the new\n- * tip/height.\n- *\n- * Note: we assume that disconnectpool only contains transactions that are NOT\n- * confirmed in the current chain nor already in the mempool (otherwise,\n- * in-mempool descendants of such transactions would be removed).\n- *\n- * Passing fAddToMempool=false will skip trying to add the transactions back,\n- * and instead just erase from the mempool as needed.\n- */\n-\n-static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n+void CChainState::MaybeUpdateMempoolForReorg(\n+    DisconnectedBlockTransactions& disconnectpool,\n+    bool fAddToMempool)\n {\n+    if (!m_mempool) return;\n+\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(m_mempool->cs);\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -357,11 +348,13 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(active_chainstate, mempool, *it, true /* bypass_limits */).m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            AcceptToMemoryPool(\n+                *this, *m_mempool, *it, true /* bypass_limits */).m_result_type !=\n+                    MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n-            mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (mempool.exists((*it)->GetHash())) {\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n+        } else if (m_mempool->exists((*it)->GetHash())) {\n             vHashUpdate.push_back((*it)->GetHash());\n         }\n         ++it;\n@@ -372,12 +365,16 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n     // previously-confirmed transactions back to the mempool.\n     // UpdateTransactionsFromBlock finds descendants of any transactions in\n     // the disconnectpool that were added back and cleans up the mempool state.\n-    mempool.UpdateTransactionsFromBlock(vHashUpdate);\n+    m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(active_chainstate, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    m_mempool->removeForReorg(*this, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(\n+        *m_mempool,\n+        this->CoinsTip(),\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -1212,7 +1209,7 @@ void CoinsViews::InitCache()\n     m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n-CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n+CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n       m_params(::Params()),\n       m_blockman(blockman),\n@@ -2005,20 +2002,18 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n-CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n-        tx_pool,\n         m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n-    const CTxMemPool* tx_pool,\n     size_t max_coins_cache_size_bytes,\n     size_t max_mempool_size_bytes)\n {\n-    const int64_t nMempoolUsage = tx_pool ? tx_pool->DynamicMemoryUsage() : 0;\n+    const int64_t nMempoolUsage = m_mempool ? m_mempool->DynamicMemoryUsage() : 0;\n     int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n     int64_t nTotalSpace =\n         max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n@@ -2057,7 +2052,7 @@ bool CChainState::FlushStateToDisk(\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n \n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&m_mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState();\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             // make sure we don't prune above the blockfilterindexes bestblocks\n@@ -2208,12 +2203,12 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n     res += warn;\n }\n \n-/** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n-    EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+void CChainState::UpdateTip(const CBlockIndex* pindexNew)\n {\n     // New best block\n-    mempool.AddTransactionsUpdated(1);\n+    if (m_mempool) {\n+        m_mempool->AddTransactionsUpdated(1);\n+    }\n \n     {\n         LOCK(g_best_block_mutex);\n@@ -2222,11 +2217,11 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    if (!active_chainstate.IsInitialBlockDownload()) {\n+    if (!this->IsInitialBlockDownload()) {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n-            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            ThresholdState state = checker.GetStateFor(pindex, m_params.GetConsensus(), warningcache[bit]);\n             if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {\n                 const bilingual_str warning = strprintf(_(\"Unknown new rules activated (versionbit %i)\"), bit);\n                 if (state == ThresholdState::ACTIVE) {\n@@ -2241,14 +2236,14 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), pindexNew), active_chainstate.CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), active_chainstate.CoinsTip().GetCacheSize(),\n+      GuessVerificationProgress(m_params.TxData(), pindexNew), this->CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), this->CoinsTip().GetCacheSize(),\n       !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n }\n \n /** Disconnect m_chain's tip.\n   * After calling, the mempool will be in an inconsistent state, with\n   * transactions from disconnected blocks being added to disconnectpool.  You\n-  * should make the mempool consistent again by calling UpdateMempoolForReorg.\n+  * should make the mempool consistent again by calling MaybeUpdateMempoolForReorg.\n   * with cs_main held.\n   *\n   * If disconnectpool is nullptr, then no disconnected transactions are added to\n@@ -2258,7 +2253,7 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     CBlockIndex *pindexDelete = m_chain.Tip();\n     assert(pindexDelete);\n@@ -2284,22 +2279,22 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n         return false;\n     }\n \n-    if (disconnectpool) {\n+    if (disconnectpool && m_mempool) {\n         // Save transactions to re-add to mempool at end of reorg\n         for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n             disconnectpool->addTransaction(*it);\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n             auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            m_mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n+            m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n             disconnectpool->removeEntry(it);\n         }\n     }\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(m_mempool, pindexDelete->pprev, m_params, *this);\n+    UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2361,7 +2356,7 @@ class ConnectTrace {\n bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     assert(pindexNew->pprev == m_chain.Tip());\n     // Read block from disk.\n@@ -2405,11 +2400,13 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n-    m_mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n-    disconnectpool.removeForBlock(blockConnecting.vtx);\n+    if (m_mempool) {\n+        m_mempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n+        disconnectpool.removeForBlock(blockConnecting.vtx);\n+    }\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(m_mempool, pindexNew, m_params, *this);\n+    UpdateTip(pindexNew);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n@@ -2499,7 +2496,7 @@ void CChainState::PruneBlockIndexCandidates() {\n bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(m_mempool.cs);\n+    if (m_mempool) AssertLockHeld(m_mempool->cs);\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2511,7 +2508,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n         if (!DisconnectTip(state, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+            MaybeUpdateMempoolForReorg(disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2555,7 +2552,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n+                    MaybeUpdateMempoolForReorg(disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2572,9 +2569,9 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, CBlockIndex\n     if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, true);\n+        MaybeUpdateMempoolForReorg(disconnectpool, true);\n     }\n-    m_mempool.check(*this);\n+    if (m_mempool) m_mempool->check(*this);\n \n     CheckForkWarningConditions();\n \n@@ -2646,7 +2643,8 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n         {\n             LOCK(cs_main);\n-            LOCK(m_mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            LOCK(MempoolMutex());\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -2796,7 +2794,9 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        LOCK(m_mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n+        // Lock for as long as disconnectpool is in scope to make sure MaybeUpdateMempoolForReorg is\n+        // called after DisconnectTip without unlocking in between\n+        LOCK(MempoolMutex());\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -2810,7 +2810,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, CBlockIndex* pind\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        MaybeUpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n \n@@ -3821,10 +3821,11 @@ bool CChainState::LoadBlockIndexDB()\n \n void CChainState::LoadMempool(const ArgsManager& args)\n {\n+    if (!m_mempool) return;\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool, *this);\n+        ::LoadMempool(*m_mempool, *this);\n     }\n-    m_mempool.SetIsLoaded(!ShutdownRequested());\n+    m_mempool->SetIsLoaded(!ShutdownRequested());\n }\n \n bool CChainState::LoadChainTip()\n@@ -4688,7 +4689,8 @@ std::vector<CChainState*> ChainstateManager::GetAll()\n     return out;\n }\n \n-CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash)\n+CChainState& ChainstateManager::InitializeChainstate(\n+    CTxMemPool* mempool, const std::optional<uint256>& snapshot_blockhash)\n {\n     bool is_snapshot = snapshot_blockhash.has_value();\n     std::unique_ptr<CChainState>& to_modify =\n@@ -4767,7 +4769,7 @@ bool ChainstateManager::ActivateSnapshot(\n     }\n \n     auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(\n-            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+        /* mempool */ nullptr, m_blockman, base_blockhash));\n \n     {\n         LOCK(::cs_main);\n@@ -4883,7 +4885,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n             }\n \n             const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n-                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+                return snapshot_chainstate.GetCoinsCacheSizeState());\n \n             if (snapshot_cache_state >=\n                     CoinsCacheSizeState::CRITICAL) {"
      },
      {
        "sha": "9a2be3ad9726023bb787d08e8023bfa753868cc6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0224bc96287b04c9ac4d2ae93621c72be5c2baf/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "patch": "@@ -587,8 +587,9 @@ class CChainState\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! mempool that is kept in sync with the chain\n-    CTxMemPool& m_mempool;\n+    //! Optional mempool that is kept in sync with the chain.\n+    //! Only the active chainstate has a mempool.\n+    CTxMemPool* m_mempool;\n \n     const CChainParams& m_params;\n \n@@ -600,7 +601,10 @@ class CChainState\n     //! CChainState instances.\n     BlockManager& m_blockman;\n \n-    explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n+    explicit CChainState(\n+        CTxMemPool* mempool,\n+        BlockManager& blockman,\n+        std::optional<uint256> from_snapshot_blockhash = std::nullopt);\n \n     /**\n      * Initialize the CoinsViews UTXO set database management data structures. The in-memory\n@@ -729,7 +733,7 @@ class CChainState\n                       CCoinsViewCache& view, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool DisconnectTip(BlockValidationState& state, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     // Manual block validity manipulation:\n     /** Mark a block as precious and reorganize.\n@@ -773,19 +777,17 @@ class CChainState\n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n     //! @return the state of the size of the coins cache.\n-    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    CoinsCacheSizeState GetCoinsCacheSizeState() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     CoinsCacheSizeState GetCoinsCacheSizeState(\n-        const CTxMemPool* tx_pool,\n         size_t max_coins_cache_size_bytes,\n         size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ActivateBestChainStep(BlockValidationState& state, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+    bool ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n \n     void InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -798,6 +800,33 @@ class CChainState\n \n     bool LoadBlockIndexDB() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Indirection necessary to make lock annotations work with an optional mempool.\n+    RecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs)\n+    {\n+        return m_mempool ? &m_mempool->cs : nullptr;\n+    }\n+\n+    /**\n+     * Make mempool consistent after a reorg, by re-adding or recursively erasing\n+     * disconnected block transactions from the mempool, and also removing any\n+     * other transactions from the mempool that are no longer valid given the new\n+     * tip/height.\n+     *\n+     * Note: we assume that disconnectpool only contains transactions that are NOT\n+     * confirmed in the current chain nor already in the mempool (otherwise,\n+     * in-mempool descendants of such transactions would be removed).\n+     *\n+     * Passing fAddToMempool=false will skip trying to add the transactions back,\n+     * and instead just erase from the mempool as needed.\n+     */\n+    void MaybeUpdateMempoolForReorg(\n+        DisconnectedBlockTransactions& disconnectpool,\n+        bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool->cs);\n+\n+    /** Check warning conditions and do some notifications on new chain tip set. */\n+    void UpdateTip(const CBlockIndex* pindexNew)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     friend ChainstateManager;\n };\n \n@@ -907,7 +936,9 @@ class ChainstateManager\n     //                                  constructor\n     //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n     //!                                 is based on a snapshot.\n-    CChainState& InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n+    CChainState& InitializeChainstate(\n+        CTxMemPool* mempool,\n+        const std::optional<uint256>& snapshot_blockhash = std::nullopt)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Get all chainstates currently being used."
      }
    ]
  },
  {
    "sha": "21998bc028d6d72229ae826d2dd9d78981367952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTk5OGJjMDI4ZDZkNzIyMjlhZTgyNmQyZGQ5ZDc4OTgxMzY3OTUy",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T12:30:10Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T12:49:45Z"
      },
      "message": "Merge bitcoin/bitcoin#22284: p2p, refactor: performance improvements to ProtectEvictionCandidatesByRatio()\n\nb1d905c225e87a4a289c0cd3593c6c21cea3fba7 p2p: earlier continuation when no remaining eviction candidates (Vasil Dimov)\nc9e8d8f9b168dec2bc7b845da38449e96708cf8e p2p: process more candidates per protection iteration (Jon Atack)\n02e411ec456af80d1da76085a814c68bb3aca6de p2p: iterate eviction protection only on networks having candidates (Jon Atack)\n5adb06457403f8c1d874e9c6748ecbb78ef8fa2b bench: add peer eviction protection benchmarks (Jon Atack)\n566357f8f7471f74729297868917aa32f6d3c390 refactor: move GetRandomNodeEvictionCandidates() to test utilities (Jon Atack)\n\nPull request description:\n\n  This follow-up to #21261 improves `ProtectEvictionCandidatesByRatio()` for better performance.\n\n  Benchmarks are added; the performance improvement is between 2x and 5x for the benchmarked cases (CPU 2.50GHz, Turbo off, performance mode, Debian Clang 11 non-debug build).\n\n  ```\n  $ ./src/bench/bench_bitcoin -filter=\"EvictionProtection*.*\"\n  ```\n\n  The refactored code is well-covered by existing unit tests and also a fuzzer.\n\n  - `$ ./src/test/test_bitcoin -t net_peer_eviction_tests`\n  - `$ FUZZ=node_eviction ./src/test/fuzz/fuzz ../qa-assets/fuzz_seed_corpus/node_eviction`\n\nACKs for top commit:\n  klementtan:\n    Tested and code review ACK b1d905c2.\n  vasild:\n    ACK b1d905c225e87a4a289c0cd3593c6c21cea3fba7\n  jarolrod:\n    ACK b1d905c225e87a4a289c0cd3593c6c21cea3fba7\n\nTree-SHA512: a3a6607b9ea2fec138da9780c03f63e177b6712091c5a3ddc3804b896a7585216446310280791f5e20cc023d02d2f03a4139237e12b5c1d7f2a1fa1011610e96",
      "tree": {
        "sha": "ec93da467d922e2db5425e5eb84009a4ed64d9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec93da467d922e2db5425e5eb84009a4ed64d9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21998bc028d6d72229ae826d2dd9d78981367952",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDwLukACgkQHkrtYphs\n0l1+QAf6AtR4234cg4F/UrgyMQL54z3G7/wmDxsFMFAfpC0qj+vXVVgoZGPNMF8M\nDGfIMjnnq2iJK5Bj+hTKKldAQgxAgoCuiDXlZudzM+OWPFUt3VOpVXtxXAFdOQfe\nUM2skZh6MBwjQCXVrSLV7pNRsCCInXE7K6WTbG4mVhIDfHZLnCOE2nPHeH0J0jDn\nLALNWBZQ59JmDex0FuN7ZwzAK6auPFwYmVS7WqtiM4U/GIaWkWruM9Y0H6LRVONI\nOJYjLTYlLugfQHLN4wN2sbOLI93fuGlu3UtYVeFCtjc/6t/eT2MhMHqh48PT9Wyn\neBG+tMLJFFBvWQ9Eez/bnHtjnSjOiw==\n=iX6a\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHMA3zbOvnBKCVlG2HeV5vjA0QIa6Z0tJn61JFQM+xBLCP/wEHeq/BSwjHZD\nC20TCf1sKEwI8QRg8C7s8Aj1KSb77Rm3sgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEKvzpKDr+KbHiCZqA2dA\n7xYI8QRg8C7s8AhUC0I5469vYwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEMJYW7mpsg7NsAdsBISJrNUI8QRg8C7t8Agv0EGE\n6p+tOQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDf5gAz926qAO44OK9Zn7xuCPEEYPAu7PAIfa8g6Yn5GWQA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ec93da467d922e2db5425e5eb84009a4ed64d9dc\nparent c0224bc96287b04c9ac4d2ae93621c72be5c2baf\nparent b1d905c225e87a4a289c0cd3593c6c21cea3fba7\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626352210 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626353385 +0200\n\nMerge bitcoin/bitcoin#22284: p2p, refactor: performance improvements to ProtectEvictionCandidatesByRatio()\n\nb1d905c225e87a4a289c0cd3593c6c21cea3fba7 p2p: earlier continuation when no remaining eviction candidates (Vasil Dimov)\nc9e8d8f9b168dec2bc7b845da38449e96708cf8e p2p: process more candidates per protection iteration (Jon Atack)\n02e411ec456af80d1da76085a814c68bb3aca6de p2p: iterate eviction protection only on networks having candidates (Jon Atack)\n5adb06457403f8c1d874e9c6748ecbb78ef8fa2b bench: add peer eviction protection benchmarks (Jon Atack)\n566357f8f7471f74729297868917aa32f6d3c390 refactor: move GetRandomNodeEvictionCandidates() to test utilities (Jon Atack)\n\nPull request description:\n\n  This follow-up to #21261 improves `ProtectEvictionCandidatesByRatio()` for better performance.\n\n  Benchmarks are added; the performance improvement is between 2x and 5x for the benchmarked cases (CPU 2.50GHz, Turbo off, performance mode, Debian Clang 11 non-debug build).\n\n  ```\n  $ ./src/bench/bench_bitcoin -filter=\"EvictionProtection*.*\"\n  ```\n\n  The refactored code is well-covered by existing unit tests and also a fuzzer.\n\n  - `$ ./src/test/test_bitcoin -t net_peer_eviction_tests`\n  - `$ FUZZ=node_eviction ./src/test/fuzz/fuzz ../qa-assets/fuzz_seed_corpus/node_eviction`\n\nACKs for top commit:\n  klementtan:\n    Tested and code review ACK b1d905c2.\n  vasild:\n    ACK b1d905c225e87a4a289c0cd3593c6c21cea3fba7\n  jarolrod:\n    ACK b1d905c225e87a4a289c0cd3593c6c21cea3fba7\n\nTree-SHA512: a3a6607b9ea2fec138da9780c03f63e177b6712091c5a3ddc3804b896a7585216446310280791f5e20cc023d02d2f03a4139237e12b5c1d7f2a1fa1011610e96\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21998bc028d6d72229ae826d2dd9d78981367952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21998bc028d6d72229ae826d2dd9d78981367952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21998bc028d6d72229ae826d2dd9d78981367952/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0224bc96287b04c9ac4d2ae93621c72be5c2baf"
      },
      {
        "sha": "b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1d905c225e87a4a289c0cd3593c6c21cea3fba7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1d905c225e87a4a289c0cd3593c6c21cea3fba7"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 194,
      "deletions": 27
    },
    "files": [
      {
        "sha": "2a8e4a0aaca0b6f83487290e3b47f1b1f138142f",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/mempool_stress.cpp \\\n   bench/nanobench.h \\\n   bench/nanobench.cpp \\\n+  bench/peer_eviction.cpp \\\n   bench/rpc_blockchain.cpp \\\n   bench/rpc_mempool.cpp \\\n   bench/util_time.cpp \\"
      },
      {
        "sha": "0469f0cb4c0db537200041e06c497c5cfeb7f461",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <net.h>\n+#include <netaddress.h>\n+#include <random.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <vector>\n+\n+static void EvictionProtectionCommon(\n+    benchmark::Bench& bench,\n+    int num_candidates,\n+    std::function<void(NodeEvictionCandidate&)> candidate_setup_fn)\n+{\n+    using Candidates = std::vector<NodeEvictionCandidate>;\n+    FastRandomContext random_context{true};\n+    bench.warmup(100).epochIterations(1100);\n+\n+    Candidates candidates{GetRandomNodeEvictionCandidates(num_candidates, random_context)};\n+    for (auto& c : candidates) {\n+        candidate_setup_fn(c);\n+    }\n+\n+    std::vector<Candidates> copies{bench.epochs() * bench.epochIterations(), candidates};\n+    size_t i{0};\n+    bench.run([&] {\n+        ProtectEvictionCandidatesByRatio(copies.at(i));\n+        ++i;\n+    });\n+}\n+\n+/* Benchmarks */\n+\n+static void EvictionProtection0Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_network = NET_IPV4;\n+        });\n+}\n+\n+static void EvictionProtection1Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 130 && c.id < 240) { // 110 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection2Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 90 && c.id < 160) { // 70 Tor\n+                c.m_network = NET_ONION;\n+            } else if (c.id >= 170 && c.id < 250) { // 80 I2P\n+                c.m_network = NET_I2P;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks050Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        50 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id == 28 || c.id == 47); //  2 localhost\n+            if (c.id >= 30 && c.id < 47) {             // 17 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 24 && c.id < 28) { //  4 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks100Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        100 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 55 && c.id < 60); //  5 localhost\n+            if (c.id >= 70 && c.id < 80) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 80 && c.id < 96) { // 16 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 140 && c.id < 160); // 20 localhost\n+            if (c.id >= 170 && c.id < 180) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 190 && c.id < 240) { // 50 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+// Candidate numbers used for the benchmarks:\n+// -  50 candidates simulates a possible use of -maxconnections\n+// - 100 candidates approximates an average node with default settings\n+// - 250 candidates is the number of peers reported by operators of busy nodes\n+\n+// No disadvantaged networks, with 250 eviction candidates.\n+BENCHMARK(EvictionProtection0Networks250Candidates);\n+\n+// 1 disadvantaged network (Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection1Networks250Candidates);\n+\n+// 2 disadvantaged networks (I2P, Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection2Networks250Candidates);\n+\n+// 3 disadvantaged networks (I2P/localhost/Tor) with 50/100/250 eviction candidates.\n+BENCHMARK(EvictionProtection3Networks050Candidates);\n+BENCHMARK(EvictionProtection3Networks100Candidates);\n+BENCHMARK(EvictionProtection3Networks250Candidates);"
      },
      {
        "sha": "70ba875c4b58669cb16f1432fe7e23d2fb1f5a64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -937,14 +937,17 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n     size_t num_protected{0};\n \n     while (num_protected < max_protect_by_network) {\n+        // Count the number of disadvantaged networks from which we have peers to protect.\n+        auto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+        if (num_networks == 0) {\n+            break;\n+        }\n         const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\n-        const size_t protect_per_network{\n-            std::max(disadvantaged_to_protect / networks.size(), static_cast<size_t>(1))};\n-\n+        const size_t protect_per_network{std::max(disadvantaged_to_protect / num_networks, static_cast<size_t>(1))};\n         // Early exit flag if there are no remaining candidates by disadvantaged network.\n         bool protected_at_least_one{false};\n \n-        for (const Net& n : networks) {\n+        for (Net& n : networks) {\n             if (n.count == 0) continue;\n             const size_t before = eviction_candidates.size();\n             EraseLastKElements(eviction_candidates, CompareNodeNetworkTime(n.is_local, n.id),\n@@ -954,10 +957,12 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& evicti\n             const size_t after = eviction_candidates.size();\n             if (before > after) {\n                 protected_at_least_one = true;\n-                num_protected += before - after;\n+                const size_t delta{before - after};\n+                num_protected += delta;\n                 if (num_protected >= max_protect_by_network) {\n                     break;\n                 }\n+                n.count -= delta;\n             }\n         }\n         if (!protected_at_least_one) {"
      },
      {
        "sha": "5eb280b498945bf5d040d484cd1d276fb548a29e",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -17,28 +17,6 @@\n \n BOOST_FIXTURE_TEST_SUITE(net_peer_eviction_tests, BasicTestingSetup)\n \n-std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n-{\n-    std::vector<NodeEvictionCandidate> candidates;\n-    for (int id = 0; id < n_candidates; ++id) {\n-        candidates.push_back({\n-            /* id */ id,\n-            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n-            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* fRelevantServices */ random_context.randbool(),\n-            /* fRelayTxes */ random_context.randbool(),\n-            /* fBloomFilter */ random_context.randbool(),\n-            /* nKeyedNetGroup */ random_context.randrange(100),\n-            /* prefer_evict */ random_context.randbool(),\n-            /* m_is_local */ random_context.randbool(),\n-            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n-        });\n-    }\n-    return candidates;\n-}\n-\n // Create `num_peers` random nodes, apply setup function `candidate_setup_fn`,\n // call ProtectEvictionCandidatesByRatio() to apply protection logic, and then\n // return true if all of `protected_peer_ids` and none of `unprotected_peer_ids`"
      },
      {
        "sha": "28d79670786bbbba3ff926459a7eb5704b27cfc0",
        "filename": "src/test/util/net.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -6,6 +6,9 @@\n \n #include <chainparams.h>\n #include <net.h>\n+#include <span.h>\n+\n+#include <vector>\n \n void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n {\n@@ -37,3 +40,25 @@ bool ConnmanTestMsg::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) con\n     NodeReceiveMsgBytes(node, ser_msg.data, complete);\n     return complete;\n }\n+\n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\n+        });\n+    }\n+    return candidates;\n+}"
      },
      {
        "sha": "939ec322ede73d21887e91dbd420afaf356b4b11",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21998bc028d6d72229ae826d2dd9d78981367952/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21998bc028d6d72229ae826d2dd9d78981367952/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=21998bc028d6d72229ae826d2dd9d78981367952",
        "patch": "@@ -141,4 +141,6 @@ class StaticContentsSock : public Sock\n     mutable size_t m_consumed;\n };\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context);\n+\n #endif // BITCOIN_TEST_UTIL_NET_H"
      }
    ]
  },
  {
    "sha": "d86e6625e8571ecff7a13bf2826436859c7ae698",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODZlNjYyNWU4NTcxZWNmZjdhMTNiZjI4MjY0MzY4NTljN2FlNjk4",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T12:50:32Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T12:57:21Z"
      },
      "message": "Merge bitcoin/bitcoin#22369: doc: Add steps for Transifex to release process\n\na16378e501199144b5aecda57d8bfbc014546764 doc: Remove unnecessary steps from translations update process (Wladimir J. van der Laan)\n258492982386dac174461f641965c8d78fa6f1ce doc: Add steps for transifex to release process (Wladimir J. van der Laan)\n\nPull request description:\n\n  Document how to update settings on and for the transifex website before and after branch-off of a new release.\n\n  (This is #21440, updated with the review feedback.)\n\nACKs for top commit:\n  laanwj:\n    ACK a16378e501199144b5aecda57d8bfbc014546764\n  hebasto:\n    ACK a16378e501199144b5aecda57d8bfbc014546764\n\nTree-SHA512: 9669cc3bc7ba056f913ee77c2ef9d9ee2313da947fc07f8cd955807c34c5d39e3af73587adfe734274ab2412a7dfb1e2dfe7ee4904ca28cfef9bf8061d26a573",
      "tree": {
        "sha": "91b4c5368c225f2f714307d231470a4a5f96cb0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91b4c5368c225f2f714307d231470a4a5f96cb0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d86e6625e8571ecff7a13bf2826436859c7ae698",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDwMLEACgkQHkrtYphs\n0l3RYwf+Ifvam5IMQzO5q6JpQTeK3tI7nIZyLOEGlsikxgKDnlohdJEwILpkq+y/\nFu3iCMncSi49mW3VAvjkVyAlHV92KS0WhTflQm1cKuOpfLoNh8P9oAPeuNW3sTew\n9Iu74rp1hmqjLpzfB7iplGn7KTg7ymIebMnWT8Nd4hIEXyRyY98TaZYE/mTZgRyb\nP/UV3tKNesSpzzZNI90VY9ud0XEG+b2jC2OLPMyRHzGy/0saVCiHdnzU6uSYqZ84\nGYU13iJ9q8K9SL68aDdrrQqekNTjxzdGHsUMXhDqFAasT4zQgFBbV66HNK1dOS6R\nstTnLPJSrJ5qbnYx0NAl9o9Zd5efGQ==\n=T2nh\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICKSNveLOW1Jz8K46AbTwt1z6Q4yfSz4oTrKUFZRmA0JCP/wEEgNRj7+WblH\nFqvZaDcav/AI8QRg8DC08AgFhdzhKgnvLQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQSmKyWsGzTaXnknbv\nMnw5VgjxBGDwMLTwCKmyY0/KEOEGAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQYcGxY/DvqkDHnBYjFOhDgwjxBGDw\nMLTwCCfwZoqxsewGAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BD1IH5ORAVqfM1gqr3wTzuhCPEEYPAwtfAIo15p\nHe0QZm0Ag9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 91b4c5368c225f2f714307d231470a4a5f96cb0b\nparent 21998bc028d6d72229ae826d2dd9d78981367952\nparent a16378e501199144b5aecda57d8bfbc014546764\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626353432 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626353841 +0200\n\nMerge bitcoin/bitcoin#22369: doc: Add steps for Transifex to release process\n\na16378e501199144b5aecda57d8bfbc014546764 doc: Remove unnecessary steps from translations update process (Wladimir J. van der Laan)\n258492982386dac174461f641965c8d78fa6f1ce doc: Add steps for transifex to release process (Wladimir J. van der Laan)\n\nPull request description:\n\n  Document how to update settings on and for the transifex website before and after branch-off of a new release.\n\n  (This is #21440, updated with the review feedback.)\n\nACKs for top commit:\n  laanwj:\n    ACK a16378e501199144b5aecda57d8bfbc014546764\n  hebasto:\n    ACK a16378e501199144b5aecda57d8bfbc014546764\n\nTree-SHA512: 9669cc3bc7ba056f913ee77c2ef9d9ee2313da947fc07f8cd955807c34c5d39e3af73587adfe734274ab2412a7dfb1e2dfe7ee4904ca28cfef9bf8061d26a573\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86e6625e8571ecff7a13bf2826436859c7ae698",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d86e6625e8571ecff7a13bf2826436859c7ae698",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86e6625e8571ecff7a13bf2826436859c7ae698/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21998bc028d6d72229ae826d2dd9d78981367952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21998bc028d6d72229ae826d2dd9d78981367952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21998bc028d6d72229ae826d2dd9d78981367952"
      },
      {
        "sha": "a16378e501199144b5aecda57d8bfbc014546764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16378e501199144b5aecda57d8bfbc014546764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a16378e501199144b5aecda57d8bfbc014546764"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "75a574ee318fdeac4c1cb76b35d8d88b069ecc9b",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86e6625e8571ecff7a13bf2826436859c7ae698/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86e6625e8571ecff7a13bf2826436859c7ae698/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=d86e6625e8571ecff7a13bf2826436859c7ae698",
        "patch": "@@ -37,6 +37,12 @@ Release Process\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n - Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n+- Translations on Transifex\n+    - Create [a new resource](https://www.transifex.com/bitcoin/bitcoin/content/) named after the major version with the slug `[bitcoin.qt-translation-<RRR>x]`, where `RRR` is the major branch number padded with zeros. Use `src/qt/locale/bitcoin_en.xlf` to create it.\n+    - In the project workflow settings, ensure that [Translation Memory Fill-up](https://docs.transifex.com/translation-memory/enabling-autofill) is enabled and that [Translation Memory Context Matching](https://docs.transifex.com/translation-memory/translation-memory-with-context) is disabled.\n+    - Update the Transifex slug in [`.tx/config`](/.tx/config) to the slug of the resource created in the first step. This identifies which resource the translations will be synchronized from.\n+    - Make an announcement that translators can start translating for the new version. You can use one of the [previous announcements](https://www.transifex.com/bitcoin/bitcoin/announcements/) as a template.\n+    - Change the auto-update URL for the resource to `master`, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/qt/locale/bitcoin_en.xlf`. (Do this only after the previous steps, to prevent an auto-update from interfering.)\n \n #### After branch-off (on master)\n \n@@ -46,6 +52,8 @@ Release Process\n \n - Update the versions.\n - Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n+- Translations on Transifex\n+    - Change the auto-update URL for the new major version's resource away from `master` and to the branch, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/<branch>/src/qt/locale/bitcoin_en.xlf`. Do not forget this or it will keep tracking the translations on master instead, drifting away from the specific major release.\n \n #### Before final release\n "
      },
      {
        "sha": "97a8fbfff21970a7c26c5ab29d1b0f597d221251",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86e6625e8571ecff7a13bf2826436859c7ae698/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86e6625e8571ecff7a13bf2826436859c7ae698/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=d86e6625e8571ecff7a13bf2826436859c7ae698",
        "patch": "@@ -63,17 +63,12 @@ username = USERNAME\n The Transifex Bitcoin project config file is included as part of the repo. It can be found at `.tx/config`, however you shouldn\u2019t need to change anything.\n \n ### Synchronising translations\n-To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools).\n \n-1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n-2. `git add` new translations from `src/qt/locale/`\n-3. Update `src/qt/bitcoin_locale.qrc` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools). To use it and commit the result, simply do:\n+\n ```\n-4. Update `src/Makefile.qt_locale.include` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n+python3 ../bitcoin-maintainer-tools/update-translations.py\n+git commit -a\n ```\n \n **Do not directly download translations** one by one from the Transifex website, as we do a few post-processing steps before committing the translations."
      }
    ]
  },
  {
    "sha": "853ac47705c8abd9b8bda2da59eb043d9591491c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTNhYzQ3NzA1YzhhYmQ5YjhiZGEyZGE1OWViMDQzZDk1OTE0OTFj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T14:41:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T14:41:55Z"
      },
      "message": "Merge bitcoin/bitcoin#22393: doc: added info to bitcoin.conf doc\n\nfa84caebc7b647d9483262b6634bfe6b02b90a69 doc: added info to bitcoin.conf doc (Brian Liotti)\n\nPull request description:\n\n  Should probably be explicitly stated to not make modifications to the conf file while daemon is running. ref #11586\n\n  For example, if rpc credentials are modified while bitcoind is running, `bitcoin-cli stop` is unable to stop bitcoind until the original credentials are restored in `bitcoin.conf`\n\nACKs for top commit:\n  rajarshimaitra:\n    ACK https://github.com/bitcoin/bitcoin/pull/22393/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69\n  Zero-1729:\n    ACK fa84caebc7b647d9483262b6634bfe6b02b90a69\n  theStack:\n    ACK fa84caebc7b647d9483262b6634bfe6b02b90a69 \ud83d\uddc4\ufe0f\n\nTree-SHA512: f6ddffc25563c0b01e661b6abe43a7909938ad8eca38d6d0e2d4a2ce9fb850e51b54d950ef3118b74b6e340c64fe3f37205861720a2de2933db29782234869bb",
      "tree": {
        "sha": "907a29bbc7e5f62da30972f0647e8a8c663d0c3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/907a29bbc7e5f62da30972f0647e8a8c663d0c3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/853ac47705c8abd9b8bda2da59eb043d9591491c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhOgQwAhJtles8vfOqsWfLNIg56X9Hfr3dtS5eVydB/Bm2NTeIiGYeYOzmO5tUl\nvU0AX9N4LsYYBeseYPmfiddg9lVHBiMmhoT4Ef13oVWBadi0xEkro67+zw55U1fV\nS8u7idMOxflE6ZEUlZlhmOb/s886dAtFgZLtBPnb5nNzUFJCjh8qWbD/dbivFfSg\nRkAPRR/858TeBw3lTlnxwwrXeLzesmq92l0SRrc3uus30aCZQ2M0WufrERsOZGbC\nI+GAzzneqPTydj9rkUbW26uT9WSP5Lu0RGg7GMvJqjcLoeqBB0YYu8GnrOo4cT+2\nO6aAO5/klGxRhw44PIEbDw9xAfjfYANS8pzZqgUVWvHoejOqkUshN7CQCDrOSEUs\nr3uNhWEHN3EhUl3JaXgqhP9uUx4zl5dvrUtHqgprFN/Q/tSDqxTP3RR1gIn/Mzxk\n6mI9kU2u673WZtDYDKq0FYlWpUz83alALHotAuzwP5eQIMGCHIjX50WGfSWmOKpH\nZxtiu6+6\n=6zft\n-----END PGP SIGNATURE-----",
        "payload": "tree 907a29bbc7e5f62da30972f0647e8a8c663d0c3d\nparent d86e6625e8571ecff7a13bf2826436859c7ae698\nparent fa84caebc7b647d9483262b6634bfe6b02b90a69\nauthor MarcoFalke <falke.marco@gmail.com> 1626360111 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626360115 +0200\n\nMerge bitcoin/bitcoin#22393: doc: added info to bitcoin.conf doc\n\nfa84caebc7b647d9483262b6634bfe6b02b90a69 doc: added info to bitcoin.conf doc (Brian Liotti)\n\nPull request description:\n\n  Should probably be explicitly stated to not make modifications to the conf file while daemon is running. ref #11586\n\n  For example, if rpc credentials are modified while bitcoind is running, `bitcoin-cli stop` is unable to stop bitcoind until the original credentials are restored in `bitcoin.conf`\n\nACKs for top commit:\n  rajarshimaitra:\n    ACK https://github.com/bitcoin/bitcoin/pull/22393/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69\n  Zero-1729:\n    ACK fa84caebc7b647d9483262b6634bfe6b02b90a69\n  theStack:\n    ACK fa84caebc7b647d9483262b6634bfe6b02b90a69 \ud83d\uddc4\ufe0f\n\nTree-SHA512: f6ddffc25563c0b01e661b6abe43a7909938ad8eca38d6d0e2d4a2ce9fb850e51b54d950ef3118b74b6e340c64fe3f37205861720a2de2933db29782234869bb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853ac47705c8abd9b8bda2da59eb043d9591491c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/853ac47705c8abd9b8bda2da59eb043d9591491c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853ac47705c8abd9b8bda2da59eb043d9591491c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d86e6625e8571ecff7a13bf2826436859c7ae698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86e6625e8571ecff7a13bf2826436859c7ae698",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d86e6625e8571ecff7a13bf2826436859c7ae698"
      },
      {
        "sha": "fa84caebc7b647d9483262b6634bfe6b02b90a69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84caebc7b647d9483262b6634bfe6b02b90a69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa84caebc7b647d9483262b6634bfe6b02b90a69"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c9035c45b6fc258bd12d4c1b11a925b00f5942a",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/853ac47705c8abd9b8bda2da59eb043d9591491c/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/853ac47705c8abd9b8bda2da59eb043d9591491c/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=853ac47705c8abd9b8bda2da59eb043d9591491c",
        "patch": "@@ -4,6 +4,8 @@ The configuration file is used by `bitcoind`, `bitcoin-qt` and `bitcoin-cli`.\n \n All command-line options (except for `-?`, `-help`, `-version` and `-conf`) may be specified in a configuration file, and all configuration file options (except for `includeconf`) may also be specified on the command line. Command-line options override values set in the configuration file and configuration file options override values set in the GUI.\n \n+Changes to the configuration file while `bitcoind` or `bitcoin-qt` is running only take effect after restarting.\n+\n ## Configuration File Format\n \n The configuration file is a plain text file and consists of `option=value` entries, one per line. Leading and trailing whitespaces are removed."
      }
    ]
  },
  {
    "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODhmYTFhNTU1MTk1YWY2NTQzY2RjODAyZThlMWMyZTE2NjhkZDM4",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T14:53:30Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-07-15T14:53:34Z"
      },
      "message": "Merge bitcoin/bitcoin#22211: net: relay I2P addresses even if not reachable (by us)\n\n7593b06bd1262f438bf34769ecc00e9c22328e56 test: ensure I2P addresses are relayed (Vasil Dimov)\ne7468139a1dddd4946bc70697ec38816b3fa8f9b test: make CAddress in functional tests comparable (Vasil Dimov)\n33e211d2a442e4555ff3401f92af4ee2f7552568 test: implement ser/unser of I2P addresses in functional tests (Vasil Dimov)\n86742811ce3662789ac85334008090a3b54babe3 test: use NODE_* constants instead of magic numbers (Vasil Dimov)\nba45f0270815d54ae3290efc16324c2ff1984565 net: relay I2P addresses even if not reachable (by us) (Vasil Dimov)\n\nPull request description:\n\n  Nodes that can reach the I2P network (have set `-i2psam=`) will relay\n  I2P addresses even without this patch. However, nodes that can't reach\n  the I2P network will not. This was done as a precaution in\n  https://github.com/bitcoin/bitcoin/pull/20119 before anybody could\n  connect to I2P because then, for sure, it would have been useless.\n\n  Now, however, we have I2P support and a bunch of I2P nodes, so get all\n  nodes on the network to relay I2P addresses to help with propagation,\n  similarly to what we do with Tor addresses.\n\nACKs for top commit:\n  jonatack:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56\n  naumenkogs:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56.\n  laanwj:\n    Code review ACK 7593b06bd1262f438bf34769ecc00e9c22328e56\n  kristapsk:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56. Code looks correct, tested that functional test suite passes and also that `test/functional/p2p_addrv2_replay.py` fails if I undo changes in `IsRelayable()`.\n\nTree-SHA512: c9feec4a9546cc06bc2fec6d74f999a3c0abd3d15b7c421c21fcf2d610eb94611489e33d61bdcd5a4f42041a6d84aa892f7ae293b0d4f755309a8560b113b735",
      "tree": {
        "sha": "c49952c0f17979c2b4bf3a7787e304b9ea6ea07d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c49952c0f17979c2b4bf3a7787e304b9ea6ea07d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmDwS+4ACgkQHkrtYphs\n0l0SQAgArUAeAHJtUJpT2camdWieo4FgJl2nqOhhlNCVL4mIpu6v8VejD5VIPjU1\nSKUDPiFD+ynjQlRwlEHJfjmdbS41VoytJr05bULd8O+w6kHpFxFkzllcL8vdgD+s\nRurNnZtWLioqzZWgRa7K8mmL+rIA119Si7fNhXJHQ/ouXgy+NiOFuFBTPM19hxnd\nRkXc6IK7wmMnzgfUUZ4kSAC/DtHKehH8TZqDvHXi26QIdf7YmfCi5pQGg4CugzfJ\nrZvrwte65oy8gsj/oylIrfSkYjOkuJLHJCdWVuFymL5kfuE9odmHLVnc/KOnFwU1\nRcA+gz7B9C2GYjnCbAbQ1L/dTlF01g==\n=UIY9\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICPxyuia4chztZeFA1NDV7imHhjh0vLDTHwfuWHX5JXTCP/wEGc/Py8umT9Y\n05qrgOmS5mwI8QRg8Evy8Ahe/wPUO4uRSQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIM92HchRewUVvp3gem22jMI8QRg8Evx\n8AhvD3QZi6UJhQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wELDfhceSXWUXUcSyaDbA/lAI8QRg8Evy8AhjPnycYAN1\nVgCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQzdOR4Ziq2hBLcLDWJg3bbQjxBGDwS/LwCCz/2s1atewhAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c49952c0f17979c2b4bf3a7787e304b9ea6ea07d\nparent 853ac47705c8abd9b8bda2da59eb043d9591491c\nparent 7593b06bd1262f438bf34769ecc00e9c22328e56\nauthor W. J. van der Laan <laanwj@protonmail.com> 1626360810 +0200\ncommitter W. J. van der Laan <laanwj@protonmail.com> 1626360814 +0200\n\nMerge bitcoin/bitcoin#22211: net: relay I2P addresses even if not reachable (by us)\n\n7593b06bd1262f438bf34769ecc00e9c22328e56 test: ensure I2P addresses are relayed (Vasil Dimov)\ne7468139a1dddd4946bc70697ec38816b3fa8f9b test: make CAddress in functional tests comparable (Vasil Dimov)\n33e211d2a442e4555ff3401f92af4ee2f7552568 test: implement ser/unser of I2P addresses in functional tests (Vasil Dimov)\n86742811ce3662789ac85334008090a3b54babe3 test: use NODE_* constants instead of magic numbers (Vasil Dimov)\nba45f0270815d54ae3290efc16324c2ff1984565 net: relay I2P addresses even if not reachable (by us) (Vasil Dimov)\n\nPull request description:\n\n  Nodes that can reach the I2P network (have set `-i2psam=`) will relay\n  I2P addresses even without this patch. However, nodes that can't reach\n  the I2P network will not. This was done as a precaution in\n  https://github.com/bitcoin/bitcoin/pull/20119 before anybody could\n  connect to I2P because then, for sure, it would have been useless.\n\n  Now, however, we have I2P support and a bunch of I2P nodes, so get all\n  nodes on the network to relay I2P addresses to help with propagation,\n  similarly to what we do with Tor addresses.\n\nACKs for top commit:\n  jonatack:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56\n  naumenkogs:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56.\n  laanwj:\n    Code review ACK 7593b06bd1262f438bf34769ecc00e9c22328e56\n  kristapsk:\n    ACK 7593b06bd1262f438bf34769ecc00e9c22328e56. Code looks correct, tested that functional test suite passes and also that `test/functional/p2p_addrv2_replay.py` fails if I undo changes in `IsRelayable()`.\n\nTree-SHA512: c9feec4a9546cc06bc2fec6d74f999a3c0abd3d15b7c421c21fcf2d610eb94611489e33d61bdcd5a4f42041a6d84aa892f7ae293b0d4f755309a8560b113b735\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "853ac47705c8abd9b8bda2da59eb043d9591491c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853ac47705c8abd9b8bda2da59eb043d9591491c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/853ac47705c8abd9b8bda2da59eb043d9591491c"
      },
      {
        "sha": "7593b06bd1262f438bf34769ecc00e9c22328e56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7593b06bd1262f438bf34769ecc00e9c22328e56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7593b06bd1262f438bf34769ecc00e9c22328e56"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 41,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5e1d9d2a6f32726383ae58ddf3cd956ebad4d720",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88fa1a555195af6543cdc802e8e1c2e1668dd38/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88fa1a555195af6543cdc802e8e1c2e1668dd38/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "patch": "@@ -227,7 +227,7 @@ class CNetAddr\n          */\n         bool IsRelayable() const\n         {\n-            return IsIPv4() || IsIPv6() || IsTor();\n+            return IsIPv4() || IsIPv6() || IsTor() || IsI2P();\n         }\n \n         /**"
      },
      {
        "sha": "c006a6c24f8665ab91fa7763d24facdb3564591f",
        "filename": "test/functional/p2p_addrv2_relay.py",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88fa1a555195af6543cdc802e8e1c2e1668dd38/test/functional/p2p_addrv2_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88fa1a555195af6543cdc802e8e1c2e1668dd38/test/functional/p2p_addrv2_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addrv2_relay.py?ref=a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "patch": "@@ -18,12 +18,19 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n+I2P_ADDR = \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\"\n+\n ADDRS = []\n for i in range(10):\n     addr = CAddress()\n     addr.time = int(time.time()) + i\n     addr.nServices = NODE_NETWORK | NODE_WITNESS\n-    addr.ip = \"123.123.123.{}\".format(i % 256)\n+    # Add one I2P address at an arbitrary position.\n+    if i == 5:\n+        addr.net = addr.NET_I2P\n+        addr.ip = I2P_ADDR\n+    else:\n+        addr.ip = f\"123.123.123.{i % 256}\"\n     addr.port = 8333 + i\n     ADDRS.append(addr)\n \n@@ -35,11 +42,8 @@ def __init__(self):\n         super().__init__(support_addrv2 = True)\n \n     def on_addrv2(self, message):\n-        for addr in message.addrs:\n-            assert_equal(addr.nServices, 9)\n-            assert addr.ip.startswith('123.123.123.')\n-            assert (8333 <= addr.port < 8343)\n-        self.addrv2_received_and_checked = True\n+        if ADDRS == message.addrs:\n+            self.addrv2_received_and_checked = True\n \n     def wait_for_addrv2(self):\n         self.wait_until(lambda: \"addrv2\" in self.last_message)\n@@ -64,15 +68,18 @@ def run_test(self):\n         addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n         msg.addrs = ADDRS\n         with self.nodes[0].assert_debug_log([\n-                'Added 10 addresses from 127.0.0.1: 0 tried',\n-                'received: addrv2 (131 bytes) peer=0',\n-                'sending addrv2 (131 bytes) peer=1',\n+                # The I2P address is not added to node's own addrman because it has no\n+                # I2P reachability (thus 10 - 1 = 9).\n+                'Added 9 addresses from 127.0.0.1: 0 tried',\n+                'received: addrv2 (159 bytes) peer=0',\n+                'sending addrv2 (159 bytes) peer=1',\n         ]):\n             addr_source.send_and_ping(msg)\n             self.nodes[0].setmocktime(int(time.time()) + 30 * 60)\n             addr_receiver.wait_for_addrv2()\n \n         assert addr_receiver.addrv2_received_and_checked\n+        assert_equal(len(self.nodes[0].getnodeaddresses(count=0, network=\"i2p\")), 0)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "065e8961ae259ec29fd5dec801f12984bc4e40d2",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88fa1a555195af6543cdc802e8e1c2e1668dd38/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88fa1a555195af6543cdc802e8e1c2e1668dd38/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "patch": "@@ -18,6 +18,7 @@\n Classes use __slots__ to ensure extraneous attributes aren't accidentally added\n by tests, compromising their intended effect.\n \"\"\"\n+from base64 import b32decode, b32encode\n from codecs import encode\n import copy\n import hashlib\n@@ -213,22 +214,30 @@ class CAddress:\n \n     # see https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki\n     NET_IPV4 = 1\n+    NET_I2P = 5\n \n     ADDRV2_NET_NAME = {\n-        NET_IPV4: \"IPv4\"\n+        NET_IPV4: \"IPv4\",\n+        NET_I2P: \"I2P\"\n     }\n \n     ADDRV2_ADDRESS_LENGTH = {\n-        NET_IPV4: 4\n+        NET_IPV4: 4,\n+        NET_I2P: 32\n     }\n \n+    I2P_PAD = \"====\"\n+\n     def __init__(self):\n         self.time = 0\n         self.nServices = 1\n         self.net = self.NET_IPV4\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n+    def __eq__(self, other):\n+        return self.net == other.net and self.ip == other.ip and self.nServices == other.nServices and self.port == other.port and self.time == other.time\n+\n     def deserialize(self, f, *, with_time=True):\n         \"\"\"Deserialize from addrv1 format (pre-BIP155)\"\"\"\n         if with_time:\n@@ -261,24 +270,33 @@ def deserialize_v2(self, f):\n         self.nServices = deser_compact_size(f)\n \n         self.net = struct.unpack(\"B\", f.read(1))[0]\n-        assert self.net == self.NET_IPV4\n+        assert self.net in (self.NET_IPV4, self.NET_I2P)\n \n         address_length = deser_compact_size(f)\n         assert address_length == self.ADDRV2_ADDRESS_LENGTH[self.net]\n \n-        self.ip = socket.inet_ntoa(f.read(4))\n+        addr_bytes = f.read(address_length)\n+        if self.net == self.NET_IPV4:\n+            self.ip = socket.inet_ntoa(addr_bytes)\n+        else:\n+            self.ip = b32encode(addr_bytes)[0:-len(self.I2P_PAD)].decode(\"ascii\").lower() + \".b32.i2p\"\n \n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n     def serialize_v2(self):\n         \"\"\"Serialize in addrv2 format (BIP155)\"\"\"\n-        assert self.net == self.NET_IPV4\n+        assert self.net in (self.NET_IPV4, self.NET_I2P)\n         r = b\"\"\n         r += struct.pack(\"<I\", self.time)\n         r += ser_compact_size(self.nServices)\n         r += struct.pack(\"B\", self.net)\n         r += ser_compact_size(self.ADDRV2_ADDRESS_LENGTH[self.net])\n-        r += socket.inet_aton(self.ip)\n+        if self.net == self.NET_IPV4:\n+            r += socket.inet_aton(self.ip)\n+        else:\n+            sfx = \".b32.i2p\"\n+            assert self.ip.endswith(sfx)\n+            r += b32decode(self.ip[0:-len(sfx)] + self.I2P_PAD, True)\n         r += struct.pack(\">H\", self.port)\n         return r\n "
      }
    ]
  },
  {
    "sha": "48bd7d3b7737656052d2c745ed40c7f6670842cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGJkN2QzYjc3Mzc2NTYwNTJkMmM3NDVlZDQwYzdmNjY3MDg0MmNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-15T16:33:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-15T16:33:16Z"
      },
      "message": "Change ScriptPubKeyMan::Upgrade to default to return true\n\nIf a ScriptPubKeyMan does not implement Upgrade, then using upgraewallet\nwill fail unexpectedly. By changing the default to return true, then\nthis error can be avoided. This is still correct because a successful\nupgrade can be that nothing happened.",
      "tree": {
        "sha": "3b3106f8d9afb1ef886399956ae2bbcdae06778f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b3106f8d9afb1ef886399956ae2bbcdae06778f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48bd7d3b7737656052d2c745ed40c7f6670842cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bd7d3b7737656052d2c745ed40c7f6670842cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48bd7d3b7737656052d2c745ed40c7f6670842cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bd7d3b7737656052d2c745ed40c7f6670842cf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e329e0cf8fdb697dbe88c69d34fc753a71061cff",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48bd7d3b7737656052d2c745ed40c7f6670842cf/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48bd7d3b7737656052d2c745ed40c7f6670842cf/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=48bd7d3b7737656052d2c745ed40c7f6670842cf",
        "patch": "@@ -207,7 +207,7 @@ class ScriptPubKeyMan\n     virtual bool CanGetAddresses(bool internal = false) const { return false; }\n \n     /** Upgrades the wallet to the specified version */\n-    virtual bool Upgrade(int prev_version, int new_version, bilingual_str& error) { return false; }\n+    virtual bool Upgrade(int prev_version, int new_version, bilingual_str& error) { return true; }\n \n     virtual bool HavePrivateKeys() const { return false; }\n "
      }
    ]
  },
  {
    "sha": "e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDlkNTBjZjQwNzY2MTIwZDQwNzlmMmFlNmY1YjMzYTU5NTJjNGQw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-15T21:02:20Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-15T21:05:10Z"
      },
      "message": "bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp",
      "tree": {
        "sha": "6cc7e1934d4191cdf00d65441a4afe5a0e88173f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cc7e1934d4191cdf00d65441a4afe5a0e88173f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmDwoxEACgkQT1chs9Dj\nkh1iMQ//dsiJiObFKa0LvWp95lVYedYd8WKhdO1XbAdCIxSdNhuvQwfRoiEesNqr\nF6d76PG+QG9MBDILoa8iEaRl2xMbSsUheUT3mNzb+Abcxdz1DjkTwjiNu1oUvbEG\nR2gAewXrUVevBFmucYeCXt9fM6kbwS2iUFK+jRTalk+rN4MGNNcTTi2P1G8GNoyX\nSp8YWm4czi/t+cDbOTUa9f/vsx834GL4+S+iJxfssuKfH/Jq8r7iZZONvVUFLawR\nLuSm53WIGzgGYBt1/YGrU99P1Uxo+QOAeXHTGVGXsdxJxV6LXQI7Ve9PEhCZiM7S\nkjwQhhrHjFhAurLn2YOKnQap3Yja7J+WCS2UlZlTuJ0FJtLlkIn5zjwvn+U0NR0l\nCSfz6kzPWnfMQ9OchsqFU8EvHktfQUgsAB8fctKVpk0jFDBfI0oK1OVXSalp1oag\n++76R0HmAbWL5sftt9xbSnKpmzcjp/bVBp5HBfafBN34fn1wW9Fr7oF1m2M47kC/\nd/tp4dIO+C58vJ5sI4+LzK18yTuyVd6hpkrn2Xl/OzUW2FGJNlZ5xhI5y74DR2Fn\nPtaichYKAPMJFf5E70IBEvpZ5WfXQQ85sBTIL8Utpo/oUYgG2K9MUr2WHdBCbISR\nT5Aw83CrxLF87GNIK4CD+Ha0v2vFlWJd3Nkw3wY5KVH7CYjqjDk=\n=FZ0y\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEEANoJtZQITVVdoX7lYNImSa7F4pFOltkFI41yGlfbVCP/wED5812NLJKQ9\nS6FcFN0Ahc8I8CDhEN3UgpI+0lPCzYB5m6JNuiYREgMRlpI7NNlIXxNGPwjwILmH\nptivZM6U8X7BmA7uaWcdtghCJmLyzUxuN6rQ1aBUCPEEYPCjE/AIHhOKg58/eH4A\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BBg/HQoxxuzwcy5NiFtGKRmCPEgM0PE2rbHSbbA+UmxHDO/D1rCHbWm\nMmwI8YZ54S4T0dwI8QRg8KMS8AgV42e6M9ilfACD3+MNLvkMji4taHR0cHM6Ly9h\nbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQlvogqWFFdy49\nIp0fQufldQjxIO1941WTZxBvKFiOUPHy2vsP69mfrRllodMkJo0YJXhQCPEgRNis\n5hkGbZdEHvCT2Y77y/jZOtsiEpphAmGf2YPaQXAI8QRg8KMS8AgSuptx6olWcACD\n3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQ6zS5\nGw/pSwf55FXsKKz/OAjwIOLq0o54L4vtT1gG029MfGe3FbkAnqE2v1eyfbRXmhD4\nCPAg/nTfU/F+eW1Wrd7CDUeWoxgtWv0IsYUGHVv6J0vhVQwI8QRg8KMT8Agx/niI\nZNb+FwCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6cc7e1934d4191cdf00d65441a4afe5a0e88173f\nparent a88fa1a555195af6543cdc802e8e1c2e1668dd38\nauthor Jon Atack <jon@atack.com> 1626382940 +0200\ncommitter Jon Atack <jon@atack.com> 1626383110 +0200\n\nbench: fix 32-bit narrowing warning in bench/peer_eviction.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49d50cf40766120d4079f2ae6f5b33a5952c4d0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "46fd9d999e120bb3e904b5705d5dd99b79ad1272",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49d50cf40766120d4079f2ae6f5b33a5952c4d0/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49d50cf40766120d4079f2ae6f5b33a5952c4d0/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
        "patch": "@@ -27,7 +27,8 @@ static void EvictionProtectionCommon(\n         candidate_setup_fn(c);\n     }\n \n-    std::vector<Candidates> copies{bench.epochs() * bench.epochIterations(), candidates};\n+    std::vector<Candidates> copies{\n+        static_cast<size_t>(bench.epochs() * bench.epochIterations()), candidates};\n     size_t i{0};\n     bench.run([&] {\n         ProtectEvictionCandidatesByRatio(copies.at(i));"
      }
    ]
  },
  {
    "sha": "8465978f235e2e43feb5dabe2a4d61026343b6ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDY1OTc4ZjIzNWUyZTQzZmViNWRhYmUyYTRkNjEwMjYzNDNiNmFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-07-09T16:58:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-07-16T00:08:52Z"
      },
      "message": "Make IsSegWitOutput return true for taproot outputs",
      "tree": {
        "sha": "b9ec72931dde0e0e527589c9fbe29c46720db9e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9ec72931dde0e0e527589c9fbe29c46720db9e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8465978f235e2e43feb5dabe2a4d61026343b6ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465978f235e2e43feb5dabe2a4d61026343b6ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8465978f235e2e43feb5dabe2a4d61026343b6ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465978f235e2e43feb5dabe2a4d61026343b6ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7864e690d8d111d8585460a285e9c59ef3125ff7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8465978f235e2e43feb5dabe2a4d61026343b6ab/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8465978f235e2e43feb5dabe2a4d61026343b6ab/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=8465978f235e2e43feb5dabe2a4d61026343b6ab",
        "patch": "@@ -612,15 +612,18 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n \n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n-    std::vector<valtype> solutions;\n-    auto whichtype = Solver(script, solutions);\n-    if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n-    if (whichtype == TxoutType::SCRIPTHASH) {\n-        auto h160 = uint160(solutions[0]);\n-        CScript subscript;\n-        if (provider.GetCScript(CScriptID{h160}, subscript)) {\n-            whichtype = Solver(subscript, solutions);\n-            if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n+    int version;\n+    valtype program;\n+    if (script.IsWitnessProgram(version, program)) return true;\n+    if (script.IsPayToScriptHash()) {\n+        std::vector<valtype> solutions;\n+        auto whichtype = Solver(script, solutions);\n+        if (whichtype == TxoutType::SCRIPTHASH) {\n+            auto h160 = uint160(solutions[0]);\n+            CScript subscript;\n+            if (provider.GetCScript(CScriptID{h160}, subscript)) {\n+                if (subscript.IsWitnessProgram(version, program)) return true;\n+            }\n         }\n     }\n     return false;"
      }
    ]
  },
  {
    "sha": "f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGIyMGZkMzViMGViNDJkMjhhZmIzMDJhMDcwZTVkOWJjMjFhOTlm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-16T06:04:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-16T06:04:43Z"
      },
      "message": "Merge bitcoin/bitcoin#22464: bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp\n\ne49d50cf40766120d4079f2ae6f5b33a5952c4d0 bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp (Jon Atack)\n\nPull request description:\n\n  Closes https://github.com/bitcoin/bitcoin/issues/22459.\n\nACKs for top commit:\n  hebasto:\n    ACK e49d50cf40766120d4079f2ae6f5b33a5952c4d0, tested on Debian 10.10 (i386):\n\nTree-SHA512: 8ca366fc296c633dbc8b8e0e7d80f4f6a64d02fb3da86d199881364f027d34b816a3c964b3fea2c1cc0b3ad51dd02d93c8bb14b5ebbd99fb4073cd1031766332",
      "tree": {
        "sha": "6cc7e1934d4191cdf00d65441a4afe5a0e88173f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cc7e1934d4191cdf00d65441a4afe5a0e88173f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUimlgwAkehKZN56Ec9ar/EGNUtV/hTFxhS5obzSpFU5wL2ONzpfKfm1T5zx/rYV\nVJEpbCNEurX33xkyiv+3TzcqJDpb1vM4/IcT8zpqTeCSqXBuiWgVHiJqxqVv+bXp\nd/SzJcftfR7Xmgq48SlMGigR8+08HVvZl/xE+bEwbC/v/SxLbOgZPxG+lfQQxMAy\nQ6uPgqyG5SnQlHiFk886Zt4sK+Zzoep1RCkxPiXpDM9jkDf97r/CU3wt1QC+7Y1O\n83i3x1JblWWLpKLxyaKVP07xyhAUYpOm+wnJDS7iVRg7K0ZRlkBx4hzCa8Bowsf2\n04DbQVSPK9/RaC9Vd+gvYqirhhx7tXI6xsMbbpYkm7M8Yy2JefdSaNrs44KlF/XJ\nOtC/8yP4Cuy5+rqNiB+53+mqEhbd8YByjIjgoBmu/yDDmLDJQ+1Sr1kjyuCT/bye\nwPe2FPFX93VfTNG7L27hYnrgKxGzwxoCa6TLRvnrHRHH3dlABXm9EViwTiVRYiJR\nqynC7dBu\n=KD4q\n-----END PGP SIGNATURE-----",
        "payload": "tree 6cc7e1934d4191cdf00d65441a4afe5a0e88173f\nparent a88fa1a555195af6543cdc802e8e1c2e1668dd38\nparent e49d50cf40766120d4079f2ae6f5b33a5952c4d0\nauthor MarcoFalke <falke.marco@gmail.com> 1626415481 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626415483 +0200\n\nMerge bitcoin/bitcoin#22464: bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp\n\ne49d50cf40766120d4079f2ae6f5b33a5952c4d0 bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp (Jon Atack)\n\nPull request description:\n\n  Closes https://github.com/bitcoin/bitcoin/issues/22459.\n\nACKs for top commit:\n  hebasto:\n    ACK e49d50cf40766120d4079f2ae6f5b33a5952c4d0, tested on Debian 10.10 (i386):\n\nTree-SHA512: 8ca366fc296c633dbc8b8e0e7d80f4f6a64d02fb3da86d199881364f027d34b816a3c964b3fea2c1cc0b3ad51dd02d93c8bb14b5ebbd99fb4073cd1031766332\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      },
      {
        "sha": "e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49d50cf40766120d4079f2ae6f5b33a5952c4d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e49d50cf40766120d4079f2ae6f5b33a5952c4d0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "46fd9d999e120bb3e904b5705d5dd99b79ad1272",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
        "patch": "@@ -27,7 +27,8 @@ static void EvictionProtectionCommon(\n         candidate_setup_fn(c);\n     }\n \n-    std::vector<Candidates> copies{bench.epochs() * bench.epochIterations(), candidates};\n+    std::vector<Candidates> copies{\n+        static_cast<size_t>(bench.epochs() * bench.epochIterations()), candidates};\n     size_t i{0};\n     bench.run([&] {\n         ProtectEvictionCandidatesByRatio(copies.at(i));"
      }
    ]
  },
  {
    "sha": "5012a7912ee9fa35bc417cb073eebffd85f36c6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDEyYTc5MTJlZTlmYTM1YmM0MTdjYjA3M2VlYmZmZDg1ZjM2YzZj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-15T16:41:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-16T19:34:56Z"
      },
      "message": "Test that descriptor wallet upgrade does nothing",
      "tree": {
        "sha": "30c74239158260b1fb0e6d067aa5a9f51a9fa9bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30c74239158260b1fb0e6d067aa5a9f51a9fa9bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5012a7912ee9fa35bc417cb073eebffd85f36c6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5012a7912ee9fa35bc417cb073eebffd85f36c6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5012a7912ee9fa35bc417cb073eebffd85f36c6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5012a7912ee9fa35bc417cb073eebffd85f36c6c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bd7d3b7737656052d2c745ed40c7f6670842cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bd7d3b7737656052d2c745ed40c7f6670842cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bd7d3b7737656052d2c745ed40c7f6670842cf"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4d34670ea944b53e673f4cdf38d33565485e0b80",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5012a7912ee9fa35bc417cb073eebffd85f36c6c/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5012a7912ee9fa35bc417cb073eebffd85f36c6c/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=5012a7912ee9fa35bc417cb073eebffd85f36c6c",
        "patch": "@@ -94,10 +94,11 @@ def dumb_sync_blocks(self):\n     def test_upgradewallet(self, wallet, previous_version, requested_version=None, expected_version=None):\n         unchanged = expected_version == previous_version\n         new_version = previous_version if unchanged else expected_version if expected_version else requested_version\n-        assert_equal(wallet.getwalletinfo()[\"walletversion\"], previous_version)\n+        old_wallet_info = wallet.getwalletinfo()\n+        assert_equal(old_wallet_info[\"walletversion\"], previous_version)\n         assert_equal(wallet.upgradewallet(requested_version),\n             {\n-                \"wallet_name\": \"\",\n+                \"wallet_name\": old_wallet_info[\"walletname\"],\n                 \"previous_version\": previous_version,\n                 \"current_version\": new_version,\n                 \"result\": \"Already at latest version. Wallet version unchanged.\" if unchanged else \"Wallet upgraded successfully from version {} to version {}.\".format(previous_version, new_version),\n@@ -352,6 +353,11 @@ def copy_split_hd():\n         v16_3_kvs = dump_bdb_kv(v16_3_wallet)\n         assert b'\\x0adefaultkey' not in v16_3_kvs\n \n+        if self.is_sqlite_compiled():\n+            self.log.info(\"Checking that descriptor wallets do nothing, successfully\")\n+            self.nodes[0].createwallet(wallet_name=\"desc_upgrade\", descriptors=True)\n+            desc_wallet = self.nodes[0].get_wallet_rpc(\"desc_upgrade\")\n+            self.test_upgradewallet(desc_wallet, previous_version=169900, expected_version=169900)\n \n if __name__ == '__main__':\n     UpgradeWalletTest().main()"
      }
    ]
  },
  {
    "sha": "6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmFhYmM0ZDFkZmFmNWE2MzBjMzg1ZTEwZTdkMWZiYjY3YzdiOTdk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T02:57:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T03:06:10Z"
      },
      "message": "Merge bitcoin/bitcoin#21430: build: Add -Werror=implicit-fallthrough compile flag\n\n3c4c8e79baf02af97ba1502189f649b04ef2198d build: Add -Werror=implicit-fallthrough compile flag (Hennadii Stepanov)\n014110c47d94ece6e3e655cdbf02ed8c91c7a5cf Use C++17 [[fallthrough]] attribute, and drop -Wno-implicit-fallthrough (Hennadii Stepanov)\n\nPull request description:\n\nACKs for top commit:\n  fanquake:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d - looks ok to me now. Checked that warnings occur in our code & leveldb by removing a `[[fallthrough]]` or `FALLTHROUGH_INTENDED`.\n  jarolrod:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d\n  theStack:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d\n\nTree-SHA512: 4dce91f0f26b8a3de09bd92bb3d7e1995e078e3a8b3ff861c4fbf6c0b32b2327d063633b07b89c4aa94a1141d7f78d46d9d43ab8df865273e342693ad30645b6",
      "tree": {
        "sha": "edafb0b1a5352c33a34ba885ec97862b34e4b3c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edafb0b1a5352c33a34ba885ec97862b34e4b3c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDzmqIACgkQLuufXMCV\nJsGtXg/9EcAYge2Q7O8Vn/N3uXOde1UnKf+8vVlRy8NjMHuiVXyFB5a+u1sq3ar+\nMoqlymMh3i/fw808/rAJOlUz0lYp9vdYIyaO8ekiOAQNyd3NP+OZUVQsO+EL8/XC\nSaYEh/d9vGkX+OzA+TNcIFf2BHdzI7kyUvKPDxszCXp/KY7Wba4YclNNYhbMwRLT\nW7PN8SXnGmdruFwuQfRrYcHBp8ni6WqQsPa3hAecRqasaiQmwmUHaIBcq7li8zut\nMJtzq8HHiWaNqG/C5yuupjScBVz9gItJwBJWS9Y8RGuYYJ+RLeZ5qB+bAPyXK2A8\n9RF8veYISs4x5zO2Mz5FlOjOii1KzC9IIqgrVbsNeDS38l8Qe9Dc8VyCRKLn0874\nkjFJBKmBOmW+PjzvLJyYPmaGxnRVqOl/otJlGG+91fGgRh0JBrW/BSF8brSbJBPb\ncrCO6vjDO5XLlf5UtuJIWBGuYTi3gXbpumKwj+csUPbgiYiCQTJE9HsJkxSUx8v4\nC4vQyU4Foo+X7BrEUkReighQ1NfiEPvQKRMBdilPq4wW4Ae4qe5so6LSehgnFoPy\nkMbDRsbz7uliM7Pgu7u62GUUm+Zorp7B6KqZluY+n4JNtqmnzzM+6NjUhgAtXAQB\noy1kG4r3bu4R3vvu05eaCkZjF+RPLFV0Y7H75g5Hin8nwKIuz+4=\n=dhH8\n-----END PGP SIGNATURE-----",
        "payload": "tree edafb0b1a5352c33a34ba885ec97862b34e4b3c0\nparent f8b20fd35b0eb42d28afb302a070e5d9bc21a99f\nparent 3c4c8e79baf02af97ba1502189f649b04ef2198d\nauthor fanquake <fanquake@gmail.com> 1626577049 +0800\ncommitter fanquake <fanquake@gmail.com> 1626577570 +0800\n\nMerge bitcoin/bitcoin#21430: build: Add -Werror=implicit-fallthrough compile flag\n\n3c4c8e79baf02af97ba1502189f649b04ef2198d build: Add -Werror=implicit-fallthrough compile flag (Hennadii Stepanov)\n014110c47d94ece6e3e655cdbf02ed8c91c7a5cf Use C++17 [[fallthrough]] attribute, and drop -Wno-implicit-fallthrough (Hennadii Stepanov)\n\nPull request description:\n\nACKs for top commit:\n  fanquake:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d - looks ok to me now. Checked that warnings occur in our code & leveldb by removing a `[[fallthrough]]` or `FALLTHROUGH_INTENDED`.\n  jarolrod:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d\n  theStack:\n    ACK 3c4c8e79baf02af97ba1502189f649b04ef2198d\n\nTree-SHA512: 4dce91f0f26b8a3de09bd92bb3d7e1995e078e3a8b3ff861c4fbf6c0b32b2327d063633b07b89c4aa94a1141d7f78d46d9d43ab8df865273e342693ad30645b6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8b20fd35b0eb42d28afb302a070e5d9bc21a99f"
      },
      {
        "sha": "3c4c8e79baf02af97ba1502189f649b04ef2198d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c4c8e79baf02af97ba1502189f649b04ef2198d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c8e79baf02af97ba1502189f649b04ef2198d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fa1b580cf582793ec95631bc834a1263a521f1a3",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -426,6 +426,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Werror=implicit-fallthrough], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=implicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n@@ -456,6 +457,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n@@ -467,7 +469,6 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n   if test x$suppress_external_warnings != xyes ; then\n     AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n   fi"
      },
      {
        "sha": "ce1f93f11f3b50d1e30f439b56767e7199205ff8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -22,6 +22,7 @@ LEVELDB_CPPFLAGS_INT += -DHAVE_SNAPPY=0 -DHAVE_CRC32C=1\n LEVELDB_CPPFLAGS_INT += -DHAVE_FDATASYNC=@HAVE_FDATASYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_FULLFSYNC=@HAVE_FULLFSYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_O_CLOEXEC=@HAVE_O_CLOEXEC@\n+LEVELDB_CPPFLAGS_INT += -DFALLTHROUGH_INTENDED=[[fallthrough]]\n \n if WORDS_BIGENDIAN\n LEVELDB_CPPFLAGS_INT += -DLEVELDB_IS_BIG_ENDIAN=1"
      },
      {
        "sha": "3465caa3a937cad71670a06ae810c8a9af54bdb1",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -47,8 +47,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vData\n     switch (vDataToHash.size() & 3) {\n         case 3:\n             k1 ^= tail[2] << 16;\n+            [[fallthrough]];\n         case 2:\n             k1 ^= tail[1] << 8;\n+            [[fallthrough]];\n         case 1:\n             k1 ^= tail[0];\n             k1 *= c1;"
      },
      {
        "sha": "56f55363b262204c0e2831711f5ef551a03e5ca7",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -288,6 +288,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 }\n                 if (breakParsing)\n                     break;\n+                [[fallthrough]];\n             }\n             case STATE_ARGUMENT: // In or after argument\n             case STATE_EATING_SPACES_IN_ARG:\n@@ -401,6 +402,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 strResult = lastResult.get_str();\n             else\n                 strResult = lastResult.write(2);\n+            [[fallthrough]];\n         case STATE_ARGUMENT:\n         case STATE_EATING_SPACES:\n             return true;"
      },
      {
        "sha": "e50ab33e5440a9fe40b39b1b927f9fc1dec90842",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -524,6 +524,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n         // convert hex to bin, continue then with bin part\n         std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n         strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n+        [[fallthrough]];\n     }\n \n     case RetFormat::BINARY: {"
      },
      {
        "sha": "692096367c8ed2b422a81cdd81652989eb73dd3e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -850,7 +850,7 @@ static RPCHelpMan getblocktemplate()\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n                 pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n-                // FALL THROUGH to get vbavailable set...\n+                [[fallthrough]];\n             case ThresholdState::STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];"
      },
      {
        "sha": "bedaa14007f1074e81c96d898ada5bdd87a1b71d",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "patch": "@@ -797,27 +797,27 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode\n             break;\n         case 'X':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'x': case 'p':\n             out.setf(std::ios::hex, std::ios::basefield);\n             intConversion = true;\n             break;\n         case 'E':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'e':\n             out.setf(std::ios::scientific, std::ios::floatfield);\n             out.setf(std::ios::dec, std::ios::basefield);\n             break;\n         case 'F':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n         case 'A':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'a':\n #           ifdef _MSC_VER\n             // Workaround https://developercommunity.visualstudio.com/content/problem/520472/hexfloat-stream-output-does-not-ignore-precision-a.html\n@@ -829,7 +829,7 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode\n             break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n-            // Falls through\n+            [[fallthrough]];\n         case 'g':\n             out.setf(std::ios::dec, std::ios::basefield);\n             // As in boost::format, let stream decide float format."
      }
    ]
  },
  {
    "sha": "b5889611c7ad4e82d71e3390e5e05feca577d8f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTg4OTYxMWM3YWQ0ZTgyZDcxZTMzOTBlNWUwNWZlY2E1NzdkOGY3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T05:35:28Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T05:41:24Z"
      },
      "message": "Merge bitcoin/bitcoin#22234: build: Mark print-% target as phony.\n\nfb7be92b094477131140b58a4e3ae98366b93e76 Mark print-% target as phony. (Dmitry Goncharov)\n\nPull request description:\n\n  .PHONY does not take patterns (such as print-%) as prerequisites.\n  Have print-% depend on force and mark force as phony.\n\n  This change ensures print-% rule works even when there is a file that matches the target.\n\n  ```\n  $ # on master\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  $ touch print-host\n  $ make print-host\n  make: 'print-host' is up to date.\n  $\n  $ git co mark_print_as_phony\n  Switched to branch 'mark_print_as_phony'\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  $ touch force\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  ```\n\nACKs for top commit:\n  hebasto:\n    ACK fb7be92b094477131140b58a4e3ae98366b93e76, tested on Linux Mint 20.2 (x86_64).\n\nTree-SHA512: b89ae66aa8c7aa6a7ab5f0956f9eb3b3ef9d56994b60dc2a97d498d4c1bba537845c190723e8a10310280b1b35df2cd935cc30aeb76735cac2dc621ad7823772",
      "tree": {
        "sha": "d7352aa0643703cd0ff57d2ace6378029617960e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7352aa0643703cd0ff57d2ace6378029617960e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5889611c7ad4e82d71e3390e5e05feca577d8f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDzvwQACgkQLuufXMCV\nJsE0OA//Tb/cYkl86QoiC+Kvq5TeAztwqBA2qpdUOzqfQwksE6lphqAfySa+VKbb\nwa3mOq2IzQclHY/dxrCH3S4DUe2Zueop7pnn56HfmSm6KjNoqyV/QzLGXlbbwZ2R\nsFqu3nQcXGvf1aLdGz20Qo/ymCj+h9Wu09na331T6OMng3MSvpEDUFh+vwMZ7v0p\n/EU5+vp56WzCgViVEjEGtFAfVWxX+IP38wiTOnw3V35TrFPw2ZRwwsqW0Zno7sAu\npOAKNmpDr7s9caOMpvwMYggXf2NLnM68rprQI3BEmh7YydSuSXGekoIiYN44BRC1\n+5bO8CiyEOt2dCWavVAe/GhkiSpmrQ713bt11Xmx4fAIzeBb5kU8/FQB2BPaC6z0\nL+pEc90Yp8E4ls9egU8ndcqK0U+5YvVZ70d6ufxDE642YU8Mll2FZjoxYJVqG0Et\nwXN+uBoqtudIoVm51CCOxbXtnI6lEAnpPSK1sz9yenwjXQN3WHWNieufbFR5m0qe\nJhyf6c8mZRaviWFp/XXYDm00rHMyrtYnfyOlzVHgQJGSAD2PdUZtVT1PP5uWvepV\nyJC5gHvhmt0tkGsMiwb8xBHuCx8fD8ZEfcxDqP9EC8KN4l7pxl6TboqwS6LcH5Kt\n3pCbeg5fSkUREd6dSL2xZ4lOVYf/2jOQ87y8uuc9G6qA1vRHDqA=\n=7pWZ\n-----END PGP SIGNATURE-----",
        "payload": "tree d7352aa0643703cd0ff57d2ace6378029617960e\nparent 6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d\nparent fb7be92b094477131140b58a4e3ae98366b93e76\nauthor fanquake <fanquake@gmail.com> 1626586528 +0800\ncommitter fanquake <fanquake@gmail.com> 1626586884 +0800\n\nMerge bitcoin/bitcoin#22234: build: Mark print-% target as phony.\n\nfb7be92b094477131140b58a4e3ae98366b93e76 Mark print-% target as phony. (Dmitry Goncharov)\n\nPull request description:\n\n  .PHONY does not take patterns (such as print-%) as prerequisites.\n  Have print-% depend on force and mark force as phony.\n\n  This change ensures print-% rule works even when there is a file that matches the target.\n\n  ```\n  $ # on master\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  $ touch print-host\n  $ make print-host\n  make: 'print-host' is up to date.\n  $\n  $ git co mark_print_as_phony\n  Switched to branch 'mark_print_as_phony'\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  $ touch force\n  $ make print-host\n  host=x86_64-pc-linux-gnu\n  ```\n\nACKs for top commit:\n  hebasto:\n    ACK fb7be92b094477131140b58a4e3ae98366b93e76, tested on Linux Mint 20.2 (x86_64).\n\nTree-SHA512: b89ae66aa8c7aa6a7ab5f0956f9eb3b3ef9d56994b60dc2a97d498d4c1bba537845c190723e8a10310280b1b35df2cd935cc30aeb76735cac2dc621ad7823772\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5889611c7ad4e82d71e3390e5e05feca577d8f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5889611c7ad4e82d71e3390e5e05feca577d8f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5889611c7ad4e82d71e3390e5e05feca577d8f7/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6baabc4d1dfaf5a630c385e10e7d1fbb67c7b97d"
      },
      {
        "sha": "fb7be92b094477131140b58a4e3ae98366b93e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7be92b094477131140b58a4e3ae98366b93e76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7be92b094477131140b58a4e3ae98366b93e76"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "79c294fd15859d25238ba5c3b52daeea35ce86ba",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5889611c7ad4e82d71e3390e5e05feca577d8f7/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5889611c7ad4e82d71e3390e5e05feca577d8f7/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n ACLOCAL_AMFLAGS = -I build-aux/m4"
      },
      {
        "sha": "a3b9cd20991180dc760ee964b6403600be577658",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5889611c7ad4e82d71e3390e5e05feca577d8f7/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5889611c7ad4e82d71e3390e5e05feca577d8f7/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "patch": "@@ -1,7 +1,7 @@\n .NOTPARALLEL :\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n # When invoking a sub-make, keep only the command line variable definitions\n@@ -284,3 +284,4 @@ download: download-osx download-linux download-win\n $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n+.PHONY: FORCE"
      },
      {
        "sha": "407fdf5a8fd4795411536d00a57c7a84567a1542",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5889611c7ad4e82d71e3390e5e05feca577d8f7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5889611c7ad4e82d71e3390e5e05feca577d8f7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n DIST_SUBDIRS = secp256k1 univalue"
      }
    ]
  },
  {
    "sha": "4315dc02a1ebc6003d1ef8789490ba4442861a6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzE1ZGMwMmExZWJjNjAwM2QxZWY4Nzg5NDkwYmE0NDQyODYxYTZi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T06:05:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T06:05:39Z"
      },
      "message": "Merge bitcoin/bitcoin#20641: depends: Use Qt top-level build facilities\n\n1155978d8f3fcc1cebf357302b933b834f9c9465 build, qt: Do not install *.prl files (Hennadii Stepanov)\n763793b60e4ec0d1df129279ca3f08fc97d6d90e build, qt: Fix wrong cross-compiling detection on macOS (Hennadii Stepanov)\n30982721ab3129928fa0e3c06717350876de4f2d build, qt: Force bootstrap while building linguist tools (Hennadii Stepanov)\n689320e3074e2be3c47123a0b344d2f265ad9f4f build, qt: Drop translations.pro hack (Hennadii Stepanov)\n6a1f98f2536504c9bc24d8930c69838d8262062c build, qt: Drop lrelease dependency patch (Hennadii Stepanov)\n39e561e087246dd7e442c5bfbfee304fbc22d7e5 build, qt: Add linguist_tools list (Hennadii Stepanov)\n27d3def1c6d7a0bf447c62f0724136d6885c8d92 build: Use Qt top-level build facilities (Hennadii Stepanov)\n\nPull request description:\n\n  This PR:\n  - uses Qt top-level build facilities without the need to download all-in-one archive\n  - is based on **BlockMechanic**'s [idea](https://github.com/bitcoin/bitcoin/pull/20600), and is an alternative to #20600\n  - makes it easy to integrate [new modules](https://github.com/bitcoin/bitcoin/pull/16883) into static builds\n  - has the minimal diff\n  - makes the qt package build process streamlined by dropping some patches and hacks (an alternative to  #21420 and #20642)\n\n  Fixes #18536 (a non-intrusive alternative to #21589 and #19785).\n\n  Fixes #14648.\n\n  Fixes #21588 (a non-intrusive alternative to #21591).\n\n  Required for adding [Wayland support](https://github.com/bitcoin/bitcoin/issues/19950) on Linux.\n\n  ---\n\n  **Note for reviewers**: With 9046de8a4cbc3899fed9eae084115f423e7ac5bd from #21995 it is easy to verify that there are no changes in the resulted `qt` package archive on the per commit basis. For example, for `HOST=i686-pc-linux-gnu` no commit in this PR introduces any changes.\n\nACKs for top commit:\n  fanquake:\n    ACK 1155978d8f3fcc1cebf357302b933b834f9c9465\n\nTree-SHA512: 667b06b72cb7ff26d68b9b88e8dddb51084783ca9e3d80b3392710794c1dc7fd77bbcc3ccf4ccece9919d33b9bf8fce13c5059502bd228021dc7c93fdb87ca7a",
      "tree": {
        "sha": "b0c0e713c2d34afc4deb943f8aa77bfb53038139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0c0e713c2d34afc4deb943f8aa77bfb53038139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4315dc02a1ebc6003d1ef8789490ba4442861a6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDzxLQACgkQLuufXMCV\nJsG1ow//bpWEekV0+XORD6Do/bSAh/UoFGx6LEBuUffwlJ8NigzPEoseSLzSkfhd\nRq/7hYpsSYdg8kh5rFPgJBgnSdxO1p3bbnzfroqv8n071nDbrQPBwSiRGHJy8ha3\nRpu4+M7fqTth+ex87p6X90p5f6byGi76MvV25oWX3xUulZRWM2S+wQklRYm9E5Z6\n/mPKCKsFf02GLTUkBDmW/Hg1yNNp3A0frSf8trLwm31liXZ6IB0MG1NawaBlY5VR\nzX2xQ+vkXr2UvJwW1C2U6NvHMLRLqYPUlmE9og/LAVCq/lok4Ar+3CQWuAbyocTg\nSpq5VmCJyksXPLK7rEvTyZM1lAjCsh4B+AEmmxurkt4WdjQAc9/r6bH7BSKRf+Fs\nGGkLnVe03eismLBEcpZu4fxJg85PVGFjCuh2kGXTJafSYAZOTrVGZBr/7Qz6eYYc\nGNhP++5PYxHEqSRkzFyRvFERuz8iwb7kZCDSEPRR8mLw5osTduUGUB9XBUhQoFjk\nfMIXFVY38ntR+UZqoY3N2JfV7Gd8rtY1TjRnZKQE7k0jesc+yp99St4gkqFdy1RZ\nNDiEZ4BFNqWBV+yrcbQD1Y3yzI/9N2tNu6xCYUMX6LeNYAOgZI9+b7FerQQUDOXN\ngTH47kzaAXMDWLR4YvYQAcdUV7ncUdwo1edNw8YwxIocn/miIvk=\n=rqXw\n-----END PGP SIGNATURE-----",
        "payload": "tree b0c0e713c2d34afc4deb943f8aa77bfb53038139\nparent b5889611c7ad4e82d71e3390e5e05feca577d8f7\nparent 1155978d8f3fcc1cebf357302b933b834f9c9465\nauthor fanquake <fanquake@gmail.com> 1626588321 +0800\ncommitter fanquake <fanquake@gmail.com> 1626588339 +0800\n\nMerge bitcoin/bitcoin#20641: depends: Use Qt top-level build facilities\n\n1155978d8f3fcc1cebf357302b933b834f9c9465 build, qt: Do not install *.prl files (Hennadii Stepanov)\n763793b60e4ec0d1df129279ca3f08fc97d6d90e build, qt: Fix wrong cross-compiling detection on macOS (Hennadii Stepanov)\n30982721ab3129928fa0e3c06717350876de4f2d build, qt: Force bootstrap while building linguist tools (Hennadii Stepanov)\n689320e3074e2be3c47123a0b344d2f265ad9f4f build, qt: Drop translations.pro hack (Hennadii Stepanov)\n6a1f98f2536504c9bc24d8930c69838d8262062c build, qt: Drop lrelease dependency patch (Hennadii Stepanov)\n39e561e087246dd7e442c5bfbfee304fbc22d7e5 build, qt: Add linguist_tools list (Hennadii Stepanov)\n27d3def1c6d7a0bf447c62f0724136d6885c8d92 build: Use Qt top-level build facilities (Hennadii Stepanov)\n\nPull request description:\n\n  This PR:\n  - uses Qt top-level build facilities without the need to download all-in-one archive\n  - is based on **BlockMechanic**'s [idea](https://github.com/bitcoin/bitcoin/pull/20600), and is an alternative to #20600\n  - makes it easy to integrate [new modules](https://github.com/bitcoin/bitcoin/pull/16883) into static builds\n  - has the minimal diff\n  - makes the qt package build process streamlined by dropping some patches and hacks (an alternative to  #21420 and #20642)\n\n  Fixes #18536 (a non-intrusive alternative to #21589 and #19785).\n\n  Fixes #14648.\n\n  Fixes #21588 (a non-intrusive alternative to #21591).\n\n  Required for adding [Wayland support](https://github.com/bitcoin/bitcoin/issues/19950) on Linux.\n\n  ---\n\n  **Note for reviewers**: With 9046de8a4cbc3899fed9eae084115f423e7ac5bd from #21995 it is easy to verify that there are no changes in the resulted `qt` package archive on the per commit basis. For example, for `HOST=i686-pc-linux-gnu` no commit in this PR introduces any changes.\n\nACKs for top commit:\n  fanquake:\n    ACK 1155978d8f3fcc1cebf357302b933b834f9c9465\n\nTree-SHA512: 667b06b72cb7ff26d68b9b88e8dddb51084783ca9e3d80b3392710794c1dc7fd77bbcc3ccf4ccece9919d33b9bf8fce13c5059502bd228021dc7c93fdb87ca7a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4315dc02a1ebc6003d1ef8789490ba4442861a6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4315dc02a1ebc6003d1ef8789490ba4442861a6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4315dc02a1ebc6003d1ef8789490ba4442861a6b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5889611c7ad4e82d71e3390e5e05feca577d8f7"
      },
      {
        "sha": "1155978d8f3fcc1cebf357302b933b834f9c9465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1155978d8f3fcc1cebf357302b933b834f9c9465",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1155978d8f3fcc1cebf357302b933b834f9c9465"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 41,
      "deletions": 54
    },
    "files": [
      {
        "sha": "0c3ef8c82f1f58f507fd0c893cf44cfd4b4f843a",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 19,
        "deletions": 33,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "patch": "@@ -6,9 +6,11 @@ $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=1c1b4e33137ca77881074c140d54c3c9747e845a31338cfe8680f171f0bc3a39\n $(package)_linux_dependencies=freetype fontconfig libxcb libxkbcommon\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_no_printer.patch no-xlib.patch\n+$(package)_linguist_tools = lrelease lupdate lconvert\n+$(package)_patches = qt.pro qttools_src.pro\n+$(package)_patches += fix_qt_pkgconfig.patch mac-qmake.conf fix_no_printer.patch no-xlib.patch\n $(package)_patches+= fix_android_qmake_conf.patch fix_android_jni_static.patch dont_hardcode_pwd.patch\n-$(package)_patches+= drop_lrelease_dependency.patch no_sdk_version_check.patch\n+$(package)_patches+= no_sdk_version_check.patch\n $(package)_patches+= fix_lib_paths.patch fix_android_pch.patch\n $(package)_patches+= qtbase-moc-ignore-gcc-macro.patch fix_limits_header.patch\n \n@@ -64,6 +66,7 @@ $(package)_config_opts += -no-system-proxies\n $(package)_config_opts += -no-use-gold-linker\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n+$(package)_config_opts += -nomake tools\n $(package)_config_opts += -opensource\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n@@ -113,14 +116,13 @@ $(package)_config_opts_darwin = -no-dbus\n $(package)_config_opts_darwin += -no-opengl\n $(package)_config_opts_darwin += -pch\n $(package)_config_opts_darwin += -no-feature-corewlan\n-$(package)_config_opts_darwin += -device-option QMAKE_MACOSX_DEPLOYMENT_TARGET=$(OSX_MIN_VERSION)\n+$(package)_config_opts_darwin += QMAKE_MACOSX_DEPLOYMENT_TARGET=$(OSX_MIN_VERSION)\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux\n $(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n $(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option XCODE_VERSION=$(XCODE_VERSION)\n endif\n@@ -201,26 +203,24 @@ endef\n #\n # 1. Apply our patches to the extracted source. See each patch for more info.\n #\n-# 2. Point to lrelease in qttools/bin/lrelease; otherwise Qt will look for it in\n-# $(host)/native/bin/lrelease and not find it.\n+# 2. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n #\n-# 3. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n-#\n-# 4. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n+# 3. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n # bitcoin-linux-g++, replace instances of linux-arm-gnueabi with $(host). This\n # way we can generically support hosts like riscv64-linux-gnu, which Qt doesn't\n # ship a mkspec for. See it's usage in config_opts_* above.\n #\n-# 5. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n+# 4. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n #\n-# 6. Do similar for the win32-g++ mkspec.\n+# 5. Do similar for the win32-g++ mkspec.\n #\n-# 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n+# 6. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n #\n-# 8. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n+# 7. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n # CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n-  patch -p1 -i $($(package)_patch_dir)/drop_lrelease_dependency.patch && \\\n+  cp $($(package)_patch_dir)/qt.pro qt.pro && \\\n+  cp $($(package)_patch_dir)/qttools_src.pro qttools/src/src.pro && \\\n   patch -p1 -i $($(package)_patch_dir)/dont_hardcode_pwd.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch && \\\n@@ -232,7 +232,6 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_lib_paths.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/qtbase-moc-ignore-gcc-macro.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_limits_header.patch && \\\n-  sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n@@ -249,35 +248,22 @@ endef\n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n-  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n+  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig && \\\n   cd qtbase && \\\n-  ./configure $($(package)_config_opts) && \\\n-  cd .. && \\\n-  $(MAKE) -C qtbase sub-src-clean && \\\n-  qtbase/bin/qmake -o qttranslations/Makefile qttranslations/qttranslations.pro && \\\n-  qtbase/bin/qmake -o qttranslations/translations/Makefile qttranslations/translations/translations.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lrelease/Makefile qttools/src/linguist/lrelease/lrelease.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lupdate/Makefile qttools/src/linguist/lupdate/lupdate.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lconvert/Makefile qttools/src/linguist/lconvert/lconvert.pro\n+  ./configure -top-level $($(package)_config_opts)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C qtbase/src $(addprefix sub-,$($(package)_qt_libs)) && \\\n-  $(MAKE) -C qttools/src/linguist/lrelease && \\\n-  $(MAKE) -C qttools/src/linguist/lupdate && \\\n-  $(MAKE) -C qttools/src/linguist/lconvert && \\\n-  $(MAKE) -C qttranslations\n+  $(MAKE)\n endef\n \n define $(package)_stage_cmds\n   $(MAKE) -C qtbase/src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && \\\n-  $(MAKE) -C qttools/src/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttools/src/linguist/lupdate INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttools/src/linguist/lconvert INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n+  $(MAKE) -C qttools/src/linguist INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_linguist_tools))) && \\\n   $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets\n endef\n \n define $(package)_postprocess_cmds\n   rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n-  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -f lib/lib*.la\n endef"
      },
      {
        "sha": "9b918af77c464278eb796f20fcf7bc67d04e3dad",
        "filename": "depends/patches/qt/drop_lrelease_dependency.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5889611c7ad4e82d71e3390e5e05feca577d8f7/depends/patches/qt/drop_lrelease_dependency.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5889611c7ad4e82d71e3390e5e05feca577d8f7/depends/patches/qt/drop_lrelease_dependency.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/drop_lrelease_dependency.patch?ref=b5889611c7ad4e82d71e3390e5e05feca577d8f7",
        "patch": "@@ -1,20 +0,0 @@\n-commit 67b3ed7406e1d0762188dbad2c44a06824ba0778\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 15:24:01 2020 +0800\n-\n-    Drop dependency on lrelease\n-\n-    Qts buildsystem insists on using the installed lrelease, but gets\n-    confused about how to find it. Since we manually control the build\n-    order, just drop the dependency.\n-\n-    See #9469\n-\n-diff --git a/qttranslations/translations/translations.pro b/qttranslations/translations/translations.pro\n-index 694544c..eff339d 100644\n---- a/qttranslations/translations/translations.pro\n-+++ b/qttranslations/translations/translations.pro\n-@@ -107,3 +107,2 @@ updateqm.commands = $$LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n- silent:updateqm.commands = @echo lrelease ${QMAKE_FILE_IN} && $$updateqm.commands\n--updateqm.depends = $$LRELEASE_EXE\n- updateqm.name = LRELEASE ${QMAKE_FILE_IN}"
      },
      {
        "sha": "190ab7a160e49bf135c6991e84edc4c27f6d15de",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "patch": "@@ -8,7 +8,6 @@ include(../common/clang-mac.conf)\n QMAKE_MAC_SDK_PATH=$${MAC_SDK_PATH}\n QMAKE_XCODE_VERSION = $${XCODE_VERSION}\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n-QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx"
      },
      {
        "sha": "8f2e900a840fbd3f19dd77772d1157cdefbe1527",
        "filename": "depends/patches/qt/qt.pro",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt.pro?ref=4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "patch": "@@ -0,0 +1,16 @@\n+# Create the super cache so modules will add themselves to it.\n+cache(, super)\n+\n+!QTDIR_build: cache(CONFIG, add, $$list(QTDIR_build))\n+\n+prl = no_install_prl\n+CONFIG += $$prl\n+cache(CONFIG, add stash, prl)\n+\n+TEMPLATE = subdirs\n+SUBDIRS = qtbase qttools qttranslations\n+\n+qttools.depends = qtbase\n+qttranslations.depends = qttools\n+\n+load(qt_configure)"
      },
      {
        "sha": "6ef71a094273503f3cdac2618e3877e428bfb52b",
        "filename": "depends/patches/qt/qttools_src.pro",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/qttools_src.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4315dc02a1ebc6003d1ef8789490ba4442861a6b/depends/patches/qt/qttools_src.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qttools_src.pro?ref=4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "patch": "@@ -0,0 +1,6 @@\n+TEMPLATE = subdirs\n+SUBDIRS = linguist\n+\n+fb = force_bootstrap\n+CONFIG += $$fb\n+cache(CONFIG, add, fb)"
      }
    ]
  },
  {
    "sha": "4371e635d68251202f94353aa3124d74c78f7ec9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzcxZTYzNWQ2ODI1MTIwMmY5NDM1M2FhMzEyNGQ3NGM3OGY3ZWM5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T06:32:52Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-18T06:33:22Z"
      },
      "message": "Merge bitcoin/bitcoin#22410: Avoid GCC 7.1 ABI change warning in guix build\n\n1edddf5de41b053049ce0b0bdbc39c2fbb743c40 Avoid GCC 7.1 ABI change warning in guix build (Pieter Wuille)\n\nPull request description:\n\n  The arm-linux-gnueabihf guix build output is littered with warnings like:\n\n  ```\n  /gnu/store/7a96hdqdb2qi8a39f09n84xjy2hr23rs-gcc-cross-arm-linux-gnueabihf-8.4.0/include/c++/bits/stl_vector.h:1085:4: note:\n                   parameter passing for argument of type '__gnu_cxx::__normal_iterator<CRecipient*, std::vector<CRecipient> >' changed in GCC 7.1\n  ```\n\n  These are irrelevant for us. Disable them using `-Wno-psabi`.\n\nACKs for top commit:\n  laanwj:\n    ACK 1edddf5de41b053049ce0b0bdbc39c2fbb743c40\n  hebasto:\n    ACK 1edddf5de41b053049ce0b0bdbc39c2fbb743c40, after thorough reading related materials, I agree this change can be merged. As I mentioned above, I have been compiling my arm-32bit binaries with `-Wno-psabi` flag for two years, and no related flaws were observed.\n\nTree-SHA512: 485c7500547ac5da567ad23847341c18ff832607f5a1002676404cc647e437cf3445b6894ecff5b52929ca52bea946c06bd90eace1997c895e56204e787065e4",
      "tree": {
        "sha": "91ac83bc6074d7e6c9178ac50759f006ad6de248",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ac83bc6074d7e6c9178ac50759f006ad6de248"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4371e635d68251202f94353aa3124d74c78f7ec9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmDzyzIACgkQLuufXMCV\nJsFShg/+MtdcvxCn9lDkpG02BEozqD6DC7hFxK5m5Uh/kz6A1e8+XB2POPU38YDL\na59qpJXuNZ0FYpJdz9ooufd4RdrorZQ2K/Yvttu5UG/UZyecZOdK2RAbnoo6fbLi\nNR72x6WQCMEClFA0C+en1rpXisCauaQF6HjWFQB3iTIzthjOWVnxD1rpQnAK/w+0\nWMbHt0mYpapBmmzKB1oLSDRLliBd/evgo/zh0jgEh6gtqq+8zK+EcCITArnrcCpg\nPCgi+/398dX/wtcDMPqJchpUjJSMpSdk8H2Th4BoCuzcSAQpbXsjShO0xjZo3NS5\ndhtiVQ2CUIQv7JH+A1YjzdOkDpZTNFNdqqgKEWj7UuWFIIWBOdVc34d30RjkpenK\nok+rKBpllRDN1vCZQxUxfMN6dMfcRVwkUXMpBNaiMXc/h2Lk1mbRUCA9vB44qR6+\nOmEBLxD1ON1NDWt5YsljrltoTGbXjvOaYs+D38X4brvUg+hUzGMK0ZZwCszCy6Iz\no1QPlzLcuTPJT5jzBzOzhB9CPaHoTKyDCXKj2zmlU8J6EP79pHVX0mjWvRLwiFJH\nveBvigCDpx7dmmm+Xw5zSe6ZZ3Y7O935KHLPde8aL6DA0Osd0qykwIvmH2l2pmRo\nHgrrQdtGes0i6A1aZouo9Bi/6Sm0mGzyU2qUaocMM0XuujzeAo4=\n=KvwH\n-----END PGP SIGNATURE-----",
        "payload": "tree 91ac83bc6074d7e6c9178ac50759f006ad6de248\nparent 4315dc02a1ebc6003d1ef8789490ba4442861a6b\nparent 1edddf5de41b053049ce0b0bdbc39c2fbb743c40\nauthor fanquake <fanquake@gmail.com> 1626589972 +0800\ncommitter fanquake <fanquake@gmail.com> 1626590002 +0800\n\nMerge bitcoin/bitcoin#22410: Avoid GCC 7.1 ABI change warning in guix build\n\n1edddf5de41b053049ce0b0bdbc39c2fbb743c40 Avoid GCC 7.1 ABI change warning in guix build (Pieter Wuille)\n\nPull request description:\n\n  The arm-linux-gnueabihf guix build output is littered with warnings like:\n\n  ```\n  /gnu/store/7a96hdqdb2qi8a39f09n84xjy2hr23rs-gcc-cross-arm-linux-gnueabihf-8.4.0/include/c++/bits/stl_vector.h:1085:4: note:\n                   parameter passing for argument of type '__gnu_cxx::__normal_iterator<CRecipient*, std::vector<CRecipient> >' changed in GCC 7.1\n  ```\n\n  These are irrelevant for us. Disable them using `-Wno-psabi`.\n\nACKs for top commit:\n  laanwj:\n    ACK 1edddf5de41b053049ce0b0bdbc39c2fbb743c40\n  hebasto:\n    ACK 1edddf5de41b053049ce0b0bdbc39c2fbb743c40, after thorough reading related materials, I agree this change can be merged. As I mentioned above, I have been compiling my arm-32bit binaries with `-Wno-psabi` flag for two years, and no related flaws were observed.\n\nTree-SHA512: 485c7500547ac5da567ad23847341c18ff832607f5a1002676404cc647e437cf3445b6894ecff5b52929ca52bea946c06bd90eace1997c895e56204e787065e4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4371e635d68251202f94353aa3124d74c78f7ec9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4371e635d68251202f94353aa3124d74c78f7ec9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4371e635d68251202f94353aa3124d74c78f7ec9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4315dc02a1ebc6003d1ef8789490ba4442861a6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4315dc02a1ebc6003d1ef8789490ba4442861a6b"
      },
      {
        "sha": "1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edddf5de41b053049ce0b0bdbc39c2fbb743c40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1edddf5de41b053049ce0b0bdbc39c2fbb743c40"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc3391e0896e223aba28b5534cf8452c9b2e9e66",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4371e635d68251202f94353aa3124d74c78f7ec9/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4371e635d68251202f94353aa3124d74c78f7ec9/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=4371e635d68251202f94353aa3124d74c78f7ec9",
        "patch": "@@ -254,6 +254,10 @@ esac\n # CXXFLAGS\n HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n \n+case \"$HOST\" in\n+    arm-linux-gnueabihf) HOST_CXXFLAGS=\"${HOST_CXXFLAGS} -Wno-psabi\" ;;\n+esac\n+\n # LDFLAGS\n case \"$HOST\" in\n     *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;"
      }
    ]
  },
  {
    "sha": "5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzQxYzNiMWIzNWQ3MDE5ZDlmODAwNjM2ZmM3YWU4MTgwZDUwYjhl",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-07-18T06:39:07Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-07-18T07:33:10Z"
      },
      "message": "Merge bitcoin/bitcoin#22461: wallet: Change ScriptPubKeyMan::Upgrade default to True\n\n5012a7912ee9fa35bc417cb073eebffd85f36c6c Test that descriptor wallet upgrade does nothing (Andrew Chow)\n48bd7d3b7737656052d2c745ed40c7f6670842cf Change ScriptPubKeyMan::Upgrade to default to return true (Andrew Chow)\n\nPull request description:\n\n  When adding a new ScriptPubKeyMan, it's likely that there will be nothing for `Upgrade` to do. If it is called (via `upgradewallet`), then it should do nothing, successfully. This PR changes the default `ScriptPubKeyMan::Upgrade` function so that it returns a success instead of failure when doing nothing.\n\n  Fixes #22460\n\nACKs for top commit:\n  jonatack:\n    ACK 5012a7912ee9fa35bc417cb073eebffd85f36c6c\n  meshcollider:\n    utACK 5012a7912ee9fa35bc417cb073eebffd85f36c6c\n\nTree-SHA512: 578c6521e997f7bb5cc44be2cfe9e0a760b6bd4aa301026a6b8b3282e8757473e4cb9f68b2e79dacdc2b42dddae718450072e0a38817df205dfea177a74d7f3d",
      "tree": {
        "sha": "e2a1c41bef0d40e6fd0ead969c93db7702e02022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2a1c41bef0d40e6fd0ead969c93db7702e02022"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAmDz2TYACgkQ0wARbhyH\nWj2DDw//S+nAkCK9krFC6+lTzAFKPoSDwhOCP3liLTLIuuW2jSArPekCpI3uqU+K\nqMwfqILWeQik2+ORnVKVcMsqMFZ2HYFaaMsGsh8if7mtUzRprWgURaNjDlAaKHGo\nDbgLJLXD6pnxYeQYd0YHLhS5CkpKWvOLWo+0fpiRRmxNC1610bZXEJFv4fzz9VKf\nepU5lRmaRR4kPhzYqfOALqKR8LuXjpJmkDgqjY+2b0RApCCRD7cu2z7dXAlYHHQs\n+tncvA/r/hCAbvoiq+EtpdRBZg6RuHTHt/vnEHcT4LmEbeS4BWChO3LvCauLgNk1\niP9KMzkqRwLA9Oc5hWc6O7b5PXzy1ayGZcqwng2Cz2HJrW4RPyze9xXcbsxRenmE\nKyYiayx3eDQ2xS+BcHHHfmQlf0B2jXVOo1UQeSNbP4cXKr+ZogYUsNwUM7I9XOPJ\n1ik29N4FppUHxW3IAlSAm8H8dWZdlWBzt2t/+X/6hMhn7V57rzjP5k0xrzk2sDsK\nqP5x5gCRLpVXDm+JQFehNu/QYZ/DFNqN8Z5xbX81Er2E5ZAXK/Xj8wGBvdxb+hQn\nGCGRSsXaB0zAcT9jep/l47rauhcUipD1RxnVMASWUegTCOf6L9Zy6dSNQtiZIsw8\ntKkDZgRusAZd7pkBtYbNWnINEmOM4L2MxmCrIi8zZjMwqsdMZE0=\n=v3Fn\n-----END PGP SIGNATURE-----",
        "payload": "tree e2a1c41bef0d40e6fd0ead969c93db7702e02022\nparent 4371e635d68251202f94353aa3124d74c78f7ec9\nparent 5012a7912ee9fa35bc417cb073eebffd85f36c6c\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1626590347 +1200\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1626593590 +1200\n\nMerge bitcoin/bitcoin#22461: wallet: Change ScriptPubKeyMan::Upgrade default to True\n\n5012a7912ee9fa35bc417cb073eebffd85f36c6c Test that descriptor wallet upgrade does nothing (Andrew Chow)\n48bd7d3b7737656052d2c745ed40c7f6670842cf Change ScriptPubKeyMan::Upgrade to default to return true (Andrew Chow)\n\nPull request description:\n\n  When adding a new ScriptPubKeyMan, it's likely that there will be nothing for `Upgrade` to do. If it is called (via `upgradewallet`), then it should do nothing, successfully. This PR changes the default `ScriptPubKeyMan::Upgrade` function so that it returns a success instead of failure when doing nothing.\n\n  Fixes #22460\n\nACKs for top commit:\n  jonatack:\n    ACK 5012a7912ee9fa35bc417cb073eebffd85f36c6c\n  meshcollider:\n    utACK 5012a7912ee9fa35bc417cb073eebffd85f36c6c\n\nTree-SHA512: 578c6521e997f7bb5cc44be2cfe9e0a760b6bd4aa301026a6b8b3282e8757473e4cb9f68b2e79dacdc2b42dddae718450072e0a38817df205dfea177a74d7f3d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5341c3b1b35d7019d9f800636fc7ae8180d50b8e/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4371e635d68251202f94353aa3124d74c78f7ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4371e635d68251202f94353aa3124d74c78f7ec9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4371e635d68251202f94353aa3124d74c78f7ec9"
      },
      {
        "sha": "5012a7912ee9fa35bc417cb073eebffd85f36c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5012a7912ee9fa35bc417cb073eebffd85f36c6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5012a7912ee9fa35bc417cb073eebffd85f36c6c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e329e0cf8fdb697dbe88c69d34fc753a71061cff",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5341c3b1b35d7019d9f800636fc7ae8180d50b8e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5341c3b1b35d7019d9f800636fc7ae8180d50b8e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
        "patch": "@@ -207,7 +207,7 @@ class ScriptPubKeyMan\n     virtual bool CanGetAddresses(bool internal = false) const { return false; }\n \n     /** Upgrades the wallet to the specified version */\n-    virtual bool Upgrade(int prev_version, int new_version, bilingual_str& error) { return false; }\n+    virtual bool Upgrade(int prev_version, int new_version, bilingual_str& error) { return true; }\n \n     virtual bool HavePrivateKeys() const { return false; }\n "
      },
      {
        "sha": "4d34670ea944b53e673f4cdf38d33565485e0b80",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5341c3b1b35d7019d9f800636fc7ae8180d50b8e/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5341c3b1b35d7019d9f800636fc7ae8180d50b8e/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
        "patch": "@@ -94,10 +94,11 @@ def dumb_sync_blocks(self):\n     def test_upgradewallet(self, wallet, previous_version, requested_version=None, expected_version=None):\n         unchanged = expected_version == previous_version\n         new_version = previous_version if unchanged else expected_version if expected_version else requested_version\n-        assert_equal(wallet.getwalletinfo()[\"walletversion\"], previous_version)\n+        old_wallet_info = wallet.getwalletinfo()\n+        assert_equal(old_wallet_info[\"walletversion\"], previous_version)\n         assert_equal(wallet.upgradewallet(requested_version),\n             {\n-                \"wallet_name\": \"\",\n+                \"wallet_name\": old_wallet_info[\"walletname\"],\n                 \"previous_version\": previous_version,\n                 \"current_version\": new_version,\n                 \"result\": \"Already at latest version. Wallet version unchanged.\" if unchanged else \"Wallet upgraded successfully from version {} to version {}.\".format(previous_version, new_version),\n@@ -352,6 +353,11 @@ def copy_split_hd():\n         v16_3_kvs = dump_bdb_kv(v16_3_wallet)\n         assert b'\\x0adefaultkey' not in v16_3_kvs\n \n+        if self.is_sqlite_compiled():\n+            self.log.info(\"Checking that descriptor wallets do nothing, successfully\")\n+            self.nodes[0].createwallet(wallet_name=\"desc_upgrade\", descriptors=True)\n+            desc_wallet = self.nodes[0].get_wallet_rpc(\"desc_upgrade\")\n+            self.test_upgradewallet(desc_wallet, previous_version=169900, expected_version=169900)\n \n if __name__ == '__main__':\n     UpgradeWalletTest().main()"
      }
    ]
  },
  {
    "sha": "0eea1dfe80259daa1fea2732f65a3172ca942e5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWVhMWRmZTgwMjU5ZGFhMWZlYTI3MzJmNjVhMzE3MmNhOTQyZTVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-18T07:45:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-18T07:46:06Z"
      },
      "message": "Merge bitcoin/bitcoin#22445: fuzz: Move implementations of non-template fuzz helpers from util.h to util.cpp\n\na2aca207b1ad00ec05d7533dbd75bbff830e1d75 Move implementations of non-template fuzz helpers (Sriram)\n\nPull request description:\n\n  There are 78 cpp files that include `util.h` (`grep -iIr \"#include <test/fuzz/util.h>\" src/test/fuzz | wc -l`). Modifying the implementation of a fuzz helper in `src/test/fuzz/util.h` will cause all fuzz tests to be recompiled. Keeping the declarations of these non-template fuzz helpers in `util.h` and moving their implementations to `util.cpp` will skip the redundant recompilation of all the fuzz tests, and builds these helpers only once in `util.cpp`.\n\n  Functions moved from `util.h` to `util.cpp`:\n  - `ConsumeTxMemPoolEntry`\n  - `ContainsSpentInput`\n  - `ConsumeNetAddr`\n  - Methods of `FuzzedFileProvider::(open, read, write, seek, close)`\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK a2aca207b1ad00ec05d7533dbd75bbff830e1d75 \ud83c\udf42\n\nTree-SHA512: e7037ebb86d0fc56048e4f3d8733eefc21da11683b09d2b22926bda410719628d89c52ddd9b4c18aa243607a66fdb4d13a63e62ca010e66b3ec9174fd18107f0",
      "tree": {
        "sha": "5442009c776ff8be04760de43e02ff1ca20a232c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5442009c776ff8be04760de43e02ff1ca20a232c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eea1dfe80259daa1fea2732f65a3172ca942e5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUirkwv+NRkaczGhUnsvq+vvcPVXzQgdYtLrC7e/DIwC/rSwaPn+Z5QldCbHWDH1\nB3loXyRrVrzP/DWtgxVFSmC7KHnYmv/ZRc3m2YIJzUpso6uWczG33dWDVfhMfS/l\nXCrTYL7O2NU/Es2bBId4MfH8h1Nnd7jA5iufeX+FomDMaxFkk0U4Nx7DyUYNAW5P\n1ADQ7NTiHcGXUR/m7PmrcfDgEIeWhKYCFaRznyVwBwJK9deNuhHcJm91ZwpR9P09\n56DEfsQrN6QYfbyUaHMse5MkIXtvSG/lRP8qLf1E7u8qREmRSMsh62k0CusmETf5\neKQpEc2GOOBJ/5liWe114HSfvauHYL3hjQUBHGnCkMpKWGeotgBikkkD3aAu/eHl\nQr2YBGW6aeHxK1SZrvyrk0BDK6CmTnm2qP/d+EyRuLCvWjTvr4hVVQI9Z/GifqV+\n4kYDiYU76QvqMN/JO3kZiBzZXSf3NW06nxfsczRs5HDv2yxexuY7pNrdHI+MgH4a\nsMFtSPxk\n=dtjL\n-----END PGP SIGNATURE-----",
        "payload": "tree 5442009c776ff8be04760de43e02ff1ca20a232c\nparent 5341c3b1b35d7019d9f800636fc7ae8180d50b8e\nparent a2aca207b1ad00ec05d7533dbd75bbff830e1d75\nauthor MarcoFalke <falke.marco@gmail.com> 1626594358 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626594366 +0200\n\nMerge bitcoin/bitcoin#22445: fuzz: Move implementations of non-template fuzz helpers from util.h to util.cpp\n\na2aca207b1ad00ec05d7533dbd75bbff830e1d75 Move implementations of non-template fuzz helpers (Sriram)\n\nPull request description:\n\n  There are 78 cpp files that include `util.h` (`grep -iIr \"#include <test/fuzz/util.h>\" src/test/fuzz | wc -l`). Modifying the implementation of a fuzz helper in `src/test/fuzz/util.h` will cause all fuzz tests to be recompiled. Keeping the declarations of these non-template fuzz helpers in `util.h` and moving their implementations to `util.cpp` will skip the redundant recompilation of all the fuzz tests, and builds these helpers only once in `util.cpp`.\n\n  Functions moved from `util.h` to `util.cpp`:\n  - `ConsumeTxMemPoolEntry`\n  - `ContainsSpentInput`\n  - `ConsumeNetAddr`\n  - Methods of `FuzzedFileProvider::(open, read, write, seek, close)`\n\nACKs for top commit:\n  MarcoFalke:\n    review ACK a2aca207b1ad00ec05d7533dbd75bbff830e1d75 \ud83c\udf42\n\nTree-SHA512: e7037ebb86d0fc56048e4f3d8733eefc21da11683b09d2b22926bda410719628d89c52ddd9b4c18aa243607a66fdb4d13a63e62ca010e66b3ec9174fd18107f0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eea1dfe80259daa1fea2732f65a3172ca942e5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eea1dfe80259daa1fea2732f65a3172ca942e5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eea1dfe80259daa1fea2732f65a3172ca942e5a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5341c3b1b35d7019d9f800636fc7ae8180d50b8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5341c3b1b35d7019d9f800636fc7ae8180d50b8e"
      },
      {
        "sha": "a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2aca207b1ad00ec05d7533dbd75bbff830e1d75"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 163,
      "deletions": 147
    },
    "files": [
      {
        "sha": "0d87f687d3a3f6f7f38eded08232d07ed6fb0ae6",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea1dfe80259daa1fea2732f65a3172ca942e5a/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea1dfe80259daa1fea2732f65a3172ca942e5a/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=0eea1dfe80259daa1fea2732f65a3172ca942e5a",
        "patch": "@@ -343,3 +343,158 @@ CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) no\n     Assert(call_size == std::variant_size_v<CTxDestination>);\n     return tx_destination;\n }\n+\n+CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n+{\n+    // Avoid:\n+    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n+    //\n+    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n+    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n+    assert(MoneyRange(fee));\n+    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n+    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n+    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n+}\n+\n+bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+{\n+    for (const CTxIn& tx_in : tx.vin) {\n+        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n+        if (coin.IsSpent()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n+    CNetAddr net_addr;\n+    if (network == Network::NET_IPV4) {\n+        in_addr v4_addr = {};\n+        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+        net_addr = CNetAddr{v4_addr};\n+    } else if (network == Network::NET_IPV6) {\n+        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n+            in6_addr v6_addr = {};\n+            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n+            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        }\n+    } else if (network == Network::NET_INTERNAL) {\n+        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    } else if (network == Network::NET_ONION) {\n+        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    }\n+    return net_addr;\n+}\n+\n+FILE* FuzzedFileProvider::open()\n+{\n+    SetFuzzedErrNo(m_fuzzed_data_provider);\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return nullptr;\n+    }\n+    std::string mode;\n+    CallOneOf(\n+        m_fuzzed_data_provider,\n+        [&] {\n+            mode = \"r\";\n+        },\n+        [&] {\n+            mode = \"r+\";\n+        },\n+        [&] {\n+            mode = \"w\";\n+        },\n+        [&] {\n+            mode = \"w+\";\n+        },\n+        [&] {\n+            mode = \"a\";\n+        },\n+        [&] {\n+            mode = \"a+\";\n+        });\n+#if defined _GNU_SOURCE && !defined __ANDROID__\n+    const cookie_io_functions_t io_hooks = {\n+        FuzzedFileProvider::read,\n+        FuzzedFileProvider::write,\n+        FuzzedFileProvider::seek,\n+        FuzzedFileProvider::close,\n+    };\n+    return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+    (void)mode;\n+    return nullptr;\n+#endif\n+}\n+\n+ssize_t FuzzedFileProvider::read(void* cookie, char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+    if (random_bytes.empty()) {\n+        return 0;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += random_bytes.size();\n+    return random_bytes.size();\n+}\n+\n+ssize_t FuzzedFileProvider::write(void* cookie, const char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += n;\n+    return n;\n+}\n+\n+int FuzzedFileProvider::seek(void* cookie, int64_t* offset, int whence)\n+{\n+    assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    int64_t new_offset = 0;\n+    if (whence == SEEK_SET) {\n+        new_offset = *offset;\n+    } else if (whence == SEEK_CUR) {\n+        if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n+            return -1;\n+        }\n+        new_offset = fuzzed_file->m_offset + *offset;\n+    } else if (whence == SEEK_END) {\n+        const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n+        if (AdditionOverflow(n, *offset)) {\n+            return -1;\n+        }\n+        new_offset = n + *offset;\n+    }\n+    if (new_offset < 0) {\n+        return -1;\n+    }\n+    fuzzed_file->m_offset = new_offset;\n+    *offset = new_offset;\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}\n+\n+int FuzzedFileProvider::close(void* cookie)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}"
      },
      {
        "sha": "bb017b3497fb55f1d1539c28e94d91525d3b7352",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 147,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea1dfe80259daa1fea2732f65a3172ca942e5a/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea1dfe80259daa1fea2732f65a3172ca942e5a/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=0eea1dfe80259daa1fea2732f65a3172ca942e5a",
        "patch": "@@ -164,20 +164,7 @@ template <typename WeakEnumType, size_t size>\n     return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n }\n \n-[[nodiscard]] inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n-{\n-    // Avoid:\n-    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n-    //\n-    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n-    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n-    assert(MoneyRange(fee));\n-    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n-    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n-    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n-    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n-    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n-}\n+[[nodiscard]] CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept;\n \n [[nodiscard]] CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n@@ -215,16 +202,7 @@ template <class T>\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n-[[nodiscard]] inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n-{\n-    for (const CTxIn& tx_in : tx.vin) {\n-        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n-        if (coin.IsSpent()) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n+[[nodiscard]] bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept;\n \n /**\n  * Sets errno to a value selected from the given std::array `errnos`.\n@@ -259,27 +237,7 @@ inline void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     return result;\n }\n \n-inline CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n-    CNetAddr net_addr;\n-    if (network == Network::NET_IPV4) {\n-        in_addr v4_addr = {};\n-        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        net_addr = CNetAddr{v4_addr};\n-    } else if (network == Network::NET_IPV6) {\n-        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n-            in6_addr v6_addr = {};\n-            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n-            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n-        }\n-    } else if (network == Network::NET_INTERNAL) {\n-        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    } else if (network == Network::NET_ONION) {\n-        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    }\n-    return net_addr;\n-}\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n inline CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n@@ -329,112 +287,15 @@ class FuzzedFileProvider\n     {\n     }\n \n-    FILE* open()\n-    {\n-        SetFuzzedErrNo(m_fuzzed_data_provider);\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            return nullptr;\n-        }\n-        std::string mode;\n-        CallOneOf(\n-            m_fuzzed_data_provider,\n-            [&] {\n-                mode = \"r\";\n-            },\n-            [&] {\n-                mode = \"r+\";\n-            },\n-            [&] {\n-                mode = \"w\";\n-            },\n-            [&] {\n-                mode = \"w+\";\n-            },\n-            [&] {\n-                mode = \"a\";\n-            },\n-            [&] {\n-                mode = \"a+\";\n-            });\n-#if defined _GNU_SOURCE && !defined __ANDROID__\n-        const cookie_io_functions_t io_hooks = {\n-            FuzzedFileProvider::read,\n-            FuzzedFileProvider::write,\n-            FuzzedFileProvider::seek,\n-            FuzzedFileProvider::close,\n-        };\n-        return fopencookie(this, mode.c_str(), io_hooks);\n-#else\n-        (void)mode;\n-        return nullptr;\n-#endif\n-    }\n+    FILE* open();\n \n-    static ssize_t read(void* cookie, char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n-        if (random_bytes.empty()) {\n-            return 0;\n-        }\n-        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += random_bytes.size();\n-        return random_bytes.size();\n-    }\n+    static ssize_t read(void* cookie, char* buf, size_t size);\n \n-    static ssize_t write(void* cookie, const char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += n;\n-        return n;\n-    }\n+    static ssize_t write(void* cookie, const char* buf, size_t size);\n \n-    static int seek(void* cookie, int64_t* offset, int whence)\n-    {\n-        assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        int64_t new_offset = 0;\n-        if (whence == SEEK_SET) {\n-            new_offset = *offset;\n-        } else if (whence == SEEK_CUR) {\n-            if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n-                return -1;\n-            }\n-            new_offset = fuzzed_file->m_offset + *offset;\n-        } else if (whence == SEEK_END) {\n-            const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n-            if (AdditionOverflow(n, *offset)) {\n-                return -1;\n-            }\n-            new_offset = n + *offset;\n-        }\n-        if (new_offset < 0) {\n-            return -1;\n-        }\n-        fuzzed_file->m_offset = new_offset;\n-        *offset = new_offset;\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int seek(void* cookie, int64_t* offset, int whence);\n \n-    static int close(void* cookie)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int close(void* cookie);\n };\n \n [[nodiscard]] inline FuzzedFileProvider ConsumeFile(FuzzedDataProvider& fuzzed_data_provider) noexcept"
      }
    ]
  },
  {
    "sha": "e8f85e0e86e92e583b8984455b7bf9d0a777578a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGY4NWUwZTg2ZTkyZTU4M2I4OTg0NDU1YjdiZjlkMGE3Nzc1Nzhh",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-07-18T07:55:53Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-07-18T08:07:52Z"
      },
      "message": "Merge bitcoin/bitcoin#22421: Make IsSegWitOutput return true for taproot outputs\n\n8465978f235e2e43feb5dabe2a4d61026343b6ab Make IsSegWitOutput return true for taproot outputs (Pieter Wuille)\n\nPull request description:\n\n  This fixes a bug: currently `utxoupdatepsbt` will not fill in UTXO data for PSBTs spending taproot outputs.\n\nACKs for top commit:\n  achow101:\n    Code Review ACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n  jonatack:\n    ACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n  meshcollider:\n    utACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n\nTree-SHA512: 2f8f873450bef4b5a4ce5962a231297b386c6b1445e69ce5f36ab28eca7343be3a11bc09c38534b0f75e6f99ba15d78d3ba5d484f6c63e5a9775e1f3f55a74e0",
      "tree": {
        "sha": "07b64bd78522a57d8f65c6731a7bf7a41f75f575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b64bd78522a57d8f65c6731a7bf7a41f75f575"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAmDz4VgACgkQ0wARbhyH\nWj30uhAApeCOakGBMnHsWgTRvh972O3KdidU3Dslpupuwo+LtMhuhd1F+Uvl/miQ\n3qgT7virgl+q0043bHdPfAVNMUru1GMurd5QpVgb3BxXVNU0UNSsbMYtrfuoa8Ip\nmmVTRT1UHDkNHmoY7uG1Kvpe2Id0fz+Gq2714zHpHTeyf8BXuwdX7EUn2peNB6mM\nBLjNkEhLVv8I73tdl8O4kimdAIVkxqR1rd6VbGDnIyIk8ziZFP/BfMNIbgNv1Khs\nqh7VRmUOTNzxrxTuhs+4V+IqX399zxSER2XxgQNHJ1IuvIceOq3o5PCgAjzf3z71\nWoo9qstqG35LNbfPkFAl5T/xtOI0d+sAOHBjDKL02s/gc5CtautOeGY8FgQ5OL1M\nHZT84/qTNElnc4O8xgJoydsT7Vc4yrv894Wv3e80r01cJiq4XU5vDLBya2XfAI1r\ngKRbWYiPazjQHGd9wJJZAfeky7u2ZRllrEwFKQ7uWYczfcCyo8h87ksJIafbYZVZ\njCK8oKdX0dX6Xy1hX9SI1Eyw1amWFEz4RWFLSjhx08ZoQSG5TmioVuOtMjiHlWZz\nOH/k9ZmTVyiWFExE5NcbjxCgIxu2M9u0OkwTsDs8HtTbhOaGz5WHiq3xFuV2jfyt\n7VORH7Q+ztA8teOwXkOdR4+Ea4VD5khUP49Zgj1thWDyVTk0qO8=\n=Djyn\n-----END PGP SIGNATURE-----",
        "payload": "tree 07b64bd78522a57d8f65c6731a7bf7a41f75f575\nparent 0eea1dfe80259daa1fea2732f65a3172ca942e5a\nparent 8465978f235e2e43feb5dabe2a4d61026343b6ab\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1626594953 +1200\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1626595672 +1200\n\nMerge bitcoin/bitcoin#22421: Make IsSegWitOutput return true for taproot outputs\n\n8465978f235e2e43feb5dabe2a4d61026343b6ab Make IsSegWitOutput return true for taproot outputs (Pieter Wuille)\n\nPull request description:\n\n  This fixes a bug: currently `utxoupdatepsbt` will not fill in UTXO data for PSBTs spending taproot outputs.\n\nACKs for top commit:\n  achow101:\n    Code Review ACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n  jonatack:\n    ACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n  meshcollider:\n    utACK 8465978f235e2e43feb5dabe2a4d61026343b6ab\n\nTree-SHA512: 2f8f873450bef4b5a4ce5962a231297b386c6b1445e69ce5f36ab28eca7343be3a11bc09c38534b0f75e6f99ba15d78d3ba5d484f6c63e5a9775e1f3f55a74e0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0eea1dfe80259daa1fea2732f65a3172ca942e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eea1dfe80259daa1fea2732f65a3172ca942e5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0eea1dfe80259daa1fea2732f65a3172ca942e5a"
      },
      {
        "sha": "8465978f235e2e43feb5dabe2a4d61026343b6ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465978f235e2e43feb5dabe2a4d61026343b6ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8465978f235e2e43feb5dabe2a4d61026343b6ab"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7864e690d8d111d8585460a285e9c59ef3125ff7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f85e0e86e92e583b8984455b7bf9d0a777578a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f85e0e86e92e583b8984455b7bf9d0a777578a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "patch": "@@ -612,15 +612,18 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n \n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n-    std::vector<valtype> solutions;\n-    auto whichtype = Solver(script, solutions);\n-    if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n-    if (whichtype == TxoutType::SCRIPTHASH) {\n-        auto h160 = uint160(solutions[0]);\n-        CScript subscript;\n-        if (provider.GetCScript(CScriptID{h160}, subscript)) {\n-            whichtype = Solver(subscript, solutions);\n-            if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n+    int version;\n+    valtype program;\n+    if (script.IsWitnessProgram(version, program)) return true;\n+    if (script.IsPayToScriptHash()) {\n+        std::vector<valtype> solutions;\n+        auto whichtype = Solver(script, solutions);\n+        if (whichtype == TxoutType::SCRIPTHASH) {\n+            auto h160 = uint160(solutions[0]);\n+            CScript subscript;\n+            if (provider.GetCScript(CScriptID{h160}, subscript)) {\n+                if (subscript.IsWitnessProgram(version, program)) return true;\n+            }\n         }\n     }\n     return false;"
      }
    ]
  },
  {
    "sha": "cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDU3ZjRkY2QyYTRjN2IwMWU0NjRhOTIwNDFjMzJhNmUyZTg1ZTQ5",
    "commit": {
      "author": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-06-13T20:03:40Z"
      },
      "committer": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-07-18T20:01:27Z"
      },
      "message": "Avoid remaking makefiles.\n\nThe purpose of this commit is to reduce the amount of work make does.\nThis simplifies make -d output and improves performance (this\nperformance gain is hardly noticeable).\n\nBy default make remakes all makefiles.\nThis build system does not have rules to remake makefiles.\nThis commit adds an explicit rule for each makefile.\n\nEach rule serves 2 purposes.\n1. Each rule prevents make from searching for an implicit rule.\n2. Once found, the rule prevents make from remaking the makefile.\nThat's why the rule is double colon. Make won't use a double colon rule to\nremake a makefile. See\nhttps://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles.\n\n$ # on this branch.\n$ make -d print-host |grep expat\nReading makefile 'packages/expat.mk' (search path) (no ~ expansion)...\nMakefile 'packages/expat.mk' might loop; not remaking it.\n$ git co master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n$ make -d print-host |grep expat |wc\n    367    1916   19918\n$\n\nMake prints 367 lines per makefile.\nWith this change make prints 2 lines per makefile.",
      "tree": {
        "sha": "7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/comments",
    "author": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f85e0e86e92e583b8984455b7bf9d0a777578a"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7a6ab89a82bbd50f1c0689e1168c4962eff08e41",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -285,3 +285,4 @@ $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n .PHONY: FORCE\n+Makefile:: ;"
      },
      {
        "sha": "ddc9c6c6f1013be1390926f1094b09889b34157d",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -21,3 +21,4 @@ darwin_NM:=$(shell xcrun -f nm)\n darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n darwin_native_binutils=\n darwin_native_toolchain=\n+builders/darwin.mk:: ;"
      },
      {
        "sha": "f59823424abac9620696b00db8daac3c29cccf71",
        "filename": "depends/builders/default.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/default.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -18,3 +18,4 @@ build_$(build_arch)_$(build_os)_$1 += $(build_$(build_os)_$1)\n build_$1=$$(build_$(build_arch)_$(build_os)_$1)\n endef\n $(foreach flags, CFLAGS CXXFLAGS LDFLAGS, $(eval $(call add_build_flags_func,$(flags))))\n+builders/default.mk:: ;"
      },
      {
        "sha": "c88e639113c8991bcd9bcda0760ab5fca0607729",
        "filename": "depends/builders/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/builders/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/linux.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -1,2 +1,3 @@\n build_linux_SHA256SUM = sha256sum\n build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n+builders/linux.mk:: ;"
      },
      {
        "sha": "d7b4ad6ef9a4aa0dff2fb77ab3c8dc641df89e34",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -280,3 +280,4 @@ $(foreach package,$(all_packages),$(eval $(call int_add_cmds,$(package))))\n \n #special exception: if a toolchain package exists, all non-native packages depend on it\n $(foreach package,$(packages),$(eval $($(package)_extracted): |$($($(host_arch)_$(host_os)_native_toolchain)_cached) $($($(host_arch)_$(host_os)_native_binutils)_cached) ))\n+funcs.mk:: ;"
      },
      {
        "sha": "a7a7ed9b9bb50c5ca5af8d6be3347522808b0b6f",
        "filename": "depends/hosts/android.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -10,3 +10,4 @@ android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang\n android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ranlib\n endif\n android_cmake_system=Android\n+hosts/android.mk:: ;"
      },
      {
        "sha": "36faec3dd0d6c8505f23a2eac4290243eb742431",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -119,3 +119,4 @@ darwin_debug_CFLAGS=-O1\n darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n \n darwin_cmake_system=Darwin\n+hosts/darwin.mk:: ;"
      },
      {
        "sha": "f7470c96edbaa792d8d6cb3885471c5bbc9402bd",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -37,3 +37,4 @@ endef\n \n $(foreach tool,CC CXX AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL,$(eval $(call add_host_tool_func,$(tool))))\n $(foreach flags,CFLAGS CXXFLAGS CPPFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))\n+hosts/default.mk:: ;"
      },
      {
        "sha": "216ea04f51ea7067dc93d60bc32416978c3bd61c",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -30,3 +30,4 @@ x86_64_linux_CC=$(default_host_CC) -m64\n x86_64_linux_CXX=$(default_host_CXX) -m64\n endif\n linux_cmake_system=Linux\n+hosts/linux.mk:: ;"
      },
      {
        "sha": "b886c225d744e19a6276748ba43d6a2de6e47ef2",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -10,3 +10,4 @@ mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n \n mingw_cmake_system=Windows\n+hosts/mingw32.mk:: ;"
      },
      {
        "sha": "6495cb1280f4dd081f3bcce8e3a7c234ebd208c1",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -32,3 +32,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install_lib install_include\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "1308200cca5616ce9a0f95d74628417974310dfe",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -44,3 +44,4 @@ endef\n define $(package)_stage_cmds\n   b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "b2a6acded8e3c5498f968c05159108cb3549c1e0",
        "filename": "depends/packages/capnp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/capnp.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "0dac62a02c8ed7b723381c7c879581bf0fae8b99",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -25,3 +25,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "b6bea21d96a68863f362df95b869b55822a2c8e9",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "c79c4f492dfbc0fef8a8b7b992b57f223b69986d",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -25,3 +25,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "629bc62a935fca0d85c62d0b8d08a17351807ae8",
        "filename": "depends/packages/libXau.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libXau.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libXau.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXau.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -32,3 +32,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a3ba41bb63130e0a1df9dc3c94d3c84ad9f22094",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a94c2b99ddd0005c88dab5763e3a8a08c4562238",
        "filename": "depends/packages/libmultiprocess.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libmultiprocess.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "007d1123afade4351f691a5ad98ea065468a8635",
        "filename": "depends/packages/libnatpmp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libnatpmp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libnatpmp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libnatpmp.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -20,3 +20,4 @@ define $(package)_stage_cmds\n   install *.h $($(package)_staging_prefix_dir)/include &&\\\n   install libnatpmp.a $($(package)_staging_prefix_dir)/lib\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "f8b5e7314f1d69c4c410a4b3f5aa40c14ffc642f",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -42,3 +42,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf share lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "9dbfa7febabd08e3079456b55948d801b26b3d20",
        "filename": "depends/packages/libxkbcommon.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libxkbcommon.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/libxkbcommon.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxkbcommon.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -30,3 +30,4 @@ define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n \n+packages/$(package).mk:: ;"
      },
      {
        "sha": "92e9bc1f0467ff7ea014b4e9838fde38897a3e19",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -25,3 +25,4 @@ define $(package)_stage_cmds\n \tinstall *.h $($(package)_staging_prefix_dir)/include/miniupnpc &&\\\n \tinstall libminiupnpc.a $($(package)_staging_prefix_dir)/lib\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "559a42ff28eab90e99040f8af694f9a402d90cc6",
        "filename": "depends/packages/native_b2.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_b2.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_b2.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_b2.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -18,3 +18,4 @@ define $(package)_stage_cmds\n   mkdir -p \"$($(package)_staging_prefix_dir)\"/bin/ && \\\n   cp b2 \"$($(package)_staging_prefix_dir)\"/bin/\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e4740158d60f28b75c7a05af0f1cc7770472f5e7",
        "filename": "depends/packages/native_capnp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_capnp.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "fe9de03eec8586e05fbbc84590c5845432641703",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf share\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "1841bf31aa41d3bc92ace5c1a8efcde68a6a8d95",
        "filename": "depends/packages/native_clang.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_clang.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_clang.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_clang.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_postprocess_cmds\n   rmdir include\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "f29a17c02b73ff85a31c0c90c5a967cc8aed9667",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -13,3 +13,4 @@ define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n     python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e13a590b3c8f34f74ce53c20f31b1f15f39aff87",
        "filename": "depends/packages/native_libdmg-hfsplus.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libdmg-hfsplus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libdmg-hfsplus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libdmg-hfsplus.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -22,3 +22,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) -C dmg install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "21946ed4018997804eddffbc14a0d09beb25ff8c",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "af9531028a32e39dc3891fa6f49cff5e3d39e226",
        "filename": "depends/packages/native_libtapi.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libtapi.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_libtapi.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libtapi.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -18,3 +18,4 @@ define $(package)_stage_cmds\n   mkdir -p $($(package)_staging_prefix_dir)/include/llvm-c && \\\n   cp src/llvm/include/llvm-c/lto.h $($(package)_staging_prefix_dir)/include/llvm-c\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "39a2f99e22ba806fa9b4b815dce0c9238a3d53ab",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -13,3 +13,4 @@ define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n     python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "3cd7d8795974b7e097249772bdac1d1816e04724",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -31,3 +31,4 @@ darwin_native_packages+= native_clang\n endif\n \n endif\n+packages/packages.mk:: ;"
      },
      {
        "sha": "030648fd98b0e901dfab061afc3a9e6c7e2e4bb1",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "5205ae5db2f806f8af723158840f219efc9b4053",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -267,3 +267,4 @@ define $(package)_postprocess_cmds\n   rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n   rm -f lib/lib*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a8b62aee35d90292ee1cf6915b73e8dc746116d2",
        "filename": "depends/packages/sqlite.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/sqlite.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/sqlite.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/sqlite.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e2816074c40a3a2b187d73c33532429189caeeb3",
        "filename": "depends/packages/xcb_proto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/xcb_proto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/xcb_proto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xcb_proto.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -20,3 +20,4 @@ define $(package)_postprocess_cmds\n   find -name \"*.pyc\" -delete && \\\n   find -name \"*.pyo\" -delete\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "ee0de2df0e966835a10352fe9c87624a7521af47",
        "filename": "depends/packages/xproto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/xproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/xproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xproto.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "2bc1681a53758345f05a232bce6e902d73f23b20",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "patch": "@@ -35,3 +35,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf bin share lib/*.la\n endef\n+packages/$(package).mk:: ;"
      }
    ]
  },
  {
    "sha": "61984af1d610db6fd81ff75d9ddd80feb170929f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTk4NGFmMWQ2MTBkYjZmZDgxZmY3NWQ5ZGRkODBmZWIxNzA5Mjlm",
    "commit": {
      "author": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-07-18T20:06:03Z"
      },
      "committer": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-07-18T20:06:03Z"
      },
      "message": "Merge branch 'avoid_rebuilding_makefiles' of github.com:dgoncharov/bitcoin into avoid_rebuilding_makefiles\n\n* 'avoid_rebuilding_makefiles' of github.com:dgoncharov/bitcoin:\n  Avoid remaking makefiles.",
      "tree": {
        "sha": "7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61984af1d610db6fd81ff75d9ddd80feb170929f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61984af1d610db6fd81ff75d9ddd80feb170929f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61984af1d610db6fd81ff75d9ddd80feb170929f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61984af1d610db6fd81ff75d9ddd80feb170929f/comments",
    "author": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd57f4dcd2a4c7b01e464a92041c32a6e2e85e49"
      },
      {
        "sha": "f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7353a1e47fac1ccc66f1cee636e8182f1c6f380"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  }
]