[
  {
    "sha": "a622a1768325d01eeb16f42340cdd36e722a3fa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjIyYTE3NjgzMjVkMDFlZWIxNmY0MjM0MGNkZDM2ZTcyMmEzZmE4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-21T23:00:52Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-24T22:56:50Z"
      },
      "message": "Fix constness of ArgsManager methods",
      "tree": {
        "sha": "080718bb38d65ffdb85f48088c8a3f637525b95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/080718bb38d65ffdb85f48088c8a3f637525b95b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a622a1768325d01eeb16f42340cdd36e722a3fa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a622a1768325d01eeb16f42340cdd36e722a3fa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a622a1768325d01eeb16f42340cdd36e722a3fa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a622a1768325d01eeb16f42340cdd36e722a3fa8/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c70e845aa9277a4ceb8307f0ad8f1bf7511e3c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c70e845aa9277a4ceb8307f0ad8f1bf7511e3c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c70e845aa9277a4ceb8307f0ad8f1bf7511e3c8"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 29,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d3720ab7bcfff6b1e904c1dab6346bd71c09df50",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a622a1768325d01eeb16f42340cdd36e722a3fa8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a622a1768325d01eeb16f42340cdd36e722a3fa8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a622a1768325d01eeb16f42340cdd36e722a3fa8",
        "patch": "@@ -419,49 +419,48 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)\n+std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n     LOCK(cs_args);\n-    if (IsArgSet(strArg))\n-        return mapMultiArgs.at(strArg);\n+    auto it = mapMultiArgs.find(strArg);\n+    if (it != mapMultiArgs.end()) return it->second;\n     return {};\n }\n \n-bool ArgsManager::IsArgSet(const std::string& strArg)\n+bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n     LOCK(cs_args);\n     return mapArgs.count(strArg);\n }\n \n-std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n     LOCK(cs_args);\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n+    auto it = mapArgs.find(strArg);\n+    if (it != mapArgs.end()) return it->second;\n     return strDefault;\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n     LOCK(cs_args);\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n+    auto it = mapArgs.find(strArg);\n+    if (it != mapArgs.end()) return atoi64(it->second);\n     return nDefault;\n }\n \n-bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault)\n+bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n     LOCK(cs_args);\n-    if (mapArgs.count(strArg))\n-        return InterpretBool(mapArgs[strArg]);\n+    auto it = mapArgs.find(strArg);\n+    if (it != mapArgs.end()) return InterpretBool(it->second);\n     return fDefault;\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n-    if (mapArgs.count(strArg))\n-        return false;\n+    if (IsArgSet(strArg)) return false;\n     ForceSetArg(strArg, strValue);\n     return true;\n }\n@@ -478,8 +477,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n-    mapMultiArgs[strArg].clear();\n-    mapMultiArgs[strArg].push_back(strValue);\n+    mapMultiArgs[strArg] = {strValue};\n }\n \n "
      },
      {
        "sha": "757a6abdf615b97465dec02c47d590f2b25c16ec",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a622a1768325d01eeb16f42340cdd36e722a3fa8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a622a1768325d01eeb16f42340cdd36e722a3fa8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a622a1768325d01eeb16f42340cdd36e722a3fa8",
        "patch": "@@ -195,21 +195,28 @@ inline bool IsSwitchChar(char c)\n class ArgsManager\n {\n protected:\n-    CCriticalSection cs_args;\n+    mutable CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n-    std::map<std::string, std::vector<std::string> > mapMultiArgs;\n+    std::map<std::string, std::vector<std::string>> mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n-    std::vector<std::string> GetArgs(const std::string& strArg);\n+\n+    /**\n+     * Return a vector of strings of the given argument\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return command-line arguments\n+     */\n+    std::vector<std::string> GetArgs(const std::string& strArg) const;\n \n     /**\n      * Return true if the given argument has been manually set\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n      * @return true if the argument has been set\n      */\n-    bool IsArgSet(const std::string& strArg);\n+    bool IsArgSet(const std::string& strArg) const;\n \n     /**\n      * Return string argument or default value\n@@ -218,7 +225,7 @@ class ArgsManager\n      * @param strDefault (e.g. \"1\")\n      * @return command-line argument or default value\n      */\n-    std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+    std::string GetArg(const std::string& strArg, const std::string& strDefault) const;\n \n     /**\n      * Return integer argument or default value\n@@ -227,7 +234,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value\n@@ -236,7 +243,7 @@ class ArgsManager\n      * @param fDefault (true or false)\n      * @return command-line argument or default value\n      */\n-    bool GetBoolArg(const std::string& strArg, bool fDefault);\n+    bool GetBoolArg(const std::string& strArg, bool fDefault) const;\n \n     /**\n      * Set an argument if it doesn't already have a value"
      }
    ]
  }
]