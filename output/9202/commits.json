[
  {
    "sha": "35328187463a7078b4206e394c21d5515929c7de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTMyODE4NzQ2M2E3MDc4YjQyMDZlMzk0YzIxZDU1MTU5MjljN2Rl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-22T09:22:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-22T11:20:57Z"
      },
      "message": "bench: Add support for measuring CPU cycles\n\nThis adds cycle min/max/avg to the statistics.\n\nSupported on x86 and x86_64 (natively through rdtsc), as well as Linux\n(perf syscall).",
      "tree": {
        "sha": "e310e5beca1e7ad006cb48423c64f72d6a4d00fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e310e5beca1e7ad006cb48423c64f72d6a4d00fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35328187463a7078b4206e394c21d5515929c7de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35328187463a7078b4206e394c21d5515929c7de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35328187463a7078b4206e394c21d5515929c7de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35328187463a7078b4206e394c21d5515929c7de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b2eddcc8fd407aa62fd280f4767e3034a7eb04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b2eddcc8fd407aa62fd280f4767e3034a7eb04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b2eddcc8fd407aa62fd280f4767e3034a7eb04"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 121,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e58bd9dfbf807a218bedc30815598a018e02cda6",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35328187463a7078b4206e394c21d5515929c7de/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35328187463a7078b4206e394c21d5515929c7de/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=35328187463a7078b4206e394c21d5515929c7de",
        "patch": "@@ -22,7 +22,9 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/mempool_eviction.cpp \\\n   bench/verify_script.cpp \\\n   bench/base58.cpp \\\n-  bench/lockedpool.cpp\n+  bench/lockedpool.cpp \\\n+  bench/perf.cpp \\\n+  bench/perf.h\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n "
      },
      {
        "sha": "af3d152c9a4ce87ce4472bc5dbd1dc619c9a607a",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35328187463a7078b4206e394c21d5515929c7de/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35328187463a7078b4206e394c21d5515929c7de/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=35328187463a7078b4206e394c21d5515929c7de",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bench.h\"\n+#include \"perf.h\"\n \n #include <iostream>\n #include <iomanip>\n@@ -26,7 +27,9 @@ BenchRunner::BenchRunner(std::string name, BenchFunction func)\n void\n BenchRunner::RunAll(double elapsedTimeForOne)\n {\n-    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+    perf_init();\n+    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n+              << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n     for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n          it != benchmarks.end(); ++it) {\n@@ -35,6 +38,7 @@ BenchRunner::RunAll(double elapsedTimeForOne)\n         BenchFunction& func = it->second;\n         func(state);\n     }\n+    perf_fini();\n }\n \n bool State::KeepRunning()\n@@ -44,15 +48,24 @@ bool State::KeepRunning()\n       return true;\n     }\n     double now;\n+    uint64_t nowCycles;\n     if (count == 0) {\n         lastTime = beginTime = now = gettimedouble();\n+        lastCycles = beginCycles = nowCycles = perf_cpucycles();\n     }\n     else {\n         now = gettimedouble();\n         double elapsed = now - lastTime;\n         double elapsedOne = elapsed * countMaskInv;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n+\n+        // We only use relative values, so don't have to handle 64-bit wrap-around specially\n+        nowCycles = perf_cpucycles();\n+        uint64_t elapsedOneCycles = (nowCycles - lastCycles) * countMaskInv;\n+        if (elapsedOneCycles < minCycles) minCycles = elapsedOneCycles;\n+        if (elapsedOneCycles > maxCycles) maxCycles = elapsedOneCycles;\n+\n         if (elapsed*128 < maxElapsed) {\n           // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n           // The restart avoids including the overhead of this code in the measurement.\n@@ -61,6 +74,8 @@ bool State::KeepRunning()\n           count = 0;\n           minTime = std::numeric_limits<double>::max();\n           maxTime = std::numeric_limits<double>::min();\n+          minCycles = std::numeric_limits<uint64_t>::max();\n+          maxCycles = std::numeric_limits<uint64_t>::min();\n           return true;\n         }\n         if (elapsed*16 < maxElapsed) {\n@@ -72,6 +87,7 @@ bool State::KeepRunning()\n         }\n     }\n     lastTime = now;\n+    lastCycles = nowCycles;\n     ++count;\n \n     if (now - beginTime < maxElapsed) return true; // Keep going\n@@ -80,7 +96,9 @@ bool State::KeepRunning()\n \n     // Output results\n     double average = (now-beginTime)/count;\n-    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+    int64_t averageCycles = (nowCycles-beginCycles)/count;\n+    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \",\"\n+              << minCycles << \",\" << maxCycles << \",\" << averageCycles << \"\\n\";\n \n     return false;\n }"
      },
      {
        "sha": "caf73e949b4f76a34537252f1b8fb4a6e4fb5182",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35328187463a7078b4206e394c21d5515929c7de/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35328187463a7078b4206e394c21d5515929c7de/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=35328187463a7078b4206e394c21d5515929c7de",
        "patch": "@@ -41,12 +41,18 @@ namespace benchmark {\n         double maxElapsed;\n         double beginTime;\n         double lastTime, minTime, maxTime, countMaskInv;\n-        int64_t count;\n-        int64_t countMask;\n+        uint64_t count;\n+        uint64_t countMask;\n+        uint64_t beginCycles;\n+        uint64_t lastCycles;\n+        uint64_t minCycles;\n+        uint64_t maxCycles;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n+            minCycles = std::numeric_limits<uint64_t>::max();\n+            maxCycles = std::numeric_limits<uint64_t>::min();\n             countMask = 1;\n             countMaskInv = 1./(countMask + 1);\n         }"
      },
      {
        "sha": "1f43e5d3ac6f1fc8f3e90f904fc77bbbe942bc92",
        "filename": "src/bench/perf.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35328187463a7078b4206e394c21d5515929c7de/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35328187463a7078b4206e394c21d5515929c7de/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=35328187463a7078b4206e394c21d5515929c7de",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"perf.h\"\n+\n+#if defined(__i386__) || defined(__x86_64__)\n+\n+/* These architectures support quering the cycle counter\n+ * from user space, no need for any syscall overhead.\n+ */\n+void perf_init(void) { }\n+void perf_fini(void) { }\n+\n+#elif defined(__linux__)\n+\n+#include <unistd.h>\n+#include <sys/syscall.h>\n+#include <linux/perf_event.h>\n+\n+static int fd = -1;\n+static struct perf_event_attr attr;\n+\n+void perf_init(void)\n+{\n+    attr.type = PERF_TYPE_HARDWARE;\n+    attr.config = PERF_COUNT_HW_CPU_CYCLES;\n+    fd = syscall(__NR_perf_event_open, &attr, 0, -1, -1, 0);\n+}\n+\n+void perf_fini(void)\n+{\n+    if (fd != -1) {\n+        close(fd);\n+    }\n+}\n+\n+uint64_t perf_cpucycles(void)\n+{\n+    uint64_t result = 0;\n+    if (fd == -1 || read(fd, &result, sizeof(result)) < (ssize_t)sizeof(result)) {\n+        return 0;\n+    }\n+    return result;\n+}\n+\n+#else /* Unhandled platform */\n+\n+void perf_init(void) { }\n+void perf_fini(void) { }\n+uint64_t perf_cpucycles(void) { return 0; }\n+\n+#endif"
      },
      {
        "sha": "681bd0c8a27e690580254012ac84d95be955a590",
        "filename": "src/bench/perf.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35328187463a7078b4206e394c21d5515929c7de/src/bench/perf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35328187463a7078b4206e394c21d5515929c7de/src/bench/perf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.h?ref=35328187463a7078b4206e394c21d5515929c7de",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+/** Functions for measurement of CPU cycles */\n+#ifndef H_PERF\n+#define H_PERF\n+\n+#include <stdint.h>\n+\n+#if defined(__i386__)\n+\n+static inline uint64_t perf_cpucycles(void)\n+{\n+    uint64_t x;\n+    __asm__ volatile (\".byte 0x0f, 0x31\" : \"=A\" (x));\n+    return x;\n+}\n+\n+#elif defined(__x86_64__)\n+\n+static inline uint64_t perf_cpucycles(void)\n+{\n+    uint32_t hi, lo;\n+    __asm__ __volatile__ (\"rdtsc\" : \"=a\"(lo), \"=d\"(hi));\n+    return ((uint64_t)lo)|(((uint64_t)hi)<<32);\n+}\n+#else\n+\n+uint64_t perf_cpucycles(void);\n+\n+#endif\n+\n+void perf_init(void);\n+void perf_fini(void);\n+\n+#endif // H_PERF"
      }
    ]
  }
]