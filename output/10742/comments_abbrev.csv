practicalswift,2017-07-15T17:38:22Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-315550042,315550042,
practicalswift,2017-07-18T04:04:54Z,Rebased again! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-315952197,315952197,
practicalswift,2017-08-01T09:23:40Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319317632,319317632,
practicalswift,2017-08-03T13:00:02Z,Anyone willing to review? :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319961842,319961842,
promag,2017-08-03T13:41:52Z,"@practicalswift commit a338ad0 fails to build. See https://github.com/bitcoin/bitcoin/pull/10607#issuecomment-319955888.\n\nWhat about casting first?",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319972190,319972190,
practicalswift,2017-08-03T14:23:26Z,"@promag Right now casting is done first?\n\n```\n*** Commit 1\ncommit f849a1579df933b4ddefc2486e1459831d693b66\n    Cast from HTTPStatusCode to int where required\n\n*** Commit 2\ncommit a338ad0ae69aadc1d0f4d62cfd2e8dae0317c769\n    scripted-diff: Convert HTTPStatusCode to a scoped enum (C++11)\n\n    -BEGIN VERIFY SCRIPT-\n    sed -i 's/enum HTTPStatusCode/enum class HTTPStatusCode/g'",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319983950,319983950,
MarcoFalke,2017-08-03T14:24:16Z,"Would it be possible to reduce the number of commits, as each of them has to be reviewed separately?",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319984178,319984178,
jgarzik,2017-08-03T14:32:51Z,This change appears to add a lot of redundancy:  It makes that which can be deduced by the compiler explicit at each use site (kinda the opposite of the `auto` trend).,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319986782,319986782,
practicalswift,2017-08-03T14:46:11Z,"@jgarzik Is the argument that strongly typed enums should never be used (generally), or that strongly typed enums are not appropriate in these specific cases (this PR)? :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319990825,319990825,
TheBlueMatt,2017-08-03T14:47:05Z,"Strong Concept ACK, explicit is always better than implicit. Maybe start with adding this to the style guide and requiring it for new code?",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319991117,319991117,
ryanofsky,2017-08-03T15:08:33Z,"> @jgarzik Is the argument that strongly typed enums should never be used (generally), or that strongly typed enums are not appropriate in these specific cases (this PR)? :-)\n\nA simple way to get rid of some of the redundancy would be to remove prefixes from the enum values (e.g. `HTTPStatusCode::HTTP_UNAUTHORIZED` -> `HTTPStatusCode::UNAUTHORIZED`, `RPCErrorCode::RPC_PARSE_ERROR` -> `RPCError",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-319997798,319997798,
practicalswift,2017-08-03T16:02:40Z,@ryanofsky Good idea! Should I do that in this PR or in a follow up PR? :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-320014016,320014016,
practicalswift,2017-08-03T16:03:28Z,@MarcoFalke Good point! Squashed into three commits!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-320014249,320014249,
MarcoFalke,2017-08-03T16:13:47Z,@practicalswift The suggestion to remove the prefix could be done in this pull. I imagine it easily couples with the scripted diff.,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-320017131,320017131,
practicalswift,2017-08-03T16:14:40Z,@MarcoFalke Great! I'll fix a scripted-diff for that!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-320017372,320017372,
practicalswift,2017-08-08T12:07:25Z,"I've now added a scripted-diff which removes redundant prefixes from enum values as suggested by @MarcoFalke. Please review :-)\n\nChanges made:\n* `BlockSource::BLOCK_SOURCE_FOO` → `BlockSource::FOO`\n* `DBErrors::DB_FOO` → `DBErrors::FOO`\n* `FlushStateMode::FLUSH_STATE_FOO` → `FlushStateMode::FOO`\n* `HTTPStatusCode::HTTP_FOO` → `HTTPStatusCode::FOO`\n* `HelpMessageMode::HMM_FOO` → `Help",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-320936183,320936183,
practicalswift,2017-08-15T11:49:35Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-322446550,322446550,
practicalswift,2017-08-20T16:13:21Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-323594987,323594987,
TheBlueMatt,2017-08-21T01:43:46Z,"Hmm, I dont believe contrib/devtools/commit-script-check.sh supports multiple scripts in a single commit. Personally I'm fine with them being independant commits and dont really mind a 20-commit PR for something like this, but if you want to keep it squashed, you could just make it all one script and put comments in it.",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-323627779,323627779,
practicalswift,2017-08-21T08:05:18Z,"@TheBlueMatt Ah, thanks for letting me know! I've now put it into one script with comments.",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-323674986,323674986,
practicalswift,2017-08-22T08:20:14Z,Rebased! Anyone willing to review? Perhaps @laanwj? :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-323954397,323954397,
TheBlueMatt,2017-08-22T20:37:08Z,"Notes on the first script: why the extra ""\([^:]\)"" in the second sed? It seems to run identically without it?\nThe s/== FLUSH_STATE_/== FlushStateMode::FLUSH_STATE_/g replace seems redundant.\n\nIt would be nice to make it build after the first commit. You could probably just move the two fix commits to before the first scripted-diff.",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-324144570,324144570,
practicalswift,2017-08-22T21:21:09Z,"@TheBlueMatt Thanks for reviewing!\n\nThe `([^:])` was left from an earlier attempt at making the scripted-diff idempotent :-)  Now removed.\n\nRemoved the redundant `FLUSH_STATE_`-replacement and re-arranged the commits.\n\nLooks good now? :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-324155232,324155232,
practicalswift,2017-09-11T07:58:03Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-328449049,328449049,
practicalswift,2017-09-18T21:26:13Z,Anyone willing to review? :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-330361208,330361208,
practicalswift,2017-10-03T07:25:21Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-333761891,333761891,
practicalswift,2017-10-03T07:26:15Z,"@laanwj Is there any chance that this one will make it into 0.16? If so, I'll keep it updated/rebased :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-333762096,333762096,
MarcoFalke,2017-10-03T08:30:07Z,@practicalswift I guess so. It just needs someone to review ;),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-333775271,333775271,
sipa,2017-10-03T09:29:57Z,"Can you do the cast to int using a C-style cast? Those are preferred for primitive types, and a bit more concise to read.",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-333789204,333789204,
practicalswift,2017-10-04T11:45:41Z,Now using C-style casts for primitive types as suggested by @sipa :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-334129931,334129931,
laanwj,2017-10-11T16:07:00Z,"@practicalswift I'm sorry but there are too many all-over-the-place ""cosmetic"" changes like this lately, it kind of tires me, trying to focus my limited time on PRs that add functionality or fix bugs. So no, I don't expect to get around to reviewing this any time soon.",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-335861640,335861640,
practicalswift,2017-11-09T21:50:30Z,"@laanwj I do not see this PR as cosmetic. Traditional C++ enumerations cause real problems (name clashes, implicit conversion to int, inability to forward declare, etc.) and I would argue that C++11 enum classes are strictly better from a secure coding/""minimize surprises"" perspective.\n\nFWIW the [C++ Core Guidelines authors seem to agree](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuide",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-343302954,343302954,
practicalswift,2017-11-16T21:33:34Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-345069665,345069665,
practicalswift,2017-11-21T08:38:06Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-345954345,345954345,
practicalswift,2017-12-21T12:37:27Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-353340559,353340559,
practicalswift,2018-01-11T21:22:14Z,"Rebased again! :-)\n\n@MarcoFalke @TheBlueMatt – you seemed to be positive to this PR. Would you mind reviewing? :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-357065363,357065363,
practicalswift,2018-01-28T11:20:01Z,Rebase number 12 performed! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-361055314,361055314,
MarcoFalke,2018-01-28T16:29:36Z,"Since this doesn't get any review, you might want to leave everything that requires a static_cast for later. And regardless, the goal of `enum class` is to be type safe, whereas for an enum that represents ints, type safety is still preferable, but maybe not as important, since the tradeoff is to blaster the code with static_casts",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-361075481,361075481,
practicalswift,2018-01-29T08:28:47Z,"@MarcoFalke Good idea! Removed changes to `HTTPStatusCode`, `RPCErrorCode` and `Base58Type` which all required `static_cast`:s. The scripted-diffs and the resulting changes are now free from `static_cast`:s and should be easier to review. Thanks!",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-361172636,361172636,
practicalswift,2018-02-08T09:15:37Z,Rebase number 13 performed! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-364049257,364049257,
practicalswift,2018-02-12T15:16:28Z,Rebase number 14 performed! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-364952923,364952923,
MarcoFalke,2018-02-12T18:16:54Z,"Suggested squash to one commit and scripted diff:\n\n\n```\nscripted-diff: Convert 15 enums into scoped enums (C++11)\n\n-BEGIN VERIFY SCRIPT-\n\nsed -i 's/enum DBErrors/enum class DBErrors/g' src/wallet/walletdb.h\ngit grep -l DB_ | xargs sed -i 's/DB_\(LOAD_OK\|CORRUPT\|NONCRITICAL_ERROR\|TOO_NEW\|LOAD_FAIL\|NEED_REWRITE\)/DBErrors::\1/g'\nsed -i 's/^    DBErrors::/    /g' src/wallet/w",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-365012192,365012192,
practicalswift,2018-02-12T18:43:48Z,"@MarcoFalke Good idea! Done!\n\nPlease re-review :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-365021473,365021473,
practicalswift,2018-03-06T22:34:00Z,Rebase number 15 performed! :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-370953538,370953538,
MarcoFalke,2018-03-07T13:10:38Z,re-utACK 0f201feccd23cf195b6570d775fb709b79c8db5e,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-371133335,371133335,
practicalswift,2018-03-09T15:25:40Z,Rebased! Please re-review :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-371844068,371844068,
sipa,2018-03-09T17:31:59Z,utACK 1f45e2164a7674f716b425a6658c41ca7c30265b,https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-371883768,371883768,
MarcoFalke,2018-03-12T14:41:11Z,re-utACK 1f45e2164a7674f716b425a6658c41ca7c30265b (confirmed the scripted diff is still the same and the rebase was solved correctly),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-372333033,372333033,
practicalswift,2018-03-12T14:53:13Z,"Thanks a lot for reviewing @sipa and @MarcoFalke. Excellent!\n\nAnyone else who has time for reviewing in order to bring this PR closer to merge? :-)",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-372337473,372337473,
practicalswift,2018-03-27T11:03:33Z,@laanwj Would it be possible to get a 0.17.0 milestone for this PR? :-),https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-376484862,376484862,
laanwj,2018-03-27T14:30:44Z,"Probably better to just merge this as there seems agreement to do it...\nutACK 1f45e21",https://github.com/bitcoin/bitcoin/pull/10742#issuecomment-376546751,376546751,
ArielLorenzo-Luaces,2017-07-05T07:47:57Z,"Using strongly typed enums causes ```RPCErrorCode``` to be static_casted too often. To gain strongly typed enums we loose readability.\n\nEspecially when considering that a more correct way to cast a strongly typed enum is ```static_cast<std::underlying_type<RPCErrorCode>::type>(RPCErrorCode::RPC_MISC_ERROR)```\nWhich is even more unreadable.\n\nInstead I suggest forgetting strong typing for ",https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125575019,125575019,src/rpc/protocol.h
luke-jr,2017-07-05T08:40:33Z,Why not just make JSONRPCError accept a RPCErrorCode argument?,https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125585019,125585019,src/rpc/protocol.h
practicalswift,2017-07-05T08:47:53Z,"@luke-jr Yes, that's my plan. I'll push those changes today hopefully :-)",https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125586839,125586839,src/rpc/protocol.h
ArielLorenzo-Luaces,2017-07-05T09:22:08Z,"@luke-jr there would still be a few ```code == static_cast<int>(RPCErrorCode:: ...)```. But I agree it's not that many.\n\nHowever changing JSONRPCError is kicking the can down to Pair where the conversion to int has to be done, or down to UniValue. It just seems to me like RPCErrorCode implicitly should be treated like an int since it will almost always be converted into one.",https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125594094,125594094,src/rpc/protocol.h
practicalswift,2017-07-05T09:58:22Z,"@luke-jr @ArielLorenzo-Luaces Signature now changed:\n\n```diff\n-UniValue JSONRPCError(int code, const std::string& message)\n+UniValue JSONRPCError(RPCErrorCode code, const std::string& message)\n```\n\nOnly three `static_cast<int>(RPCErrorCode)` remain, and since they are explicit they should not cause any surprises (as opposed to implicit conversions).",https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125602255,125602255,src/rpc/protocol.h
ArielLorenzo-Luaces,2017-07-05T23:53:21Z,"I still think that ```RPCErrorCode``` and ```HTTPStatusCode``` are intrinsically different than the other enumerators, since they are sent over HTTP. They are also the only two that have explicit values assigned. They should be treated as integers always and they should require no conversion.\n\nI would have suggested to hide conversion in encode/decode functions. Then the conversion would only ",https://github.com/bitcoin/bitcoin/pull/10742#discussion_r125784581,125784581,src/rpc/protocol.h
