TheBlueMatt,2016-12-27T18:21:34Z,Rebased after #9243 merge.,https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269362967,269362967,
sipa,2016-12-27T18:46:48Z,"Wouldn't it be easier to use a shared_ptr wrapping for cleanup-after-last-use, instead of implementing refcounting yourself? You can still use a manual wrapper to lock/unlock.",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269366047,269366047,
TheBlueMatt,2016-12-27T19:28:50Z,"Hmm, I kinda prefer to not introduce shared_ptr abstractions unless they're optimizing a copy that we don't want to do. I don't think the manual refcounting is that bad.\n\nOn December 27, 2016 7:46:52 PM GMT+01:00, Pieter Wuille <notifications@github.com> wrote:\n>Wouldn't it be easier to use a shared_ptr wrapping for\n>cleanup-after-last-use, instead of implementing refcounting yourself?\n>You c",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269371479,269371479,
TheBlueMatt,2016-12-28T13:42:12Z,"OK, @sipa found a better way to use shared_ptrs here so I went ahead and did that. It means removing some asserts, but I think its worth it.",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269478578,269478578,
TheBlueMatt,2016-12-29T19:46:36Z,Went down the rabbit hole here trying to track down a deadlock and then realized that it was already prevented. Note that (very much on purpose) cs_main is still used prior to all CNodeStateAccessors except for a few where we only call Misbehaving() or otherwise sure we are only locking one CNodeState at a time (to avoid deadlocks where we lock them in different orders).,https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269683085,269683085,
TheBlueMatt,2016-12-29T20:14:31Z,Addressed @sipa's comments.,https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269686838,269686838,
theuni,2016-12-29T22:20:13Z,"Wanted to make sure my nits so far were reasonable, so I went ahead and patched 'em in. Feel free to take from https://github.com/theuni/bitcoin/commit/058193e4d51bdd0cb8e7c225130414b817207ac2",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269702525,269702525,
TheBlueMatt,2017-01-01T04:16:13Z,"Fixed a few of @theuni's comments, rebased diff-tree is at https://0bin.net/paste/nkpqzdxyoAXkoX7B#STuXxIS32GXf3gMP1JbiIPrufL9gq1hcSH+g6yXSKdq",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-269891735,269891735,
theuni,2017-01-02T21:57:56Z,"@TheBlueMatt Maybe I'm missing something big-picture here, but would it not be possible to hold a new global mutex rather than cs_main to serialize CNodeStateAccessor access? Or is there a reason that they must share the same lock?",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-270024543,270024543,
sipa,2017-01-02T22:10:03Z,@theuni I think that's the plan longer term.\n,https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-270025539,270025539,
theuni,2017-01-02T22:46:20Z,"I suppose I'm trying to figure out, for the sake of reviewing this PR, what remains to be done before that can happen. I'm certainly not insinuating that we should hold this up until that point, I'd just like to get an idea of what other issues still need to be solved.\n\nSo if, for ex, we naively made CNodeState::cs static and dropped the cs_main guards, what kind of carnage would be expected?",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-270028269,270028269,
TheBlueMatt,2017-01-02T22:51:34Z,"Aside from the places that do, actually, require cs_main, a global order between various CNodeState::cs locks needs to be defined (or, equivalently, we could say that you may not hold multiple CNodeState::cs locks at once).",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-270028672,270028672,
TheBlueMatt,2017-01-12T18:58:23Z,"Without #9488 (which I do not think should make 0.14 at this juncture), this should not go in for 0.14.",https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-272249955,272249955,
TheBlueMatt,2017-01-17T15:41:50Z,Closing for now. Will make access exclusive and work towards a more whole solution for 0.15.,https://github.com/bitcoin/bitcoin/pull/9419#issuecomment-273205175,273205175,
dcousens,2016-12-27T08:50:04Z,Why not `IsMultiArgSet`?,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r93908872,93908872,src/util.cpp
dcousens,2016-12-27T08:51:06Z,"Why is this not `LOCK(cs_args)`?\n(maybe I misinterpreted the meaning of `force`)",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r93908981,93908981,src/util.cpp
TheBlueMatt,2016-12-27T12:51:20Z,"Prefer less diff? (note this is really from #9243, not strictly this PR).",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r93928135,93928135,src/util.cpp
TheBlueMatt,2016-12-27T12:52:49Z,Fixed in #9243,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r93928237,93928237,src/util.cpp
sipa,2016-12-28T19:57:19Z,"The `std::move(addrMany)` here won't do what you want, as `addrName` is a const reference. You can't destroy `addrName` anyway, so just remove the `std::move`.",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94071374,94071374,src/net_processing.cpp
sipa,2016-12-28T20:19:38Z,You should add an `std::move` here if you want to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94073460,94073460,src/net_processing.cpp
sipa,2016-12-28T20:21:00Z,Add a `std::move` around `pstateIn` to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94073568,94073568,src/net_processing.cpp
theuni,2016-12-29T21:38:11Z,explicit operator bool instead? Using the call operator for this seems strange.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94182656,94182656,src/net_processing.cpp
theuni,2016-12-29T21:40:10Z,Stale comment?,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94182818,94182818,src/net_processing.cpp
theuni,2016-12-29T21:46:10Z,Why not just have a lock as a member?,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94183279,94183279,src/net_processing.cpp
TheBlueMatt,2016-12-29T22:20:21Z,I dunno I dont really like the bool operator. If you really prefer it I'm happy to change it.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94186711,94186711,src/net_processing.cpp
TheBlueMatt,2016-12-29T22:22:16Z,I didnt realize we had an RAII lock in sync.h that would still do DEBUG_LOCKORDER checks. Will fix with CMutexLock.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94186848,94186848,src/net_processing.cpp
theuni,2016-12-30T02:02:44Z,"explicit bool matches the semantics of smart pointers, so I think it's a good fit here. But more importantly, the call operator makes it look as though something is happening to the accessor, so I'd really rather not use that.",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94197671,94197671,src/net_processing.cpp
TheBlueMatt,2017-01-01T03:53:45Z,"Hmm, looking again using CMutexLock means adding `__FILE__`,` __LINE__`, etc macros in net_processing for parameters to CMutexLock, instead of letting ENTER_CRITICAL_SECTION figure it out. If you prefer I could try to add some crazy defines like CONSTRUCT_CMUTEXLOCK(mutex, lockName) which fills in a constructor for use in the CNodeStateAccessor constructor?",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94279837,94279837,src/net_processing.cpp
TheBlueMatt,2017-01-01T04:11:53Z,"OK, switched to regular bool.",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94279903,94279903,src/net_processing.cpp
TheBlueMatt,2017-01-01T04:11:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94279904,94279904,src/net_processing.cpp
theuni,2017-01-02T21:40:13Z,"Hmm, I think you actually want these coming from net_processing anyway, no? I think if you make the ctor inline and pass \_\_LINE__ to CMutexLock, you'd end up seeing the source of the lock. Otherwise, you're always seeing it come from the same place I should think.\n\nTaking that a step further, I think it would work to change CMutexLock's ctors to take default \_\_FILE__ and \_\_LINE__ args?",https://github.com/bitcoin/bitcoin/pull/9419#discussion_r94346965,94346965,src/net_processing.cpp
