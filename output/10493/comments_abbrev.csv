practicalswift,2017-06-01T09:24:49Z,@benma Thanks for reviewing! Fixed! :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-305439470,305439470,
benma,2017-06-01T09:26:15Z,utACK cf02bb1a6c3c0077f1cf37f60e13d6cb71fd9187,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-305439846,305439846,
practicalswift,2017-06-04T14:54:38Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306044851,306044851,
sipa,2017-06-04T18:27:30Z,"Overall comment: the loop variables should probably not keep the name `it`, as that may confuse someone into thinking it refers to an iterator, while it is a container element reference.",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306057801,306057801,
practicalswift,2017-06-04T18:54:21Z,@sipa Good point! Any suggestion on an appropriate generic variable name to use instead? Perhaps `pair` in the case of maps or `o` otherwise?,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306059430,306059430,
sipa,2017-06-04T18:59:31Z,@practicalswift Perhaps `entry` for maps?,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306059759,306059759,
practicalswift,2017-06-04T19:00:33Z,"@sipa Ah, yes, `entry` is much better. Fixing it now!",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306059835,306059835,
practicalswift,2017-06-04T20:27:08Z,@sipa Fixed! :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306064717,306064717,
practicalswift,2017-06-07T18:53:42Z,@MarcoFalke Good idea! You're suggestions are now part of the PR :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-306891017,306891017,
practicalswift,2017-06-08T08:46:43Z,Merge conflicts resolved!,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-307040143,307040143,
sipa,2017-06-13T00:36:09Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-307973254,307973254,
practicalswift,2017-06-13T07:35:23Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-308032805,308032805,
jtimon,2017-07-18T22:08:34Z,utACK 875ebee20e048892d999c41acb7100d0fdac1f91,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316212771,316212771,
practicalswift,2017-07-19T14:09:37Z,@sipa Thanks! `const`:s added :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316399638,316399638,
practicalswift,2017-07-19T14:38:09Z,@promag Not part of the scope of this PR :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316408384,316408384,
promag,2017-07-19T15:51:40Z,"@practicalswift commit message suggests otherwise, range based loop over map entries regardless of direction.\n\nEdit: is it bad to include the missing reverse iterations?",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316431251,316431251,
practicalswift,2017-07-19T16:20:39Z,"@promag Is it these two you are referring to?\n\n```\nsrc/wallet/rpcwallet.cpp:    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\nsrc/wallet/wallet.cpp:            for (auto it = txOrdered.rbegin(); it != txOrdered.rend(); ++it) {\n```\n",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316440026,316440026,
promag,2017-07-19T20:27:23Z,"Yes, they are multimap, but still a map. IMO it makes sense to also replace those for range loop.",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316506778,316506778,
jtimon,2017-07-19T20:39:53Z,"You can use reverse_iterate() for those.\n",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316510129,316510129,
promag,2017-07-19T20:44:42Z,@jtimon that was my [suggestion](https://github.com/bitcoin/bitcoin/pull/10493#pullrequestreview-509249509).,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-316511480,316511480,
practicalswift,2017-08-14T15:33:38Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-322223755,322223755,
jtimon,2017-08-14T15:50:26Z,fast review ACK,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-322228413,322228413,
practicalswift,2017-08-16T14:22:48Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-322787687,322787687,
practicalswift,2017-10-09T19:33:58Z,Rebased again! Anyone willing to re-review? I think this one should be ready for merge :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335263909,335263909,
jtimon,2017-10-10T08:11:33Z,fast review re-ACK,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335395511,335395511,
practicalswift,2017-10-10T09:32:58Z,@promag What about it? :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335416655,335416655,
promag,2017-10-10T12:45:37Z,@practicalswift use range-based there too?,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335460453,335460453,
practicalswift,2017-10-10T15:54:43Z,"@promag Yes, but with an additional condition (`account.vchPubKey.IsValid()`). The scope of this PR is to cover the simplest possible case only (`for (std::map<T1, T2>::iterator x = y.begin(); x != y.end(); ++x) {`) to make reviewing trivial.",https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335520110,335520110,
practicalswift,2017-10-11T08:06:04Z,@ajtowns Thanks for the review and the tested ACK! This PR is intentionally only touching `std::map` to limit the scope and make it easy to review :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-335723403,335723403,
practicalswift,2017-11-21T19:17:35Z,Does this PR stand a chance of being merged? If not I'll close it :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-346131997,346131997,
sipa,2017-11-22T02:15:07Z,utACK 680bc2cbb34d6bedd0e64b17d0555216572be4c8,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-346222459,346222459,
MarcoFalke,2017-11-22T16:41:11Z,utACK 680bc2cbb34d6bedd0e64b17d0555216572be4c8,https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-346406591,346406591,
practicalswift,2017-11-30T07:12:39Z,Ready for merge? :-),https://github.com/bitcoin/bitcoin/pull/10493#issuecomment-348102564,348102564,
benma,2017-06-01T08:41:27Z,Should be `it.first` and `it.second`.,https://github.com/bitcoin/bitcoin/pull/10493#discussion_r119558078,119558078,src/addrman.cpp
MarcoFalke,2017-06-05T20:15:42Z,"Since you are touching all those lines anyway, you can change them to const references for free. Something like the following diff should do:\n\n\n```diff\ndiff --git a/src/addrdb.h b/src/addrdb.h\nindex c3d509b..e0a49c8 100644\n--- a/src/addrdb.h\n+++ b/src/addrdb.h\n@@ -61,7 +61,7 @@ public:\n         banReason = BanReasonUnknown;\n     }\n \n-    std::string banReasonToString()\n+ ",https://github.com/bitcoin/bitcoin/pull/10493#discussion_r120198330,120198330,src/rpc/net.cpp
sipa,2017-07-19T00:22:23Z,I think this can be `const`,https://github.com/bitcoin/bitcoin/pull/10493#discussion_r128128096,128128096,src/qt/bantablemodel.cpp
sipa,2017-07-19T00:25:03Z,"Can be `const` (the loop modifies the entries pointed to by `mapBlockIndex`, not the entries directly.",https://github.com/bitcoin/bitcoin/pull/10493#discussion_r128128365,128128365,src/validation.cpp
sipa,2017-07-19T00:25:23Z,"Same, can be `const`.",https://github.com/bitcoin/bitcoin/pull/10493#discussion_r128128399,128128399,src/validation.cpp
