[
  {
    "sha": "dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2QwYjA3NzVlZjYzYWM5ZTA2N2Q5ZWI2NzAxMjMzMmYxYTcyYmQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-08-29T14:19:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-08-29T14:25:51Z"
      },
      "message": "qt: Handle address purpose in incremental updates\n\nCorrectly use the purpose of addresses that are added after the start\nof the client. Addresses with purpose \"refund\" and \"change\" should not\nbe visible in the GUI. This is now handled correctly.",
      "tree": {
        "sha": "1c2b2b4b82d29a63b8ae8174840d1b381d95a62f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2b2b4b82d29a63b8ae8174840d1b381d95a62f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff33a3470dd1d1446549d02609c991c0490e0fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff33a3470dd1d1446549d02609c991c0490e0fdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff33a3470dd1d1446549d02609c991c0490e0fdf"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 54,
      "deletions": 33
    },
    "files": [
      {
        "sha": "69355febe2d51acf3a6c3267f0e63f53dc5a814c",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -15,7 +15,8 @@ struct AddressTableEntry\n {\n     enum Type {\n         Sending,\n-        Receiving\n+        Receiving,\n+        Hidden /* QSortFilterProxyModel will filter these out */\n     };\n \n     Type type;\n@@ -43,6 +44,20 @@ struct AddressTableEntryLessThan\n     }\n };\n \n+/* Determine address type from address purpose */\n+static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)\n+{\n+    AddressTableEntry::Type addressType = AddressTableEntry::Hidden;\n+    // \"refund\" addresses aren't shown, and change addresses aren't in mapAddressBook at all.\n+    if (strPurpose == \"send\")\n+        addressType = AddressTableEntry::Sending;\n+    else if (strPurpose == \"receive\")\n+        addressType = AddressTableEntry::Receiving;\n+    else if (strPurpose == \"unknown\" || strPurpose == \"\") // if purpose not set, guess\n+        addressType = (isMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending);\n+    return addressType;\n+}\n+\n // Private implementation\n class AddressTablePriv\n {\n@@ -62,17 +77,9 @@ class AddressTablePriv\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n-\n-                AddressTableEntry::Type addressType;\n-                const std::string& strPurpose = item.second.purpose;\n-                if (strPurpose == \"send\") addressType = AddressTableEntry::Sending;\n-                else if (strPurpose == \"receive\") addressType = AddressTableEntry::Receiving;\n-                else if (strPurpose == \"unknown\") {\n-                    bool fMine = IsMine(*wallet, address.Get());\n-                    addressType = (fMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending);\n-                }\n-                else continue; // \"refund\" addresses aren't shown, and change addresses aren't in mapAddressBook at all.\n-\n+                bool fMine = IsMine(*wallet, address.Get());\n+                AddressTableEntry::Type addressType = translateTransactionType(\n+                        QString::fromStdString(item.second.purpose), fMine);\n                 const std::string& strName = item.second.name;\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n                                   QString::fromStdString(strName),\n@@ -83,7 +90,7 @@ class AddressTablePriv\n         qSort(cachedAddressTable.begin(), cachedAddressTable.end(), AddressTableEntryLessThan());\n     }\n \n-    void updateEntry(const QString &address, const QString &label, bool isMine, int status)\n+    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)\n     {\n         // Find address / label in model\n         QList<AddressTableEntry>::iterator lower = qLowerBound(\n@@ -93,7 +100,7 @@ class AddressTablePriv\n         int lowerIndex = (lower - cachedAddressTable.begin());\n         int upperIndex = (upper - cachedAddressTable.begin());\n         bool inModel = (lower != upper);\n-        AddressTableEntry::Type newEntryType = isMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending;\n+        AddressTableEntry::Type newEntryType = translateTransactionType(purpose, isMine);\n \n         switch(status)\n         {\n@@ -322,10 +329,11 @@ QModelIndex AddressTableModel::index(int row, int column, const QModelIndex &par\n     }\n }\n \n-void AddressTableModel::updateEntry(const QString &address, const QString &label, bool isMine, int status)\n+void AddressTableModel::updateEntry(const QString &address,\n+        const QString &label, bool isMine, const QString &purpose, int status)\n {\n     // Update address book model from Bitcoin core\n-    priv->updateEntry(address, label, isMine, status);\n+    priv->updateEntry(address, label, isMine, purpose, status);\n }\n \n QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address)"
      },
      {
        "sha": "6f532087fe05b7e0c83118a9f8b8c8eb8cf2c3cd",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -85,7 +85,7 @@ class AddressTableModel : public QAbstractTableModel\n public slots:\n     /* Update address list from core.\n      */\n-    void updateEntry(const QString &address, const QString &label, bool isMine, int status);\n+    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n \n     friend class AddressTablePriv;\n };"
      },
      {
        "sha": "977e56a2b095c6705ec56b0ac3faa1ba3de2e482",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -20,11 +20,11 @@\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n-        Qt::AlignLeft|Qt::AlignVCenter,\n-        Qt::AlignLeft|Qt::AlignVCenter,\n-        Qt::AlignLeft|Qt::AlignVCenter,\n-        Qt::AlignLeft|Qt::AlignVCenter,\n-        Qt::AlignRight|Qt::AlignVCenter\n+        Qt::AlignLeft|Qt::AlignVCenter, /* status */\n+        Qt::AlignLeft|Qt::AlignVCenter, /* date */\n+        Qt::AlignLeft|Qt::AlignVCenter, /* type */\n+        Qt::AlignLeft|Qt::AlignVCenter, /* address */\n+        Qt::AlignRight|Qt::AlignVCenter /* amount */\n     };\n \n // Comparison operator for sort/binary search of model tx list"
      },
      {
        "sha": "82dc075a7b987bb3f835ce7b6a092e86f428ca99",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -112,10 +112,11 @@ void WalletModel::updateTransaction(const QString &hash, int status)\n     }\n }\n \n-void WalletModel::updateAddressBook(const QString &address, const QString &label, bool isMine, int status)\n+void WalletModel::updateAddressBook(const QString &address, const QString &label, \n+        bool isMine, const QString &purpose, int status)\n {\n     if(addressTableModel)\n-        addressTableModel->updateEntry(address, label, isMine, status);\n+        addressTableModel->updateEntry(address, label, isMine, purpose, status);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -351,13 +352,17 @@ static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStor\n     QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n }\n \n-static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)\n+static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n+        const CTxDestination &address, const std::string &label, bool isMine,\n+        const std::string &purpose, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i status=%i\\n\", CBitcoinAddress(address).ToString().c_str(), label.c_str(), isMine, status);\n+    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i purpose=%s status=%i\\n\",\n+            CBitcoinAddress(address).ToString().c_str(), label.c_str(), isMine, purpose.c_str(), status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(CBitcoinAddress(address).ToString())),\n                               Q_ARG(QString, QString::fromStdString(label)),\n                               Q_ARG(bool, isMine),\n+                              Q_ARG(QString, QString::fromStdString(purpose)),\n                               Q_ARG(int, status));\n }\n \n@@ -373,15 +378,15 @@ void WalletModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n     wallet->NotifyStatusChanged.connect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n+    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5, _6));\n     wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n }\n \n void WalletModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from wallet\n     wallet->NotifyStatusChanged.disconnect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n+    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5, _6));\n     wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n }\n "
      },
      {
        "sha": "ff7ded7b42cd01cdd6466c713cb3ac48309e9e12",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -165,7 +165,7 @@ public slots:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status);\n     /* New, updated or removed address book entry */\n-    void updateAddressBook(const QString &address, const QString &label, bool isMine, int status);\n+    void updateAddressBook(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n     /* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */\n     void pollBalanceChanged();\n };"
      },
      {
        "sha": "54ede12a503cb1dfd17a10b1aa15efeac7392e8e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -1461,7 +1461,11 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n {\n     std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address].name = strName;\n-    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n+    if (!strPurpose.empty()) /* update purpose only if requested */\n+        mapAddressBook[address].purpose = strPurpose;\n+    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address),\n+            mapAddressBook[address].purpose,\n+            (mi == mapAddressBook.end()) ?  CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;\n     if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n@@ -1472,7 +1476,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n     mapAddressBook.erase(address);\n-    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), \"\", CT_DELETED);\n     if (!fFileBacked)\n         return false;\n     CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());"
      },
      {
        "sha": "b529d5f28b9a08566e637e9d0ae530517d29fb6a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd0b0775ef63ac9e067d9eb67012332f1a72bd7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=dcd0b0775ef63ac9e067d9eb67012332f1a72bd7",
        "patch": "@@ -335,12 +335,16 @@ class CWallet : public CCryptoKeyStore\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n+            &address, const std::string &label, bool isMine,\n+            const std::string &purpose,\n+            ChangeType status)> NotifyAddressBookChanged;\n \n     /** Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+            ChangeType status)> NotifyTransactionChanged;\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  }
]