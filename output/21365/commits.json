[
  {
    "sha": "dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmIwY2U5ZmJmZjAxZmZlNGRkMjlkYTQ2NWY0M2VjYWRkYzI4NTRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-03T23:02:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Add TaprootSpendData data structure, equivalent to script map for P2[W]SH\n\nThis data structures stores all information necessary for spending a taproot\noutput (the internal key, the Merkle root, and the control blocks for every\nscript leaf).\n\nIt is added to signing providers, and populated by the tr() descriptor.",
      "tree": {
        "sha": "6fa9f24f53c40dfc157525532a16131339cc1c5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fa9f24f53c40dfc157525532a16131339cc1c5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0e5fbf6fad854ad03ce092ff5f1582166e5b24e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e5fbf6fad854ad03ce092ff5f1582166e5b24e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e5fbf6fad854ad03ce092ff5f1582166e5b24e"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 109,
      "deletions": 7
    },
    "files": [
      {
        "sha": "194705c38fbea60363a1d2c5aadd3178ed69c526",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -234,6 +234,10 @@ class XOnlyPubKey\n      *  fail. */\n     bool IsFullyValid() const;\n \n+    /** Test whether this is the 0 key (the result of default construction). This implies\n+     *  !IsFullyValid(). */\n+    bool IsNull() const { return m_keydata.IsNull(); }\n+\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n     explicit XOnlyPubKey(Span<const unsigned char> bytes);\n "
      },
      {
        "sha": "84a8b06c5cc247b722dfd4cf625df07994816a1f",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -843,7 +843,9 @@ class TRDescriptor final : public DescriptorImpl\n         XOnlyPubKey xpk(keys[0]);\n         if (!xpk.IsFullyValid()) return {};\n         builder.Finalize(xpk);\n-        return Vector(GetScriptForDestination(builder.GetOutput()));\n+        WitnessV1Taproot output = builder.GetOutput();\n+        out.tr_spenddata[output].Merge(builder.GetSpendData());\n+        return Vector(GetScriptForDestination(output));\n     }\n     bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const override\n     {"
      },
      {
        "sha": "b80fbe22cee5055e1b1e978e1c1e7746c1cfdd49",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -44,6 +44,11 @@ bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& inf\n     return m_provider->GetKeyOrigin(keyid, info);\n }\n \n+bool HidingSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n+{\n+    return m_provider->GetTaprootSpendData(output_key, spenddata);\n+}\n+\n bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n@@ -54,6 +59,10 @@ bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info)\n     return ret;\n }\n bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+bool FlatSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n+{\n+    return LookupHelper(tr_spenddata, output_key, spenddata);\n+}\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n {\n@@ -66,6 +75,10 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n     ret.keys.insert(b.keys.begin(), b.keys.end());\n     ret.origins = a.origins;\n     ret.origins.insert(b.origins.begin(), b.origins.end());\n+    ret.tr_spenddata = a.tr_spenddata;\n+    for (const auto& [output_key, spenddata] : b.tr_spenddata) {\n+        ret.tr_spenddata[output_key].Merge(spenddata);\n+    }\n     return ret;\n }\n "
      },
      {
        "sha": "939ae10622677d334ff8fea1700b043ce113a44f",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -25,6 +25,7 @@ class SigningProvider\n     virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n     virtual bool HaveKey(const CKeyID &address) const { return false; }\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n+    virtual bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const { return false; }\n };\n \n extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n@@ -42,6 +43,7 @@ class HidingSigningProvider : public SigningProvider\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+    bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n };\n \n struct FlatSigningProvider final : public SigningProvider\n@@ -50,11 +52,13 @@ struct FlatSigningProvider final : public SigningProvider\n     std::map<CKeyID, CPubKey> pubkeys;\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n     std::map<CKeyID, CKey> keys;\n+    std::map<XOnlyPubKey, TaprootSpendData> tr_spenddata; /** Map from output key to spend data. */\n \n     bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+    bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n };\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);"
      },
      {
        "sha": "748f00dda54dc7d50fed173fbd3f1d4f6ce29ff1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -377,6 +377,16 @@ bool IsValidDestination(const CTxDestination& dest) {\n /*static*/ TaprootBuilder::NodeInfo TaprootBuilder::Combine(NodeInfo&& a, NodeInfo&& b)\n {\n     NodeInfo ret;\n+    /* Iterate over all tracked leaves in a, add b's hash to their Merkle branch, and move them to ret. */\n+    for (auto& leaf : a.leaves) {\n+        leaf.merkle_branch.push_back(b.hash);\n+        ret.leaves.emplace_back(std::move(leaf));\n+    }\n+    /* Iterate over all tracked leaves in b, add a's hash to their Merkle branch, and move them to ret. */\n+    for (auto& leaf : b.leaves) {\n+        leaf.merkle_branch.push_back(a.hash);\n+        ret.leaves.emplace_back(std::move(leaf));\n+    }\n     /* Lexicographically sort a and b's hash, and compute parent hash. */\n     if (a.hash < b.hash) {\n         ret.hash = (CHashWriter(HASHER_TAPBRANCH) << a.hash << b.hash).GetSHA256();\n@@ -386,6 +396,21 @@ bool IsValidDestination(const CTxDestination& dest) {\n     return ret;\n }\n \n+void TaprootSpendData::Merge(TaprootSpendData other)\n+{\n+    // TODO: figure out how to better deal with conflicting information\n+    // being merged.\n+    if (internal_key.IsNull() && !other.internal_key.IsNull()) {\n+        internal_key = other.internal_key;\n+    }\n+    if (merkle_root.IsNull() && !other.merkle_root.IsNull()) {\n+        merkle_root = other.merkle_root;\n+    }\n+    for (auto& [key, control_blocks] : other.scripts) {\n+        scripts[key].merge(std::move(control_blocks));\n+    }\n+}\n+\n void TaprootBuilder::Insert(TaprootBuilder::NodeInfo&& node, int depth)\n {\n     assert(depth >= 0 && (size_t)depth <= TAPROOT_CONTROL_MAX_NODE_COUNT);\n@@ -435,13 +460,14 @@ void TaprootBuilder::Insert(TaprootBuilder::NodeInfo&& node, int depth)\n     return branch.size() == 0 || (branch.size() == 1 && branch[0]);\n }\n \n-TaprootBuilder& TaprootBuilder::Add(int depth, const CScript& script, int leaf_version)\n+TaprootBuilder& TaprootBuilder::Add(int depth, const CScript& script, int leaf_version, bool track)\n {\n     assert((leaf_version & ~TAPROOT_LEAF_MASK) == 0);\n     if (!IsValid()) return *this;\n-    /* Construct NodeInfo object with leaf hash. */\n+    /* Construct NodeInfo object with leaf hash and (if track is true) also leaf information. */\n     NodeInfo node;\n     node.hash = (CHashWriter{HASHER_TAPLEAF} << uint8_t(leaf_version) << script).GetSHA256();\n+    if (track) node.leaves.emplace_back(LeafInfo{script, leaf_version, {}});\n     /* Insert into the branch. */\n     Insert(std::move(node), depth);\n     return *this;\n@@ -464,8 +490,33 @@ TaprootBuilder& TaprootBuilder::Finalize(const XOnlyPubKey& internal_key)\n     m_internal_key = internal_key;\n     auto ret = m_internal_key.CreateTapTweak(m_branch.size() == 0 ? nullptr : &m_branch[0]->hash);\n     assert(ret.has_value());\n-    std::tie(m_output_key, std::ignore) = *ret;\n+    std::tie(m_output_key, m_parity) = *ret;\n     return *this;\n }\n \n WitnessV1Taproot TaprootBuilder::GetOutput() { return WitnessV1Taproot{m_output_key}; }\n+\n+TaprootSpendData TaprootBuilder::GetSpendData() const\n+{\n+    TaprootSpendData spd;\n+    spd.merkle_root = m_branch.size() == 0 ? uint256() : m_branch[0]->hash;\n+    spd.internal_key = m_internal_key;\n+    if (m_branch.size()) {\n+        // If any script paths exist, they have been combined into the root m_branch[0]\n+        // by now. Compute the control block for each of its tracked leaves, and put them in\n+        // spd.scripts.\n+        for (const auto& leaf : m_branch[0]->leaves) {\n+            std::vector<unsigned char> control_block;\n+            control_block.resize(TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * leaf.merkle_branch.size());\n+            control_block[0] = leaf.leaf_version | (m_parity ? 1 : 0);\n+            std::copy(m_internal_key.begin(), m_internal_key.end(), control_block.begin() + 1);\n+            if (leaf.merkle_branch.size()) {\n+                std::copy(leaf.merkle_branch[0].begin(),\n+                          leaf.merkle_branch[0].begin() + TAPROOT_CONTROL_NODE_SIZE * leaf.merkle_branch.size(),\n+                          control_block.begin() + TAPROOT_CONTROL_BASE_SIZE);\n+            }\n+            spd.scripts[{leaf.script, leaf.leaf_version}].insert(std::move(control_block));\n+        }\n+    }\n+    return spd;\n+}"
      },
      {
        "sha": "8db17b2779bca27a768596809c8402f1333839ec",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "patch": "@@ -11,6 +11,7 @@\n #include <uint256.h>\n #include <util/hash_type.h>\n \n+#include <map>\n #include <string>\n #include <variant>\n \n@@ -209,15 +210,38 @@ CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n /** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n+struct TaprootSpendData\n+{\n+    /** The BIP341 internal key. */\n+    XOnlyPubKey internal_key;\n+    /** The Merkle root of the script tree (0 if no scripts). */\n+    uint256 merkle_root;\n+    /** Map from (script, leaf_version) to (sets of) control blocks. */\n+    std::map<std::pair<CScript, int>, std::set<std::vector<unsigned char>>> scripts;\n+    /** Merge other TaprootSpendData (for the same scriptPubKey) into this. */\n+    void Merge(TaprootSpendData other);\n+};\n+\n /** Utility class to construct Taproot outputs from internal key and script tree. */\n class TaprootBuilder\n {\n private:\n+    /** Information about a tracked leaf in the Merkle tree. */\n+    struct LeafInfo\n+    {\n+        CScript script;                      //!< The script.\n+        int leaf_version;                    //!< The leaf version for that script.\n+        std::vector<uint256> merkle_branch;  //!< The hashing partners above this leaf.\n+    };\n+\n     /** Information associated with a node in the Merkle tree. */\n     struct NodeInfo\n     {\n         /** Merkle hash of this node. */\n         uint256 hash;\n+        /** Tracked leaves underneath this node (either from the node itself, or its children).\n+         *  The merkle_branch field for each is the partners to get to *this* node. */\n+        std::vector<LeafInfo> leaves;\n     };\n     /** Whether the builder is in a valid state so far. */\n     bool m_valid = true;\n@@ -260,7 +284,8 @@ class TaprootBuilder\n     std::vector<std::optional<NodeInfo>> m_branch;\n \n     XOnlyPubKey m_internal_key;  //!< The internal key, set when finalizing.\n-    XOnlyPubKey m_output_key; //!< The output key, computed when finalizing. */\n+    XOnlyPubKey m_output_key;    //!< The output key, computed when finalizing.\n+    bool m_parity;               //!< The tweak parity, computed when finalizing.\n \n     /** Combine information about a parent Merkle tree node from its child nodes. */\n     static NodeInfo Combine(NodeInfo&& a, NodeInfo&& b);\n@@ -269,8 +294,9 @@ class TaprootBuilder\n \n public:\n     /** Add a new script at a certain depth in the tree. Add() operations must be called\n-     *  in depth-first traversal order of binary tree. */\n-    TaprootBuilder& Add(int depth, const CScript& script, int leaf_version);\n+     *  in depth-first traversal order of binary tree. If track is true, it will be included in\n+     *  the GetSpendData() output. */\n+    TaprootBuilder& Add(int depth, const CScript& script, int leaf_version, bool track = true);\n     /** Like Add(), but for a Merkle node with a given hash to the tree. */\n     TaprootBuilder& AddOmitted(int depth, const uint256& hash);\n     /** Finalize the construction. Can only be called when IsComplete() is true.\n@@ -285,6 +311,8 @@ class TaprootBuilder\n     WitnessV1Taproot GetOutput();\n     /** Check if a list of depths is legal (will lead to IsComplete()). */\n     static bool ValidDepths(const std::vector<int>& depths);\n+    /** Compute spending data (after Finalize()). */\n+    TaprootSpendData GetSpendData() const;\n };\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      }
    ]
  },
  {
    "sha": "e77a2839b54fa2039bba468e8c09dbbbf19b150a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzdhMjgzOWI1NGZhMjAzOWJiYTQ2OGU4YzA5ZGJiYmYxOWIxNTBh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-23T03:31:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Use HandleMissingData also in CheckSchnorrSignature",
      "tree": {
        "sha": "584a72f0a2f401c3879f05067d14ec64747844b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/584a72f0a2f401c3879f05067d14ec64747844b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e77a2839b54fa2039bba468e8c09dbbbf19b150a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e77a2839b54fa2039bba468e8c09dbbbf19b150a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e77a2839b54fa2039bba468e8c09dbbbf19b150a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e77a2839b54fa2039bba468e8c09dbbbf19b150a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb0ce9fbff01ffe4dd29da465f43ecaddc2854c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c49d4a5ab570c1694af919b0cbfdf6e37f8e5f6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e77a2839b54fa2039bba468e8c09dbbbf19b150a/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e77a2839b54fa2039bba468e8c09dbbbf19b150a/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e77a2839b54fa2039bba468e8c09dbbbf19b150a",
        "patch": "@@ -1711,7 +1711,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     uint256 sighash;\n-    assert(this->txdata);\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n     if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, *this->txdata, m_mdb)) {\n         return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }"
      }
    ]
  },
  {
    "sha": "a91d532338ecb66ec5bed164929d878dd55d63a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTFkNTMyMzM4ZWNiNjZlYzViZWQxNjQ5MjlkODc4ZGQ1NWQ2M2E0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-08T08:15:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Add CKey::SignSchnorr function for BIP 340/341 signing",
      "tree": {
        "sha": "6a4d736bcf31222e9fcb7d46545bc2d292b29d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a4d736bcf31222e9fcb7d46545bc2d292b29d90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a91d532338ecb66ec5bed164929d878dd55d63a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a91d532338ecb66ec5bed164929d878dd55d63a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a91d532338ecb66ec5bed164929d878dd55d63a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a91d532338ecb66ec5bed164929d878dd55d63a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e77a2839b54fa2039bba468e8c09dbbbf19b150a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e77a2839b54fa2039bba468e8c09dbbbf19b150a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e77a2839b54fa2039bba468e8c09dbbbf19b150a"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcad386e7718428c05072694d1a6f1bbdf41aef6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a91d532338ecb66ec5bed164929d878dd55d63a4/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a91d532338ecb66ec5bed164929d878dd55d63a4/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a91d532338ecb66ec5bed164929d878dd55d63a4",
        "patch": "@@ -7,10 +7,13 @@\n \n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n+#include <hash.h>\n #include <random.h>\n \n #include <secp256k1.h>\n+#include <secp256k1_extrakeys.h>\n #include <secp256k1_recovery.h>\n+#include <secp256k1_schnorrsig.h>\n \n static secp256k1_context* secp256k1_context_sign = nullptr;\n \n@@ -258,6 +261,24 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256* aux) const\n+{\n+    assert(sig.size() == 64);\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, begin())) return false;\n+    if (merkle_root) {\n+        secp256k1_xonly_pubkey pubkey;\n+        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        unsigned char pubkey_bytes[32];\n+        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n+        if (!secp256k1_keypair_xonly_tweak_add(GetVerifyContext(), &keypair, tweak.data())) return false;\n+    }\n+    bool ret = secp256k1_schnorrsig_sign(secp256k1_context_sign, sig.data(), hash.data(), &keypair, secp256k1_nonce_function_bip340, aux ? (void*)aux->data() : nullptr);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    return ret;\n+}\n+\n bool CKey::Load(const CPrivKey &seckey, const CPubKey &vchPubKey, bool fSkipCheck=false) {\n     if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size()))\n         return false;"
      },
      {
        "sha": "d47e54800cc154b720c179e207188f8772be0464",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a91d532338ecb66ec5bed164929d878dd55d63a4/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a91d532338ecb66ec5bed164929d878dd55d63a4/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=a91d532338ecb66ec5bed164929d878dd55d63a4",
        "patch": "@@ -128,6 +128,18 @@ class CKey\n      */\n     bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n+    /**\n+     * Create a BIP-340 Schnorr signature, for the xonly-pubkey corresponding to *this,\n+     * optionally tweaked by *merkle_root. Additional nonce entropy can be provided through\n+     * aux.\n+     *\n+     * When merkle_root is not nullptr, this results in a signature with a modified key as\n+     * specified in BIP341:\n+     * - If merkle_root->IsNull(): key + H_TapTweak(pubkey)*G\n+     * - Otherwise:                key + H_TapTweak(pubkey || *merkle_root)\n+     */\n+    bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root = nullptr, const uint256* aux = nullptr) const;\n+\n     //! Derive BIP32 child key.\n     bool Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n "
      },
      {
        "sha": "175a39b8053ec951f33ef9d15c4ffb4ba7fa1791",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a91d532338ecb66ec5bed164929d878dd55d63a4/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a91d532338ecb66ec5bed164929d878dd55d63a4/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=a91d532338ecb66ec5bed164929d878dd55d63a4",
        "patch": "@@ -373,3 +373,7 @@ ECCVerifyHandle::~ECCVerifyHandle()\n         secp256k1_context_verify = nullptr;\n     }\n }\n+\n+const secp256k1_context* GetVerifyContext() {\n+    return secp256k1_context_verify;\n+}"
      },
      {
        "sha": "eec34a89c2a3f303cfd34517b9b84d7f910f4688",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a91d532338ecb66ec5bed164929d878dd55d63a4/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a91d532338ecb66ec5bed164929d878dd55d63a4/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=a91d532338ecb66ec5bed164929d878dd55d63a4",
        "patch": "@@ -316,4 +316,10 @@ class ECCVerifyHandle\n     ~ECCVerifyHandle();\n };\n \n+typedef struct secp256k1_context_struct secp256k1_context;\n+\n+/** Access to the internal secp256k1 context used for verification. Only intended to be used\n+ *  by key.cpp. */\n+const secp256k1_context* GetVerifyContext();\n+\n #endif // BITCOIN_PUBKEY_H"
      },
      {
        "sha": "b915982d98aa30ce8b25e827f7b9edc2dfb03ef7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a91d532338ecb66ec5bed164929d878dd55d63a4/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a91d532338ecb66ec5bed164929d878dd55d63a4/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=a91d532338ecb66ec5bed164929d878dd55d63a4",
        "patch": "@@ -300,6 +300,48 @@ BOOST_AUTO_TEST_CASE(bip340_test_vectors)\n         auto sig = ParseHex(test.first[2]);\n         BOOST_CHECK_EQUAL(XOnlyPubKey(pubkey).VerifySchnorr(uint256(msg), sig), test.second);\n     }\n+\n+    static const std::vector<std::array<std::string, 5>> SIGN_VECTORS = {\n+        {{\"0000000000000000000000000000000000000000000000000000000000000003\", \"F9308A019258C31049344F85F89D5229B531C845836F99B08601F113BCE036F9\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"E907831F80848D1069A5371B402410364BDF1C5F8307B0084C55F1CE2DCA821525F66A4A85EA8B71E482A74F382D2CE5EBEEE8FDB2172F477DF4900D310536C0\"}},\n+        {{\"B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF\", \"DFF1D77F2A671C5F36183726DB2341BE58FEAE1DA2DECED843240F7B502BA659\", \"0000000000000000000000000000000000000000000000000000000000000001\", \"243F6A8885A308D313198A2E03707344A4093822299F31D0082EFA98EC4E6C89\", \"6896BD60EEAE296DB48A229FF71DFE071BDE413E6D43F917DC8DCF8C78DE33418906D11AC976ABCCB20B091292BFF4EA897EFCB639EA871CFA95F6DE339E4B0A\"}},\n+        {{\"C90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B14E5C9\", \"DD308AFEC5777E13121FA72B9CC1B7CC0139715309B086C960E18FD969774EB8\", \"C87AA53824B4D7AE2EB035A2B5BBBCCC080E76CDC6D1692C4B0B62D798E6D906\", \"7E2D58D8B3BCDF1ABADEC7829054F90DDA9805AAB56C77333024B9D0A508B75C\", \"5831AAEED7B44BB74E5EAB94BA9D4294C49BCF2A60728D8B4C200F50DD313C1BAB745879A5AD954A72C45A91C3A51D3C7ADEA98D82F8481E0E1E03674A6F3FB7\"}},\n+        {{\"0B432B2677937381AEF05BB02A66ECD012773062CF3FA2549E44F58ED2401710\", \"25D1DFF95105F5253C4022F628A996AD3A0D95FBF21D468A1B33F8C160D8F517\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"7EB0509757E246F19449885651611CB965ECC1A187DD51B64FDA1EDC9637D5EC97582B9CB13DB3933705B32BA982AF5AF25FD78881EBB32771FC5922EFC66EA3\"}},\n+    };\n+\n+    for (const auto& [sec_hex, pub_hex, aux_hex, msg_hex, sig_hex] : SIGN_VECTORS) {\n+        auto sec = ParseHex(sec_hex);\n+        auto pub = ParseHex(pub_hex);\n+        uint256 aux256(ParseHex(aux_hex));\n+        uint256 msg256(ParseHex(msg_hex));\n+        auto sig = ParseHex(sig_hex);\n+        unsigned char sig64[64];\n+\n+        // Run the untweaked test vectors above, comparing with exact expected signature.\n+        CKey key;\n+        key.Set(sec.begin(), sec.end(), true);\n+        XOnlyPubKey pubkey(key.GetPubKey());\n+        BOOST_CHECK(std::equal(pubkey.begin(), pubkey.end(), pub.begin(), pub.end()));\n+        bool ok = key.SignSchnorr(msg256, sig64, nullptr, &aux256);\n+        BOOST_CHECK(ok);\n+        BOOST_CHECK(std::vector<unsigned char>(sig64, sig64 + 64) == sig);\n+        // Verify those signatures for good measure.\n+        BOOST_CHECK(pubkey.VerifySchnorr(msg256, sig64));\n+\n+        // Do 10 iterations where we sign with a random Merkle root to tweak,\n+        // and compare against the resulting tweaked keys, with random aux.\n+        // In iteration i=0 we tweak with empty Merkle tree.\n+        for (int i = 0; i < 10; ++i) {\n+            uint256 merkle_root;\n+            if (i) merkle_root = InsecureRand256();\n+            auto tweaked = pubkey.CreateTapTweak(i ? &merkle_root : nullptr);\n+            BOOST_CHECK(tweaked);\n+            XOnlyPubKey tweaked_key = tweaked->first;\n+            aux256 = InsecureRand256();\n+            bool ok = key.SignSchnorr(msg256, sig64, &merkle_root, &aux256);\n+            BOOST_CHECK(ok);\n+            BOOST_CHECK(tweaked_key.VerifySchnorr(msg256, sig64));\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e841fb503d7a662bde01ec2e4794faa989265950",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODQxZmI1MDNkN2E2NjJiZGUwMWVjMmU0Nzk0ZmFhOTg5MjY1OTUw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-18T02:57:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Add precomputed txdata support to MutableTransactionSignatureCreator\n\nThis provides a means to pass in a PrecomputedTransactionData object to\nthe MutableTransactionSignatureCreator, allowing the prevout data to be\npassed into the signature hashers. It is also more efficient.",
      "tree": {
        "sha": "ab927facb0007e8a32fd93827604647dea680a41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab927facb0007e8a32fd93827604647dea680a41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e841fb503d7a662bde01ec2e4794faa989265950",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e841fb503d7a662bde01ec2e4794faa989265950",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e841fb503d7a662bde01ec2e4794faa989265950",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e841fb503d7a662bde01ec2e4794faa989265950/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a91d532338ecb66ec5bed164929d878dd55d63a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a91d532338ecb66ec5bed164929d878dd55d63a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a91d532338ecb66ec5bed164929d878dd55d63a4"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 18,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fe5cec89b0f57fbce2fba53ada0c596a99d9f018",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e841fb503d7a662bde01ec2e4794faa989265950/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e841fb503d7a662bde01ec2e4794faa989265950/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e841fb503d7a662bde01ec2e4794faa989265950",
        "patch": "@@ -14,7 +14,19 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL) {}\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn)\n+    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL),\n+      m_txdata(nullptr)\n+{\n+}\n+\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn)\n+    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn),\n+      checker(txdata ? MutableTransactionSignatureChecker(txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL) :\n+          MutableTransactionSignatureChecker(txTo, nIn, amount, MissingDataBehavior::FAIL)),\n+      m_txdata(txdata)\n+{\n+}\n \n bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n@@ -26,10 +38,10 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     if (sigversion == SigVersion::WITNESS_V0 && !key.IsCompressed())\n         return false;\n \n-    // Signing for witness scripts needs the amount.\n-    if (sigversion == SigVersion::WITNESS_V0 && amount < 0) return false;\n+    // Signing without known amount does not work in witness scripts.\n+    if (sigversion == SigVersion::WITNESS_V0 && !MoneyRange(amount)) return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, m_txdata);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);"
      },
      {
        "sha": "7abc6d006d38d1c5bd1949324777319cab32d34c",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e841fb503d7a662bde01ec2e4794faa989265950/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e841fb503d7a662bde01ec2e4794faa989265950/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=e841fb503d7a662bde01ec2e4794faa989265950",
        "patch": "@@ -40,9 +40,11 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     int nHashType;\n     CAmount amount;\n     const MutableTransactionSignatureChecker checker;\n+    const PrecomputedTransactionData* m_txdata;\n \n public:\n     MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };"
      }
    ]
  },
  {
    "sha": "ce9353164bdb6215a62b2b6dcb2121d331796f60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTkzNTMxNjRiZGI2MjE1YTYyYjJiNmRjYjIxMjFkMzMxNzk2ZjYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:24:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Permit full precomputation in PrecomputedTransactionData\n\nAt verification time, the to be precomputed data can be inferred from\nthe transaction itself. For signing, the necessary witnesses don't\nexist yet, so just permit precomputing everything in that case.",
      "tree": {
        "sha": "69364a7de2b250b2841500ff8b68095f36926ee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69364a7de2b250b2841500ff8b68095f36926ee7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce9353164bdb6215a62b2b6dcb2121d331796f60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce9353164bdb6215a62b2b6dcb2121d331796f60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce9353164bdb6215a62b2b6dcb2121d331796f60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce9353164bdb6215a62b2b6dcb2121d331796f60/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e841fb503d7a662bde01ec2e4794faa989265950",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e841fb503d7a662bde01ec2e4794faa989265950",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e841fb503d7a662bde01ec2e4794faa989265950"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2dd173ee203bbd030af485493d77a1576878a0bb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce9353164bdb6215a62b2b6dcb2121d331796f60/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce9353164bdb6215a62b2b6dcb2121d331796f60/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=ce9353164bdb6215a62b2b6dcb2121d331796f60",
        "patch": "@@ -1420,7 +1420,7 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n } // namespace\n \n template <class T>\n-void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs, bool force)\n {\n     assert(!m_spent_outputs_ready);\n \n@@ -1431,9 +1431,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     }\n \n     // Determine which precomputation-impacting features this transaction uses.\n-    bool uses_bip143_segwit = false;\n-    bool uses_bip341_taproot = false;\n-    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+    bool uses_bip143_segwit = force;\n+    bool uses_bip341_taproot = force;\n+    for (size_t inpos = 0; inpos < txTo.vin.size() && !(uses_bip143_segwit && uses_bip341_taproot); ++inpos) {\n         if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n             if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n                 m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n@@ -1478,8 +1478,8 @@ PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n }\n \n // explicit instantiation\n-template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut>&& spent_outputs);\n-template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut>&& spent_outputs);\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut>&& spent_outputs, bool force);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut>&& spent_outputs, bool force);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n "
      },
      {
        "sha": "399d7751812075587d46a55bc7fd02709b16ec5f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce9353164bdb6215a62b2b6dcb2121d331796f60/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce9353164bdb6215a62b2b6dcb2121d331796f60/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=ce9353164bdb6215a62b2b6dcb2121d331796f60",
        "patch": "@@ -168,7 +168,7 @@ struct PrecomputedTransactionData\n     PrecomputedTransactionData() = default;\n \n     template <class T>\n-    void Init(const T& tx, std::vector<CTxOut>&& spent_outputs);\n+    void Init(const T& tx, std::vector<CTxOut>&& spent_outputs, bool force = false);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);"
      }
    ]
  },
  {
    "sha": "5d2e22437b22e7465ae4be64069443bcc1769dc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDJlMjI0MzdiMjJlNzQ2NWFlNGJlNjQwNjk0NDNiY2MxNzY5ZGM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:26:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Don't nuke witness data when signing fails",
      "tree": {
        "sha": "e069abc3807ac4de283ff117f8600e85c1650c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e069abc3807ac4de283ff117f8600e85c1650c19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d2e22437b22e7465ae4be64069443bcc1769dc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2e22437b22e7465ae4be64069443bcc1769dc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2e22437b22e7465ae4be64069443bcc1769dc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2e22437b22e7465ae4be64069443bcc1769dc9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce9353164bdb6215a62b2b6dcb2121d331796f60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce9353164bdb6215a62b2b6dcb2121d331796f60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce9353164bdb6215a62b2b6dcb2121d331796f60"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d711f8997beceb3923643c068c0a6475bec20a38",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2e22437b22e7465ae4be64069443bcc1769dc9/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2e22437b22e7465ae4be64069443bcc1769dc9/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5d2e22437b22e7465ae4be64069443bcc1769dc9",
        "patch": "@@ -217,7 +217,6 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE, sigdata);\n     bool P2SH = false;\n     CScript subscript;\n-    sigdata.scriptWitness.stack.clear();\n \n     if (solved && whichType == TxoutType::SCRIPTHASH)\n     {\n@@ -254,6 +253,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         sigdata.witness = true;\n     }\n \n+    if (!sigdata.witness) sigdata.scriptWitness.stack.clear();\n     if (P2SH) {\n         result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n     }"
      }
    ]
  },
  {
    "sha": "5cb6502ac5730ea453edbec4c46027ac2ada97e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2I2NTAyYWM1NzMwZWE0NTNlZGJlYzRjNDYwMjdhYzJhZGE5N2Uw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:30:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Construct and use PrecomputedTransactionData in SignTransaction",
      "tree": {
        "sha": "1fdbf28dcb5a879d785ba4ac90950aca2ab0388c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fdbf28dcb5a879d785ba4ac90950aca2ab0388c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cb6502ac5730ea453edbec4c46027ac2ada97e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6502ac5730ea453edbec4c46027ac2ada97e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb6502ac5730ea453edbec4c46027ac2ada97e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6502ac5730ea453edbec4c46027ac2ada97e0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d2e22437b22e7465ae4be64069443bcc1769dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2e22437b22e7465ae4be64069443bcc1769dc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2e22437b22e7465ae4be64069443bcc1769dc9"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 22,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8cc5cb6406aa7eb32c02006558ab6a0dbd8a81ce",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb6502ac5730ea453edbec4c46027ac2ada97e0/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb6502ac5730ea453edbec4c46027ac2ada97e0/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5cb6502ac5730ea453edbec4c46027ac2ada97e0",
        "patch": "@@ -488,6 +488,26 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n     // Use CTransaction for the constant parts of the\n     // transaction to avoid rehashing.\n     const CTransaction txConst(mtx);\n+\n+    PrecomputedTransactionData txdata;\n+    std::vector<CTxOut> spent_outputs;\n+    spent_outputs.resize(mtx.vin.size());\n+    bool have_all_spent_outputs = true;\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            have_all_spent_outputs = false;\n+        } else {\n+            spent_outputs[i] = CTxOut(coin->second.out.nValue, coin->second.out.scriptPubKey);\n+        }\n+    }\n+    if (have_all_spent_outputs) {\n+        txdata.Init(txConst, std::move(spent_outputs), true);\n+    } else {\n+        txdata.Init(txConst, {}, true);\n+    }\n+\n     // Sign what we can:\n     for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n         CTxIn& txin = mtx.vin[i];\n@@ -502,7 +522,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n         }\n \n         UpdateInput(txin, sigdata);\n@@ -514,7 +534,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         }\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, MissingDataBehavior::FAIL), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, txdata, MissingDataBehavior::FAIL), &serror)) {\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n                 input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";"
      }
    ]
  },
  {
    "sha": "fd3f6890f3dfd683f6f13db912caf5c4288adf08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDNmNjg5MGYzZGZkNjgzZjZmMTNkYjkxMmNhZjVjNDI4OGFkZjA4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-04T00:47:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Construct and use PrecomputedTransactionData in PSBT signing",
      "tree": {
        "sha": "f59709a19027dfdc7e012189cacf72527f20d761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f59709a19027dfdc7e012189cacf72527f20d761"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd3f6890f3dfd683f6f13db912caf5c4288adf08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3f6890f3dfd683f6f13db912caf5c4288adf08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd3f6890f3dfd683f6f13db912caf5c4288adf08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3f6890f3dfd683f6f13db912caf5c4288adf08/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cb6502ac5730ea453edbec4c46027ac2ada97e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6502ac5730ea453edbec4c46027ac2ada97e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb6502ac5730ea453edbec4c46027ac2ada97e0"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 50,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b013b6d579381cf3c7b1efb85dd375acf53944a8",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -23,6 +23,8 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     result.inputs.resize(psbtx.tx->vin.size());\n \n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n+\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         PSBTInput& input = psbtx.inputs[i];\n         PSBTInputAnalysis& input_analysis = result.inputs[i];\n@@ -61,7 +63,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n             // Figure out what is missing\n             SignatureData outdata;\n-            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, 1, &outdata);\n \n             // Things are missing\n             if (!complete) {\n@@ -121,7 +123,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             PSBTInput& input = psbtx.inputs[i];\n             Coin newcoin;\n \n-            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n+            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, nullptr, 1) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n                 success = false;\n                 break;\n             } else {"
      },
      {
        "sha": "9894749fab655ad72abb89d71f607cadba63a882",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 4,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -227,7 +227,24 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     psbt_out.FromSignatureData(sigdata);\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n+PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction& psbt)\n+{\n+    const CMutableTransaction& tx = *psbt.tx;\n+    bool have_all_spent_outputs = true;\n+    std::vector<CTxOut> utxos(tx.vin.size());\n+    for (size_t idx = 0; idx < tx.vin.size(); ++idx) {\n+        if (!psbt.GetInputUTXO(utxos[idx], idx)) have_all_spent_outputs = false;\n+    }\n+    PrecomputedTransactionData txdata;\n+    if (have_all_spent_outputs) {\n+        txdata.Init(tx, std::move(utxos), true);\n+    } else {\n+        txdata.Init(tx, {}, true);\n+    }\n+    return txdata;\n+}\n+\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash, SignatureData* out_sigdata)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -267,10 +284,10 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n \n     sigdata.witness = false;\n     bool sig_complete;\n-    if (use_dummy) {\n+    if (txdata == nullptr) {\n         sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n     } else {\n-        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, txdata, sighash);\n         sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n     }\n     // Verify that a witness signature was produced in case one was required.\n@@ -302,8 +319,9 @@ bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n     //   PartiallySignedTransaction did not understand them), this will combine them into a final\n     //   script.\n     bool complete = true;\n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL);\n     }\n \n     return complete;"
      },
      {
        "sha": "f6b82b43de64af8fe56b47ab6fd60651061b1cb7",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -567,11 +567,18 @@ enum class PSBTRole {\n \n std::string PSBTRoleName(PSBTRole role);\n \n+/** Compute a PrecomputedTransactionData object from a psbt. */\n+PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction& psbt);\n+\n /** Checks whether a PSBTInput is already signed. */\n bool PSBTInputSigned(const PSBTInput& input);\n \n-/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed.\n+ *\n+ * txdata should be the output of PrecomputePSBTData (which can be shared across\n+ * multiple SignPSBTInput calls). If it is nullptr, a dummy signature will be created.\n+ **/\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr);\n \n /** Counts the unsigned inputs of a PSBT. */\n size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction& psbt);"
      },
      {
        "sha": "2fa033aee360815163dc77e0ba462c0131a69a58",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -1655,6 +1655,7 @@ static RPCHelpMan utxoupdatepsbt()\n     }\n \n     // Fill the inputs\n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n@@ -1671,7 +1672,7 @@ static RPCHelpMan utxoupdatepsbt()\n         // Update script/keypath information using descriptor data.\n         // Note that SignPSBTInput does a lot more than just constructing ECDSA signatures\n         // we don't actually care about those here, in fact.\n-        SignPSBTInput(public_provider, psbtx, i, /* sighash_type */ 1);\n+        SignPSBTInput(public_provider, psbtx, i, &txdata, /* sighash_type */ 1);\n     }\n \n     // Update script/keypath information using descriptor data."
      },
      {
        "sha": "03bb5d8b2c0f53fa0033416be9f39f0528c7587e",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -62,10 +62,10 @@ bool ExternalSignerScriptPubKeyMan::DisplayAddress(const CScript scriptPubKey, c\n }\n \n // If sign is true, transaction must previously have been filled\n-TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n {\n     if (!sign) {\n-        return DescriptorScriptPubKeyMan::FillPSBT(psbt, sighash_type, false, bip32derivs, n_signed);\n+        return DescriptorScriptPubKeyMan::FillPSBT(psbt, txdata, sighash_type, false, bip32derivs, n_signed);\n     }\n \n     // Already complete if every input is now signed"
      },
      {
        "sha": "166b81d886d16b622dc48dd3e824d0d379b5fb66",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -29,7 +29,7 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n \n   bool DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const;\n \n-  TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+  TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n };\n #endif\n "
      },
      {
        "sha": "c8669f4b03ab3e6a641dcc3911ec921436242c81",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -597,7 +597,7 @@ SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, con\n     return SigningResult::SIGNING_FAILED;\n }\n \n-TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -626,7 +626,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {\n@@ -2083,7 +2083,7 @@ SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message,\n     return SigningResult::OK;\n }\n \n-TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -2133,7 +2133,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n             }\n         }\n \n-        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {"
      },
      {
        "sha": "3c4603608c16cc17825d01b3de271e164737d0b8",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -235,7 +235,7 @@ class ScriptPubKeyMan\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n-    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const { return TransactionError::INVALID_PSBT; }\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -394,7 +394,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n \n     uint256 GetID() const override;\n \n@@ -605,7 +605,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "1cefa386b7f40e6920b498846adbc8f2ac66dcf7",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Try to sign the mutated input\n     SignatureData sigdata;\n-    BOOST_CHECK(spk_man->FillPSBT(psbtx, SIGHASH_ALL, true, true) != TransactionError::OK);\n+    BOOST_CHECK(spk_man->FillPSBT(psbtx, PrecomputePSBTData(psbtx), SIGHASH_ALL, true, true) != TransactionError::OK);\n }\n \n BOOST_AUTO_TEST_CASE(parse_hd_keypath)"
      },
      {
        "sha": "ac96e8fcaf4fe4f1f4536e8bcd1357365f13500b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd3f6890f3dfd683f6f13db912caf5c4288adf08/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "patch": "@@ -1830,6 +1830,7 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     if (n_signed) {\n         *n_signed = 0;\n     }\n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     LOCK(cs_wallet);\n     // Get all of the previous transactions\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n@@ -1856,7 +1857,7 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     // Fill in information from ScriptPubKeyMans\n     for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n         int n_signed_this_spkm = 0;\n-        TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs, &n_signed_this_spkm);\n+        TransactionError res = spk_man->FillPSBT(psbtx, txdata, sighash_type, sign, bip32derivs, &n_signed_this_spkm);\n         if (res != TransactionError::OK) {\n             return res;\n         }"
      }
    ]
  },
  {
    "sha": "49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTQ4N2JjM2I2MDM4MzkzYzFiOWMyZGJkYzA0YTc4YWUxMTc4ZjFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-07T23:47:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Make GetInputUTXO safer: verify non-witness UTXO match",
      "tree": {
        "sha": "00c243e51ff179a657242a7f718af6c9527542ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00c243e51ff179a657242a7f718af6c9527542ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd3f6890f3dfd683f6f13db912caf5c4288adf08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd3f6890f3dfd683f6f13db912caf5c4288adf08"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5445bc8aa11fd39ca311649e8c8a06c0397a6d35",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
        "patch": "@@ -59,12 +59,15 @@ bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput\n \n bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n {\n-    PSBTInput input = inputs[input_index];\n+    const PSBTInput& input = inputs[input_index];\n     uint32_t prevout_index = tx->vin[input_index].prevout.n;\n     if (input.non_witness_utxo) {\n         if (prevout_index >= input.non_witness_utxo->vout.size()) {\n             return false;\n         }\n+        if (input.non_witness_utxo->GetHash() != tx->vin[input_index].prevout.hash) {\n+            return false;\n+        }\n         utxo = input.non_witness_utxo->vout[prevout_index];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;"
      }
    ]
  },
  {
    "sha": "a2380127e905e5849f90acc7c69832859d8336aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjM4MDEyN2U5MDVlNTg0OWY5MGFjYzdjNjk4MzI4NTlkODMzNmFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:33:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:25:28Z"
      },
      "message": "Basic Taproot signing logic in script/sign.cpp",
      "tree": {
        "sha": "a5f5e0086a2da8c4bb333efc7e53c42996ecdfff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5f5e0086a2da8c4bb333efc7e53c42996ecdfff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2380127e905e5849f90acc7c69832859d8336aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2380127e905e5849f90acc7c69832859d8336aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2380127e905e5849f90acc7c69832859d8336aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2380127e905e5849f90acc7c69832859d8336aa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49487bc3b6038393c1b9c2dbdc04a78ae1178f1a"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 166,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ced5c28bc16dffdb3b4e87ec9ee6e7fc9c44c6cb",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2380127e905e5849f90acc7c69832859d8336aa/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2380127e905e5849f90acc7c69832859d8336aa/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=a2380127e905e5849f90acc7c69832859d8336aa",
        "patch": "@@ -260,6 +260,9 @@ enum class MissingDataBehavior\n     FAIL,         //!< Just act as if the signature was invalid\n };\n \n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, uint32_t in_pos, uint8_t hash_type, SigVersion sigversion, const PrecomputedTransactionData& cache, MissingDataBehavior mdb);\n+\n template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {"
      },
      {
        "sha": "749bcc173cad678e446c1be6f22fe3177b85e2f6",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 1,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2380127e905e5849f90acc7c69832859d8336aa/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2380127e905e5849f90acc7c69832859d8336aa/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a2380127e905e5849f90acc7c69832859d8336aa",
        "patch": "@@ -11,6 +11,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/vector.h>\n \n typedef std::vector<unsigned char> valtype;\n \n@@ -30,6 +31,8 @@ MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMu\n \n bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0);\n+\n     CKey key;\n     if (!provider.GetKey(address, key))\n         return false;\n@@ -48,6 +51,51 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n+bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    CKey key;\n+    {\n+        // For now, use the old full pubkey-based key derivation logic. As it indexed by\n+        // Hash160(full pubkey), we need to try both a version prefixed with 0x02, and one\n+        // with 0x03.\n+        unsigned char b[33] = {0x02};\n+        std::copy(pubkey.begin(), pubkey.end(), b + 1);\n+        CPubKey fullpubkey;\n+        fullpubkey.Set(b, b + 33);\n+        CKeyID keyid = fullpubkey.GetID();\n+        if (!provider.GetKey(keyid, key)) {\n+            b[0] = 0x03;\n+            fullpubkey.Set(b, b + 33);\n+            CKeyID keyid = fullpubkey.GetID();\n+            if (!provider.GetKey(keyid, key)) return false;\n+        }\n+    }\n+\n+    // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n+    // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n+    // of data present, for now, only support signing when everything is provided.\n+    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+\n+    ScriptExecutionData execdata;\n+    execdata.m_annex_init = true;\n+    execdata.m_annex_present = false; // Only support annex-less signing for now.\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        execdata.m_codeseparator_pos_init = true;\n+        execdata.m_codeseparator_pos = 0xFFFFFFFF; // Only support non-OP_CODESEPARATOR BIP342 signing for now.\n+        if (!leaf_hash) return false; // BIP342 signing needs leaf hash.\n+        execdata.m_tapleaf_hash_init = true;\n+        execdata.m_tapleaf_hash = *leaf_hash;\n+    }\n+    uint256 hash;\n+    if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    sig.resize(64);\n+    if (!key.SignSchnorr(hash, sig, merkle_root, nullptr)) return false;\n+    if (nHashType) sig.push_back(nHashType);\n+    return true;\n+}\n+\n static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\n {\n     if (provider.GetCScript(scriptid, script)) {\n@@ -104,6 +152,86 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& pubkey, const uint256& leaf_hash, SigVersion sigversion)\n+{\n+    auto lookup_key = std::make_pair(pubkey, leaf_hash);\n+    auto it = sigdata.taproot_script_sigs.find(lookup_key);\n+    if (it != sigdata.taproot_script_sigs.end()) {\n+        sig_out = it->second;\n+    }\n+    if (creator.CreateSchnorrSig(provider, sig_out, pubkey, &leaf_hash, nullptr, sigversion)) {\n+        sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+static bool SignTaprootScript(const SigningProvider& provider, const BaseSignatureCreator& creator, SignatureData& sigdata, int leaf_version, const CScript& script, std::vector<valtype>& result)\n+{\n+    // Only BIP342 tapscript signing is supported for now.\n+    if (leaf_version != TAPROOT_LEAF_TAPSCRIPT) return false;\n+    SigVersion sigversion = SigVersion::TAPSCRIPT;\n+\n+    uint256 leaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(leaf_version) << script).GetSHA256();\n+\n+    // <xonly pubkey> OP_CHECKSIG\n+    if (script.size() == 34 && script[33] == OP_CHECKSIG && script[0] == 0x20) {\n+        XOnlyPubKey pubkey(MakeSpan(script).subspan(1, 32));\n+        std::vector<unsigned char> sig;\n+        if (CreateTaprootScriptSig(creator, sigdata, provider, sig, pubkey, leaf_hash, sigversion)) {\n+            result = Vector(std::move(sig));\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCreator& creator, const WitnessV1Taproot& output, SignatureData& sigdata, std::vector<valtype>& result)\n+{\n+    TaprootSpendData spenddata;\n+\n+    // Gather information about this output.\n+    if (provider.GetTaprootSpendData(output, spenddata)) {\n+        sigdata.tr_spenddata.Merge(spenddata);\n+    }\n+\n+    // Try key path spending.\n+    {\n+        std::vector<unsigned char> sig;\n+        if (sigdata.taproot_key_path_sig.size() == 0) {\n+            if (creator.CreateSchnorrSig(provider, sig, spenddata.internal_key, nullptr, &spenddata.merkle_root, SigVersion::TAPROOT)) {\n+                sigdata.taproot_key_path_sig = sig;\n+            }\n+        }\n+        if (sigdata.taproot_key_path_sig.size()) {\n+            result = Vector(sigdata.taproot_key_path_sig);\n+            return true;\n+        }\n+    }\n+\n+    // Try script path spending.\n+    std::vector<std::vector<unsigned char>> smallest_result_stack;\n+    for (const auto& [key, control_blocks] : sigdata.tr_spenddata.scripts) {\n+        const auto& [script, leaf_ver] = key;\n+        std::vector<std::vector<unsigned char>> result_stack;\n+        if (SignTaprootScript(provider, creator, sigdata, leaf_ver, script, result_stack)) {\n+            result_stack.emplace_back(std::begin(script), std::end(script)); // Push the script\n+            result_stack.push_back(*control_blocks.begin()); // Push the smallest control block\n+            if (smallest_result_stack.size() == 0 ||\n+                GetSerializeSize(result_stack, PROTOCOL_VERSION) < GetSerializeSize(smallest_result_stack, PROTOCOL_VERSION)) {\n+                smallest_result_stack = std::move(result_stack);\n+            }\n+        }\n+    }\n+    if (smallest_result_stack.size() != 0) {\n+        result = std::move(smallest_result_stack);\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n /**\n  * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n@@ -125,7 +253,6 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TxoutType::NONSTANDARD:\n     case TxoutType::NULL_DATA:\n     case TxoutType::WITNESS_UNKNOWN:\n-    case TxoutType::WITNESS_V1_TAPROOT:\n         return false;\n     case TxoutType::PUBKEY:\n         if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;\n@@ -187,6 +314,9 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         // Could not find witnessScript, add to missing\n         sigdata.missing_witness_script = uint256(vSolutions[0]);\n         return false;\n+\n+    case TxoutType::WITNESS_V1_TAPROOT:\n+        return SignTaproot(provider, creator, WitnessV1Taproot(XOnlyPubKey{vSolutions[0]}), sigdata, ret);\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -249,6 +379,12 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;\n         result.clear();\n+    } else if (whichType == TxoutType::WITNESS_V1_TAPROOT && !P2SH) {\n+        sigdata.witness = true;\n+        if (solved) {\n+            sigdata.scriptWitness.stack = std::move(result);\n+        }\n+        result.clear();\n     } else if (solved && whichType == TxoutType::WITNESS_UNKNOWN) {\n         sigdata.witness = true;\n     }\n@@ -414,6 +550,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n     bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n+    bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror) const override { return true; }\n };\n const DummySignatureChecker DUMMY_CHECKER;\n \n@@ -439,6 +576,11 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n         vchSig[6 + m_r_len + m_s_len] = SIGHASH_ALL;\n         return true;\n     }\n+    bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* tweak, SigVersion sigversion) const override\n+    {\n+        sig.assign(64, '\\000');\n+        return true;\n+    }\n };\n \n }"
      },
      {
        "sha": "b4e73188926acdc8e1e5522e266bcb18c7fdf398",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2380127e905e5849f90acc7c69832859d8336aa/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2380127e905e5849f90acc7c69832859d8336aa/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a2380127e905e5849f90acc7c69832859d8336aa",
        "patch": "@@ -11,13 +11,13 @@\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <script/keyorigin.h>\n+#include <script/standard.h>\n #include <span.h>\n #include <streams.h>\n \n class CKey;\n class CKeyID;\n class CScript;\n-class CScriptID;\n class CTransaction;\n class SigningProvider;\n \n@@ -31,6 +31,7 @@ class BaseSignatureCreator {\n \n     /** Create a singular (non-script) signature. */\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n+    virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -47,6 +48,7 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;\n };\n \n /** A signature creator that just produces 71-byte empty signatures. */\n@@ -66,8 +68,11 @@ struct SignatureData {\n     CScript redeem_script; ///< The redeemScript (if any) for the input\n     CScript witness_script; ///< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n+    TaprootSpendData tr_spenddata; ///< Taproot spending data.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n+    std::vector<unsigned char> taproot_key_path_sig; /// Schnorr signature for key path spending\n+    std::map<std::pair<XOnlyPubKey, uint256>, std::vector<unsigned char>> taproot_script_sigs; ///< (Partial) schnorr signatures, indexed by XOnlyPubKey and leaf_hash.\n     std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n     std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n     uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)"
      },
      {
        "sha": "285dd4c116a2031be4d010f6456fef0136bf5492",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2380127e905e5849f90acc7c69832859d8336aa/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2380127e905e5849f90acc7c69832859d8336aa/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a2380127e905e5849f90acc7c69832859d8336aa",
        "patch": "@@ -210,14 +210,26 @@ CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n /** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n+struct ShortestVectorFirstComparator\n+{\n+    bool operator()(const std::vector<unsigned char>& a, const std::vector<unsigned char>& b) const\n+    {\n+        if (a.size() < b.size()) return true;\n+        if (a.size() > b.size()) return false;\n+        return a < b;\n+    }\n+};\n+\n struct TaprootSpendData\n {\n     /** The BIP341 internal key. */\n     XOnlyPubKey internal_key;\n     /** The Merkle root of the script tree (0 if no scripts). */\n     uint256 merkle_root;\n-    /** Map from (script, leaf_version) to (sets of) control blocks. */\n-    std::map<std::pair<CScript, int>, std::set<std::vector<unsigned char>>> scripts;\n+    /** Map from (script, leaf_version) to (sets of) control blocks.\n+     *  The control blocks are sorted by size, so that the signing logic can\n+     *  easily prefer the cheapest one. */\n+    std::map<std::pair<CScript, int>, std::set<std::vector<unsigned char>, ShortestVectorFirstComparator>> scripts;\n     /** Merge other TaprootSpendData (for the same scriptPubKey) into this. */\n     void Merge(TaprootSpendData other);\n };"
      }
    ]
  },
  {
    "sha": "c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGYwYzhlY2NiMDRmOTA5NDAwMDdlMGM2YWFmZjU2YmYyYWIzNWI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-28T04:34:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:38:15Z"
      },
      "message": "tests: check spending of P2TR",
      "tree": {
        "sha": "6b8be3929832b53f3eca930a5b26d5a5cfb45c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b8be3929832b53f3eca930a5b26d5a5cfb45c72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2380127e905e5849f90acc7c69832859d8336aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2380127e905e5849f90acc7c69832859d8336aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2380127e905e5849f90acc7c69832859d8336aa"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 116,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1547a90125de1688c9bc22fe03145acd9dee214e",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 116,
        "deletions": 10,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
        "patch": "@@ -6,6 +6,7 @@\n \n import random\n \n+from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n from test_framework.descriptors import descsum_create\n@@ -233,20 +234,85 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n         # tr descriptors cannot be imported when Taproot is not active\n         result = self.privs_tr_enabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n         assert(result[0][\"success\"])\n-        result = self.privs_tr_disabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n-        assert(not result[0][\"success\"])\n-        assert_equal(result[0][\"error\"][\"code\"], -4)\n-        assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n         result = self.pubs_tr_enabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n         assert(result[0][\"success\"])\n-        result = self.pubs_tr_disabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n-        assert(not result[0][\"success\"])\n-        assert_equal(result[0][\"error\"][\"code\"], -4)\n-        assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+        if desc.startswith(\"tr\"):\n+            result = self.privs_tr_disabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+            assert(not result[0][\"success\"])\n+            assert_equal(result[0][\"error\"][\"code\"], -4)\n+            assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+            result = self.pubs_tr_disabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n+            assert(not result[0][\"success\"])\n+            assert_equal(result[0][\"error\"][\"code\"], -4)\n+            assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+\n+    def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, keys_change):\n+        self.log.info(\"Testing %s through sendtoaddress\" % comment)\n+        desc_pay = self.make_desc(pattern, privmap, keys_pay)\n+        desc_change = self.make_desc(pattern, privmap, keys_change)\n+        desc_pay_pub = self.make_desc(pattern, privmap, keys_pay, True)\n+        desc_change_pub = self.make_desc(pattern, privmap, keys_change, True)\n+        assert_equal(self.nodes[0].getdescriptorinfo(desc_pay)['descriptor'], desc_pay_pub)\n+        assert_equal(self.nodes[0].getdescriptorinfo(desc_change)['descriptor'], desc_change_pub)\n+        result = self.rpc_online.importdescriptors([{\"desc\": desc_pay, \"active\": True, \"timestamp\": \"now\"}])\n+        assert(result[0]['success'])\n+        result = self.rpc_online.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n+        assert(result[0]['success'])\n+        for i in range(4):\n+            addr_g = self.rpc_online.getnewaddress(address_type='bech32')\n+            if treefn is not None:\n+                addr_r = self.make_addr(treefn, keys_pay, i)\n+                assert_equal(addr_g, addr_r)\n+            boring_balance = int(self.boring.getbalance() * 100000000)\n+            to_amnt = random.randrange(1000000, boring_balance)\n+            self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            test_balance = int(self.rpc_online.getbalance() * 100000000)\n+            ret_amnt = random.randrange(100000, test_balance)\n+            res = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=Decimal(ret_amnt) / 100000000, subtractfeefromamount=True)\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            assert(self.rpc_online.gettransaction(res)[\"confirmations\"] > 0)\n+\n+    def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change):\n+        self.log.info(\"Testing %s through PSBT\" % comment)\n+        desc_pay = self.make_desc(pattern, privmap, keys_pay, False)\n+        desc_change = self.make_desc(pattern, privmap, keys_change, False)\n+        desc_pay_pub = self.make_desc(pattern, privmap, keys_pay, True)\n+        desc_change_pub = self.make_desc(pattern, privmap, keys_change, True)\n+        assert_equal(self.nodes[0].getdescriptorinfo(desc_pay)['descriptor'], desc_pay_pub)\n+        assert_equal(self.nodes[0].getdescriptorinfo(desc_change)['descriptor'], desc_change_pub)\n+        result = self.psbt_online.importdescriptors([{\"desc\": desc_pay_pub, \"active\": True, \"timestamp\": \"now\"}])\n+        assert(result[0]['success'])\n+        result = self.psbt_online.importdescriptors([{\"desc\": desc_change_pub, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n+        assert(result[0]['success'])\n+        result = self.psbt_offline.importdescriptors([{\"desc\": desc_pay, \"active\": True, \"timestamp\": \"now\"}])\n+        assert(result[0]['success'])\n+        result = self.psbt_offline.importdescriptors([{\"desc\": desc_change, \"active\": True, \"timestamp\": \"now\", \"internal\": True}])\n+        assert(result[0]['success'])\n+        for i in range(4):\n+            addr_g = self.psbt_online.getnewaddress(address_type='bech32')\n+            if treefn is not None:\n+                addr_r = self.make_addr(treefn, keys_pay, i)\n+                assert_equal(addr_g, addr_r)\n+            boring_balance = int(self.boring.getbalance() * 100000000)\n+            to_amnt = random.randrange(1000000, boring_balance)\n+            self.boring.sendtoaddress(address=addr_g, amount=Decimal(to_amnt) / 100000000, subtractfeefromamount=True)\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            test_balance = int(self.psbt_online.getbalance() * 100000000)\n+            ret_amnt = random.randrange(100000, test_balance)\n+            psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0]})['psbt']\n+            res = self.psbt_offline.walletprocesspsbt(psbt)\n+            assert(res['complete'])\n+            rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n+            txid = self.nodes[0].sendrawtransaction(rawtx)\n+            self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+            assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n \n     def do_test(self, comment, pattern, privmap, treefn, nkeys):\n-        keys = self.rand_keys(nkeys)\n-        self.do_test_addr(comment, pattern, privmap, treefn, keys)\n+        keys = self.rand_keys(nkeys * 4)\n+        self.do_test_addr(comment, pattern, privmap, treefn, keys[0:nkeys])\n+        self.do_test_sendtoaddress(comment, pattern, privmap, treefn, keys[0:nkeys], keys[nkeys:2*nkeys])\n+        self.do_test_psbt(comment, pattern, privmap, treefn, keys[2*nkeys:3*nkeys], keys[3*nkeys:4*nkeys])\n \n     def run_test(self):\n         self.log.info(\"Creating wallets...\")\n@@ -258,8 +324,20 @@ def run_test(self):\n         self.pubs_tr_enabled = self.nodes[0].get_wallet_rpc(\"pubs_tr_enabled\")\n         self.nodes[2].createwallet(wallet_name=\"pubs_tr_disabled\", descriptors=True, blank=True, disable_private_keys=True)\n         self.pubs_tr_disabled=self.nodes[2].get_wallet_rpc(\"pubs_tr_disabled\")\n+        self.nodes[0].createwallet(wallet_name=\"boring\")\n         self.nodes[0].createwallet(wallet_name=\"addr_gen\", descriptors=True, disable_private_keys=True, blank=True)\n+        self.nodes[0].createwallet(wallet_name=\"rpc_online\", descriptors=True, blank=True)\n+        self.nodes[0].createwallet(wallet_name=\"psbt_online\", descriptors=True, disable_private_keys=True, blank=True)\n+        self.nodes[1].createwallet(wallet_name=\"psbt_offline\", descriptors=True, blank=True)\n+        self.boring = self.nodes[0].get_wallet_rpc(\"boring\")\n         self.addr_gen = self.nodes[0].get_wallet_rpc(\"addr_gen\")\n+        self.rpc_online = self.nodes[0].get_wallet_rpc(\"rpc_online\")\n+        self.psbt_online = self.nodes[0].get_wallet_rpc(\"psbt_online\")\n+        self.psbt_offline = self.nodes[1].get_wallet_rpc(\"psbt_offline\")\n+\n+        self.log.info(\"Mining blocks...\")\n+        gen_addr = self.boring.getnewaddress()\n+        self.nodes[0].generatetoaddress(101, gen_addr)\n \n         self.do_test(\n             \"tr(XPRV)\",\n@@ -275,13 +353,27 @@ def run_test(self):\n             lambda k1: (key(H_POINT), [pk(k1)]),\n             1\n         )\n+        self.do_test(\n+            \"wpkh(XPRV)\",\n+            \"wpkh($1/*)\",\n+            [True],\n+            None,\n+            1\n+        )\n         self.do_test(\n             \"tr(XPRV,{H,{H,XPUB}})\",\n             \"tr($1/*,{pk($H),{pk($H),pk($2/*)}})\",\n             [True, False],\n             lambda k1, k2: (key(k1), [pk(H_POINT), [pk(H_POINT), pk(k2)]]),\n             2\n         )\n+        self.do_test(\n+            \"wsh(multi(1,XPRV,XPUB))\",\n+            \"wsh(multi(1,$1/*,$2/*))\",\n+            [True, False],\n+            None,\n+            2\n+        )\n         self.do_test(\n             \"tr(XPUB,{{H,{H,XPUB}},{H,{H,{H,XPRV}}}})\",\n             \"tr($1/*,{{pk($H),{pk($H),pk($2/*)}},{pk($H),{pk($H),{pk($H),pk($3/*)}}}})\",\n@@ -290,5 +382,19 @@ def run_test(self):\n             3\n         )\n \n+        self.log.info(\"Sending everything back...\")\n+\n+        txid = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=self.rpc_online.getbalance(), subtractfeefromamount=True)\n+        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+        assert(self.rpc_online.gettransaction(txid)[\"confirmations\"] > 0)\n+\n+        psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): self.psbt_online.getbalance()}], None, {\"subtractFeeFromOutputs\": [0]})['psbt']\n+        res = self.psbt_offline.walletprocesspsbt(psbt)\n+        assert(res['complete'])\n+        rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n+        txid = self.nodes[0].sendrawtransaction(rawtx)\n+        self.nodes[0].generatetoaddress(1, self.boring.getnewaddress())\n+        assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n+\n if __name__ == '__main__':\n     WalletTaprootTest().main()"
      }
    ]
  },
  {
    "sha": "458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NThhMzQ1YjA1OTBmZDJmYTA0YzdkOGQ3MGJlYjhkNTdlMzRiYmM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-04T22:27:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-12T19:38:17Z"
      },
      "message": "Add support for SIGHASH_DEFAULT in RPCs, and make it default\n\nFor non-Taproot signatures, this is interpreted as SIGHASH_ALL.",
      "tree": {
        "sha": "61cd60377c39986ac8a66617c5d3a446c363812c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61cd60377c39986ac8a66617c5d3a446c363812c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f0c8eccb04f90940007e0c6aaff56bf2ab35b5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "3fc87ae1ff325c61b23262b206dad9f1c1668808",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -506,11 +506,12 @@ static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOut\n     tx.vout.erase(tx.vout.begin() + outIdx);\n }\n \n-static const unsigned int N_SIGHASH_OPTS = 6;\n+static const unsigned int N_SIGHASH_OPTS = 7;\n static const struct {\n     const char *flagStr;\n     int flags;\n } sighashOptions[N_SIGHASH_OPTS] = {\n+    {\"DEFAULT\", SIGHASH_DEFAULT},\n     {\"ALL\", SIGHASH_ALL},\n     {\"NONE\", SIGHASH_NONE},\n     {\"SINGLE\", SIGHASH_SINGLE},"
      },
      {
        "sha": "61089610106782fed53d06f0e238a5a9f4ad5348",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -260,6 +260,7 @@ int ParseSighashString(const UniValue& sighash)\n     int hash_type = SIGHASH_ALL;\n     if (!sighash.isNull()) {\n         static std::map<std::string, int> map_sighash_values = {\n+            {std::string(\"DEFAULT\"), int(SIGHASH_DEFAULT)},\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n             {std::string(\"NONE\"), int(SIGHASH_NONE)},"
      },
      {
        "sha": "ccb3123714aa39c3aa60d12d45beb8122d9a3c75",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -753,7 +753,8 @@ static RPCHelpMan signrawtransactionwithkey()\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type. Must be one of:\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\""
      },
      {
        "sha": "65276f641f61633b14620fbafe52c0ffdad04cd8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -44,10 +44,13 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     // Signing without known amount does not work in witness scripts.\n     if (sigversion == SigVersion::WITNESS_V0 && !MoneyRange(amount)) return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, m_txdata);\n+    // BASE/WITNESS_V0 signatures don't support explicit SIGHASH_DEFAULT, use SIGHASH_ALL instead.\n+    const int hashtype = nHashType == SIGHASH_DEFAULT ? SIGHASH_ALL : nHashType;\n+\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, hashtype, amount, sigversion, m_txdata);\n     if (!key.Sign(hash, vchSig))\n         return false;\n-    vchSig.push_back((unsigned char)nHashType);\n+    vchSig.push_back((unsigned char)hashtype);\n     return true;\n }\n "
      },
      {
        "sha": "ab34af2329de9bfe824910fb5ada961892e72434",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -3320,7 +3320,8 @@ RPCHelpMan signrawtransactionwithwallet()\n                             },\n                         },\n                     },\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type. Must be one of\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -3542,7 +3543,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n     } else {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false /* sign */, true /* bip32derivs */);\n         CHECK_NONFATAL(err == TransactionError::OK);\n         CHECK_NONFATAL(!complete);\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4175,8 +4176,8 @@ static RPCHelpMan send()\n             // First fill transaction with our data without signing,\n             // so external signers are not asked sign more than once.\n             bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, true, false);\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n             if (err != TransactionError::OK) {\n                 throw JSONRPCTransactionError(err);\n             }\n@@ -4291,7 +4292,8 @@ static RPCHelpMan walletprocesspsbt()\n                 {\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n                     {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\""
      },
      {
        "sha": "2485a955ca3fb5890d1d679683ac24cfcaa597e4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458a345b0590fd2fa04c7d8d70beb8d57e34bbc8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=458a345b0590fd2fa04c7d8d70beb8d57e34bbc8",
        "patch": "@@ -1807,7 +1807,7 @@ bool CWallet::SignTransaction(CMutableTransaction& tx) const\n         coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n     }\n     std::map<int, std::string> input_errors;\n-    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+    return SignTransaction(tx, coins, SIGHASH_DEFAULT, input_errors);\n }\n \n bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const"
      }
    ]
  }
]