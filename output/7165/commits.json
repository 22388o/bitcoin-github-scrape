[
  {
    "sha": "67969af09f4729d041589da5f31ac40c07d2f4be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzk2OWFmMDlmNDcyOWQwNDE1ODlkYTVmMzFhYzQwYzA3ZDJmNGJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-03T13:44:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-26T14:15:02Z"
      },
      "message": "build: Enable C++11 build, require C++11 compiler\n\nImplements #6211.",
      "tree": {
        "sha": "5e5a0ff79753f9c045b608af817d492d19beb783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e5a0ff79753f9c045b608af817d492d19beb783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67969af09f4729d041589da5f31ac40c07d2f4be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67969af09f4729d041589da5f31ac40c07d2f4be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67969af09f4729d041589da5f31ac40c07d2f4be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67969af09f4729d041589da5f31ac40c07d2f4be/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e26b62093ae21e89ed7d36a24a6b863f38ec631d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26b62093ae21e89ed7d36a24a6b863f38ec631d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e26b62093ae21e89ed7d36a24a6b863f38ec631d"
      }
    ],
    "stats": {
      "total": 560,
      "additions": 560,
      "deletions": 0
    },
    "files": [
      {
        "sha": "079e17d2a629e30c59caf1d3325814aeb23b1f4b",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "added",
        "additions": 558,
        "deletions": 0,
        "changes": 558,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67969af09f4729d041589da5f31ac40c07d2f4be/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67969af09f4729d041589da5f31ac40c07d2f4be/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=67969af09f4729d041589da5f31ac40c07d2f4be",
        "patch": "@@ -0,0 +1,558 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX(VERSION, [ext|noext], [mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the specified\n+#   version of the C++ standard.  If necessary, add switches to CXXFLAGS to\n+#   enable support.  VERSION may be '11' (for the C++11 standard) or '14'\n+#   (for the C++14 standard).\n+#\n+#   The second argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for an extended mode.\n+#\n+#   The third argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline support for the specified C++ standard is\n+#   required and that the macro should error out if no mode with that\n+#   support is found.  If specified 'optional', then configuration proceeds\n+#   regardless, after defining HAVE_CXX${VERSION} if and only if a\n+#   supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n+#   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n+#   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 1\n+\n+dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n+dnl  (serial version number 13).\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n+  m4_if([$1], [11], [],\n+        [$1], [14], [],\n+        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$2], [], [],\n+        [$2], [ext], [],\n+        [$2], [noext], [],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n+        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+  ax_cv_cxx_compile_cxx$1,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+    [ax_cv_cxx_compile_cxx$1=yes],\n+    [ax_cv_cxx_compile_cxx$1=no])])\n+  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+    ac_success=yes\n+  fi\n+\n+  m4_if([$2], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=gnu++$1 -std=gnu++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$2], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    dnl HP's aCC needs +std=c++11 according to:\n+    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n+    dnl Cray's crayCC needs \"-h std=c++11\"\n+    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx$1_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n+    fi\n+  else\n+    if test x$ac_success = xno; then\n+      HAVE_CXX$1=0\n+      AC_MSG_NOTICE([No compiler with C++$1 support was found])\n+    else\n+      HAVE_CXX$1=1\n+      AC_DEFINE(HAVE_CXX$1,1,\n+                [define if the compiler supports basic C++$1 syntax])\n+    fi\n+\n+    AC_SUBST(HAVE_CXX$1)\n+  fi\n+])\n+\n+\n+dnl  Test body for checking C++11 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+)\n+\n+\n+dnl  Test body for checking C++14 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+)\n+\n+\n+dnl  Tests for new features in C++11\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[\n+\n+// If the compiler admits that it is not ready for C++11, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201103L\n+\n+#error \"This is not a C++11 compiler\"\n+\n+#else\n+\n+namespace cxx11\n+{\n+\n+  namespace test_static_assert\n+  {\n+\n+    template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+  }\n+\n+  namespace test_final_override\n+  {\n+\n+    struct Base\n+    {\n+      virtual void f() {}\n+    };\n+\n+    struct Derived : public Base\n+    {\n+      virtual void f() override {}\n+    };\n+\n+  }\n+\n+  namespace test_double_right_angle_brackets\n+  {\n+\n+    template < typename T >\n+    struct check {};\n+\n+    typedef check<void> single_type;\n+    typedef check<check<void>> double_type;\n+    typedef check<check<check<void>>> triple_type;\n+    typedef check<check<check<check<void>>>> quadruple_type;\n+\n+  }\n+\n+  namespace test_decltype\n+  {\n+\n+    int\n+    f()\n+    {\n+      int a = 1;\n+      decltype(a) b = 2;\n+      return a + b;\n+    }\n+\n+  }\n+\n+  namespace test_type_deduction\n+  {\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static const bool value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static const bool value = true;\n+    };\n+\n+    template < typename T1, typename T2 >\n+    auto\n+    add(T1 a1, T2 a2) -> decltype(a1 + a2)\n+    {\n+      return a1 + a2;\n+    }\n+\n+    int\n+    test(const int c, volatile int v)\n+    {\n+      static_assert(is_same<int, decltype(0)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(c)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(v)>::value == false, \"\");\n+      auto ac = c;\n+      auto av = v;\n+      auto sumi = ac + av + 'x';\n+      auto sumf = ac + av + 1.0;\n+      static_assert(is_same<int, decltype(ac)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(av)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumi)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumf)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(add(c, v))>::value == true, \"\");\n+      return (sumf > 0.0) ? sumi : add(c, v);\n+    }\n+\n+  }\n+\n+  namespace test_noexcept\n+  {\n+\n+    int f() { return 0; }\n+    int g() noexcept { return 0; }\n+\n+    static_assert(noexcept(f()) == false, \"\");\n+    static_assert(noexcept(g()) == true, \"\");\n+\n+  }\n+\n+  namespace test_constexpr\n+  {\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c_r(const CharT *const s, const unsigned long acc) noexcept\n+    {\n+      return *s ? strlen_c_r(s + 1, acc + 1) : acc;\n+    }\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      return strlen_c_r(s, 0UL);\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"1\") == 1UL, \"\");\n+    static_assert(strlen_c(\"example\") == 7UL, \"\");\n+    static_assert(strlen_c(\"another\\0example\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_rvalue_references\n+  {\n+\n+    template < int N >\n+    struct answer\n+    {\n+      static constexpr int value = N;\n+    };\n+\n+    answer<1> f(int&)       { return answer<1>(); }\n+    answer<2> f(const int&) { return answer<2>(); }\n+    answer<3> f(int&&)      { return answer<3>(); }\n+\n+    void\n+    test()\n+    {\n+      int i = 0;\n+      const int c = 0;\n+      static_assert(decltype(f(i))::value == 1, \"\");\n+      static_assert(decltype(f(c))::value == 2, \"\");\n+      static_assert(decltype(f(0))::value == 3, \"\");\n+    }\n+\n+  }\n+\n+  namespace test_uniform_initialization\n+  {\n+\n+    struct test\n+    {\n+      static const int zero {};\n+      static const int one {1};\n+    };\n+\n+    static_assert(test::zero == 0, \"\");\n+    static_assert(test::one == 1, \"\");\n+\n+  }\n+\n+  namespace test_lambdas\n+  {\n+\n+    void\n+    test1()\n+    {\n+      auto lambda1 = [](){};\n+      auto lambda2 = lambda1;\n+      lambda1();\n+      lambda2();\n+    }\n+\n+    int\n+    test2()\n+    {\n+      auto a = [](int i, int j){ return i + j; }(1, 2);\n+      auto b = []() -> int { return '0'; }();\n+      auto c = [=](){ return a + b; }();\n+      auto d = [&](){ return c; }();\n+      auto e = [a, &b](int x) mutable {\n+        const auto identity = [](int y){ return y; };\n+        for (auto i = 0; i < a; ++i)\n+          a += b--;\n+        return x + identity(a + b);\n+      }(0);\n+      return a + b + c + d + e;\n+    }\n+\n+    int\n+    test3()\n+    {\n+      const auto nullary = [](){ return 0; };\n+      const auto unary = [](int x){ return x; };\n+      using nullary_t = decltype(nullary);\n+      using unary_t = decltype(unary);\n+      const auto higher1st = [](nullary_t f){ return f(); };\n+      const auto higher2nd = [unary](nullary_t f1){\n+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };\n+      };\n+      return higher1st(nullary) + higher2nd(nullary)(unary);\n+    }\n+\n+  }\n+\n+  namespace test_variadic_templates\n+  {\n+\n+    template <int...>\n+    struct sum;\n+\n+    template <int N0, int... N1toN>\n+    struct sum<N0, N1toN...>\n+    {\n+      static constexpr auto value = N0 + sum<N1toN...>::value;\n+    };\n+\n+    template <>\n+    struct sum<>\n+    {\n+      static constexpr auto value = 0;\n+    };\n+\n+    static_assert(sum<>::value == 0, \"\");\n+    static_assert(sum<1>::value == 1, \"\");\n+    static_assert(sum<23>::value == 23, \"\");\n+    static_assert(sum<1, 2>::value == 3, \"\");\n+    static_assert(sum<5, 5, 11>::value == 21, \"\");\n+    static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, \"\");\n+\n+  }\n+\n+  // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae\n+  // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function\n+  // because of this.\n+  namespace test_template_alias_sfinae\n+  {\n+\n+    struct foo {};\n+\n+    template<typename T>\n+    using member = typename T::member_type;\n+\n+    template<typename T>\n+    void func(...) {}\n+\n+    template<typename T>\n+    void func(member<T>*) {}\n+\n+    void test();\n+\n+    void test() { func<foo>(0); }\n+\n+  }\n+\n+}  // namespace cxx11\n+\n+#endif  // __cplusplus >= 201103L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++14\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_14], [[\n+\n+// If the compiler admits that it is not ready for C++14, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201402L\n+\n+#error \"This is not a C++14 compiler\"\n+\n+#else\n+\n+namespace cxx14\n+{\n+\n+  namespace test_polymorphic_lambdas\n+  {\n+\n+    int\n+    test()\n+    {\n+      const auto lambda = [](auto&&... args){\n+        const auto istiny = [](auto x){\n+          return (sizeof(x) == 1UL) ? 1 : 0;\n+        };\n+        const int aretiny[] = { istiny(args)... };\n+        return aretiny[0];\n+      };\n+      return lambda(1, 1L, 1.0f, '1');\n+    }\n+\n+  }\n+\n+  namespace test_binary_literals\n+  {\n+\n+    constexpr auto ivii = 0b0000000000101010;\n+    static_assert(ivii == 42, \"wrong value\");\n+\n+  }\n+\n+  namespace test_generalized_constexpr\n+  {\n+\n+    template < typename CharT >\n+    constexpr unsigned long\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      auto length = 0UL;\n+      for (auto p = s; *p; ++p)\n+        ++length;\n+      return length;\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"x\") == 1UL, \"\");\n+    static_assert(strlen_c(\"test\") == 4UL, \"\");\n+    static_assert(strlen_c(\"another\\0test\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_lambda_init_capture\n+  {\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      const auto lambda1 = [a = x](int b){ return a + b; };\n+      const auto lambda2 = [a = lambda1(x)](){ return a; };\n+      return lambda2();\n+    }\n+\n+  }\n+\n+  namespace test_digit_seperators\n+  {\n+\n+    constexpr auto ten_million = 100'000'000;\n+    static_assert(ten_million == 100000000, \"\");\n+\n+  }\n+\n+  namespace test_return_type_deduction\n+  {\n+\n+    auto f(int& x) { return x; }\n+    decltype(auto) g(int& x) { return x; }\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static constexpr auto value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static constexpr auto value = true;\n+    };\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      static_assert(is_same<int, decltype(f(x))>::value, \"\");\n+      static_assert(is_same<int&, decltype(g(x))>::value, \"\");\n+      return x;\n+    }\n+\n+  }\n+\n+}  // namespace cxx14\n+\n+#endif  // __cplusplus >= 201402L\n+\n+]])"
      },
      {
        "sha": "713ea59edacf952feff97acced86555cb283af67",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67969af09f4729d041589da5f31ac40c07d2f4be/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67969af09f4729d041589da5f31ac40c07d2f4be/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=67969af09f4729d041589da5f31ac40c07d2f4be",
        "patch": "@@ -55,6 +55,8 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n dnl Libtool init checks.\n LT_INIT([pic-only])\n "
      }
    ]
  },
  {
    "sha": "a398549b3bfc976f1b6408f41af7dac3514e2553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzk4NTQ5YjNiZmM5NzZmMWI2NDA4ZjQxYWY3ZGFjMzUxNGUyNTUz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-21T20:23:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-27T10:47:41Z"
      },
      "message": "depends: use c++11",
      "tree": {
        "sha": "8b3a18794523f32cec3feab90d3adf65e04227ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b3a18794523f32cec3feab90d3adf65e04227ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a398549b3bfc976f1b6408f41af7dac3514e2553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a398549b3bfc976f1b6408f41af7dac3514e2553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a398549b3bfc976f1b6408f41af7dac3514e2553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a398549b3bfc976f1b6408f41af7dac3514e2553/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67969af09f4729d041589da5f31ac40c07d2f4be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67969af09f4729d041589da5f31ac40c07d2f4be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67969af09f4729d041589da5f31ac40c07d2f4be"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dbe6d00795e00bc9ee0fa5a21e25edc8233c631d",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -3,7 +3,7 @@ OSX_SDK_VERSION=10.9\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=241.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n-darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n+darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION) -stdlib=libc++\n \n darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)"
      },
      {
        "sha": "200d57314ea0d04ecb33bddf6dfa0e557d196ab1",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -9,6 +9,7 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n+$(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "ef1307c241b6619f53fc38a68a0d0a93d19fa3f2",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -20,7 +20,7 @@ $(package)_archiver_$(host_os)=$($(package)_ar)\n $(package)_toolset_darwin=darwin\n $(package)_archiver_darwin=$($(package)_libtool)\n $(package)_config_libraries=chrono,filesystem,program_options,system,thread,test\n-$(package)_cxxflags=-fvisibility=hidden\n+$(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n endef\n "
      },
      {
        "sha": "54d3fd924519be2ed612830e24c3baf25629c7fa",
        "filename": "depends/packages/protobuf.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -4,6 +4,7 @@ $(package)_download_path=$(native_$(package)_download_path)\n $(package)_file_name=$(native_$(package)_file_name)\n $(package)_sha256_hash=$(native_$(package)_sha256_hash)\n $(package)_dependencies=native_$(package)\n+$(package)_cxxflags=-std=c++11\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --with-protoc=$(build_prefix)/bin/protoc"
      },
      {
        "sha": "c1fc8e3058e9efaa3698a77e12a6faf7590a3c10",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -49,7 +49,7 @@ $(package)_config_opts += -no-sql-sqlite2\n $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -hostprefix $(build_prefix)\n $(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -c++11\n $(package)_config_opts += -openssl-linked\n $(package)_config_opts += -v\n $(package)_config_opts += -static"
      },
      {
        "sha": "b3f18db0569682a3c4082782bd91e5f467e42225",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a398549b3bfc976f1b6408f41af7dac3514e2553/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=a398549b3bfc976f1b6408f41af7dac3514e2553",
        "patch": "@@ -7,6 +7,7 @@ $(package)_sha256_hash=e00b2967e074990d0538361cc79084a0a92892df2c6e7585da34e4c61\n define $(package)_set_vars\n   $(package)_config_opts=--without-documentation --disable-shared\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_config_cmds"
      }
    ]
  },
  {
    "sha": "2aacc72727b891aa6f42e97d16e8954fba014703",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWFjYzcyNzI3Yjg5MWFhNmY0MmU5N2QxNmU4OTU0ZmJhMDE0NzAz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T08:18:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T08:18:06Z"
      },
      "message": "build: update ax_cxx_compile_stdcxx to serial 4",
      "tree": {
        "sha": "3dd2aa04e5ea37ebbe1a7cafe72ca5432fbc7dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dd2aa04e5ea37ebbe1a7cafe72ca5432fbc7dd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aacc72727b891aa6f42e97d16e8954fba014703",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aacc72727b891aa6f42e97d16e8954fba014703",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aacc72727b891aa6f42e97d16e8954fba014703",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aacc72727b891aa6f42e97d16e8954fba014703/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a398549b3bfc976f1b6408f41af7dac3514e2553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a398549b3bfc976f1b6408f41af7dac3514e2553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a398549b3bfc976f1b6408f41af7dac3514e2553"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 26,
      "deletions": 22
    },
    "files": [
      {
        "sha": "2c18e49c56c0bc732a4bd6534ae03f871d42c6db",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 26,
        "deletions": 22,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aacc72727b891aa6f42e97d16e8954fba014703/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aacc72727b891aa6f42e97d16e8954fba014703/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=2aacc72727b891aa6f42e97d16e8954fba014703",
        "patch": "@@ -9,9 +9,9 @@\n # DESCRIPTION\n #\n #   Check for baseline language coverage in the compiler for the specified\n-#   version of the C++ standard.  If necessary, add switches to CXXFLAGS to\n-#   enable support.  VERSION may be '11' (for the C++11 standard) or '14'\n-#   (for the C++14 standard).\n+#   version of the C++ standard.  If necessary, add switches to CXX and\n+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)\n+#   or '14' (for the C++14 standard).\n #\n #   The second argument, if specified, indicates whether you insist on an\n #   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n@@ -39,7 +39,7 @@\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 1\n+#serial 4\n \n dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n dnl  (serial version number 13).\n@@ -74,14 +74,17 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n-        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-         CXXFLAGS=\"$CXXFLAGS $switch\"\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n          AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n           [eval $cachevar=yes],\n           [eval $cachevar=no])\n-         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+         CXX=\"$ac_save_CXX\"])\n       if eval test x\\$$cachevar = xyes; then\n-        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n         ac_success=yes\n         break\n       fi\n@@ -97,14 +100,17 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n-        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-         CXXFLAGS=\"$CXXFLAGS $switch\"\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n          AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n           [eval $cachevar=yes],\n           [eval $cachevar=no])\n-         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+         CXX=\"$ac_save_CXX\"])\n       if eval test x\\$$cachevar = xyes; then\n-        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n         ac_success=yes\n         break\n       fi\n@@ -115,18 +121,16 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n     if test x$ac_success = xno; then\n       AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n     fi\n+  fi\n+  if test x$ac_success = xno; then\n+    HAVE_CXX$1=0\n+    AC_MSG_NOTICE([No compiler with C++$1 support was found])\n   else\n-    if test x$ac_success = xno; then\n-      HAVE_CXX$1=0\n-      AC_MSG_NOTICE([No compiler with C++$1 support was found])\n-    else\n-      HAVE_CXX$1=1\n-      AC_DEFINE(HAVE_CXX$1,1,\n-                [define if the compiler supports basic C++$1 syntax])\n-    fi\n-\n-    AC_SUBST(HAVE_CXX$1)\n+    HAVE_CXX$1=1\n+    AC_DEFINE(HAVE_CXX$1,1,\n+              [define if the compiler supports basic C++$1 syntax])\n   fi\n+  AC_SUBST(HAVE_CXX$1)\n ])\n \n "
      }
    ]
  },
  {
    "sha": "7df92242a99db68962048aad34532e6c0e7a42fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGY5MjI0MmE5OWRiNjg5NjIwNDhhYWQzNDUzMmU2YzBlN2E0MmZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T08:43:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T08:47:41Z"
      },
      "message": "doc: Add note about new build/test requirements to release notes\n\n[skip ci]",
      "tree": {
        "sha": "94c30f31ff55c08fd5f5246ae441060e1012dd3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94c30f31ff55c08fd5f5246ae441060e1012dd3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7df92242a99db68962048aad34532e6c0e7a42fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7df92242a99db68962048aad34532e6c0e7a42fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7df92242a99db68962048aad34532e6c0e7a42fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7df92242a99db68962048aad34532e6c0e7a42fa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aacc72727b891aa6f42e97d16e8954fba014703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aacc72727b891aa6f42e97d16e8954fba014703",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aacc72727b891aa6f42e97d16e8954fba014703"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d44b8cda934c9f1e11c5afafac5ce49b9cd33e6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7df92242a99db68962048aad34532e6c0e7a42fa/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7df92242a99db68962048aad34532e6c0e7a42fa/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7df92242a99db68962048aad34532e6c0e7a42fa",
        "patch": "@@ -43,6 +43,19 @@ RPC low-level changes\n   32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been\n   fixed, but this means that the output will be different than from previous versions.\n \n+C++11 and Python 3\n+-------------------\n+\n+Various code modernizations have been done. The Bitcoin Core code base has\n+started using C++11. This means that a C++11-capable compiler is now needed for\n+building. Effectively this means GCC 4.7 or higher, or Clang 3.3 or higher.\n+\n+When cross-compiling for a target that doesn't have C++11 libraries, configure with\n+`./configure --enable-glibc-back-compat ... LDFLAGS=-static-libstdc++`.\n+\n+For running the functional tests in `qa/rpc-tests`, Python3.4 or higher is now\n+required.\n+\n 0.13.0 Change log\n =================\n "
      }
    ]
  }
]