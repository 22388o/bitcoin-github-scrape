[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224537735",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224537735",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
    "id": 224537735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDUzNzczNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T09:31:01Z",
    "updated_at": "2016-06-08T09:31:01Z",
    "author_association": "MEMBER",
    "body": "utACK e012f3c. I think we also need them in init.cpp\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224537735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224556239",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224556239",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
    "id": 224556239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDU1NjIzOQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T10:57:40Z",
    "updated_at": "2016-06-08T10:57:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK e012f3cea0ca4096dd4dd59a356a973c43651912\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224556239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224573806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224573806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
    "id": 224573806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDU3MzgwNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T12:27:55Z",
    "updated_at": "2016-06-08T12:27:55Z",
    "author_association": "MEMBER",
    "body": "utACK e012f3cea0ca4096dd4dd59a356a973c43651912\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224573806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224604182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224604182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
    "id": 224604182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDYwNDE4Mg==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-08T14:20:24Z",
    "updated_at": "2016-06-08T14:20:24Z",
    "author_association": "MEMBER",
    "body": "@laanwj Thanks for grabbing this so quickly! A generic utility function is the way to go for sure.\n\nutACK e012f3cea0ca4096dd4dd59a356a973c43651912\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224604182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241738",
    "pull_request_review_id": null,
    "id": 66241738,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQxNzM4",
    "diff_hunk": "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
    "path": "src/utilstrencodings.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "original_commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of checking whether `*endp == 0`, shouldn't you check whether `endp == str.c_str() + str.size()` (otherwise you'd accept strings that have a 0 inside)\n",
    "created_at": "2016-06-08T11:58:22Z",
    "updated_at": "2016-06-08T11:58:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241738",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241738"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241738"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 477,
    "original_line": 477,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241928",
    "pull_request_review_id": null,
    "id": 66241928,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQxOTI4",
    "diff_hunk": "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
    "path": "src/utilstrencodings.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "original_commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, ParsePrechecks catches this.\n",
    "created_at": "2016-06-08T12:00:12Z",
    "updated_at": "2016-06-08T12:00:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241928",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241928"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241928"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 477,
    "original_line": 477,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66245583",
    "pull_request_review_id": null,
    "id": 66245583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQ1NTgz",
    "diff_hunk": "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
    "path": "src/utilstrencodings.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "original_commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, that solution would be somewhat more elegant. Indeed, `ParsePrechecks` checks some number-parsing preconditions such as that one.\n\nI'm thinking about (at some point) implementing these functions from scratch instead of calling out to the C API. It wouldn't even be much longer, as there are just too many exceptions. This still doesn't exclude strto*l accepting locale-specific separators, for example. Not a big deal for current uses, but I hate such surprises.\n\nIn any case introducing them here (with tests) allows swapping out the implementation later.\n",
    "created_at": "2016-06-08T12:30:36Z",
    "updated_at": "2016-06-08T12:30:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66245583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66245583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66245583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66245583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 477,
    "original_line": 477,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66246009",
    "pull_request_review_id": null,
    "id": 66246009,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQ2MDA5",
    "diff_hunk": "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
    "path": "src/utilstrencodings.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "original_commit_id": "e012f3cea0ca4096dd4dd59a356a973c43651912",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I was about to suggest that a from scratch implementation might be\neasier than trying to put a harness around existing libc calls. But let's\nnot do that now. It works and seems sufficiently tested.\n",
    "created_at": "2016-06-08T12:33:31Z",
    "updated_at": "2016-06-08T12:33:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66246009",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66246009"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66246009"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66246009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 477,
    "original_line": 477,
    "side": "RIGHT"
  }
]