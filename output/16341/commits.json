[
  {
    "sha": "f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDRhMWY0MjAyZDRlMWQ3NDg5MTBhYzFkYmEwZjhlYjYwNDdkZWM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-20T21:34:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Move wallet enums to walletutil.h",
      "tree": {
        "sha": "3090d547ac0e9b8b2de3167fe24b6b4cc8edff6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3090d547ac0e9b8b2de3167fe24b6b4cc8edff6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a22b62481aae95747830bd3c0db3227860b12d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a22b62481aae95747830bd3c0db3227860b12d8e"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 48,
      "deletions": 46
    },
    "files": [
      {
        "sha": "03326d31d4cd6aeee0f6252246dceaf1d11548b0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
        "patch": "@@ -99,58 +99,12 @@ struct FeeCalculation;\n enum class FeeEstimateMode;\n class ReserveDestination;\n \n-/** (client) version numbers for particular wallet features */\n-enum WalletFeature\n-{\n-    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)\n-\n-    FEATURE_WALLETCRYPT = 40000, // wallet encryption\n-    FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n-\n-    FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n-\n-    FEATURE_HD_SPLIT = 139900, // Wallet with HD chain split (change outputs will use m/0'/1'/k)\n-\n-    FEATURE_NO_DEFAULT_KEY = 159900, // Wallet without a default key written\n-\n-    FEATURE_PRE_SPLIT_KEYPOOL = 169900, // Upgraded to HD SPLIT and can have a pre-split keypool\n-\n-    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n-};\n-\n //! Default for -addresstype\n constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::BECH32};\n \n //! Default for -changetype\n constexpr OutputType DEFAULT_CHANGE_TYPE{OutputType::CHANGE_AUTO};\n \n-enum WalletFlags : uint64_t {\n-    // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n-    // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n-\n-    // will categorize coins as clean (not reused) and dirty (reused), and handle\n-    // them with privacy considerations in mind\n-    WALLET_FLAG_AVOID_REUSE = (1ULL << 0),\n-\n-    // Indicates that the metadata has already been upgraded to contain key origins\n-    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n-\n-    // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n-    WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n-\n-    //! Flag set when a wallet contains no HD seed and no private keys, scripts,\n-    //! addresses, and other watch only things, and is therefore \"blank.\"\n-    //!\n-    //! The only function this flag serves is to distinguish a blank wallet from\n-    //! a newly created wallet when the wallet database is loaded, to avoid\n-    //! initialization that should only happen on first run.\n-    //!\n-    //! This flag is also a mandatory flag to prevent previous versions of\n-    //! bitcoin from opening the wallet, thinking it was newly created, and\n-    //! then improperly reinitializing it.\n-    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n-};\n-\n static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET"
      },
      {
        "sha": "044c757e68d803e71f14994fb1e7ef9243140e79",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
        "patch": "@@ -9,6 +9,54 @@\n \n #include <vector>\n \n+/** (client) version numbers for particular wallet features */\n+enum WalletFeature\n+{\n+    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)\n+\n+    FEATURE_WALLETCRYPT = 40000, // wallet encryption\n+    FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n+\n+    FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n+\n+    FEATURE_HD_SPLIT = 139900, // Wallet with HD chain split (change outputs will use m/0'/1'/k)\n+\n+    FEATURE_NO_DEFAULT_KEY = 159900, // Wallet without a default key written\n+\n+    FEATURE_PRE_SPLIT_KEYPOOL = 169900, // Upgraded to HD SPLIT and can have a pre-split keypool\n+\n+    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n+};\n+\n+\n+\n+enum WalletFlags : uint64_t {\n+    // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n+    // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n+\n+    // will categorize coins as clean (not reused) and dirty (reused), and handle\n+    // them with privacy considerations in mind\n+    WALLET_FLAG_AVOID_REUSE = (1ULL << 0),\n+\n+    // Indicates that the metadata has already been upgraded to contain key origins\n+    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n+\n+    // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n+    WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n+\n+    //! Flag set when a wallet contains no HD seed and no private keys, scripts,\n+    //! addresses, and other watch only things, and is therefore \"blank.\"\n+    //!\n+    //! The only function this flag serves is to distinguish a blank wallet from\n+    //! a newly created wallet when the wallet database is loaded, to avoid\n+    //! initialization that should only happen on first run.\n+    //!\n+    //! This flag is also a mandatory flag to prevent previous versions of\n+    //! bitcoin from opening the wallet, thinking it was newly created, and\n+    //! then improperly reinitializing it.\n+    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n+};\n+\n //! Get the path of the wallet directory.\n fs::path GetWalletDir();\n "
      }
    ]
  },
  {
    "sha": "3a5fb0135db302af1016240261ba846ea906b862",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTVmYjAxMzVkYjMwMmFmMTAxNjI0MDI2MWJhODQ2ZWE5MDZiODYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:53:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "List output types in an array in order to be iterated over",
      "tree": {
        "sha": "3161408c00784a2586142b9c93d4ac2ece0714da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3161408c00784a2586142b9c93d4ac2ece0714da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a5fb0135db302af1016240261ba846ea906b862",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5fb0135db302af1016240261ba846ea906b862",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5fb0135db302af1016240261ba846ea906b862",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5fb0135db302af1016240261ba846ea906b862/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8961ec2a18a0f9b6fd65253780217a147f4f91e3",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a5fb0135db302af1016240261ba846ea906b862/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a5fb0135db302af1016240261ba846ea906b862/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=3a5fb0135db302af1016240261ba846ea906b862",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n \n+#include <array>\n #include <string>\n #include <vector>\n \n@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+const std::array<OutputType, 3> OUTPUT_TYPES = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};\n+\n NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n@@ -47,4 +50,3 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n #endif // BITCOIN_OUTPUTTYPE_H\n-"
      }
    ]
  },
  {
    "sha": "36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmVhZjllNzM5OWQ5MDk3YWE3ZmJkZjNkNzk5MDU3NjVlZTNmZGI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T20:58:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Always try to sign for all pubkeys in multisig",
      "tree": {
        "sha": "5efcb316a2b14f0ff69951cd9e3a5bb675d41682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5efcb316a2b14f0ff69951cd9e3a5bb675d41682"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a5fb0135db302af1016240261ba846ea906b862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5fb0135db302af1016240261ba846ea906b862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5fb0135db302af1016240261ba846ea906b862"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c60a5ec2083e8212634b3108790b28c5a6d39793",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
        "patch": "@@ -144,8 +144,13 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            // We need to always call CreateSig in order to fill sigdata with all\n+            // possible signatures that we can create. This will allow further PSBT\n+            // processing to work as it needs all possible signature and pubkey pairs\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {\n+                    ret.push_back(std::move(sig));\n+                }\n             }\n         }\n         bool ok = ret.size() == required + 1;"
      }
    ]
  },
  {
    "sha": "67891ae7f345c1889ad2aadf9a2152633e71f81a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzg5MWFlN2YzNDVjMTg4OWFkMmFhZGY5YTIxNTI2MzNlNzFmODFh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-02T20:21:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Store p2sh scripts in AddAndGetDestinationForScript",
      "tree": {
        "sha": "bb12b2242eb8a060999833da5db61f09a39682b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb12b2242eb8a060999833da5db61f09a39682b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67891ae7f345c1889ad2aadf9a2152633e71f81a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2c420896b43b6aece94273cb85142a896da2b9c4",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67891ae7f345c1889ad2aadf9a2152633e71f81a/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67891ae7f345c1889ad2aadf9a2152633e71f81a/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=67891ae7f345c1889ad2aadf9a2152633e71f81a",
        "patch": "@@ -80,22 +80,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OutputType::LEGACY:\n-        return ScriptHash(script);\n+    case OutputType::LEGACY: {\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n+    }\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return sh;\n+        }\n         // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n         keystore.AddCScript(witprog);\n         if (type == OutputType::BECH32) {\n             return witdest;\n         } else {\n-            return ScriptHash(witprog);\n+            ScriptHash wsh = ScriptHash(witprog);\n+            keystore.AddCScript(GetScriptForDestination(wsh));\n+            return wsh;\n         }\n     }\n     default: assert(false);"
      }
    ]
  },
  {
    "sha": "fb7647a6fc3b44a62a608c2b28fb546a35d44586",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjc2NDdhNmZjM2I0NGE2MmE2MDhjMmIyOGZiNTQ2YTM1ZDQ0NTg2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-08T09:05:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class",
      "tree": {
        "sha": "b80f30debe9da07b85a9d8cba28fc5a825d4cd68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b80f30debe9da07b85a9d8cba28fc5a825d4cd68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67891ae7f345c1889ad2aadf9a2152633e71f81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67891ae7f345c1889ad2aadf9a2152633e71f81a"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 263,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a4f373cb64ef021c432e21a589c5180a22d48e32",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb7647a6fc3b44a62a608c2b28fb546a35d44586",
        "patch": "@@ -235,6 +235,7 @@ BITCOIN_CORE_H = \\\n   wallet/load.h \\\n   wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n+  wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n   wallet/wallettool.h \\\n@@ -343,6 +344,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n+  wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n   wallet/walletutil.cpp \\"
      },
      {
        "sha": "be84a62a1ab837dff9a4eb559bede3f8f1e87790",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fb7647a6fc3b44a62a608c2b28fb546a35d44586",
        "patch": "@@ -0,0 +1,120 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    return false;\n+}\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    return ISMINE_NO;\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    return false;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return false;\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n+{\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    return false;\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()\n+{\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    return GetTime();\n+}\n+\n+size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    return 0;\n+}\n+\n+unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    return 0;\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    return 0;\n+}\n+\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+{\n+    return nullptr;\n+}\n+\n+bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return false;\n+}\n+\n+const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n+{\n+    return nullptr;\n+}\n+\n+uint256 LegacyScriptPubKeyMan::GetID() const\n+{\n+    return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+}"
      },
      {
        "sha": "918040e5dfdf4f083af6c35d55caf50e07d99734",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "added",
        "additions": 141,
        "deletions": 0,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7647a6fc3b44a62a608c2b28fb546a35d44586/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fb7647a6fc3b44a62a608c2b28fb546a35d44586",
        "patch": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    //! Check that the given decryption key is valid for this ScriptPubKeyMan, i.e. it decrypts all of the keys handled by it.\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    unsigned int GetKeyPoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+};\n+\n+#endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      }
    ]
  },
  {
    "sha": "43c43ff4d498343f8408193cf7e03c26979ba2ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2M0M2ZmNGQ0OTgzNDNmODQwODE5M2NmN2UwM2MyNjk3OWJhMmVk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-18T17:56:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Add LegacyScriptPubKeyMan to CWallet",
      "tree": {
        "sha": "25f25f959cd34b2519d58582b199b578cb8e4191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25f25f959cd34b2519d58582b199b578cb8e4191"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43c43ff4d498343f8408193cf7e03c26979ba2ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7647a6fc3b44a62a608c2b28fb546a35d44586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7647a6fc3b44a62a608c2b28fb546a35d44586"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f9d58fbf363300ca2906bfb2cbd33ee7bbe7423",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43c43ff4d498343f8408193cf7e03c26979ba2ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43c43ff4d498343f8408193cf7e03c26979ba2ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=43c43ff4d498343f8408193cf7e03c26979ba2ed",
        "patch": "@@ -4932,3 +4932,36 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n+{\n+    // Legacy wallets only have one ScriptPubKeyMan which is a LegacyScriptPubKeyMan.\n+    // Everything in m_internal_spk_managers and m_external_spk_managers point to the same legacyScriptPubKeyMan.\n+    return dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+}\n+\n+LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return GetLegacyScriptPubKeyMan();\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        for (const auto& type : OUTPUT_TYPES) {\n+            m_internal_spk_managers[type] = spk_manager.get();\n+            m_external_spk_managers[type] = spk_manager.get();\n+        }\n+        m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    ScriptPubKeyMan* spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    for (const auto& type : OUTPUT_TYPES) {\n+        assert(m_internal_spk_managers.at(type) == spk_man);\n+        assert(m_external_spk_managers.at(type) == spk_man);\n+    }\n+    assert(m_spk_managers.size() == 1);\n+}"
      },
      {
        "sha": "33fe1e12707098166a459d65149b9d9e1c8467e8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43c43ff4d498343f8408193cf7e03c26979ba2ed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43c43ff4d498343f8408193cf7e03c26979ba2ed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=43c43ff4d498343f8408193cf7e03c26979ba2ed",
        "patch": "@@ -19,6 +19,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n+#include <wallet/scriptpubkeyman.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n@@ -835,6 +836,13 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n \n+    std::map<OutputType, ScriptPubKeyMan*> m_external_spk_managers;\n+    std::map<OutputType, ScriptPubKeyMan*> m_internal_spk_managers;\n+\n+    // Indexed by a unique identifier produced by each ScriptPubKeyMan using\n+    // ScriptPubKeyMan::GetID. In many cases it will be the hash of an internal structure\n+    std::map<uint256, std::unique_ptr<ScriptPubKeyMan>> m_spk_managers;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1359,6 +1367,13 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n+    LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n+    LegacyScriptPubKeyMan* GetOrCreateLegacyScriptPubKeyMan();\n+\n+    //! Make a LegacyScriptPubKeyMan and set it for all types, internal, and external.\n+    void SetupLegacyScriptPubKeyMan();\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "b363de355d2fdbd0208d1347f6376b083df04cfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzYzZGUzNTVkMmZkYmQwMjA4ZDEzNDdmNjM3NmIwODNkZjA0Y2Zk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-13T20:23:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Add WalletStorage class and have CWallet inherit it",
      "tree": {
        "sha": "8ce14287185b0e5fcca795368376c9c252ae43dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ce14287185b0e5fcca795368376c9c252ae43dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b363de355d2fdbd0208d1347f6376b083df04cfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b363de355d2fdbd0208d1347f6376b083df04cfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b363de355d2fdbd0208d1347f6376b083df04cfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b363de355d2fdbd0208d1347f6376b083df04cfd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43c43ff4d498343f8408193cf7e03c26979ba2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43c43ff4d498343f8408193cf7e03c26979ba2ed"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 68,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a5cb073333e390ec2f69a27948f658e8662e7488",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b363de355d2fdbd0208d1347f6376b083df04cfd",
        "patch": "@@ -10,21 +10,59 @@\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <boost/signals2/signal.hpp>\n \n enum class OutputType;\n \n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n+// It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n+// wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n+// ScriptPubKeyMan to have callbacks into CWallet without causing a circular dependency.\n+// WalletStorage should be the same for all ScriptPubKeyMans.\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n /*\n  * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n  * It contains the scripts and keys related to the scriptPubKeys it manages.\n  * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n  * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n- * and it's related scripts and keys, including encryption.\n+ * and its related scripts and keys, including encryption.\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n     virtual ~ScriptPubKeyMan() {};\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }"
      },
      {
        "sha": "52a1d2e6735130e7fcef1ccb047063e027775480",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b363de355d2fdbd0208d1347f6376b083df04cfd",
        "patch": "@@ -4949,7 +4949,7 @@ LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n void CWallet::SetupLegacyScriptPubKeyMan()\n {\n     if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\n         for (const auto& type : OUTPUT_TYPES) {\n             m_internal_spk_managers[type] = spk_manager.get();\n             m_external_spk_managers[type] = spk_manager.get();\n@@ -4965,3 +4965,13 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n     assert(m_spk_managers.size() == 1);\n }\n+\n+const CKeyingMaterial& CWallet::GetEncryptionKey() const\n+{\n+    return vMasterKey;\n+}\n+\n+bool CWallet::HasEncryptionKeys() const\n+{\n+    return !mapMasterKeys.empty();\n+}"
      },
      {
        "sha": "34dc31296c31ad3136b40db53a7a70dc54f1cc84",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 18,
        "deletions": 11,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b363de355d2fdbd0208d1347f6376b083df04cfd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b363de355d2fdbd0208d1347f6376b083df04cfd",
        "patch": "@@ -680,7 +680,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n+class CWallet final : public FillableSigningProvider, public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n     CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n@@ -811,17 +811,14 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Adds a script to the store and saves it to disk\n     bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n \n-    //! Unsets a wallet flag and saves it to disk\n-    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag);\n-\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n     /** Wallet location which includes wallet name (see WalletLocation). */\n     WalletLocation m_location;\n \n     /** Internal database handle. */\n-    std::unique_ptr<WalletDatabase> database;\n+    std::shared_ptr<WalletDatabase> database;\n \n     /**\n      * The following is used to keep track of how far behind the wallet is\n@@ -857,6 +854,10 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     {\n         return *database;\n     }\n+    std::shared_ptr<WalletDatabase> GetDatabase() override\n+    {\n+        return database;\n+    }\n \n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n@@ -904,7 +905,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     }\n \n     bool IsCrypted() const { return fUseCrypto; }\n-    bool IsLocked() const;\n+    bool IsLocked() const override;\n     bool Lock();\n \n     /** Interface to assert chain access and if successful lock it */\n@@ -934,7 +935,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n@@ -1214,7 +1215,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     }\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false);\n+    void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false) override;\n \n     //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n     bool SetMaxVersion(int nVersion);\n@@ -1341,20 +1342,23 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     void LearnAllRelatedScripts(const CPubKey& key);\n \n     /** set a single wallet flag */\n-    void SetWalletFlag(uint64_t flags);\n+    void SetWalletFlag(uint64_t flags) override;\n \n     /** Unsets a single wallet flag */\n     void UnsetWalletFlag(uint64_t flag);\n \n+    //! Unsets a wallet flag and saves it to disk\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) override;\n+\n     /** check if a certain wallet flag is set */\n-    bool IsWalletFlagSet(uint64_t flag) const;\n+    bool IsWalletFlagSet(uint64_t flag) const override;\n \n     /** overwrite all flags by the given uint64_t\n        returns false if unknown, non-tolerable flags are present */\n     bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n \n     /** Returns a bracketed wallet name for displaying in logs, will return [default wallet] if the wallet has no name */\n-    const std::string GetDisplayName() const {\n+    const std::string GetDisplayName() const override {\n         std::string wallet_name = GetName().length() == 0 ? \"default wallet\" : GetName();\n         return strprintf(\"[%s]\", wallet_name);\n     };\n@@ -1374,6 +1378,9 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     //! Make a LegacyScriptPubKeyMan and set it for all types, internal, and external.\n     void SetupLegacyScriptPubKeyMan();\n+\n+    const CKeyingMaterial& GetEncryptionKey() const override;\n+    bool HasEncryptionKeys() const override;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTZiYWNkN2I1ZGRkOGMwNDFiNTBiMDU5N2YyMjQ4Yzg5NzZlYzg0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T19:54:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Fetch the SigningProvider for a script from the wallet",
      "tree": {
        "sha": "81838fb9fd87d904d56ad9408404dff8174c4f4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81838fb9fd87d904d56ad9408404dff8174c4f4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b363de355d2fdbd0208d1347f6376b083df04cfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b363de355d2fdbd0208d1347f6376b083df04cfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b363de355d2fdbd0208d1347f6376b083df04cfd"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "00bc66651637df176266aa11a6d507df426af69e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
        "patch": "@@ -4933,6 +4933,22 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     return true;\n }\n \n+std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script) const\n+{\n+    SignatureData sigdata;\n+    return GetSigningProvider(script, sigdata);\n+}\n+\n+std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n+{\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n+            return spk_man_pair.second->GetSigningProvider(script);\n+        }\n+    }\n+    return nullptr;\n+}\n+\n LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n     // Legacy wallets only have one ScriptPubKeyMan which is a LegacyScriptPubKeyMan."
      },
      {
        "sha": "56c9f7578d5f8b731e7dfbf6e19e179f6993955f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
        "patch": "@@ -1372,6 +1372,10 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    //! Get the SigningProvider for a script\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+\n     //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n     LegacyScriptPubKeyMan* GetOrCreateLegacyScriptPubKeyMan();"
      }
    ]
  },
  {
    "sha": "f4958a4ee71772acb373c4553830c7408bd8413c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDk1OGE0ZWU3MTc3MmFjYjM3M2M0NTUzODMwYzc0MDhiZDg0MTNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:55:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\n\nCo-authored-by: Hugo Nguyen <hugh.hn@gmail.com>",
      "tree": {
        "sha": "92f75af22019331217d64aa2c013c208c0d59c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92f75af22019331217d64aa2c013c208c0d59c2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4958a4ee71772acb373c4553830c7408bd8413c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4958a4ee71772acb373c4553830c7408bd8413c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4958a4ee71772acb373c4553830c7408bd8413c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4958a4ee71772acb373c4553830c7408bd8413c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2217c3c3ea45e7db9c3923f6ebf99ea45b592585",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4958a4ee71772acb373c4553830c7408bd8413c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4958a4ee71772acb373c4553830c7408bd8413c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f4958a4ee71772acb373c4553830c7408bd8413c",
        "patch": "@@ -4933,6 +4933,58 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     return true;\n }\n \n+std::set<ScriptPubKeyMan*> CWallet::GetActiveScriptPubKeyMans() const\n+{\n+    std::set<ScriptPubKeyMan*> spk_mans;\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_man = GetScriptPubKeyMan(t, internal);\n+            if (spk_man) {\n+                spk_mans.insert(spk_man);\n+            }\n+        }\n+    }\n+    return spk_mans;\n+}\n+\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool internal) const\n+{\n+    if (internal) {\n+        std::map<OutputType, ScriptPubKeyMan*>::const_iterator it = m_internal_spk_managers.find(type);\n+        if (it == m_internal_spk_managers.end()) {\n+            WalletLogPrintf(\"Internal scriptPubKey Manager for output type %d does not exist\\n\", static_cast<int>(type));\n+            return nullptr;\n+        }\n+        return it->second;\n+    } else {\n+        std::map<OutputType, ScriptPubKeyMan*>::const_iterator it = m_external_spk_managers.find(type);\n+        if (it == m_external_spk_managers.end()) {\n+            WalletLogPrintf(\"External scriptPubKey Manager for output type %d does not exist\\n\", static_cast<int>(type));\n+            return nullptr;\n+        }\n+        return it->second;\n+    }\n+}\n+\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n+{\n+    SignatureData sigdata;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n+            return spk_man_pair.second.get();\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n+{\n+    if (m_spk_managers.count(id) > 0) {\n+        return m_spk_managers.at(id).get();\n+    }\n+    return nullptr;\n+}\n+\n std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script) const\n {\n     SignatureData sigdata;"
      },
      {
        "sha": "390be6d85d2d88fb928791a789ff23094fd4f2e9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4958a4ee71772acb373c4553830c7408bd8413c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4958a4ee71772acb373c4553830c7408bd8413c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f4958a4ee71772acb373c4553830c7408bd8413c",
        "patch": "@@ -1372,6 +1372,17 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    //! De-duplicates and returns all ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n+    std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain.\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const OutputType& type, bool internal) const;\n+\n+    //! Get the ScriptPubKeyMan for a script\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    //! Get the ScriptPubKeyMan by id\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n+\n     //! Get the SigningProvider for a script\n     std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n     std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;"
      }
    ]
  },
  {
    "sha": "d8831ee5e08412c502ed01c365e86fe040db7cd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODgzMWVlNWUwODQxMmM1MDJlZDAxYzM2NWU4NmZlMDQwZGI3Y2Qw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-17T16:52:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetSigningProvider in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "cd313e29784acdc8c340276c209b732908416bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd313e29784acdc8c340276c209b732908416bf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8831ee5e08412c502ed01c365e86fe040db7cd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4958a4ee71772acb373c4553830c7408bd8413c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4958a4ee71772acb373c4553830c7408bd8413c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4958a4ee71772acb373c4553830c7408bd8413c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ba4c928784fa13ad07d62cce907fe7606497613",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8831ee5e08412c502ed01c365e86fe040db7cd0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8831ee5e08412c502ed01c365e86fe040db7cd0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d8831ee5e08412c502ed01c365e86fe040db7cd0",
        "patch": "@@ -101,7 +101,7 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n \n std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n {\n-    return nullptr;\n+    return MakeUnique<LegacySigningProvider>(*this);\n }\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)"
      },
      {
        "sha": "6aeb48f73a143f5d01bf1cc97f357797398cdc64",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8831ee5e08412c502ed01c365e86fe040db7cd0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8831ee5e08412c502ed01c365e86fe040db7cd0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d8831ee5e08412c502ed01c365e86fe040db7cd0",
        "patch": "@@ -176,4 +176,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     uint256 GetID() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan& spk_man;\n+public:\n+    LegacySigningProvider(const LegacyScriptPubKeyMan& spk_man) : spk_man(spk_man) {}\n+\n+    bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return spk_man.GetCScript(scriptid, script); }\n+    bool HaveCScript(const CScriptID &scriptid) const override { return spk_man.HaveCScript(scriptid); }\n+    bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return spk_man.GetPubKey(address, pubkey); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return spk_man.GetKey(address, key); }\n+    bool HaveKey(const CKeyID &address) const override { return spk_man.HaveKey(address); }\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return spk_man.GetKeyOrigin(keyid, info); }\n+};\n+\n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      }
    ]
  },
  {
    "sha": "1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTU3YmI2NGE4ZWVkM2E1MjQ3NDgxZmNjNmJmN2NhMWZkZWIzZGMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:20:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's",
      "tree": {
        "sha": "33028c9967b3aee9426508b45a768db91562751d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33028c9967b3aee9426508b45a768db91562751d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8831ee5e08412c502ed01c365e86fe040db7cd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8831ee5e08412c502ed01c365e86fe040db7cd0"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "22b196808e27f4f0d2f26cb995473e81e63ef506",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
        "patch": "@@ -55,6 +55,7 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n     std::vector<std::shared_ptr<CWallet>>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i != vpwallets.end()) return false;\n     vpwallets.push_back(wallet);\n+    wallet->ConnectScriptPubKeyManNotifiers();\n     return true;\n }\n \n@@ -5043,3 +5044,11 @@ bool CWallet::HasEncryptionKeys() const\n {\n     return !mapMasterKeys.empty();\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\n+        spk_man->NotifyWatchonlyChanged.connect(NotifyWatchonlyChanged);\n+        spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n+    }\n+}"
      },
      {
        "sha": "9535086502976583b9256cf957b144dc894bd306",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
        "patch": "@@ -1396,6 +1396,9 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n \n     const CKeyingMaterial& GetEncryptionKey() const override;\n     bool HasEncryptionKeys() const override;\n+\n+    //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n+    void ConnectScriptPubKeyManNotifiers();\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTQ2ZWZjZGU2Y2YwZWU2ODI1Y2Y0MWZlN2FmYWYwZTcwYjdhYTQw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T15:40:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement HasEncryptedData, SetCrypted, LoadCryptedKey, and AddCryptedKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "1ed46571d205bb9842eaffb4bb46c6eede79b8f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ed46571d205bb9842eaffb4bb46c6eede79b8f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e2412a9df058302be4662719de738d2e4e7f1889",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
        "patch": "@@ -118,3 +118,38 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n {\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!mapKeys.empty()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = std::make_pair(vchPubKey, vchCryptedSecret);\n+    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKey(const CPubKey &vchPubKey,\n+                            const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n+        return false;\n+    {\n+        LOCK(cs_KeyStore);\n+        if (encrypted_batch)\n+            return encrypted_batch->WriteCryptedKey(vchPubKey,\n+                                                        vchCryptedSecret,\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n+        else\n+            return WalletBatch(*m_database).WriteCryptedKey(vchPubKey,\n+                                                            vchCryptedSecret,\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n+    }\n+}"
      },
      {
        "sha": "630df8e9e388cf8d0ae2c765d1ef8efb7b543e02",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
        "patch": "@@ -130,6 +130,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -174,6 +183,14 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n     uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds an encrypted key to the store, and saves it to disk.\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjdiOGY0MWZlZGFhZDliYmM5ZGVjOTc1MWQ2Mjk1ZjJjMmY1MGM2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T15:53:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "146d623ce8f1e0397c62f78088248414df7c404b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/146d623ce8f1e0397c62f78088248414df7c404b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aeacba73ebc21cc9ea2a3235aa1f39ded9dab13b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
        "patch": "@@ -96,7 +96,8 @@ unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n \n int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return nTimeFirstKey;\n }\n \n std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n@@ -119,6 +120,22 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n \n+/**\n+ * Update wallet first key creation time. This should be called whenever keys\n+ * are added to the wallet, with the oldest key creation time.\n+ */\n+void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "616b1fe207dca69808da9ec36e4c2dffcc177822",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
        "patch": "@@ -137,6 +137,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n \n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n \n public:\n@@ -191,6 +193,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "e3333365036b9ed38086ebef8851f1e4b3de2cba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzMzMzM2NTAzNmI5ZWQzODA4NmViZWY4ODUxZjFlNGIzZGUyY2Jh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:01:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "3bee9334b1901fc4bc874401295355d40dba603a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bee9334b1901fc4bc874401295355d40dba603a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3333365036b9ed38086ebef8851f1e4b3de2cba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 122,
      "deletions": 0
    },
    "files": [
      {
        "sha": "49fd1e5c25320127340f1057b3dc687dd4897362",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3333365036b9ed38086ebef8851f1e4b3de2cba/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3333365036b9ed38086ebef8851f1e4b3de2cba/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e3333365036b9ed38086ebef8851f1e4b3de2cba",
        "patch": "@@ -170,3 +170,92 @@ bool LegacyScriptPubKeyMan::AddCryptedKey(const CPubKey &vchPubKey,\n                                                             mapKeyMetadata[vchPubKey.GetID()]);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly(const CScript &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly() const\n+{\n+    LOCK(cs_KeyStore);\n+    return (!setWatchOnly.empty());\n+}\n+\n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    return Solver(dest, solutions) == TX_PUBKEY &&\n+        (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n+}\n+\n+bool LegacyScriptPubKeyMan::RemoveWatchOnly(const CScript &dest)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        setWatchOnly.erase(dest);\n+        CPubKey pubKey;\n+        if (ExtractPubKey(dest, pubKey)) {\n+            mapWatchKeys.erase(pubKey.GetID());\n+        }\n+        // Related CScripts are not removed; having superfluous scripts around is\n+        // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n+    }\n+\n+    if (!HaveWatchOnly())\n+        NotifyWatchonlyChanged(false);\n+    if (!WalletBatch(*m_database).EraseWatchOnly(dest))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadWatchOnly(const CScript &dest)\n+{\n+    return AddWatchOnlyInMem(dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyInMem(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey)) {\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n+        ImplicitlyLearnRelatedKeyScripts(pubKey);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n+{\n+    if (!AddWatchOnlyInMem(dest))\n+        return false;\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    NotifyWatchonlyChanged(true);\n+    if (batch.WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = create_time;\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n+}"
      },
      {
        "sha": "1ebfc09f39155678e1ed82d5bea3e3c5231a29bf",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3333365036b9ed38086ebef8851f1e4b3de2cba/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3333365036b9ed38086ebef8851f1e4b3de2cba/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e3333365036b9ed38086ebef8851f1e4b3de2cba",
        "patch": "@@ -131,16 +131,36 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n     WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n \n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n \n     int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n \n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n \n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -189,11 +209,24 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "4626daacd4074917f43262a39c273b08f17832c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjI2ZGFhY2Q0MDc0OTE3ZjQzMjYyYTM5YzI3M2IwOGYxNzgzMmM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:05:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "cd0adb22c356412d96dfb61f50e86a1dad2e5e96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd0adb22c356412d96dfb61f50e86a1dad2e5e96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4626daacd4074917f43262a39c273b08f17832c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4626daacd4074917f43262a39c273b08f17832c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4626daacd4074917f43262a39c273b08f17832c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4626daacd4074917f43262a39c273b08f17832c8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3333365036b9ed38086ebef8851f1e4b3de2cba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3333365036b9ed38086ebef8851f1e4b3de2cba"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c128ac5d123e213fff8767b27eab6223f37445c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4626daacd4074917f43262a39c273b08f17832c8/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4626daacd4074917f43262a39c273b08f17832c8/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=4626daacd4074917f43262a39c273b08f17832c8",
        "patch": "@@ -136,6 +136,81 @@ void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n     }\n }\n \n+bool LegacyScriptPubKeyMan::LoadKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    return AddKeyPubKeyInner(key, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    WalletBatch batch(*m_database);\n+    return LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(batch, secret, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+\n+    // Make sure we aren't adding private keys to private key disabled wallets\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n+    // which is overridden below.  To avoid flushes, the database handle is\n+    // tunneled through to it.\n+    bool needsDB = !encrypted_batch;\n+    if (needsDB) {\n+        encrypted_batch = &batch;\n+    }\n+    if (!AddKeyPubKeyInner(secret, pubkey)) {\n+        if (needsDB) encrypted_batch = nullptr;\n+        return false;\n+    }\n+    if (needsDB) encrypted_batch = nullptr;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(PKHash(pubkey));\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+    script = GetScriptForRawPubKey(pubkey);\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+\n+    if (!HasEncryptionKeys()) {\n+        return batch.WriteKey(pubkey,\n+                                                 secret.GetPrivKey(),\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n+    }\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptionKeys()) {\n+        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n+    }\n+\n+    if (IsLocked()) {\n+        return false;\n+    }\n+\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(GetEncryptionKey(), vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n+\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "4c84b6415875958a45ce6826875aad5f11cef53b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4626daacd4074917f43262a39c273b08f17832c8/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4626daacd4074917f43262a39c273b08f17832c8/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=4626daacd4074917f43262a39c273b08f17832c8",
        "patch": "@@ -144,6 +144,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n \n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n \n     /**\n@@ -161,6 +162,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -212,6 +216,10 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)"
      }
    ]
  },
  {
    "sha": "8bfe9e5bbea53f0525c776247fa377dac4f5663b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmZlOWU1YmJlYTUzZjA1MjVjNzc2MjQ3ZmEzNzdkYWM0ZjU2NjNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:12:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement WalletLogPrintf in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "adfb4845edd69a590f107f393c5b0638ca4b8007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adfb4845edd69a590f107f393c5b0638ca4b8007"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4626daacd4074917f43262a39c273b08f17832c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4626daacd4074917f43262a39c273b08f17832c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4626daacd4074917f43262a39c273b08f17832c8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "69a1d7a5a59f64f2a3cadb64a374def142b81c58",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bfe9e5bbea53f0525c776247fa377dac4f5663b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bfe9e5bbea53f0525c776247fa377dac4f5663b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8bfe9e5bbea53f0525c776247fa377dac4f5663b",
        "patch": "@@ -121,6 +121,12 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n     /** Watch-only address added */\n     boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n "
      },
      {
        "sha": "b78273d1f0abfb1270946a48d14d5e5746e001ad",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bfe9e5bbea53f0525c776247fa377dac4f5663b/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bfe9e5bbea53f0525c776247fa377dac4f5663b/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=8bfe9e5bbea53f0525c776247fa377dac4f5663b",
        "patch": "@@ -19,6 +19,8 @@\n     (\"src/util/system.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS).translated, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n     (\"src/wallet/wallet.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n     (\"src/wallet/wallet.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n+    (\"src/wallet/scriptpubkeyman.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n+    (\"src/wallet/scriptpubkeyman.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n     (\"src/logging.h\", \"LogPrintf(const char* fmt, const Args&... args)\"),\n ]\n "
      }
    ]
  },
  {
    "sha": "a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQxYjJkNWJhN2UxMTlkYWY2ZDZmNGNiMGEyNjg3YWY4YjFlMmUz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:14:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "1a018fc35fd1dd17370939357b46442855ac2173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a018fc35fd1dd17370939357b46442855ac2173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bfe9e5bbea53f0525c776247fa377dac4f5663b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfe9e5bbea53f0525c776247fa377dac4f5663b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a41af0ff970f2e5c736ead593615970528415fe9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
        "patch": "@@ -57,7 +57,7 @@ bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n \n bool LegacyScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    return !hdChain.seed_id.IsNull();\n }\n \n bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n@@ -334,3 +334,12 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n     m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n     return AddWatchOnly(dest);\n }\n+\n+void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!memonly && !WalletBatch(*m_database).WriteHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+\n+    hdChain = chain;\n+}"
      },
      {
        "sha": "0690f14336b1ecae53f7ad2fd2623b9ce20f6c3b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
        "patch": "@@ -171,6 +171,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -232,6 +235,10 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n+\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n     //! Returns whether the watch-only script is in the wallet"
      }
    ]
  },
  {
    "sha": "3900abb6e34c6d2a5af0262d03b77af3722e4d32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTAwYWJiNmUzNGM2ZDJhNWFmMDI2MmQwM2I3N2FmMzcyMmU0ZDMy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:40:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement LoadCScript in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "987be1a649308fbcdd4db711013108119e06ceff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/987be1a649308fbcdd4db711013108119e06ceff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb8ac53252371a3026c4ce464ecb99ba50c76c1a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3900abb6e34c6d2a5af0262d03b77af3722e4d32/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3900abb6e34c6d2a5af0262d03b77af3722e4d32/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3900abb6e34c6d2a5af0262d03b77af3722e4d32",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <key_io.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n@@ -188,6 +189,21 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& s\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::LoadCScript(const CScript& redeemScript)\n+{\n+    /* A sanity check was added in pull #3843 to avoid adding redeemScripts\n+     * that never can be redeemed. However, old wallets may still contain\n+     * these. Do not add them to the wallet and warn. */\n+    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+    {\n+        std::string strAddr = EncodeDestination(ScriptHash(redeemScript));\n+        WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n+        return true;\n+    }\n+\n+    return FillableSigningProvider::AddCScript(redeemScript);\n+}\n+\n bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "00b2e7bfe75017bbf8d3879cb02a13ed80925c30",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3900abb6e34c6d2a5af0262d03b77af3722e4d32/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3900abb6e34c6d2a5af0262d03b77af3722e4d32/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=3900abb6e34c6d2a5af0262d03b77af3722e4d32",
        "patch": "@@ -234,6 +234,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a CScript to the store\n+    bool LoadCScript(const CScript& redeemScript);\n \n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);"
      }
    ]
  },
  {
    "sha": "642a802b3622aa067b75a405546fbbb8eaea25d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDJhODAyYjM2MjJhYTA2N2I3NWE0MDU1NDZmYmJiOGVhZWEyNWQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:43:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "14ada5f4fd91db576dd3840de7f9210bbcb174e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14ada5f4fd91db576dd3840de7f9210bbcb174e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/642a802b3622aa067b75a405546fbbb8eaea25d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642a802b3622aa067b75a405546fbbb8eaea25d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/642a802b3622aa067b75a405546fbbb8eaea25d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642a802b3622aa067b75a405546fbbb8eaea25d8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3900abb6e34c6d2a5af0262d03b77af3722e4d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3900abb6e34c6d2a5af0262d03b77af3722e4d32"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12da1482b54e25d301b97b44bf9edbd0dfb6c033",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642a802b3622aa067b75a405546fbbb8eaea25d8/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642a802b3622aa067b75a405546fbbb8eaea25d8/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=642a802b3622aa067b75a405546fbbb8eaea25d8",
        "patch": "@@ -204,6 +204,20 @@ bool LegacyScriptPubKeyMan::LoadCScript(const CScript& redeemScript)\n     return FillableSigningProvider::AddCScript(redeemScript);\n }\n \n+void LegacyScriptPubKeyMan::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n+}\n+\n+void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+}\n+\n bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "2f661468b5d63c17559c461e9dd0ffe6ae2ff94f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642a802b3622aa067b75a405546fbbb8eaea25d8/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642a802b3622aa067b75a405546fbbb8eaea25d8/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=642a802b3622aa067b75a405546fbbb8eaea25d8",
        "patch": "@@ -236,6 +236,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     //! Adds a CScript to the store\n     bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n \n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);"
      }
    ]
  },
  {
    "sha": "739ace8144ed8dc9903aa9d4f5c9ad752a116819",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzlhY2U4MTQ0ZWQ4ZGM5OTAzYWE5ZDRmNWM5YWQ3NTJhMTE2ODE5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:32:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "b6dcce12c79f6e73ead3d131c3cf42f6de7f9e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6dcce12c79f6e73ead3d131c3cf42f6de7f9e5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "642a802b3622aa067b75a405546fbbb8eaea25d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642a802b3622aa067b75a405546fbbb8eaea25d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/642a802b3622aa067b75a405546fbbb8eaea25d8"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da738c0c8b3ab8827a01cae29eef6feebbd115a1",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/739ace8144ed8dc9903aa9d4f5c9ad752a116819/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/739ace8144ed8dc9903aa9d4f5c9ad752a116819/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=739ace8144ed8dc9903aa9d4f5c9ad752a116819",
        "patch": "@@ -373,3 +373,60 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n \n     hdChain = chain;\n }\n+\n+bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptionKeys()) {\n+        return FillableSigningProvider::HaveKey(address);\n+    }\n+    return mapCryptedKeys.count(address) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptionKeys()) {\n+        return FillableSigningProvider::GetKey(address, keyOut);\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(GetEncryptionKey(), vchCryptedSecret, vchPubKey, keyOut);\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+    if (it != mapWatchKeys.end()) {\n+        pubkey_out = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptionKeys()) {\n+        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n+            return GetWatchPubKey(address, vchPubKeyOut);\n+        }\n+        return true;\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n+    }\n+    // Check for watch-only pubkeys\n+    return GetWatchPubKey(address, vchPubKeyOut);\n+}"
      },
      {
        "sha": "ee0afd89e4944cbe26977afed121bbc5739cc4c2",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/739ace8144ed8dc9903aa9d4f5c9ad752a116819/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/739ace8144ed8dc9903aa9d4f5c9ad752a116819/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=739ace8144ed8dc9903aa9d4f5c9ad752a116819",
        "patch": "@@ -253,6 +253,14 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Remove a watch only script from the keystore\n     bool RemoveWatchOnly(const CScript &dest);\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n+\n+    /* SigningProvider overrides */\n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTYxYzBjMjBmZDczZjMyOGQ5ZTllYjg1MmFhMzZhODg5ZWMzZmE0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:33:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GenerateNewKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "c0c46d81c0dcddad1e3e08e56b6f240878eb9aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0c46d81c0dcddad1e3e08e56b6f240878eb9aa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "739ace8144ed8dc9903aa9d4f5c9ad752a116819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/739ace8144ed8dc9903aa9d4f5c9ad752a116819"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5704e06f511fb36698ffd14ce9c38979ac7e60bc",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
        "patch": "@@ -430,3 +430,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n+\n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(nCreationTime);\n+\n+    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+\n+void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n+{\n+    // for now we use a fixed keypath scheme of m/0'/0'/k\n+    CKey seed;                     //seed (256bit)\n+    CExtKey masterKey;             //hd master key\n+    CExtKey accountKey;            //key at m/0'\n+    CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n+    CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+    // try to get the seed\n+    if (!GetKey(hdChain.seed_id, seed))\n+        throw std::runtime_error(std::string(__func__) + \": seed not found\");\n+\n+    masterKey.SetSeed(seed.begin(), seed.size());\n+\n+    // derive m/0'\n+    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+    // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n+    assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n+    accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT+(internal ? 1 : 0));\n+\n+    // derive child key at next index, skip keys already known to the wallet\n+    do {\n+        // always derive hardened keys\n+        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+        if (internal) {\n+            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nInternalChainCounter++;\n+        }\n+        else {\n+            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nExternalChainCounter++;\n+        }\n+    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+    secret = childKey.key;\n+    metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n+    // update the chain model in the database\n+    if (!batch.WriteHDChain(hdChain))\n+        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+}"
      },
      {
        "sha": "69abb7236852e3533a73075d24377a014a2f5e32",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
        "patch": "@@ -174,6 +174,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -239,6 +242,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);"
      }
    ]
  },
  {
    "sha": "96801f0d56d1c0a770a0a922f54b8295250c230d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjgwMWYwZDU2ZDFjMGE3NzBhMGE5MjJmNTRiODI5NTI1MGMyMzBk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:34:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement LoadKeyPool in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "a89bf6f265531ff86c5422dd8ecba355b533fb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a89bf6f265531ff86c5422dd8ecba355b533fb63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96801f0d56d1c0a770a0a922f54b8295250c230d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96801f0d56d1c0a770a0a922f54b8295250c230d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96801f0d56d1c0a770a0a922f54b8295250c230d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96801f0d56d1c0a770a0a922f54b8295250c230d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 123,
      "deletions": 93
    },
    "files": [
      {
        "sha": "90b3cadff2b6d655c485535c27b892d717f81de8",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=96801f0d56d1c0a770a0a922f54b8295250c230d",
        "patch": "@@ -524,3 +524,24 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n+\n+void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n+{\n+    LOCK(cs_KeyStore);\n+    if (keypool.m_pre_split) {\n+        set_pre_split_keypool.insert(nIndex);\n+    } else if (keypool.fInternal) {\n+        setInternalKeyPool.insert(nIndex);\n+    } else {\n+        setExternalKeyPool.insert(nIndex);\n+    }\n+    m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n+    m_pool_key_to_index[keypool.vchPubKey.GetID()] = nIndex;\n+\n+    // If no metadata exists yet, create a default with the pool key's\n+    // creation time. Note that this may be overwritten by actually\n+    // stored metadata for that key later, which is fine.\n+    CKeyID keyid = keypool.vchPubKey.GetID();\n+    if (mapKeyMetadata.count(keyid) == 0)\n+        mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+}"
      },
      {
        "sha": "b93a9bcf6387b01c3f9d92cd68fd23d8dd01f803",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=96801f0d56d1c0a770a0a922f54b8295250c230d",
        "patch": "@@ -37,6 +37,99 @@ class WalletStorage\n     virtual bool IsLocked() const = 0;\n };\n \n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n /*\n  * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n  * It contains the scripts and keys related to the scriptPubKeys it manages.\n@@ -177,6 +270,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n@@ -266,6 +365,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      },
      {
        "sha": "cc447f1b45ad0305caf9ea93188ae195f95fb4db",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 93,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96801f0d56d1c0a770a0a922f54b8295250c230d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=96801f0d56d1c0a770a0a922f54b8295250c230d",
        "patch": "@@ -124,99 +124,6 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n \n extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;\n \n-/** A key from a CWallet's keypool\n- *\n- * The wallet holds one (for pre HD-split wallets) or several keypools. These\n- * are sets of keys that have not yet been used to provide addresses or receive\n- * change.\n- *\n- * The Bitcoin Core wallet was originally a collection of unrelated private\n- * keys with their associated addresses. If a non-HD wallet generated a\n- * key/address, gave that address out and then restored a backup from before\n- * that key's generation, then any funds sent to that address would be\n- * lost definitively.\n- *\n- * The keypool was implemented to avoid this scenario (commit: 10384941). The\n- * wallet would generate a set of keys (100 by default). When a new public key\n- * was required, either to give out as an address or to use in a change output,\n- * it would be drawn from the keypool. The keypool would then be topped up to\n- * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n- * than 100 keys since the previous backup, all funds would be safe, since a\n- * restored wallet would be able to scan for all owned addresses.\n- *\n- * A keypool also allowed encrypted wallets to give out addresses without\n- * having to be decrypted to generate a new private key.\n- *\n- * With the introduction of HD wallets (commit: f1902510), the keypool\n- * essentially became an address look-ahead pool. Restoring old backups can no\n- * longer definitively lose funds as long as the addresses used were from the\n- * wallet's HD seed (since all private keys can be rederived from the seed).\n- * However, if many addresses were used since the backup, then the wallet may\n- * not know how far ahead in the HD chain to look for its addresses. The\n- * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n- * keys (by default 1000) ahead of the last used key and scans for the\n- * addresses of those keys.  This avoids the risk of not seeing transactions\n- * involving the wallet's addresses, or of re-using the same address.\n- *\n- * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n- * is an external keypool (for addresses to hand out) and an internal keypool\n- * (for change addresses).\n- *\n- * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n- * stored as sets of indexes in the wallet (setInternalKeyPool,\n- * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n- * index (m_pool_key_to_index). The CKeyPool object is used to\n- * serialize/deserialize the pool data to/from the database.\n- */\n-class CKeyPool\n-{\n-public:\n-    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n-    int64_t nTime;\n-    //! The public key\n-    CPubKey vchPubKey;\n-    //! Whether this keypool entry is in the internal keypool (for change outputs)\n-    bool fInternal;\n-    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n-    bool m_pre_split;\n-\n-    CKeyPool();\n-    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-            try {\n-                READWRITE(m_pre_split);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as postsplit address if we can't read the m_pre_split boolean\n-                   (this will be the case for any wallet that upgrades to HD chain split)*/\n-                m_pre_split = false;\n-            }\n-        }\n-        else {\n-            READWRITE(fInternal);\n-            READWRITE(m_pre_split);\n-        }\n-    }\n-};\n-\n /** A wrapper to reserve an address from a wallet\n  *\n  * ReserveDestination is used to reserve an address."
      }
    ]
  },
  {
    "sha": "84b294259c053a388649244596b1ff34746c5333",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGIyOTQyNTljMDUzYTM4ODY0OTI0NDU5NmIxZmYzNDc0NmM1MzMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:39:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "9631a236179f848057a2f3b028f02f565a123984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9631a236179f848057a2f3b028f02f565a123984"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b294259c053a388649244596b1ff34746c5333",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b294259c053a388649244596b1ff34746c5333",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84b294259c053a388649244596b1ff34746c5333",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b294259c053a388649244596b1ff34746c5333/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96801f0d56d1c0a770a0a922f54b8295250c230d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96801f0d56d1c0a770a0a922f54b8295250c230d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96801f0d56d1c0a770a0a922f54b8295250c230d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 33,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ed8fb9ede45602ce0db770d9213fcab7c30a83f3",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84b294259c053a388649244596b1ff34746c5333/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84b294259c053a388649244596b1ff34746c5333/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=84b294259c053a388649244596b1ff34746c5333",
        "patch": "@@ -80,19 +80,48 @@ void LegacyScriptPubKeyMan::RewriteDB()\n {\n }\n \n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n+    if (setKeyPool.empty()) {\n+        return GetTime();\n+    }\n+\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!batch.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n+\n int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n {\n-    return GetTime();\n+    LOCK(cs_KeyStore);\n+\n+    WalletBatch batch(*m_database);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n+    }\n+\n+    return oldestKey;\n }\n \n size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const"
      },
      {
        "sha": "08196c468bb31f673ebb84eb90e49ce5a35352ae",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84b294259c053a388649244596b1ff34746c5333/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84b294259c053a388649244596b1ff34746c5333/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=84b294259c053a388649244596b1ff34746c5333",
        "patch": "@@ -306,7 +306,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void RewriteDB() override;\n \n     int64_t GetOldestKeyPoolTime() override;\n-    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    size_t KeypoolCountExternalKeys() override;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;"
      }
    ]
  },
  {
    "sha": "62d57108b87b184cc098f2a6b769541a90814201",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmQ1NzEwOGI4N2IxODRjYzA5OGYyYTZiNzY5NTQxYTkwODE0MjAx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:52:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "8fdda5a228895ec803549038e0b0a05487ae35c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fdda5a228895ec803549038e0b0a05487ae35c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62d57108b87b184cc098f2a6b769541a90814201",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d57108b87b184cc098f2a6b769541a90814201",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62d57108b87b184cc098f2a6b769541a90814201",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d57108b87b184cc098f2a6b769541a90814201/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84b294259c053a388649244596b1ff34746c5333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b294259c053a388649244596b1ff34746c5333",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84b294259c053a388649244596b1ff34746c5333"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "702cf6c5fc8e99d8bdbd4782f1c0b3bf7d816574",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d57108b87b184cc098f2a6b769541a90814201/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d57108b87b184cc098f2a6b769541a90814201/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=62d57108b87b184cc098f2a6b769541a90814201",
        "patch": "@@ -63,7 +63,19 @@ bool LegacyScriptPubKeyMan::IsHDEnabled() const\n \n bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n }\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n@@ -73,7 +85,8 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n \n bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n }\n \n void LegacyScriptPubKeyMan::RewriteDB()\n@@ -574,3 +587,10 @@ void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n     if (mapKeyMetadata.count(keyid) == 0)\n         mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n }\n+\n+bool LegacyScriptPubKeyMan::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_KeyStore);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}"
      },
      {
        "sha": "7eb748d71326b5290bdc251418dfc232f21de198",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d57108b87b184cc098f2a6b769541a90814201/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d57108b87b184cc098f2a6b769541a90814201/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=62d57108b87b184cc098f2a6b769541a90814201",
        "patch": "@@ -368,6 +368,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     //! Load a keypool entry\n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+\n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "b88b27d0c38bb57ff469de2770a6efb0f23750b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODhiMjdkMGMzOGJiNTdmZjQ2OWRlMjc3MGE2ZWZiMGYyMzc1MGI1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:09:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan",
      "tree": {
        "sha": "7987254a7135b556115fa89416d6c2b18afaebfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7987254a7135b556115fa89416d6c2b18afaebfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62d57108b87b184cc098f2a6b769541a90814201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d57108b87b184cc098f2a6b769541a90814201",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62d57108b87b184cc098f2a6b769541a90814201"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "571fce01d5d6060eeff3464d9d3fc1ad8b304641",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b88b27d0c38bb57ff469de2770a6efb0f23750b5/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b88b27d0c38bb57ff469de2770a6efb0f23750b5/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b88b27d0c38bb57ff469de2770a6efb0f23750b5",
        "patch": "@@ -594,3 +594,54 @@ bool LegacyScriptPubKeyMan::CanGenerateKeys()\n     LOCK(cs_KeyStore);\n     return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewSeed()\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    CKey key;\n+    key.MakeNewKey(true);\n+    return DeriveNewSeed(key);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)\n+{\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // calculate the seed\n+    CPubKey seed = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed));\n+\n+    // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n+    metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n+    metadata.hd_seed_id = seed.GetID();\n+\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        // mem store the metadata\n+        mapKeyMetadata[seed.GetID()] = metadata;\n+\n+        // write the key&metadata to the database\n+        if (!AddKeyPubKey(key, seed))\n+            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+    }\n+\n+    return seed;\n+}\n+\n+void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n+{\n+    LOCK(cs_KeyStore);\n+    // store the keyid (hash160) together with\n+    // the child index counter in the database\n+    // as a hdchain object\n+    CHDChain newHdChain;\n+    newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n+    newHdChain.seed_id = seed.GetID();\n+    SetHDChain(newHdChain, false);\n+    NotifyCanGetAddressesChanged();\n+    WalletBatch batch(*m_database);\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+}"
      },
      {
        "sha": "b38a761546cc51baa2225db77306e899d945ad03",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b88b27d0c38bb57ff469de2770a6efb0f23750b5/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b88b27d0c38bb57ff469de2770a6efb0f23750b5/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b88b27d0c38bb57ff469de2770a6efb0f23750b5",
        "patch": "@@ -371,6 +371,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();\n+\n+    /* Generates a new HD seed (will not be activated) */\n+    CPubKey GenerateNewSeed();\n+\n+    /* Derives a new HD seed (will not be activated) */\n+    CPubKey DeriveNewSeed(const CKey& key);\n+\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    void SetHDSeed(const CPubKey& key);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "cc11df184370c8ca15224537dfc6147e1ad7ad47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzExZGYxODQzNzBjOGNhMTUyMjQ1MzdkZmM2MTQ3ZTFhZDdhZDQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:32:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "cbbd2674c1e905d83a6732a5f9825041ff8c0d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbbd2674c1e905d83a6732a5f9825041ff8c0d57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc11df184370c8ca15224537dfc6147e1ad7ad47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b88b27d0c38bb57ff469de2770a6efb0f23750b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b88b27d0c38bb57ff469de2770a6efb0f23750b5"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 108,
      "deletions": 3
    },
    "files": [
      {
        "sha": "beab1cc96a811a8c841c395a9025f7d42ecb3e15",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 1,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=cc11df184370c8ca15224537dfc6147e1ad7ad47",
        "patch": "@@ -40,7 +40,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, cons\n \n bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    return TopUpKeyPool(size);\n }\n \n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n@@ -645,3 +645,103 @@ void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n     WalletBatch batch(*m_database);\n     UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n }\n+\n+/**\n+ * Mark old keypool keys as used,\n+ * and generate all new keys\n+ */\n+bool LegacyScriptPubKeyMan::NewKeyPool()\n+{\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+        WalletBatch batch(*m_database);\n+\n+        for (const int64_t nIndex : setInternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setInternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : setExternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setExternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : set_pre_split_keypool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        set_pre_split_keypool.clear();\n+\n+        m_pool_key_to_index.clear();\n+\n+        if (!TopUpKeyPool()) {\n+            return false;\n+        }\n+        WalletLogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUpKeyPool(unsigned int kpSize)\n+{\n+    if (!CanGenerateKeys()) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        if (IsLocked()) return false;\n+\n+        // Top up key pool\n+        unsigned int nTargetSize;\n+        if (kpSize > 0)\n+            nTargetSize = kpSize;\n+        else\n+            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+        // count amount of available keys (internal, external)\n+        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+\n+        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n+        {\n+            // don't create extra internal keys\n+            missingInternal = 0;\n+        }\n+        bool internal = false;\n+        WalletBatch batch(*m_database);\n+        for (int64_t i = missingInternal + missingExternal; i--;)\n+        {\n+            if (i < missingInternal) {\n+                internal = true;\n+            }\n+\n+            CPubKey pubkey(GenerateNewKey(batch, internal));\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+        }\n+        if (missingInternal + missingExternal > 0) {\n+            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_KeyStore);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}"
      },
      {
        "sha": "9972b4f89d95c959217bfa3f0a592134a9fdaf38",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=cc11df184370c8ca15224537dfc6147e1ad7ad47",
        "patch": "@@ -37,6 +37,9 @@ class WalletStorage\n     virtual bool IsLocked() const = 0;\n };\n \n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n /** A key from a CWallet's keypool\n  *\n  * The wallet holds one (for pre HD-split wallets) or several keypools. These\n@@ -264,6 +267,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n@@ -368,6 +373,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     //! Load a keypool entry\n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n \n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();"
      },
      {
        "sha": "59ac41903ce8f981afbd34fafb84bd91b20549c9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc11df184370c8ca15224537dfc6147e1ad7ad47/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc11df184370c8ca15224537dfc6147e1ad7ad47",
        "patch": "@@ -58,8 +58,6 @@ enum class WalletCreationStatus {\n \n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n-//! Default for -keypool\n-static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n //! -fallbackfee default"
      }
    ]
  },
  {
    "sha": "8653db5ed5adc31472bc3ffb15f329987fe1bb62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUzZGI1ZWQ1YWRjMzE0NzJiYzNmZmIxNWYzMjk5ODdmZTFiYjYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:47:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "9854e5666bbfbb45074a0497154108895c32f6fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9854e5666bbfbb45074a0497154108895c32f6fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc11df184370c8ca15224537dfc6147e1ad7ad47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc11df184370c8ca15224537dfc6147e1ad7ad47"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c3ba52e7ff7be86c792227b74916046851942b4e",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8653db5ed5adc31472bc3ffb15f329987fe1bb62/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8653db5ed5adc31472bc3ffb15f329987fe1bb62/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8653db5ed5adc31472bc3ffb15f329987fe1bb62",
        "patch": "@@ -32,10 +32,13 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n \n void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n {\n+    KeepKey(index);\n }\n \n void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n }\n \n bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n@@ -745,3 +748,29 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n     }\n     m_pool_key_to_index[pubkey.GetID()] = index;\n }\n+\n+void LegacyScriptPubKeyMan::KeepKey(int64_t nIndex)\n+{\n+    // Remove from key pool\n+    WalletBatch batch(*m_database);\n+    batch.ErasePool(nIndex);\n+    WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id)\n+{\n+    // Return to key pool\n+    {\n+        LOCK(cs_KeyStore);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else if (!set_pre_split_keypool.empty()) {\n+            set_pre_split_keypool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n+        m_pool_key_to_index[pubkey_id] = nIndex;\n+        NotifyCanGetAddressesChanged();\n+    }\n+    WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n+}"
      },
      {
        "sha": "e18d817e44ef8a8f6258ff0b4f11975da4bff672",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8653db5ed5adc31472bc3ffb15f329987fe1bb62/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8653db5ed5adc31472bc3ffb15f329987fe1bb62/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8653db5ed5adc31472bc3ffb15f329987fe1bb62",
        "patch": "@@ -280,6 +280,11 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n     int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n \n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;"
      }
    ]
  },
  {
    "sha": "334bb173403051991c2ac22e5d54c9fe4ee27f4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzRiYjE3MzQwMzA1MTk5MWMyYWMyMmU1ZDU0YzlmZTRlZTI3ZjRm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:56:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetNewDestination, and GetReservedDestination in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "f5506b5d7a44e02e3cd3d146193a0a72f566e4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5506b5d7a44e02e3cd3d146193a0a72f566e4c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8653db5ed5adc31472bc3ffb15f329987fe1bb62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8653db5ed5adc31472bc3ffb15f329987fe1bb62"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 146,
      "deletions": 2
    },
    "files": [
      {
        "sha": "32a160b7671805b184c4eaeb21954f2bed789a2f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 2,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/334bb173403051991c2ac22e5d54c9fe4ee27f4f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/334bb173403051991c2ac22e5d54c9fe4ee27f4f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=334bb173403051991c2ac22e5d54c9fe4ee27f4f",
        "patch": "@@ -3,11 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n }\n \n isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n@@ -27,7 +40,19 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n-    return false;\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+            return false;\n+        }\n+        LearnRelatedScripts(keypool.vchPubKey, type);\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n }\n \n void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n@@ -774,3 +799,89 @@ void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CKey\n     }\n     WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n+\n+bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    CKeyPool keypool;\n+    {\n+        LOCK(cs_KeyStore);\n+        int64_t nIndex;\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            if (IsLocked()) return false;\n+            WalletBatch batch(*m_database);\n+            result = GenerateNewKey(batch, internal);\n+            return true;\n+        }\n+        KeepKey(nIndex);\n+        result = keypool.vchPubKey;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n+{\n+    nIndex = -1;\n+    keypool.vchPubKey = CPubKey();\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        TopUpKeyPool();\n+\n+        bool fReturningInternal = fRequestedInternal;\n+        fReturningInternal &= (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        bool use_split_keypool = set_pre_split_keypool.empty();\n+        std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n+\n+        // Get the oldest key\n+        if (setKeyPool.empty()) {\n+            return false;\n+        }\n+\n+        WalletBatch batch(*m_database);\n+\n+        auto it = setKeyPool.begin();\n+        nIndex = *it;\n+        setKeyPool.erase(it);\n+        if (!batch.ReadPool(nIndex, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        }\n+        CPubKey pk;\n+        if (!GetPubKey(keypool.vchPubKey.GetID(), pk)) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+        // If the key was pre-split keypool, we don't care about what type it is\n+        if (use_split_keypool && keypool.fInternal != fReturningInternal) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n+        }\n+        if (!keypool.vchPubKey.IsValid()) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry invalid\");\n+        }\n+\n+        m_reserved_key_to_index[nIndex] = keypool.vchPubKey.GetID();\n+        m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n+        WalletLogPrintf(\"keypool reserve %d\\n\", nIndex);\n+    }\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::LearnRelatedScripts(const CPubKey& key, OutputType type)\n+{\n+    if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n+        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        CScript witprog = GetScriptForDestination(witdest);\n+        // Make sure the resulting program is solvable.\n+        assert(IsSolvable(*this, witprog));\n+        AddCScript(witprog);\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n+{\n+    // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n+    LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n+}"
      },
      {
        "sha": "df75b5e052530487065c31a7a0f44a50a587f4d5",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/334bb173403051991c2ac22e5d54c9fe4ee27f4f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/334bb173403051991c2ac22e5d54c9fe4ee27f4f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=334bb173403051991c2ac22e5d54c9fe4ee27f4f",
        "patch": "@@ -283,6 +283,25 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n     std::map<int64_t, CKeyID> m_reserved_key_to_index;\n \n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n \n@@ -395,6 +414,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     void SetHDSeed(const CPubKey& key);\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "e15037cbf904bddb61c241779cd190ffcd02965b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTUwMzdjYmY5MDRiZGRiNjFjMjQxNzc5Y2QxOTBmZmNkMDI5NjVi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:01:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement MarkUnusedAddresses in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "4ba262172a6fe0d7a21f2d9f5d1dee69b72f0595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ba262172a6fe0d7a21f2d9f5d1dee69b72f0595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e15037cbf904bddb61c241779cd190ffcd02965b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e15037cbf904bddb61c241779cd190ffcd02965b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e15037cbf904bddb61c241779cd190ffcd02965b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e15037cbf904bddb61c241779cd190ffcd02965b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "334bb173403051991c2ac22e5d54c9fe4ee27f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/334bb173403051991c2ac22e5d54c9fe4ee27f4f"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 58,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c4b559f745ab92b3c36bae84d3f840fac20af51d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e15037cbf904bddb61c241779cd190ffcd02965b",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <outputtype.h>\n+#include <script/descriptor.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n@@ -73,6 +74,19 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n \n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n }\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n@@ -885,3 +899,39 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n+\n+void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n+    auto it = setKeyPool->begin();\n+\n+    WalletBatch batch(*m_database);\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_id) break; // set*KeyPool is ordered\n+\n+        CKeyPool keypool;\n+        if (batch.ReadPool(index, keypool)) { //TODO: This should be unnecessary\n+            m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n+        }\n+        LearnAllRelatedScripts(keypool.vchPubKey);\n+        batch.ErasePool(index);\n+        WalletLogPrintf(\"keypool index %d removed\\n\", index);\n+        it = setKeyPool->erase(it);\n+    }\n+}\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n+{\n+    std::vector<CScript> dummy;\n+    FlatSigningProvider out;\n+    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, dummy, out);\n+    std::vector<CKeyID> ret;\n+    for (const auto& entry : out.pubkeys) {\n+        ret.push_back(entry.first);\n+    }\n+    return ret;\n+}"
      },
      {
        "sha": "6fbeb02cc44e6a6dfa6430c4933633b1149bb468",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e15037cbf904bddb61c241779cd190ffcd02965b",
        "patch": "@@ -40,6 +40,8 @@ class WalletStorage\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n \n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n /** A key from a CWallet's keypool\n  *\n  * The wallet holds one (for pre HD-split wallets) or several keypools. These\n@@ -428,6 +430,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      * be anything).\n      */\n     void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      },
      {
        "sha": "5cf39c9558463407753b891c034bf3644f89e97d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e15037cbf904bddb61c241779cd190ffcd02965b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e15037cbf904bddb61c241779cd190ffcd02965b",
        "patch": "@@ -239,18 +239,6 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n-std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n-{\n-    std::vector<CScript> dummy;\n-    FlatSigningProvider out;\n-    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, dummy, out);\n-    std::vector<CKeyID> ret;\n-    for (const auto& entry : out.pubkeys) {\n-        ret.push_back(entry.first);\n-    }\n-    return ret;\n-}\n-\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);"
      }
    ]
  },
  {
    "sha": "0045e372e75605d6c21b13192c7c69a317378d7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDQ1ZTM3MmU3NTYwNWQ2YzIxYjEzMTkyYzdjNjlhMzE3Mzc4ZDdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:10:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement IsMine in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "f9bcc2ad445f13091eee05c44cbcbeb01e393668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9bcc2ad445f13091eee05c44cbcbeb01e393668"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0045e372e75605d6c21b13192c7c69a317378d7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0045e372e75605d6c21b13192c7c69a317378d7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0045e372e75605d6c21b13192c7c69a317378d7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0045e372e75605d6c21b13192c7c69a317378d7d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e15037cbf904bddb61c241779cd190ffcd02965b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e15037cbf904bddb61c241779cd190ffcd02965b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e15037cbf904bddb61c241779cd190ffcd02965b"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 142,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b06a2641c2ecc2f1613bcde5a5078c149a05234e",
        "filename": "src/wallet/ismine.cpp",
        "status": "modified",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=0045e372e75605d6c21b13192c7c69a317378d7d",
        "patch": "@@ -169,6 +169,130 @@ IsMineResult IsMineInner(const CWallet& keystore, const CScript& scriptPubKey, I\n     return ret;\n }\n \n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        if (!PermitsUncompressed(sigversion)) {\n+            CPubKey pubkey;\n+            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n } // namespace\n \n isminetype IsMine(const CWallet& keystore, const CScript& scriptPubKey)\n@@ -185,6 +309,20 @@ isminetype IsMine(const CWallet& keystore, const CScript& scriptPubKey)\n     assert(false);\n }\n \n+isminetype IsMine(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey)\n+{\n+    switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n isminetype IsMine(const CWallet& keystore, const CTxDestination& dest)\n {\n     CScript script = GetScriptForDestination(dest);"
      },
      {
        "sha": "56885b3e49c6d62cef000db9233e7132eb3cee7a",
        "filename": "src/wallet/ismine.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=0045e372e75605d6c21b13192c7c69a317378d7d",
        "patch": "@@ -13,6 +13,7 @@\n \n class CWallet;\n class CScript;\n+class LegacyScriptPubKeyMan;\n \n /** IsMine() return codes */\n enum isminetype : unsigned int\n@@ -31,6 +32,8 @@ typedef uint8_t isminefilter;\n isminetype IsMine(const CWallet& wallet, const CScript& scriptPubKey);\n isminetype IsMine(const CWallet& wallet, const CTxDestination& dest);\n \n+isminetype IsMine(const LegacyScriptPubKeyMan& wallet, const CScript& scriptPubKey);\n+\n /**\n  * Cachable amount subdivided into watchonly and spendable parts.\n  */"
      },
      {
        "sha": "0eb5ca1d41349e429619077e135f7ef8c0a023f9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0045e372e75605d6c21b13192c7c69a317378d7d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0045e372e75605d6c21b13192c7c69a317378d7d",
        "patch": "@@ -26,7 +26,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n \n isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n {\n-    return ISMINE_NO;\n+    return ::IsMine(*this, script);\n }\n \n bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)"
      }
    ]
  },
  {
    "sha": "666ff362b687a169f912dfb6edb161e29433ae42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjZmZjM2MmI2ODdhMTY5ZjkxMmRmYjZlZGIxNjFlMjk0MzNhZTQy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:16:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "5fcbfe2cbf669a88eaf960a86f60a91c4e03df15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fcbfe2cbf669a88eaf960a86f60a91c4e03df15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/666ff362b687a169f912dfb6edb161e29433ae42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/666ff362b687a169f912dfb6edb161e29433ae42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/666ff362b687a169f912dfb6edb161e29433ae42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/666ff362b687a169f912dfb6edb161e29433ae42/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0045e372e75605d6c21b13192c7c69a317378d7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0045e372e75605d6c21b13192c7c69a317378d7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0045e372e75605d6c21b13192c7c69a317378d7d"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 101,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fc45da440a5fd542babc63746bb86401158d9f54",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/666ff362b687a169f912dfb6edb161e29433ae42/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/666ff362b687a169f912dfb6edb161e29433ae42/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=666ff362b687a169f912dfb6edb161e29433ae42",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_UTIL_TRANSLATION_H\n \n #include <tinyformat.h>\n-\n+#include <functional>\n \n /**\n  * Bilingual messages:"
      },
      {
        "sha": "6ffcae4d89df97f87cd6d367550636f9b7e030ee",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 2,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/666ff362b687a169f912dfb6edb161e29433ae42/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/666ff362b687a169f912dfb6edb161e29433ae42/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=666ff362b687a169f912dfb6edb161e29433ae42",
        "patch": "@@ -5,6 +5,8 @@\n #include <key_io.h>\n #include <outputtype.h>\n #include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/translation.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n@@ -91,11 +93,51 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset();\n }\n \n bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n {\n-    return false;\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n }\n \n bool LegacyScriptPubKeyMan::IsHDEnabled() const\n@@ -122,7 +164,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n }\n \n bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n@@ -133,6 +204,13 @@ bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n \n void LegacyScriptPubKeyMan::RewriteDB()\n {\n+    LOCK(cs_KeyStore);\n+    setInternalKeyPool.clear();\n+    setExternalKeyPool.clear();\n+    m_pool_key_to_index.clear();\n+    // Note: can't top-up keypool here, because wallet is locked.\n+    // User will be prompted to unlock wallet the next operation\n+    // that requires a new key.\n }\n \n static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n@@ -935,3 +1013,21 @@ std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& p\n     }\n     return ret;\n }\n+\n+void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n+{\n+    WalletBatch batch(*m_database);\n+    for (auto it = setExternalKeyPool.begin(); it != setExternalKeyPool.end();) {\n+        int64_t index = *it;\n+        CKeyPool keypool;\n+        if (!batch.ReadPool(index, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read keypool entry failed\");\n+        }\n+        keypool.m_pre_split = true;\n+        if (!batch.WritePool(index, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing modified keypool entry failed\");\n+        }\n+        set_pre_split_keypool.insert(index);\n+        it = setExternalKeyPool.erase(it);\n+    }\n+}"
      },
      {
        "sha": "f7ea25ac86318a2470f345aaddec5bb3b58726e0",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/666ff362b687a169f912dfb6edb161e29433ae42/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/666ff362b687a169f912dfb6edb161e29433ae42/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=666ff362b687a169f912dfb6edb161e29433ae42",
        "patch": "@@ -324,7 +324,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     void MarkUnusedAddresses(const CScript& script) override;\n \n-    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    void UpgradeKeyMetadata() override;\n \n     bool IsHDEnabled() const override;\n \n@@ -401,6 +401,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();"
      }
    ]
  },
  {
    "sha": "8550e365caca77254470da120c1dbaf130c7623b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTUwZTM2NWNhY2E3NzI1NDQ3MGRhMTIwYzFkYmFmMTMwYzc2MjNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:32:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan",
      "tree": {
        "sha": "ae9c2f33a5800fa842c5eb5bcf474fd0a0d77234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae9c2f33a5800fa842c5eb5bcf474fd0a0d77234"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8550e365caca77254470da120c1dbaf130c7623b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8550e365caca77254470da120c1dbaf130c7623b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8550e365caca77254470da120c1dbaf130c7623b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8550e365caca77254470da120c1dbaf130c7623b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "666ff362b687a169f912dfb6edb161e29433ae42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/666ff362b687a169f912dfb6edb161e29433ae42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/666ff362b687a169f912dfb6edb161e29433ae42"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 61,
      "deletions": 2
    },
    "files": [
      {
        "sha": "38d36620489b9990aa60bf83f114b569fa192c71",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 2,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8550e365caca77254470da120c1dbaf130c7623b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8550e365caca77254470da120c1dbaf130c7623b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8550e365caca77254470da120c1dbaf130c7623b",
        "patch": "@@ -33,12 +33,68 @@ isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n }\n \n bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    encrypted_batch = nullptr;\n+    return true;\n }\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)"
      },
      {
        "sha": "397c35b02d427501aaaaa1f9c2ffcf21b3af0cf7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8550e365caca77254470da120c1dbaf130c7623b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8550e365caca77254470da120c1dbaf130c7623b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8550e365caca77254470da120c1dbaf130c7623b",
        "patch": "@@ -235,6 +235,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n "
      }
    ]
  },
  {
    "sha": "d1834ac0642e2444b5cff6097933eebb79761a24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTgzNGFjMDY0MmUyNDQ0YjVjZmY2MDk3OTMzZWViYjc5NzYxYTI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:26:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement ImportScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "931167d82e374a8c43cc26bc8caf9708660f77da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931167d82e374a8c43cc26bc8caf9708660f77da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1834ac0642e2444b5cff6097933eebb79761a24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1834ac0642e2444b5cff6097933eebb79761a24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1834ac0642e2444b5cff6097933eebb79761a24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1834ac0642e2444b5cff6097933eebb79761a24/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8550e365caca77254470da120c1dbaf130c7623b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8550e365caca77254470da120c1dbaf130c7623b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8550e365caca77254470da120c1dbaf130c7623b"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 132,
      "deletions": 0
    },
    "files": [
      {
        "sha": "64081e354a64fa459136ded56680e1a80f97b4df",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1834ac0642e2444b5cff6097933eebb79761a24/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1834ac0642e2444b5cff6097933eebb79761a24/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d1834ac0642e2444b5cff6097933eebb79761a24",
        "patch": "@@ -6,6 +6,7 @@\n #include <outputtype.h>\n #include <script/descriptor.h>\n #include <util/bip32.h>\n+#include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/scriptpubkeyman.h>\n \n@@ -1087,3 +1088,122 @@ void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n         it = setExternalKeyPool.erase(it);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n+{\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n+        return false;\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_KeyStore);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : scripts) {\n+        CScriptID id(entry);\n+        if (HaveCScript(id)) {\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n+            continue;\n+        }\n+        if (!AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+\n+        if (timestamp > 0) {\n+            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n+        }\n+    }\n+    if (timestamp > 0) {\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        // Skip if we already have the key\n+        if (HaveKey(id)) {\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n+            continue;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (GetPubKey(id, temp)) {\n+            // Already have pubkey, skipping\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n+            continue;\n+        }\n+        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "40a535f26a341cede344c72f6b197c1c251728df",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1834ac0642e2444b5cff6097933eebb79761a24/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1834ac0642e2444b5cff6097933eebb79761a24/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d1834ac0642e2444b5cff6097933eebb79761a24",
        "patch": "@@ -274,6 +274,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n@@ -399,13 +405,19 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n \n     //! Load a keypool entry\n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     bool NewKeyPool();\n     void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();\n "
      }
    ]
  },
  {
    "sha": "dc2642e1de946d648cd8386654d3ae1830e017c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzI2NDJlMWRlOTQ2ZDY0OGNkODM4NjY1NGQzYWUxODMwZTAxN2M3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:54:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetMetadata in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "59b365259ed41ef6f63fc9b738b00e83cfaff5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59b365259ed41ef6f63fc9b738b00e83cfaff5b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc2642e1de946d648cd8386654d3ae1830e017c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc2642e1de946d648cd8386654d3ae1830e017c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2642e1de946d648cd8386654d3ae1830e017c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc2642e1de946d648cd8386654d3ae1830e017c7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1834ac0642e2444b5cff6097933eebb79761a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1834ac0642e2444b5cff6097933eebb79761a24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1834ac0642e2444b5cff6097933eebb79761a24"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c8647d15580d689f52e8cdc6c864a45a730178d9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc2642e1de946d648cd8386654d3ae1830e017c7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc2642e1de946d648cd8386654d3ae1830e017c7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=dc2642e1de946d648cd8386654d3ae1830e017c7",
        "patch": "@@ -332,6 +332,16 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n \n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n {\n+    LOCK(cs_KeyStore);\n+    auto it = mapKeyMetadata.find(CKeyID(id));\n+    if (it != mapKeyMetadata.end()) {\n+        return &it->second;\n+    } else {\n+        auto it2 = m_script_metadata.find(CScriptID(id));\n+        if (it2 != m_script_metadata.end()) {\n+            return &it2->second;\n+        }\n+    }\n     return nullptr;\n }\n "
      }
    ]
  },
  {
    "sha": "335ede966b06a835c21c3e7d5d7de37b27b42149",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzVlZGU5NjZiMDZhODM1YzIxYzNlN2Q1ZDdkZTM3YjI3YjQyMTQ5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-30T19:39:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetKeyOrigin in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "2c422f9e6462748482a4bba4097c2e97ac988f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c422f9e6462748482a4bba4097c2e97ac988f07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/335ede966b06a835c21c3e7d5d7de37b27b42149",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335ede966b06a835c21c3e7d5d7de37b27b42149",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/335ede966b06a835c21c3e7d5d7de37b27b42149",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335ede966b06a835c21c3e7d5d7de37b27b42149/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc2642e1de946d648cd8386654d3ae1830e017c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc2642e1de946d648cd8386654d3ae1830e017c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2642e1de946d648cd8386654d3ae1830e017c7"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c44e9fd3289e5d4f18651ac6d21e9123985f654",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/335ede966b06a835c21c3e7d5d7de37b27b42149/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/335ede966b06a835c21c3e7d5d7de37b27b42149/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=335ede966b06a835c21c3e7d5d7de37b27b42149",
        "patch": "@@ -629,6 +629,25 @@ bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n     return false;\n }\n \n+bool LegacyScriptPubKeyMan::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+{\n+    CKeyMetadata meta;\n+    {\n+        LOCK(cs_KeyStore);\n+        auto it = mapKeyMetadata.find(keyID);\n+        if (it != mapKeyMetadata.end()) {\n+            meta = it->second;\n+        }\n+    }\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n+    } else { // Single pubkeys get the master fingerprint of themselves\n+        std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n+    }\n+    return true;\n+}\n+\n bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "81dcfc6ee0648a91b74ca7209dd9c1cd32daec8b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/335ede966b06a835c21c3e7d5d7de37b27b42149/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/335ede966b06a835c21c3e7d5d7de37b27b42149/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=335ede966b06a835c21c3e7d5d7de37b27b42149",
        "patch": "@@ -406,6 +406,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n     bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n     //! Load a keypool entry\n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);"
      }
    ]
  },
  {
    "sha": "94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGQwZWEwZWJjMjFhYzhhY2VlMmUxNjZjZGJlMjcyNjI1NzlkOWY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-25T17:57:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement actually loading everything into LegacyScriptPubKeyMan",
      "tree": {
        "sha": "504ba94ba134df6c2f46dd4cd0100e0b5689ef6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/504ba94ba134df6c2f46dd4cd0100e0b5689ef6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "335ede966b06a835c21c3e7d5d7de37b27b42149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335ede966b06a835c21c3e7d5d7de37b27b42149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/335ede966b06a835c21c3e7d5d7de37b27b42149"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c40fecac5c737a6a8bc2da568b058d0a167f7776",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
        "patch": "@@ -63,8 +63,6 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n class FillableSigningProvider : public SigningProvider\n {\n protected:\n-    mutable CCriticalSection cs_KeyStore;\n-\n     using KeyMap = std::map<CKeyID, CKey>;\n     using ScriptMap = std::map<CScriptID, CScript>;\n \n@@ -74,6 +72,8 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n+    mutable CCriticalSection cs_KeyStore;\n+\n     virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n     virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;"
      },
      {
        "sha": "b13df44d0223c2971f16ae74ff97c5f113f95b46",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
        "patch": "@@ -123,6 +123,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     // Setup\n     std::vector<CInputCoin> utxo_pool;"
      },
      {
        "sha": "8724ed5d38c456aa57712baa4716fa28de6c3568",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
        "patch": "@@ -253,8 +253,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n-            if (fYes == '1')\n+            if (fYes == '1') {\n                 pwallet->LoadWatchOnly(script);\n+                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n+            }\n         } else if (strType == DBKeys::KEY) {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n@@ -310,7 +312,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::MASTER_KEY) {\n+            // Master encryption key is loaded into only the wallet and not any of the ScriptPubKeyMans.\n             unsigned int nID;\n             ssKey >> nID;\n             CMasterKey kMasterKey;\n@@ -340,6 +348,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n+                return false;\n+            }\n             wss.fIsEncrypted = true;\n         } else if (strType == DBKeys::KEYMETA) {\n             CPubKey vchPubKey;\n@@ -348,13 +361,15 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n         } else if (strType == DBKeys::WATCHMETA) {\n             CScript script;\n             ssKey >> script;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n         } else if (strType == DBKeys::DEFAULTKEY) {\n             // We don't want or need the default key, but if there is one set,\n             // we want to make sure that it is valid so that we can detect corruption\n@@ -371,6 +386,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keypool;\n \n             pwallet->LoadKeyPool(nIndex, keypool);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n         } else if (strType == DBKeys::CSCRIPT) {\n             uint160 hash;\n             ssKey >> hash;\n@@ -381,6 +397,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadCScript failed\";\n                 return false;\n             }\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::ORDERPOSNEXT) {\n             ssValue >> pwallet->nOrderPosNext;\n         } else if (strType == DBKeys::DESTDATA) {\n@@ -393,6 +414,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CHDChain chain;\n             ssValue >> chain;\n             pwallet->SetHDChain(chain, true);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->SetHDChain(chain, true);\n         } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;\n@@ -451,6 +473,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             return DBErrors::CORRUPT;\n         }\n \n+        // Always create LegacyScriptPubKeyMan for now\n+        pwallet->SetupLegacyScriptPubKeyMan();\n+\n         while (true)\n         {\n             // Read next record"
      }
    ]
  },
  {
    "sha": "4cd8392f2986149ac02c31ce0f7d685fdea48e89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2Q4MzkyZjI5ODYxNDlhYzAyYzMxY2UwZjdkNjg1ZmRlYTQ4ZTg5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T21:01:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement CanProvide in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "b1adbcd885d632406cff1fd525c14d577f65d92c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1adbcd885d632406cff1fd525c14d577f65d92c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "741e6092c211b8011ea0a8fcec41ec287c506084",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd8392f2986149ac02c31ce0f7d685fdea48e89/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd8392f2986149ac02c31ce0f7d685fdea48e89/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=4cd8392f2986149ac02c31ce0f7d685fdea48e89",
        "patch": "@@ -327,7 +327,25 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        // If it IsMine, we can always provide in some way\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        // We can still provide some stuff if we have the script, but IsMine failed because we don't have keys\n+        return true;\n+    } else {\n+        // If, given the stuff in sigdata, we could make a valid sigature, then we can provide for this script\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have a private key to actually make a signature\n+            bool has_privkeys = false;\n+            for (const auto& key_sig_pair : sigdata.signatures) {\n+                has_privkeys |= HaveKey(key_sig_pair.first);\n+            }\n+            return has_privkeys;\n+        }\n+        return false;\n+    }\n }\n \n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const"
      }
    ]
  },
  {
    "sha": "280e8c6b6142839f8793b54f49ffc9461a73b60f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODBlOGM2YjYxNDI4MzlmODc5M2I1NGY0OWZmYzk0NjFhNzNiNjBm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-26T20:01:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "Implement GetKeys in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "202e8860839ce0efa7b37f5d2b4128eca087c347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/202e8860839ce0efa7b37f5d2b4128eca087c347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/280e8c6b6142839f8793b54f49ffc9461a73b60f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cd8392f2986149ac02c31ce0f7d685fdea48e89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd8392f2986149ac02c31ce0f7d685fdea48e89"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "03b591d105d24fcbcd2efabbb8a9a877d306a0b8",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/280e8c6b6142839f8793b54f49ffc9461a73b60f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/280e8c6b6142839f8793b54f49ffc9461a73b60f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=280e8c6b6142839f8793b54f49ffc9461a73b60f",
        "patch": "@@ -1254,3 +1254,16 @@ bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_\n     }\n     return true;\n }\n+\n+std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptionKeys()) {\n+        return FillableSigningProvider::GetKeys();\n+    }\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapCryptedKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n+}"
      },
      {
        "sha": "320317cb3550d1db028e89a20781ff8892b56fca",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/280e8c6b6142839f8793b54f49ffc9461a73b60f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/280e8c6b6142839f8793b54f49ffc9461a73b60f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=280e8c6b6142839f8793b54f49ffc9461a73b60f",
        "patch": "@@ -453,6 +453,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+\n+    std::set<CKeyID> GetKeys() const override;\n };\n \n /** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */"
      }
    ]
  },
  {
    "sha": "cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWM2ODI4Y2MxY2Y0ZGE5NWU4ODU2ZmI5M2VmMzJjYWNmYWExZWU0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:38:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine",
      "tree": {
        "sha": "1557ab1de27a55e8a4ba88cef2a6c45e91c5b8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1557ab1de27a55e8a4ba88cef2a6c45e91c5b8f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "280e8c6b6142839f8793b54f49ffc9461a73b60f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/280e8c6b6142839f8793b54f49ffc9461a73b60f"
      }
    ],
    "stats": {
      "total": 433,
      "additions": 160,
      "deletions": 273
    },
    "files": [
      {
        "sha": "2d350c1756aab11dcf2497808ea9c3c15a39c7d4",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -47,7 +47,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n         result.txout_is_mine.emplace_back(wallet.IsMine(txout));\n         result.txout_address.emplace_back();\n         result.txout_address_is_mine.emplace_back(ExtractDestination(txout.scriptPubKey, result.txout_address.back()) ?\n-                                                      IsMine(wallet, result.txout_address.back()) :\n+                                                      wallet.IsMine(result.txout_address.back()) :\n                                                       ISMINE_NO);\n     }\n     result.credit = wtx.GetCredit(locked_chain, ISMINE_ALL);\n@@ -120,7 +120,7 @@ class WalletImpl : public Wallet\n     }\n     bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n     bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n-    bool isSpendable(const CTxDestination& dest) override { return IsMine(*m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n     bool haveWatchOnly() override { return m_wallet->HaveWatchOnly(); };\n     bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n     {\n@@ -144,7 +144,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);\n         }\n         if (purpose) {\n             *purpose = it->second.purpose;\n@@ -156,7 +156,7 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         std::vector<WalletAddress> result;\n         for (const auto& item : m_wallet->mapAddressBook) {\n-            result.emplace_back(item.first, IsMine(*m_wallet, item.first), item.second.name, item.second.purpose);\n+            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.name, item.second.purpose);\n         }\n         return result;\n     }"
      },
      {
        "sha": "43c86426af55ddf644ccb4f2640a7e6b4e7f53cf",
        "filename": "src/wallet/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 145,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -8,7 +8,7 @@\n #include <key.h>\n #include <script/script.h>\n #include <script/signingprovider.h>\n-#include <wallet/wallet.h>\n+#include <wallet/scriptpubkeyman.h>\n \n typedef std::vector<unsigned char> valtype;\n \n@@ -45,130 +45,6 @@ bool PermitsUncompressed(IsMineSigVersion sigversion)\n     return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n }\n \n-bool HaveKeys(const std::vector<valtype>& pubkeys, const CWallet& keystore)\n-{\n-    for (const valtype& pubkey : pubkeys) {\n-        CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (!keystore.HaveKey(keyID)) return false;\n-    }\n-    return true;\n-}\n-\n-IsMineResult IsMineInner(const CWallet& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n-{\n-    IsMineResult ret = IsMineResult::NO;\n-\n-    std::vector<valtype> vSolutions;\n-    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n-\n-    CKeyID keyID;\n-    switch (whichType)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-    case TX_WITNESS_UNKNOWN:\n-        break;\n-    case TX_PUBKEY:\n-        keyID = CPubKey(vSolutions[0]).GetID();\n-        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n-            return IsMineResult::INVALID;\n-        }\n-        if (keystore.HaveKey(keyID)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    case TX_WITNESS_V0_KEYHASH:\n-    {\n-        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n-            // P2WPKH inside P2WSH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n-            // We do not support bare witness outputs unless the P2SH version of it would be\n-            // acceptable as well. This protects against matching before segwit activates.\n-            // This also applies to the P2WSH case.\n-            break;\n-        }\n-        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n-        break;\n-    }\n-    case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!PermitsUncompressed(sigversion)) {\n-            CPubKey pubkey;\n-            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n-                return IsMineResult::INVALID;\n-            }\n-        }\n-        if (keystore.HaveKey(keyID)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    case TX_SCRIPTHASH:\n-    {\n-        if (sigversion != IsMineSigVersion::TOP) {\n-            // P2SH inside P2WSH or P2SH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n-        CScript subscript;\n-        if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n-        }\n-        break;\n-    }\n-    case TX_WITNESS_V0_SCRIPTHASH:\n-    {\n-        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n-            // P2WSH inside P2WSH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n-            break;\n-        }\n-        uint160 hash;\n-        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n-        CScriptID scriptID = CScriptID(hash);\n-        CScript subscript;\n-        if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n-        }\n-        break;\n-    }\n-\n-    case TX_MULTISIG:\n-    {\n-        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n-        if (sigversion == IsMineSigVersion::TOP) {\n-            break;\n-        }\n-\n-        // Only consider transactions \"mine\" if we own ALL the\n-        // keys involved. Multi-signature transactions that are\n-        // partially owned (somebody else has a key that can spend\n-        // them) enable spend-out-from-under-you attacks, especially\n-        // in shared-wallet situations.\n-        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n-        if (!PermitsUncompressed(sigversion)) {\n-            for (size_t i = 0; i < keys.size(); i++) {\n-                if (keys[i].size() != 33) {\n-                    return IsMineResult::INVALID;\n-                }\n-            }\n-        }\n-        if (HaveKeys(keys, keystore)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    }\n-    }\n-\n-    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n-        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n-    }\n-    return ret;\n-}\n-\n bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n {\n     for (const valtype& pubkey : pubkeys) {\n@@ -295,20 +171,6 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n \n } // namespace\n \n-isminetype IsMine(const CWallet& keystore, const CScript& scriptPubKey)\n-{\n-    switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n-    case IsMineResult::INVALID:\n-    case IsMineResult::NO:\n-        return ISMINE_NO;\n-    case IsMineResult::WATCH_ONLY:\n-        return ISMINE_WATCH_ONLY;\n-    case IsMineResult::SPENDABLE:\n-        return ISMINE_SPENDABLE;\n-    }\n-    assert(false);\n-}\n-\n isminetype IsMine(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey)\n {\n     switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n@@ -322,9 +184,3 @@ isminetype IsMine(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPu\n     }\n     assert(false);\n }\n-\n-isminetype IsMine(const CWallet& keystore, const CTxDestination& dest)\n-{\n-    CScript script = GetScriptForDestination(dest);\n-    return IsMine(keystore, script);\n-}"
      },
      {
        "sha": "7914ad7eac98f3d775a1fb25511ae648bbb99d8b",
        "filename": "src/wallet/ismine.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -29,9 +29,6 @@ enum isminetype : unsigned int\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const CWallet& wallet, const CScript& scriptPubKey);\n-isminetype IsMine(const CWallet& wallet, const CTxDestination& dest);\n-\n isminetype IsMine(const LegacyScriptPubKeyMan& wallet, const CScript& scriptPubKey);\n \n /**"
      },
      {
        "sha": "3f92f065c72d32affa57a135367b54a621e6275c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -1219,7 +1219,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n \n         // Check whether we have any work to do\n         for (const CScript& script : script_pub_keys) {\n-            if (::IsMine(*pwallet, script) & ISMINE_SPENDABLE) {\n+            if (pwallet->IsMine(script) & ISMINE_SPENDABLE) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script (\\\"\" + HexStr(script.begin(), script.end()) + \"\\\")\");\n             }\n         }"
      },
      {
        "sha": "576d428210f621a7f4541cc82a0585798a563325",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -304,7 +304,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n     std::string label = LabelFromValue(request.params[1]);\n \n-    if (IsMine(*pwallet, dest)) {\n+    if (pwallet->IsMine(dest)) {\n         pwallet->SetAddressBook(dest, label, \"receive\");\n     } else {\n         pwallet->SetAddressBook(dest, label, \"send\");\n@@ -615,7 +615,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n     CScript scriptPubKey = GetScriptForDestination(dest);\n-    if (!IsMine(*pwallet, scriptPubKey)) {\n+    if (!pwallet->IsMine(scriptPubKey)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n     }\n \n@@ -699,7 +699,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address)) {\n+            if (ExtractDestination(txout.scriptPubKey, address) && pwallet->IsMine(address) && setAddress.count(address)) {\n                 if (wtx.GetDepthInMainChain(*locked_chain) >= nMinDepth)\n                     nAmount += txout.nValue;\n             }\n@@ -1074,7 +1074,7 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n                 continue;\n             }\n \n-            isminefilter mine = IsMine(*pwallet, address);\n+            isminefilter mine = pwallet->IsMine(address);\n             if(!(mine & filter))\n                 continue;\n \n@@ -1298,7 +1298,7 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (pwallet->IsMine(s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n             MaybePushAddress(entry, s.destination);\n@@ -1329,7 +1329,7 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n                 continue;\n             }\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (pwallet->IsMine(r.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n             MaybePushAddress(entry, r.destination);\n@@ -3733,7 +3733,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    isminetype mine = IsMine(*pwallet, dest);\n+    isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n     bool solvable = IsSolvable(*pwallet, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);"
      },
      {
        "sha": "f0bfbd42c5b02ef965c4be306285620e33ae48da",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 104,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -34,363 +34,383 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PK compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2PK uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2PKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2PKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript but no key\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript and key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemscript));\n \n-        BOOST_CHECK(keystore.AddCScript(redeemscript));\n-        BOOST_CHECK(keystore.AddCScript(redeemscript_inner));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemscript_inner));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(redeemscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // P2WPKH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        BOOST_CHECK(keystore.AddCScript(witnessscript_inner));\n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessscript_inner));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // P2WPKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n \n         // Keystore implicitly has key and P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WPKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n \n         // Keystore has key, but no P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key and P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // scriptPubKey multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n \n         // Keystore does not have any keys\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 1/2 keys\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 2/2 keys\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 2/2 keys and the script\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // P2SH multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n         CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore has no redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WSH multisig with compressed keys\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessScript));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WSH multisig with uncompressed key\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n         CScript witnessScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessScript));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // P2WSH multisig wrapped in P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore has no witnessScript, P2SH redeemScript, or keys\n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has witnessScript and P2SH redeemScript, but no keys\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddCScript(witnessScript));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // OP_RETURN\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // witness unspendable\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_0 << ToByteVector(ParseHex(\"aabb\"));\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // witness unknown\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_16 << ToByteVector(ParseHex(\"aabb\"));\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // Nonstandard\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        keystore.SetupLegacyScriptPubKeyMan();\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n+        BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n \n-        result = IsMine(keystore, scriptPubKey);\n+        result = keystore.GetLegacyScriptPubKeyMan()->IsMine(scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n }"
      },
      {
        "sha": "da25ae5cb8f55e5c1b88014988efc983bebbee57",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 7,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -1040,7 +1040,7 @@ void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool\n \n     CTxDestination dst;\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n-        if (::IsMine(*this, dst)) {\n+        if (IsMine(dst)) {\n             LOCK(cs_wallet);\n             if (used && !GetDestData(dst, \"used\", nullptr)) {\n                 AddDestData(dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n@@ -1054,7 +1054,7 @@ void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool\n bool CWallet::IsUsedDestination(const CTxDestination& dst) const\n {\n     LOCK(cs_wallet);\n-    return ::IsMine(*this, dst) && GetDestData(dst, \"used\", nullptr);\n+    return IsMine(dst) && GetDestData(dst, \"used\", nullptr);\n }\n \n bool CWallet::IsUsedDestination(const uint256& hash, unsigned int n) const\n@@ -1476,7 +1476,21 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n \n isminetype CWallet::IsMine(const CTxOut& txout) const\n {\n-    return ::IsMine(*this, txout.scriptPubKey);\n+    return IsMine(txout.scriptPubKey);\n+}\n+\n+isminetype CWallet::IsMine(const CTxDestination& dest) const\n+{\n+    return IsMine(GetScriptForDestination(dest));\n+}\n+\n+isminetype CWallet::IsMine(const CScript& script) const\n+{\n+    isminetype result = ISMINE_NO;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result = std::max(result, spk_man_pair.second->IsMine(script));\n+    }\n+    return result;\n }\n \n CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n@@ -1500,7 +1514,7 @@ bool CWallet::IsChange(const CScript& script) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (::IsMine(*this, script))\n+    if (IsMine(script))\n     {\n         CTxDestination address;\n         if (!ExtractDestination(script, address))\n@@ -1840,7 +1854,7 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n {\n     WalletBatch batch(*database);\n     for (const CScript& script : script_pub_keys) {\n-        if (!have_solving_data || !::IsMine(*this, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n             if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n                 return false;\n             }\n@@ -3423,7 +3437,7 @@ bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& add\n         if (!strPurpose.empty()) /* update purpose only if requested */\n             mapAddressBook[address].purpose = strPurpose;\n     }\n-    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address) != ISMINE_NO,\n+    NotifyAddressBookChanged(this, address, strName, IsMine(address) != ISMINE_NO,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!strPurpose.empty() && !batch.WritePurpose(EncodeDestination(address), strPurpose))\n         return false;\n@@ -3450,7 +3464,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         mapAddressBook.erase(address);\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address) != ISMINE_NO, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", IsMine(address) != ISMINE_NO, \"\", CT_DELETED);\n \n     WalletBatch(*database).ErasePurpose(EncodeDestination(address));\n     return WalletBatch(*database).EraseName(EncodeDestination(address));"
      },
      {
        "sha": "b17e1da095b1b0c17d0a6b9ee8a9169c538d7c9e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -18,7 +18,6 @@\n #include <validationinterface.h>\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n-#include <wallet/ismine.h>\n #include <wallet/scriptpubkeyman.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -1084,6 +1083,8 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n     bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n \n+    isminetype IsMine(const CTxDestination& dest) const;\n+    isminetype IsMine(const CScript& script) const;\n     isminetype IsMine(const CTxIn& txin) const;\n     /**\n      * Returns amount of debit if the input matches the"
      },
      {
        "sha": "0638298a069362b377ba0ecd3ccc41c166c7e794",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -30,7 +30,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\"\n     \"txmempool -> validation -> validationinterface -> txmempool\"\n-    \"wallet/ismine -> wallet/wallet -> wallet/ismine\"\n )\n \n EXIT_CODE=0"
      }
    ]
  },
  {
    "sha": "150dbffde59c460f396503950e200a679bc1bf87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTBkYmZmZGU1OWM0NjBmMzk2NTAzOTUwZTIwMGE2NzliYzFiZjg3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T19:56:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan",
      "tree": {
        "sha": "a4eb1ef76489017079797f9bc51b9fccc08abd3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4eb1ef76489017079797f9bc51b9fccc08abd3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/150dbffde59c460f396503950e200a679bc1bf87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/150dbffde59c460f396503950e200a679bc1bf87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/150dbffde59c460f396503950e200a679bc1bf87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/150dbffde59c460f396503950e200a679bc1bf87/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4"
      }
    ],
    "stats": {
      "total": 362,
      "additions": 171,
      "deletions": 191
    },
    "files": [
      {
        "sha": "342f51793834db369e207233852c86f52d900bab",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/150dbffde59c460f396503950e200a679bc1bf87/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/150dbffde59c460f396503950e200a679bc1bf87/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=150dbffde59c460f396503950e200a679bc1bf87",
        "patch": "@@ -339,7 +339,6 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n-  wallet/ismine.cpp \\\n   wallet/load.cpp \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\"
      },
      {
        "sha": "43c86426af55ddf644ccb4f2640a7e6b4e7f53cf",
        "filename": "src/wallet/ismine.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 186,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
        "patch": "@@ -1,186 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <wallet/ismine.h>\n-\n-#include <key.h>\n-#include <script/script.h>\n-#include <script/signingprovider.h>\n-#include <wallet/scriptpubkeyman.h>\n-\n-typedef std::vector<unsigned char> valtype;\n-\n-namespace {\n-\n-/**\n- * This is an enum that tracks the execution context of a script, similar to\n- * SigVersion in script/interpreter. It is separate however because we want to\n- * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n- * execution (a distinction that has no impact on consensus rules).\n- */\n-enum class IsMineSigVersion\n-{\n-    TOP = 0,        //!< scriptPubKey execution\n-    P2SH = 1,       //!< P2SH redeemScript\n-    WITNESS_V0 = 2, //!< P2WSH witness script execution\n-};\n-\n-/**\n- * This is an internal representation of isminetype + invalidity.\n- * Its order is significant, as we return the max of all explored\n- * possibilities.\n- */\n-enum class IsMineResult\n-{\n-    NO = 0,         //!< Not ours\n-    WATCH_ONLY = 1, //!< Included in watch-only balance\n-    SPENDABLE = 2,  //!< Included in all balances\n-    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n-};\n-\n-bool PermitsUncompressed(IsMineSigVersion sigversion)\n-{\n-    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n-}\n-\n-bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n-{\n-    for (const valtype& pubkey : pubkeys) {\n-        CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (!keystore.HaveKey(keyID)) return false;\n-    }\n-    return true;\n-}\n-\n-IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n-{\n-    IsMineResult ret = IsMineResult::NO;\n-\n-    std::vector<valtype> vSolutions;\n-    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n-\n-    CKeyID keyID;\n-    switch (whichType)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-    case TX_WITNESS_UNKNOWN:\n-        break;\n-    case TX_PUBKEY:\n-        keyID = CPubKey(vSolutions[0]).GetID();\n-        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n-            return IsMineResult::INVALID;\n-        }\n-        if (keystore.HaveKey(keyID)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    case TX_WITNESS_V0_KEYHASH:\n-    {\n-        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n-            // P2WPKH inside P2WSH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n-            // We do not support bare witness outputs unless the P2SH version of it would be\n-            // acceptable as well. This protects against matching before segwit activates.\n-            // This also applies to the P2WSH case.\n-            break;\n-        }\n-        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n-        break;\n-    }\n-    case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!PermitsUncompressed(sigversion)) {\n-            CPubKey pubkey;\n-            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n-                return IsMineResult::INVALID;\n-            }\n-        }\n-        if (keystore.HaveKey(keyID)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    case TX_SCRIPTHASH:\n-    {\n-        if (sigversion != IsMineSigVersion::TOP) {\n-            // P2SH inside P2WSH or P2SH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n-        CScript subscript;\n-        if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n-        }\n-        break;\n-    }\n-    case TX_WITNESS_V0_SCRIPTHASH:\n-    {\n-        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n-            // P2WSH inside P2WSH is invalid.\n-            return IsMineResult::INVALID;\n-        }\n-        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n-            break;\n-        }\n-        uint160 hash;\n-        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n-        CScriptID scriptID = CScriptID(hash);\n-        CScript subscript;\n-        if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n-        }\n-        break;\n-    }\n-\n-    case TX_MULTISIG:\n-    {\n-        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n-        if (sigversion == IsMineSigVersion::TOP) {\n-            break;\n-        }\n-\n-        // Only consider transactions \"mine\" if we own ALL the\n-        // keys involved. Multi-signature transactions that are\n-        // partially owned (somebody else has a key that can spend\n-        // them) enable spend-out-from-under-you attacks, especially\n-        // in shared-wallet situations.\n-        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n-        if (!PermitsUncompressed(sigversion)) {\n-            for (size_t i = 0; i < keys.size(); i++) {\n-                if (keys[i].size() != 33) {\n-                    return IsMineResult::INVALID;\n-                }\n-            }\n-        }\n-        if (HaveKeys(keys, keystore)) {\n-            ret = std::max(ret, IsMineResult::SPENDABLE);\n-        }\n-        break;\n-    }\n-    }\n-\n-    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n-        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n-    }\n-    return ret;\n-}\n-\n-} // namespace\n-\n-isminetype IsMine(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey)\n-{\n-    switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n-    case IsMineResult::INVALID:\n-    case IsMineResult::NO:\n-        return ISMINE_NO;\n-    case IsMineResult::WATCH_ONLY:\n-        return ISMINE_WATCH_ONLY;\n-    case IsMineResult::SPENDABLE:\n-        return ISMINE_SPENDABLE;\n-    }\n-    assert(false);\n-}"
      },
      {
        "sha": "0bc6c90354accf3b13ab36edfd873d276e796e7c",
        "filename": "src/wallet/ismine.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/150dbffde59c460f396503950e200a679bc1bf87/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/150dbffde59c460f396503950e200a679bc1bf87/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=150dbffde59c460f396503950e200a679bc1bf87",
        "patch": "@@ -13,7 +13,6 @@\n \n class CWallet;\n class CScript;\n-class LegacyScriptPubKeyMan;\n \n /** IsMine() return codes */\n enum isminetype : unsigned int\n@@ -29,8 +28,6 @@ enum isminetype : unsigned int\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const LegacyScriptPubKeyMan& wallet, const CScript& scriptPubKey);\n-\n /**\n  * Cachable amount subdivided into watchonly and spendable parts.\n  */"
      },
      {
        "sha": "18b90d29ec887c6a39693c65ddf3a30df1cb1119",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 171,
        "deletions": 1,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/150dbffde59c460f396503950e200a679bc1bf87/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/150dbffde59c460f396503950e200a679bc1bf87/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=150dbffde59c460f396503950e200a679bc1bf87",
        "patch": "@@ -27,9 +27,179 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     return true;\n }\n \n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        if (!PermitsUncompressed(sigversion)) {\n+            CPubKey pubkey;\n+            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n {\n-    return ::IsMine(*this, script);\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n }\n \n bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)"
      }
    ]
  },
  {
    "sha": "7dc1b6e2210e916a8b919188f8636b3334fb1e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGMxYjZlMjIxMGU5MTZhOGI5MTkxODhmODYzNmIzMzM0ZmIxZTMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-23T16:25:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] IsMine set state to WATCH_ONLY if we can get the pubkey",
      "tree": {
        "sha": "f6d7aeee661f8f4f78e75eec68123150e0c6014e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d7aeee661f8f4f78e75eec68123150e0c6014e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "150dbffde59c460f396503950e200a679bc1bf87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/150dbffde59c460f396503950e200a679bc1bf87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/150dbffde59c460f396503950e200a679bc1bf87"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a04b174e3b81334fa2e2364ea2e73b1a54409ae6",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dc1b6e2210e916a8b919188f8636b3334fb1e33/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dc1b6e2210e916a8b919188f8636b3334fb1e33/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=7dc1b6e2210e916a8b919188f8636b3334fb1e33",
        "patch": "@@ -110,17 +110,21 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         break;\n     }\n     case TX_PUBKEYHASH:\n+    {\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!PermitsUncompressed(sigversion)) {\n-            CPubKey pubkey;\n-            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n                 return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n             }\n         }\n         if (keystore.HaveKey(keyID)) {\n             ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n+    }\n     case TX_SCRIPTHASH:\n     {\n         if (sigversion != IsMineSigVersion::TOP) {"
      }
    ]
  },
  {
    "sha": "af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjBmNzQwYWU5OWNjZmE1ZDFiNjg3NmViMjU4Y2E2YTkxN2UxNmU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:49:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Have GetNewDestination, GetNewChangeDestination, and ReserveDestination use ScriptPubKeyMan",
      "tree": {
        "sha": "239cb1f81517371a6ab08f6eb4773466acc8de9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/239cb1f81517371a6ab08f6eb4773466acc8de9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dc1b6e2210e916a8b919188f8636b3334fb1e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc1b6e2210e916a8b919188f8636b3334fb1e33"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 19,
      "deletions": 27
    },
    "files": [
      {
        "sha": "84c46cd5076c9e7c14ce4acb3b008b809b0b26b9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 25,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
        "patch": "@@ -3695,28 +3695,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n {\n     LOCK(cs_wallet);\n     error.clear();\n-\n-    TopUpKeyPool();\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n-        return false;\n+    bool result = false;\n+    auto spk_man = GetScriptPubKeyMan(type, false /* internal */);\n+    if (spk_man) {\n+        result = spk_man->GetNewDestination(type, dest, error);\n+    }\n+    if (result) {\n+        SetAddressBook(dest, label, \"receive\");\n     }\n-    LearnRelatedScripts(new_key, type);\n-    dest = GetDestinationForKey(new_key, type);\n \n-    SetAddressBook(dest, label, \"receive\");\n-    return true;\n+    return result;\n }\n \n bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    LOCK(cs_wallet);\n     error.clear();\n \n-    TopUpKeyPool();\n-\n     ReserveDestination reservedest(this);\n     if (!reservedest.GetReservedDestination(type, dest, true)) {\n         error = \"Error: Keypool ran out, please call keypoolrefill first\";\n@@ -3908,42 +3903,39 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n+        address = dest;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);\n-    address = GetDestinationForKey(vchPubKey, type);\n-    dest = address;\n     return true;\n }\n \n void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1)\n-        pwallet->KeepKey(nIndex);\n+        m_spk_man->KeepDestination(nIndex);\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n \n void ReserveDestination::ReturnDestination()\n {\n     if (nIndex != -1) {\n-        pwallet->ReturnKey(nIndex, fInternal, vchPubKey);\n+        m_spk_man->ReturnDestination(nIndex, fInternal, address);\n     }\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n "
      },
      {
        "sha": "5666cdfc78fe77b68354c0c8bb98b171040fecab",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
        "patch": "@@ -141,10 +141,10 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* pwallet;\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* m_spk_man{nullptr};\n     //! The index of the address's key in the keypool\n     int64_t nIndex{-1};\n-    //! The public key for the address\n-    CPubKey vchPubKey;\n     //! The destination\n     CTxDestination address;\n     //! Whether this is from the internal (change output) keypool"
      }
    ]
  },
  {
    "sha": "8e736f1092e70e7eb8865395aff2070ea78561dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTczNmYxMDkyZTcwZTdlYjg4NjUzOTVhZmYyMDcwZWE3ODU2MWRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T16:04:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Mark used addresses in ScriptPubKeyMan",
      "tree": {
        "sha": "d5294e04f6fcfeb4dfcab993efab8722649bc196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5294e04f6fcfeb4dfcab993efab8722649bc196"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e736f1092e70e7eb8865395aff2070ea78561dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e736f1092e70e7eb8865395aff2070ea78561dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e736f1092e70e7eb8865395aff2070ea78561dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e736f1092e70e7eb8865395aff2070ea78561dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ea6c28081af5689ab2e38db494e8b73c4987ca19",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e736f1092e70e7eb8865395aff2070ea78561dc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e736f1092e70e7eb8865395aff2070ea78561dc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e736f1092e70e7eb8865395aff2070ea78561dc",
        "patch": "@@ -1213,17 +1213,8 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::St\n \n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n-                // extract addresses and check if they match with an unused keypool key\n-                for (const auto& keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n-                    std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n-                    if (mi != m_pool_key_to_index.end()) {\n-                        WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n-                        MarkReserveKeysAsUsed(mi->second);\n-\n-                        if (!TopUpKeyPool()) {\n-                            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n-                        }\n-                    }\n+                for (const auto& spk_man_pair : m_spk_managers) {\n+                    spk_man_pair.second->MarkUnusedAddresses(txout.scriptPubKey);\n                 }\n             }\n "
      }
    ]
  },
  {
    "sha": "b3e712a72b8e9b6450a4dad8b5de477b1041e927",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2U3MTJhNzJiOGU5YjY0NTBhNGRhZDhiNWRlNDc3YjEwNDFlOTI3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T19:45:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan",
      "tree": {
        "sha": "159aabd380d10cdfa68240e7d83897f03193d965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/159aabd380d10cdfa68240e7d83897f03193d965"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e736f1092e70e7eb8865395aff2070ea78561dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e736f1092e70e7eb8865395aff2070ea78561dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e736f1092e70e7eb8865395aff2070ea78561dc"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 2,
      "deletions": 31
    },
    "files": [
      {
        "sha": "95a067006fc03ca1ff8a0481f7e8b9764bf59ee4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 31,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3e712a72b8e9b6450a4dad8b5de477b1041e927/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3e712a72b8e9b6450a4dad8b5de477b1041e927/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b3e712a72b8e9b6450a4dad8b5de477b1041e927",
        "patch": "@@ -420,38 +420,9 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata&\n \n void CWallet::UpgradeKeyMetadata()\n {\n-    AssertLockHeld(cs_wallet);\n-    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n-        return;\n-    }\n-\n-    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*database);\n-    for (auto& meta_pair : mapKeyMetadata) {\n-        CKeyMetadata& meta = meta_pair.second;\n-        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n-            CKey key;\n-            GetKey(meta.hd_seed_id, key);\n-            CExtKey masterKey;\n-            masterKey.SetSeed(key.begin(), key.size());\n-            // Add to map\n-            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n-            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n-            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n-                throw std::runtime_error(\"Invalid stored hdKeypath\");\n-            }\n-            meta.has_key_origin = true;\n-            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n-                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n-            }\n-\n-            // Write meta to wallet\n-            CPubKey pubkey;\n-            if (GetPubKey(meta_pair.first, pubkey)) {\n-                batch->WriteKeyMetadata(meta, pubkey, true);\n-            }\n-        }\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        spk_man_pair.second->UpgradeKeyMetadata();\n     }\n-    batch.reset(); //write before setting the flag\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n "
      }
    ]
  },
  {
    "sha": "95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWU5MzQzYjBkNjRjMWZkOGZjYjliNjE1N2VhYzRiNDM0ZmEzYzkw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:12:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet",
      "tree": {
        "sha": "4d11860f6be7771ba772545b14b1cb6877427e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d11860f6be7771ba772545b14b1cb6877427e32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3e712a72b8e9b6450a4dad8b5de477b1041e927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e712a72b8e9b6450a4dad8b5de477b1041e927"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 25,
      "deletions": 4
    },
    "files": [
      {
        "sha": "78cbb5aa256aff283d8ac832bdd5f126701bd5e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
        "patch": "@@ -1710,7 +1710,13 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    if (!ProduceSignature(*this, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+    if (!provider) {\n+        // We don't know about this scriptpbuKey;\n+        return false;\n+    }\n+\n+    if (!ProduceSignature(*provider, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n         return false;\n     }\n     UpdateInput(tx_in, sigdata);\n@@ -2506,7 +2512,9 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            bool solvable = IsSolvable(*this, wtx.tx->vout[i].scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n+\n+            bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n             vCoins.push_back(COutput(&wtx, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n@@ -2740,7 +2748,14 @@ bool CWallet::SignTransaction(CMutableTransaction& tx)\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n-        if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+        if (!provider) {\n+            // We don't know about this scriptpbuKey;\n+            return false;\n+        }\n+\n+        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n             return false;\n         }\n         UpdateInput(input, sigdata);\n@@ -3198,7 +3213,13 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+                if (!provider) {\n+                    // We don't know about this scriptpbuKey;\n+                    return false;\n+                }\n+\n+                if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\").translated;\n                     return false;"
      }
    ]
  },
  {
    "sha": "9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDE3YTY4MDQ3YmY3YmQ3Y2ExYjUxY2Q2ZjQ2NTJiNDRmZTI5NjBi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:20:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan",
      "tree": {
        "sha": "6d9823e9ff2d90680c28dcd76679ec0a7eddce9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d9823e9ff2d90680c28dcd76679ec0a7eddce9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e29eb5fc75d4965b5b288fe87eb2049d7ad396a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
        "patch": "@@ -138,6 +138,11 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n     {\n@@ -264,6 +269,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -466,6 +475,10 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -549,6 +562,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     if (pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n         // If a block is pruned after this check, we will import the key(s),\n@@ -706,6 +724,11 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -755,6 +778,11 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -1339,6 +1367,11 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     const UniValue& requests = mainRequest.params[0];\n \n     //Default options"
      },
      {
        "sha": "935aa07bd2a9ba625f02ab0ea952257ac463d526",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
        "patch": "@@ -974,6 +974,11 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -3926,6 +3931,11 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+\n     if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }"
      }
    ]
  },
  {
    "sha": "86c05b10ae19cc668f9c06b976877295c3ccf9aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmMwNWIxMGFlMTljYzY2OGY5YzA2Yjk3Njg3NzI5NWMzY2NmOWFh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:28:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Change Imports to use LegacyScriptPubKeyMan Imports",
      "tree": {
        "sha": "b9c8bdc92f4d63b9cfb7a53cad2539f158423921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9c8bdc92f4d63b9cfb7a53cad2539f158423921"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 23,
      "deletions": 69
    },
    "files": [
      {
        "sha": "ee11f6a9e5dfd831d4eaa67f8944f827d09af784",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 69,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86c05b10ae19cc668f9c06b976877295c3ccf9aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86c05b10ae19cc668f9c06b976877295c3ccf9aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=86c05b10ae19cc668f9c06b976877295c3ccf9aa",
        "patch": "@@ -1741,92 +1741,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return spk_man->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return spk_man->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return spk_man->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n {\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n+    }\n+    LOCK(spk_man->cs_KeyStore);\n+    if (!spk_man->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {\n+        return false;\n+    }\n     WalletBatch batch(*database);\n     for (const CScript& script : script_pub_keys) {\n-        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n-            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n-                return false;\n-            }\n-        }\n         CTxDestination dest;\n         ExtractDestination(script, dest);\n         if (apply_label && IsValidDestination(dest)) {"
      }
    ]
  },
  {
    "sha": "3bf4cd424507279d7bfc802e373faba43d668dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmY0Y2Q0MjQ1MDcyNzlkN2JmYzgwMmUzNzNmYWJhNDNkNjY4ZGMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:57:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo",
      "tree": {
        "sha": "506b57d8c06770033f278642c45cdd6dcca55ca8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/506b57d8c06770033f278642c45cdd6dcca55ca8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bf4cd424507279d7bfc802e373faba43d668dc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf4cd424507279d7bfc802e373faba43d668dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf4cd424507279d7bfc802e373faba43d668dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf4cd424507279d7bfc802e373faba43d668dc1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86c05b10ae19cc668f9c06b976877295c3ccf9aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86c05b10ae19cc668f9c06b976877295c3ccf9aa"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 88,
      "deletions": 56
    },
    "files": [
      {
        "sha": "e9377d38f3c52a4c40c39046669e2c5538694ae6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 56,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bf4cd424507279d7bfc802e373faba43d668dc1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bf4cd424507279d7bfc802e373faba43d668dc1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3bf4cd424507279d7bfc802e373faba43d668dc1",
        "patch": "@@ -555,9 +555,15 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n+    CScript script_pub_key = GetScriptForDestination(*pkhash);\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script_pub_key);\n+    if (!provider) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+    }\n+\n     CKey key;\n     CKeyID keyID(*pkhash);\n-    if (!pwallet->GetKey(keyID, key)) {\n+    if (!provider->GetKey(keyID, key)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n \n@@ -2935,33 +2941,36 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            if (scriptPubKey.IsPayToScriptHash()) {\n-                const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n-                CScript redeemScript;\n-                if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n-                    // Now check if the redeemScript is actually a P2WSH script\n-                    CTxDestination witness_destination;\n-                    if (redeemScript.IsPayToWitnessScriptHash()) {\n-                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n-                        assert(extracted);\n-                        // Also return the witness script\n-                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n-                        CScriptID id;\n-                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                        CScript witnessScript;\n-                        if (pwallet->GetCScript(id, witnessScript)) {\n-                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                if (scriptPubKey.IsPayToScriptHash()) {\n+                    const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n+                    CScript redeemScript;\n+                    if (provider->GetCScript(hash, redeemScript)) {\n+                        entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                        // Now check if the redeemScript is actually a P2WSH script\n+                        CTxDestination witness_destination;\n+                        if (redeemScript.IsPayToWitnessScriptHash()) {\n+                            bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                            assert(extracted);\n+                            // Also return the witness script\n+                            const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                            CScriptID id;\n+                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                            CScript witnessScript;\n+                            if (provider->GetCScript(id, witnessScript)) {\n+                                entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                            }\n                         }\n                     }\n-                }\n-            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n-                CScriptID id;\n-                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                CScript witnessScript;\n-                if (pwallet->GetCScript(id, witnessScript)) {\n-                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                    const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                    CScriptID id;\n+                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                    CScript witnessScript;\n+                    if (provider->GetCScript(id, witnessScript)) {\n+                        entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                    }\n                 }\n             }\n         }\n@@ -2972,8 +2981,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n-            entry.pushKV(\"desc\", descriptor->ToString());\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+                entry.pushKV(\"desc\", descriptor->ToString());\n+            }\n         }\n         if (avoid_reuse) entry.pushKV(\"reused\", reused);\n         entry.pushKV(\"safe\", out.fSafe);\n@@ -3282,7 +3294,23 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    return SignTransaction(mtx, pwallet, coins, request.params[2]);\n+    std::set<std::shared_ptr<SigningProvider>> providers;\n+    for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n+        if (provider) {\n+            providers.insert(std::move(provider));\n+        }\n+    }\n+    if (providers.size() == 0) {\n+        // When there are no available providers, use DUMMY_SIGNING_PROVIDER so we can check if the tx is complete\n+        providers.insert(std::make_shared<SigningProvider>());\n+    }\n+\n+    UniValue result;\n+    for (std::shared_ptr<SigningProvider> provider : providers) {\n+        result = SignTransaction(mtx, provider.get(), coins, request.params[2]);\n+    }\n+     return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n@@ -3554,7 +3582,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    const SigningProvider * const provider;\n \n     void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n     {\n@@ -3590,7 +3618,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         }\n     }\n \n-    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+    explicit DescribeWalletAddressVisitor(const SigningProvider* _provider) : provider(_provider) {}\n \n     UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n \n@@ -3599,7 +3627,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         CKeyID keyID(pkhash);\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+        if (provider && provider->GetPubKey(keyID, vchPubKey)) {\n             obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n             obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n@@ -3611,7 +3639,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         CScriptID scriptID(scripthash);\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+        if (provider && provider->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj);\n         }\n         return obj;\n@@ -3621,7 +3649,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+        if (provider && provider->GetPubKey(CKeyID(id), pubkey)) {\n             obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n         return obj;\n@@ -3634,7 +3662,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+        if (provider && provider->GetCScript(CScriptID(hash), subscript)) {\n             ProcessSubScript(subscript, obj);\n         }\n         return obj;\n@@ -3647,8 +3675,13 @@ static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& de\n {\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n+    CScript script = GetScriptForDestination(dest);\n+    std::unique_ptr<SigningProvider> provider = nullptr;\n+    if (pwallet) {\n+        provider = pwallet->GetSigningProvider(script);\n+    }\n     ret.pushKVs(detail);\n-    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n     return ret;\n }\n \n@@ -3737,13 +3770,14 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-    bool solvable = IsSolvable(*pwallet, scriptPubKey);\n+    bool solvable = provider ? IsSolvable(*provider, scriptPubKey) : false;\n     ret.pushKV(\"solvable\", solvable);\n     if (solvable) {\n-       ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *pwallet)->ToString());\n+       ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n     }\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n@@ -3752,26 +3786,24 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n-    const CKeyMetadata* meta = nullptr;\n-    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-    if (!key_id.IsNull()) {\n-        auto it = pwallet->mapKeyMetadata.find(key_id);\n-        if (it != pwallet->mapKeyMetadata.end()) {\n-            meta = &it->second;\n+\n+    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n+    if (spk_man) {\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        const CKeyMetadata* meta = nullptr;\n+        if (!key_id.IsNull()) {\n+            meta = spk_man->GetMetadata(key_id);\n         }\n-    }\n-    if (!meta) {\n-        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-        if (it != pwallet->m_script_metadata.end()) {\n-            meta = &it->second;\n+        if (!meta) {\n+            meta = spk_man->GetMetadata(CScriptID(scriptPubKey));\n         }\n-    }\n-    if (meta) {\n-        ret.pushKV(\"timestamp\", meta->nCreateTime);\n-        if (meta->has_key_origin) {\n-            ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n-            ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-            ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n+        if (meta) {\n+            ret.pushKV(\"timestamp\", meta->nCreateTime);\n+            if (meta->has_key_origin) {\n+                ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n+                ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "ecc4371c46b9c899916a6ab8fe5548382d877199",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2M0MzcxYzQ2YjljODk5OTE2YTZhYjhmZTU1NDgzODJkODc3MTk5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:58:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed",
      "tree": {
        "sha": "ea1d67433f0825e34a96473ee3aaeceab4677c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea1d67433f0825e34a96473ee3aaeceab4677c04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc4371c46b9c899916a6ab8fe5548382d877199",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc4371c46b9c899916a6ab8fe5548382d877199",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc4371c46b9c899916a6ab8fe5548382d877199",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc4371c46b9c899916a6ab8fe5548382d877199/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bf4cd424507279d7bfc802e373faba43d668dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf4cd424507279d7bfc802e373faba43d668dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf4cd424507279d7bfc802e373faba43d668dc1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b3cf4df67f630797d244963e80381e1321e32331",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc4371c46b9c899916a6ab8fe5548382d877199/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc4371c46b9c899916a6ab8fe5548382d877199/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ecc4371c46b9c899916a6ab8fe5548382d877199",
        "patch": "@@ -69,7 +69,7 @@ static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWall\n \n \n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n-bool HaveKey(const CWallet& wallet, const CKey& key)\n+bool HaveKey(const SigningProvider& wallet, const CKey& key)\n {\n     CKey key2;\n     key2.Set(key.begin(), key.end(), !key.IsCompressed());\n@@ -986,7 +986,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man->cs_KeyStore);\n \n     std::string label;\n     if (!request.params[2].isNull())\n@@ -1001,7 +1001,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         if (IsHex(keys_or_addrs[i].get_str()) && (keys_or_addrs[i].get_str().length() == 66 || keys_or_addrs[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys_or_addrs[i].get_str()));\n         } else {\n-            pubkeys.push_back(AddrToPubKey(pwallet, keys_or_addrs[i].get_str()));\n+            pubkeys.push_back(AddrToPubKey(spk_man, keys_or_addrs[i].get_str()));\n         }\n     }\n \n@@ -1014,7 +1014,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n     // Construct using pay-to-script-hash:\n     CScript inner;\n-    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, *pwallet, inner);\n+    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, *spk_man, inner);\n     pwallet->SetAddressBook(dest, label, \"send\");\n \n     UniValue result(UniValue::VOBJ);\n@@ -3977,7 +3977,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man->cs_KeyStore);\n \n     // Do not do anything to non-HD wallets\n     if (!pwallet->CanSupportFeature(FEATURE_HD)) {\n@@ -3993,22 +3993,22 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n     CPubKey master_pub_key;\n     if (request.params[1].isNull()) {\n-        master_pub_key = pwallet->GenerateNewSeed();\n+        master_pub_key = spk_man->GenerateNewSeed();\n     } else {\n         CKey key = DecodeSecret(request.params[1].get_str());\n         if (!key.IsValid()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n         }\n \n-        if (HaveKey(*pwallet, key)) {\n+        if (HaveKey(*spk_man, key)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n         }\n \n-        master_pub_key = pwallet->DeriveNewSeed(key);\n+        master_pub_key = spk_man->DeriveNewSeed(key);\n     }\n \n-    pwallet->SetHDSeed(master_pub_key);\n-    if (flush_key_pool) pwallet->NewKeyPool();\n+    spk_man->SetHDSeed(master_pub_key);\n+    if (flush_key_pool) spk_man->NewKeyPool();\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "d03ed2c77f679c2e261a5e00b317c914cb34950f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDNlZDJjNzdmNjc5YzJlMjYxYTVlMDBiMzE3YzkxNGNiMzQ5NTBm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:59:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo",
      "tree": {
        "sha": "8862b5adb98b0b401371bd6c3efbb32f6c64fcf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8862b5adb98b0b401371bd6c3efbb32f6c64fcf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d03ed2c77f679c2e261a5e00b317c914cb34950f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecc4371c46b9c899916a6ab8fe5548382d877199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc4371c46b9c899916a6ab8fe5548382d877199",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc4371c46b9c899916a6ab8fe5548382d877199"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "00292540be72db2a808cf24fbdb6913a4f89a07d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d03ed2c77f679c2e261a5e00b317c914cb34950f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d03ed2c77f679c2e261a5e00b317c914cb34950f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d03ed2c77f679c2e261a5e00b317c914cb34950f",
        "patch": "@@ -2470,17 +2470,22 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n-    CKeyID seed_id = pwallet->GetHDChain().seed_id;\n+\n+    LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    if (spk_man) {\n+        CKeyID seed_id = spk_man->GetHDChain().seed_id;\n+        if (!seed_id.IsNull()) {\n+            obj.pushKV(\"hdseedid\", seed_id.GetHex());\n+        }\n+    }\n+\n     if (pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n         obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n-    if (!seed_id.IsNull()) {\n-        obj.pushKV(\"hdseedid\", seed_id.GetHex());\n-    }\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     obj.pushKV(\"avoid_reuse\", pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE));\n     if (pwallet->IsScanning()) {"
      }
    ]
  },
  {
    "sha": "473df837aa49461c59d1a7dce0a71fe2fa512fe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzNkZjgzN2FhNDk0NjFjNTlkMWE3ZGNlMGE3MWZlMmZhNTEyZmU2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:04:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:00Z"
      },
      "message": "[ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans",
      "tree": {
        "sha": "956d12d972bea238378acb4ba53cc95345668abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/956d12d972bea238378acb4ba53cc95345668abb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d03ed2c77f679c2e261a5e00b317c914cb34950f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d03ed2c77f679c2e261a5e00b317c914cb34950f"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "307f5b2d7faed0188aa4b5edad48a578e8a0e4ce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/473df837aa49461c59d1a7dce0a71fe2fa512fe6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/473df837aa49461c59d1a7dce0a71fe2fa512fe6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=473df837aa49461c59d1a7dce0a71fe2fa512fe6",
        "patch": "@@ -3448,7 +3448,24 @@ bool CWallet::NewKeyPool()\n size_t CWallet::KeypoolCountExternalKeys()\n {\n     AssertLockHeld(cs_wallet);\n-    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n+\n+    unsigned int count = 0;\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n+        count += spk_man->KeypoolCountExternalKeys();\n+    }\n+\n+    return count;\n+}\n+\n+unsigned int CWallet::GetKeyPoolSize() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    unsigned int count = 0;\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n+        count += spk_man->GetKeyPoolSize();\n+    }\n+    return count;\n }\n \n void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)"
      },
      {
        "sha": "c42b789594315aecee8a8e01f38405aee9bbcac6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/473df837aa49461c59d1a7dce0a71fe2fa512fe6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/473df837aa49461c59d1a7dce0a71fe2fa512fe6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=473df837aa49461c59d1a7dce0a71fe2fa512fe6",
        "patch": "@@ -1114,11 +1114,7 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n-    {\n-        AssertLockHeld(cs_wallet);\n-        return setInternalKeyPool.size() + setExternalKeyPool.size();\n-    }\n+    unsigned int GetKeyPoolSize() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false) override;"
      }
    ]
  },
  {
    "sha": "921261e2456b67d27a702952467b0d3595f9aef9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjEyNjFlMjQ1NmI2N2QyN2E3MDI5NTI0NjdiMGQzNTk1ZjlhZWY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:08:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans",
      "tree": {
        "sha": "5ebee28e12d0d1eeb3a2371eb3797bd2a393af53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ebee28e12d0d1eeb3a2371eb3797bd2a393af53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/921261e2456b67d27a702952467b0d3595f9aef9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921261e2456b67d27a702952467b0d3595f9aef9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/921261e2456b67d27a702952467b0d3595f9aef9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921261e2456b67d27a702952467b0d3595f9aef9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "473df837aa49461c59d1a7dce0a71fe2fa512fe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/473df837aa49461c59d1a7dce0a71fe2fa512fe6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "07a22eef4ad64a4009a53499ff951320fa105952",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/921261e2456b67d27a702952467b0d3595f9aef9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/921261e2456b67d27a702952467b0d3595f9aef9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=921261e2456b67d27a702952467b0d3595f9aef9",
        "patch": "@@ -1627,7 +1627,11 @@ void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n \n bool CWallet::IsHDEnabled() const\n {\n-    return !hdChain.seed_id.IsNull();\n+    bool result = true;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result &= spk_man_pair.second->IsHDEnabled();\n+    }\n+    return result;\n }\n \n bool CWallet::CanGenerateKeys()"
      }
    ]
  },
  {
    "sha": "bf8491c5f066e986356ed7862eaf1f9e71e373c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjg0OTFjNWYwNjZlOTg2MzU2ZWQ3ODYyZWFmMWY5ZTcxZTM3M2Mx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:12:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] Fetch oldest keypool time from ScriptPubKeyMans",
      "tree": {
        "sha": "6bb7c14f4fd2dcbaba00003c4671e42975a55387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bb7c14f4fd2dcbaba00003c4671e42975a55387"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "921261e2456b67d27a702952467b0d3595f9aef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921261e2456b67d27a702952467b0d3595f9aef9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/921261e2456b67d27a702952467b0d3595f9aef9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 3,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4c10f64a6146797a00840a97a5398f26c602c960",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8491c5f066e986356ed7862eaf1f9e71e373c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8491c5f066e986356ed7862eaf1f9e71e373c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf8491c5f066e986356ed7862eaf1f9e71e373c1",
        "patch": "@@ -3697,18 +3697,10 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, Walle\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n-\n-    WalletBatch batch(*database);\n-\n-    // load oldest key from keypool, get time and return\n-    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n-        if (!set_pre_split_keypool.empty()) {\n-            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n-        }\n+    int64_t oldestKey = std::numeric_limits<int64_t>::max();\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        oldestKey = std::min(oldestKey, spk_man_pair.second->GetOldestKeyPoolTime());\n     }\n-\n     return oldestKey;\n }\n "
      }
    ]
  },
  {
    "sha": "bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGZhYzI4YTIyMGU4MWQ5YmI1NDY5YmRkNGQ2MmM4Y2U2ZjI5ZGQ2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:15:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan",
      "tree": {
        "sha": "f83aff3b0ec4080af4e25f86b8d0604e5abb90ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f83aff3b0ec4080af4e25f86b8d0604e5abb90ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf8491c5f066e986356ed7862eaf1f9e71e373c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8491c5f066e986356ed7862eaf1f9e71e373c1"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 7,
      "deletions": 40
    },
    "files": [
      {
        "sha": "25a93e158c1aaa54f6ba83ff67d2f454ec748896",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
        "patch": "@@ -1879,7 +1879,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n     pwallet->TopUpKeyPool(kpSize);\n \n     if (pwallet->GetKeyPoolSize() < kpSize) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error refreshing keypool. %d\", pwallet->GetKeyPoolSize()));\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "4bfe57dac76c3ce70679c7f097fc3818add89b03",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 39,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
        "patch": "@@ -3495,48 +3495,15 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (!CanGenerateKeys()) {\n+    LOCK(cs_wallet);\n+    if (IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         return false;\n     }\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked()) return false;\n-\n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n-\n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n-\n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n-            }\n-\n-            CPubKey pubkey(GenerateNewKey(batch, internal));\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-        }\n-        if (missingInternal + missingExternal > 0) {\n-            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n-        }\n+    bool res = true;\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n+        res &= spk_man->TopUp(kpSize);\n     }\n-    NotifyCanGetAddressesChanged();\n-    return true;\n+    return res;\n }\n \n void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)"
      }
    ]
  },
  {
    "sha": "da4ca24ced03040dcafed890978175c1a06b8fba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTRjYTI0Y2VkMDMwNDBkY2FmZWQ4OTA5NzgxNzVjMWEwNmI4ZmJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:17:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans",
      "tree": {
        "sha": "7616ed6e6b7d203f972f41dc7bb8ee0d1deeca9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7616ed6e6b7d203f972f41dc7bb8ee0d1deeca9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da4ca24ced03040dcafed890978175c1a06b8fba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4ca24ced03040dcafed890978175c1a06b8fba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da4ca24ced03040dcafed890978175c1a06b8fba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4ca24ced03040dcafed890978175c1a06b8fba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 30,
      "deletions": 61
    },
    "files": [
      {
        "sha": "3bb663373db93ea4b08d2da0085d667de9e6d801",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 45,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4ca24ced03040dcafed890978175c1a06b8fba/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4ca24ced03040dcafed890978175c1a06b8fba/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=da4ca24ced03040dcafed890978175c1a06b8fba",
        "patch": "@@ -838,23 +838,24 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        assert(!encrypted_batch);\n-        encrypted_batch = new WalletBatch(*database);\n+        WalletBatch* encrypted_batch = new WalletBatch(*database);\n         if (!encrypted_batch->TxnBegin()) {\n             delete encrypted_batch;\n             encrypted_batch = nullptr;\n             return false;\n         }\n         encrypted_batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n \n-        if (!EncryptKeys(_vMasterKey))\n-        {\n-            encrypted_batch->TxnAbort();\n-            delete encrypted_batch;\n-            encrypted_batch = nullptr;\n-            // We now probably have half of our keys encrypted in memory, and half not...\n-            // die and let the user reload the unencrypted wallet.\n-            assert(false);\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            auto spk_man = spk_man_pair.second.get();\n+            if (!spk_man->Encrypt(_vMasterKey, encrypted_batch)) {\n+                encrypted_batch->TxnAbort();\n+                delete encrypted_batch;\n+                encrypted_batch = nullptr;\n+                // We now probably have half of our keys encrypted in memory, and half not...\n+                // die and let the user reload the unencrypted wallet.\n+                assert(false);\n+            }\n         }\n \n         // Encryption was introduced in version 0.4.0\n@@ -875,11 +876,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Unlock(strWalletPassphrase);\n \n         // if we are using HD, replace the HD seed with a new one\n-        if (IsHDEnabled()) {\n-            SetHDSeed(GenerateNewSeed());\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            if (spk_man_pair.second->IsHDEnabled()) {\n+                spk_man_pair.second->SetupGeneration(true);\n+            }\n         }\n-\n-        NewKeyPool();\n         Lock();\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n@@ -4656,22 +4657,27 @@ bool CWallet::SetCrypted()\n     return true;\n }\n \n+bool CWallet::IsCrypted() const\n+{\n+    return HasEncryptionKeys();\n+}\n+\n bool CWallet::IsLocked() const\n {\n     if (!IsCrypted()) {\n         return false;\n     }\n-    LOCK(cs_KeyStore);\n+    LOCK(cs_wallet);\n     return vMasterKey.empty();\n }\n \n bool CWallet::Lock()\n {\n-    if (!SetCrypted())\n+    if (!IsCrypted())\n         return false;\n \n     {\n-        LOCK(cs_KeyStore);\n+        LOCK(cs_wallet);\n         vMasterKey.clear();\n     }\n \n@@ -4682,36 +4688,13 @@ bool CWallet::Lock()\n bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n-        bool keyFail = false;\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-            {\n-                keyFail = true;\n-                break;\n+        LOCK(cs_wallet);\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            if (!spk_man_pair.second->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n+                return false;\n             }\n-            keyPass = true;\n-            if (fDecryptionThoroughlyChecked)\n-                break;\n-        }\n-        if (keyPass && keyFail)\n-        {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n         }\n-        if (keyFail || (!keyPass && !accept_no_keys))\n-            return false;\n         vMasterKey = vMasterKeyIn;\n-        fDecryptionThoroughlyChecked = true;\n     }\n     NotifyStatusChanged(this);\n     return true;\n@@ -4793,7 +4776,6 @@ bool CWallet::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     if (!mapCryptedKeys.empty() || IsCrypted())\n         return false;\n \n-    fUseCrypto = true;\n     for (const KeyMap::value_type& mKey : mapKeys)\n     {\n         const CKey &key = mKey.second;"
      },
      {
        "sha": "f83a68fc81adfac849635d5135e377a2f4fea1d4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4ca24ced03040dcafed890978175c1a06b8fba/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4ca24ced03040dcafed890978175c1a06b8fba/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=da4ca24ced03040dcafed890978175c1a06b8fba",
        "patch": "@@ -587,14 +587,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n class CWallet final : public FillableSigningProvider, public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n@@ -620,8 +613,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n-    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n-\n     //! the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};\n \n@@ -792,9 +783,7 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n \n     /** Construct wallet with specified name and database implementation. */\n     CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n-        : fUseCrypto(false),\n-          fDecryptionThoroughlyChecked(false),\n-          m_chain(chain),\n+        : m_chain(chain),\n           m_location(location),\n           database(std::move(database))\n     {\n@@ -804,11 +793,9 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     {\n         // Should not have slots connected at this point.\n         assert(NotifyUnload.empty());\n-        delete encrypted_batch;\n-        encrypted_batch = nullptr;\n     }\n \n-    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsCrypted() const;\n     bool IsLocked() const override;\n     bool Lock();\n "
      }
    ]
  },
  {
    "sha": "6fa358591c9f9e2f0e02e20ef9953088de65919e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmEzNTg1OTFjOWY5ZTJmMGUwMmUyMGVmOTk1MzA4OGRlNjU5MTll",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:22:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests",
      "tree": {
        "sha": "7fe920e706ae959dc3cfb68b7209612a47dc82f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe920e706ae959dc3cfb68b7209612a47dc82f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fa358591c9f9e2f0e02e20ef9953088de65919e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da4ca24ced03040dcafed890978175c1a06b8fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4ca24ced03040dcafed890978175c1a06b8fba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da4ca24ced03040dcafed890978175c1a06b8fba"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7e3eab2359e785acce345657b1037eb97316706e",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fa358591c9f9e2f0e02e20ef9953088de65919e/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fa358591c9f9e2f0e02e20ef9953088de65919e/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=6fa358591c9f9e2f0e02e20ef9953088de65919e",
        "patch": "@@ -16,7 +16,8 @@ BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n-    LOCK(m_wallet.cs_wallet);\n+    auto spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n+    LOCK2(m_wallet.cs_wallet, spk_man->cs_KeyStore);\n \n     // Create prevtxs and add to wallet\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);\n@@ -35,23 +36,23 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     CScript rs1;\n     CDataStream s_rs1(ParseHex(\"475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae\"), SER_NETWORK, PROTOCOL_VERSION);\n     s_rs1 >> rs1;\n-    m_wallet.AddCScript(rs1);\n+    spk_man->AddCScript(rs1);\n \n     CScript rs2;\n     CDataStream s_rs2(ParseHex(\"2200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903\"), SER_NETWORK, PROTOCOL_VERSION);\n     s_rs2 >> rs2;\n-    m_wallet.AddCScript(rs2);\n+    spk_man->AddCScript(rs2);\n \n     CScript ws1;\n     CDataStream s_ws1(ParseHex(\"47522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae\"), SER_NETWORK, PROTOCOL_VERSION);\n     s_ws1 >> ws1;\n-    m_wallet.AddCScript(ws1);\n+    spk_man->AddCScript(ws1);\n \n     // Add hd seed\n     CKey key = DecodeSecret(\"5KSSJQ7UNfFGwVgpCZDSHm5rVNhMFcFtvWM3zQ8mW4qNDEN7LFd\"); // Mainnet and uncompressed form of cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T\n-    CPubKey master_pub_key = m_wallet.DeriveNewSeed(key);\n-    m_wallet.SetHDSeed(master_pub_key);\n-    m_wallet.NewKeyPool();\n+    CPubKey master_pub_key = spk_man->DeriveNewSeed(key);\n+    spk_man->SetHDSeed(master_pub_key);\n+    spk_man->NewKeyPool();\n \n     // Call FillPSBT\n     PartiallySignedTransaction psbtx;"
      }
    ]
  },
  {
    "sha": "6480910fba8d09b62deab8f8f264e5b1fa04f405",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDgwOTEwZmJhOGQwOWI2MmRlYWI4ZjhmMjY0ZTViMWZhMDRmNDA1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:24:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan throughout wallettool",
      "tree": {
        "sha": "ca40747287698e2bf51e66f3eb756da3e0782597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca40747287698e2bf51e66f3eb756da3e0782597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6480910fba8d09b62deab8f8f264e5b1fa04f405",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fa358591c9f9e2f0e02e20ef9953088de65919e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fa358591c9f9e2f0e02e20ef9953088de65919e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eb111a876c88c36c0e79d3003ad40d64d2657dd6",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6480910fba8d09b62deab8f8f264e5b1fa04f405/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6480910fba8d09b62deab8f8f264e5b1fa04f405/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=6480910fba8d09b62deab8f8f264e5b1fa04f405",
        "patch": "@@ -27,6 +27,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     }\n     // dummy chain interface\n     std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    LOCK(wallet_instance->cs_wallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n@@ -37,8 +38,9 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n \n     // generate a new HD seed\n-    CPubKey seed = wallet_instance->GenerateNewSeed();\n-    wallet_instance->SetHDSeed(seed);\n+    auto spk_man = wallet_instance->GetOrCreateLegacyScriptPubKeyMan();\n+    CPubKey seed = spk_man->GenerateNewSeed();\n+    spk_man->SetHDSeed(seed);\n \n     tfm::format(std::cout, \"Topping up keypool...\\n\");\n     wallet_instance->TopUpKeyPool();\n@@ -94,7 +96,7 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->IsHDEnabled() ? \"yes\" : \"no\");\n     tfm::format(std::cout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n     tfm::format(std::cout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());"
      }
    ]
  },
  {
    "sha": "9585527a562281088d8dcb2ec133ba1311640e2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTg1NTI3YTU2MjI4MTA4OGQ4ZGNiMmVjMTMzYmExMzExNjQwZTJl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:28:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:03Z"
      },
      "message": "[ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet",
      "tree": {
        "sha": "1845a7230e7699305da3f9c732cc7cc0f0218f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1845a7230e7699305da3f9c732cc7cc0f0218f61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9585527a562281088d8dcb2ec133ba1311640e2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9585527a562281088d8dcb2ec133ba1311640e2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9585527a562281088d8dcb2ec133ba1311640e2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9585527a562281088d8dcb2ec133ba1311640e2e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6480910fba8d09b62deab8f8f264e5b1fa04f405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6480910fba8d09b62deab8f8f264e5b1fa04f405"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 20,
      "deletions": 40
    },
    "files": [
      {
        "sha": "bd2f892086d3e7d16faf247f96db33e215dbddb3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 37,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9585527a562281088d8dcb2ec133ba1311640e2e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9585527a562281088d8dcb2ec133ba1311640e2e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9585527a562281088d8dcb2ec133ba1311640e2e",
        "patch": "@@ -4234,31 +4234,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->TopUpKeyPool()) {\n-                error = _(\"Unable to generate keys\").translated;\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            std::string error;\n+            if (!spk_man->Upgrade(prev_version, error)) {\n+                chain.initError(error);\n                 return nullptr;\n             }\n         }\n@@ -4270,16 +4249,18 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n-        if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n-            // generate a new seed\n-            CPubKey seed = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(seed);\n-        }\n \n-        // Top up the keypool\n-        if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            error = _(\"Unable to generate initial keys\").translated;\n-            return nullptr;\n+        // Always create LegacyScriptPubKeyMan for now\n+        walletInstance->SetupLegacyScriptPubKeyMan();\n+\n+        if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n+            LOCK(walletInstance->cs_wallet);\n+            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+                if (!spk_man->SetupGeneration()) {\n+                    error = _(\"Unable to generate initial keys\").translated;\n+                    return nullptr;\n+                }\n+            }\n         }\n \n         auto locked_chain = chain.lock();\n@@ -4289,9 +4270,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        LOCK(walletInstance->cs_KeyStore);\n-        if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            if (spk_man->HavePrivateKeys()) {\n+                warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+                break;\n+            }\n         }\n     }\n "
      },
      {
        "sha": "ec3089ee921ef5b6831a8f5750ee12c8458fc86a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9585527a562281088d8dcb2ec133ba1311640e2e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9585527a562281088d8dcb2ec133ba1311640e2e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9585527a562281088d8dcb2ec133ba1311640e2e",
        "patch": "@@ -473,9 +473,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             return DBErrors::CORRUPT;\n         }\n \n-        // Always create LegacyScriptPubKeyMan for now\n-        pwallet->SetupLegacyScriptPubKeyMan();\n-\n         while (true)\n         {\n             // Read next record"
      }
    ]
  },
  {
    "sha": "4c97a6ba515e8ab21d4914158c900096f1634d4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yzk3YTZiYTUxNWU4YWIyMWQ0OTE0MTU4YzkwMDA5NmYxNjM0ZDRh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T19:13:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Define first run as having no ScriptPubKeyMans",
      "tree": {
        "sha": "fdfb0047b0f7ce3f8161fbe83a5fb60a380ab92a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdfb0047b0f7ce3f8161fbe83a5fb60a380ab92a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c97a6ba515e8ab21d4914158c900096f1634d4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9585527a562281088d8dcb2ec133ba1311640e2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9585527a562281088d8dcb2ec133ba1311640e2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9585527a562281088d8dcb2ec133ba1311640e2e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c19ecd85c1ab2ec6dbfd84abdb9dddfd365de75a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c97a6ba515e8ab21d4914158c900096f1634d4a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c97a6ba515e8ab21d4914158c900096f1634d4a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4c97a6ba515e8ab21d4914158c900096f1634d4a",
        "patch": "@@ -3300,11 +3300,11 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \n-    {\n-        LOCK(cs_KeyStore);\n-        // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n-            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    // This wallet is in its first run if all of these are empty and this isn't blank or no privkeys\n+    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    if (fFirstRunRet) {\n+        assert(m_external_spk_managers.empty());\n+        assert(m_internal_spk_managers.empty());\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)"
      }
    ]
  },
  {
    "sha": "111a09479123f27f68422dd5d776fbdb1bc1655a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTFhMDk0NzkxMjNmMjdmNjg0MjJkZDVkNzc2ZmJkYjFiYzE2NTVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T19:22:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use RewriteDB action when DB needs rewrite",
      "tree": {
        "sha": "d2fcc7477da37b9ce566b962f2faeb6e0c2a04a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2fcc7477da37b9ce566b962f2faeb6e0c2a04a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/111a09479123f27f68422dd5d776fbdb1bc1655a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111a09479123f27f68422dd5d776fbdb1bc1655a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/111a09479123f27f68422dd5d776fbdb1bc1655a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111a09479123f27f68422dd5d776fbdb1bc1655a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c97a6ba515e8ab21d4914158c900096f1634d4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c97a6ba515e8ab21d4914158c900096f1634d4a"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 9,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c7b4ac9df63669d1800602ec5f40a187855f127e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111a09479123f27f68422dd5d776fbdb1bc1655a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111a09479123f27f68422dd5d776fbdb1bc1655a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=111a09479123f27f68422dd5d776fbdb1bc1655a",
        "patch": "@@ -3291,12 +3291,9 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n \n@@ -3328,12 +3325,9 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n \n@@ -3352,13 +3346,9 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWUwYzVhODdlMWEwZGJmMjJmYzM2OTFmOTJhNjIwOTgyNGU2Yjk5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T20:00:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use GetTimeFirstKey instead of nTimeFirstKey",
      "tree": {
        "sha": "487527f2da5186689d3f61285603c947bb565a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/487527f2da5186689d3f61285603c947bb565a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111a09479123f27f68422dd5d776fbdb1bc1655a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111a09479123f27f68422dd5d776fbdb1bc1655a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111a09479123f27f68422dd5d776fbdb1bc1655a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "216eb0b1fc064faff899367150f3045bb8d46eed",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
        "patch": "@@ -4414,8 +4414,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            time_first_key = std::min(time_first_key, spk_man->GetTimeFirstKey());\n+        }\n+        if (time_first_key) {\n+            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(time_first_key - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n                 rescan_height = *first_block;\n             }\n         }"
      },
      {
        "sha": "3ff7b1097a0cb24755f6daa2b18630d06f6665bf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
        "patch": "@@ -537,8 +537,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n+        auto spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+        if (spk_man) {\n+            LOCK(spk_man->cs_KeyStore);\n+            spk_man->UpdateTimeFirstKey(1);\n+        }\n+    }\n \n     for (const uint256& hash : wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet.at(hash));"
      }
    ]
  },
  {
    "sha": "e5b834e8eee47264b7c0faaa3557cb302e624076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWI4MzRlOGVlZTQ3MjY0YjdjMGZhYWEzNTU3Y2IzMDJlNjI0MDc2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T21:24:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan for in wallet_tests",
      "tree": {
        "sha": "d0ed467e0b706ecb5199a1e016b4d8c0eff5697c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0ed467e0b706ecb5199a1e016b4d8c0eff5697c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5b834e8eee47264b7c0faaa3557cb302e624076",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5b834e8eee47264b7c0faaa3557cb302e624076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5b834e8eee47264b7c0faaa3557cb302e624076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5b834e8eee47264b7c0faaa3557cb302e624076/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 40,
      "deletions": 27
    },
    "files": [
      {
        "sha": "49589a6f46a09256e0b3a61081c69f4373940ed2",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b834e8eee47264b7c0faaa3557cb302e624076/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b834e8eee47264b7c0faaa3557cb302e624076/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=e5b834e8eee47264b7c0faaa3557cb302e624076",
        "patch": "@@ -56,6 +56,7 @@ void TestAddAddressesToSendBook()\n     TestChain100Setup test;\n     auto chain = interfaces::MakeChain();\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    wallet->SetupLegacyScriptPubKeyMan();\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "814c49155129a377341582ba41757b0974eab51c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b834e8eee47264b7c0faaa3557cb302e624076/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b834e8eee47264b7c0faaa3557cb302e624076/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=e5b834e8eee47264b7c0faaa3557cb302e624076",
        "patch": "@@ -138,9 +138,10 @@ void TestGUI()\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {\n-        LOCK(wallet->cs_wallet);\n+        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n+        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n-        wallet->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n+        spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n     {\n         auto locked_chain = wallet->chain().lock();"
      },
      {
        "sha": "f1e6d1f641cd0c6878634ae826b14c2cd6510abc",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b834e8eee47264b7c0faaa3557cb302e624076/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b834e8eee47264b7c0faaa3557cb302e624076/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=e5b834e8eee47264b7c0faaa3557cb302e624076",
        "patch": "@@ -271,6 +271,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n     bool bnb_used;\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)\n@@ -550,6 +551,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     bool bnb_used;\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     empty_wallet();\n \n@@ -568,6 +570,8 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value\n BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n+    testWallet.SetupLegacyScriptPubKeyMan();\n+\n     // Random generator stuff\n     std::default_random_engine generator;\n     std::exponential_distribution<double> distribution (100);"
      },
      {
        "sha": "a47f4c87613ae4ee654cbaad6b6cd65bec54f2cf",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 25,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5b834e8eee47264b7c0faaa3557cb302e624076/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5b834e8eee47264b7c0faaa3557cb302e624076/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e5b834e8eee47264b7c0faaa3557cb302e624076",
        "patch": "@@ -28,8 +28,9 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n static void AddKey(CWallet& wallet, const CKey& key)\n {\n-    LOCK(wallet.cs_wallet);\n-    wallet.AddKeyPubKey(key, key.GetPubKey());\n+    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n+    spk_man->AddKeyPubKey(key, key.GetPubKey());\n }\n \n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n@@ -132,6 +133,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // after.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        wallet->SetupLegacyScriptPubKeyMan();\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -195,9 +197,10 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(wallet->cs_wallet);\n-        wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n-        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n+        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n+        spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n+        spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -211,6 +214,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // were scanned, and no prior blocks were scanned.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        wallet->SetupLegacyScriptPubKeyMan();\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -243,11 +247,12 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     auto chain = interfaces::MakeChain();\n \n     CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n-    LOCK(wallet.cs_wallet);\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n \n     wtx.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n \n@@ -258,7 +263,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     // Invalidate the cached value, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n-    wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+    BOOST_CHECK(spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey()));\n     BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(*locked_chain), 50*COIN);\n }\n \n@@ -338,37 +343,37 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n }\n \n-// Test some watch-only wallet methods by the procedure of loading (LoadWatchOnly),\n+// Test some watch-only LegacyScriptPubKeyMan methods by the procedure of loading (LoadWatchOnly),\n // checking (HaveWatchOnly), getting (GetWatchPubKey) and removing (RemoveWatchOnly) a\n // given PubKey, resp. its corresponding P2PK Script. Results of the the impact on\n // the address -> PubKey map is dependent on whether the PubKey is a point on the curve\n-static void TestWatchOnlyPubKey(CWallet& wallet, const CPubKey& add_pubkey)\n+static void TestWatchOnlyPubKey(LegacyScriptPubKeyMan* spk_man, const CPubKey& add_pubkey)\n {\n     CScript p2pk = GetScriptForRawPubKey(add_pubkey);\n     CKeyID add_address = add_pubkey.GetID();\n     CPubKey found_pubkey;\n-    LOCK(wallet.cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n \n     // all Scripts (i.e. also all PubKeys) are added to the general watch-only set\n-    BOOST_CHECK(!wallet.HaveWatchOnly(p2pk));\n-    wallet.LoadWatchOnly(p2pk);\n-    BOOST_CHECK(wallet.HaveWatchOnly(p2pk));\n+    BOOST_CHECK(!spk_man->HaveWatchOnly(p2pk));\n+    spk_man->LoadWatchOnly(p2pk);\n+    BOOST_CHECK(spk_man->HaveWatchOnly(p2pk));\n \n     // only PubKeys on the curve shall be added to the watch-only address -> PubKey map\n     bool is_pubkey_fully_valid = add_pubkey.IsFullyValid();\n     if (is_pubkey_fully_valid) {\n-        BOOST_CHECK(wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(spk_man->GetWatchPubKey(add_address, found_pubkey));\n         BOOST_CHECK(found_pubkey == add_pubkey);\n     } else {\n-        BOOST_CHECK(!wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(!spk_man->GetWatchPubKey(add_address, found_pubkey));\n         BOOST_CHECK(found_pubkey == CPubKey()); // passed key is unchanged\n     }\n \n-    wallet.RemoveWatchOnly(p2pk);\n-    BOOST_CHECK(!wallet.HaveWatchOnly(p2pk));\n+    spk_man->RemoveWatchOnly(p2pk);\n+    BOOST_CHECK(!spk_man->HaveWatchOnly(p2pk));\n \n     if (is_pubkey_fully_valid) {\n-        BOOST_CHECK(!wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(!spk_man->GetWatchPubKey(add_address, found_pubkey));\n         BOOST_CHECK(found_pubkey == add_pubkey); // passed key is unchanged\n     }\n }\n@@ -383,37 +388,38 @@ static void PollutePubKey(CPubKey& pubkey)\n     assert(pubkey.IsValid());\n }\n \n-// Test watch-only wallet logic for PubKeys\n+// Test watch-only logic for PubKeys\n BOOST_AUTO_TEST_CASE(WatchOnlyPubKeys)\n {\n     CKey key;\n     CPubKey pubkey;\n+    LegacyScriptPubKeyMan* spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n-    BOOST_CHECK(!m_wallet.HaveWatchOnly());\n+    BOOST_CHECK(!spk_man->HaveWatchOnly());\n \n     // uncompressed valid PubKey\n     key.MakeNewKey(false);\n     pubkey = key.GetPubKey();\n     assert(!pubkey.IsCompressed());\n-    TestWatchOnlyPubKey(m_wallet, pubkey);\n+    TestWatchOnlyPubKey(spk_man, pubkey);\n \n     // uncompressed cryptographically invalid PubKey\n     PollutePubKey(pubkey);\n-    TestWatchOnlyPubKey(m_wallet, pubkey);\n+    TestWatchOnlyPubKey(spk_man, pubkey);\n \n     // compressed valid PubKey\n     key.MakeNewKey(true);\n     pubkey = key.GetPubKey();\n     assert(pubkey.IsCompressed());\n-    TestWatchOnlyPubKey(m_wallet, pubkey);\n+    TestWatchOnlyPubKey(spk_man, pubkey);\n \n     // compressed cryptographically invalid PubKey\n     PollutePubKey(pubkey);\n-    TestWatchOnlyPubKey(m_wallet, pubkey);\n+    TestWatchOnlyPubKey(spk_man, pubkey);\n \n     // invalid empty PubKey\n     pubkey = CPubKey();\n-    TestWatchOnlyPubKey(m_wallet, pubkey);\n+    TestWatchOnlyPubKey(spk_man, pubkey);\n }\n \n class ListCoinsTestingSetup : public TestChain100Setup\n@@ -542,6 +548,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));"
      }
    ]
  },
  {
    "sha": "0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzFhM2NkMGNlMjVhY2UyYTdhYTgxYzVlYTJjOWNjZDg5ZmE0YjBh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:04:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet",
      "tree": {
        "sha": "af435b9276dabc18064e32b70aa3ff2593535671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af435b9276dabc18064e32b70aa3ff2593535671"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5b834e8eee47264b7c0faaa3557cb302e624076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5b834e8eee47264b7c0faaa3557cb302e624076",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5b834e8eee47264b7c0faaa3557cb302e624076"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 24,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ebe177b1479f044e1fab3b7455ec7edd7ad9ece3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
        "patch": "@@ -67,11 +67,11 @@ static std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-static bool GetWalletAddressesForKey(CWallet* const pwallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static bool GetWalletAddressesForKey(LegacyScriptPubKeyMan* spk_man, CWallet* const pwallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     bool fLabelFound = false;\n     CKey key;\n-    pwallet->GetKey(keyid, key);\n+    spk_man->GetKey(keyid, key);\n     for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n         if (pwallet->mapAddressBook.count(dest)) {\n             if (!strAddr.empty()) {\n@@ -730,7 +730,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man->cs_KeyStore);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -739,12 +739,12 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n-    auto keyid = GetKeyForDestination(*pwallet, dest);\n+    auto keyid = GetKeyForDestination(*spk_man, dest);\n     if (keyid.IsNull()) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     }\n     CKey vchSecret;\n-    if (!pwallet->GetKey(keyid, vchSecret)) {\n+    if (!spk_man->GetKey(keyid, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n     return EncodeSecret(vchSecret);\n@@ -784,7 +784,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man->cs_KeyStore);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -806,10 +806,10 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n     std::map<CKeyID, int64_t> mapKeyBirth;\n-    const std::map<CKeyID, int64_t>& mapKeyPool = pwallet->GetAllReserveKeys();\n+    const std::map<CKeyID, int64_t>& mapKeyPool = spk_man->GetAllReserveKeys();\n     pwallet->GetKeyBirthTimes(*locked_chain, mapKeyBirth);\n \n-    std::set<CScriptID> scripts = pwallet->GetCScripts();\n+    std::set<CScriptID> scripts = spk_man->GetCScripts();\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n@@ -828,11 +828,11 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD\n-    CKeyID seed_id = pwallet->GetHDChain().seed_id;\n+    CKeyID seed_id = spk_man->GetHDChain().seed_id;\n     if (!seed_id.IsNull())\n     {\n         CKey seed;\n-        if (pwallet->GetKey(seed_id, seed)) {\n+        if (spk_man->GetKey(seed_id, seed)) {\n             CExtKey masterKey;\n             masterKey.SetSeed(seed.begin(), seed.size());\n \n@@ -845,20 +845,20 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string strAddr;\n         std::string strLabel;\n         CKey key;\n-        if (pwallet->GetKey(keyid, key)) {\n+        if (spk_man->GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n-            if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n+            if (GetWalletAddressesForKey(spk_man, pwallet, keyid, strAddr, strLabel)) {\n                file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == seed_id) {\n                 file << \"hdseed=1\";\n             } else if (mapKeyPool.count(keyid)) {\n                 file << \"reserve=1\";\n-            } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"s\") {\n+            } else if (spk_man->mapKeyMetadata[keyid].hdKeypath == \"s\") {\n                 file << \"inactivehdseed=1\";\n             } else {\n                 file << \"change=1\";\n             }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].has_key_origin ? \" hdkeypath=\"+WriteHDKeypath(pwallet->mapKeyMetadata[keyid].key_origin.path) : \"\"));\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (spk_man->mapKeyMetadata[keyid].has_key_origin ? \" hdkeypath=\"+WriteHDKeypath(spk_man->mapKeyMetadata[keyid].key_origin.path) : \"\"));\n         }\n     }\n     file << \"\\n\";\n@@ -867,11 +867,11 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string create_time = \"0\";\n         std::string address = EncodeDestination(ScriptHash(scriptid));\n         // get birth times for scripts with metadata\n-        auto it = pwallet->m_script_metadata.find(scriptid);\n-        if (it != pwallet->m_script_metadata.end()) {\n+        auto it = spk_man->m_script_metadata.find(scriptid);\n+        if (it != spk_man->m_script_metadata.end()) {\n             create_time = FormatISO8601DateTime(it->second.nCreateTime);\n         }\n-        if(pwallet->GetCScript(scriptid, script)) {\n+        if(spk_man->GetCScript(scriptid, script)) {\n             file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);\n             file << strprintf(\" # addr=%s\\n\", address);\n         }"
      },
      {
        "sha": "a2f0724d57075cad308bc06c9eecde46cff7a9ca",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
        "patch": "@@ -3913,8 +3913,12 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     AssertLockHeld(cs_wallet);\n     mapKeyBirth.clear();\n \n+    LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+    assert(spk_man != nullptr);\n+    LOCK(spk_man->cs_KeyStore);\n+\n     // get birth times for keys with metadata\n-    for (const auto& entry : mapKeyMetadata) {\n+    for (const auto& entry : spk_man->mapKeyMetadata) {\n         if (entry.second.nCreateTime) {\n             mapKeyBirth[entry.first] = entry.second.nCreateTime;\n         }\n@@ -3924,7 +3928,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     const Optional<int> tip_height = locked_chain.getHeight();\n     const int max_height = tip_height && *tip_height > 144 ? *tip_height - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n     std::map<CKeyID, int> mapKeyFirstBlock;\n-    for (const CKeyID &keyid : GetKeys()) {\n+    for (const CKeyID &keyid : spk_man->GetKeys()) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = max_height;\n     }\n@@ -3941,7 +3945,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n             // ... which are already in a block\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n-                for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n+                for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *spk_man)) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, int>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && *height < rit->second)"
      }
    ]
  },
  {
    "sha": "01fa6dc1a5447694872301a86541a81cd59e0af8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWZhNmRjMWE1NDQ3Njk0ODcyMzAxYTg2NTQxYTgxY2Q1OWUwYWY4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:35:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\n\nCo-authored-by: Hugo Nguyen <hugh.hn@gmail.com>",
      "tree": {
        "sha": "b5784eed9cf3db433a27521bdf2f50488751d38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5784eed9cf3db433a27521bdf2f50488751d38a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fa6dc1a5447694872301a86541a81cd59e0af8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fa6dc1a5447694872301a86541a81cd59e0af8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01fa6dc1a5447694872301a86541a81cd59e0af8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fa6dc1a5447694872301a86541a81cd59e0af8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "575249c65b45ab89a0fe556df37dfb85404ff1c7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01fa6dc1a5447694872301a86541a81cd59e0af8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01fa6dc1a5447694872301a86541a81cd59e0af8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=01fa6dc1a5447694872301a86541a81cd59e0af8",
        "patch": "@@ -1645,18 +1645,14 @@ bool CWallet::CanGenerateKeys()\n bool CWallet::CanGetAddresses(bool internal)\n {\n     LOCK(cs_wallet);\n-    // Check if the keypool has keys\n-    bool keypool_has_keys;\n-    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        keypool_has_keys = setInternalKeyPool.size() > 0;\n-    } else {\n-        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n-    }\n-    // If the keypool doesn't have keys, check if we can generate them\n-    if (!keypool_has_keys) {\n-        return CanGenerateKeys();\n+    if (m_spk_managers.empty()) return false;\n+    for (OutputType t : OUTPUT_TYPES) {\n+        auto spk_man = GetScriptPubKeyMan(t, internal);\n+        if (spk_man && spk_man->CanGetAddresses(internal)) {\n+            return true;\n+        }\n     }\n-    return keypool_has_keys;\n+    return false;\n }\n \n void CWallet::SetWalletFlag(uint64_t flags)"
      }
    ]
  },
  {
    "sha": "77417b4360a7d7105fc56d02671e69e943a99365",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzQxN2I0MzYwYTdkNzEwNWZjNTZkMDI2NzFlNjllOTQzYTk5MzY1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:44:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Fetch the correct SigningProvider for signing PSBTs",
      "tree": {
        "sha": "9301b93b46ef73000451f8ade6043a8e8662a032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9301b93b46ef73000451f8ade6043a8e8662a032"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77417b4360a7d7105fc56d02671e69e943a99365",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77417b4360a7d7105fc56d02671e69e943a99365",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77417b4360a7d7105fc56d02671e69e943a99365",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77417b4360a7d7105fc56d02671e69e943a99365/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01fa6dc1a5447694872301a86541a81cd59e0af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fa6dc1a5447694872301a86541a81cd59e0af8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01fa6dc1a5447694872301a86541a81cd59e0af8"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "af65fee53b272e572828f08a9048d7233d890b50",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77417b4360a7d7105fc56d02671e69e943a99365/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77417b4360a7d7105fc56d02671e69e943a99365/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=77417b4360a7d7105fc56d02671e69e943a99365",
        "patch": "@@ -39,12 +39,33 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n             return TransactionError::SIGHASH_MISMATCH;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (input.non_witness_utxo) {\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script, sigdata);\n+        if (!provider) {\n+            continue;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n     for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        UpdatePSBTOutput(HidingSigningProvider(pwallet, true, !bip32derivs), psbtx, i);\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(out.scriptPubKey);\n+        if (provider) {\n+            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        }\n     }\n \n     return TransactionError::OK;"
      }
    ]
  },
  {
    "sha": "ecd7054f3eaf7b75904df90b37648646ff3109a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Q3MDU0ZjNlYWY3Yjc1OTA0ZGY5MGIzNzY0ODY0NmZmMzEwOWE3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:36:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan in test util",
      "tree": {
        "sha": "8dae280f1618dd089cd5b6e0819ecb02e53c4113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dae280f1618dd089cd5b6e0819ecb02e53c4113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd7054f3eaf7b75904df90b37648646ff3109a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77417b4360a7d7105fc56d02671e69e943a99365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77417b4360a7d7105fc56d02671e69e943a99365",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77417b4360a7d7105fc56d02671e69e943a99365"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "89816f3e2897b8e532db2ee0bc258633b2e67d49",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd7054f3eaf7b75904df90b37648646ff3109a7/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd7054f3eaf7b75904df90b37648646ff3109a7/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=ecd7054f3eaf7b75904df90b37648646ff3109a7",
        "patch": "@@ -32,13 +32,14 @@ std::string getnewaddress(CWallet& w)\n \n void importaddress(CWallet& wallet, const std::string& address)\n {\n-    LOCK(wallet.cs_wallet);\n+    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n     const auto dest = DecodeDestination(address);\n     assert(IsValidDestination(dest));\n     const auto script = GetScriptForDestination(dest);\n     wallet.MarkDirty();\n-    assert(!wallet.HaveWatchOnly(script));\n-    if (!wallet.AddWatchOnly(script, 0 /* nCreateTime */)) assert(false);\n+    assert(!spk_man->HaveWatchOnly(script));\n+    if (!spk_man->AddWatchOnly(script, 0 /* nCreateTime */)) assert(false);\n     wallet.SetAddressBook(dest, /* label */ \"\", \"receive\");\n }\n #endif // ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "3cb41d78f8974be27e530809fd96b25e5bf92b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2I0MWQ3OGY4OTc0YmUyN2U1MzA4MDlmZDk2YjI1ZTViZjkyYjk0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:37:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet",
      "tree": {
        "sha": "70ed4cb3583da47c07b5ed31607d0347f3437f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ed4cb3583da47c07b5ed31607d0347f3437f2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb41d78f8974be27e530809fd96b25e5bf92b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecd7054f3eaf7b75904df90b37648646ff3109a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd7054f3eaf7b75904df90b37648646ff3109a7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "88504a93de522498d7532566a13f16a66753b172",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb41d78f8974be27e530809fd96b25e5bf92b94/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb41d78f8974be27e530809fd96b25e5bf92b94/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3cb41d78f8974be27e530809fd96b25e5bf92b94",
        "patch": "@@ -2400,7 +2400,8 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         }\n         balances.pushKV(\"mine\", balances_mine);\n     }\n-    if (wallet.HaveWatchOnly()) {\n+    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    if (spk_man && spk_man->HaveWatchOnly()) {\n         UniValue balances_watchonly{UniValue::VOBJ};\n         balances_watchonly.pushKV(\"trusted\", ValueFromAmount(bal.m_watchonly_trusted));\n         balances_watchonly.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_watchonly_untrusted_pending));"
      },
      {
        "sha": "3078faf0351fe0db1f8eb08c3e529ea6fbd27a99",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb41d78f8974be27e530809fd96b25e5bf92b94/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb41d78f8974be27e530809fd96b25e5bf92b94/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3cb41d78f8974be27e530809fd96b25e5bf92b94",
        "patch": "@@ -211,9 +211,12 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n+            {\n+                LOCK(wallet->cs_wallet);\n+                for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n+                    spk_man->SetupGeneration();\n+                }\n+            }\n \n             // Relock the wallet\n             wallet->Lock();"
      }
    ]
  },
  {
    "sha": "f86100c8bf20322392629fa24ecd8b45b03a7c6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODYxMDBjOGJmMjAzMjIzOTI2MjlmYTI0ZWNkOGI0NWIwM2E3YzZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T03:49:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Have getPubKey and getPrivKey use SigningProvider",
      "tree": {
        "sha": "752409a2a5982bd92b993f6ac73f2013f1a00201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/752409a2a5982bd92b993f6ac73f2013f1a00201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cb41d78f8974be27e530809fd96b25e5bf92b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb41d78f8974be27e530809fd96b25e5bf92b94"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 29,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ce531869b83634875195b0b74b9a03363580c638",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "patch": "@@ -118,10 +118,31 @@ class WalletImpl : public Wallet\n         std::string error;\n         return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n-    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n-    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n+    bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n+    {\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetPubKey(address, pub_key);\n+        }\n+        return false;\n+    }\n+    bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n+    {\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetKey(address, key);\n+        }\n+        return false;\n+    }\n     bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n-    bool haveWatchOnly() override { return m_wallet->HaveWatchOnly(); };\n+    bool haveWatchOnly() override\n+    {\n+        auto spk_man = m_wallet->GetLegacyScriptPubKeyMan();\n+        if (spk_man) {\n+            return spk_man->HaveWatchOnly();\n+        }\n+        return false;\n+    };\n     bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n     {\n         return m_wallet->SetAddressBook(dest, name, purpose);\n@@ -349,7 +370,7 @@ class WalletImpl : public Wallet\n         result.balance = bal.m_mine_trusted;\n         result.unconfirmed_balance = bal.m_mine_untrusted_pending;\n         result.immature_balance = bal.m_mine_immature;\n-        result.have_watch_only = m_wallet->HaveWatchOnly();\n+        result.have_watch_only = haveWatchOnly();\n         if (result.have_watch_only) {\n             result.watch_only_balance = bal.m_watchonly_trusted;\n             result.unconfirmed_watch_only_balance = bal.m_watchonly_untrusted_pending;"
      },
      {
        "sha": "0aec747b980fbf1bc3edd66599c6d5bf840a4478",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "patch": "@@ -81,10 +81,10 @@ class Wallet\n     virtual bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;\n \n     //! Get private key.\n-    virtual bool getPrivKey(const CKeyID& address, CKey& key) = 0;\n+    virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n \n     //! Return whether wallet has private key.\n     virtual bool isSpendable(const CTxDestination& dest) = 0;"
      },
      {
        "sha": "3302dde4ed1431c5997ae60e16dc2b9aa0fa1fa5",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "patch": "@@ -468,7 +468,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CPubKey pubkey;\n             PKHash *pkhash = boost::get<PKHash>(&address);\n-            if (pkhash && model->wallet().getPubKey(CKeyID(*pkhash), pubkey))\n+            if (pkhash && model->wallet().getPubKey(out.txout.scriptPubKey, CKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n             }"
      },
      {
        "sha": "9d250bcb8334d3e4cf476a469eabe55f159369cf",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f86100c8bf20322392629fa24ecd8b45b03a7c6a/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "patch": "@@ -136,7 +136,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!model->wallet().getPrivKey(CKeyID(*pkhash), key))\n+    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      }
    ]
  },
  {
    "sha": "9c452b0e86dd6086926561d73b89cb0823f31e8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzQ1MmIwZTg2ZGQ2MDg2OTI2NTYxZDczYjg5Y2IwODIzZjMxZThj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-29T00:06:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "message": "[ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet",
      "tree": {
        "sha": "32d12334df7b73161637620a543019255fb71941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32d12334df7b73161637620a543019255fb71941"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c452b0e86dd6086926561d73b89cb0823f31e8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f86100c8bf20322392629fa24ecd8b45b03a7c6a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03d7b10d2984cca8f97c6de504f977a825480de0",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c452b0e86dd6086926561d73b89cb0823f31e8c/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c452b0e86dd6086926561d73b89cb0823f31e8c/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=9c452b0e86dd6086926561d73b89cb0823f31e8c",
        "patch": "@@ -29,7 +29,8 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n static void CoinSelection(benchmark::State& state)\n {\n     auto chain = interfaces::MakeChain();\n-    const CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet.SetupLegacyScriptPubKeyMan();\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n \n@@ -61,7 +62,7 @@ static void CoinSelection(benchmark::State& state)\n \n typedef std::set<CInputCoin> CoinSet;\n static auto testChain = interfaces::MakeChain();\n-static const CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n@@ -90,6 +91,7 @@ static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n static void BnBExhaustion(benchmark::State& state)\n {\n     // Setup\n+    testWallet.SetupLegacyScriptPubKeyMan();\n     std::vector<OutputGroup> utxo_pool;\n     CoinSet selection;\n     CAmount value_ret = 0;"
      },
      {
        "sha": "e79b30e60b34eddef1401423441e8769d0beaad2",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c452b0e86dd6086926561d73b89cb0823f31e8c/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c452b0e86dd6086926561d73b89cb0823f31e8c/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=9c452b0e86dd6086926561d73b89cb0823f31e8c",
        "patch": "@@ -16,6 +16,7 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain();\n     CWallet wallet{chain.get(), WalletLocation(), WalletDatabase::CreateMock()};\n     {\n+        wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;\n         if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n         wallet.handleNotifications();"
      }
    ]
  },
  {
    "sha": "c37be157851666e35f42bd7520af51fb1dd06877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzdiZTE1Nzg1MTY2NmUzNWY0MmJkNzUyMGFmNTFmYjFkZDA2ODc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T22:19:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:36:26Z"
      },
      "message": "Remove unused functions and switch CWallet to use ScriptPubKeyMan",
      "tree": {
        "sha": "3d8a745ae36f7a6a3deb4d7cd388e9f164c73637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d8a745ae36f7a6a3deb4d7cd388e9f164c73637"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c37be157851666e35f42bd7520af51fb1dd06877",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37be157851666e35f42bd7520af51fb1dd06877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c37be157851666e35f42bd7520af51fb1dd06877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37be157851666e35f42bd7520af51fb1dd06877/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c452b0e86dd6086926561d73b89cb0823f31e8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c452b0e86dd6086926561d73b89cb0823f31e8c"
      }
    ],
    "stats": {
      "total": 984,
      "additions": 3,
      "deletions": 981
    },
    "files": [
      {
        "sha": "fabdb6e0c02f7288b52753718e1561a5323e2b1b",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37be157851666e35f42bd7520af51fb1dd06877/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37be157851666e35f42bd7520af51fb1dd06877/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=c37be157851666e35f42bd7520af51fb1dd06877",
        "patch": "@@ -181,7 +181,6 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet->LearnRelatedScripts(key, type); }\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n         LOCK(m_wallet->cs_wallet);"
      },
      {
        "sha": "755632ef70945a555cd3ce9027243fa7edb3e465",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37be157851666e35f42bd7520af51fb1dd06877/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37be157851666e35f42bd7520af51fb1dd06877/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=c37be157851666e35f42bd7520af51fb1dd06877",
        "patch": "@@ -107,10 +107,6 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add scripts to key store so old so software versions opening the wallet\n-    //! database can detect payments to newer address types.\n-    virtual void learnRelatedScripts(const CPubKey& key, OutputType type) = 0;\n-\n     //! Add dest data.\n     virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n "
      },
      {
        "sha": "e8adbb082ecf6054ee1cf77adceceeb50fef072f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 790,
        "changes": 790,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c37be157851666e35f42bd7520af51fb1dd06877",
        "patch": "@@ -228,8 +228,6 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     return WalletCreationStatus::SUCCESS;\n }\n \n-const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n-\n const uint256 CWalletTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n \n /** @defgroup mapWallet\n@@ -251,176 +249,6 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n     return &(it->second);\n }\n \n-CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n-{\n-    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n-    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n-    AssertLockHeld(cs_wallet);\n-    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n-\n-    CKey secret;\n-\n-    // Create new metadata\n-    int64_t nCreationTime = GetTime();\n-    CKeyMetadata metadata(nCreationTime);\n-\n-    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n-    if (IsHDEnabled()) {\n-        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n-    } else {\n-        secret.MakeNewKey(fCompressed);\n-    }\n-\n-    // Compressed public keys were introduced in version 0.6.0\n-    if (fCompressed) {\n-        SetMinVersion(FEATURE_COMPRPUBKEY);\n-    }\n-\n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n-\n-    mapKeyMetadata[pubkey.GetID()] = metadata;\n-    UpdateTimeFirstKey(nCreationTime);\n-\n-    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n-    }\n-    return pubkey;\n-}\n-\n-void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n-{\n-    // for now we use a fixed keypath scheme of m/0'/0'/k\n-    CKey seed;                     //seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-    // try to get the seed\n-    if (!GetKey(hdChain.seed_id, seed))\n-        throw std::runtime_error(std::string(__func__) + \": seed not found\");\n-\n-    masterKey.SetSeed(seed.begin(), seed.size());\n-\n-    // derive m/0'\n-    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n-    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-    // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n-    assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n-    accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT+(internal ? 1 : 0));\n-\n-    // derive child key at next index, skip keys already known to the wallet\n-    do {\n-        // always derive hardened keys\n-        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n-        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n-        if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n-            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nInternalChainCounter++;\n-        }\n-        else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n-            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nExternalChainCounter++;\n-        }\n-    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n-    secret = childKey.key;\n-    metadata.hd_seed_id = hdChain.seed_id;\n-    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n-    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n-    metadata.has_key_origin = true;\n-    // update the chain model in the database\n-    if (!batch.WriteHDChain(hdChain))\n-        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n-}\n-\n-bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n-{\n-    AssertLockHeld(cs_wallet);\n-\n-    // Make sure we aren't adding private keys to private key disabled wallets\n-    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n-\n-    // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n-    // which is overridden below.  To avoid flushes, the database handle is\n-    // tunneled through to it.\n-    bool needsDB = !encrypted_batch;\n-    if (needsDB) {\n-        encrypted_batch = &batch;\n-    }\n-    if (!AddKeyPubKeyInner(secret, pubkey)) {\n-        if (needsDB) encrypted_batch = nullptr;\n-        return false;\n-    }\n-    if (needsDB) encrypted_batch = nullptr;\n-\n-    // check if we need to remove from watch-only\n-    CScript script;\n-    script = GetScriptForDestination(PKHash(pubkey));\n-    if (HaveWatchOnly(script)) {\n-        RemoveWatchOnly(script);\n-    }\n-    script = GetScriptForRawPubKey(pubkey);\n-    if (HaveWatchOnly(script)) {\n-        RemoveWatchOnly(script);\n-    }\n-\n-    if (!IsCrypted()) {\n-        return batch.WriteKey(pubkey,\n-                                                 secret.GetPrivKey(),\n-                                                 mapKeyMetadata[pubkey.GetID()]);\n-    }\n-    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n-    return true;\n-}\n-\n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n-{\n-    WalletBatch batch(*database);\n-    return CWallet::AddKeyPubKeyWithDB(batch, secret, pubkey);\n-}\n-\n-bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n-                            const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n-        return false;\n-    {\n-        LOCK(cs_wallet);\n-        if (encrypted_batch)\n-            return encrypted_batch->WriteCryptedKey(vchPubKey,\n-                                                        vchCryptedSecret,\n-                                                        mapKeyMetadata[vchPubKey.GetID()]);\n-        else\n-            return WalletBatch(*database).WriteCryptedKey(vchPubKey,\n-                                                            vchCryptedSecret,\n-                                                            mapKeyMetadata[vchPubKey.GetID()]);\n-    }\n-}\n-\n-void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n-{\n-    AssertLockHeld(cs_wallet);\n-    UpdateTimeFirstKey(meta.nCreateTime);\n-    mapKeyMetadata[keyID] = meta;\n-}\n-\n-void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n-{\n-    AssertLockHeld(cs_wallet);\n-    UpdateTimeFirstKey(meta.nCreateTime);\n-    m_script_metadata[script_id] = meta;\n-}\n-\n void CWallet::UpgradeKeyMetadata()\n {\n     for (const auto& spk_man_pair : m_spk_managers) {\n@@ -429,149 +257,6 @@ void CWallet::UpgradeKeyMetadata()\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n-bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n-}\n-\n-/**\n- * Update wallet first key creation time. This should be called whenever keys\n- * are added to the wallet, with the oldest key creation time.\n- */\n-void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n-{\n-    AssertLockHeld(cs_wallet);\n-    if (nCreateTime <= 1) {\n-        // Cannot determine birthday information, so set the wallet birthday to\n-        // the beginning of time.\n-        nTimeFirstKey = 1;\n-    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n-        nTimeFirstKey = nCreateTime;\n-    }\n-}\n-\n-bool CWallet::AddCScript(const CScript& redeemScript)\n-{\n-    WalletBatch batch(*database);\n-    return AddCScriptWithDB(batch, redeemScript);\n-}\n-\n-bool CWallet::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n-{\n-    if (!FillableSigningProvider::AddCScript(redeemScript))\n-        return false;\n-    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n-        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CWallet::LoadCScript(const CScript& redeemScript)\n-{\n-    /* A sanity check was added in pull #3843 to avoid adding redeemScripts\n-     * that never can be redeemed. However, old wallets may still contain\n-     * these. Do not add them to the wallet and warn. */\n-    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-    {\n-        std::string strAddr = EncodeDestination(ScriptHash(redeemScript));\n-        WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n-        return true;\n-    }\n-\n-    return FillableSigningProvider::AddCScript(redeemScript);\n-}\n-\n-static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n-{\n-    std::vector<std::vector<unsigned char>> solutions;\n-    return Solver(dest, solutions) == TX_PUBKEY &&\n-        (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n-}\n-\n-bool CWallet::AddWatchOnlyInMem(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.insert(dest);\n-    CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey)) {\n-        mapWatchKeys[pubKey.GetID()] = pubKey;\n-        ImplicitlyLearnRelatedKeyScripts(pubKey);\n-    }\n-    return true;\n-}\n-\n-bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n-{\n-    if (!AddWatchOnlyInMem(dest))\n-        return false;\n-    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n-    UpdateTimeFirstKey(meta.nCreateTime);\n-    NotifyWatchonlyChanged(true);\n-    if (batch.WriteWatchOnly(dest, meta)) {\n-        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time)\n-{\n-    m_script_metadata[CScriptID(dest)].nCreateTime = create_time;\n-    return AddWatchOnlyWithDB(batch, dest);\n-}\n-\n-bool CWallet::AddWatchOnly(const CScript& dest)\n-{\n-    WalletBatch batch(*database);\n-    return AddWatchOnlyWithDB(batch, dest);\n-}\n-\n-bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n-{\n-    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n-    return AddWatchOnly(dest);\n-}\n-\n-bool CWallet::RemoveWatchOnly(const CScript &dest)\n-{\n-    AssertLockHeld(cs_wallet);\n-    {\n-        LOCK(cs_KeyStore);\n-        setWatchOnly.erase(dest);\n-        CPubKey pubKey;\n-        if (ExtractPubKey(dest, pubKey)) {\n-            mapWatchKeys.erase(pubKey.GetID());\n-        }\n-        // Related CScripts are not removed; having superfluous scripts around is\n-        // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n-    }\n-\n-    if (!HaveWatchOnly())\n-        NotifyWatchonlyChanged(false);\n-    if (!WalletBatch(*database).EraseWatchOnly(dest))\n-        return false;\n-\n-    return true;\n-}\n-\n-bool CWallet::LoadWatchOnly(const CScript &dest)\n-{\n-    return AddWatchOnlyInMem(dest);\n-}\n-\n-bool CWallet::HaveWatchOnly(const CScript &dest) const\n-{\n-    LOCK(cs_KeyStore);\n-    return setWatchOnly.count(dest) > 0;\n-}\n-\n-bool CWallet::HaveWatchOnly() const\n-{\n-    LOCK(cs_KeyStore);\n-    return (!setWatchOnly.empty());\n-}\n-\n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n@@ -1570,65 +1255,6 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n-CPubKey CWallet::GenerateNewSeed()\n-{\n-    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n-    CKey key;\n-    key.MakeNewKey(true);\n-    return DeriveNewSeed(key);\n-}\n-\n-CPubKey CWallet::DeriveNewSeed(const CKey& key)\n-{\n-    int64_t nCreationTime = GetTime();\n-    CKeyMetadata metadata(nCreationTime);\n-\n-    // calculate the seed\n-    CPubKey seed = key.GetPubKey();\n-    assert(key.VerifyPubKey(seed));\n-\n-    // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n-    metadata.hdKeypath     = \"s\";\n-    metadata.has_key_origin = false;\n-    metadata.hd_seed_id = seed.GetID();\n-\n-    {\n-        LOCK(cs_wallet);\n-\n-        // mem store the metadata\n-        mapKeyMetadata[seed.GetID()] = metadata;\n-\n-        // write the key&metadata to the database\n-        if (!AddKeyPubKey(key, seed))\n-            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n-    }\n-\n-    return seed;\n-}\n-\n-void CWallet::SetHDSeed(const CPubKey& seed)\n-{\n-    LOCK(cs_wallet);\n-    // store the keyid (hash160) together with\n-    // the child index counter in the database\n-    // as a hdchain object\n-    CHDChain newHdChain;\n-    newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n-    newHdChain.seed_id = seed.GetID();\n-    SetHDChain(newHdChain, false);\n-    NotifyCanGetAddressesChanged();\n-    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n-}\n-\n-void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n-{\n-    LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(*database).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n-\n-    hdChain = chain;\n-}\n-\n bool CWallet::IsHDEnabled() const\n {\n     bool result = true;\n@@ -1638,13 +1264,6 @@ bool CWallet::IsHDEnabled() const\n     return result;\n }\n \n-bool CWallet::CanGenerateKeys()\n-{\n-    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n-    LOCK(cs_wallet);\n-    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n-}\n-\n bool CWallet::CanGetAddresses(bool internal)\n {\n     LOCK(cs_wallet);\n@@ -3401,44 +3020,6 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     return WalletBatch(*database).EraseName(EncodeDestination(address));\n }\n \n-/**\n- * Mark old keypool keys as used,\n- * and generate all new keys\n- */\n-bool CWallet::NewKeyPool()\n-{\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        return false;\n-    }\n-    {\n-        LOCK(cs_wallet);\n-        WalletBatch batch(*database);\n-\n-        for (const int64_t nIndex : setInternalKeyPool) {\n-            batch.ErasePool(nIndex);\n-        }\n-        setInternalKeyPool.clear();\n-\n-        for (const int64_t nIndex : setExternalKeyPool) {\n-            batch.ErasePool(nIndex);\n-        }\n-        setExternalKeyPool.clear();\n-\n-        for (const int64_t nIndex : set_pre_split_keypool) {\n-            batch.ErasePool(nIndex);\n-        }\n-        set_pre_split_keypool.clear();\n-\n-        m_pool_key_to_index.clear();\n-\n-        if (!TopUpKeyPool()) {\n-            return false;\n-        }\n-        WalletLogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n-    }\n-    return true;\n-}\n-\n size_t CWallet::KeypoolCountExternalKeys()\n {\n     AssertLockHeld(cs_wallet);\n@@ -3462,27 +3043,6 @@ unsigned int CWallet::GetKeyPoolSize() const\n     return count;\n }\n \n-void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n-{\n-    AssertLockHeld(cs_wallet);\n-    if (keypool.m_pre_split) {\n-        set_pre_split_keypool.insert(nIndex);\n-    } else if (keypool.fInternal) {\n-        setInternalKeyPool.insert(nIndex);\n-    } else {\n-        setExternalKeyPool.insert(nIndex);\n-    }\n-    m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n-    m_pool_key_to_index[keypool.vchPubKey.GetID()] = nIndex;\n-\n-    // If no metadata exists yet, create a default with the pool key's\n-    // creation time. Note that this may be overwritten by actually\n-    // stored metadata for that key later, which is fine.\n-    CKeyID keyid = keypool.vchPubKey.GetID();\n-    if (mapKeyMetadata.count(keyid) == 0)\n-        mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n-}\n-\n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n     LOCK(cs_wallet);\n@@ -3496,116 +3056,6 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return res;\n }\n \n-void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n-{\n-    LOCK(cs_wallet);\n-    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n-    int64_t index = ++m_max_keypool_index;\n-    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n-        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n-    }\n-    if (internal) {\n-        setInternalKeyPool.insert(index);\n-    } else {\n-        setExternalKeyPool.insert(index);\n-    }\n-    m_pool_key_to_index[pubkey.GetID()] = index;\n-}\n-\n-bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n-{\n-    nIndex = -1;\n-    keypool.vchPubKey = CPubKey();\n-    {\n-        LOCK(cs_wallet);\n-\n-        TopUpKeyPool();\n-\n-        bool fReturningInternal = fRequestedInternal;\n-        fReturningInternal &= (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-        bool use_split_keypool = set_pre_split_keypool.empty();\n-        std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n-\n-        // Get the oldest key\n-        if (setKeyPool.empty()) {\n-            return false;\n-        }\n-\n-        WalletBatch batch(*database);\n-\n-        auto it = setKeyPool.begin();\n-        nIndex = *it;\n-        setKeyPool.erase(it);\n-        if (!batch.ReadPool(nIndex, keypool)) {\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        }\n-        CPubKey pk;\n-        if (!GetPubKey(keypool.vchPubKey.GetID(), pk)) {\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-        }\n-        // If the key was pre-split keypool, we don't care about what type it is\n-        if (use_split_keypool && keypool.fInternal != fReturningInternal) {\n-            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n-        }\n-        if (!keypool.vchPubKey.IsValid()) {\n-            throw std::runtime_error(std::string(__func__) + \": keypool entry invalid\");\n-        }\n-\n-        m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n-        WalletLogPrintf(\"keypool reserve %d\\n\", nIndex);\n-    }\n-    NotifyCanGetAddressesChanged();\n-    return true;\n-}\n-\n-void CWallet::KeepKey(int64_t nIndex)\n-{\n-    // Remove from key pool\n-    WalletBatch batch(*database);\n-    batch.ErasePool(nIndex);\n-    WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n-}\n-\n-void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n-{\n-    // Return to key pool\n-    {\n-        LOCK(cs_wallet);\n-        if (fInternal) {\n-            setInternalKeyPool.insert(nIndex);\n-        } else if (!set_pre_split_keypool.empty()) {\n-            set_pre_split_keypool.insert(nIndex);\n-        } else {\n-            setExternalKeyPool.insert(nIndex);\n-        }\n-        m_pool_key_to_index[pubkey.GetID()] = nIndex;\n-        NotifyCanGetAddressesChanged();\n-    }\n-    WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n-}\n-\n-bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n-{\n-    if (!CanGetAddresses(internal)) {\n-        return false;\n-    }\n-\n-    CKeyPool keypool;\n-    {\n-        LOCK(cs_wallet);\n-        int64_t nIndex;\n-        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-            if (IsLocked()) return false;\n-            WalletBatch batch(*database);\n-            result = GenerateNewKey(batch, internal);\n-            return true;\n-        }\n-        KeepKey(nIndex);\n-        result = keypool.vchPubKey;\n-    }\n-    return true;\n-}\n-\n bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n {\n     LOCK(cs_wallet);\n@@ -3637,20 +3087,6 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     return true;\n }\n \n-static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n-    if (setKeyPool.empty()) {\n-        return GetTime();\n-    }\n-\n-    CKeyPool keypool;\n-    int64_t nIndex = *(setKeyPool.begin());\n-    if (!batch.ReadPool(nIndex, keypool)) {\n-        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n-    }\n-    assert(keypool.vchPubKey.IsValid());\n-    return keypool.nTime;\n-}\n-\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n@@ -3846,30 +3282,6 @@ void ReserveDestination::ReturnDestination()\n     address = CNoDestination();\n }\n \n-void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n-{\n-    AssertLockHeld(cs_wallet);\n-    bool internal = setInternalKeyPool.count(keypool_id);\n-    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n-    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n-    auto it = setKeyPool->begin();\n-\n-    WalletBatch batch(*database);\n-    while (it != std::end(*setKeyPool)) {\n-        const int64_t& index = *(it);\n-        if (index > keypool_id) break; // set*KeyPool is ordered\n-\n-        CKeyPool keypool;\n-        if (batch.ReadPool(index, keypool)) { //TODO: This should be unnecessary\n-            m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n-        }\n-        LearnAllRelatedScripts(keypool.vchPubKey);\n-        batch.ErasePool(index);\n-        WalletLogPrintf(\"keypool index %d removed\\n\", index);\n-        it = setKeyPool->erase(it);\n-    }\n-}\n-\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet);\n@@ -4069,24 +3481,6 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-void CWallet::MarkPreSplitKeys()\n-{\n-    WalletBatch batch(*database);\n-    for (auto it = setExternalKeyPool.begin(); it != setExternalKeyPool.end();) {\n-        int64_t index = *it;\n-        CKeyPool keypool;\n-        if (!batch.ReadPool(index, keypool)) {\n-            throw std::runtime_error(std::string(__func__) + \": read keypool entry failed\");\n-        }\n-        keypool.m_pre_split = true;\n-        if (!batch.WritePool(index, keypool)) {\n-            throw std::runtime_error(std::string(__func__) + \": writing modified keypool entry failed\");\n-        }\n-        set_pre_split_keypool.insert(index);\n-        it = setExternalKeyPool.erase(it);\n-    }\n-}\n-\n bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n@@ -4550,23 +3944,6 @@ bool CWalletTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n     return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n-{\n-    if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n-        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n-        CScript witprog = GetScriptForDestination(witdest);\n-        // Make sure the resulting program is solvable.\n-        assert(IsSolvable(*this, witprog));\n-        AddCScript(witprog);\n-    }\n-}\n-\n-void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n-{\n-    // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n-    LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n-}\n-\n std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {\n     std::vector<OutputGroup> groups;\n     std::map<CTxDestination, OutputGroup> gmap;\n@@ -4597,46 +3974,6 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n-{\n-    CKeyMetadata meta;\n-    {\n-        LOCK(cs_wallet);\n-        auto it = mapKeyMetadata.find(keyID);\n-        if (it != mapKeyMetadata.end()) {\n-            meta = it->second;\n-        }\n-    }\n-    if (meta.has_key_origin) {\n-        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n-        info.path = meta.key_origin.path;\n-    } else { // Single pubkeys get the master fingerprint of themselves\n-        std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n-    }\n-    return true;\n-}\n-\n-bool CWallet::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n-{\n-    LOCK(cs_wallet);\n-    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n-    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n-    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n-    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n-    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n-}\n-\n-bool CWallet::SetCrypted()\n-{\n-    LOCK(cs_KeyStore);\n-    if (fUseCrypto)\n-        return true;\n-    if (!mapKeys.empty())\n-        return false;\n-    fUseCrypto = true;\n-    return true;\n-}\n-\n bool CWallet::IsCrypted() const\n {\n     return HasEncryptionKeys();\n@@ -4680,133 +4017,6 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n     return true;\n }\n \n-bool CWallet::HaveKey(const CKeyID &address) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::HaveKey(address);\n-    }\n-    return mapCryptedKeys.count(address) > 0;\n-}\n-\n-bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKey(address, keyOut);\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        const CPubKey &vchPubKey = (*mi).second.first;\n-        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n-{\n-    LOCK(cs_KeyStore);\n-    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-    if (it != mapWatchKeys.end()) {\n-        pubkey_out = it->second;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n-            return GetWatchPubKey(address, vchPubKeyOut);\n-        }\n-        return true;\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        vchPubKeyOut = (*mi).second.first;\n-        return true;\n-    }\n-    // Check for watch-only pubkeys\n-    return GetWatchPubKey(address, vchPubKeyOut);\n-}\n-\n-std::set<CKeyID> CWallet::GetKeys() const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKeys();\n-    }\n-    std::set<CKeyID> set_address;\n-    for (const auto& mi : mapCryptedKeys) {\n-        set_address.insert(mi.first);\n-    }\n-    return set_address;\n-}\n-\n-bool CWallet::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!mapCryptedKeys.empty() || IsCrypted())\n-        return false;\n-\n-    for (const KeyMap::value_type& mKey : mapKeys)\n-    {\n-        const CKey &key = mKey.second;\n-        CPubKey vchPubKey = key.GetPubKey();\n-        CKeyingMaterial vchSecret(key.begin(), key.end());\n-        std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n-            return false;\n-        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n-            return false;\n-    }\n-    mapKeys.clear();\n-    return true;\n-}\n-\n-bool CWallet::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n-    }\n-\n-    if (IsLocked()) {\n-        return false;\n-    }\n-\n-    std::vector<unsigned char> vchCryptedSecret;\n-    CKeyingMaterial vchSecret(key.begin(), key.end());\n-    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n-        return false;\n-    }\n-\n-    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n-        return false;\n-    }\n-    return true;\n-}\n-\n-\n-bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!SetCrypted()) {\n-        return false;\n-    }\n-\n-    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n-    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n-    return true;\n-}\n-\n std::set<ScriptPubKeyMan*> CWallet::GetActiveScriptPubKeyMans() const\n {\n     std::set<ScriptPubKeyMan*> spk_mans;"
      },
      {
        "sha": "c084a9a684fd222c23d1498f9a4404cf895fda83",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 165,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c37be157851666e35f42bd7520af51fb1dd06877",
        "patch": "@@ -581,30 +581,14 @@ struct CoinSelectionParams\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime\n /**\n- * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n- * and provides the ability to create new transactions.\n+ * A CWallet maintains a set of transactions and balances, and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, public WalletStorage, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n     CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n-    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n-    using WatchOnlySet = std::set<CScript>;\n-    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n-\n-    bool SetCrypted();\n-\n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n-\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n-    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n-    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n-    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n-\n-    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n \n     std::atomic<bool> fAbortRescan{false};\n     std::atomic<bool> fScanningWallet{false}; // controlled by WalletRescanReserver\n@@ -662,50 +646,10 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\n     void SyncTransaction(const CTransactionRef& tx, CWalletTx::Status status, const uint256& block_hash, int posInBlock = 0, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    /* the HD chain data model (external chain counters) */\n-    CHDChain hdChain;\n-\n-    /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n-    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n-    std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n \n-    int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n-\n-    /**\n-     * Private version of AddWatchOnly method which does not accept a\n-     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n-     * the watch key did not previously have a timestamp associated with it.\n-     * Because this is an inherited virtual method, it is accessible despite\n-     * being marked private, but it is marked private anyway to encourage use\n-     * of the other AddWatchOnly which accepts a timestamp and sets\n-     * nTimeFirstKey more intelligently for more efficient rescans.\n-     */\n-    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddWatchOnlyInMem(const CScript &dest);\n-\n-    /** Add a KeyOriginInfo to the wallet */\n-    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n-\n-    //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n-\n     bool SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose);\n \n-    //! Adds a script to the store and saves it to disk\n-    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n-\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n@@ -725,9 +669,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n      */\n     uint256 m_last_block_processed GUARDED_BY(cs_wallet);\n \n-    //! Fetches a key from the keypool\n-    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n-\n     std::map<OutputType, ScriptPubKeyMan*> m_external_spk_managers;\n     std::map<OutputType, ScriptPubKeyMan*> m_internal_spk_managers;\n \n@@ -768,15 +709,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n      */\n     const std::string& GetName() const { return m_location.GetName(); }\n \n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    // Map from Key ID to key metadata.\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n-\n-    // Map from Script ID to key metadata (for watch-only keys).\n-    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n-\n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;\n@@ -876,34 +808,10 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     int64_t ScanningDuration() const { return fScanningWallet ? GetTimeMillis() - m_scanning_start : 0; }\n     double ScanningProgress() const { return fScanningWallet ? (double) m_scanning_progress : 0; }\n \n-    /**\n-     * keystore implementation\n-     * Generate a new key\n-     */\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return AddKeyPubKeyInner(key, pubkey); }\n-    //! Load metadata (used by LoadWallet)\n-    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n-    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n-    //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override;\n-    std::set<CKeyID> GetKeys() const override;\n-    bool AddCScript(const CScript& redeemScript) override;\n-    bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n     bool AddDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -916,18 +824,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     //! Get all destination values matching a prefix.\n     std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool RemoveWatchOnly(const CScript &dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadWatchOnly(const CScript &dest);\n-    //! Returns whether the watch-only script is in the wallet\n-    bool HaveWatchOnly(const CScript &dest) const;\n-    //! Returns whether there are any watch-only things in the wallet\n-    bool HaveWatchOnly() const;\n-    //! Fetches a pubkey from mapWatchKeys if it exists there\n-    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n-\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n \n@@ -1034,33 +930,10 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     /** Absolute maximum transaction fee (in satoshis) used by default for the wallet */\n     CAmount m_default_max_tx_fee{DEFAULT_TRANSACTION_MAXFEE};\n \n-    bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n \n-    /**\n-     * Reserves a key from the keypool and sets nIndex to its index\n-     *\n-     * @param[out] nIndex the index of the key in keypool\n-     * @param[out] keypool the keypool the key was drawn from, which could be the\n-     *     the pre-split pool if present, or the internal or external pool\n-     * @param fRequestedInternal true if the caller would like the key drawn\n-     *     from the internal keypool, false if external is preferred\n-     *\n-     * @return true if succeeded, false if failed due to empty keypool\n-     * @throws std::runtime_error if keypool read failed, key was invalid,\n-     *     was not found in the wallet, or was misclassified in the internal\n-     *     or external keypool\n-     */\n-    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     int64_t GetOldestKeyPoolTime();\n-    /**\n-     * Marks all keys in the keypool up to and including reserve_key as used.\n-     */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     std::map<CTxDestination, CAmount> GetAddressBalances(interfaces::Chain::Lock& locked_chain);\n@@ -1183,31 +1056,12 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n \n     bool BackupWallet(const std::string& strDest);\n \n-    /* Set the HD chain model (chain child index counters) */\n-    void SetHDChain(const CHDChain& chain, bool memonly);\n-    const CHDChain& GetHDChain() const { return hdChain; }\n-\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n-    /* Returns true if the wallet can generate new keys */\n-    bool CanGenerateKeys();\n-\n     /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n     bool CanGetAddresses(bool internal = false);\n \n-    /* Generates a new HD seed (will not be activated) */\n-    CPubKey GenerateNewSeed();\n-\n-    /* Derives a new HD seed (will not be activated) */\n-    CPubKey DeriveNewSeed(const CKey& key);\n-\n-    /* Set the current HD seed (will reset the chain child index counters)\n-       Sets the seed's version based on the current wallet version (so the\n-       caller must ensure the current wallet version is correct before calling\n-       this function). */\n-    void SetHDSeed(const CPubKey& key);\n-\n     /**\n      * Blocks until the wallet state is up-to-date to /at least/ the current\n      * chain at the time this function is entered\n@@ -1216,20 +1070,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n      */\n     void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_main, cs_wallet);\n \n-    /**\n-     * Explicitly make the wallet learn the related scripts for outputs to the\n-     * given key. This is purely to make the wallet file compatible with older\n-     * software, as FillableSigningProvider automatically does this implicitly for all\n-     * keys now.\n-     */\n-    void LearnRelatedScripts(const CPubKey& key, OutputType);\n-\n-    /**\n-     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n-     * be anything).\n-     */\n-    void LearnAllRelatedScripts(const CPubKey& key);\n-\n     /** set a single wallet flag */\n     void SetWalletFlag(uint64_t flags) override;\n \n@@ -1258,9 +1098,6 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n         LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n     };\n \n-    /** Implement lookup of key origin information through wallet key metadata. */\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-\n     //! De-duplicates and returns all ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n "
      },
      {
        "sha": "18b83fc896e7df810cf9ee748ffc9ee5792e0f0b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37be157851666e35f42bd7520af51fb1dd06877/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c37be157851666e35f42bd7520af51fb1dd06877",
        "patch": "@@ -254,7 +254,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1') {\n-                pwallet->LoadWatchOnly(script);\n                 pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n             }\n         } else if (strType == DBKeys::KEY) {\n@@ -307,11 +306,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: CPrivKey corrupt\";\n                 return false;\n             }\n-            if (!pwallet->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadKey failed\";\n-                return false;\n-            }\n             if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n@@ -343,11 +337,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;\n \n-            if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n-                return false;\n-            }\n             if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n@@ -360,15 +349,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-            pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n         } else if (strType == DBKeys::WATCHMETA) {\n             CScript script;\n             ssKey >> script;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-            pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n         } else if (strType == DBKeys::DEFAULTKEY) {\n             // We don't want or need the default key, but if there is one set,\n@@ -385,18 +372,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKeyPool keypool;\n             ssValue >> keypool;\n \n-            pwallet->LoadKeyPool(nIndex, keypool);\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n         } else if (strType == DBKeys::CSCRIPT) {\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n             ssValue >> script;\n-            if (!pwallet->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LoadCScript failed\";\n-                return false;\n-            }\n             if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n@@ -413,7 +394,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n-            pwallet->SetHDChain(chain, true);\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->SetHDChain(chain, true);\n         } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n@@ -538,7 +518,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n-        auto spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+        auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();\n         if (spk_man) {\n             LOCK(spk_man->cs_KeyStore);\n             spk_man->UpdateTimeFirstKey(1);"
      }
    ]
  }
]