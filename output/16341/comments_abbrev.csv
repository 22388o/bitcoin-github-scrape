achow101,2019-07-05 03:01:52,In the coming days I will try to squash together some of these commits so there aren't so many of them. I just wanted to get this open now for people to begin reviewing the changes.,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508614075,508614075,
DrahtBot,2019-07-05 04:41:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17246](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17246.html) (wallet: avoid knapsack when there's no chan",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508627166,508627166,
fanquake,2019-07-06 04:28:47,"Everyone commenting here, note that this PR is a work in progress, and is built on top of multiple open PRs.\n\nFor now we should try and keep the discussion here at a Concept ACK/NACK & design level, rather than individual nit-picks and code review.\n\nIf you would like to review the code, please do so in the open base PRs. That will not only save the concept level discussion here from being ",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508896117,508896117,
meshcollider,2019-07-07 03:03:00,"Concept ACK, this abstraction is definitely the right path for the wallet to take IMO as we work toward descriptor wallets.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508967793,508967793,
Sjors,2019-07-11 14:56:24,"Approach ACK.\n\nTo make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510521262,510521262,
achow101,2019-07-11 17:57:06,"> To make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`), try to combine",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510589619,510589619,
Sjors,2019-07-12 14:18:31,">> In other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\n\n> Doing that will cause the entirety of the PR to fail all tests (so all need ci skip) except for the very last commit. If other reviewers want that, I could reorganize it.\n\nWhy would any of the test fail if `ScriptPubKeyMan` is just an empty shell, and/or a bunch of NOOP functi",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510903836,510903836,
achow101,2019-07-26 19:51:06,"The PRs this depended on have been merged. I don't foresee making large changes to this anymore, so this is no longer WIP.\n\nPlease review!",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-515578355,515578355,
Sjors,2019-08-13 13:03:48,"Found a bug (try in QT):\n1. create a wallet `blank` wallet with private keys disabled\n2. see that new address button in receive screen is disabled, as it should\n3. close QT and start again, load the wallet\n4. see that new address button is enabled *and creates addresses* (panic)\n\nMaybe `Always try to sign for all pubkeys in multisig` can be its own PR?\n\nI didn't pay precise attenti",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-520825537,520825537,
instagibbs,2019-08-30 18:43:55,"Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526707694,526707694,
ryanofsky,2019-08-30 18:48:13,"> Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?\n\nI definitely would not want this because it would temporarily add a huge amount of duplicate code to the wallet. If this needs to be broken up to be reviewed (and I don't think it does), I'd either go with sjor",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526709057,526709057,
ryanofsky,2019-08-30 18:52:34,"Or, in case I misunderstood, if you are just talking about splitting the first 9 commits into their own PR (the commits before the ""Implement..."" commits and the ""ci skip"" commits), that seems perfectly fine and would help a little.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526710335,526710335,
achow101,2019-08-30 20:12:30,"Rebased and addressed comments.\n\nWill look at the bug @Sjors reported next.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526733789,526733789,
achow101,2019-08-30 20:52:52,The bug @Sjors found should be fixed now.,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526746214,526746214,
achow101,2019-09-03 19:54:17,"I split cce926c into #16798\n\nI'm unsure about splitting the other two ""unrelated"" commits since they don't actually do anything useful outside of this PR.\n\nd2d43ab is purely to avoid a circular dependency, and d9ea846 is only to fix a side effect of this PR.\n\nAlso reordered the first several commits so the ""unrelated"" commits come first.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-527613139,527613139,
instagibbs,2019-09-09 14:42:13,"only changes through ""Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan"" were the suggested ones in above review.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529509066,529509066,
instagibbs,2019-09-10 13:51:02,"tentative utACK https://github.com/bitcoin/bitcoin/pull/16341/commits/1ccf487912fd6abb2a289f4933eebd06ad4e5116  if https://github.com/bitcoin/bitcoin/pull/16341/files#r322739005 is answered\n\nThe RPC-based changes seem correct as well. Any import/dump type functionality is locked in to legacy box, and as new boxes are created we can either activate those, or make new RPC calls. For more general",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529944785,529944785,
instagibbs,2019-09-10 16:08:02,re-utACK fb0058ed68a18053959001a0191f3fbcfec50526 :),https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-530008341,530008341,
Sjors,2019-10-09 15:58:48,"I can confirm that `git diff achow101/box-the-wallet ryanofsky/pr/keyman` returns nothing for 0fb52e4 vs. 12b0b2bf15. ACK both.\n\nA few nits in @ryanofsky's version:\n* in 530d4d4 the `This type of wallet does not support this command` lines could be introduced in their own commit, preserving eff07eb9cca498e2942a417545938eb773dbc513\n* commit  530d4d4e08826f0d28e34e81ceaf341b58d29982 complain",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540067319,540067319,
achow101,2019-10-09 17:23:31,I'm going to stick with the current commit structure.,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540102322,540102322,
ryanofsky,2019-10-09 20:17:50,"[Edited 10/12: [Removed ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425)]\n\n~Code review ACK 9556f59ad83690640a047192771600600c1550dc~. Only changes since last review were suggested address and lock annotation fixes.\n\nI also updated my branch. If any other reviewers struggling with this PR, I'd encourage them to use it to see a breakdown of changes in the main PR:",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540173610,540173610,
achow101,2019-10-09 21:47:08,"While rebasing #16528, I noticed that we actually don't need `HasEncryptedData` check both `HasEncryptionKeys` and `mapCryptedKeys.empty()`. It is sufficient to just check `HasEncryptionKeys` because having any encryption keys is a better indicator of encryption. So I've removed `HasEncryptedData` and the things that called it now call `HasEncryptedData`.\n\nThis also avoids some issues with loc",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540215546,540215546,
ryanofsky,2019-10-10 15:13:09,"[Edited 10/12: [Removed ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425)]\n\n~Code review ACK 39bd4db227d8c771502184389db97f9d7e7ac3c0~. Only change since last review was removing HasEncryptedData.\n\nI also updated my branch. If any other reviewers struggling with this PR, I'd encourage them to use it to see a breakdown of changes in the main PR:\n\n| [`pr/keyman`]",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540634442,540634442,
Sjors,2019-10-10 17:44:40,"I tested 39bd4db227d8c771502184389db97f9d7e7ac3c0 with the follow descriptor wallet PR.\n\nAre you sure your last change handles non-HD wallets correctly? IIUC `mapCryptedKeys` is non-empty, but `mapMasterKeys` is, so `HasEncryptionKeys()` will return `false`. I tested with an encrypted `-usehd=0` wallet from `v0.15.2` and can't find any problems though. ",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540695975,540695975,
achow101,2019-10-10 17:46:32,"> I tested [39bd4db](https://github.com/bitcoin/bitcoin/commit/39bd4db227d8c771502184389db97f9d7e7ac3c0) with the follow descriptor wallet PR.\n> \n> Are you sure your last change handles non-HD wallets correctly? IIUC `mapCryptedKeys` is non-empty, but `mapMasterKeys` is, so `HasEncryptionKeys()` will return `false`. I tested with an encrypted `-usehd=0` wallet from `v0.15.2` and can't find any",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540696659,540696659,
Sjors,2019-10-10 18:14:57,"Ah yes, it's the master encryption key map (`typedef std::map<unsigned int, CMasterKey> MasterKeyMap`), not the master hd key (`CHDChain`).\n\nACK  39bd4db. I like that with @ryanofsky's alternative history we now have a DAG :-) If you can link to it in the PR description, then it should be preserved.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540707995,540707995,
instagibbs,2019-10-11 21:32:23,"utACK https://github.com/bitcoin/bitcoin/commit/39bd4db227d8c771502184389db97f9d7e7ac3c0\n\ncontingent on expanded explanation of role of `WalletStorage` between the various concepts",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541231331,541231331,
achow101,2019-10-12 00:44:11,"There was a hidden merge conflict with master, so I had to rebase this. resolving that conflict required changing the `WatchOnlyPubKeys` test case in the wallet tests to use `LegacyScriptPubKeyMan`,",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541265050,541265050,
ryanofsky,2019-10-12 14:35:47,"Apologies to @achow101 because the work here is great and very promising, but I want to remove my ACK from this PR. With Sjors and Instagibbs ACKs coming so quickly after mine, it seems possible my review might be being given more weight than it warrants, and I want to avoid this possibility.\n\nNormally when I ACK something I want to at least be able to say ""I'd be surprised if this PR introduc",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425,541330425,
Sjors,2019-10-12 14:56:21,"@ryanofsky note that my ACK was mostly based on my own previous review (i.e. @achow101's commits). I used your variant to sanity check. But I agree this PR needs more people looking at it. Lots of moving parts. More tests would also be useful, because a lot of things can be changed without breaking any.\n\n@meshcollider mentioned on IRC he's also in the process of reviewing. \n\nConfirming tha",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541332138,541332138,
instagibbs,2019-10-12 15:22:50,"There were only a couple significant changes since my last ACK. I only\nreviewed after Russel because I didn't feel like reviewing 60 different\nversions  I do agree it needs more ACKs than typical due to size of\nchanges.\n\nOn Sat, Oct 12, 2019, 10:59 AM Sjors Provoost <notifications@github.com>\nwrote:\n\n> @ryanofsky <https://github.com/ryanofsky> note that my ACK was mostly\n> based on my own",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541334524,541334524,
achow101,2019-10-17 05:50:32,Latest push adds `#include <functional>` to `util/translation.h` as it was causing some travis builds to fail for some reason.,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-543014459,543014459,
achow101,2019-10-21 15:49:37,Rebased,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-544578246,544578246,
Sjors,2019-10-25 09:16:58,Code review re-ACK c37be15,https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-546274939,546274939,
achow101,2019-10-25 21:09:34,"As per the wallet meeting today, we will be using @ryanofsky's branch (with some modification maybe) and split it up into multiple PRs in an attempt to reduce review burden.",https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-546514449,546514449,
fqlx,2019-07-05 23:55:04,"I'm very suspect at this line. We are assigning a dereference pointer. \nI think we should prefer `is_mine = &m_wallet->IsMine(dest);`",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812193,300812193,src/interfaces/wallet.cpp
fqlx,2019-07-05 23:56:39,This name doesn't indicate a boolean return value. 🤔 Why not isPubKey()?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812273,300812273,src/interfaces/wallet.h
fqlx,2019-07-06 00:08:28,Include `redeemScript.size()` size in the logging so we can debug easier ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812837,300812837,src/script/signingprovider.cpp
fqlx,2019-07-06 00:09:19,Can we use BYTE to be more informative of the type,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812883,300812883,src/script/keyorigin.h
fqlx,2019-07-06 00:17:04,`provider` should be checked before dereferencing ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813241,300813241,src/wallet/rpcwallet.cpp
fqlx,2019-07-06 00:31:41,Please add space around operators ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813882,300813882,src/wallet/wallet.cpp
fqlx,2019-07-06 03:02:04,Could be void since we always return true.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818049,300818049,src/script/signingprovider.cpp
fqlx,2019-07-06 03:05:57,"Looks like we could remove error and use empty string `""""`  below. ",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818112,300818112,src/interfaces/wallet.cpp
fqlx,2019-07-06 03:14:11,"Is this done as an optimization? I'd prefer:\n```\nvoid CWallet::SetCrypted()\n{ \n    LOCK(cs_wallet);\n    fUseCrypto = true;\n}\n```",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818241,300818241,src/wallet/wallet.cpp
sipa,2019-07-06 03:18:57,Please try to understand the code you're commenting on.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818321,300818321,src/interfaces/wallet.cpp
sipa,2019-07-06 03:19:45,C++11 does not have such a type.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818335,300818335,src/script/keyorigin.h
dandv,2019-07-06 04:12:08,@sipa: Clarifying what you're referring to would be both constructive and polite :),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819296,300819296,src/interfaces/wallet.cpp
dandv,2019-07-06 04:14:54,"The old `get...Key` returning `bool` smells: either the pubKey is a boolean, or `getPubKey` has a side effect of getting the key somewhere else instead of as a result. Could this PR fix that by renaming it to `isPubKey()`?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819341,300819341,src/interfaces/wallet.h
dandv,2019-07-06 04:16:24,Such key code would certainly benefit from linting.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819367,300819367,src/wallet/wallet.cpp
achow101,2019-07-06 04:31:00,"This line is merely changing how `IsMine` is called. In order to avoid difficulties for reviewers, the existing code (the assignment itself) is not being changed.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819626,300819626,src/interfaces/wallet.cpp
achow101,2019-07-06 04:32:32,"I am trying to avoid changing existing code as much as possible in order to avoid additional review burden. Feel free to change this later, but changing it here is out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819651,300819651,src/interfaces/wallet.h
achow101,2019-07-06 04:33:40,This is part of a scripted diff. Such a change would both not part of the script and be unrelated to this PR.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819681,300819681,src/script/signingprovider.cpp
achow101,2019-07-06 04:34:53,This is existing code and is merely a rename. Changing what it returns is out of scope for this PR.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819703,300819703,src/script/signingprovider.cpp
achow101,2019-07-06 04:36:06,This is moved code and I will not be changing it in order to avoid overburdening reviewers with ensuring that behavior hasn't changed.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819762,300819762,src/wallet/wallet.cpp
achow101,2019-07-06 04:39:57,"No, `GetNewAddress` takes a reference which `""""` is not.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819836,300819836,src/interfaces/wallet.cpp
achow101,2019-07-06 04:59:53,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820287,300820287,src/wallet/rpcwallet.cpp
achow101,2019-07-06 04:59:59,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820289,300820289,src/wallet/wallet.cpp
elichai,2019-08-05 14:12:17,"The nice thing about the way it was done before is that if this expr returns false it would get short circuited and `CreateSig` wouldn't be called too.\n\nNow it's the opposite. which I think makes less sense when we know that CreateSig is more work than that simple expr, so it might do CreateSig just to fail that if afterwards.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310624791,310624791,src/script/sign.cpp
elichai,2019-08-05 14:40:35,shouldn't this be `return sh;`?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310639109,310639109,src/outputtype.cpp
achow101,2019-08-05 14:49:58,"This is necessary for `LegacyScriptPubKeyMan::CanProvide` to pass. That uses the `DUMMY_SIGNATURE_CREATOR` which creates dummy signatures without checking whether the `SigningProvider` has the private keys (as it should). However, in `CanProvide`, we want to make sure that we do actually have the private keys, and if the dummy signing returns us dummy signatures that correspond to keys that we don",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310643788,310643788,src/script/sign.cpp
achow101,2019-08-05 15:05:06,"Yes, done.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310651218,310651218,src/outputtype.cpp
elichai,2019-08-05 15:09:34,is checking that `spk_man` isn't null needed here assuming you already call `spk_man->cs_KeyStore` which is a deference?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310653358,310653358,src/wallet/wallettool.cpp
elichai,2019-08-05 15:16:25,nit. snake case for the function arguments?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310656799,310656799,src/rpc/rawtransaction_util.cpp
sipa,2019-08-05 15:20:12,&& short-circuits; it doesn't evaluate its right hand is the left hand was false.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310658586,310658586,src/wallet/wallettool.cpp
elichai,2019-08-05 15:24:55,Yes. My point was that he deferences it a few lines above when he acquires a lock. ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310660927,310660927,src/wallet/wallettool.cpp
achow101,2019-08-05 15:30:06,wallettool looks to be broken when there are other `ScriptPubKeyMan` classes. I'll investigate in the Descriptor wallets PR.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310663427,310663427,src/wallet/wallettool.cpp
achow101,2019-08-05 15:53:31,This change to using `spk_man` here is not actually needed. I've changed it to use `CWallet::IsHDEnabled`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310674086,310674086,src/wallet/wallettool.cpp
ryanofsky,2019-08-22 18:33:32,"In commit ""Always try to sign for all pubkeys in multisig"" (d0b41dc26a74e158bd22259aed50869c9676e3fd)\n\nI'm not deeply familiar with this code, and I found the explanation a little hard to follow, but in case it helps anyone else, the key seems to be that calling CreateSig unconditionally is needed to fill sigdata. I can confirm that `rpc_psbt.py` test fails without this change.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316826832,316826832,src/script/sign.cpp
ryanofsky,2019-08-22 18:49:53,"In commit ""Add function callbacks for wallet flags and versions and wallet database"" (bae5b518ec507d071a54ce4810dd24b016bcfe12)\n\nThis could just say `using ScriptPubKeyMan::ScriptPubKeyMan` to inherit the parent constructor instead of repeating it all. Even at the end of this PR, this constructor is empty except for some member initializations which would be better to do at the points of decla",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316833572,316833572,src/wallet/scriptpubkeyman.h
instagibbs,2019-08-27 15:21:32,"I also found this explanation difficult. Is there any way to succinctly say the desired effect, and put it in a comment in the code?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318143710,318143710,src/script/sign.cpp
instagibbs,2019-08-27 15:27:30,Please add a short comment on what this is in charge of and what it's not.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318147258,318147258,src/wallet/scriptpubkeyman.h
instagibbs,2019-08-27 15:31:34,s/output_types/OUTPUT_TYPES/,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318149544,318149544,src/outputtype.h
instagibbs,2019-08-27 15:38:14,Comment on how these are indexed?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318153110,318153110,src/wallet/wallet.h
instagibbs,2019-08-27 15:42:52,"> m_internal_spk_managers[OutputType::LEGACY]\n\nPlease leave a comment noting that any output type is the same in this context.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318155569,318155569,src/wallet/wallet.cpp
instagibbs,2019-08-27 15:49:15,"we have the list of output types, let's just iterate through them here to build this",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318158886,318158886,src/wallet/wallet.cpp
instagibbs,2019-08-27 15:49:58,"we have the list of output types, let's just iterate through them here to assert these",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318159265,318159265,src/wallet/wallet.cpp
ryanofsky,2019-08-27 16:55:37,"In commit ""Refactor rawtransaction_util's SignTransaction to have previous tx parsing be separate"" (b49bbb939be92a67ff77c3f7bca5bb94dd141906)\n\n> nit. snake case for the function arguments?\n\nBetter in a separate PR, this PR is huge already and the change would make this commit a lot harder to follow.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318190081,318190081,src/rpc/rawtransaction_util.cpp
ryanofsky,2019-08-27 17:01:11,"In commit ""Implement GetSigningProvider in LegacyScriptPubKeyMan"" (a31374df794d709cf8acfbafc7d5b57f74b1d75a)\n\nNot important, but this should never be null so a reference makes more sense than a pointer in this class",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318192477,318192477,src/wallet/scriptpubkeyman.h
ryanofsky,2019-08-27 17:04:49,"In commit ""Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's"" (7b57deac879499e4b0ee99f1efc320600907bc59)\n\n`const auto&` instead of `auto` would avoid copying and incrementing / decrementing shared_ptr atomic reference counts, would also make it clear that the std::pair is not changing",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318193983,318193983,src/wallet/wallet.cpp
ryanofsky,2019-08-30 18:24:52,"In commit ""Implement GetKeyOrigin in LegacyScriptPubKeyMan"" (b893f0d053f1b5be1229d4fb77ced46b222f9993)\n\nIt's unclear why this change is in this commit. Is it supposed to be part of the next one\n93322bf756fd8991fb445e327c878e2695fe9ca9?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319628054,319628054,src/wallet/test/coinselector_tests.cpp
achow101,2019-08-30 19:49:13,I added a comment.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653872,319653872,src/script/sign.cpp
achow101,2019-08-30 19:49:21,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653909,319653909,src/wallet/scriptpubkeyman.h
achow101,2019-08-30 19:49:28,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653940,319653940,src/wallet/scriptpubkeyman.h
achow101,2019-08-30 19:49:38,Changed all of these iterations to `const auto&`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653992,319653992,src/wallet/wallet.cpp
achow101,2019-08-30 19:49:43,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654014,319654014,src/wallet/scriptpubkeyman.h
achow101,2019-08-30 19:49:48,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654040,319654040,src/outputtype.h
achow101,2019-08-30 19:49:55,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654069,319654069,src/wallet/wallet.cpp
achow101,2019-08-30 19:49:58,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654084,319654084,src/wallet/wallet.cpp
achow101,2019-08-30 19:50:31,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654232,319654232,src/wallet/wallet.cpp
achow101,2019-08-30 19:50:42,Yeah. Moved it,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654309,319654309,src/wallet/test/coinselector_tests.cpp
achow101,2019-08-30 19:53:49,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319655153,319655153,src/wallet/wallet.h
Sjors,2019-08-31 08:43:57,I think this commit deserves its own PR anyway; as does any refactor that's a prequisite for the main PR.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319716775,319716775,src/rpc/rawtransaction_util.cpp
instagibbs,2019-09-06 20:06:03,"this function doesn't create one, just returns null",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321891057,321891057,src/wallet/wallet.h
instagibbs,2019-09-06 20:10:35,I know this is from CWallet but I'd rather avoid hungarian notation for new variables: `m_use_crypto`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321892466,321892466,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-06 20:13:58,I know there's no documentation where you got this from but could there be an explanation of this field?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321893577,321893577,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-06 20:15:33,for reviewers: this whole commit is cloned from CWallet's implementation,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894091,321894091,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-06 20:17:53,I know this is cloning but `std::make_pair` like everywhere else,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894821,321894821,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-06 20:28:54,"please change all these ""store"" references to pubkeyman references",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321898519,321898519,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-06 20:50:29,"this seems to add the optional params for no reason vs master. remove them, or at least annotate what they mean.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321905454,321905454,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-06 20:58:33,renamed to `GetTotalKeypoolSize` to make it clear it counts both?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321907947,321907947,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-06 21:03:28,"on second thought, nevermind. for now straight copy is good.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321909406,321909406,src/wallet/scriptpubkeyman.h
achow101,2019-09-06 23:10:07,"It's always counted both, and I would prefer to keep this consistent with `CWallet::GetKeypoolSize`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937412,321937412,src/wallet/scriptpubkeyman.h
achow101,2019-09-06 23:11:43,I don't think it's necessary to change all of these.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937683,321937683,src/wallet/scriptpubkeyman.h
achow101,2019-09-06 23:17:59,Edited comment.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938576,321938576,src/wallet/wallet.h
achow101,2019-09-06 23:18:05,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938597,321938597,src/wallet/scriptpubkeyman.h
achow101,2019-09-06 23:18:15,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938626,321938626,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-06 23:18:50,Removed the optional params. They still need to be specified in when binding the function though.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938694,321938694,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:14:00,missing `error.clear()` that CWallet has?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322299705,322299705,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:16:57,"realized this doesn't exist in master, please put explanation in comment on what it's used for",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322301283,322301283,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-09 15:33:59,"there's no flag being set here anymore. If intentional, I'd like an explanation and fixup of this comment",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322310615,322310615,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:37:05,"please elaborate on stuff :P \n\nit's important for spotting missing functionality since I don't think there's an equiv block in old wallet code",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322312299,322312299,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-09 15:38:26,seems a bit of a misnomer even based on my reading,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322313000,322313000,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-09 15:41:33,any reason you're not actually referencing `VERSION_HD_CHAIN_SPLIT` directly?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322314647,322314647,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:42:39,and why the logic change here? master doesn't have this version check,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322315266,322315266,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:45:26,"this has nothing to do with the DB, other than it's called right after `database->Rewrite(""\x04pool"")` by the caller.\n\nPlease rename it to something sensible e.g., `ClearKeypool`",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322316694,322316694,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:52:10,"can you explain the diff in code from master with the batch pointer being set in this function, when it's set to null, etc?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322319993,322319993,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 15:58:58,Can you explain where the `SetAddressBookWithDB` call went for reviewers? ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322323465,322323465,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 16:02:36,Brief comment on what this does? (I don't think similar existed before in CWallet),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322325223,322325223,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-09 16:05:35,why this move? is this preparatory? ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322326671,322326671,src/script/signingprovider.h
instagibbs,2019-09-09 16:26:22,"Maybe leave a comment in this block that the pubkeyman has no use for this key, it's just an encryption key. I was tripped up on this. Bad naming! bad!",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322336189,322336189,src/wallet/walletdb.cpp
instagibbs,2019-09-09 16:28:42,please explain in header what it `CanProvide`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337263,322337263,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 16:30:09,why?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337866,322337866,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 17:14:36,"nit: annotate the bool arg, or make it an enum",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322356879,322356879,src/wallet/wallet.cpp
instagibbs,2019-09-09 17:18:01,"no need to gate here, `TopUp` already checks for this in `TopUpKeyPool`",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358340,322358340,src/wallet/wallet.cpp
instagibbs,2019-09-09 17:19:25,`LegacyScriptPubKeyMan::GetReservedDestination` does this check as well,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358957,322358957,src/wallet/wallet.cpp
achow101,2019-09-09 17:22:34,It remains in wallet.cpp since the address book isn't part of `ScriptPubKeyMan`.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322360258,322360258,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 17:24:38,"not immediately obvious to me how this gets accomplished in new flow? `GetNewDestination` case is covered, just not this one?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322361186,322361186,src/wallet/wallet.cpp
achow101,2019-09-09 17:26:36,"It could be watch only (as DUMMY_SIGNATURE_CREATOR works for watch only things), which then causes issues elsewhere when a private key is assumed to exist but doesn't for watch only things. So this prevents those code paths being taken for watch only things.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322362131,322362131,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 17:37:14,"The equivalent blocks in old wallet code are the various `SetHDSeed(GenerateNewSeed())` lines scattered around in a bunch of places.\n\nHow is it a misnomer?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322366919,322366919,src/wallet/scriptpubkeyman.h
instagibbs,2019-09-09 17:37:35,"just use `spk_man` here (if you cannot, please annotate why in comments)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367040,322367040,src/wallet/wallet.cpp
instagibbs,2019-09-09 17:38:23,"just use spk_man here (if you cannot, please annotate why in comments)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367377,322367377,src/wallet/wallet.cpp
instagibbs,2019-09-09 17:38:54,"just use spk_man here (if you cannot, please annotate why in comments)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367622,322367622,src/wallet/wallet.cpp
instagibbs,2019-09-09 17:39:11,"just use spk_man here (if you cannot, please annotate why in comments)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367743,322367743,src/wallet/wallet.cpp
achow101,2019-09-09 17:44:47,"Referencing `VERSION_HD_CHAIN_SPLIT` directly requires including walletdb.h which is a circular dependency.\n\nThe logic is slightly different here because without it, it would end up marking the newly generated keys as pre-split on later runs on the same LegacyScriptPubKeyMan. This is an issue because for a LegacyScriptPubKeyMan, Upgrade() will be called 6 times (once for each address type and ",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370108,322370108,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 17:46:10,"It's supposed to be post-processing that is done by ScriptPubKeyMan when the db had to be rewritten, hence the name. Other ScriptPubKeyMans may do something different.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370677,322370677,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 17:50:26,"encrypted_batch used to be set from within `EncryptWallet` before `EncryptKeys` was called. Since `EncryptKeys` is now `ScriptPubKeyMan::Encrypt`, it doesn't have access to CWallet's encrypted_batch, so we need to pass it in and set it when the `ScriptPubKeyMan` is encrypting.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322372539,322372539,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 17:53:17,"It just returns a `CKeyMetadata` as the function name suggests.\n\nIt is needed so that getting metadata no longer requires direct access to `mapKeyMetadata` which no longer exists in CWallet and is not guaranteed to exist in other ScriptPubKeyMans (e.g. it is generated on the fly in native descriptor wallets).",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322373793,322373793,src/wallet/scriptpubkeyman.h
achow101,2019-09-09 17:54:23,Yes. `cs_KeyStore` sometimes needs to be locked by the caller.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322374333,322374333,src/script/signingprovider.h
achow101,2019-09-09 18:00:18,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377020,322377020,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 18:00:29,Done.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377086,322377086,src/wallet/scriptpubkeyman.h
achow101,2019-09-09 18:00:38,Removed the comment.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377163,322377163,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-09 18:00:51,I updated the comment.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377247,322377247,src/wallet/scriptpubkeyman.h
achow101,2019-09-09 18:02:00,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377747,322377747,src/wallet/walletdb.cpp
achow101,2019-09-09 18:02:06,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377790,322377790,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-09-09 18:03:51,"why not just iterate over `GetActiveScriptPubKeyMans` result, should be more complete and less brittle to updates?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322378586,322378586,src/wallet/wallet.cpp
instagibbs,2019-09-09 18:08:44,`GetActiveScriptPubKeyMans`?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322380725,322380725,src/wallet/wallet.cpp
instagibbs,2019-09-09 18:11:35,GetActiveScriptPubKeyMans?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322381977,322381977,src/wallet/wallet.cpp
instagibbs,2019-09-09 18:16:02,GetActiveScriptPubKeyMans?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322383899,322383899,src/wallet/wallet.cpp
instagibbs,2019-09-09 18:18:40,comment for this whole commit: why is this here? I don't see direct connection with anything. Could this be moved earlier in PR or split out?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322385026,322385026,src/outputtype.cpp
achow101,2019-09-09 23:24:51,It's handled internally by `spk_man` in the same way that `GetNewDestination` does.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322495058,322495058,src/wallet/wallet.cpp
achow101,2019-09-09 23:34:53,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497261,322497261,src/wallet/wallet.cpp
achow101,2019-09-09 23:34:57,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497279,322497279,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:01,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497293,322497293,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:06,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497315,322497315,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:09,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497330,322497330,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:13,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497338,322497338,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:16,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497348,322497348,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:20,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497368,322497368,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:23,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497381,322497381,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:27,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497399,322497399,src/wallet/wallet.cpp
achow101,2019-09-09 23:35:30,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497409,322497409,src/wallet/wallet.cpp
achow101,2019-09-09 23:56:43,it was needed for some tests to pass. I've moved it up near the front of the PR.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322502117,322502117,src/outputtype.cpp
instagibbs,2019-09-10 13:22:33,"Please be specific. `GetNewDestination` literally has the call to `LearnRelatedScripts`, I can't find the corresponding one for this.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322739005,322739005,src/wallet/wallet.cpp
achow101,2019-09-10 15:55:49,I've added a call to `LearnRelatedScripts` in `GetReservedDestination`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322827322,322827322,src/wallet/wallet.cpp
ryanofsky,2019-09-12 18:21:37,"The state variables vMasterKey, fUseCrypto, and fDecryptionThoroughlyChecked seem to end up duplicated in both the CWallet and in KeyMan classes:\n\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/wallet.h#L591\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/scriptpubkeyman.h#L246\n\nIs this by design, or",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r323884483,323884483,src/wallet/scriptpubkeyman.h
achow101,2019-09-13 21:08:56,"I've added `WalletStorage` as you suggested. However I did not change `vMasterKey`, `fUseCrypto`, and `fDecryptionThorouglyChecked` to be references or pointers as allowing `ScriptPubKeyMan`s to modify these variables in `CWallet` itself may result in inconsistent states where one `ScriptPubKeyMan` has finished en/decrypting but another has not. Properly changing them to use references could be do",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324369235,324369235,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-16 18:29:24,"What's the reason for using `unique_ptr` and `shared_ptr` so many places to begin with? It doesn't seem like we'd ever want `KeyMan` instances to outlive their `CWallet` instance, or to be shared between multiple `CWallet` instances. So wouldn't it be simplest to store `KeyMan` instances in `CWallet` `unique_ptr<>` or `set<unique_ptr<>>` member variables so they get cleaned up when the wallet does",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324821792,324821792,src/wallet/scriptpubkeyman.h
achow101,2019-09-16 20:43:17,The use of `shared_ptr` was because `ScriptPubKeyMan` objects were being passed around a lot. I've changed this to store them as a `unique_ptr` and instead just pass around the `ScriptPubKeyMan*` as you suggested.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324876493,324876493,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-16 21:40:35,"Thanks! If desired, I think you could take it further and drop LegacySigningProvider wrapper class if the CWallet::GetSigningProvider methods are returning plain pointers. Also, I think there's no need anymore to change CWallet::database from a unique_ptr to a shared_ptr. (It's a little nicer as a unique_ptr to be sure the database is closed when a wallet's unloaded and not kept open with a dangli",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324898415,324898415,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 13:59:34,Can you add the bit about `LegacyScriptPubKeyMan::CanProvide` as well to the comment?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325183255,325183255,src/script/sign.cpp
Sjors,2019-09-17 14:11:19,"Should this say ""we have _any_ private key"" instead of _the_ private key? ""DUMMY_SIGNATURE_CREATOR works for watch only things"" is useful to add as a comment. Can you also explain under what circumstance `DUMMY_SIGNATURE_CREATOR` does _not_ produce a signature? It's also useful to reiterate here that `ProduceSignature` doesn't necessarily produce an ECDSA signature, but a script signature, which i",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325190353,325190353,src/wallet/scriptpubkeyman.cpp
Sjors,2019-09-17 14:15:12,"What's the equivalent pre-box code for this? If nothing, can you explain in a comment why you need these three distinct checks?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325192947,325192947,src/wallet/scriptpubkeyman.cpp
Sjors,2019-09-17 15:11:49,"I think you can drop `[ci-skip]`; tests pass for me locally on this commit.\n\nIt's still not clear to me what this is doing. The function already calls ` keystore.AddCScript`, so why do this twice?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325226579,325226579,src/outputtype.cpp
Sjors,2019-09-17 15:24:20,I suppose we can't burry `IsMine` deep inside a private method? :-),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325233797,325233797,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 15:27:03,Nit: move closer to `UpgradeKeyMetadata`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325235296,325235296,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 15:29:38,Shouldn't this be part of the legacy box?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325236865,325236865,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 15:45:08,"Why does this live in `scriptpubkeyman.h` rather than `wallet.h`?\nCan you add a few comment lines to explain the purpose of `WalletStorage` and how it relates to `CWallet` and `ScriptPubKeyMan`?\n\nIn particular I don't get why (in the next commit) each `ScriptPubKeyMan` instance needs this.\n\nMaybe move this commit closer to where you first need it.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325245279,325245279,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 15:55:53,"Maybe point out that having only 1 entry in `m_spk_managers` here means that functions like `GetSigningProvider`  that iterate over ""all"" `PubKeyMan`s really only query once.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325251003,325251003,src/wallet/wallet.cpp
Sjors,2019-09-17 16:00:08,How is this different from `m_spk_managers`?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325253320,325253320,src/wallet/wallet.cpp
Sjors,2019-09-17 16:01:58,"Maybe clarify the meaning of ""Active"", and how this is different from `m_spk_managers`. Presumably the latter may, in a descriptor wallet, include `PubKeyMan` that we don't draw new address for.\n\nMaybe rename commit to `Introduce GetScriptPubKeyMan methods`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325254154,325254154,src/wallet/wallet.h
Sjors,2019-09-17 16:07:26,I think `LegacySigningProvider` class adds some clarity.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325256738,325256738,src/wallet/scriptpubkeyman.h
Sjors,2019-09-17 16:51:07,Shouldn't this only loop over active `ScriptPubKeyMan`s?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325277192,325277192,src/wallet/wallet.cpp
Sjors,2019-09-17 16:54:24,"It makes sense to me to have `WalletStorage` only cover stuff that's global to the wallet, rather than unique to each  `ScriptPubKeyMan`. The end result is that this commit is now manageably small.\n\nHowever, at the PR level, shouldn't `CWallet`'s `IsCrypted()` be looping over all  `ScriptPubKeyMan`s, just like `SetCrypted()` does?\n\n_update: `IsCrypted()` doesn't loop, I was looking at `CWa",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325278591,325278591,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-17 17:20:14,Would be good to prefix with `m_`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325289602,325289602,src/wallet/wallet.h
achow101,2019-09-17 17:46:48,"> However, at the PR level, shouldn't `CWallet`'s `IsCrypted()` be looping over all `ScriptPubKeyMan`s, just like `SetCrypted()` does?\n\n`SetCrypted` doesn't loop.\n\nThe thought I had here was that it could be possible that a wallet is considered encrypted (by virtue of having an encryption key set) without any of the `ScriptPubKeyMan`s having any of them actually encrypting anything and thu",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325301640,325301640,src/wallet/scriptpubkeyman.h
achow101,2019-09-17 17:51:36,"Of course there is no pre-box equivalent, CWallet was just passed in as the SiginingProvider always!",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325303848,325303848,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-17 17:52:03,No,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304039,325304039,src/wallet/scriptpubkeyman.h
achow101,2019-09-17 17:52:12,No,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304118,325304118,src/wallet/scriptpubkeyman.h
achow101,2019-09-17 17:53:50,"To avoid circular dependencies.\n\nI am not moving this commit. It belongs right there.\n\n***\n\nIt serves the exact same purpose as the commits it replaces does, to provide access to some functions that require reading and/or modifying some wallet storage things like the database handle, the wallet version number, and wallet flags. It's there to avoid having callbacks and binding functions",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304925,325304925,src/wallet/scriptpubkeyman.h
achow101,2019-09-17 17:55:31,I don't think that's necessary to point out.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325305843,325305843,src/wallet/wallet.cpp
achow101,2019-09-17 17:56:05,`m_spk_managers` can have inactive `ScriptPubKeyMan`s.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325306132,325306132,src/wallet/wallet.cpp
achow101,2019-09-17 17:56:55,"Active means that we actively draw addresses from them, i.e. they are in `m_internal_spk_managers` and `m_external_spk_managers`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325306523,325306523,src/wallet/wallet.h
achow101,2019-09-17 18:12:36,It makes everything else more complicated to do so.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325313603,325313603,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-17 18:17:14,"In commit ""Implement LoadKeyPool in LegacyScriptPubKeyMan"" (0d701bd42d0d9db9da858a4e6ae346ae0b1dda90)\n\nEmpty `src/qt/stqG2SM` file in this commit should be dropped",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325315671,325315671,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-17 18:18:56,"> It's still not clear to me what this is doing.\n\nNor is it to me. It makes the tests pass. That's. it.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325316375,325316375,src/outputtype.cpp
achow101,2019-09-17 18:20:33,I'm not writing an essay. It is completely unnecessary to describe what DUMMY_SIGNATURE_CREATOR does here as you can just look at the `sign.cpp/h` where it is defined and read the comments and code there yourself. It's less than 10 lines.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325317135,325317135,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-17 18:30:27,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325321384,325321384,src/wallet/wallet.h
achow101,2019-09-17 18:30:38,How'd that get there? Removed it.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325321463,325321463,src/wallet/scriptpubkeyman.cpp
Sjors,2019-09-18 07:22:19,"This function has no tests, half a dozen different code paths and calls really confusing legacy code like IsMine. There's probably less than 5 people on the planet who understand it, and even fewer who understand the ways this can break for some weird use cases. The only excuse for not documenting it is if it's copied from a legacy function.  \n<img width=""775"" alt=""Schermafbeelding 2019-09-18 om",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325517950,325517950,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-09-18 16:40:57,Did this call move somewhere? Or is it not important and just dropped?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325779749,325779749,src/wallet/walletdb.cpp
achow101,2019-09-18 16:44:30,I've added some comments.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325781298,325781298,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-18 16:52:40,"No.. but we should probably keep it, so I've added it back in.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325784914,325784914,src/wallet/walletdb.cpp
achow101,2019-09-18 17:14:23,Yes. Changed,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325794240,325794240,src/wallet/wallet.cpp
achow101,2019-09-18 17:30:45,I don't think it makes sense to have a comment with such specific information about the wallet in the non-wallet signing code. There's already a comment there explaining why we try to sign for all keys.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325801604,325801604,src/script/sign.cpp
ryanofsky,2019-09-18 17:56:30,"I wasn't sure if the new `m_spk_managers.empty()` condition here is equivalent to the previous `mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()` condition. I think it is equivalent because the `LoadWallet(*this)` call above will only call `GetLegacyScriptPubKeyMan()` internally if keys are found, and if it does not, `SetupLegacyScript",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325813587,325813587,src/wallet/wallet.cpp
ryanofsky,2019-09-19 18:11:14,"CWallet::fDecryptionThoroughlyChecked variable isn't actually used anymore, only assigned to. It should probably either be used or removed. Maybe it's not necessary anymore since keyman has the same variable.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326313799,326313799,src/wallet/wallet.cpp
ryanofsky,2019-09-19 19:08:49,"It'd make more sense to call spk_man_pair.second->IsHDEnabled on the individual keyman object than IsHDEnabled on the wallet object, which is the intersection of all IsHDEnabled statuses.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326338427,326338427,src/wallet/wallet.cpp
achow101,2019-09-19 20:43:08,"Yes, that is correct. That's pretty much the only reason `GetLegacyScriptPubKeyMan` also creates a `LegacyScriptPubKeyMan`.\n\nThe checks for null are for the future when we have more `ScriptPubKeyMan` classes.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326374849,326374849,src/wallet/wallet.cpp
achow101,2019-09-19 23:22:26,I've added `GetOrCreateLegacyScriptPubKeyMan`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420749,326420749,src/wallet/wallet.cpp
achow101,2019-09-19 23:22:31,Removed it,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420763,326420763,src/wallet/wallet.cpp
achow101,2019-09-19 23:22:36,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420778,326420778,src/wallet/wallet.cpp
ryanofsky,2019-09-20 15:46:57,"The encryption stuff here is making my head spin. Wallet encryption was already confusing before, but now with CWallet and ScriptPubKeyMan both having duplicate `fUseCrypto`, `SetCrypted()`, `IsCrypted()`,  `vMasterKey`, `IsLocked()` states and code, it's hard to tell which combinations of state are expected, and which are bugs, and whether the code supposed to be keeping states in sync actually w",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326691270,326691270,src/wallet/scriptpubkeyman.h
achow101,2019-09-20 16:42:14,I'll take a look at reworking the encryption state stuff.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326712772,326712772,src/wallet/scriptpubkeyman.h
Sjors,2019-09-21 08:30:11,"In 8a2d51c741b896842e093fa35590ef36abb907c4: `case TX_PUBKEYHASH` contains a bug fix. Maybe move that to a seperate commit so this commit is actually move-only.\n<img width=""566"" alt=""Schermafbeelding 2019-09-21 om 10 27 29"" src=""https://user-images.githubusercontent.com/10217/65370562-746d5380-dc5a-11e9-9eb4-f979ba634ac3.png"">\n",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326852547,326852547,src/wallet/scriptpubkeyman.cpp
Sjors,2019-09-21 08:57:11,"In 3099b7c2dbfd31f4a1747f7e38629e44988d6ef7: for other reviewers, this is more or less lifted from `getaddressinfo` in `rpcwallet.cpp`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326853199,326853199,src/wallet/scriptpubkeyman.cpp
Sjors,2019-09-21 10:17:18,"In d3dde67e4aba051bea38daae60ed80fd4db69d3b:  `GetOldestKeyPoolTime` was introduced in #10235. It calls `GetOldestKeyTimeInPool` for the internal and external keypools. IIUC this gets the timestamp from keypool entry at index 0. For legacy wallets those are the same, so `std::max` is fine. But if we add descriptor wallets, and allow importing them after wallet creation, then `std::max` would retur",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326855205,326855205,src/wallet/wallet.cpp
achow101,2019-09-23 16:10:15,"I've changed the encryption stuff to be mostly in line with @ryanofsky's suggestions.\n\n***\n\n> As far as I can tell the `CWallet::fUseCrypto` state is broken in the current PR. `CWallet::SetCrypted()` used to be called whenever any encrypted data was present, but now that now longer happens, and `CWallet::IsCrypted()` returns false if the wallet hasn't been explicitly encrypted or locked si",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327202951,327202951,src/wallet/scriptpubkeyman.h
achow101,2019-09-23 17:30:00,Moved into its own commit,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327238489,327238489,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-23 17:30:22,"I've changed it to use `min`. Looking at the original implementation in master, it actually looks like it's broken as it uses `max`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327238644,327238644,src/wallet/wallet.cpp
ryanofsky,2019-09-24 19:51:22,I don't think there's any reason for CWallet::encrypted_batch to exist as a member variable anymore. It could just be a local in CWallet::EncryptWallet,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327802999,327802999,src/wallet/wallet.h
ryanofsky,2019-09-24 20:02:12,"Seems like this should use GetLegacyScriptPubKeyMan not GetOrCreateLegacyScriptPubKeyMan to make more sense and be in line with the previous code. Or if GetOrCreateLegacyScriptPubKeyMan is actually better here, probably should drop if (spk_man) condition which would never be false",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327807578,327807578,src/wallet/walletdb.cpp
achow101,2019-09-24 20:08:22,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327810122,327810122,src/wallet/wallet.h
achow101,2019-09-24 20:08:41,Changed to GetLegacyScriptPubKeyMan.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327810255,327810255,src/wallet/walletdb.cpp
ryanofsky,2019-09-25 16:59:19,It'd be good to initialize this to nullptr since it's not set in the constructor like pwallet is,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328235024,328235024,src/wallet/wallet.h
ryanofsky,2019-09-25 19:35:44,SetWalletFlag method and override don't seem to be called anymore could be removed.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328303075,328303075,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-26 17:20:22,Looks like this should be removed. (Calls and definition were removed but not this declaration.),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328732616,328732616,src/wallet/wallet.h
ryanofsky,2019-09-26 18:29:37,"In commit ""Remove unused functions and switch CWallet to use ScriptPubKeyMan"" (47b342db0ddb1bc9bc595635e36bb2f16921a605)\n\nThere's no replacement for this function and I think losing it might break `CWallet::GetKeyBirthTimes` for encrypted wallets. Regardless, this should probably become a keyman method instead of being removed so the SigningProvider interface returns consistent results.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328763555,328763555,src/wallet/wallet.cpp
ryanofsky,2019-09-26 18:48:32,"Master key argument should be a const reference, not mutable. Also these arguments could be named master_key, since there's no longer any vMasterKeyIn/vMasterKey conflict.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328771626,328771626,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-26 19:24:42,"The `fUseCrypto` variable seems completely pointless now that IsCrypted is locking `cs_KeyStore` and checking `mapCryptedKeys.empty()`. As far as I can tell it only barely made sense before as an optimization to avoid locking. \n\nWould suggest dropping `fUseCrypto` and dropping the `SetCrypted` method, just replacing `if(!SetCrypted()) return false` calls with `if (!mapKeys.empty()) return fals",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328786049,328786049,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-26 19:39:59,"`fUseCrypto` is needed for wallet loading in order to load the initial encrypted key. In that situation, `mapCryptedKeys` will be empty because no keys have been loaded into memory.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328791872,328791872,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-26 19:48:52,It's used in descriptor wallets (next PR).,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328795311,328795311,src/wallet/scriptpubkeyman.h
achow101,2019-09-26 20:08:48,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803423,328803423,src/wallet/wallet.h
achow101,2019-09-26 20:08:54,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803470,328803470,src/wallet/wallet.h
achow101,2019-09-26 20:09:12,Added `LegacyScriptPubKeyMan::GetKeys`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803605,328803605,src/wallet/wallet.cpp
achow101,2019-09-26 20:09:16,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803649,328803649,src/wallet/scriptpubkeyman.h
ryanofsky,2019-09-27 17:26:00,"re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328791872\n\n> `fUseCrypto` is needed for wallet loading in order to load the initial encrypted key. In that situation, `mapCryptedKeys` will be empty because no keys have been loaded into memory.\n\nI think since you removed the `SetCrypted` call at the beginning of  `CWallet::Lock`, the `fUseCrypto` variable no longer contains any",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329175077,329175077,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-27 17:55:24,It doesn't feel like that is safe. A blank wallet would have `mapKeys` empty so would that be considered encrypted?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329186223,329186223,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-09-27 18:04:28,"> It doesn't feel like that is safe. A blank wallet would have `mapKeys` empty so would that be considered encrypted?\n\nNo, but I'm not suggesting that. `HasEncryptedData()` could return `!mapCryptedKeys.empty()` and `fUseCrypto` and `SetCrypted` could both be deleted. The two `if(!SetCrypted()) return false` lines would just be replaced by `if (!mapKeys.empty()) return false`",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329189701,329189701,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-27 19:22:17,"> No, but I'm not suggesting that. `HasEncryptedData()` could return `!mapCryptedKeys.empty()` and `fUseCrypto` and `SetCrypted` could both be deleted. The two `if(!SetCrypted()) return false` lines would just be replaced by `if (!mapKeys.empty()) return false`\n\nThis does not work since `mapKeys` is not empty utnil after a wallet is encrypted, but the places the `SetCrypted` are used are `AddC",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329217901,329217901,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-09-27 19:48:34,"> This does not work since `mapKeys` is not empty utnil after a wallet is encrypted, but the places the `SetCrypted` are used are `AddCryptedKey` which is used during `Encrypt`.\n\nWow, that's confusing. It makes the meaning of the fUseCrypto member very difficult to describe. How about just clearing mapKeys at the beginning instead of the end of the encrypt function?\n\n```diff\n-    fUseCry",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329226289,329226289,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-27 20:23:49,This breaks blank encrypted wallets (necessary for born encrypted wallets).,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329237540,329237540,src/wallet/scriptpubkeyman.cpp
achow101,2019-09-27 21:16:29,I was able to remove `fUseCrypto` and instead used a check for whether there were any encryption keys present (required adding `HasEncrytionKeys` to `WalletStorage`).,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329254277,329254277,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-02 16:26:10,Might be good to standardize on `GetKeyPoolSize` pr `GetKeypoolSize` (both are used after this change),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330647648,330647648,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-02 17:12:40,"In commit ""Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan"" (26c1ebe6a7bea812860636f9d7316fc71b8d90dc)\n\nIs it a bugfix to include set_pre_split_keypool size in this return value? Wallet method doesn't do this, so behavior seems to change in later commit 937cf1e2265ace44147475dc9da8a5ec0b1dda47\n\nhttps://github.com/bitcoin/bitcoin/blob/f4",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330669214,330669214,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-02 17:33:44,"In commit ""[ci skip] Use GetTimeFirstKey instead of nTimeFirstKey"" (4b7effe37f5efeddb54523b95e58d464bc317e7f)\n\nIs this a bug? It seems like this should say\n\n```\ntime_first_key = std::min(time_first_key, spk_man->GetTimeFirstKey());\n```\n\nIf this is a bug, I'm a little surprised there isn't any test coverage for this.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330679044,330679044,src/wallet/wallet.cpp
achow101,2019-10-02 21:36:14,"Yes, that is a bug fix.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330782874,330782874,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-02 22:44:15,Standardized on `GetKeyPoolSize` as that was already being used.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330802916,330802916,src/wallet/scriptpubkeyman.h
achow101,2019-10-02 22:44:43,"Seems like a bug, fixed. Changing it has no effect on any tests...",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330803035,330803035,src/wallet/wallet.cpp
ryanofsky,2019-10-03 17:42:40,"I think it'd make sense to add `if (HasEncryptionKeys()) return true;` before this loop so `IsCrypted` meaning is unchanged and it'll reliably return true if wallet encryption is present, regardless of what keyman instances are created and how they function internally.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331166476,331166476,src/wallet/wallet.cpp
ryanofsky,2019-10-03 17:54:28,"Not asking for this change here since it could be a pain to backport, but in the future I think it'd be nicer if `HasEncryptedData` simply returned `!mapCryptedKeys.empty()` and `HasEncryptionKeys` simply returned `!mapMasterKeys.empty()` so the two functions would be independent and not call each other.\n\nAt call sites, I think it would be an improvement to write:\n\n```c++\nif (!m_storage.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331172037,331172037,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-03 18:06:04,Should this be called `m_storage` instead of `storage`?  Also any particular reason this is private and not protected so keyman implementations could access the interface directly without having to go through an extra hop?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331177535,331177535,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-03 18:12:07,"Not asking for this change here since it could be a pain to backport, but in the future I think it'd be nicer to drop these wrapper functions and for keyman implementations to explicitly call storage methods, so the split between what data is managed by the top level wallet class and what data is managed by individual keyman implementations is clearer.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331180197,331180197,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-03 18:23:12,"Should drop this clear. The map is already cleared above, so having this extra clear separated by a long loop seems confusing and maybe dangerous if the code is changed again in the future",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331185255,331185255,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-03 18:31:54,Sure. I used the wrappers so that moved code wouldn't need to change.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331189178,331189178,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-03 18:58:00,"Why is `&& !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` added here? This seems broken because why would you want to return true from GetReserved if reserving a key failed? But it also seems like it should not be able to make any difference because the CanGetAddresses call above would return false if private keys were disabled.\n\nI'd suggest either dropping this condition or adding an exp",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331200677,331200677,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-03 19:02:12,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202436,331202436,src/wallet/wallet.cpp
achow101,2019-10-03 19:02:26,Changed to `m_storage` and made protected.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202538,331202538,src/wallet/scriptpubkeyman.h
achow101,2019-10-03 19:02:34,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202617,331202617,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-03 19:50:37,"This TopUp seems newly added rather than moved, and the return value isn't checked. Tests also seem to pass without it. I also noticed TopUp calls were removed in `GetNewChangeDestination` and `CreateWalletFromFile`, and I don't know why.\n\nThese changes seem ok, but I guess the things I'd like to know would be:\n\n1. If something in particular motivated these changes, or if they just seemed ",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331221791,331221791,src/wallet/wallet.cpp
achow101,2019-10-03 20:10:54,"This particular `TopUp` was moved from `GetNewChangeDestination` into `GetReservedDestination` because `GetNewChangeDestination` does not determine which `ScriptPubKeyMan` to use, but `GetReservedDestination` does.\n\nWhere in `CreateWalletFromFile` were `TopUp`s removed? It's likely that those were rolled into `SetupGeneration`.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331229987,331229987,src/wallet/wallet.cpp
achow101,2019-10-03 20:30:40,"Removed. I don't remember why they were added, could have been due to some previous change that was since changed so they are no longer needed.\n\nI believe the CanGetAddresses check is for sanity.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331238394,331238394,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-03 20:31:00,"Ok, thanks for the explanation. The changes here do make sense since they're just moves. I didn't realize the GetNewChangeDestination and GetReservedDestination changes were related, or that SetupGeneration calls TopUp (indirectly through LegacyScriptPubKeyMan::NewKeyPool).\n\n",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331238553,331238553,src/wallet/wallet.cpp
ryanofsky,2019-10-04 19:29:38,"In the original line that this was copied from there was a `&& !DISABLE_PRIVATE_KEYS` check, I believe to avoid the `GenerateNewKey` call below. I think this got accidentally deleted in a [recent update](https://github.com/bitcoin/bitcoin/compare/c14ad7a89811cb1efe6ed82dff22890dc654ac44..ce944a2f30b21f9950fd5f5b69a860eb180d2eb9) and would be good to restore:\n\nhttps://github.com/bitcoin/bitcoin",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331653700,331653700,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-04 19:53:30,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331661838,331661838,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-10-06 10:42:50,"Should remove CryptedKeyMap, WatchOnlySet, and WatchKeyMap definitions from wallet.h since they are now unused and duplicated in scriptpubkeyman.h",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331781942,331781942,src/wallet/wallet.h
ryanofsky,2019-10-06 11:01:06,"Can this be changed to start with max int rather than the current time, similar to the other oldest key loop:\n\nhttps://github.com/bitcoin/bitcoin/blob/2d8785dd618b85dd8714d70a47e066be9b6e1969/src/wallet/wallet.cpp#L3830-L3833\n\nIt seems nicer as an API if GetOldestKeyPoolTime would return a fixed value you could check against, rather than an ever changing current time.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331782858,331782858,src/wallet/wallet.cpp
achow101,2019-10-06 15:25:37,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331795189,331795189,src/wallet/wallet.h
achow101,2019-10-06 15:25:42,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331795192,331795192,src/wallet/wallet.cpp
ryanofsky,2019-10-09 15:03:22,"The `EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore)` annotation appears to be a mistake. `Wallet::GetNewDestination` calls this method without acquiring cs_KeyStore:\n\nhttps://github.com/bitcoin/bitcoin/blob/0fb52e481f411fdf67257965a9144522b4bac87c/src/wallet/wallet.cpp#L3082\n\nThe only reason there's no compile error is that the call is happening through the overridden declaration above which is mis",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333067248,333067248,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-09 15:11:35,"The EXCLUSIVE_LOCKS_REQUIRED annotation here is a little dodgy because the parent virtual method doesn't have the same annotation, so it will be bypassed if this is called through the parent class.\n\nTo address this, it might be a good idea to add EXCLUSIVE_LOCKS_REQUIRED to the parent declaration in SigningProvider, or to add an AssertLockHeld in `LegacyScriptPubKeyMan::AddKeyPubKey` for more ",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333071878,333071878,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-09 15:40:26,"Seems like a bug to no longer set ReserveDestination::address here, since it might be needed later to call ReturnDestination:\n\nhttps://github.com/bitcoin/bitcoin/blob/0fb52e481f411fdf67257965a9144522b4bac87c/src/wallet/wallet.cpp#L3294\n\nShould there be a `this->address = dest` line after the GetReservedDestination call above?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333088178,333088178,src/wallet/wallet.cpp
Sjors,2019-10-09 16:16:27,"I think the `address` property is unused, so we could just drop it: https://github.com/Sjors/bitcoin/commit/aa5ea3768a2858d7776d798edf63b421849b9714",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333106660,333106660,src/wallet/wallet.cpp
achow101,2019-10-09 17:22:13,"While it may be unused, it may also be useful in the future with other ScriptPubKeyMans. I think it also makes more sense for ReserveDestination to explicitly have the destination stored as that was part of why that was added. I've added `address = dest` back in.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135820,333135820,src/wallet/wallet.cpp
achow101,2019-10-09 17:22:22,Changed to lock internally.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135893,333135893,src/wallet/scriptpubkeyman.h
achow101,2019-10-09 17:22:29,Changed to lock internally.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135945,333135945,src/wallet/scriptpubkeyman.h
instagibbs,2019-10-11 20:30:15,micro-nit: `ScriptHash sh(script);`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334162874,334162874,src/outputtype.cpp
instagibbs,2019-10-11 20:34:47,nit: Check for what about the decryption check?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334164302,334164302,src/wallet/scriptpubkeyman.h
instagibbs,2019-10-11 20:55:43,future cleanup: Redundant with `HasEncryptionKeys`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171008,334171008,src/wallet/wallet.cpp
instagibbs,2019-10-11 20:57:37,CWallet also needs this apparently?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171593,334171593,src/wallet/scriptpubkeyman.h
instagibbs,2019-10-11 20:58:11,"non-blocking nit: No longer an extension of a keystore, which isn't found anywhere anymore",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171753,334171753,src/wallet/wallet.h
instagibbs,2019-10-11 21:00:57,"Can this explanation be made more concrete? Why are these things set here versus elsewhere in ScriptPubKeyMans/CWallet?\n\n""storage"" vs ""database"", why does the database in ScriptPubKeyMan and referenced inside m_storage as well?",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334172583,334172583,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-11 21:30:06,"re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334172583\n\n> ""storage"" vs ""database"", why does the database in ScriptPubKeyMan and referenced inside m_storage as well?\n\nThere isn't a good reason for this. I marked the change adding `m_database` as one of the ""Unclear if this change is necessary or useful"" changes in my branch: d18e2cd8642a6b4e73be0482ef19f76698f1ef62",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334180949,334180949,src/wallet/scriptpubkeyman.h
instagibbs,2019-10-11 21:31:29,The underlying relations were explained to me offline. Incoming expanded comment hopefully.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334181291,334181291,src/wallet/scriptpubkeyman.h
achow101,2019-10-11 21:47:39,Done,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185253,334185253,src/outputtype.cpp
achow101,2019-10-11 21:47:46,Added a comment,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185287,334185287,src/wallet/scriptpubkeyman.h
achow101,2019-10-11 21:49:00,Expanded the comment.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185580,334185580,src/wallet/scriptpubkeyman.h
achow101,2019-10-11 21:49:07,Shortened.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185612,334185612,src/wallet/wallet.h
instagibbs,2019-10-12 12:22:57,"""Wallet storage for things""",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334235346,334235346,src/wallet/scriptpubkeyman.h
achow101,2019-10-12 16:38:35,I think it is correct as is. It's things for wallet storage that ScriptPubKeyMans need.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334244909,334244909,src/wallet/scriptpubkeyman.h
meshcollider,2019-10-16 07:08:35,"This comment isn't the clearest, its only right now that this is true. But I guess you're changing this soon in the other PR anyway.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335308063,335308063,src/wallet/wallet.cpp
meshcollider,2019-10-16 07:10:26,nit: `its`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335308590,335308590,src/wallet/scriptpubkeyman.h
meshcollider,2019-10-16 07:12:48,All of these are properties of the wallet itself as you describe in the comment above. Why make them accessible from each scriptpubkeymanager? (d89011ffca9144ddd28e53177d5e722fadaf2164 Add WalletStorage class and have CWallet inherit it),https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335309406,335309406,src/wallet/scriptpubkeyman.h
meshcollider,2019-10-16 08:00:36,"This constant is used elsewhere in the code too (e.g. BIP32PubkeyProvider), it would be good to factor it out everywhere (not important for this PR though)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335327981,335327981,src/wallet/scriptpubkeyman.cpp
meshcollider,2019-10-16 10:07:52,I don't really understand why this is a function in LegacyScriptPubKeyMan. IMO these should be moved out into standalone functions and just SetHDSeed should be part of the LegacyScriptPubKeyMan. Or just combine these functions with SetHDSeed so it derives+sets at the same time.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335388112,335388112,src/wallet/scriptpubkeyman.cpp
meshcollider,2019-10-16 10:24:54,This could be simplified for readability ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335395116,335395116,src/wallet/scriptpubkeyman.cpp
meshcollider,2019-10-16 10:30:03,Why is this TODO here? ,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335397238,335397238,src/wallet/scriptpubkeyman.cpp
meshcollider,2019-10-16 10:40:08,"The commit title is wrong, Address ->  Destination",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335401162,335401162,src/wallet/scriptpubkeyman.cpp
meshcollider,2019-10-16 11:23:30,why not just return true and get rid of `result`,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335417034,335417034,src/wallet/wallet.cpp
meshcollider,2019-10-17 03:23:40,"new_version isn't used? What situation did you have in mind for this? I haven't checked to see if this changes in descriptor wallets yet so I won't be surprised if its here for the future, but it seems weird not to check it before upgrading to HD (new_version = prev_version should be a noop)",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335795086,335795086,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:21:50,"They were originally together but later split apart to allow for the `sethdseed` RPC. I suppose it should be `DeriveAndSetHDSeed` which calls `SetHDSeed`. But since this is moved from how it is currently, I will leave it as is.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804231,335804231,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:22:22,Maybe for a followup? Would prefer to leave this as a move,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804296,335804296,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:22:38,It was moved from the original implementation.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804337,335804337,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:25:20,"IIRC I had that there originally for upgrading a legacy wallet to a descriptor wallet. But since we are no longer doing that, it can be removed. I believe it was going to be used in combination with #15761 (or rather #15761 was split from an earlier implementation).",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804729,335804729,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:30:09,"Yes, should be cleaned up in a follow up.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335805424,335805424,src/wallet/scriptpubkeyman.cpp
achow101,2019-10-17 04:43:58,I've updated the comment to be a bit clearer. I don't think it will be changed with descriptor wallets.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807599,335807599,src/wallet/wallet.cpp
achow101,2019-10-17 04:44:03,Fixed.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807615,335807615,src/wallet/scriptpubkeyman.h
achow101,2019-10-17 04:44:53,Done. Got rid of `result`.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807733,335807733,src/wallet/wallet.cpp
achow101,2019-10-17 04:46:38,"Removed `new_version`.\n\nFor anyone who is wondering why this is works and/or is safe, the new version is set as the wallet maximum version so all of the `CanSupportFeature` calls will fail if the specified new version is too low.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335808058,335808058,src/wallet/scriptpubkeyman.cpp
Sjors,2019-10-25 09:02:57,"@meshcollider several of these (`protected`) methods are used by each scriptpubkeymanager. E.g. `IsWalletFlagSet()` is checked in `LegacyScriptPubKeyMan::UpgradeKeyMetadata()`. `UnsetWalletFlagWithDB()` is used to mark a wallet as no longer blank when a key is added. `GetDisplayName()` and `SetWalletFlag` are unused, but I'm fine with keeping them for completeness.",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r338954347,338954347,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-25 12:57:06,"re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r338954347\n\n> @meshcollider several of these (`protected`) methods are used by each scriptpubkeymanager. E.g. `IsWalletFlagSet()` is checked in `LegacyScriptPubKeyMan::UpgradeKeyMetadata()`. `UnsetWalletFlagWithDB()` is used to mark a wallet as no longer blank when a key is added. `GetDisplayName()` and `SetWalletFlag` are unused, bu",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339038093,339038093,src/wallet/scriptpubkeyman.h
Sjors,2019-10-25 14:06:43,I don't have strong feelings on whether the left or right side of 2d08c30 is more clear. Explicit references to `m_storage` might discourage relying on it more; is the long term goal to get rid of `m_storage` usage in `ScriptPubKeyMan`s?,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339070546,339070546,src/wallet/scriptpubkeyman.h
ryanofsky,2019-10-25 14:48:07,"> is the long term goal to get rid of `m_storage` usage in `ScriptPubKeyMan`s?\n\nThis would be a surprise to me. As far as I know, key managers will continue to need a way to read and store data in the wallet database, and `WalletStorage` provides a limited and controlled interface for doing that. \n\nEven if the wallet storage interface is going to be eliminated or cut back at some point, ha",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339091287,339091287,src/wallet/scriptpubkeyman.h
achow101,2019-10-25 15:53:06,They can be removed in a follow up PR. The intention of wrapping up each function was to make the moves less painful and more clear that they were moves.,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339122743,339122743,src/wallet/scriptpubkeyman.h
Sjors,2020-02-11 18:16:51,Now we know :-) #18067,https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377810942,377810942,src/outputtype.cpp
ryanofsky,2020-02-11 18:37:13,"re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377810942\n\nWow, missed this thread. Reviewers: ""I don't know what this this doing."" Author: ""Me either, but it makes tests pass."" Reviewers: ""ACK"" ""ACK""\n\nYou guys! :heart:",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377821931,377821931,src/outputtype.cpp
Sjors,2020-02-11 19:21:39,"There was a bit more back and forth, but yeah... :-(",https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377846419,377846419,src/outputtype.cpp
