theuni,2017-04-03T20:27:42Z,"Concept ACK. Though if we're going to be exposing this value to our apis, we need to define it sanely first.\n\nATM it's just an int, so it's tricky encode/decode it safely. I'd prefer change it to a uint32_t first, so that we can use ParseUInt32 here.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291263527,291263527,
gmaxwell,2017-04-03T21:23:01Z,"Concept ACK, I've wanted this many times before... but I'm concerned about the nodeid--- right now if it wraps bad things happen, and it will be harder to fix if we've made it a part of the API.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291278184,291278184,
theuni,2017-04-03T21:52:51Z,"edit: Decided I didn't like this thought and bailed. Meant to cancel, closed instead. Sorry!",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291285238,291285238,
theuni,2017-04-03T23:27:39Z,"I suppose it would be prudent to\n- determine where we assume nodeids are increasing in value, as opposed to just being unique. I should hope there are none of these, other than generally being able to assume that higher node == earlier connection\n- determine when we assume a nodeid to be globally unique. For example, if there's a global map<nodeid,int> that tallies sent bytes, that would be br",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291314820,291314820,
theuni,2017-04-04T03:05:45Z,"See https://github.com/theuni/bitcoin/commit/57ea0cc55e0368466c32f3fd272e48504ab2871d for the wrapping/defining changes. Still need to verify the first two points above, though.\n\n@jnewbery If you don't object, I'll go ahead and PR that as a prerequisite for this one.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291381298,291381298,
laanwj,2017-04-04T06:54:18Z,"> Concept ACK. Though if we're going to be exposing this value to our apis, we need to define it sanely first.\n\nThis value is already exposed in APIs since `getpeerinfo` added `{""id"": 14669}`. Handling wrapping sanely is important, but I don't think this is a blocker for more usage on the RPC API. Client applications should treat these numbers as opaque identifiers and the only thing they can ",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291410743,291410743,
TheBlueMatt,2017-04-04T09:30:32Z,"Found myself wanting this for disconnect after reading debug.log many times, annoying to have to getpeerinfo for it.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291445489,291445489,
jnewbery,2017-04-04T21:38:36Z,"@theuni - of course, no objection at all!",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291639710,291639710,
sipa,2017-04-04T22:29:39Z,> Â there can't be any ambiguity at all between nodeIds and IP addresses\n\nWell you can write an IPv4 address as a decimal integer... I guess we're excluding that (very uncommon) usage?,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291654066,291654066,
laanwj,2017-04-05T09:23:02Z,"> Well you can write an IPv4 address as a decimal integer... I guess we're excluding that (very uncommon) usage?\n\n+1. Exactly. This is exactly why these things get ugly. There's always overlaps in representations that you may not be thinking about in the initial design, then get realized later. Let's just take the sane route here and make the ambiguity impossible.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291804273,291804273,
jnewbery,2017-04-05T14:09:25Z,"> Let's just take the sane route here and make the ambiguity impossible.\n\nYep, fine.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291873071,291873071,
jnewbery,2017-04-05T14:15:20Z,"ok, another idea. I think it's reasonable that people might want to update node by id in other ways (ie switching whitelisting on and off, changing ban score, etc). How would you feel about an updatenode RPC to do those things? To begin with it will allow disconnecting and turning whitelisting on/off, and it can be added to later if people think further functionality is useful.\n\nI already have",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-291874889,291874889,
jnewbery,2017-04-05T21:52:04Z,"I've added an `updatepeer` RPC here: #10160 which I think is better and more extensible, but I'd be interested to hear others' thoughts.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292008255,292008255,
laanwj,2017-04-07T15:02:23Z,"I don't think 'updatepeer X disconnect' is clearer than 'disconnectnode'. Having the RPC call as the verb is easier to use and remember.\n\nWe have an example of a very bad multiplexed call in the API: `addnode X remove`. Your proposal isn't half as crazy as that :) And the idea of having a `updatenode` makes sense for changing other per-node variables, certainly for testing/debugging, but I don",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292561280,292561280,
jnewbery,2017-04-07T16:13:14Z,"Yes, `addnode X remove` is nuts, and I agree that having the RPC call as the verb is sensible.\n\nI'll reimplement this as an additional argument to disconnectnode.\n\nLonger term, my thinking around updatepeer is that it'd be handy as a swiss army knife for peer interop. We may wish to disconnect/ban/whitelist/change other attributes/etc for peers, and having a single RPC that does all of tha",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292580430,292580430,
jnewbery,2017-04-07T20:55:41Z,"I've pushed a version where disconnectnode now takes two arguments: address and nodeid. Strictly one argument must be given. (note: with named arguments, you can just supply a single argument, with positional arguments you need to set 'address' to the empty string if you want to use 'nodeid').\n\nI changed the name of the existing argument from 'node' to 'address', since it only takes address. I",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292649420,292649420,
luke-jr,2017-04-08T14:07:23Z,"While you can write an IP as a decimal number, you can't specify an IP *plus port* in such a manner. Makes perfect sense to say String = IP and Number = nodeid IMO. Don't care too strongly if the current (two arguments) approach is used, but I wouldn't call it sane. :p",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292720403,292720403,
jnewbery,2017-04-10T13:14:47Z,"@luke-jr thanks for the review. I agree that the two arguments approach looks a bit odd when used as positional arguments, but it makes perfect sense when using named arguments: call the RPC with address=<address> if you want to disconnect by address, or call with nodeid=<nodeid> if you want to disconnect by nodeid. The fact that it works at all with positional arguments is more a historical quirk",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-292945554,292945554,
gmaxwell,2017-04-11T08:53:48Z,"(aside, the addnode thing isn't that nuts if you thing of it as a shortening of ""addednodelist <verb>"", which is what it actually is :) )",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-293194105,293194105,
jnewbery,2017-04-11T13:07:32Z,"> aside, the addnode thing isn't that nuts if ...\n\nYes, it makes sense if you're a scholar of Bitcoin Core code archaeology :)\n\nIt'd be nice if `addnode` could be renamed to `trusted peer` or `persistent peer`, but that's a lot of work (and a change to public APIs).",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-293255283,293255283,
jnewbery,2017-04-13T12:48:13Z,"@MarcoFalke indeed. See my earlier comment:\n\n> I changed the name of the existing argument from 'node' to 'address', since it only takes address. I think that's the right thing to do since the current name is misleading, but we'll need release notes to document the API change.\n\nThe fact that this argument is currently called 'node' and the help text say `(string, required) The node (see ge",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-293885720,293885720,
jnewbery,2017-04-13T15:36:27Z,"Rebased and squashed, with a couple of code cleanups.\n\n#10176 is merged so this is now ready for review.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-293931479,293931479,
MarcoFalke,2017-04-13T19:13:13Z,"@jnewbery Yeah sorry for missing that. During my review flow I look at the code first, then read the comments before sending the ACK.\n\nGenerally I think it makes sense to keep breaking changes at a minimum or at least don't splatter them across consecutive releases. As we already have such a breaking change in 0.14.1 it makes sense to bundle this one in as well.\n\nWould you mind to create a",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-293995368,293995368,
jnewbery,2017-04-17T13:39:49Z,rebased,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-294487301,294487301,
jnewbery,2017-04-18T15:56:47Z,fixed @laanwj's review comment.,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-294890470,294890470,
sdaftuar,2017-04-18T16:26:48Z,ACK 18718846c9ab7b7b4392912a14e1a64e9136e970,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-294900322,294900322,
luke-jr,2017-04-19T01:45:58Z,@jnewbery I don't consider positional arguments to be merely historical.,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295038005,295038005,
jnewbery,2017-04-19T14:51:50Z,Rewritten using @laanwj's suggested structure.,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295297370,295297370,
jnewbery,2017-04-19T17:50:29Z,"Thanks @luke-jr . Nits addressed.\n\nI've added tests for the new functionality in the nodehandling.py test script (and renamed it to disconnect_ban.py). Whilst I was there I tidied up the test script, reduced the dependencies on standard libraries, and reduced the runtime from 20s to 9s on my pc.\n\nHappy to split the test script changes out into a new PR if that's preferable for people.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295364886,295364886,
laanwj,2017-04-20T09:47:16Z,utACK d54297f,https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295656517,295656517,
jnewbery,2017-04-20T13:26:53Z,"@laanwj thanks for merging (and thanks for the suggestion of structuring the disconnectnode code differently). In future, feel free to squash my test commits before merging, or ask me to squash. I feel like micro commits are helpful for reviewers, but don't necessarily need to be in the history.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295737895,295737895,
laanwj,2017-04-20T18:23:50Z,"@jnewbery Yes, that would have made sense. I try to keep some pace in merging things once they're ready to merge, as there are so many PRs held up on one thing or another.",https://github.com/bitcoin/bitcoin/pull/10143#issuecomment-295844888,295844888,
laanwj,2017-04-04T06:48:21Z,"Concept ACK, but please make this API explicit.\n\n- APIs that switch based on magic heuristics on how a value 'looks'. Initially this seems user friendly, but it will quickly grow to maintainable, insecure monsters of obscure rules. It should be made completely explicit.\n\n- Also: do not encode integers as strings and use functions like std::stoi. Just use .get_int() if you need an int value",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r109587798,109587798,src/rpc/net.cpp
jnewbery,2017-04-04T21:35:31Z,"Yes, I agree that APIs shouldn't be magic. I thought it wouldn't be too problematic here because there can't be any ambiguity at all between nodeIds and IP addresses (and `disconnectnode()` is already a bit magic - it can take either IPv4 or IPv6 addresses).\n\nI don't like the proliferation of additional RPCs that perform a very small function if we can avoid it.\n\nHow about we add a new arg",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r109783590,109783590,src/rpc/net.cpp
laanwj,2017-04-05T09:21:52Z,"> How about we add a new argument to this RPC called ""nodeId""? The RPC can be called with strictly one of the arguments. There's no magic or ambiguity, and the node disconnection logic is contained within one RPC.\n\nSounds reasonable to me. To be clear: anything that doesn't encode the integer as a string is more reasonable to me than this (another reason: because it allows passing the 'id' val",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r109867692,109867692,src/rpc/net.cpp
luke-jr,2017-04-08T14:05:04Z,"Second argument is missing here\n",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r110519238,110519238,src/rpc/net.cpp
jnewbery,2017-04-10T13:17:40Z,Thanks. Help text now fixed. I'll squash the commit when this is ready for merge.,https://github.com/bitcoin/bitcoin/pull/10143#discussion_r110651474,110651474,src/rpc/net.cpp
MarcoFalke,2017-04-13T08:39:25Z,"This is yet another breaking change. Needs rationale and mention in the release notes. Maybe backport.\n\n\n```\nJSONRPCException: Unknown named parameter address (-8)",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r111337812,111337812,src/rpc/net.cpp
laanwj,2017-04-18T14:11:20Z,"Please mention in the documentation that only one of either can be provided, and the other one needs to be null (or missing, in case of the second argument, I guess).\nAlso I'd prefer a space after `ID` before `(` otherwise it looks like a parametrized something",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r111963404,111963404,src/rpc/net.cpp
luke-jr,2017-04-19T01:40:53Z,Use `address` here?,https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112100775,112100775,src/rpc/net.cpp
luke-jr,2017-04-19T01:41:27Z,"What about `disconnectnode(""address"", null)`?",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112100829,112100829,src/rpc/net.cpp
luke-jr,2017-04-19T01:42:02Z,`get_int64`,https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112100873,112100873,src/rpc/net.cpp
laanwj,2017-04-19T08:12:17Z,"Right, I also wondered about that.\nMy recommendation, also for readability, would be to structure this symmetrically e.g.\n```c++\nconst UniValue &address_arg = request.params[0];\nconst UniValue &id_arg = request.params.size() < 2 ? NullUniValue : request.params[1];\n...\nif (!address_arg.IsNull() && id_arg.IsNull()) {\n    /* handle kick-by-address */\n    std::string address = address_",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112139563,112139563,src/rpc/net.cpp
laanwj,2017-04-19T08:19:22Z,"General advice when designing new RPC APIs: please try to treat IsNull arguments the same as missing arguments, both in the middle as at the end. I know a lot of the current RPCs don't heed that advice, but that's something that needs to be improved to prevent unexpected behavior when switching to using named arguments.",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112140887,112140887,src/rpc/net.cpp
jnewbery,2017-04-19T14:50:20Z,Thanks @laanwj. That's good advice. I've rewritten this function based on your suggested structure.,https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112223987,112223987,src/rpc/net.cpp
luke-jr,2017-04-19T15:42:44Z,This doesn't convey that address is also optional.,https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112238922,112238922,src/rpc/net.cpp
luke-jr,2017-04-19T15:43:06Z,"s/int/number/\n\nJSON doesn't have ints.",https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112239030,112239030,src/rpc/net.cpp
